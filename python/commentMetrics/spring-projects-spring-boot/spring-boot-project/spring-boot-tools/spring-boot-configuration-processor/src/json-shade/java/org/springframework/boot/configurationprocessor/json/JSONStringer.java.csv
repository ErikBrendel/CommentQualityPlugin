# id;timestamp;commentText;codeText;commentWords;codeWords
JSONStringer -> private void beforeValue() throws JSONException;1515446271;Inserts any necessary separators and whitespace before a literal value, inline_array, or inline object. Also adjusts the stack to expect either a closing bracket_or another element._@throws JSONException if processing of json failed;private void beforeValue() throws JSONException {_		if (this.stack.isEmpty()) {_			return__		}__		Scope context = peek()__		if (context == Scope.EMPTY_ARRAY) { _			replaceTop(Scope.NONEMPTY_ARRAY)__			newline()__		}_		else if (context == Scope.NONEMPTY_ARRAY) { _			this.out.append(',')__			newline()__		}_		else if (context == Scope.DANGLING_KEY) { _			this.out.append(this.indent == null ? ":" : ": ")__			replaceTop(Scope.NONEMPTY_OBJECT)__		}_		else if (context != Scope.NULL) {_			throw new JSONException("Nesting problem")__		}_	};inserts,any,necessary,separators,and,whitespace,before,a,literal,value,inline,array,or,inline,object,also,adjusts,the,stack,to,expect,either,a,closing,bracket,or,another,element,throws,jsonexception,if,processing,of,json,failed;private,void,before,value,throws,jsonexception,if,this,stack,is,empty,return,scope,context,peek,if,context,scope,replace,top,scope,newline,else,if,context,scope,this,out,append,newline,else,if,context,scope,this,out,append,this,indent,null,replace,top,scope,else,if,context,scope,null,throw,new,jsonexception,nesting,problem
JSONStringer -> private void beforeValue() throws JSONException;1516008705;Inserts any necessary separators and whitespace before a literal value, inline_array, or inline object. Also adjusts the stack to expect either a closing bracket_or another element._@throws JSONException if processing of json failed;private void beforeValue() throws JSONException {_		if (this.stack.isEmpty()) {_			return__		}__		Scope context = peek()__		if (context == Scope.EMPTY_ARRAY) { _			replaceTop(Scope.NONEMPTY_ARRAY)__			newline()__		}_		else if (context == Scope.NONEMPTY_ARRAY) { _			this.out.append(',')__			newline()__		}_		else if (context == Scope.DANGLING_KEY) { _			this.out.append(this.indent == null ? ":" : ": ")__			replaceTop(Scope.NONEMPTY_OBJECT)__		}_		else if (context != Scope.NULL) {_			throw new JSONException("Nesting problem")__		}_	};inserts,any,necessary,separators,and,whitespace,before,a,literal,value,inline,array,or,inline,object,also,adjusts,the,stack,to,expect,either,a,closing,bracket,or,another,element,throws,jsonexception,if,processing,of,json,failed;private,void,before,value,throws,jsonexception,if,this,stack,is,empty,return,scope,context,peek,if,context,scope,replace,top,scope,newline,else,if,context,scope,this,out,append,newline,else,if,context,scope,this,out,append,this,indent,null,replace,top,scope,else,if,context,scope,null,throw,new,jsonexception,nesting,problem
JSONStringer -> private void beforeValue() throws JSONException;1516215803;Inserts any necessary separators and whitespace before a literal value, inline_array, or inline object. Also adjusts the stack to expect either a closing bracket_or another element._@throws JSONException if processing of json failed;private void beforeValue() throws JSONException {_		if (this.stack.isEmpty()) {_			return__		}__		Scope context = peek()__		if (context == Scope.EMPTY_ARRAY) { _			replaceTop(Scope.NONEMPTY_ARRAY)__			newline()__		}_		else if (context == Scope.NONEMPTY_ARRAY) { _			this.out.append(',')__			newline()__		}_		else if (context == Scope.DANGLING_KEY) { _			this.out.append(this.indent == null ? ":" : ": ")__			replaceTop(Scope.NONEMPTY_OBJECT)__		}_		else if (context != Scope.NULL) {_			throw new JSONException("Nesting problem")__		}_	};inserts,any,necessary,separators,and,whitespace,before,a,literal,value,inline,array,or,inline,object,also,adjusts,the,stack,to,expect,either,a,closing,bracket,or,another,element,throws,jsonexception,if,processing,of,json,failed;private,void,before,value,throws,jsonexception,if,this,stack,is,empty,return,scope,context,peek,if,context,scope,replace,top,scope,newline,else,if,context,scope,this,out,append,newline,else,if,context,scope,this,out,append,this,indent,null,replace,top,scope,else,if,context,scope,null,throw,new,jsonexception,nesting,problem
JSONStringer -> private void beforeValue() throws JSONException;1518087233;Inserts any necessary separators and whitespace before a literal value, inline_array, or inline object. Also adjusts the stack to expect either a closing bracket_or another element._@throws JSONException if processing of json failed;private void beforeValue() throws JSONException {_		if (this.stack.isEmpty()) {_			return__		}__		Scope context = peek()__		if (context == Scope.EMPTY_ARRAY) { _			replaceTop(Scope.NONEMPTY_ARRAY)__			newline()__		}_		else if (context == Scope.NONEMPTY_ARRAY) { _			this.out.append(',')__			newline()__		}_		else if (context == Scope.DANGLING_KEY) { _			this.out.append(this.indent == null ? ":" : ": ")__			replaceTop(Scope.NONEMPTY_OBJECT)__		}_		else if (context != Scope.NULL) {_			throw new JSONException("Nesting problem")__		}_	};inserts,any,necessary,separators,and,whitespace,before,a,literal,value,inline,array,or,inline,object,also,adjusts,the,stack,to,expect,either,a,closing,bracket,or,another,element,throws,jsonexception,if,processing,of,json,failed;private,void,before,value,throws,jsonexception,if,this,stack,is,empty,return,scope,context,peek,if,context,scope,replace,top,scope,newline,else,if,context,scope,this,out,append,newline,else,if,context,scope,this,out,append,this,indent,null,replace,top,scope,else,if,context,scope,null,throw,new,jsonexception,nesting,problem
JSONStringer -> private void beforeValue() throws JSONException;1520988399;Inserts any necessary separators and whitespace before a literal value, inline_array, or inline object. Also adjusts the stack to expect either a closing bracket_or another element._@throws JSONException if processing of json failed;private void beforeValue() throws JSONException {_		if (this.stack.isEmpty()) {_			return__		}__		Scope context = peek()__		if (context == Scope.EMPTY_ARRAY) { _			replaceTop(Scope.NONEMPTY_ARRAY)__			newline()__		}_		else if (context == Scope.NONEMPTY_ARRAY) { _			this.out.append(',')__			newline()__		}_		else if (context == Scope.DANGLING_KEY) { _			this.out.append(this.indent == null ? ":" : ": ")__			replaceTop(Scope.NONEMPTY_OBJECT)__		}_		else if (context != Scope.NULL) {_			throw new JSONException("Nesting problem")__		}_	};inserts,any,necessary,separators,and,whitespace,before,a,literal,value,inline,array,or,inline,object,also,adjusts,the,stack,to,expect,either,a,closing,bracket,or,another,element,throws,jsonexception,if,processing,of,json,failed;private,void,before,value,throws,jsonexception,if,this,stack,is,empty,return,scope,context,peek,if,context,scope,replace,top,scope,newline,else,if,context,scope,this,out,append,newline,else,if,context,scope,this,out,append,this,indent,null,replace,top,scope,else,if,context,scope,null,throw,new,jsonexception,nesting,problem
JSONStringer -> private Scope peek() throws JSONException;1515446271;Returns the value on the top of the stack._@return the scope_@throws JSONException if processing of json failed;private Scope peek() throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		return this.stack.get(this.stack.size() - 1)__	};returns,the,value,on,the,top,of,the,stack,return,the,scope,throws,jsonexception,if,processing,of,json,failed;private,scope,peek,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,return,this,stack,get,this,stack,size,1
JSONStringer -> private Scope peek() throws JSONException;1516008705;Returns the value on the top of the stack._@return the scope_@throws JSONException if processing of json failed;private Scope peek() throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		return this.stack.get(this.stack.size() - 1)__	};returns,the,value,on,the,top,of,the,stack,return,the,scope,throws,jsonexception,if,processing,of,json,failed;private,scope,peek,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,return,this,stack,get,this,stack,size,1
JSONStringer -> private Scope peek() throws JSONException;1516215803;Returns the value on the top of the stack._@return the scope_@throws JSONException if processing of json failed;private Scope peek() throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		return this.stack.get(this.stack.size() - 1)__	};returns,the,value,on,the,top,of,the,stack,return,the,scope,throws,jsonexception,if,processing,of,json,failed;private,scope,peek,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,return,this,stack,get,this,stack,size,1
JSONStringer -> private Scope peek() throws JSONException;1518087233;Returns the value on the top of the stack._@return the scope_@throws JSONException if processing of json failed;private Scope peek() throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		return this.stack.get(this.stack.size() - 1)__	};returns,the,value,on,the,top,of,the,stack,return,the,scope,throws,jsonexception,if,processing,of,json,failed;private,scope,peek,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,return,this,stack,get,this,stack,size,1
JSONStringer -> private Scope peek() throws JSONException;1520988399;Returns the value on the top of the stack._@return the scope_@throws JSONException if processing of json failed;private Scope peek() throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		return this.stack.get(this.stack.size() - 1)__	};returns,the,value,on,the,top,of,the,stack,return,the,scope,throws,jsonexception,if,processing,of,json,failed;private,scope,peek,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,return,this,stack,get,this,stack,size,1
JSONStringer -> private void beforeKey() throws JSONException;1515446271;Inserts any necessary separators and whitespace before a name. Also adjusts the_stack to expect the key's value._@throws JSONException if processing of json failed;private void beforeKey() throws JSONException {_		Scope context = peek()__		if (context == Scope.NONEMPTY_OBJECT) { _			this.out.append(',')__		}_		else if (context != Scope.EMPTY_OBJECT) { _			throw new JSONException("Nesting problem")__		}_		newline()__		replaceTop(Scope.DANGLING_KEY)__	};inserts,any,necessary,separators,and,whitespace,before,a,name,also,adjusts,the,stack,to,expect,the,key,s,value,throws,jsonexception,if,processing,of,json,failed;private,void,before,key,throws,jsonexception,scope,context,peek,if,context,scope,this,out,append,else,if,context,scope,throw,new,jsonexception,nesting,problem,newline,replace,top,scope
JSONStringer -> private void beforeKey() throws JSONException;1516008705;Inserts any necessary separators and whitespace before a name. Also adjusts the_stack to expect the key's value._@throws JSONException if processing of json failed;private void beforeKey() throws JSONException {_		Scope context = peek()__		if (context == Scope.NONEMPTY_OBJECT) { _			this.out.append(',')__		}_		else if (context != Scope.EMPTY_OBJECT) { _			throw new JSONException("Nesting problem")__		}_		newline()__		replaceTop(Scope.DANGLING_KEY)__	};inserts,any,necessary,separators,and,whitespace,before,a,name,also,adjusts,the,stack,to,expect,the,key,s,value,throws,jsonexception,if,processing,of,json,failed;private,void,before,key,throws,jsonexception,scope,context,peek,if,context,scope,this,out,append,else,if,context,scope,throw,new,jsonexception,nesting,problem,newline,replace,top,scope
JSONStringer -> private void beforeKey() throws JSONException;1516215803;Inserts any necessary separators and whitespace before a name. Also adjusts the_stack to expect the key's value._@throws JSONException if processing of json failed;private void beforeKey() throws JSONException {_		Scope context = peek()__		if (context == Scope.NONEMPTY_OBJECT) { _			this.out.append(',')__		}_		else if (context != Scope.EMPTY_OBJECT) { _			throw new JSONException("Nesting problem")__		}_		newline()__		replaceTop(Scope.DANGLING_KEY)__	};inserts,any,necessary,separators,and,whitespace,before,a,name,also,adjusts,the,stack,to,expect,the,key,s,value,throws,jsonexception,if,processing,of,json,failed;private,void,before,key,throws,jsonexception,scope,context,peek,if,context,scope,this,out,append,else,if,context,scope,throw,new,jsonexception,nesting,problem,newline,replace,top,scope
JSONStringer -> private void beforeKey() throws JSONException;1518087233;Inserts any necessary separators and whitespace before a name. Also adjusts the_stack to expect the key's value._@throws JSONException if processing of json failed;private void beforeKey() throws JSONException {_		Scope context = peek()__		if (context == Scope.NONEMPTY_OBJECT) { _			this.out.append(',')__		}_		else if (context != Scope.EMPTY_OBJECT) { _			throw new JSONException("Nesting problem")__		}_		newline()__		replaceTop(Scope.DANGLING_KEY)__	};inserts,any,necessary,separators,and,whitespace,before,a,name,also,adjusts,the,stack,to,expect,the,key,s,value,throws,jsonexception,if,processing,of,json,failed;private,void,before,key,throws,jsonexception,scope,context,peek,if,context,scope,this,out,append,else,if,context,scope,throw,new,jsonexception,nesting,problem,newline,replace,top,scope
JSONStringer -> private void beforeKey() throws JSONException;1520988399;Inserts any necessary separators and whitespace before a name. Also adjusts the_stack to expect the key's value._@throws JSONException if processing of json failed;private void beforeKey() throws JSONException {_		Scope context = peek()__		if (context == Scope.NONEMPTY_OBJECT) { _			this.out.append(',')__		}_		else if (context != Scope.EMPTY_OBJECT) { _			throw new JSONException("Nesting problem")__		}_		newline()__		replaceTop(Scope.DANGLING_KEY)__	};inserts,any,necessary,separators,and,whitespace,before,a,name,also,adjusts,the,stack,to,expect,the,key,s,value,throws,jsonexception,if,processing,of,json,failed;private,void,before,key,throws,jsonexception,scope,context,peek,if,context,scope,this,out,append,else,if,context,scope,throw,new,jsonexception,nesting,problem,newline,replace,top,scope
JSONStringer -> public JSONStringer endArray() throws JSONException;1515446271;Ends encoding the current array._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer endArray() throws JSONException {_		return close(Scope.EMPTY_ARRAY, Scope.NONEMPTY_ARRAY, "]")__	};ends,encoding,the,current,array,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,end,array,throws,jsonexception,return,close,scope,scope
JSONStringer -> public JSONStringer endArray() throws JSONException;1516008705;Ends encoding the current array._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer endArray() throws JSONException {_		return close(Scope.EMPTY_ARRAY, Scope.NONEMPTY_ARRAY, "]")__	};ends,encoding,the,current,array,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,end,array,throws,jsonexception,return,close,scope,scope
JSONStringer -> public JSONStringer endArray() throws JSONException;1516215803;Ends encoding the current array._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer endArray() throws JSONException {_		return close(Scope.EMPTY_ARRAY, Scope.NONEMPTY_ARRAY, "]")__	};ends,encoding,the,current,array,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,end,array,throws,jsonexception,return,close,scope,scope
JSONStringer -> public JSONStringer endArray() throws JSONException;1518087233;Ends encoding the current array._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer endArray() throws JSONException {_		return close(Scope.EMPTY_ARRAY, Scope.NONEMPTY_ARRAY, "]")__	};ends,encoding,the,current,array,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,end,array,throws,jsonexception,return,close,scope,scope
JSONStringer -> public JSONStringer endArray() throws JSONException;1520988399;Ends encoding the current array._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer endArray() throws JSONException {_		return close(Scope.EMPTY_ARRAY, Scope.NONEMPTY_ARRAY, "]")__	};ends,encoding,the,current,array,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,end,array,throws,jsonexception,return,close,scope,scope
JSONStringer -> JSONStringer open(Scope empty, String openBracket) throws JSONException;1515446271;Enters a new scope by appending any necessary whitespace and the given bracket._@param empty any necessary whitespace_@param openBracket the open bracket_@return this object_@throws JSONException if processing of json failed;JSONStringer open(Scope empty, String openBracket) throws JSONException {_		if (this.stack.isEmpty() && this.out.length() > 0) {_			throw new JSONException("Nesting problem: multiple top-level roots")__		}_		beforeValue()__		this.stack.add(empty)__		this.out.append(openBracket)__		return this__	};enters,a,new,scope,by,appending,any,necessary,whitespace,and,the,given,bracket,param,empty,any,necessary,whitespace,param,open,bracket,the,open,bracket,return,this,object,throws,jsonexception,if,processing,of,json,failed;jsonstringer,open,scope,empty,string,open,bracket,throws,jsonexception,if,this,stack,is,empty,this,out,length,0,throw,new,jsonexception,nesting,problem,multiple,top,level,roots,before,value,this,stack,add,empty,this,out,append,open,bracket,return,this
JSONStringer -> JSONStringer open(Scope empty, String openBracket) throws JSONException;1516008705;Enters a new scope by appending any necessary whitespace and the given bracket._@param empty any necessary whitespace_@param openBracket the open bracket_@return this object_@throws JSONException if processing of json failed;JSONStringer open(Scope empty, String openBracket) throws JSONException {_		if (this.stack.isEmpty() && this.out.length() > 0) {_			throw new JSONException("Nesting problem: multiple top-level roots")__		}_		beforeValue()__		this.stack.add(empty)__		this.out.append(openBracket)__		return this__	};enters,a,new,scope,by,appending,any,necessary,whitespace,and,the,given,bracket,param,empty,any,necessary,whitespace,param,open,bracket,the,open,bracket,return,this,object,throws,jsonexception,if,processing,of,json,failed;jsonstringer,open,scope,empty,string,open,bracket,throws,jsonexception,if,this,stack,is,empty,this,out,length,0,throw,new,jsonexception,nesting,problem,multiple,top,level,roots,before,value,this,stack,add,empty,this,out,append,open,bracket,return,this
JSONStringer -> JSONStringer open(Scope empty, String openBracket) throws JSONException;1516215803;Enters a new scope by appending any necessary whitespace and the given bracket._@param empty any necessary whitespace_@param openBracket the open bracket_@return this object_@throws JSONException if processing of json failed;JSONStringer open(Scope empty, String openBracket) throws JSONException {_		if (this.stack.isEmpty() && this.out.length() > 0) {_			throw new JSONException("Nesting problem: multiple top-level roots")__		}_		beforeValue()__		this.stack.add(empty)__		this.out.append(openBracket)__		return this__	};enters,a,new,scope,by,appending,any,necessary,whitespace,and,the,given,bracket,param,empty,any,necessary,whitespace,param,open,bracket,the,open,bracket,return,this,object,throws,jsonexception,if,processing,of,json,failed;jsonstringer,open,scope,empty,string,open,bracket,throws,jsonexception,if,this,stack,is,empty,this,out,length,0,throw,new,jsonexception,nesting,problem,multiple,top,level,roots,before,value,this,stack,add,empty,this,out,append,open,bracket,return,this
JSONStringer -> JSONStringer open(Scope empty, String openBracket) throws JSONException;1518087233;Enters a new scope by appending any necessary whitespace and the given bracket._@param empty any necessary whitespace_@param openBracket the open bracket_@return this object_@throws JSONException if processing of json failed;JSONStringer open(Scope empty, String openBracket) throws JSONException {_		if (this.stack.isEmpty() && this.out.length() > 0) {_			throw new JSONException("Nesting problem: multiple top-level roots")__		}_		beforeValue()__		this.stack.add(empty)__		this.out.append(openBracket)__		return this__	};enters,a,new,scope,by,appending,any,necessary,whitespace,and,the,given,bracket,param,empty,any,necessary,whitespace,param,open,bracket,the,open,bracket,return,this,object,throws,jsonexception,if,processing,of,json,failed;jsonstringer,open,scope,empty,string,open,bracket,throws,jsonexception,if,this,stack,is,empty,this,out,length,0,throw,new,jsonexception,nesting,problem,multiple,top,level,roots,before,value,this,stack,add,empty,this,out,append,open,bracket,return,this
JSONStringer -> JSONStringer open(Scope empty, String openBracket) throws JSONException;1520988399;Enters a new scope by appending any necessary whitespace and the given bracket._@param empty any necessary whitespace_@param openBracket the open bracket_@return this object_@throws JSONException if processing of json failed;JSONStringer open(Scope empty, String openBracket) throws JSONException {_		if (this.stack.isEmpty() && this.out.length() > 0) {_			throw new JSONException("Nesting problem: multiple top-level roots")__		}_		beforeValue()__		this.stack.add(empty)__		this.out.append(openBracket)__		return this__	};enters,a,new,scope,by,appending,any,necessary,whitespace,and,the,given,bracket,param,empty,any,necessary,whitespace,param,open,bracket,the,open,bracket,return,this,object,throws,jsonexception,if,processing,of,json,failed;jsonstringer,open,scope,empty,string,open,bracket,throws,jsonexception,if,this,stack,is,empty,this,out,length,0,throw,new,jsonexception,nesting,problem,multiple,top,level,roots,before,value,this,stack,add,empty,this,out,append,open,bracket,return,this
JSONStringer -> public JSONStringer key(String name) throws JSONException;1515446271;Encodes the key (property name) to this stringer._@param name the name of the forthcoming value. May not be null._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer key(String name) throws JSONException {_		if (name == null) {_			throw new JSONException("Names must be non-null")__		}_		beforeKey()__		string(name)__		return this__	};encodes,the,key,property,name,to,this,stringer,param,name,the,name,of,the,forthcoming,value,may,not,be,null,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,key,string,name,throws,jsonexception,if,name,null,throw,new,jsonexception,names,must,be,non,null,before,key,string,name,return,this
JSONStringer -> public JSONStringer key(String name) throws JSONException;1516008705;Encodes the key (property name) to this stringer._@param name the name of the forthcoming value. May not be null._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer key(String name) throws JSONException {_		if (name == null) {_			throw new JSONException("Names must be non-null")__		}_		beforeKey()__		string(name)__		return this__	};encodes,the,key,property,name,to,this,stringer,param,name,the,name,of,the,forthcoming,value,may,not,be,null,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,key,string,name,throws,jsonexception,if,name,null,throw,new,jsonexception,names,must,be,non,null,before,key,string,name,return,this
JSONStringer -> public JSONStringer key(String name) throws JSONException;1516215803;Encodes the key (property name) to this stringer._@param name the name of the forthcoming value. May not be null._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer key(String name) throws JSONException {_		if (name == null) {_			throw new JSONException("Names must be non-null")__		}_		beforeKey()__		string(name)__		return this__	};encodes,the,key,property,name,to,this,stringer,param,name,the,name,of,the,forthcoming,value,may,not,be,null,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,key,string,name,throws,jsonexception,if,name,null,throw,new,jsonexception,names,must,be,non,null,before,key,string,name,return,this
JSONStringer -> public JSONStringer key(String name) throws JSONException;1518087233;Encodes the key (property name) to this stringer._@param name the name of the forthcoming value. May not be null._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer key(String name) throws JSONException {_		if (name == null) {_			throw new JSONException("Names must be non-null")__		}_		beforeKey()__		string(name)__		return this__	};encodes,the,key,property,name,to,this,stringer,param,name,the,name,of,the,forthcoming,value,may,not,be,null,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,key,string,name,throws,jsonexception,if,name,null,throw,new,jsonexception,names,must,be,non,null,before,key,string,name,return,this
JSONStringer -> public JSONStringer key(String name) throws JSONException;1520988399;Encodes the key (property name) to this stringer._@param name the name of the forthcoming value. May not be null._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer key(String name) throws JSONException {_		if (name == null) {_			throw new JSONException("Names must be non-null")__		}_		beforeKey()__		string(name)__		return this__	};encodes,the,key,property,name,to,this,stringer,param,name,the,name,of,the,forthcoming,value,may,not,be,null,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,key,string,name,throws,jsonexception,if,name,null,throw,new,jsonexception,names,must,be,non,null,before,key,string,name,return,this
JSONStringer -> @Override 	public String toString();1515446271;Returns the encoded JSON string._<p>_If invoked with unterminated arrays or unclosed objects, this method's return value_is undefined._<p>_<strong>Warning:</strong> although it contradicts the general contract of_{@link Object#toString}, this method returns null if the stringer contains no data._@return the encoded JSON string.;@Override_	public String toString() {_		return this.out.length() == 0 ? null : this.out.toString()__	};returns,the,encoded,json,string,p,if,invoked,with,unterminated,arrays,or,unclosed,objects,this,method,s,return,value,is,undefined,p,strong,warning,strong,although,it,contradicts,the,general,contract,of,link,object,to,string,this,method,returns,null,if,the,stringer,contains,no,data,return,the,encoded,json,string;override,public,string,to,string,return,this,out,length,0,null,this,out,to,string
JSONStringer -> @Override 	public String toString();1516008705;Returns the encoded JSON string._<p>_If invoked with unterminated arrays or unclosed objects, this method's return value_is undefined._<p>_<strong>Warning:</strong> although it contradicts the general contract of_{@link Object#toString}, this method returns null if the stringer contains no data._@return the encoded JSON string.;@Override_	public String toString() {_		return this.out.length() == 0 ? null : this.out.toString()__	};returns,the,encoded,json,string,p,if,invoked,with,unterminated,arrays,or,unclosed,objects,this,method,s,return,value,is,undefined,p,strong,warning,strong,although,it,contradicts,the,general,contract,of,link,object,to,string,this,method,returns,null,if,the,stringer,contains,no,data,return,the,encoded,json,string;override,public,string,to,string,return,this,out,length,0,null,this,out,to,string
JSONStringer -> @Override 	public String toString();1516215803;Returns the encoded JSON string._<p>_If invoked with unterminated arrays or unclosed objects, this method's return value_is undefined._<p>_<strong>Warning:</strong> although it contradicts the general contract of_{@link Object#toString}, this method returns null if the stringer contains no data._@return the encoded JSON string.;@Override_	public String toString() {_		return this.out.length() == 0 ? null : this.out.toString()__	};returns,the,encoded,json,string,p,if,invoked,with,unterminated,arrays,or,unclosed,objects,this,method,s,return,value,is,undefined,p,strong,warning,strong,although,it,contradicts,the,general,contract,of,link,object,to,string,this,method,returns,null,if,the,stringer,contains,no,data,return,the,encoded,json,string;override,public,string,to,string,return,this,out,length,0,null,this,out,to,string
JSONStringer -> @Override 	public String toString();1518087233;Returns the encoded JSON string._<p>_If invoked with unterminated arrays or unclosed objects, this method's return value_is undefined._<p>_<strong>Warning:</strong> although it contradicts the general contract of_{@link Object#toString}, this method returns null if the stringer contains no data._@return the encoded JSON string.;@Override_	public String toString() {_		return this.out.length() == 0 ? null : this.out.toString()__	};returns,the,encoded,json,string,p,if,invoked,with,unterminated,arrays,or,unclosed,objects,this,method,s,return,value,is,undefined,p,strong,warning,strong,although,it,contradicts,the,general,contract,of,link,object,to,string,this,method,returns,null,if,the,stringer,contains,no,data,return,the,encoded,json,string;override,public,string,to,string,return,this,out,length,0,null,this,out,to,string
JSONStringer -> @Override 	public String toString();1520988399;Returns the encoded JSON string._<p>_If invoked with unterminated arrays or unclosed objects, this method's return value_is undefined._<p>_<strong>Warning:</strong> although it contradicts the general contract of_{@link Object#toString}, this method returns null if the stringer contains no data._@return the encoded JSON string.;@Override_	public String toString() {_		return this.out.length() == 0 ? null : this.out.toString()__	};returns,the,encoded,json,string,p,if,invoked,with,unterminated,arrays,or,unclosed,objects,this,method,s,return,value,is,undefined,p,strong,warning,strong,although,it,contradicts,the,general,contract,of,link,object,to,string,this,method,returns,null,if,the,stringer,contains,no,data,return,the,encoded,json,string;override,public,string,to,string,return,this,out,length,0,null,this,out,to,string
JSONStringer -> public JSONStringer value(Object value) throws JSONException;1515446271;Encodes {@code value}._@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,_Long, Double or null. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(Object value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}__		if (value instanceof JSONArray) {_			((JSONArray) value).writeTo(this)__			return this___		}_		else if (value instanceof JSONObject) {_			((JSONObject) value).writeTo(this)__			return this__		}__		beforeValue()___		if (value == null || value instanceof Boolean || value == JSONObject.NULL) {_			this.out.append(value)___		}_		else if (value instanceof Number) {_			this.out.append(JSONObject.numberToString((Number) value))___		}_		else {_			string(value.toString())__		}__		return this__	};encodes,code,value,param,value,a,link,jsonobject,link,jsonarray,string,boolean,integer,long,double,or,null,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,object,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,if,value,instanceof,jsonarray,jsonarray,value,write,to,this,return,this,else,if,value,instanceof,jsonobject,jsonobject,value,write,to,this,return,this,before,value,if,value,null,value,instanceof,boolean,value,jsonobject,null,this,out,append,value,else,if,value,instanceof,number,this,out,append,jsonobject,number,to,string,number,value,else,string,value,to,string,return,this
JSONStringer -> public JSONStringer value(Object value) throws JSONException;1516008705;Encodes {@code value}._@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,_Long, Double or null. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(Object value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}__		if (value instanceof JSONArray) {_			((JSONArray) value).writeTo(this)__			return this___		}_		else if (value instanceof JSONObject) {_			((JSONObject) value).writeTo(this)__			return this__		}__		beforeValue()___		if (value == null || value instanceof Boolean || value == JSONObject.NULL) {_			this.out.append(value)___		}_		else if (value instanceof Number) {_			this.out.append(JSONObject.numberToString((Number) value))___		}_		else {_			string(value.toString())__		}__		return this__	};encodes,code,value,param,value,a,link,jsonobject,link,jsonarray,string,boolean,integer,long,double,or,null,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,object,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,if,value,instanceof,jsonarray,jsonarray,value,write,to,this,return,this,else,if,value,instanceof,jsonobject,jsonobject,value,write,to,this,return,this,before,value,if,value,null,value,instanceof,boolean,value,jsonobject,null,this,out,append,value,else,if,value,instanceof,number,this,out,append,jsonobject,number,to,string,number,value,else,string,value,to,string,return,this
JSONStringer -> public JSONStringer value(Object value) throws JSONException;1516215803;Encodes {@code value}._@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,_Long, Double or null. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(Object value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}__		if (value instanceof JSONArray) {_			((JSONArray) value).writeTo(this)__			return this___		}_		else if (value instanceof JSONObject) {_			((JSONObject) value).writeTo(this)__			return this__		}__		beforeValue()___		if (value == null || value instanceof Boolean || value == JSONObject.NULL) {_			this.out.append(value)___		}_		else if (value instanceof Number) {_			this.out.append(JSONObject.numberToString((Number) value))___		}_		else {_			string(value.toString())__		}__		return this__	};encodes,code,value,param,value,a,link,jsonobject,link,jsonarray,string,boolean,integer,long,double,or,null,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,object,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,if,value,instanceof,jsonarray,jsonarray,value,write,to,this,return,this,else,if,value,instanceof,jsonobject,jsonobject,value,write,to,this,return,this,before,value,if,value,null,value,instanceof,boolean,value,jsonobject,null,this,out,append,value,else,if,value,instanceof,number,this,out,append,jsonobject,number,to,string,number,value,else,string,value,to,string,return,this
JSONStringer -> public JSONStringer value(Object value) throws JSONException;1518087233;Encodes {@code value}._@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,_Long, Double or null. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(Object value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}__		if (value instanceof JSONArray) {_			((JSONArray) value).writeTo(this)__			return this___		}_		else if (value instanceof JSONObject) {_			((JSONObject) value).writeTo(this)__			return this__		}__		beforeValue()___		if (value == null || value instanceof Boolean || value == JSONObject.NULL) {_			this.out.append(value)___		}_		else if (value instanceof Number) {_			this.out.append(JSONObject.numberToString((Number) value))___		}_		else {_			string(value.toString())__		}__		return this__	};encodes,code,value,param,value,a,link,jsonobject,link,jsonarray,string,boolean,integer,long,double,or,null,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,object,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,if,value,instanceof,jsonarray,jsonarray,value,write,to,this,return,this,else,if,value,instanceof,jsonobject,jsonobject,value,write,to,this,return,this,before,value,if,value,null,value,instanceof,boolean,value,jsonobject,null,this,out,append,value,else,if,value,instanceof,number,this,out,append,jsonobject,number,to,string,number,value,else,string,value,to,string,return,this
JSONStringer -> public JSONStringer value(Object value) throws JSONException;1520988399;Encodes {@code value}._@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,_Long, Double or null. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(Object value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}__		if (value instanceof JSONArray) {_			((JSONArray) value).writeTo(this)__			return this___		}_		else if (value instanceof JSONObject) {_			((JSONObject) value).writeTo(this)__			return this__		}__		beforeValue()___		if (value == null || value instanceof Boolean || value == JSONObject.NULL) {_			this.out.append(value)___		}_		else if (value instanceof Number) {_			this.out.append(JSONObject.numberToString((Number) value))___		}_		else {_			string(value.toString())__		}__		return this__	};encodes,code,value,param,value,a,link,jsonobject,link,jsonarray,string,boolean,integer,long,double,or,null,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,object,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,if,value,instanceof,jsonarray,jsonarray,value,write,to,this,return,this,else,if,value,instanceof,jsonobject,jsonobject,value,write,to,this,return,this,before,value,if,value,null,value,instanceof,boolean,value,jsonobject,null,this,out,append,value,else,if,value,instanceof,number,this,out,append,jsonobject,number,to,string,number,value,else,string,value,to,string,return,this
JSONStringer -> JSONStringer close(Scope empty, Scope nonempty, String closeBracket) 			throws JSONException;1515446271;Closes the current scope by appending any necessary whitespace and the given_bracket._@param empty any necessary whitespace_@param nonempty the current scope_@param closeBracket the close bracket_@return the JSON stringer_@throws JSONException if processing of json failed;JSONStringer close(Scope empty, Scope nonempty, String closeBracket)_			throws JSONException {_		Scope context = peek()__		if (context != nonempty && context != empty) {_			throw new JSONException("Nesting problem")__		}__		this.stack.remove(this.stack.size() - 1)__		if (context == nonempty) {_			newline()__		}_		this.out.append(closeBracket)__		return this__	};closes,the,current,scope,by,appending,any,necessary,whitespace,and,the,given,bracket,param,empty,any,necessary,whitespace,param,nonempty,the,current,scope,param,close,bracket,the,close,bracket,return,the,json,stringer,throws,jsonexception,if,processing,of,json,failed;jsonstringer,close,scope,empty,scope,nonempty,string,close,bracket,throws,jsonexception,scope,context,peek,if,context,nonempty,context,empty,throw,new,jsonexception,nesting,problem,this,stack,remove,this,stack,size,1,if,context,nonempty,newline,this,out,append,close,bracket,return,this
JSONStringer -> JSONStringer close(Scope empty, Scope nonempty, String closeBracket) 			throws JSONException;1516008705;Closes the current scope by appending any necessary whitespace and the given_bracket._@param empty any necessary whitespace_@param nonempty the current scope_@param closeBracket the close bracket_@return the JSON stringer_@throws JSONException if processing of json failed;JSONStringer close(Scope empty, Scope nonempty, String closeBracket)_			throws JSONException {_		Scope context = peek()__		if (context != nonempty && context != empty) {_			throw new JSONException("Nesting problem")__		}__		this.stack.remove(this.stack.size() - 1)__		if (context == nonempty) {_			newline()__		}_		this.out.append(closeBracket)__		return this__	};closes,the,current,scope,by,appending,any,necessary,whitespace,and,the,given,bracket,param,empty,any,necessary,whitespace,param,nonempty,the,current,scope,param,close,bracket,the,close,bracket,return,the,json,stringer,throws,jsonexception,if,processing,of,json,failed;jsonstringer,close,scope,empty,scope,nonempty,string,close,bracket,throws,jsonexception,scope,context,peek,if,context,nonempty,context,empty,throw,new,jsonexception,nesting,problem,this,stack,remove,this,stack,size,1,if,context,nonempty,newline,this,out,append,close,bracket,return,this
JSONStringer -> JSONStringer close(Scope empty, Scope nonempty, String closeBracket) 			throws JSONException;1516215803;Closes the current scope by appending any necessary whitespace and the given_bracket._@param empty any necessary whitespace_@param nonempty the current scope_@param closeBracket the close bracket_@return the JSON stringer_@throws JSONException if processing of json failed;JSONStringer close(Scope empty, Scope nonempty, String closeBracket)_			throws JSONException {_		Scope context = peek()__		if (context != nonempty && context != empty) {_			throw new JSONException("Nesting problem")__		}__		this.stack.remove(this.stack.size() - 1)__		if (context == nonempty) {_			newline()__		}_		this.out.append(closeBracket)__		return this__	};closes,the,current,scope,by,appending,any,necessary,whitespace,and,the,given,bracket,param,empty,any,necessary,whitespace,param,nonempty,the,current,scope,param,close,bracket,the,close,bracket,return,the,json,stringer,throws,jsonexception,if,processing,of,json,failed;jsonstringer,close,scope,empty,scope,nonempty,string,close,bracket,throws,jsonexception,scope,context,peek,if,context,nonempty,context,empty,throw,new,jsonexception,nesting,problem,this,stack,remove,this,stack,size,1,if,context,nonempty,newline,this,out,append,close,bracket,return,this
JSONStringer -> JSONStringer close(Scope empty, Scope nonempty, String closeBracket) 			throws JSONException;1518087233;Closes the current scope by appending any necessary whitespace and the given_bracket._@param empty any necessary whitespace_@param nonempty the current scope_@param closeBracket the close bracket_@return the JSON stringer_@throws JSONException if processing of json failed;JSONStringer close(Scope empty, Scope nonempty, String closeBracket)_			throws JSONException {_		Scope context = peek()__		if (context != nonempty && context != empty) {_			throw new JSONException("Nesting problem")__		}__		this.stack.remove(this.stack.size() - 1)__		if (context == nonempty) {_			newline()__		}_		this.out.append(closeBracket)__		return this__	};closes,the,current,scope,by,appending,any,necessary,whitespace,and,the,given,bracket,param,empty,any,necessary,whitespace,param,nonempty,the,current,scope,param,close,bracket,the,close,bracket,return,the,json,stringer,throws,jsonexception,if,processing,of,json,failed;jsonstringer,close,scope,empty,scope,nonempty,string,close,bracket,throws,jsonexception,scope,context,peek,if,context,nonempty,context,empty,throw,new,jsonexception,nesting,problem,this,stack,remove,this,stack,size,1,if,context,nonempty,newline,this,out,append,close,bracket,return,this
JSONStringer -> JSONStringer close(Scope empty, Scope nonempty, String closeBracket) 			throws JSONException;1520988399;Closes the current scope by appending any necessary whitespace and the given_bracket._@param empty any necessary whitespace_@param nonempty the current scope_@param closeBracket the close bracket_@return the JSON stringer_@throws JSONException if processing of json failed;JSONStringer close(Scope empty, Scope nonempty, String closeBracket)_			throws JSONException {_		Scope context = peek()__		if (context != nonempty && context != empty) {_			throw new JSONException("Nesting problem")__		}__		this.stack.remove(this.stack.size() - 1)__		if (context == nonempty) {_			newline()__		}_		this.out.append(closeBracket)__		return this__	};closes,the,current,scope,by,appending,any,necessary,whitespace,and,the,given,bracket,param,empty,any,necessary,whitespace,param,nonempty,the,current,scope,param,close,bracket,the,close,bracket,return,the,json,stringer,throws,jsonexception,if,processing,of,json,failed;jsonstringer,close,scope,empty,scope,nonempty,string,close,bracket,throws,jsonexception,scope,context,peek,if,context,nonempty,context,empty,throw,new,jsonexception,nesting,problem,this,stack,remove,this,stack,size,1,if,context,nonempty,newline,this,out,append,close,bracket,return,this
JSONStringer -> public JSONStringer value(boolean value) throws JSONException;1515446271;Encodes {@code value} to this stringer._@param value the value to encode_@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(boolean value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(value)__		return this__	};encodes,code,value,to,this,stringer,param,value,the,value,to,encode,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,boolean,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,value,return,this
JSONStringer -> public JSONStringer value(boolean value) throws JSONException;1516008705;Encodes {@code value} to this stringer._@param value the value to encode_@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(boolean value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(value)__		return this__	};encodes,code,value,to,this,stringer,param,value,the,value,to,encode,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,boolean,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,value,return,this
JSONStringer -> public JSONStringer value(boolean value) throws JSONException;1516215803;Encodes {@code value} to this stringer._@param value the value to encode_@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(boolean value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(value)__		return this__	};encodes,code,value,to,this,stringer,param,value,the,value,to,encode,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,boolean,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,value,return,this
JSONStringer -> public JSONStringer value(boolean value) throws JSONException;1518087233;Encodes {@code value} to this stringer._@param value the value to encode_@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(boolean value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(value)__		return this__	};encodes,code,value,to,this,stringer,param,value,the,value,to,encode,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,boolean,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,value,return,this
JSONStringer -> public JSONStringer value(boolean value) throws JSONException;1520988399;Encodes {@code value} to this stringer._@param value the value to encode_@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(boolean value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(value)__		return this__	};encodes,code,value,to,this,stringer,param,value,the,value,to,encode,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,boolean,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,value,return,this
JSONStringer -> public JSONStringer array() throws JSONException;1515446271;Begins encoding a new array. Each call to this method must be paired with a call to_{@link #endArray}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer array() throws JSONException {_		return open(Scope.EMPTY_ARRAY, "[")__	};begins,encoding,a,new,array,each,call,to,this,method,must,be,paired,with,a,call,to,link,end,array,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,array,throws,jsonexception,return,open,scope
JSONStringer -> public JSONStringer array() throws JSONException;1516008705;Begins encoding a new array. Each call to this method must be paired with a call to_{@link #endArray}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer array() throws JSONException {_		return open(Scope.EMPTY_ARRAY, "[")__	};begins,encoding,a,new,array,each,call,to,this,method,must,be,paired,with,a,call,to,link,end,array,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,array,throws,jsonexception,return,open,scope
JSONStringer -> public JSONStringer array() throws JSONException;1516215803;Begins encoding a new array. Each call to this method must be paired with a call to_{@link #endArray}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer array() throws JSONException {_		return open(Scope.EMPTY_ARRAY, "[")__	};begins,encoding,a,new,array,each,call,to,this,method,must,be,paired,with,a,call,to,link,end,array,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,array,throws,jsonexception,return,open,scope
JSONStringer -> public JSONStringer array() throws JSONException;1518087233;Begins encoding a new array. Each call to this method must be paired with a call to_{@link #endArray}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer array() throws JSONException {_		return open(Scope.EMPTY_ARRAY, "[")__	};begins,encoding,a,new,array,each,call,to,this,method,must,be,paired,with,a,call,to,link,end,array,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,array,throws,jsonexception,return,open,scope
JSONStringer -> public JSONStringer array() throws JSONException;1520988399;Begins encoding a new array. Each call to this method must be paired with a call to_{@link #endArray}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer array() throws JSONException {_		return open(Scope.EMPTY_ARRAY, "[")__	};begins,encoding,a,new,array,each,call,to,this,method,must,be,paired,with,a,call,to,link,end,array,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,array,throws,jsonexception,return,open,scope
JSONStringer -> public JSONStringer endObject() throws JSONException;1515446271;Ends encoding the current object._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer endObject() throws JSONException {_		return close(Scope.EMPTY_OBJECT, Scope.NONEMPTY_OBJECT, "}")__	};ends,encoding,the,current,object,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,end,object,throws,jsonexception,return,close,scope,scope
JSONStringer -> public JSONStringer endObject() throws JSONException;1516008705;Ends encoding the current object._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer endObject() throws JSONException {_		return close(Scope.EMPTY_OBJECT, Scope.NONEMPTY_OBJECT, "}")__	};ends,encoding,the,current,object,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,end,object,throws,jsonexception,return,close,scope,scope
JSONStringer -> public JSONStringer endObject() throws JSONException;1516215803;Ends encoding the current object._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer endObject() throws JSONException {_		return close(Scope.EMPTY_OBJECT, Scope.NONEMPTY_OBJECT, "}")__	};ends,encoding,the,current,object,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,end,object,throws,jsonexception,return,close,scope,scope
JSONStringer -> public JSONStringer endObject() throws JSONException;1518087233;Ends encoding the current object._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer endObject() throws JSONException {_		return close(Scope.EMPTY_OBJECT, Scope.NONEMPTY_OBJECT, "}")__	};ends,encoding,the,current,object,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,end,object,throws,jsonexception,return,close,scope,scope
JSONStringer -> public JSONStringer endObject() throws JSONException;1520988399;Ends encoding the current object._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer endObject() throws JSONException {_		return close(Scope.EMPTY_OBJECT, Scope.NONEMPTY_OBJECT, "}")__	};ends,encoding,the,current,object,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,end,object,throws,jsonexception,return,close,scope,scope
JSONStringer -> private void replaceTop(Scope topOfStack);1515446271;Replace the value on the top of the stack with the given value._@param topOfStack the scope at the top of the stack;private void replaceTop(Scope topOfStack) {_		this.stack.set(this.stack.size() - 1, topOfStack)__	};replace,the,value,on,the,top,of,the,stack,with,the,given,value,param,top,of,stack,the,scope,at,the,top,of,the,stack;private,void,replace,top,scope,top,of,stack,this,stack,set,this,stack,size,1,top,of,stack
JSONStringer -> private void replaceTop(Scope topOfStack);1516008705;Replace the value on the top of the stack with the given value._@param topOfStack the scope at the top of the stack;private void replaceTop(Scope topOfStack) {_		this.stack.set(this.stack.size() - 1, topOfStack)__	};replace,the,value,on,the,top,of,the,stack,with,the,given,value,param,top,of,stack,the,scope,at,the,top,of,the,stack;private,void,replace,top,scope,top,of,stack,this,stack,set,this,stack,size,1,top,of,stack
JSONStringer -> private void replaceTop(Scope topOfStack);1516215803;Replace the value on the top of the stack with the given value._@param topOfStack the scope at the top of the stack;private void replaceTop(Scope topOfStack) {_		this.stack.set(this.stack.size() - 1, topOfStack)__	};replace,the,value,on,the,top,of,the,stack,with,the,given,value,param,top,of,stack,the,scope,at,the,top,of,the,stack;private,void,replace,top,scope,top,of,stack,this,stack,set,this,stack,size,1,top,of,stack
JSONStringer -> private void replaceTop(Scope topOfStack);1518087233;Replace the value on the top of the stack with the given value._@param topOfStack the scope at the top of the stack;private void replaceTop(Scope topOfStack) {_		this.stack.set(this.stack.size() - 1, topOfStack)__	};replace,the,value,on,the,top,of,the,stack,with,the,given,value,param,top,of,stack,the,scope,at,the,top,of,the,stack;private,void,replace,top,scope,top,of,stack,this,stack,set,this,stack,size,1,top,of,stack
JSONStringer -> private void replaceTop(Scope topOfStack);1520988399;Replace the value on the top of the stack with the given value._@param topOfStack the scope at the top of the stack;private void replaceTop(Scope topOfStack) {_		this.stack.set(this.stack.size() - 1, topOfStack)__	};replace,the,value,on,the,top,of,the,stack,with,the,given,value,param,top,of,stack,the,scope,at,the,top,of,the,stack;private,void,replace,top,scope,top,of,stack,this,stack,set,this,stack,size,1,top,of,stack
JSONStringer -> public JSONStringer object() throws JSONException;1515446271;Begins encoding a new object. Each call to this method must be paired with a call_to {@link #endObject}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer object() throws JSONException {_		return open(Scope.EMPTY_OBJECT, "{")__	};begins,encoding,a,new,object,each,call,to,this,method,must,be,paired,with,a,call,to,link,end,object,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,object,throws,jsonexception,return,open,scope
JSONStringer -> public JSONStringer object() throws JSONException;1516008705;Begins encoding a new object. Each call to this method must be paired with a call_to {@link #endObject}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer object() throws JSONException {_		return open(Scope.EMPTY_OBJECT, "{")__	};begins,encoding,a,new,object,each,call,to,this,method,must,be,paired,with,a,call,to,link,end,object,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,object,throws,jsonexception,return,open,scope
JSONStringer -> public JSONStringer object() throws JSONException;1516215803;Begins encoding a new object. Each call to this method must be paired with a call_to {@link #endObject}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer object() throws JSONException {_		return open(Scope.EMPTY_OBJECT, "{")__	};begins,encoding,a,new,object,each,call,to,this,method,must,be,paired,with,a,call,to,link,end,object,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,object,throws,jsonexception,return,open,scope
JSONStringer -> public JSONStringer object() throws JSONException;1518087233;Begins encoding a new object. Each call to this method must be paired with a call_to {@link #endObject}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer object() throws JSONException {_		return open(Scope.EMPTY_OBJECT, "{")__	};begins,encoding,a,new,object,each,call,to,this,method,must,be,paired,with,a,call,to,link,end,object,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,object,throws,jsonexception,return,open,scope
JSONStringer -> public JSONStringer object() throws JSONException;1520988399;Begins encoding a new object. Each call to this method must be paired with a call_to {@link #endObject}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer object() throws JSONException {_		return open(Scope.EMPTY_OBJECT, "{")__	};begins,encoding,a,new,object,each,call,to,this,method,must,be,paired,with,a,call,to,link,end,object,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,object,throws,jsonexception,return,open,scope
JSONStringer -> public JSONStringer value(double value) throws JSONException;1515446271;Encodes {@code value} to this stringer._@param value a finite value. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(double value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(JSONObject.numberToString(value))__		return this__	};encodes,code,value,to,this,stringer,param,value,a,finite,value,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,double,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,jsonobject,number,to,string,value,return,this
JSONStringer -> public JSONStringer value(double value) throws JSONException;1516008705;Encodes {@code value} to this stringer._@param value a finite value. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(double value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(JSONObject.numberToString(value))__		return this__	};encodes,code,value,to,this,stringer,param,value,a,finite,value,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,double,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,jsonobject,number,to,string,value,return,this
JSONStringer -> public JSONStringer value(double value) throws JSONException;1516215803;Encodes {@code value} to this stringer._@param value a finite value. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(double value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(JSONObject.numberToString(value))__		return this__	};encodes,code,value,to,this,stringer,param,value,a,finite,value,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,double,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,jsonobject,number,to,string,value,return,this
JSONStringer -> public JSONStringer value(double value) throws JSONException;1518087233;Encodes {@code value} to this stringer._@param value a finite value. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(double value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(JSONObject.numberToString(value))__		return this__	};encodes,code,value,to,this,stringer,param,value,a,finite,value,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,double,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,jsonobject,number,to,string,value,return,this
JSONStringer -> public JSONStringer value(double value) throws JSONException;1520988399;Encodes {@code value} to this stringer._@param value a finite value. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(double value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(JSONObject.numberToString(value))__		return this__	};encodes,code,value,to,this,stringer,param,value,a,finite,value,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,double,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,jsonobject,number,to,string,value,return,this
JSONStringer -> public JSONStringer value(long value) throws JSONException;1515446271;Encodes {@code value} to this stringer._@param value the value to encode_@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(long value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(value)__		return this__	};encodes,code,value,to,this,stringer,param,value,the,value,to,encode,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,long,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,value,return,this
JSONStringer -> public JSONStringer value(long value) throws JSONException;1516008705;Encodes {@code value} to this stringer._@param value the value to encode_@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(long value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(value)__		return this__	};encodes,code,value,to,this,stringer,param,value,the,value,to,encode,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,long,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,value,return,this
JSONStringer -> public JSONStringer value(long value) throws JSONException;1516215803;Encodes {@code value} to this stringer._@param value the value to encode_@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(long value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(value)__		return this__	};encodes,code,value,to,this,stringer,param,value,the,value,to,encode,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,long,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,value,return,this
JSONStringer -> public JSONStringer value(long value) throws JSONException;1518087233;Encodes {@code value} to this stringer._@param value the value to encode_@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(long value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(value)__		return this__	};encodes,code,value,to,this,stringer,param,value,the,value,to,encode,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,long,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,value,return,this
JSONStringer -> public JSONStringer value(long value) throws JSONException;1520988399;Encodes {@code value} to this stringer._@param value the value to encode_@return this stringer._@throws JSONException if processing of json failed;public JSONStringer value(long value) throws JSONException {_		if (this.stack.isEmpty()) {_			throw new JSONException("Nesting problem")__		}_		beforeValue()__		this.out.append(value)__		return this__	};encodes,code,value,to,this,stringer,param,value,the,value,to,encode,return,this,stringer,throws,jsonexception,if,processing,of,json,failed;public,jsonstringer,value,long,value,throws,jsonexception,if,this,stack,is,empty,throw,new,jsonexception,nesting,problem,before,value,this,out,append,value,return,this
