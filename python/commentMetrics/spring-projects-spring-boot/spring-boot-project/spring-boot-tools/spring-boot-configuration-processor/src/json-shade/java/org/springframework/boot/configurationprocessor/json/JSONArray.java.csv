# id;timestamp;commentText;codeText;commentWords;codeWords
JSONArray -> public Object remove(int index);1515446271;Removes and returns the value at {@code index}, or null if the array has no value_at {@code index}._@param index the index of the value to remove_@return the previous value at {@code index};public Object remove(int index) {_		if (index < 0 || index >= this.values.size()) {_			return null__		}_		return this.values.remove(index)__	};removes,and,returns,the,value,at,code,index,or,null,if,the,array,has,no,value,at,code,index,param,index,the,index,of,the,value,to,remove,return,the,previous,value,at,code,index;public,object,remove,int,index,if,index,0,index,this,values,size,return,null,return,this,values,remove,index
JSONArray -> public Object remove(int index);1516008705;Removes and returns the value at {@code index}, or null if the array has no value_at {@code index}._@param index the index of the value to remove_@return the previous value at {@code index};public Object remove(int index) {_		if (index < 0 || index >= this.values.size()) {_			return null__		}_		return this.values.remove(index)__	};removes,and,returns,the,value,at,code,index,or,null,if,the,array,has,no,value,at,code,index,param,index,the,index,of,the,value,to,remove,return,the,previous,value,at,code,index;public,object,remove,int,index,if,index,0,index,this,values,size,return,null,return,this,values,remove,index
JSONArray -> public Object remove(int index);1516215803;Removes and returns the value at {@code index}, or null if the array has no value_at {@code index}._@param index the index of the value to remove_@return the previous value at {@code index};public Object remove(int index) {_		if (index < 0 || index >= this.values.size()) {_			return null__		}_		return this.values.remove(index)__	};removes,and,returns,the,value,at,code,index,or,null,if,the,array,has,no,value,at,code,index,param,index,the,index,of,the,value,to,remove,return,the,previous,value,at,code,index;public,object,remove,int,index,if,index,0,index,this,values,size,return,null,return,this,values,remove,index
JSONArray -> public Object remove(int index);1531461359;Removes and returns the value at {@code index}, or null if the array has no value_at {@code index}._@param index the index of the value to remove_@return the previous value at {@code index};public Object remove(int index) {_		if (index < 0 || index >= this.values.size()) {_			return null__		}_		return this.values.remove(index)__	};removes,and,returns,the,value,at,code,index,or,null,if,the,array,has,no,value,at,code,index,param,index,the,index,of,the,value,to,remove,return,the,previous,value,at,code,index;public,object,remove,int,index,if,index,0,index,this,values,size,return,null,return,this,values,remove,index
JSONArray -> public Object get(int index) throws JSONException;1515446271;Returns the value at {@code index}._@param index the index to get the value from_@return the value at {@code index}._@throws JSONException if this array has no value at {@code index}, or if that value_is the {@code null} reference. This method returns normally if the value is_{@code JSONObject#NULL}.;public Object get(int index) throws JSONException {_		try {_			Object value = this.values.get(index)__			if (value == null) {_				throw new JSONException("Value at " + index + " is null.")__			}_			return value__		}_		catch (IndexOutOfBoundsException e) {_			throw new JSONException(_					"Index " + index + " out of range [0.." + this.values.size() + ")")__		}_	};returns,the,value,at,code,index,param,index,the,index,to,get,the,value,from,return,the,value,at,code,index,throws,jsonexception,if,this,array,has,no,value,at,code,index,or,if,that,value,is,the,code,null,reference,this,method,returns,normally,if,the,value,is,code,jsonobject,null;public,object,get,int,index,throws,jsonexception,try,object,value,this,values,get,index,if,value,null,throw,new,jsonexception,value,at,index,is,null,return,value,catch,index,out,of,bounds,exception,e,throw,new,jsonexception,index,index,out,of,range,0,this,values,size
JSONArray -> public Object get(int index) throws JSONException;1516008705;Returns the value at {@code index}._@param index the index to get the value from_@return the value at {@code index}._@throws JSONException if this array has no value at {@code index}, or if that value_is the {@code null} reference. This method returns normally if the value is_{@code JSONObject#NULL}.;public Object get(int index) throws JSONException {_		try {_			Object value = this.values.get(index)__			if (value == null) {_				throw new JSONException("Value at " + index + " is null.")__			}_			return value__		}_		catch (IndexOutOfBoundsException e) {_			throw new JSONException(_					"Index " + index + " out of range [0.." + this.values.size() + ")")__		}_	};returns,the,value,at,code,index,param,index,the,index,to,get,the,value,from,return,the,value,at,code,index,throws,jsonexception,if,this,array,has,no,value,at,code,index,or,if,that,value,is,the,code,null,reference,this,method,returns,normally,if,the,value,is,code,jsonobject,null;public,object,get,int,index,throws,jsonexception,try,object,value,this,values,get,index,if,value,null,throw,new,jsonexception,value,at,index,is,null,return,value,catch,index,out,of,bounds,exception,e,throw,new,jsonexception,index,index,out,of,range,0,this,values,size
JSONArray -> public Object get(int index) throws JSONException;1516215803;Returns the value at {@code index}._@param index the index to get the value from_@return the value at {@code index}._@throws JSONException if this array has no value at {@code index}, or if that value_is the {@code null} reference. This method returns normally if the value is_{@code JSONObject#NULL}.;public Object get(int index) throws JSONException {_		try {_			Object value = this.values.get(index)__			if (value == null) {_				throw new JSONException("Value at " + index + " is null.")__			}_			return value__		}_		catch (IndexOutOfBoundsException e) {_			throw new JSONException(_					"Index " + index + " out of range [0.." + this.values.size() + ")")__		}_	};returns,the,value,at,code,index,param,index,the,index,to,get,the,value,from,return,the,value,at,code,index,throws,jsonexception,if,this,array,has,no,value,at,code,index,or,if,that,value,is,the,code,null,reference,this,method,returns,normally,if,the,value,is,code,jsonobject,null;public,object,get,int,index,throws,jsonexception,try,object,value,this,values,get,index,if,value,null,throw,new,jsonexception,value,at,index,is,null,return,value,catch,index,out,of,bounds,exception,e,throw,new,jsonexception,index,index,out,of,range,0,this,values,size
JSONArray -> public Object get(int index) throws JSONException;1531461359;Returns the value at {@code index}._@param index the index to get the value from_@return the value at {@code index}._@throws JSONException if this array has no value at {@code index}, or if that value_is the {@code null} reference. This method returns normally if the value is_{@code JSONObject#NULL}.;public Object get(int index) throws JSONException {_		try {_			Object value = this.values.get(index)__			if (value == null) {_				throw new JSONException("Value at " + index + " is null.")__			}_			return value__		}_		catch (IndexOutOfBoundsException e) {_			throw new JSONException(_					"Index " + index + " out of range [0.." + this.values.size() + ")")__		}_	};returns,the,value,at,code,index,param,index,the,index,to,get,the,value,from,return,the,value,at,code,index,throws,jsonexception,if,this,array,has,no,value,at,code,index,or,if,that,value,is,the,code,null,reference,this,method,returns,normally,if,the,value,is,code,jsonobject,null;public,object,get,int,index,throws,jsonexception,try,object,value,this,values,get,index,if,value,null,throw,new,jsonexception,value,at,index,is,null,return,value,catch,index,out,of,bounds,exception,e,throw,new,jsonexception,index,index,out,of,range,0,this,values,size
JSONArray -> public JSONArray put(int value);1515446271;Appends {@code value} to the end of this array._@param value the value_@return this array.;public JSONArray put(int value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,the,value,return,this,array;public,jsonarray,put,int,value,this,values,add,value,return,this
JSONArray -> public JSONArray put(int value);1516008705;Appends {@code value} to the end of this array._@param value the value_@return this array.;public JSONArray put(int value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,the,value,return,this,array;public,jsonarray,put,int,value,this,values,add,value,return,this
JSONArray -> public JSONArray put(int value);1516215803;Appends {@code value} to the end of this array._@param value the value_@return this array.;public JSONArray put(int value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,the,value,return,this,array;public,jsonarray,put,int,value,this,values,add,value,return,this
JSONArray -> public JSONArray put(int value);1531461359;Appends {@code value} to the end of this array._@param value the value_@return this array.;public JSONArray put(int value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,the,value,return,this,array;public,jsonarray,put,int,value,this,values,add,value,return,this
JSONArray -> public String toString(int indentSpaces) throws JSONException;1515446271;Encodes this array as a human readable JSON string for debugging, such as: <pre>__94043,_90210_]</pre>__@param indentSpaces the number of spaces to indent for each level of nesting._@return a human readable JSON string of this array_@throws JSONException if processing of json failed;public String toString(int indentSpaces) throws JSONException {_		JSONStringer stringer = new JSONStringer(indentSpaces)__		writeTo(stringer)__		return stringer.toString()__	};encodes,this,array,as,a,human,readable,json,string,for,debugging,such,as,pre,94043,90210,pre,param,indent,spaces,the,number,of,spaces,to,indent,for,each,level,of,nesting,return,a,human,readable,json,string,of,this,array,throws,jsonexception,if,processing,of,json,failed;public,string,to,string,int,indent,spaces,throws,jsonexception,jsonstringer,stringer,new,jsonstringer,indent,spaces,write,to,stringer,return,stringer,to,string
JSONArray -> public String toString(int indentSpaces) throws JSONException;1516008705;Encodes this array as a human readable JSON string for debugging, such as: <pre>__94043,_90210_]</pre>__@param indentSpaces the number of spaces to indent for each level of nesting._@return a human readable JSON string of this array_@throws JSONException if processing of json failed;public String toString(int indentSpaces) throws JSONException {_		JSONStringer stringer = new JSONStringer(indentSpaces)__		writeTo(stringer)__		return stringer.toString()__	};encodes,this,array,as,a,human,readable,json,string,for,debugging,such,as,pre,94043,90210,pre,param,indent,spaces,the,number,of,spaces,to,indent,for,each,level,of,nesting,return,a,human,readable,json,string,of,this,array,throws,jsonexception,if,processing,of,json,failed;public,string,to,string,int,indent,spaces,throws,jsonexception,jsonstringer,stringer,new,jsonstringer,indent,spaces,write,to,stringer,return,stringer,to,string
JSONArray -> public String toString(int indentSpaces) throws JSONException;1516215803;Encodes this array as a human readable JSON string for debugging, such as: <pre>__94043,_90210_]</pre>__@param indentSpaces the number of spaces to indent for each level of nesting._@return a human readable JSON string of this array_@throws JSONException if processing of json failed;public String toString(int indentSpaces) throws JSONException {_		JSONStringer stringer = new JSONStringer(indentSpaces)__		writeTo(stringer)__		return stringer.toString()__	};encodes,this,array,as,a,human,readable,json,string,for,debugging,such,as,pre,94043,90210,pre,param,indent,spaces,the,number,of,spaces,to,indent,for,each,level,of,nesting,return,a,human,readable,json,string,of,this,array,throws,jsonexception,if,processing,of,json,failed;public,string,to,string,int,indent,spaces,throws,jsonexception,jsonstringer,stringer,new,jsonstringer,indent,spaces,write,to,stringer,return,stringer,to,string
JSONArray -> public String toString(int indentSpaces) throws JSONException;1531461359;Encodes this array as a human readable JSON string for debugging, such as: <pre>__94043,_90210_]</pre>__@param indentSpaces the number of spaces to indent for each level of nesting._@return a human readable JSON string of this array_@throws JSONException if processing of json failed;public String toString(int indentSpaces) throws JSONException {_		JSONStringer stringer = new JSONStringer(indentSpaces)__		writeTo(stringer)__		return stringer.toString()__	};encodes,this,array,as,a,human,readable,json,string,for,debugging,such,as,pre,94043,90210,pre,param,indent,spaces,the,number,of,spaces,to,indent,for,each,level,of,nesting,return,a,human,readable,json,string,of,this,array,throws,jsonexception,if,processing,of,json,failed;public,string,to,string,int,indent,spaces,throws,jsonexception,jsonstringer,stringer,new,jsonstringer,indent,spaces,write,to,stringer,return,stringer,to,string
JSONArray -> public JSONArray put(boolean value);1515446271;Appends {@code value} to the end of this array.__@param value the value_@return this array.;public JSONArray put(boolean value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,the,value,return,this,array;public,jsonarray,put,boolean,value,this,values,add,value,return,this
JSONArray -> public JSONArray put(boolean value);1516008705;Appends {@code value} to the end of this array.__@param value the value_@return this array.;public JSONArray put(boolean value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,the,value,return,this,array;public,jsonarray,put,boolean,value,this,values,add,value,return,this
JSONArray -> public JSONArray put(boolean value);1516215803;Appends {@code value} to the end of this array.__@param value the value_@return this array.;public JSONArray put(boolean value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,the,value,return,this,array;public,jsonarray,put,boolean,value,this,values,add,value,return,this
JSONArray -> public JSONArray put(boolean value);1531461359;Appends {@code value} to the end of this array.__@param value the value_@return this array.;public JSONArray put(boolean value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,the,value,return,this,array;public,jsonarray,put,boolean,value,this,values,add,value,return,this
JSONArray -> public boolean isNull(int index);1515446271;Returns true if this array has no value at {@code index}, or if its value is the_{@code null} reference or {@link JSONObject#NULL}._@param index the index to set the value to_@return true if this array has no value at {@code index};public boolean isNull(int index) {_		Object value = opt(index)__		return value == null || value == JSONObject.NULL__	};returns,true,if,this,array,has,no,value,at,code,index,or,if,its,value,is,the,code,null,reference,or,link,jsonobject,null,param,index,the,index,to,set,the,value,to,return,true,if,this,array,has,no,value,at,code,index;public,boolean,is,null,int,index,object,value,opt,index,return,value,null,value,jsonobject,null
JSONArray -> public boolean isNull(int index);1516008705;Returns true if this array has no value at {@code index}, or if its value is the_{@code null} reference or {@link JSONObject#NULL}._@param index the index to set the value to_@return true if this array has no value at {@code index};public boolean isNull(int index) {_		Object value = opt(index)__		return value == null || value == JSONObject.NULL__	};returns,true,if,this,array,has,no,value,at,code,index,or,if,its,value,is,the,code,null,reference,or,link,jsonobject,null,param,index,the,index,to,set,the,value,to,return,true,if,this,array,has,no,value,at,code,index;public,boolean,is,null,int,index,object,value,opt,index,return,value,null,value,jsonobject,null
JSONArray -> public boolean isNull(int index);1516215803;Returns true if this array has no value at {@code index}, or if its value is the_{@code null} reference or {@link JSONObject#NULL}._@param index the index to set the value to_@return true if this array has no value at {@code index};public boolean isNull(int index) {_		Object value = opt(index)__		return value == null || value == JSONObject.NULL__	};returns,true,if,this,array,has,no,value,at,code,index,or,if,its,value,is,the,code,null,reference,or,link,jsonobject,null,param,index,the,index,to,set,the,value,to,return,true,if,this,array,has,no,value,at,code,index;public,boolean,is,null,int,index,object,value,opt,index,return,value,null,value,jsonobject,null
JSONArray -> public boolean isNull(int index);1531461359;Returns true if this array has no value at {@code index}, or if its value is the_{@code null} reference or {@link JSONObject#NULL}._@param index the index to set the value to_@return true if this array has no value at {@code index};public boolean isNull(int index) {_		Object value = opt(index)__		return value == null || value == JSONObject.NULL__	};returns,true,if,this,array,has,no,value,at,code,index,or,if,its,value,is,the,code,null,reference,or,link,jsonobject,null,param,index,the,index,to,set,the,value,to,return,true,if,this,array,has,no,value,at,code,index;public,boolean,is,null,int,index,object,value,opt,index,return,value,null,value,jsonobject,null
JSONArray -> public String optString(int index);1515446271;Returns the value at {@code index} if it exists, coercing it if necessary. Returns_the empty string if no such value exists._@param index the index to get the value from_@return the {@code value} or an empty string;public String optString(int index) {_		return optString(index, "")__	};returns,the,value,at,code,index,if,it,exists,coercing,it,if,necessary,returns,the,empty,string,if,no,such,value,exists,param,index,the,index,to,get,the,value,from,return,the,code,value,or,an,empty,string;public,string,opt,string,int,index,return,opt,string,index
JSONArray -> public String optString(int index);1516008705;Returns the value at {@code index} if it exists, coercing it if necessary. Returns_the empty string if no such value exists._@param index the index to get the value from_@return the {@code value} or an empty string;public String optString(int index) {_		return optString(index, "")__	};returns,the,value,at,code,index,if,it,exists,coercing,it,if,necessary,returns,the,empty,string,if,no,such,value,exists,param,index,the,index,to,get,the,value,from,return,the,code,value,or,an,empty,string;public,string,opt,string,int,index,return,opt,string,index
JSONArray -> public String optString(int index);1516215803;Returns the value at {@code index} if it exists, coercing it if necessary. Returns_the empty string if no such value exists._@param index the index to get the value from_@return the {@code value} or an empty string;public String optString(int index) {_		return optString(index, "")__	};returns,the,value,at,code,index,if,it,exists,coercing,it,if,necessary,returns,the,empty,string,if,no,such,value,exists,param,index,the,index,to,get,the,value,from,return,the,code,value,or,an,empty,string;public,string,opt,string,int,index,return,opt,string,index
JSONArray -> public String optString(int index);1531461359;Returns the value at {@code index} if it exists, coercing it if necessary. Returns_the empty string if no such value exists._@param index the index to get the value from_@return the {@code value} or an empty string;public String optString(int index) {_		return optString(index, "")__	};returns,the,value,at,code,index,if,it,exists,coercing,it,if,necessary,returns,the,empty,string,if,no,such,value,exists,param,index,the,index,to,get,the,value,from,return,the,code,value,or,an,empty,string;public,string,opt,string,int,index,return,opt,string,index
JSONArray -> public boolean getBoolean(int index) throws JSONException;1515446271;Returns the value at {@code index} if it exists and is a boolean or can be coerced_to a boolean._@param index the index to get the value from_@return the value at {@code index}_@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a boolean.;public boolean getBoolean(int index) throws JSONException {_		Object object = get(index)__		Boolean result = JSON.toBoolean(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "boolean")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,a,boolean,or,can,be,coerced,to,a,boolean,param,index,the,index,to,get,the,value,from,return,the,value,at,code,index,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,boolean;public,boolean,get,boolean,int,index,throws,jsonexception,object,object,get,index,boolean,result,json,to,boolean,object,if,result,null,throw,json,type,mismatch,index,object,boolean,return,result
JSONArray -> public boolean getBoolean(int index) throws JSONException;1516008705;Returns the value at {@code index} if it exists and is a boolean or can be coerced_to a boolean._@param index the index to get the value from_@return the value at {@code index}_@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a boolean.;public boolean getBoolean(int index) throws JSONException {_		Object object = get(index)__		Boolean result = JSON.toBoolean(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "boolean")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,a,boolean,or,can,be,coerced,to,a,boolean,param,index,the,index,to,get,the,value,from,return,the,value,at,code,index,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,boolean;public,boolean,get,boolean,int,index,throws,jsonexception,object,object,get,index,boolean,result,json,to,boolean,object,if,result,null,throw,json,type,mismatch,index,object,boolean,return,result
JSONArray -> public boolean getBoolean(int index) throws JSONException;1516215803;Returns the value at {@code index} if it exists and is a boolean or can be coerced_to a boolean._@param index the index to get the value from_@return the value at {@code index}_@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a boolean.;public boolean getBoolean(int index) throws JSONException {_		Object object = get(index)__		Boolean result = JSON.toBoolean(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "boolean")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,a,boolean,or,can,be,coerced,to,a,boolean,param,index,the,index,to,get,the,value,from,return,the,value,at,code,index,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,boolean;public,boolean,get,boolean,int,index,throws,jsonexception,object,object,get,index,boolean,result,json,to,boolean,object,if,result,null,throw,json,type,mismatch,index,object,boolean,return,result
JSONArray -> public boolean getBoolean(int index) throws JSONException;1531461359;Returns the value at {@code index} if it exists and is a boolean or can be coerced_to a boolean._@param index the index to get the value from_@return the value at {@code index}_@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a boolean.;public boolean getBoolean(int index) throws JSONException {_		Object object = get(index)__		Boolean result = JSON.toBoolean(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "boolean")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,a,boolean,or,can,be,coerced,to,a,boolean,param,index,the,index,to,get,the,value,from,return,the,value,at,code,index,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,boolean;public,boolean,get,boolean,int,index,throws,jsonexception,object,object,get,index,boolean,result,json,to,boolean,object,if,result,null,throw,json,type,mismatch,index,object,boolean,return,result
JSONArray -> public long getLong(int index) throws JSONException;1515446271;Returns the value at {@code index} if it exists and is a long or can be coerced to_a long._@param index the index to get the value from_@return the {@code value}__@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a long.;public long getLong(int index) throws JSONException {_		Object object = get(index)__		Long result = JSON.toLong(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "long")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,a,long,or,can,be,coerced,to,a,long,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,long;public,long,get,long,int,index,throws,jsonexception,object,object,get,index,long,result,json,to,long,object,if,result,null,throw,json,type,mismatch,index,object,long,return,result
JSONArray -> public long getLong(int index) throws JSONException;1516008705;Returns the value at {@code index} if it exists and is a long or can be coerced to_a long._@param index the index to get the value from_@return the {@code value}__@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a long.;public long getLong(int index) throws JSONException {_		Object object = get(index)__		Long result = JSON.toLong(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "long")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,a,long,or,can,be,coerced,to,a,long,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,long;public,long,get,long,int,index,throws,jsonexception,object,object,get,index,long,result,json,to,long,object,if,result,null,throw,json,type,mismatch,index,object,long,return,result
JSONArray -> public long getLong(int index) throws JSONException;1516215803;Returns the value at {@code index} if it exists and is a long or can be coerced to_a long._@param index the index to get the value from_@return the {@code value}__@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a long.;public long getLong(int index) throws JSONException {_		Object object = get(index)__		Long result = JSON.toLong(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "long")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,a,long,or,can,be,coerced,to,a,long,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,long;public,long,get,long,int,index,throws,jsonexception,object,object,get,index,long,result,json,to,long,object,if,result,null,throw,json,type,mismatch,index,object,long,return,result
JSONArray -> public long getLong(int index) throws JSONException;1531461359;Returns the value at {@code index} if it exists and is a long or can be coerced to_a long._@param index the index to get the value from_@return the {@code value}__@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a long.;public long getLong(int index) throws JSONException {_		Object object = get(index)__		Long result = JSON.toLong(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "long")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,a,long,or,can,be,coerced,to,a,long,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,long;public,long,get,long,int,index,throws,jsonexception,object,object,get,index,long,result,json,to,long,object,if,result,null,throw,json,type,mismatch,index,object,long,return,result
JSONArray -> public String optString(int index, String fallback);1515446271;Returns the value at {@code index} if it exists, coercing it if necessary. Returns_{@code fallback} if no such value exists._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public String optString(int index, String fallback) {_		Object object = opt(index)__		String result = JSON.toString(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,coercing,it,if,necessary,returns,code,fallback,if,no,such,value,exists,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,string,opt,string,int,index,string,fallback,object,object,opt,index,string,result,json,to,string,object,return,result,null,result,fallback
JSONArray -> public String optString(int index, String fallback);1516008705;Returns the value at {@code index} if it exists, coercing it if necessary. Returns_{@code fallback} if no such value exists._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public String optString(int index, String fallback) {_		Object object = opt(index)__		String result = JSON.toString(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,coercing,it,if,necessary,returns,code,fallback,if,no,such,value,exists,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,string,opt,string,int,index,string,fallback,object,object,opt,index,string,result,json,to,string,object,return,result,null,result,fallback
JSONArray -> public String optString(int index, String fallback);1516215803;Returns the value at {@code index} if it exists, coercing it if necessary. Returns_{@code fallback} if no such value exists._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public String optString(int index, String fallback) {_		Object object = opt(index)__		String result = JSON.toString(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,coercing,it,if,necessary,returns,code,fallback,if,no,such,value,exists,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,string,opt,string,int,index,string,fallback,object,object,opt,index,string,result,json,to,string,object,return,result,null,result,fallback
JSONArray -> public String optString(int index, String fallback);1531461359;Returns the value at {@code index} if it exists, coercing it if necessary. Returns_{@code fallback} if no such value exists._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public String optString(int index, String fallback) {_		Object object = opt(index)__		String result = JSON.toString(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,coercing,it,if,necessary,returns,code,fallback,if,no,such,value,exists,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,string,opt,string,int,index,string,fallback,object,object,opt,index,string,result,json,to,string,object,return,result,null,result,fallback
JSONArray -> public String getString(int index) throws JSONException;1515446271;Returns the value at {@code index} if it exists, coercing it if necessary._@param index the index to get the value from_@return the {@code value}_@throws JSONException if no such value exists.;public String getString(int index) throws JSONException {_		Object object = get(index)__		String result = JSON.toString(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "String")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,coercing,it,if,necessary,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,no,such,value,exists;public,string,get,string,int,index,throws,jsonexception,object,object,get,index,string,result,json,to,string,object,if,result,null,throw,json,type,mismatch,index,object,string,return,result
JSONArray -> public String getString(int index) throws JSONException;1516008705;Returns the value at {@code index} if it exists, coercing it if necessary._@param index the index to get the value from_@return the {@code value}_@throws JSONException if no such value exists.;public String getString(int index) throws JSONException {_		Object object = get(index)__		String result = JSON.toString(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "String")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,coercing,it,if,necessary,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,no,such,value,exists;public,string,get,string,int,index,throws,jsonexception,object,object,get,index,string,result,json,to,string,object,if,result,null,throw,json,type,mismatch,index,object,string,return,result
JSONArray -> public String getString(int index) throws JSONException;1516215803;Returns the value at {@code index} if it exists, coercing it if necessary._@param index the index to get the value from_@return the {@code value}_@throws JSONException if no such value exists.;public String getString(int index) throws JSONException {_		Object object = get(index)__		String result = JSON.toString(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "String")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,coercing,it,if,necessary,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,no,such,value,exists;public,string,get,string,int,index,throws,jsonexception,object,object,get,index,string,result,json,to,string,object,if,result,null,throw,json,type,mismatch,index,object,string,return,result
JSONArray -> public String getString(int index) throws JSONException;1531461359;Returns the value at {@code index} if it exists, coercing it if necessary._@param index the index to get the value from_@return the {@code value}_@throws JSONException if no such value exists.;public String getString(int index) throws JSONException {_		Object object = get(index)__		String result = JSON.toString(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "String")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,coercing,it,if,necessary,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,no,such,value,exists;public,string,get,string,int,index,throws,jsonexception,object,object,get,index,string,result,json,to,string,object,if,result,null,throw,json,type,mismatch,index,object,string,return,result
JSONArray -> public JSONObject optJSONObject(int index);1515446271;Returns the value at {@code index} if it exists and is a {@code_JSONObject}. Returns null otherwise._@param index the index to get the value from_@return the object at {@code index} or {@code null};public JSONObject optJSONObject(int index) {_		Object object = opt(index)__		return object instanceof JSONObject ? (JSONObject) object : null__	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonobject,returns,null,otherwise,param,index,the,index,to,get,the,value,from,return,the,object,at,code,index,or,code,null;public,jsonobject,opt,jsonobject,int,index,object,object,opt,index,return,object,instanceof,jsonobject,jsonobject,object,null
JSONArray -> public JSONObject optJSONObject(int index);1516008705;Returns the value at {@code index} if it exists and is a {@code_JSONObject}. Returns null otherwise._@param index the index to get the value from_@return the object at {@code index} or {@code null};public JSONObject optJSONObject(int index) {_		Object object = opt(index)__		return object instanceof JSONObject ? (JSONObject) object : null__	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonobject,returns,null,otherwise,param,index,the,index,to,get,the,value,from,return,the,object,at,code,index,or,code,null;public,jsonobject,opt,jsonobject,int,index,object,object,opt,index,return,object,instanceof,jsonobject,jsonobject,object,null
JSONArray -> public JSONObject optJSONObject(int index);1516215803;Returns the value at {@code index} if it exists and is a {@code_JSONObject}. Returns null otherwise._@param index the index to get the value from_@return the object at {@code index} or {@code null};public JSONObject optJSONObject(int index) {_		Object object = opt(index)__		return object instanceof JSONObject ? (JSONObject) object : null__	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonobject,returns,null,otherwise,param,index,the,index,to,get,the,value,from,return,the,object,at,code,index,or,code,null;public,jsonobject,opt,jsonobject,int,index,object,object,opt,index,return,object,instanceof,jsonobject,jsonobject,object,null
JSONArray -> public JSONObject optJSONObject(int index);1531461359;Returns the value at {@code index} if it exists and is a {@code_JSONObject}. Returns null otherwise._@param index the index to get the value from_@return the object at {@code index} or {@code null};public JSONObject optJSONObject(int index) {_		Object object = opt(index)__		return object instanceof JSONObject ? (JSONObject) object : null__	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonobject,returns,null,otherwise,param,index,the,index,to,get,the,value,from,return,the,object,at,code,index,or,code,null;public,jsonobject,opt,jsonobject,int,index,object,object,opt,index,return,object,instanceof,jsonobject,jsonobject,object,null
JSONArray -> public int optInt(int index, int fallback);1515446271;Returns the value at {@code index} if it exists and is an int or can be coerced to_an int. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public int optInt(int index, int fallback) {_		Object object = opt(index)__		Integer result = JSON.toInteger(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,an,int,or,can,be,coerced,to,an,int,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,int,opt,int,int,index,int,fallback,object,object,opt,index,integer,result,json,to,integer,object,return,result,null,result,fallback
JSONArray -> public int optInt(int index, int fallback);1516008705;Returns the value at {@code index} if it exists and is an int or can be coerced to_an int. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public int optInt(int index, int fallback) {_		Object object = opt(index)__		Integer result = JSON.toInteger(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,an,int,or,can,be,coerced,to,an,int,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,int,opt,int,int,index,int,fallback,object,object,opt,index,integer,result,json,to,integer,object,return,result,null,result,fallback
JSONArray -> public int optInt(int index, int fallback);1516215803;Returns the value at {@code index} if it exists and is an int or can be coerced to_an int. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public int optInt(int index, int fallback) {_		Object object = opt(index)__		Integer result = JSON.toInteger(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,an,int,or,can,be,coerced,to,an,int,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,int,opt,int,int,index,int,fallback,object,object,opt,index,integer,result,json,to,integer,object,return,result,null,result,fallback
JSONArray -> public int optInt(int index, int fallback);1531461359;Returns the value at {@code index} if it exists and is an int or can be coerced to_an int. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public int optInt(int index, int fallback) {_		Object object = opt(index)__		Integer result = JSON.toInteger(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,an,int,or,can,be,coerced,to,an,int,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,int,opt,int,int,index,int,fallback,object,object,opt,index,integer,result,json,to,integer,object,return,result,null,result,fallback
JSONArray -> public JSONArray put(long value);1515446271;Appends {@code value} to the end of this array._@param value the value_@return this array.;public JSONArray put(long value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,the,value,return,this,array;public,jsonarray,put,long,value,this,values,add,value,return,this
JSONArray -> public JSONArray put(long value);1516008705;Appends {@code value} to the end of this array._@param value the value_@return this array.;public JSONArray put(long value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,the,value,return,this,array;public,jsonarray,put,long,value,this,values,add,value,return,this
JSONArray -> public JSONArray put(long value);1516215803;Appends {@code value} to the end of this array._@param value the value_@return this array.;public JSONArray put(long value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,the,value,return,this,array;public,jsonarray,put,long,value,this,values,add,value,return,this
JSONArray -> public JSONArray put(long value);1531461359;Appends {@code value} to the end of this array._@param value the value_@return this array.;public JSONArray put(long value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,the,value,return,this,array;public,jsonarray,put,long,value,this,values,add,value,return,this
JSONArray -> public JSONObject getJSONObject(int index) throws JSONException;1515446271;Returns the value at {@code index} if it exists and is a {@code_JSONObject}._@param index the index to get the value from_@return the object at {@code index}_@throws JSONException if the value doesn't exist or is not a {@code_JSONObject}.;public JSONObject getJSONObject(int index) throws JSONException {_		Object object = get(index)__		if (object instanceof JSONObject) {_			return (JSONObject) object__		}_		else {_			throw JSON.typeMismatch(index, object, "JSONObject")__		}_	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonobject,param,index,the,index,to,get,the,value,from,return,the,object,at,code,index,throws,jsonexception,if,the,value,doesn,t,exist,or,is,not,a,code,jsonobject;public,jsonobject,get,jsonobject,int,index,throws,jsonexception,object,object,get,index,if,object,instanceof,jsonobject,return,jsonobject,object,else,throw,json,type,mismatch,index,object,jsonobject
JSONArray -> public JSONObject getJSONObject(int index) throws JSONException;1516008705;Returns the value at {@code index} if it exists and is a {@code_JSONObject}._@param index the index to get the value from_@return the object at {@code index}_@throws JSONException if the value doesn't exist or is not a {@code_JSONObject}.;public JSONObject getJSONObject(int index) throws JSONException {_		Object object = get(index)__		if (object instanceof JSONObject) {_			return (JSONObject) object__		}_		else {_			throw JSON.typeMismatch(index, object, "JSONObject")__		}_	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonobject,param,index,the,index,to,get,the,value,from,return,the,object,at,code,index,throws,jsonexception,if,the,value,doesn,t,exist,or,is,not,a,code,jsonobject;public,jsonobject,get,jsonobject,int,index,throws,jsonexception,object,object,get,index,if,object,instanceof,jsonobject,return,jsonobject,object,else,throw,json,type,mismatch,index,object,jsonobject
JSONArray -> public JSONObject getJSONObject(int index) throws JSONException;1516215803;Returns the value at {@code index} if it exists and is a {@code_JSONObject}._@param index the index to get the value from_@return the object at {@code index}_@throws JSONException if the value doesn't exist or is not a {@code_JSONObject}.;public JSONObject getJSONObject(int index) throws JSONException {_		Object object = get(index)__		if (object instanceof JSONObject) {_			return (JSONObject) object__		}_		else {_			throw JSON.typeMismatch(index, object, "JSONObject")__		}_	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonobject,param,index,the,index,to,get,the,value,from,return,the,object,at,code,index,throws,jsonexception,if,the,value,doesn,t,exist,or,is,not,a,code,jsonobject;public,jsonobject,get,jsonobject,int,index,throws,jsonexception,object,object,get,index,if,object,instanceof,jsonobject,return,jsonobject,object,else,throw,json,type,mismatch,index,object,jsonobject
JSONArray -> public JSONObject getJSONObject(int index) throws JSONException;1531461359;Returns the value at {@code index} if it exists and is a {@code_JSONObject}._@param index the index to get the value from_@return the object at {@code index}_@throws JSONException if the value doesn't exist or is not a {@code_JSONObject}.;public JSONObject getJSONObject(int index) throws JSONException {_		Object object = get(index)__		if (object instanceof JSONObject) {_			return (JSONObject) object__		}_		else {_			throw JSON.typeMismatch(index, object, "JSONObject")__		}_	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonobject,param,index,the,index,to,get,the,value,from,return,the,object,at,code,index,throws,jsonexception,if,the,value,doesn,t,exist,or,is,not,a,code,jsonobject;public,jsonobject,get,jsonobject,int,index,throws,jsonexception,object,object,get,index,if,object,instanceof,jsonobject,return,jsonobject,object,else,throw,json,type,mismatch,index,object,jsonobject
JSONArray -> public JSONArray(Object array) throws JSONException;1515446271;Creates a new {@code JSONArray} with values from the given primitive array._@param array a primitive array_@throws JSONException if processing of json failed;public JSONArray(Object array) throws JSONException {_		if (!array.getClass().isArray()) {_			throw new JSONException("Not a primitive array: " + array.getClass())__		}_		final int length = Array.getLength(array)__		this.values = new ArrayList<Object>(length)__		for (int i = 0_ i < length_ ++i) {_			put(JSONObject.wrap(Array.get(array, i)))__		}_	};creates,a,new,code,jsonarray,with,values,from,the,given,primitive,array,param,array,a,primitive,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,object,array,throws,jsonexception,if,array,get,class,is,array,throw,new,jsonexception,not,a,primitive,array,array,get,class,final,int,length,array,get,length,array,this,values,new,array,list,object,length,for,int,i,0,i,length,i,put,jsonobject,wrap,array,get,array,i
JSONArray -> public JSONArray(Object array) throws JSONException;1516008705;Creates a new {@code JSONArray} with values from the given primitive array._@param array a primitive array_@throws JSONException if processing of json failed;public JSONArray(Object array) throws JSONException {_		if (!array.getClass().isArray()) {_			throw new JSONException("Not a primitive array: " + array.getClass())__		}_		final int length = Array.getLength(array)__		this.values = new ArrayList<Object>(length)__		for (int i = 0_ i < length_ ++i) {_			put(JSONObject.wrap(Array.get(array, i)))__		}_	};creates,a,new,code,jsonarray,with,values,from,the,given,primitive,array,param,array,a,primitive,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,object,array,throws,jsonexception,if,array,get,class,is,array,throw,new,jsonexception,not,a,primitive,array,array,get,class,final,int,length,array,get,length,array,this,values,new,array,list,object,length,for,int,i,0,i,length,i,put,jsonobject,wrap,array,get,array,i
JSONArray -> public JSONArray(Object array) throws JSONException;1516215803;Creates a new {@code JSONArray} with values from the given primitive array._@param array a primitive array_@throws JSONException if processing of json failed;public JSONArray(Object array) throws JSONException {_		if (!array.getClass().isArray()) {_			throw new JSONException("Not a primitive array: " + array.getClass())__		}_		final int length = Array.getLength(array)__		this.values = new ArrayList<>(length)__		for (int i = 0_ i < length_ ++i) {_			put(JSONObject.wrap(Array.get(array, i)))__		}_	};creates,a,new,code,jsonarray,with,values,from,the,given,primitive,array,param,array,a,primitive,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,object,array,throws,jsonexception,if,array,get,class,is,array,throw,new,jsonexception,not,a,primitive,array,array,get,class,final,int,length,array,get,length,array,this,values,new,array,list,length,for,int,i,0,i,length,i,put,jsonobject,wrap,array,get,array,i
JSONArray -> public JSONArray(Object array) throws JSONException;1531461359;Creates a new {@code JSONArray} with values from the given primitive array._@param array a primitive array_@throws JSONException if processing of json failed;public JSONArray(Object array) throws JSONException {_		if (!array.getClass().isArray()) {_			throw new JSONException("Not a primitive array: " + array.getClass())__		}_		final int length = Array.getLength(array)__		this.values = new ArrayList<>(length)__		for (int i = 0_ i < length_ ++i) {_			put(JSONObject.wrap(Array.get(array, i)))__		}_	};creates,a,new,code,jsonarray,with,values,from,the,given,primitive,array,param,array,a,primitive,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,object,array,throws,jsonexception,if,array,get,class,is,array,throw,new,jsonexception,not,a,primitive,array,array,get,class,final,int,length,array,get,length,array,this,values,new,array,list,length,for,int,i,0,i,length,i,put,jsonobject,wrap,array,get,array,i
JSONArray -> public int length();1515446271;Returns the number of values in this array._@return the length of this array;public int length() {_		return this.values.size()__	};returns,the,number,of,values,in,this,array,return,the,length,of,this,array;public,int,length,return,this,values,size
JSONArray -> public int length();1516008705;Returns the number of values in this array._@return the length of this array;public int length() {_		return this.values.size()__	};returns,the,number,of,values,in,this,array,return,the,length,of,this,array;public,int,length,return,this,values,size
JSONArray -> public int length();1516215803;Returns the number of values in this array._@return the length of this array;public int length() {_		return this.values.size()__	};returns,the,number,of,values,in,this,array,return,the,length,of,this,array;public,int,length,return,this,values,size
JSONArray -> public int length();1531461359;Returns the number of values in this array._@return the length of this array;public int length() {_		return this.values.size()__	};returns,the,number,of,values,in,this,array,return,the,length,of,this,array;public,int,length,return,this,values,size
JSONArray -> public JSONArray put(Object value);1515446271;Appends {@code value} to the end of this array.__@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,_Long, Double, {@link JSONObject#NULL}, or {@code null}. May not be_{@link Double#isNaN() NaNs} or {@link Double#isInfinite() infinities}. Unsupported_values are not permitted and will cause the array to be in an inconsistent state._@return this array.;public JSONArray put(Object value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,a,link,jsonobject,link,jsonarray,string,boolean,integer,long,double,link,jsonobject,null,or,code,null,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,unsupported,values,are,not,permitted,and,will,cause,the,array,to,be,in,an,inconsistent,state,return,this,array;public,jsonarray,put,object,value,this,values,add,value,return,this
JSONArray -> public JSONArray put(Object value);1516008705;Appends {@code value} to the end of this array.__@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,_Long, Double, {@link JSONObject#NULL}, or {@code null}. May not be_{@link Double#isNaN() NaNs} or {@link Double#isInfinite() infinities}. Unsupported_values are not permitted and will cause the array to be in an inconsistent state._@return this array.;public JSONArray put(Object value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,a,link,jsonobject,link,jsonarray,string,boolean,integer,long,double,link,jsonobject,null,or,code,null,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,unsupported,values,are,not,permitted,and,will,cause,the,array,to,be,in,an,inconsistent,state,return,this,array;public,jsonarray,put,object,value,this,values,add,value,return,this
JSONArray -> public JSONArray put(Object value);1516215803;Appends {@code value} to the end of this array.__@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,_Long, Double, {@link JSONObject#NULL}, or {@code null}. May not be_{@link Double#isNaN() NaNs} or {@link Double#isInfinite() infinities}. Unsupported_values are not permitted and will cause the array to be in an inconsistent state._@return this array.;public JSONArray put(Object value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,a,link,jsonobject,link,jsonarray,string,boolean,integer,long,double,link,jsonobject,null,or,code,null,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,unsupported,values,are,not,permitted,and,will,cause,the,array,to,be,in,an,inconsistent,state,return,this,array;public,jsonarray,put,object,value,this,values,add,value,return,this
JSONArray -> public JSONArray put(Object value);1531461359;Appends {@code value} to the end of this array.__@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,_Long, Double, {@link JSONObject#NULL}, or {@code null}. May not be_{@link Double#isNaN() NaNs} or {@link Double#isInfinite() infinities}. Unsupported_values are not permitted and will cause the array to be in an inconsistent state._@return this array.;public JSONArray put(Object value) {_		this.values.add(value)__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,a,link,jsonobject,link,jsonarray,string,boolean,integer,long,double,link,jsonobject,null,or,code,null,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,unsupported,values,are,not,permitted,and,will,cause,the,array,to,be,in,an,inconsistent,state,return,this,array;public,jsonarray,put,object,value,this,values,add,value,return,this
JSONArray -> public JSONObject toJSONObject(JSONArray names) throws JSONException;1515446271;Returns a new object whose values are the values in this array, and whose names are_the values in {@code names}. Names and values are paired up by index from 0 through_to the shorter array's length. Names that are not strings will be coerced to_strings. This method returns null if either array is empty._@param names the property names_@return a json object_@throws JSONException if processing of json failed;public JSONObject toJSONObject(JSONArray names) throws JSONException {_		JSONObject result = new JSONObject()__		int length = Math.min(names.length(), this.values.size())__		if (length == 0) {_			return null__		}_		for (int i = 0_ i < length_ i++) {_			String name = JSON.toString(names.opt(i))__			result.put(name, opt(i))__		}_		return result__	};returns,a,new,object,whose,values,are,the,values,in,this,array,and,whose,names,are,the,values,in,code,names,names,and,values,are,paired,up,by,index,from,0,through,to,the,shorter,array,s,length,names,that,are,not,strings,will,be,coerced,to,strings,this,method,returns,null,if,either,array,is,empty,param,names,the,property,names,return,a,json,object,throws,jsonexception,if,processing,of,json,failed;public,jsonobject,to,jsonobject,jsonarray,names,throws,jsonexception,jsonobject,result,new,jsonobject,int,length,math,min,names,length,this,values,size,if,length,0,return,null,for,int,i,0,i,length,i,string,name,json,to,string,names,opt,i,result,put,name,opt,i,return,result
JSONArray -> public JSONObject toJSONObject(JSONArray names) throws JSONException;1516008705;Returns a new object whose values are the values in this array, and whose names are_the values in {@code names}. Names and values are paired up by index from 0 through_to the shorter array's length. Names that are not strings will be coerced to_strings. This method returns null if either array is empty._@param names the property names_@return a json object_@throws JSONException if processing of json failed;public JSONObject toJSONObject(JSONArray names) throws JSONException {_		JSONObject result = new JSONObject()__		int length = Math.min(names.length(), this.values.size())__		if (length == 0) {_			return null__		}_		for (int i = 0_ i < length_ i++) {_			String name = JSON.toString(names.opt(i))__			result.put(name, opt(i))__		}_		return result__	};returns,a,new,object,whose,values,are,the,values,in,this,array,and,whose,names,are,the,values,in,code,names,names,and,values,are,paired,up,by,index,from,0,through,to,the,shorter,array,s,length,names,that,are,not,strings,will,be,coerced,to,strings,this,method,returns,null,if,either,array,is,empty,param,names,the,property,names,return,a,json,object,throws,jsonexception,if,processing,of,json,failed;public,jsonobject,to,jsonobject,jsonarray,names,throws,jsonexception,jsonobject,result,new,jsonobject,int,length,math,min,names,length,this,values,size,if,length,0,return,null,for,int,i,0,i,length,i,string,name,json,to,string,names,opt,i,result,put,name,opt,i,return,result
JSONArray -> public JSONObject toJSONObject(JSONArray names) throws JSONException;1516215803;Returns a new object whose values are the values in this array, and whose names are_the values in {@code names}. Names and values are paired up by index from 0 through_to the shorter array's length. Names that are not strings will be coerced to_strings. This method returns null if either array is empty._@param names the property names_@return a json object_@throws JSONException if processing of json failed;public JSONObject toJSONObject(JSONArray names) throws JSONException {_		JSONObject result = new JSONObject()__		int length = Math.min(names.length(), this.values.size())__		if (length == 0) {_			return null__		}_		for (int i = 0_ i < length_ i++) {_			String name = JSON.toString(names.opt(i))__			result.put(name, opt(i))__		}_		return result__	};returns,a,new,object,whose,values,are,the,values,in,this,array,and,whose,names,are,the,values,in,code,names,names,and,values,are,paired,up,by,index,from,0,through,to,the,shorter,array,s,length,names,that,are,not,strings,will,be,coerced,to,strings,this,method,returns,null,if,either,array,is,empty,param,names,the,property,names,return,a,json,object,throws,jsonexception,if,processing,of,json,failed;public,jsonobject,to,jsonobject,jsonarray,names,throws,jsonexception,jsonobject,result,new,jsonobject,int,length,math,min,names,length,this,values,size,if,length,0,return,null,for,int,i,0,i,length,i,string,name,json,to,string,names,opt,i,result,put,name,opt,i,return,result
JSONArray -> public JSONObject toJSONObject(JSONArray names) throws JSONException;1531461359;Returns a new object whose values are the values in this array, and whose names are_the values in {@code names}. Names and values are paired up by index from 0 through_to the shorter array's length. Names that are not strings will be coerced to_strings. This method returns null if either array is empty._@param names the property names_@return a json object_@throws JSONException if processing of json failed;public JSONObject toJSONObject(JSONArray names) throws JSONException {_		JSONObject result = new JSONObject()__		int length = Math.min(names.length(), this.values.size())__		if (length == 0) {_			return null__		}_		for (int i = 0_ i < length_ i++) {_			String name = JSON.toString(names.opt(i))__			result.put(name, opt(i))__		}_		return result__	};returns,a,new,object,whose,values,are,the,values,in,this,array,and,whose,names,are,the,values,in,code,names,names,and,values,are,paired,up,by,index,from,0,through,to,the,shorter,array,s,length,names,that,are,not,strings,will,be,coerced,to,strings,this,method,returns,null,if,either,array,is,empty,param,names,the,property,names,return,a,json,object,throws,jsonexception,if,processing,of,json,failed;public,jsonobject,to,jsonobject,jsonarray,names,throws,jsonexception,jsonobject,result,new,jsonobject,int,length,math,min,names,length,this,values,size,if,length,0,return,null,for,int,i,0,i,length,i,string,name,json,to,string,names,opt,i,result,put,name,opt,i,return,result
JSONArray -> public boolean optBoolean(int index);1515446271;Returns the value at {@code index} if it exists and is a boolean or can be coerced_to a boolean. Returns false otherwise._@param index the index to get the value from_@return the {@code value} or {@code false};public boolean optBoolean(int index) {_		return optBoolean(index, false)__	};returns,the,value,at,code,index,if,it,exists,and,is,a,boolean,or,can,be,coerced,to,a,boolean,returns,false,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,false;public,boolean,opt,boolean,int,index,return,opt,boolean,index,false
JSONArray -> public boolean optBoolean(int index);1516008705;Returns the value at {@code index} if it exists and is a boolean or can be coerced_to a boolean. Returns false otherwise._@param index the index to get the value from_@return the {@code value} or {@code false};public boolean optBoolean(int index) {_		return optBoolean(index, false)__	};returns,the,value,at,code,index,if,it,exists,and,is,a,boolean,or,can,be,coerced,to,a,boolean,returns,false,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,false;public,boolean,opt,boolean,int,index,return,opt,boolean,index,false
JSONArray -> public boolean optBoolean(int index);1516215803;Returns the value at {@code index} if it exists and is a boolean or can be coerced_to a boolean. Returns false otherwise._@param index the index to get the value from_@return the {@code value} or {@code false};public boolean optBoolean(int index) {_		return optBoolean(index, false)__	};returns,the,value,at,code,index,if,it,exists,and,is,a,boolean,or,can,be,coerced,to,a,boolean,returns,false,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,false;public,boolean,opt,boolean,int,index,return,opt,boolean,index,false
JSONArray -> public boolean optBoolean(int index);1531461359;Returns the value at {@code index} if it exists and is a boolean or can be coerced_to a boolean. Returns false otherwise._@param index the index to get the value from_@return the {@code value} or {@code false};public boolean optBoolean(int index) {_		return optBoolean(index, false)__	};returns,the,value,at,code,index,if,it,exists,and,is,a,boolean,or,can,be,coerced,to,a,boolean,returns,false,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,false;public,boolean,opt,boolean,int,index,return,opt,boolean,index,false
JSONArray -> public JSONArray put(double value) throws JSONException;1515446271;Appends {@code value} to the end of this array.__@param value a finite value. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this array._@throws JSONException if processing of json failed;public JSONArray put(double value) throws JSONException {_		this.values.add(JSON.checkDouble(value))__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,a,finite,value,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,double,value,throws,jsonexception,this,values,add,json,check,double,value,return,this
JSONArray -> public JSONArray put(double value) throws JSONException;1516008705;Appends {@code value} to the end of this array.__@param value a finite value. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this array._@throws JSONException if processing of json failed;public JSONArray put(double value) throws JSONException {_		this.values.add(JSON.checkDouble(value))__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,a,finite,value,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,double,value,throws,jsonexception,this,values,add,json,check,double,value,return,this
JSONArray -> public JSONArray put(double value) throws JSONException;1516215803;Appends {@code value} to the end of this array.__@param value a finite value. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this array._@throws JSONException if processing of json failed;public JSONArray put(double value) throws JSONException {_		this.values.add(JSON.checkDouble(value))__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,a,finite,value,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,double,value,throws,jsonexception,this,values,add,json,check,double,value,return,this
JSONArray -> public JSONArray put(double value) throws JSONException;1531461359;Appends {@code value} to the end of this array.__@param value a finite value. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this array._@throws JSONException if processing of json failed;public JSONArray put(double value) throws JSONException {_		this.values.add(JSON.checkDouble(value))__		return this__	};appends,code,value,to,the,end,of,this,array,param,value,a,finite,value,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,double,value,throws,jsonexception,this,values,add,json,check,double,value,return,this
JSONArray -> public JSONArray getJSONArray(int index) throws JSONException;1515446271;Returns the value at {@code index} if it exists and is a {@code_JSONArray}._@param index the index to get the value from_@return the array at {@code index}_@throws JSONException if the value doesn't exist or is not a {@code_JSONArray}.;public JSONArray getJSONArray(int index) throws JSONException {_		Object object = get(index)__		if (object instanceof JSONArray) {_			return (JSONArray) object__		}_		else {_			throw JSON.typeMismatch(index, object, "JSONArray")__		}_	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonarray,param,index,the,index,to,get,the,value,from,return,the,array,at,code,index,throws,jsonexception,if,the,value,doesn,t,exist,or,is,not,a,code,jsonarray;public,jsonarray,get,jsonarray,int,index,throws,jsonexception,object,object,get,index,if,object,instanceof,jsonarray,return,jsonarray,object,else,throw,json,type,mismatch,index,object,jsonarray
JSONArray -> public JSONArray getJSONArray(int index) throws JSONException;1516008705;Returns the value at {@code index} if it exists and is a {@code_JSONArray}._@param index the index to get the value from_@return the array at {@code index}_@throws JSONException if the value doesn't exist or is not a {@code_JSONArray}.;public JSONArray getJSONArray(int index) throws JSONException {_		Object object = get(index)__		if (object instanceof JSONArray) {_			return (JSONArray) object__		}_		else {_			throw JSON.typeMismatch(index, object, "JSONArray")__		}_	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonarray,param,index,the,index,to,get,the,value,from,return,the,array,at,code,index,throws,jsonexception,if,the,value,doesn,t,exist,or,is,not,a,code,jsonarray;public,jsonarray,get,jsonarray,int,index,throws,jsonexception,object,object,get,index,if,object,instanceof,jsonarray,return,jsonarray,object,else,throw,json,type,mismatch,index,object,jsonarray
JSONArray -> public JSONArray getJSONArray(int index) throws JSONException;1516215803;Returns the value at {@code index} if it exists and is a {@code_JSONArray}._@param index the index to get the value from_@return the array at {@code index}_@throws JSONException if the value doesn't exist or is not a {@code_JSONArray}.;public JSONArray getJSONArray(int index) throws JSONException {_		Object object = get(index)__		if (object instanceof JSONArray) {_			return (JSONArray) object__		}_		else {_			throw JSON.typeMismatch(index, object, "JSONArray")__		}_	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonarray,param,index,the,index,to,get,the,value,from,return,the,array,at,code,index,throws,jsonexception,if,the,value,doesn,t,exist,or,is,not,a,code,jsonarray;public,jsonarray,get,jsonarray,int,index,throws,jsonexception,object,object,get,index,if,object,instanceof,jsonarray,return,jsonarray,object,else,throw,json,type,mismatch,index,object,jsonarray
JSONArray -> public JSONArray getJSONArray(int index) throws JSONException;1531461359;Returns the value at {@code index} if it exists and is a {@code_JSONArray}._@param index the index to get the value from_@return the array at {@code index}_@throws JSONException if the value doesn't exist or is not a {@code_JSONArray}.;public JSONArray getJSONArray(int index) throws JSONException {_		Object object = get(index)__		if (object instanceof JSONArray) {_			return (JSONArray) object__		}_		else {_			throw JSON.typeMismatch(index, object, "JSONArray")__		}_	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonarray,param,index,the,index,to,get,the,value,from,return,the,array,at,code,index,throws,jsonexception,if,the,value,doesn,t,exist,or,is,not,a,code,jsonarray;public,jsonarray,get,jsonarray,int,index,throws,jsonexception,object,object,get,index,if,object,instanceof,jsonarray,return,jsonarray,object,else,throw,json,type,mismatch,index,object,jsonarray
JSONArray -> public JSONArray put(int index, boolean value) throws JSONException;1515446271;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value the value_@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, boolean value) throws JSONException {_		return put(index, (Boolean) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,the,value,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,boolean,value,throws,jsonexception,return,put,index,boolean,value
JSONArray -> public JSONArray put(int index, boolean value) throws JSONException;1516008705;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value the value_@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, boolean value) throws JSONException {_		return put(index, (Boolean) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,the,value,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,boolean,value,throws,jsonexception,return,put,index,boolean,value
JSONArray -> public JSONArray put(int index, boolean value) throws JSONException;1516215803;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value the value_@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, boolean value) throws JSONException {_		return put(index, (Boolean) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,the,value,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,boolean,value,throws,jsonexception,return,put,index,boolean,value
JSONArray -> public JSONArray put(int index, boolean value) throws JSONException;1531461359;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value the value_@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, boolean value) throws JSONException {_		return put(index, (Boolean) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,the,value,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,boolean,value,throws,jsonexception,return,put,index,boolean,value
JSONArray -> public int optInt(int index);1515446271;Returns the value at {@code index} if it exists and is an int or can be coerced to_an int. Returns 0 otherwise._@param index the index to get the value from_@return the {@code value} or {@code 0};public int optInt(int index) {_		return optInt(index, 0)__	};returns,the,value,at,code,index,if,it,exists,and,is,an,int,or,can,be,coerced,to,an,int,returns,0,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,0;public,int,opt,int,int,index,return,opt,int,index,0
JSONArray -> public int optInt(int index);1516008705;Returns the value at {@code index} if it exists and is an int or can be coerced to_an int. Returns 0 otherwise._@param index the index to get the value from_@return the {@code value} or {@code 0};public int optInt(int index) {_		return optInt(index, 0)__	};returns,the,value,at,code,index,if,it,exists,and,is,an,int,or,can,be,coerced,to,an,int,returns,0,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,0;public,int,opt,int,int,index,return,opt,int,index,0
JSONArray -> public int optInt(int index);1516215803;Returns the value at {@code index} if it exists and is an int or can be coerced to_an int. Returns 0 otherwise._@param index the index to get the value from_@return the {@code value} or {@code 0};public int optInt(int index) {_		return optInt(index, 0)__	};returns,the,value,at,code,index,if,it,exists,and,is,an,int,or,can,be,coerced,to,an,int,returns,0,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,0;public,int,opt,int,int,index,return,opt,int,index,0
JSONArray -> public int optInt(int index);1531461359;Returns the value at {@code index} if it exists and is an int or can be coerced to_an int. Returns 0 otherwise._@param index the index to get the value from_@return the {@code value} or {@code 0};public int optInt(int index) {_		return optInt(index, 0)__	};returns,the,value,at,code,index,if,it,exists,and,is,an,int,or,can,be,coerced,to,an,int,returns,0,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,0;public,int,opt,int,int,index,return,opt,int,index,0
JSONArray -> public JSONArray(String json) throws JSONException;1515446271;Creates a new {@code JSONArray} with values from the JSON string._@param json a JSON-encoded string containing an array._@throws JSONException if the parse fails or doesn't yield a {@code_JSONArray}.;public JSONArray(String json) throws JSONException {_		this(new JSONTokener(json))__	};creates,a,new,code,jsonarray,with,values,from,the,json,string,param,json,a,json,encoded,string,containing,an,array,throws,jsonexception,if,the,parse,fails,or,doesn,t,yield,a,code,jsonarray;public,jsonarray,string,json,throws,jsonexception,this,new,jsontokener,json
JSONArray -> public JSONArray(String json) throws JSONException;1516008705;Creates a new {@code JSONArray} with values from the JSON string._@param json a JSON-encoded string containing an array._@throws JSONException if the parse fails or doesn't yield a {@code_JSONArray}.;public JSONArray(String json) throws JSONException {_		this(new JSONTokener(json))__	};creates,a,new,code,jsonarray,with,values,from,the,json,string,param,json,a,json,encoded,string,containing,an,array,throws,jsonexception,if,the,parse,fails,or,doesn,t,yield,a,code,jsonarray;public,jsonarray,string,json,throws,jsonexception,this,new,jsontokener,json
JSONArray -> public JSONArray(String json) throws JSONException;1516215803;Creates a new {@code JSONArray} with values from the JSON string._@param json a JSON-encoded string containing an array._@throws JSONException if the parse fails or doesn't yield a {@code_JSONArray}.;public JSONArray(String json) throws JSONException {_		this(new JSONTokener(json))__	};creates,a,new,code,jsonarray,with,values,from,the,json,string,param,json,a,json,encoded,string,containing,an,array,throws,jsonexception,if,the,parse,fails,or,doesn,t,yield,a,code,jsonarray;public,jsonarray,string,json,throws,jsonexception,this,new,jsontokener,json
JSONArray -> public JSONArray(String json) throws JSONException;1531461359;Creates a new {@code JSONArray} with values from the JSON string._@param json a JSON-encoded string containing an array._@throws JSONException if the parse fails or doesn't yield a {@code_JSONArray}.;public JSONArray(String json) throws JSONException {_		this(new JSONTokener(json))__	};creates,a,new,code,jsonarray,with,values,from,the,json,string,param,json,a,json,encoded,string,containing,an,array,throws,jsonexception,if,the,parse,fails,or,doesn,t,yield,a,code,jsonarray;public,jsonarray,string,json,throws,jsonexception,this,new,jsontokener,json
JSONArray -> public JSONArray put(int index, long value) throws JSONException;1515446271;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value the value_@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, long value) throws JSONException {_		return put(index, (Long) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,the,value,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,long,value,throws,jsonexception,return,put,index,long,value
JSONArray -> public JSONArray put(int index, long value) throws JSONException;1516008705;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value the value_@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, long value) throws JSONException {_		return put(index, (Long) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,the,value,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,long,value,throws,jsonexception,return,put,index,long,value
JSONArray -> public JSONArray put(int index, long value) throws JSONException;1516215803;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value the value_@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, long value) throws JSONException {_		return put(index, (Long) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,the,value,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,long,value,throws,jsonexception,return,put,index,long,value
JSONArray -> public JSONArray put(int index, long value) throws JSONException;1531461359;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value the value_@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, long value) throws JSONException {_		return put(index, (Long) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,the,value,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,long,value,throws,jsonexception,return,put,index,long,value
JSONArray -> public JSONArray();1515446271;Creates a {@code JSONArray} with no values.;public JSONArray() {_		this.values = new ArrayList<Object>()__	};creates,a,code,jsonarray,with,no,values;public,jsonarray,this,values,new,array,list,object
JSONArray -> public JSONArray();1516008705;Creates a {@code JSONArray} with no values.;public JSONArray() {_		this.values = new ArrayList<Object>()__	};creates,a,code,jsonarray,with,no,values;public,jsonarray,this,values,new,array,list,object
JSONArray -> public JSONArray();1516215803;Creates a {@code JSONArray} with no values.;public JSONArray() {_		this.values = new ArrayList<>()__	};creates,a,code,jsonarray,with,no,values;public,jsonarray,this,values,new,array,list
JSONArray -> public JSONArray();1531461359;Creates a {@code JSONArray} with no values.;public JSONArray() {_		this.values = new ArrayList<>()__	};creates,a,code,jsonarray,with,no,values;public,jsonarray,this,values,new,array,list
JSONArray -> public double getDouble(int index) throws JSONException;1515446271;Returns the value at {@code index} if it exists and is a double or can be coerced_to a double._@param index the index to get the value from_@return the {@code value}_@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a double.;public double getDouble(int index) throws JSONException {_		Object object = get(index)__		Double result = JSON.toDouble(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "double")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,a,double,or,can,be,coerced,to,a,double,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,double;public,double,get,double,int,index,throws,jsonexception,object,object,get,index,double,result,json,to,double,object,if,result,null,throw,json,type,mismatch,index,object,double,return,result
JSONArray -> public double getDouble(int index) throws JSONException;1516008705;Returns the value at {@code index} if it exists and is a double or can be coerced_to a double._@param index the index to get the value from_@return the {@code value}_@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a double.;public double getDouble(int index) throws JSONException {_		Object object = get(index)__		Double result = JSON.toDouble(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "double")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,a,double,or,can,be,coerced,to,a,double,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,double;public,double,get,double,int,index,throws,jsonexception,object,object,get,index,double,result,json,to,double,object,if,result,null,throw,json,type,mismatch,index,object,double,return,result
JSONArray -> public double getDouble(int index) throws JSONException;1516215803;Returns the value at {@code index} if it exists and is a double or can be coerced_to a double._@param index the index to get the value from_@return the {@code value}_@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a double.;public double getDouble(int index) throws JSONException {_		Object object = get(index)__		Double result = JSON.toDouble(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "double")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,a,double,or,can,be,coerced,to,a,double,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,double;public,double,get,double,int,index,throws,jsonexception,object,object,get,index,double,result,json,to,double,object,if,result,null,throw,json,type,mismatch,index,object,double,return,result
JSONArray -> public double getDouble(int index) throws JSONException;1531461359;Returns the value at {@code index} if it exists and is a double or can be coerced_to a double._@param index the index to get the value from_@return the {@code value}_@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a double.;public double getDouble(int index) throws JSONException {_		Object object = get(index)__		Double result = JSON.toDouble(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "double")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,a,double,or,can,be,coerced,to,a,double,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,double;public,double,get,double,int,index,throws,jsonexception,object,object,get,index,double,result,json,to,double,object,if,result,null,throw,json,type,mismatch,index,object,double,return,result
JSONArray -> public long optLong(int index, long fallback);1515446271;Returns the value at {@code index} if it exists and is a long or can be coerced to_a long. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public long optLong(int index, long fallback) {_		Object object = opt(index)__		Long result = JSON.toLong(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,a,long,or,can,be,coerced,to,a,long,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,long,opt,long,int,index,long,fallback,object,object,opt,index,long,result,json,to,long,object,return,result,null,result,fallback
JSONArray -> public long optLong(int index, long fallback);1516008705;Returns the value at {@code index} if it exists and is a long or can be coerced to_a long. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public long optLong(int index, long fallback) {_		Object object = opt(index)__		Long result = JSON.toLong(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,a,long,or,can,be,coerced,to,a,long,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,long,opt,long,int,index,long,fallback,object,object,opt,index,long,result,json,to,long,object,return,result,null,result,fallback
JSONArray -> public long optLong(int index, long fallback);1516215803;Returns the value at {@code index} if it exists and is a long or can be coerced to_a long. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public long optLong(int index, long fallback) {_		Object object = opt(index)__		Long result = JSON.toLong(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,a,long,or,can,be,coerced,to,a,long,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,long,opt,long,int,index,long,fallback,object,object,opt,index,long,result,json,to,long,object,return,result,null,result,fallback
JSONArray -> public long optLong(int index, long fallback);1531461359;Returns the value at {@code index} if it exists and is a long or can be coerced to_a long. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public long optLong(int index, long fallback) {_		Object object = opt(index)__		Long result = JSON.toLong(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,a,long,or,can,be,coerced,to,a,long,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,long,opt,long,int,index,long,fallback,object,object,opt,index,long,result,json,to,long,object,return,result,null,result,fallback
JSONArray -> public JSONArray put(int index, double value) throws JSONException;1515446271;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value a finite value. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, double value) throws JSONException {_		return put(index, (Double) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,a,finite,value,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,double,value,throws,jsonexception,return,put,index,double,value
JSONArray -> public JSONArray put(int index, double value) throws JSONException;1516008705;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value a finite value. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, double value) throws JSONException {_		return put(index, (Double) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,a,finite,value,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,double,value,throws,jsonexception,return,put,index,double,value
JSONArray -> public JSONArray put(int index, double value) throws JSONException;1516215803;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value a finite value. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, double value) throws JSONException {_		return put(index, (Double) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,a,finite,value,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,double,value,throws,jsonexception,return,put,index,double,value
JSONArray -> public JSONArray put(int index, double value) throws JSONException;1531461359;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value a finite value. May not be {@link Double#isNaN() NaNs} or_{@link Double#isInfinite() infinities}._@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, double value) throws JSONException {_		return put(index, (Double) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,a,finite,value,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,double,value,throws,jsonexception,return,put,index,double,value
JSONArray -> @Override 	public String toString();1515446271;Encodes this array as a compact JSON string, such as: <pre>[94043,90210]</pre>_@return a compact JSON string representation of this array;@Override_	public String toString() {_		try {_			JSONStringer stringer = new JSONStringer()__			writeTo(stringer)__			return stringer.toString()__		}_		catch (JSONException e) {_			return null__		}_	};encodes,this,array,as,a,compact,json,string,such,as,pre,94043,90210,pre,return,a,compact,json,string,representation,of,this,array;override,public,string,to,string,try,jsonstringer,stringer,new,jsonstringer,write,to,stringer,return,stringer,to,string,catch,jsonexception,e,return,null
JSONArray -> @Override 	public String toString();1516008705;Encodes this array as a compact JSON string, such as: <pre>[94043,90210]</pre>_@return a compact JSON string representation of this array;@Override_	public String toString() {_		try {_			JSONStringer stringer = new JSONStringer()__			writeTo(stringer)__			return stringer.toString()__		}_		catch (JSONException e) {_			return null__		}_	};encodes,this,array,as,a,compact,json,string,such,as,pre,94043,90210,pre,return,a,compact,json,string,representation,of,this,array;override,public,string,to,string,try,jsonstringer,stringer,new,jsonstringer,write,to,stringer,return,stringer,to,string,catch,jsonexception,e,return,null
JSONArray -> @Override 	public String toString();1516215803;Encodes this array as a compact JSON string, such as: <pre>[94043,90210]</pre>_@return a compact JSON string representation of this array;@Override_	public String toString() {_		try {_			JSONStringer stringer = new JSONStringer()__			writeTo(stringer)__			return stringer.toString()__		}_		catch (JSONException e) {_			return null__		}_	};encodes,this,array,as,a,compact,json,string,such,as,pre,94043,90210,pre,return,a,compact,json,string,representation,of,this,array;override,public,string,to,string,try,jsonstringer,stringer,new,jsonstringer,write,to,stringer,return,stringer,to,string,catch,jsonexception,e,return,null
JSONArray -> @Override 	public String toString();1531461359;Encodes this array as a compact JSON string, such as: <pre>[94043,90210]</pre>_@return a compact JSON string representation of this array;@Override_	public String toString() {_		try {_			JSONStringer stringer = new JSONStringer()__			writeTo(stringer)__			return stringer.toString()__		}_		catch (JSONException e) {_			return null__		}_	};encodes,this,array,as,a,compact,json,string,such,as,pre,94043,90210,pre,return,a,compact,json,string,representation,of,this,array;override,public,string,to,string,try,jsonstringer,stringer,new,jsonstringer,write,to,stringer,return,stringer,to,string,catch,jsonexception,e,return,null
JSONArray -> @SuppressWarnings("rawtypes") 	public JSONArray(Collection copyFrom);1515446271;Creates a new {@code JSONArray} by copying all values from the given collection._@param copyFrom a collection whose values are of supported types. Unsupported_values are not permitted and will yield an array in an inconsistent state.;@SuppressWarnings("rawtypes")_	public JSONArray(Collection copyFrom) {_		this()__		if (copyFrom != null) {_			for (Iterator it = copyFrom.iterator()_ it.hasNext()_) {_				put(JSONObject.wrap(it.next()))__			}_		}_	};creates,a,new,code,jsonarray,by,copying,all,values,from,the,given,collection,param,copy,from,a,collection,whose,values,are,of,supported,types,unsupported,values,are,not,permitted,and,will,yield,an,array,in,an,inconsistent,state;suppress,warnings,rawtypes,public,jsonarray,collection,copy,from,this,if,copy,from,null,for,iterator,it,copy,from,iterator,it,has,next,put,jsonobject,wrap,it,next
JSONArray -> @SuppressWarnings("rawtypes") 	public JSONArray(Collection copyFrom);1516008705;Creates a new {@code JSONArray} by copying all values from the given collection._@param copyFrom a collection whose values are of supported types. Unsupported_values are not permitted and will yield an array in an inconsistent state.;@SuppressWarnings("rawtypes")_	public JSONArray(Collection copyFrom) {_		this()__		if (copyFrom != null) {_			for (Iterator it = copyFrom.iterator()_ it.hasNext()_) {_				put(JSONObject.wrap(it.next()))__			}_		}_	};creates,a,new,code,jsonarray,by,copying,all,values,from,the,given,collection,param,copy,from,a,collection,whose,values,are,of,supported,types,unsupported,values,are,not,permitted,and,will,yield,an,array,in,an,inconsistent,state;suppress,warnings,rawtypes,public,jsonarray,collection,copy,from,this,if,copy,from,null,for,iterator,it,copy,from,iterator,it,has,next,put,jsonobject,wrap,it,next
JSONArray -> @SuppressWarnings("rawtypes") 	public JSONArray(Collection copyFrom);1516215803;Creates a new {@code JSONArray} by copying all values from the given collection._@param copyFrom a collection whose values are of supported types. Unsupported_values are not permitted and will yield an array in an inconsistent state.;@SuppressWarnings("rawtypes")_	public JSONArray(Collection copyFrom) {_		this()__		if (copyFrom != null) {_			for (Iterator it = copyFrom.iterator()_ it.hasNext()_) {_				put(JSONObject.wrap(it.next()))__			}_		}_	};creates,a,new,code,jsonarray,by,copying,all,values,from,the,given,collection,param,copy,from,a,collection,whose,values,are,of,supported,types,unsupported,values,are,not,permitted,and,will,yield,an,array,in,an,inconsistent,state;suppress,warnings,rawtypes,public,jsonarray,collection,copy,from,this,if,copy,from,null,for,iterator,it,copy,from,iterator,it,has,next,put,jsonobject,wrap,it,next
JSONArray -> @SuppressWarnings("rawtypes") 	public JSONArray(Collection copyFrom);1531461359;Creates a new {@code JSONArray} by copying all values from the given collection._@param copyFrom a collection whose values are of supported types. Unsupported_values are not permitted and will yield an array in an inconsistent state.;@SuppressWarnings("rawtypes")_	public JSONArray(Collection copyFrom) {_		this()__		if (copyFrom != null) {_			for (Iterator it = copyFrom.iterator()_ it.hasNext()_) {_				put(JSONObject.wrap(it.next()))__			}_		}_	};creates,a,new,code,jsonarray,by,copying,all,values,from,the,given,collection,param,copy,from,a,collection,whose,values,are,of,supported,types,unsupported,values,are,not,permitted,and,will,yield,an,array,in,an,inconsistent,state;suppress,warnings,rawtypes,public,jsonarray,collection,copy,from,this,if,copy,from,null,for,iterator,it,copy,from,iterator,it,has,next,put,jsonobject,wrap,it,next
JSONArray -> public Object opt(int index);1515446271;Returns the value at {@code index}, or null if the array has no value at_{@code index}._@param index the index to get the value from_@return the value at {@code index} or {@code null};public Object opt(int index) {_		if (index < 0 || index >= this.values.size()) {_			return null__		}_		return this.values.get(index)__	};returns,the,value,at,code,index,or,null,if,the,array,has,no,value,at,code,index,param,index,the,index,to,get,the,value,from,return,the,value,at,code,index,or,code,null;public,object,opt,int,index,if,index,0,index,this,values,size,return,null,return,this,values,get,index
JSONArray -> public Object opt(int index);1516008705;Returns the value at {@code index}, or null if the array has no value at_{@code index}._@param index the index to get the value from_@return the value at {@code index} or {@code null};public Object opt(int index) {_		if (index < 0 || index >= this.values.size()) {_			return null__		}_		return this.values.get(index)__	};returns,the,value,at,code,index,or,null,if,the,array,has,no,value,at,code,index,param,index,the,index,to,get,the,value,from,return,the,value,at,code,index,or,code,null;public,object,opt,int,index,if,index,0,index,this,values,size,return,null,return,this,values,get,index
JSONArray -> public Object opt(int index);1516215803;Returns the value at {@code index}, or null if the array has no value at_{@code index}._@param index the index to get the value from_@return the value at {@code index} or {@code null};public Object opt(int index) {_		if (index < 0 || index >= this.values.size()) {_			return null__		}_		return this.values.get(index)__	};returns,the,value,at,code,index,or,null,if,the,array,has,no,value,at,code,index,param,index,the,index,to,get,the,value,from,return,the,value,at,code,index,or,code,null;public,object,opt,int,index,if,index,0,index,this,values,size,return,null,return,this,values,get,index
JSONArray -> public Object opt(int index);1531461359;Returns the value at {@code index}, or null if the array has no value at_{@code index}._@param index the index to get the value from_@return the value at {@code index} or {@code null};public Object opt(int index) {_		if (index < 0 || index >= this.values.size()) {_			return null__		}_		return this.values.get(index)__	};returns,the,value,at,code,index,or,null,if,the,array,has,no,value,at,code,index,param,index,the,index,to,get,the,value,from,return,the,value,at,code,index,or,code,null;public,object,opt,int,index,if,index,0,index,this,values,size,return,null,return,this,values,get,index
JSONArray -> public double optDouble(int index, double fallback);1515446271;Returns the value at {@code index} if it exists and is a double or can be coerced_to a double. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public double optDouble(int index, double fallback) {_		Object object = opt(index)__		Double result = JSON.toDouble(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,a,double,or,can,be,coerced,to,a,double,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,double,opt,double,int,index,double,fallback,object,object,opt,index,double,result,json,to,double,object,return,result,null,result,fallback
JSONArray -> public double optDouble(int index, double fallback);1516008705;Returns the value at {@code index} if it exists and is a double or can be coerced_to a double. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public double optDouble(int index, double fallback) {_		Object object = opt(index)__		Double result = JSON.toDouble(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,a,double,or,can,be,coerced,to,a,double,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,double,opt,double,int,index,double,fallback,object,object,opt,index,double,result,json,to,double,object,return,result,null,result,fallback
JSONArray -> public double optDouble(int index, double fallback);1516215803;Returns the value at {@code index} if it exists and is a double or can be coerced_to a double. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public double optDouble(int index, double fallback) {_		Object object = opt(index)__		Double result = JSON.toDouble(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,a,double,or,can,be,coerced,to,a,double,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,double,opt,double,int,index,double,fallback,object,object,opt,index,double,result,json,to,double,object,return,result,null,result,fallback
JSONArray -> public double optDouble(int index, double fallback);1531461359;Returns the value at {@code index} if it exists and is a double or can be coerced_to a double. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public double optDouble(int index, double fallback) {_		Object object = opt(index)__		Double result = JSON.toDouble(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,a,double,or,can,be,coerced,to,a,double,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,double,opt,double,int,index,double,fallback,object,object,opt,index,double,result,json,to,double,object,return,result,null,result,fallback
JSONArray -> public int getInt(int index) throws JSONException;1515446271;Returns the value at {@code index} if it exists and is an int or can be coerced to_an int._@param index the index to get the value from_@return the {@code value}_@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a int.;public int getInt(int index) throws JSONException {_		Object object = get(index)__		Integer result = JSON.toInteger(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "int")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,an,int,or,can,be,coerced,to,an,int,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,int;public,int,get,int,int,index,throws,jsonexception,object,object,get,index,integer,result,json,to,integer,object,if,result,null,throw,json,type,mismatch,index,object,int,return,result
JSONArray -> public int getInt(int index) throws JSONException;1516008705;Returns the value at {@code index} if it exists and is an int or can be coerced to_an int._@param index the index to get the value from_@return the {@code value}_@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a int.;public int getInt(int index) throws JSONException {_		Object object = get(index)__		Integer result = JSON.toInteger(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "int")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,an,int,or,can,be,coerced,to,an,int,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,int;public,int,get,int,int,index,throws,jsonexception,object,object,get,index,integer,result,json,to,integer,object,if,result,null,throw,json,type,mismatch,index,object,int,return,result
JSONArray -> public int getInt(int index) throws JSONException;1516215803;Returns the value at {@code index} if it exists and is an int or can be coerced to_an int._@param index the index to get the value from_@return the {@code value}_@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to a int.;public int getInt(int index) throws JSONException {_		Object object = get(index)__		Integer result = JSON.toInteger(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "int")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,an,int,or,can,be,coerced,to,an,int,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,a,int;public,int,get,int,int,index,throws,jsonexception,object,object,get,index,integer,result,json,to,integer,object,if,result,null,throw,json,type,mismatch,index,object,int,return,result
JSONArray -> public int getInt(int index) throws JSONException;1531461359;Returns the value at {@code index} if it exists and is an int or can be coerced to_an int._@param index the index to get the value from_@return the {@code value}_@throws JSONException if the value at {@code index} doesn't exist or cannot be_coerced to an int.;public int getInt(int index) throws JSONException {_		Object object = get(index)__		Integer result = JSON.toInteger(object)__		if (result == null) {_			throw JSON.typeMismatch(index, object, "int")__		}_		return result__	};returns,the,value,at,code,index,if,it,exists,and,is,an,int,or,can,be,coerced,to,an,int,param,index,the,index,to,get,the,value,from,return,the,code,value,throws,jsonexception,if,the,value,at,code,index,doesn,t,exist,or,cannot,be,coerced,to,an,int;public,int,get,int,int,index,throws,jsonexception,object,object,get,index,integer,result,json,to,integer,object,if,result,null,throw,json,type,mismatch,index,object,int,return,result
JSONArray -> public boolean optBoolean(int index, boolean fallback);1515446271;Returns the value at {@code index} if it exists and is a boolean or can be coerced_to a boolean. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public boolean optBoolean(int index, boolean fallback) {_		Object object = opt(index)__		Boolean result = JSON.toBoolean(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,a,boolean,or,can,be,coerced,to,a,boolean,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,boolean,opt,boolean,int,index,boolean,fallback,object,object,opt,index,boolean,result,json,to,boolean,object,return,result,null,result,fallback
JSONArray -> public boolean optBoolean(int index, boolean fallback);1516008705;Returns the value at {@code index} if it exists and is a boolean or can be coerced_to a boolean. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public boolean optBoolean(int index, boolean fallback) {_		Object object = opt(index)__		Boolean result = JSON.toBoolean(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,a,boolean,or,can,be,coerced,to,a,boolean,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,boolean,opt,boolean,int,index,boolean,fallback,object,object,opt,index,boolean,result,json,to,boolean,object,return,result,null,result,fallback
JSONArray -> public boolean optBoolean(int index, boolean fallback);1516215803;Returns the value at {@code index} if it exists and is a boolean or can be coerced_to a boolean. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public boolean optBoolean(int index, boolean fallback) {_		Object object = opt(index)__		Boolean result = JSON.toBoolean(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,a,boolean,or,can,be,coerced,to,a,boolean,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,boolean,opt,boolean,int,index,boolean,fallback,object,object,opt,index,boolean,result,json,to,boolean,object,return,result,null,result,fallback
JSONArray -> public boolean optBoolean(int index, boolean fallback);1531461359;Returns the value at {@code index} if it exists and is a boolean or can be coerced_to a boolean. Returns {@code fallback} otherwise._@param index the index to get the value from_@param fallback the fallback value_@return the value at {@code index} of {@code fallback};public boolean optBoolean(int index, boolean fallback) {_		Object object = opt(index)__		Boolean result = JSON.toBoolean(object)__		return result != null ? result : fallback__	};returns,the,value,at,code,index,if,it,exists,and,is,a,boolean,or,can,be,coerced,to,a,boolean,returns,code,fallback,otherwise,param,index,the,index,to,get,the,value,from,param,fallback,the,fallback,value,return,the,value,at,code,index,of,code,fallback;public,boolean,opt,boolean,int,index,boolean,fallback,object,object,opt,index,boolean,result,json,to,boolean,object,return,result,null,result,fallback
JSONArray -> public double optDouble(int index);1515446271;Returns the value at {@code index} if it exists and is a double or can be coerced_to a double. Returns {@code NaN} otherwise._@param index the index to get the value from_@return the {@code value} or {@code NaN};public double optDouble(int index) {_		return optDouble(index, Double.NaN)__	};returns,the,value,at,code,index,if,it,exists,and,is,a,double,or,can,be,coerced,to,a,double,returns,code,na,n,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,na,n;public,double,opt,double,int,index,return,opt,double,index,double,na,n
JSONArray -> public double optDouble(int index);1516008705;Returns the value at {@code index} if it exists and is a double or can be coerced_to a double. Returns {@code NaN} otherwise._@param index the index to get the value from_@return the {@code value} or {@code NaN};public double optDouble(int index) {_		return optDouble(index, Double.NaN)__	};returns,the,value,at,code,index,if,it,exists,and,is,a,double,or,can,be,coerced,to,a,double,returns,code,na,n,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,na,n;public,double,opt,double,int,index,return,opt,double,index,double,na,n
JSONArray -> public double optDouble(int index);1516215803;Returns the value at {@code index} if it exists and is a double or can be coerced_to a double. Returns {@code NaN} otherwise._@param index the index to get the value from_@return the {@code value} or {@code NaN};public double optDouble(int index) {_		return optDouble(index, Double.NaN)__	};returns,the,value,at,code,index,if,it,exists,and,is,a,double,or,can,be,coerced,to,a,double,returns,code,na,n,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,na,n;public,double,opt,double,int,index,return,opt,double,index,double,na,n
JSONArray -> public double optDouble(int index);1531461359;Returns the value at {@code index} if it exists and is a double or can be coerced_to a double. Returns {@code NaN} otherwise._@param index the index to get the value from_@return the {@code value} or {@code NaN};public double optDouble(int index) {_		return optDouble(index, Double.NaN)__	};returns,the,value,at,code,index,if,it,exists,and,is,a,double,or,can,be,coerced,to,a,double,returns,code,na,n,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,na,n;public,double,opt,double,int,index,return,opt,double,index,double,na,n
JSONArray -> public JSONArray optJSONArray(int index);1515446271;Returns the value at {@code index} if it exists and is a {@code_JSONArray}. Returns null otherwise._@param index the index to get the value from_@return the array at {@code index} or {@code null};public JSONArray optJSONArray(int index) {_		Object object = opt(index)__		return object instanceof JSONArray ? (JSONArray) object : null__	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonarray,returns,null,otherwise,param,index,the,index,to,get,the,value,from,return,the,array,at,code,index,or,code,null;public,jsonarray,opt,jsonarray,int,index,object,object,opt,index,return,object,instanceof,jsonarray,jsonarray,object,null
JSONArray -> public JSONArray optJSONArray(int index);1516008705;Returns the value at {@code index} if it exists and is a {@code_JSONArray}. Returns null otherwise._@param index the index to get the value from_@return the array at {@code index} or {@code null};public JSONArray optJSONArray(int index) {_		Object object = opt(index)__		return object instanceof JSONArray ? (JSONArray) object : null__	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonarray,returns,null,otherwise,param,index,the,index,to,get,the,value,from,return,the,array,at,code,index,or,code,null;public,jsonarray,opt,jsonarray,int,index,object,object,opt,index,return,object,instanceof,jsonarray,jsonarray,object,null
JSONArray -> public JSONArray optJSONArray(int index);1516215803;Returns the value at {@code index} if it exists and is a {@code_JSONArray}. Returns null otherwise._@param index the index to get the value from_@return the array at {@code index} or {@code null};public JSONArray optJSONArray(int index) {_		Object object = opt(index)__		return object instanceof JSONArray ? (JSONArray) object : null__	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonarray,returns,null,otherwise,param,index,the,index,to,get,the,value,from,return,the,array,at,code,index,or,code,null;public,jsonarray,opt,jsonarray,int,index,object,object,opt,index,return,object,instanceof,jsonarray,jsonarray,object,null
JSONArray -> public JSONArray optJSONArray(int index);1531461359;Returns the value at {@code index} if it exists and is a {@code_JSONArray}. Returns null otherwise._@param index the index to get the value from_@return the array at {@code index} or {@code null};public JSONArray optJSONArray(int index) {_		Object object = opt(index)__		return object instanceof JSONArray ? (JSONArray) object : null__	};returns,the,value,at,code,index,if,it,exists,and,is,a,code,jsonarray,returns,null,otherwise,param,index,the,index,to,get,the,value,from,return,the,array,at,code,index,or,code,null;public,jsonarray,opt,jsonarray,int,index,object,object,opt,index,return,object,instanceof,jsonarray,jsonarray,object,null
JSONArray -> public String join(String separator) throws JSONException;1515446271;Returns a new string by alternating this array's values with {@code_separator}. This array's string values are quoted and have their special characters_escaped. For example, the array containing the strings '12" pizza', 'taco' and_'soda' joined on '+' returns this: <pre>"12\" pizza"+"taco"+"soda"</pre>_@param separator the separator to use_@return the joined value_@throws JSONException if processing of json failed;public String join(String separator) throws JSONException {_		JSONStringer stringer = new JSONStringer()__		stringer.open(JSONStringer.Scope.NULL, "")__		for (int i = 0, size = this.values.size()_ i < size_ i++) {_			if (i > 0) {_				stringer.out.append(separator)__			}_			stringer.value(this.values.get(i))__		}_		stringer.close(JSONStringer.Scope.NULL, JSONStringer.Scope.NULL, "")__		return stringer.out.toString()__	};returns,a,new,string,by,alternating,this,array,s,values,with,code,separator,this,array,s,string,values,are,quoted,and,have,their,special,characters,escaped,for,example,the,array,containing,the,strings,12,pizza,taco,and,soda,joined,on,returns,this,pre,12,pizza,taco,soda,pre,param,separator,the,separator,to,use,return,the,joined,value,throws,jsonexception,if,processing,of,json,failed;public,string,join,string,separator,throws,jsonexception,jsonstringer,stringer,new,jsonstringer,stringer,open,jsonstringer,scope,null,for,int,i,0,size,this,values,size,i,size,i,if,i,0,stringer,out,append,separator,stringer,value,this,values,get,i,stringer,close,jsonstringer,scope,null,jsonstringer,scope,null,return,stringer,out,to,string
JSONArray -> public String join(String separator) throws JSONException;1516008705;Returns a new string by alternating this array's values with {@code_separator}. This array's string values are quoted and have their special characters_escaped. For example, the array containing the strings '12" pizza', 'taco' and_'soda' joined on '+' returns this: <pre>"12\" pizza"+"taco"+"soda"</pre>_@param separator the separator to use_@return the joined value_@throws JSONException if processing of json failed;public String join(String separator) throws JSONException {_		JSONStringer stringer = new JSONStringer()__		stringer.open(JSONStringer.Scope.NULL, "")__		for (int i = 0, size = this.values.size()_ i < size_ i++) {_			if (i > 0) {_				stringer.out.append(separator)__			}_			stringer.value(this.values.get(i))__		}_		stringer.close(JSONStringer.Scope.NULL, JSONStringer.Scope.NULL, "")__		return stringer.out.toString()__	};returns,a,new,string,by,alternating,this,array,s,values,with,code,separator,this,array,s,string,values,are,quoted,and,have,their,special,characters,escaped,for,example,the,array,containing,the,strings,12,pizza,taco,and,soda,joined,on,returns,this,pre,12,pizza,taco,soda,pre,param,separator,the,separator,to,use,return,the,joined,value,throws,jsonexception,if,processing,of,json,failed;public,string,join,string,separator,throws,jsonexception,jsonstringer,stringer,new,jsonstringer,stringer,open,jsonstringer,scope,null,for,int,i,0,size,this,values,size,i,size,i,if,i,0,stringer,out,append,separator,stringer,value,this,values,get,i,stringer,close,jsonstringer,scope,null,jsonstringer,scope,null,return,stringer,out,to,string
JSONArray -> public String join(String separator) throws JSONException;1516215803;Returns a new string by alternating this array's values with {@code_separator}. This array's string values are quoted and have their special characters_escaped. For example, the array containing the strings '12" pizza', 'taco' and_'soda' joined on '+' returns this: <pre>"12\" pizza"+"taco"+"soda"</pre>_@param separator the separator to use_@return the joined value_@throws JSONException if processing of json failed;public String join(String separator) throws JSONException {_		JSONStringer stringer = new JSONStringer()__		stringer.open(JSONStringer.Scope.NULL, "")__		for (int i = 0, size = this.values.size()_ i < size_ i++) {_			if (i > 0) {_				stringer.out.append(separator)__			}_			stringer.value(this.values.get(i))__		}_		stringer.close(JSONStringer.Scope.NULL, JSONStringer.Scope.NULL, "")__		return stringer.out.toString()__	};returns,a,new,string,by,alternating,this,array,s,values,with,code,separator,this,array,s,string,values,are,quoted,and,have,their,special,characters,escaped,for,example,the,array,containing,the,strings,12,pizza,taco,and,soda,joined,on,returns,this,pre,12,pizza,taco,soda,pre,param,separator,the,separator,to,use,return,the,joined,value,throws,jsonexception,if,processing,of,json,failed;public,string,join,string,separator,throws,jsonexception,jsonstringer,stringer,new,jsonstringer,stringer,open,jsonstringer,scope,null,for,int,i,0,size,this,values,size,i,size,i,if,i,0,stringer,out,append,separator,stringer,value,this,values,get,i,stringer,close,jsonstringer,scope,null,jsonstringer,scope,null,return,stringer,out,to,string
JSONArray -> public String join(String separator) throws JSONException;1531461359;Returns a new string by alternating this array's values with {@code_separator}. This array's string values are quoted and have their special characters_escaped. For example, the array containing the strings '12" pizza', 'taco' and_'soda' joined on '+' returns this: <pre>"12\" pizza"+"taco"+"soda"</pre>_@param separator the separator to use_@return the joined value_@throws JSONException if processing of json failed;public String join(String separator) throws JSONException {_		JSONStringer stringer = new JSONStringer()__		stringer.open(JSONStringer.Scope.NULL, "")__		for (int i = 0, size = this.values.size()_ i < size_ i++) {_			if (i > 0) {_				stringer.out.append(separator)__			}_			stringer.value(this.values.get(i))__		}_		stringer.close(JSONStringer.Scope.NULL, JSONStringer.Scope.NULL, "")__		return stringer.out.toString()__	};returns,a,new,string,by,alternating,this,array,s,values,with,code,separator,this,array,s,string,values,are,quoted,and,have,their,special,characters,escaped,for,example,the,array,containing,the,strings,12,pizza,taco,and,soda,joined,on,returns,this,pre,12,pizza,taco,soda,pre,param,separator,the,separator,to,use,return,the,joined,value,throws,jsonexception,if,processing,of,json,failed;public,string,join,string,separator,throws,jsonexception,jsonstringer,stringer,new,jsonstringer,stringer,open,jsonstringer,scope,null,for,int,i,0,size,this,values,size,i,size,i,if,i,0,stringer,out,append,separator,stringer,value,this,values,get,i,stringer,close,jsonstringer,scope,null,jsonstringer,scope,null,return,stringer,out,to,string
JSONArray -> public JSONArray put(int index, int value) throws JSONException;1515446271;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value the value_@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, int value) throws JSONException {_		return put(index, (Integer) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,the,value,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,int,value,throws,jsonexception,return,put,index,integer,value
JSONArray -> public JSONArray put(int index, int value) throws JSONException;1516008705;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value the value_@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, int value) throws JSONException {_		return put(index, (Integer) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,the,value,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,int,value,throws,jsonexception,return,put,index,integer,value
JSONArray -> public JSONArray put(int index, int value) throws JSONException;1516215803;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value the value_@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, int value) throws JSONException {_		return put(index, (Integer) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,the,value,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,int,value,throws,jsonexception,return,put,index,integer,value
JSONArray -> public JSONArray put(int index, int value) throws JSONException;1531461359;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value the value_@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, int value) throws JSONException {_		return put(index, (Integer) value)__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,the,value,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,int,value,throws,jsonexception,return,put,index,integer,value
JSONArray -> public JSONArray put(int index, Object value) throws JSONException;1515446271;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,_Long, Double, {@link JSONObject#NULL}, or {@code null}. May not be_{@link Double#isNaN() NaNs} or {@link Double#isInfinite() infinities}._@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, Object value) throws JSONException {_		if (value instanceof Number) {_			_			_			JSON.checkDouble(((Number) value).doubleValue())__		}_		while (this.values.size() <= index) {_			this.values.add(null)__		}_		this.values.set(index, value)__		return this__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,a,link,jsonobject,link,jsonarray,string,boolean,integer,long,double,link,jsonobject,null,or,code,null,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,object,value,throws,jsonexception,if,value,instanceof,number,json,check,double,number,value,double,value,while,this,values,size,index,this,values,add,null,this,values,set,index,value,return,this
JSONArray -> public JSONArray put(int index, Object value) throws JSONException;1516008705;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,_Long, Double, {@link JSONObject#NULL}, or {@code null}. May not be_{@link Double#isNaN() NaNs} or {@link Double#isInfinite() infinities}._@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, Object value) throws JSONException {_		if (value instanceof Number) {_			_			_			JSON.checkDouble(((Number) value).doubleValue())__		}_		while (this.values.size() <= index) {_			this.values.add(null)__		}_		this.values.set(index, value)__		return this__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,a,link,jsonobject,link,jsonarray,string,boolean,integer,long,double,link,jsonobject,null,or,code,null,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,object,value,throws,jsonexception,if,value,instanceof,number,json,check,double,number,value,double,value,while,this,values,size,index,this,values,add,null,this,values,set,index,value,return,this
JSONArray -> public JSONArray put(int index, Object value) throws JSONException;1516215803;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,_Long, Double, {@link JSONObject#NULL}, or {@code null}. May not be_{@link Double#isNaN() NaNs} or {@link Double#isInfinite() infinities}._@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, Object value) throws JSONException {_		if (value instanceof Number) {_			_			_			JSON.checkDouble(((Number) value).doubleValue())__		}_		while (this.values.size() <= index) {_			this.values.add(null)__		}_		this.values.set(index, value)__		return this__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,a,link,jsonobject,link,jsonarray,string,boolean,integer,long,double,link,jsonobject,null,or,code,null,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,object,value,throws,jsonexception,if,value,instanceof,number,json,check,double,number,value,double,value,while,this,values,size,index,this,values,add,null,this,values,set,index,value,return,this
JSONArray -> public JSONArray put(int index, Object value) throws JSONException;1531461359;Sets the value at {@code index} to {@code value}, null padding this array to the_required length if necessary. If a value already exists at {@code_index}, it will be replaced._@param index the index to set the value to_@param value a {@link JSONObject}, {@link JSONArray}, String, Boolean, Integer,_Long, Double, {@link JSONObject#NULL}, or {@code null}. May not be_{@link Double#isNaN() NaNs} or {@link Double#isInfinite() infinities}._@return this array._@throws JSONException if processing of json failed;public JSONArray put(int index, Object value) throws JSONException {_		if (value instanceof Number) {_			_			_			JSON.checkDouble(((Number) value).doubleValue())__		}_		while (this.values.size() <= index) {_			this.values.add(null)__		}_		this.values.set(index, value)__		return this__	};sets,the,value,at,code,index,to,code,value,null,padding,this,array,to,the,required,length,if,necessary,if,a,value,already,exists,at,code,index,it,will,be,replaced,param,index,the,index,to,set,the,value,to,param,value,a,link,jsonobject,link,jsonarray,string,boolean,integer,long,double,link,jsonobject,null,or,code,null,may,not,be,link,double,is,na,n,na,ns,or,link,double,is,infinite,infinities,return,this,array,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,put,int,index,object,value,throws,jsonexception,if,value,instanceof,number,json,check,double,number,value,double,value,while,this,values,size,index,this,values,add,null,this,values,set,index,value,return,this
JSONArray -> public JSONArray(JSONTokener readFrom) throws JSONException;1515446271;Creates a new {@code JSONArray} with values from the next array in the tokener._@param readFrom a tokener whose nextValue() method will yield a {@code JSONArray}._@throws JSONException if the parse fails or doesn't yield a {@code JSONArray}._@throws JSONException if processing of json failed;public JSONArray(JSONTokener readFrom) throws JSONException {_		_		Object object = readFrom.nextValue()__		if (object instanceof JSONArray) {_			this.values = ((JSONArray) object).values__		}_		else {_			throw JSON.typeMismatch(object, "JSONArray")__		}_	};creates,a,new,code,jsonarray,with,values,from,the,next,array,in,the,tokener,param,read,from,a,tokener,whose,next,value,method,will,yield,a,code,jsonarray,throws,jsonexception,if,the,parse,fails,or,doesn,t,yield,a,code,jsonarray,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,jsontokener,read,from,throws,jsonexception,object,object,read,from,next,value,if,object,instanceof,jsonarray,this,values,jsonarray,object,values,else,throw,json,type,mismatch,object,jsonarray
JSONArray -> public JSONArray(JSONTokener readFrom) throws JSONException;1516008705;Creates a new {@code JSONArray} with values from the next array in the tokener._@param readFrom a tokener whose nextValue() method will yield a {@code JSONArray}._@throws JSONException if the parse fails or doesn't yield a {@code JSONArray}._@throws JSONException if processing of json failed;public JSONArray(JSONTokener readFrom) throws JSONException {_		_		Object object = readFrom.nextValue()__		if (object instanceof JSONArray) {_			this.values = ((JSONArray) object).values__		}_		else {_			throw JSON.typeMismatch(object, "JSONArray")__		}_	};creates,a,new,code,jsonarray,with,values,from,the,next,array,in,the,tokener,param,read,from,a,tokener,whose,next,value,method,will,yield,a,code,jsonarray,throws,jsonexception,if,the,parse,fails,or,doesn,t,yield,a,code,jsonarray,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,jsontokener,read,from,throws,jsonexception,object,object,read,from,next,value,if,object,instanceof,jsonarray,this,values,jsonarray,object,values,else,throw,json,type,mismatch,object,jsonarray
JSONArray -> public JSONArray(JSONTokener readFrom) throws JSONException;1516215803;Creates a new {@code JSONArray} with values from the next array in the tokener._@param readFrom a tokener whose nextValue() method will yield a {@code JSONArray}._@throws JSONException if the parse fails or doesn't yield a {@code JSONArray}._@throws JSONException if processing of json failed;public JSONArray(JSONTokener readFrom) throws JSONException {_		_		Object object = readFrom.nextValue()__		if (object instanceof JSONArray) {_			this.values = ((JSONArray) object).values__		}_		else {_			throw JSON.typeMismatch(object, "JSONArray")__		}_	};creates,a,new,code,jsonarray,with,values,from,the,next,array,in,the,tokener,param,read,from,a,tokener,whose,next,value,method,will,yield,a,code,jsonarray,throws,jsonexception,if,the,parse,fails,or,doesn,t,yield,a,code,jsonarray,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,jsontokener,read,from,throws,jsonexception,object,object,read,from,next,value,if,object,instanceof,jsonarray,this,values,jsonarray,object,values,else,throw,json,type,mismatch,object,jsonarray
JSONArray -> public JSONArray(JSONTokener readFrom) throws JSONException;1531461359;Creates a new {@code JSONArray} with values from the next array in the tokener._@param readFrom a tokener whose nextValue() method will yield a {@code JSONArray}._@throws JSONException if the parse fails or doesn't yield a {@code JSONArray}._@throws JSONException if processing of json failed;public JSONArray(JSONTokener readFrom) throws JSONException {_		_		Object object = readFrom.nextValue()__		if (object instanceof JSONArray) {_			this.values = ((JSONArray) object).values__		}_		else {_			throw JSON.typeMismatch(object, "JSONArray")__		}_	};creates,a,new,code,jsonarray,with,values,from,the,next,array,in,the,tokener,param,read,from,a,tokener,whose,next,value,method,will,yield,a,code,jsonarray,throws,jsonexception,if,the,parse,fails,or,doesn,t,yield,a,code,jsonarray,throws,jsonexception,if,processing,of,json,failed;public,jsonarray,jsontokener,read,from,throws,jsonexception,object,object,read,from,next,value,if,object,instanceof,jsonarray,this,values,jsonarray,object,values,else,throw,json,type,mismatch,object,jsonarray
JSONArray -> public long optLong(int index);1515446271;Returns the value at {@code index} if it exists and is a long or can be coerced to_a long. Returns 0 otherwise._@param index the index to get the value from_@return the {@code value} or {@code 0};public long optLong(int index) {_		return optLong(index, 0L)__	};returns,the,value,at,code,index,if,it,exists,and,is,a,long,or,can,be,coerced,to,a,long,returns,0,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,0;public,long,opt,long,int,index,return,opt,long,index,0l
JSONArray -> public long optLong(int index);1516008705;Returns the value at {@code index} if it exists and is a long or can be coerced to_a long. Returns 0 otherwise._@param index the index to get the value from_@return the {@code value} or {@code 0};public long optLong(int index) {_		return optLong(index, 0L)__	};returns,the,value,at,code,index,if,it,exists,and,is,a,long,or,can,be,coerced,to,a,long,returns,0,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,0;public,long,opt,long,int,index,return,opt,long,index,0l
JSONArray -> public long optLong(int index);1516215803;Returns the value at {@code index} if it exists and is a long or can be coerced to_a long. Returns 0 otherwise._@param index the index to get the value from_@return the {@code value} or {@code 0};public long optLong(int index) {_		return optLong(index, 0L)__	};returns,the,value,at,code,index,if,it,exists,and,is,a,long,or,can,be,coerced,to,a,long,returns,0,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,0;public,long,opt,long,int,index,return,opt,long,index,0l
JSONArray -> public long optLong(int index);1531461359;Returns the value at {@code index} if it exists and is a long or can be coerced to_a long. Returns 0 otherwise._@param index the index to get the value from_@return the {@code value} or {@code 0};public long optLong(int index) {_		return optLong(index, 0L)__	};returns,the,value,at,code,index,if,it,exists,and,is,a,long,or,can,be,coerced,to,a,long,returns,0,otherwise,param,index,the,index,to,get,the,value,from,return,the,code,value,or,code,0;public,long,opt,long,int,index,return,opt,long,index,0l
