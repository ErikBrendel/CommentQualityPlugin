commented;modifiers;parameterAmount;loc;comment;code
false;public;0;32;;@Test public void incrementalBuild() throws Exception {     TestProject project = new TestProject(this.temporaryFolder, FooProperties.class, BarProperties.class).     assertThat(project.getOutputFile(MetadataStore.METADATA_PATH).exists()).isFalse().     ConfigurationMetadata metadata = project.fullBuild().     assertThat(project.getOutputFile(MetadataStore.METADATA_PATH).exists()).isTrue().     assertThat(metadata).has(Metadata.withProperty("foo.counter").fromSource(FooProperties.class).withDefaultValue(0)).     assertThat(metadata).has(Metadata.withProperty("bar.counter").fromSource(BarProperties.class).withDefaultValue(0)).     metadata = project.incrementalBuild(BarProperties.class).     assertThat(metadata).has(Metadata.withProperty("foo.counter").fromSource(FooProperties.class).withDefaultValue(0)).     assertThat(metadata).has(Metadata.withProperty("bar.counter").fromSource(BarProperties.class).withDefaultValue(0)).     project.addSourceCode(BarProperties.class, BarProperties.class.getResourceAsStream("BarProperties.snippet")).     metadata = project.incrementalBuild(BarProperties.class).     assertThat(metadata).has(Metadata.withProperty("bar.extra")).     assertThat(metadata).has(Metadata.withProperty("foo.counter").withDefaultValue(0)).     assertThat(metadata).has(Metadata.withProperty("bar.counter").withDefaultValue(0)).     project.revert(BarProperties.class).     metadata = project.incrementalBuild(BarProperties.class).     assertThat(metadata).isNotEqualTo(Metadata.withProperty("bar.extra")).     assertThat(metadata).has(Metadata.withProperty("foo.counter").withDefaultValue(0)).     assertThat(metadata).has(Metadata.withProperty("bar.counter").withDefaultValue(0)). }
false;public;0;16;;@Test public void incrementalBuildAnnotationRemoved() throws Exception {     TestProject project = new TestProject(this.temporaryFolder, FooProperties.class, BarProperties.class).     ConfigurationMetadata metadata = project.fullBuild().     assertThat(metadata).has(Metadata.withProperty("foo.counter").withDefaultValue(0)).     assertThat(metadata).has(Metadata.withProperty("bar.counter").withDefaultValue(0)).     project.replaceText(BarProperties.class, "@ConfigurationProperties", "//@ConfigurationProperties").     metadata = project.incrementalBuild(BarProperties.class).     assertThat(metadata).has(Metadata.withProperty("foo.counter").withDefaultValue(0)).     assertThat(metadata).isNotEqualTo(Metadata.withProperty("bar.counter")). }
false;public;0;21;;@Test public void incrementalBuildTypeRenamed() throws Exception {     TestProject project = new TestProject(this.temporaryFolder, FooProperties.class, BarProperties.class).     ConfigurationMetadata metadata = project.fullBuild().     assertThat(metadata).has(Metadata.withProperty("foo.counter").fromSource(FooProperties.class).withDefaultValue(0)).     assertThat(metadata).has(Metadata.withProperty("bar.counter").fromSource(BarProperties.class).withDefaultValue(0)).     assertThat(metadata).doesNotHave(Metadata.withProperty("bar.counter").fromSource(RenamedBarProperties.class)).     project.delete(BarProperties.class).     project.add(RenamedBarProperties.class).     metadata = project.incrementalBuild(RenamedBarProperties.class).     assertThat(metadata).has(Metadata.withProperty("foo.counter").fromSource(FooProperties.class).withDefaultValue(0)).     assertThat(metadata).doesNotHave(Metadata.withProperty("bar.counter").fromSource(BarProperties.class).withDefaultValue(0)).     assertThat(metadata).has(Metadata.withProperty("bar.counter").withDefaultValue(0).fromSource(RenamedBarProperties.class)). }
