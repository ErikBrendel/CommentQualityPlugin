commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void toDashedCaseCamelCase() {     assertThat(toDashedCase("simpleCamelCase")).isEqualTo("simple-camel-case"). }
false;public;0;4;;@Test public void toDashedCaseUpperCamelCaseSuffix() {     assertThat(toDashedCase("myDLQ")).isEqualTo("my-d-l-q"). }
false;public;0;4;;@Test public void toDashedCaseUpperCamelCaseMiddle() {     assertThat(toDashedCase("someDLQKey")).isEqualTo("some-d-l-q-key"). }
false;public;0;5;;@Test public void toDashedCaseWordsUnderscore() {     assertThat(toDashedCase("Word_With_underscore")).isEqualTo("word-with-underscore"). }
false;public;0;5;;@Test public void toDashedCaseWordsSeveralUnderscores() {     assertThat(toDashedCase("Word___With__underscore")).isEqualTo("word---with--underscore"). }
false;public;0;4;;@Test public void toDashedCaseLowerCaseUnderscore() {     assertThat(toDashedCase("lower_underscore")).isEqualTo("lower-underscore"). }
false;public;0;4;;@Test public void toDashedCaseUpperUnderscoreSuffix() {     assertThat(toDashedCase("my_DLQ")).isEqualTo("my-d-l-q"). }
false;public;0;4;;@Test public void toDashedCaseUpperUnderscoreMiddle() {     assertThat(toDashedCase("some_DLQ_key")).isEqualTo("some-d-l-q-key"). }
false;public;0;4;;@Test public void toDashedCaseMultipleUnderscores() {     assertThat(toDashedCase("super___crazy")).isEqualTo("super---crazy"). }
false;public;0;4;;@Test public void toDashedCaseLowercase() {     assertThat(toDashedCase("lowercase")).isEqualTo("lowercase"). }
false;private;1;3;;private String toDashedCase(String name) {     return ConfigurationMetadata.toDashedCase(name). }
