commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void lombokDataProperties() {     ConfigurationMetadata metadata = compile(LombokSimpleDataProperties.class).     assertSimpleLombokProperties(metadata, LombokSimpleDataProperties.class, "data"). }
false;public;0;5;;@Test public void lombokSimpleProperties() {     ConfigurationMetadata metadata = compile(LombokSimpleProperties.class).     assertSimpleLombokProperties(metadata, LombokSimpleProperties.class, "simple"). }
false;public;0;7;;@Test public void lombokExplicitProperties() {     ConfigurationMetadata metadata = compile(LombokExplicitProperties.class).     assertSimpleLombokProperties(metadata, LombokExplicitProperties.class, "explicit").     assertThat(metadata.getItems()).hasSize(6). }
false;public;0;6;;@Test public void lombokAccessLevelProperties() {     ConfigurationMetadata metadata = compile(LombokAccessLevelProperties.class).     assertAccessLevelLombokProperties(metadata, LombokAccessLevelProperties.class, "accesslevel", 2). }
false;public;0;8;;@Test public void lombokAccessLevelOverwriteDataProperties() {     ConfigurationMetadata metadata = compile(LombokAccessLevelOverwriteDataProperties.class).     assertAccessLevelOverwriteLombokProperties(metadata, LombokAccessLevelOverwriteDataProperties.class, "accesslevel.overwrite.data"). }
false;public;0;8;;@Test public void lombokAccessLevelOverwriteExplicitProperties() {     ConfigurationMetadata metadata = compile(LombokAccessLevelOverwriteExplicitProperties.class).     assertAccessLevelOverwriteLombokProperties(metadata, LombokAccessLevelOverwriteExplicitProperties.class, "accesslevel.overwrite.explicit"). }
false;public;0;8;;@Test public void lombokAccessLevelOverwriteDefaultProperties() {     ConfigurationMetadata metadata = compile(LombokAccessLevelOverwriteDefaultProperties.class).     assertAccessLevelOverwriteLombokProperties(metadata, LombokAccessLevelOverwriteDefaultProperties.class, "accesslevel.overwrite.default"). }
false;public;0;27;;@Test public void lombokInnerClassProperties() {     ConfigurationMetadata metadata = compile(LombokInnerClassProperties.class).     assertThat(metadata).has(Metadata.withGroup("config").fromSource(LombokInnerClassProperties.class)).     assertThat(metadata).has(Metadata.withGroup("config.first").ofType(LombokInnerClassProperties.Foo.class).fromSource(LombokInnerClassProperties.class)).     assertThat(metadata).has(Metadata.withProperty("config.first.name")).     assertThat(metadata).has(Metadata.withProperty("config.first.bar.name")).     assertThat(metadata).has(Metadata.withGroup("config.second", LombokInnerClassProperties.Foo.class).fromSource(LombokInnerClassProperties.class)).     assertThat(metadata).has(Metadata.withProperty("config.second.name")).     assertThat(metadata).has(Metadata.withProperty("config.second.bar.name")).     assertThat(metadata).has(Metadata.withGroup("config.third").ofType(SimpleLombokPojo.class).fromSource(LombokInnerClassProperties.class)).     // For some reason the annotation processor resolves a type for SimpleLombokPojo     // that is resolved (compiled) and the source annotations are gone. Because we     // don't see the @Data annotation anymore, no field is harvested. What is crazy is     // that a sample project works fine so this seem to be related to the unit test     // environment for some reason. assertThat(metadata,     // containsProperty("config.third.value")).     assertThat(metadata).has(Metadata.withProperty("config.fourth")).     assertThat(metadata).isNotEqualTo(Metadata.withGroup("config.fourth")). }
false;public;0;13;;@Test public void lombokInnerClassWithGetterProperties() {     ConfigurationMetadata metadata = compile(LombokInnerClassWithGetterProperties.class).     assertThat(metadata).has(Metadata.withGroup("config").fromSource(LombokInnerClassWithGetterProperties.class)).     assertThat(metadata).has(Metadata.withGroup("config.first").ofType(LombokInnerClassWithGetterProperties.Foo.class).fromSourceMethod("getFirst()").fromSource(LombokInnerClassWithGetterProperties.class)).     assertThat(metadata).has(Metadata.withProperty("config.first.name")).     assertThat(metadata.getItems()).hasSize(3). }
false;private;3;13;;private void assertSimpleLombokProperties(ConfigurationMetadata metadata, Class<?> source, String prefix) {     assertThat(metadata).has(Metadata.withGroup(prefix).fromSource(source)).     assertThat(metadata).doesNotHave(Metadata.withProperty(prefix + ".id")).     assertThat(metadata).has(Metadata.withProperty(prefix + ".name", String.class).fromSource(source).withDescription("Name description.")).     assertThat(metadata).has(Metadata.withProperty(prefix + ".description")).     assertThat(metadata).has(Metadata.withProperty(prefix + ".counter")).     assertThat(metadata).has(Metadata.withProperty(prefix + ".number").fromSource(source).withDefaultValue(0).withDeprecation(null, null)).     assertThat(metadata).has(Metadata.withProperty(prefix + ".items")).     assertThat(metadata).doesNotHave(Metadata.withProperty(prefix + ".ignored")). }
false;private;3;4;;private void assertAccessLevelOverwriteLombokProperties(ConfigurationMetadata metadata, Class<?> source, String prefix) {     assertAccessLevelLombokProperties(metadata, source, prefix, 7). }
false;private;4;9;;private void assertAccessLevelLombokProperties(ConfigurationMetadata metadata, Class<?> source, String prefix, int countNameFields) {     assertThat(metadata).has(Metadata.withGroup(prefix).fromSource(source)).     for (int i = 0. i < countNameFields. i++) {         assertThat(metadata).has(Metadata.withProperty(prefix + ".name" + i, String.class)).     }     assertThat(metadata.getItems()).hasSize(1 + countNameFields). }
