commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void propertiesWithJavaBeanProperties() throws IOException {     process(SimpleProperties.class, propertyNames((stream) -> assertThat(stream).containsExactly("theName", "flag", "comparator"))). }
false;public;0;18;;@Test public void propertiesWithJavaBeanHierarchicalProperties() throws IOException {     process(HierarchicalProperties.class, Arrays.asList(HierarchicalPropertiesParent.class, HierarchicalPropertiesGrandparent.class), (type, metadataEnv) -> {         PropertyDescriptorResolver resolver = new PropertyDescriptorResolver(metadataEnv).         assertThat(resolver.resolve(type, null).map(PropertyDescriptor::getName)).containsExactly("third", "second", "first").         assertThat(resolver.resolve(type, null).map((descriptor) -> descriptor.resolveItemMetadata("test", metadataEnv)).map(ItemMetadata::getDefaultValue)).containsExactly("three", "two", "one").     }). }
false;public;0;5;;@Test public void propertiesWithLombokGetterSetterAtClassLevel() throws IOException {     process(LombokSimpleProperties.class, propertyNames((stream) -> assertThat(stream).containsExactly("name", "description", "counter", "number", "items"))). }
false;public;0;6;;@Test public void propertiesWithLombokGetterSetterAtFieldLevel() throws IOException {     process(LombokExplicitProperties.class, propertyNames((stream) -> assertThat(stream).containsExactly("name", "description", "counter", "number", "items"))). }
false;public;0;6;;@Test public void propertiesWithLombokDataClass() throws IOException {     process(LombokSimpleDataProperties.class, propertyNames((stream) -> assertThat(stream).containsExactly("name", "description", "counter", "number", "items"))). }
false;private;1;8;;private BiConsumer<TypeElement, MetadataGenerationEnvironment> properties(Consumer<Stream<PropertyDescriptor<?>>> stream) {     return (element, metadataEnv) -> {         PropertyDescriptorResolver resolver = new PropertyDescriptorResolver(metadataEnv).         stream.accept(resolver.resolve(element, null)).     }. }
false;private;1;5;;private BiConsumer<TypeElement, MetadataGenerationEnvironment> propertyNames(Consumer<Stream<String>> stream) {     return properties((result) -> stream.accept(result.map(PropertyDescriptor::getName))). }
false;private;2;5;;private void process(Class<?> target, BiConsumer<TypeElement, MetadataGenerationEnvironment> consumer) throws IOException {     process(target, Collections.emptyList(), consumer). }
false;private;3;16;;private void process(Class<?> target, Collection<Class<?>> additionalClasses, BiConsumer<TypeElement, MetadataGenerationEnvironment> consumer) throws IOException {     BiConsumer<RoundEnvironmentTester, MetadataGenerationEnvironment> internalConsumer = (roundEnv, metadataEnv) -> {         TypeElement element = roundEnv.getRootElement(target).         consumer.accept(element, metadataEnv).     }.     TestableAnnotationProcessor<MetadataGenerationEnvironment> processor = new TestableAnnotationProcessor<>(internalConsumer, new MetadataGenerationEnvironmentFactory()).     TestCompiler compiler = new TestCompiler(this.temporaryFolder).     ArrayList<Class<?>> allClasses = new ArrayList<>().     allClasses.add(target).     allClasses.addAll(additionalClasses).     compiler.getTask(allClasses.toArray(new Class<?>[0])).call(processor). }
