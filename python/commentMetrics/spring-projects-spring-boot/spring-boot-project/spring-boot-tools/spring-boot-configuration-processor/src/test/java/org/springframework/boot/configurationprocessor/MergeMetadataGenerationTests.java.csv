commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void mergingOfAdditionalProperty() throws Exception {     ItemMetadata property = ItemMetadata.newProperty(null, "foo", "java.lang.String", AdditionalMetadata.class.getName(), null, null, null, null).     writeAdditionalMetadata(property).     ConfigurationMetadata metadata = compile(SimpleProperties.class).     assertThat(metadata).has(Metadata.withProperty("simple.comparator")).     assertThat(metadata).has(Metadata.withProperty("foo", String.class).fromSource(AdditionalMetadata.class)). }
false;public;0;10;;@Test public void mergingOfAdditionalPropertyMatchingGroup() throws Exception {     ItemMetadata property = ItemMetadata.newProperty(null, "simple", "java.lang.String", null, null, null, null, null).     writeAdditionalMetadata(property).     ConfigurationMetadata metadata = compile(SimpleProperties.class).     assertThat(metadata).has(Metadata.withGroup("simple").fromSource(SimpleProperties.class)).     assertThat(metadata).has(Metadata.withProperty("simple", String.class)). }
false;public;0;11;;@Test public void mergeExistingPropertyDefaultValue() throws Exception {     ItemMetadata property = ItemMetadata.newProperty("simple", "flag", null, null, null, null, true, null).     writeAdditionalMetadata(property).     ConfigurationMetadata metadata = compile(SimpleProperties.class).     assertThat(metadata).has(Metadata.withProperty("simple.flag", Boolean.class).fromSource(SimpleProperties.class).withDescription("A simple flag.").withDeprecation(null, null).withDefaultValue(true)).     assertThat(metadata.getItems()).hasSize(4). }
false;public;0;29;;@Test public void mergeExistingPropertyWithSeveralCandidates() throws Exception {     ItemMetadata property = ItemMetadata.newProperty("simple", "flag", Boolean.class.getName(), null, null, null, true, null).     writeAdditionalMetadata(property).     ConfigurationMetadata metadata = compile(SimpleProperties.class, SimpleConflictingProperties.class).     assertThat(metadata.getItems()).hasSize(6).     List<ItemMetadata> items = metadata.getItems().stream().filter((item) -> item.getName().equals("simple.flag")).collect(Collectors.toList()).     assertThat(items).hasSize(2).     ItemMetadata matchingProperty = items.stream().filter((item) -> item.getType().equals(Boolean.class.getName())).findFirst().orElse(null).     assertThat(matchingProperty).isNotNull().     assertThat(matchingProperty.getDefaultValue()).isEqualTo(true).     assertThat(matchingProperty.getSourceType()).isEqualTo(SimpleProperties.class.getName()).     assertThat(matchingProperty.getDescription()).isEqualTo("A simple flag.").     ItemMetadata nonMatchingProperty = items.stream().filter((item) -> item.getType().equals(String.class.getName())).findFirst().orElse(null).     assertThat(nonMatchingProperty).isNotNull().     assertThat(nonMatchingProperty.getDefaultValue()).isEqualTo("hello").     assertThat(nonMatchingProperty.getSourceType()).isEqualTo(SimpleConflictingProperties.class.getName()).     assertThat(nonMatchingProperty.getDescription()).isNull(). }
false;public;0;12;;@Test public void mergeExistingPropertyDescription() throws Exception {     ItemMetadata property = ItemMetadata.newProperty("simple", "comparator", null, null, null, "A nice comparator.", null, null).     writeAdditionalMetadata(property).     ConfigurationMetadata metadata = compile(SimpleProperties.class).     assertThat(metadata).has(Metadata.withProperty("simple.comparator", "java.util.Comparator<?>").fromSource(SimpleProperties.class).withDescription("A nice comparator.")).     assertThat(metadata.getItems()).hasSize(4). }
false;public;0;13;;@Test public void mergeExistingPropertyDeprecation() throws Exception {     ItemMetadata property = ItemMetadata.newProperty("simple", "comparator", null, null, null, null, null, new ItemDeprecation("Don't use this.", "simple.complex-comparator", "error")).     writeAdditionalMetadata(property).     ConfigurationMetadata metadata = compile(SimpleProperties.class).     assertThat(metadata).has(Metadata.withProperty("simple.comparator", "java.util.Comparator<?>").fromSource(SimpleProperties.class).withDeprecation("Don't use this.", "simple.complex-comparator", "error")).     assertThat(metadata.getItems()).hasSize(4). }
false;public;0;13;;@Test public void mergeExistingPropertyDeprecationOverride() throws Exception {     ItemMetadata property = ItemMetadata.newProperty("singledeprecated", "name", null, null, null, null, null, new ItemDeprecation("Don't use this.", "single.name")).     writeAdditionalMetadata(property).     ConfigurationMetadata metadata = compile(DeprecatedSingleProperty.class).     assertThat(metadata).has(Metadata.withProperty("singledeprecated.name", String.class.getName()).fromSource(DeprecatedSingleProperty.class).withDeprecation("Don't use this.", "single.name")).     assertThat(metadata.getItems()).hasSize(3). }
false;public;0;12;;@Test public void mergeExistingPropertyDeprecationOverrideLevel() throws Exception {     ItemMetadata property = ItemMetadata.newProperty("singledeprecated", "name", null, null, null, null, null, new ItemDeprecation(null, null, "error")).     writeAdditionalMetadata(property).     ConfigurationMetadata metadata = compile(DeprecatedSingleProperty.class).     assertThat(metadata).has(Metadata.withProperty("singledeprecated.name", String.class.getName()).fromSource(DeprecatedSingleProperty.class).withDeprecation("renamed", "singledeprecated.new-name", "error")).     assertThat(metadata.getItems()).hasSize(3). }
false;public;0;8;;@Test public void mergeOfInvalidAdditionalMetadata() throws IOException {     File additionalMetadataFile = createAdditionalMetadataFile().     FileCopyUtils.copy("Hello World", new FileWriter(additionalMetadataFile)).     assertThatIllegalStateException().isThrownBy(() -> compile(SimpleProperties.class)).withMessage("Compilation failed"). }
false;public;0;13;;@Test public void mergingOfSimpleHint() throws Exception {     writeAdditionalHints(ItemHint.newHint("simple.the-name", new ItemHint.ValueHint("boot", "Bla bla"), new ItemHint.ValueHint("spring", null))).     ConfigurationMetadata metadata = compile(SimpleProperties.class).     assertThat(metadata).has(Metadata.withProperty("simple.the-name", String.class).fromSource(SimpleProperties.class).withDescription("The name of this simple properties.").withDefaultValue("boot").withDeprecation(null, null)).     assertThat(metadata).has(Metadata.withHint("simple.the-name").withValue(0, "boot", "Bla bla").withValue(1, "spring", null)). }
false;public;0;12;;@Test public void mergingOfHintWithNonCanonicalName() throws Exception {     writeAdditionalHints(ItemHint.newHint("simple.theName", new ItemHint.ValueHint("boot", "Bla bla"))).     ConfigurationMetadata metadata = compile(SimpleProperties.class).     assertThat(metadata).has(Metadata.withProperty("simple.the-name", String.class).fromSource(SimpleProperties.class).withDescription("The name of this simple properties.").withDefaultValue("boot").withDeprecation(null, null)).     assertThat(metadata).has(Metadata.withHint("simple.the-name").withValue(0, "boot", "Bla bla")). }
false;public;0;15;;@Test public void mergingOfHintWithProvider() throws Exception {     writeAdditionalHints(new ItemHint("simple.theName", Collections.emptyList(), Arrays.asList(new ItemHint.ValueProvider("first", Collections.singletonMap("target", "org.foo")), new ItemHint.ValueProvider("second", null)))).     ConfigurationMetadata metadata = compile(SimpleProperties.class).     assertThat(metadata).has(Metadata.withProperty("simple.the-name", String.class).fromSource(SimpleProperties.class).withDescription("The name of this simple properties.").withDefaultValue("boot").withDeprecation(null, null)).     assertThat(metadata).has(Metadata.withHint("simple.the-name").withProvider("first", "target", "org.foo").withProvider("second")). }
false;public;0;9;;@Test public void mergingOfAdditionalDeprecation() throws Exception {     writePropertyDeprecation(ItemMetadata.newProperty("simple", "wrongName", "java.lang.String", null, null, null, null, new ItemDeprecation("Lame name.", "simple.the-name"))).     ConfigurationMetadata metadata = compile(SimpleProperties.class).     assertThat(metadata).has(Metadata.withProperty("simple.wrong-name", String.class).withDeprecation("Lame name.", "simple.the-name")). }
false;public;0;24;;@Test public void mergingOfAdditionalMetadata() throws Exception {     File metaInfFolder = new File(getCompiler().getOutputLocation(), "META-INF").     metaInfFolder.mkdirs().     File additionalMetadataFile = new File(metaInfFolder, "additional-spring-configuration-metadata.json").     additionalMetadataFile.createNewFile().     JSONObject property = new JSONObject().     property.put("name", "foo").     property.put("type", "java.lang.String").     property.put("sourceType", AdditionalMetadata.class.getName()).     JSONArray properties = new JSONArray().     properties.put(property).     JSONObject additionalMetadata = new JSONObject().     additionalMetadata.put("properties", properties).     FileWriter writer = new FileWriter(additionalMetadataFile).     writer.append(additionalMetadata.toString(2)).     writer.flush().     writer.close().     ConfigurationMetadata metadata = compile(SimpleProperties.class).     assertThat(metadata).has(Metadata.withProperty("simple.comparator")).     assertThat(metadata).has(Metadata.withProperty("foo", String.class).fromSource(AdditionalMetadata.class)). }
false;private;1;11;;private void writeAdditionalMetadata(ItemMetadata... metadata) throws Exception {     TestJsonConverter converter = new TestJsonConverter().     File additionalMetadataFile = createAdditionalMetadataFile().     JSONObject additionalMetadata = new JSONObject().     JSONArray properties = new JSONArray().     for (ItemMetadata itemMetadata : metadata) {         properties.put(converter.toJsonObject(itemMetadata)).     }     additionalMetadata.put("properties", properties).     writeMetadata(additionalMetadataFile, additionalMetadata). }
false;private;1;7;;private void writeAdditionalHints(ItemHint... hints) throws Exception {     TestJsonConverter converter = new TestJsonConverter().     File additionalMetadataFile = createAdditionalMetadataFile().     JSONObject additionalMetadata = new JSONObject().     additionalMetadata.put("hints", converter.toJsonArray(Arrays.asList(hints))).     writeMetadata(additionalMetadataFile, additionalMetadata). }
false;private;1;27;;private void writePropertyDeprecation(ItemMetadata... items) throws Exception {     File additionalMetadataFile = createAdditionalMetadataFile().     JSONArray propertiesArray = new JSONArray().     for (ItemMetadata item : items) {         JSONObject jsonObject = new JSONObject().         jsonObject.put("name", item.getName()).         if (item.getType() != null) {             jsonObject.put("type", item.getType()).         }         ItemDeprecation deprecation = item.getDeprecation().         if (deprecation != null) {             JSONObject deprecationJson = new JSONObject().             if (deprecation.getReason() != null) {                 deprecationJson.put("reason", deprecation.getReason()).             }             if (deprecation.getReplacement() != null) {                 deprecationJson.put("replacement", deprecation.getReplacement()).             }             jsonObject.put("deprecation", deprecationJson).         }         propertiesArray.put(jsonObject).     }     JSONObject additionalMetadata = new JSONObject().     additionalMetadata.put("properties", propertiesArray).     writeMetadata(additionalMetadataFile, additionalMetadata). }
false;private;0;8;;private File createAdditionalMetadataFile() throws IOException {     File metaInfFolder = new File(getCompiler().getOutputLocation(), "META-INF").     metaInfFolder.mkdirs().     File additionalMetadataFile = new File(metaInfFolder, "additional-spring-configuration-metadata.json").     additionalMetadataFile.createNewFile().     return additionalMetadataFile. }
false;private;2;5;;private void writeMetadata(File metadataFile, JSONObject metadata) throws Exception {     try (FileWriter writer = new FileWriter(metadataFile)) {         writer.append(metadata.toString(2)).     } }
