commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void simpleMethodConfig() {     ConfigurationMetadata metadata = compile(SimpleMethodConfig.class).     assertThat(metadata).has(Metadata.withGroup("foo").fromSource(SimpleMethodConfig.class)).     assertThat(metadata).has(Metadata.withProperty("foo.name", String.class).fromSource(SimpleMethodConfig.Foo.class)).     assertThat(metadata).has(Metadata.withProperty("foo.flag", Boolean.class).withDefaultValue(false).fromSource(SimpleMethodConfig.Foo.class)). }
false;public;0;7;;@Test public void invalidMethodConfig() {     ConfigurationMetadata metadata = compile(InvalidMethodConfig.class).     assertThat(metadata).has(Metadata.withProperty("something.name", String.class).fromSource(InvalidMethodConfig.class)).     assertThat(metadata).isNotEqualTo(Metadata.withProperty("invalid.name")). }
false;public;0;10;;@Test public void methodAndClassConfig() {     ConfigurationMetadata metadata = compile(MethodAndClassConfig.class).     assertThat(metadata).has(Metadata.withProperty("conflict.name", String.class).fromSource(MethodAndClassConfig.Foo.class)).     assertThat(metadata).has(Metadata.withProperty("conflict.flag", Boolean.class).withDefaultValue(false).fromSource(MethodAndClassConfig.Foo.class)).     assertThat(metadata).has(Metadata.withProperty("conflict.value", String.class).fromSource(MethodAndClassConfig.class)). }
false;public;0;5;;@Test public void emptyTypeMethodConfig() {     ConfigurationMetadata metadata = compile(EmptyTypeMethodConfig.class).     assertThat(metadata).isNotEqualTo(Metadata.withProperty("something.foo")). }
false;public;0;12;;@Test public void deprecatedMethodConfig() {     Class<DeprecatedMethodConfig> type = DeprecatedMethodConfig.class.     ConfigurationMetadata metadata = compile(type).     assertThat(metadata).has(Metadata.withGroup("foo").fromSource(type)).     assertThat(metadata).has(Metadata.withProperty("foo.name", String.class).fromSource(DeprecatedMethodConfig.Foo.class).withDeprecation(null, null)).     assertThat(metadata).has(Metadata.withProperty("foo.flag", Boolean.class).withDefaultValue(false).fromSource(DeprecatedMethodConfig.Foo.class).withDeprecation(null, null)). }
false;public;0;16;;@Test @SuppressWarnings("deprecation") public void deprecatedMethodConfigOnClass() {     Class<?> type = org.springframework.boot.configurationsample.method.DeprecatedClassMethodConfig.class.     ConfigurationMetadata metadata = compile(type).     assertThat(metadata).has(Metadata.withGroup("foo").fromSource(type)).     assertThat(metadata).has(Metadata.withProperty("foo.name", String.class).fromSource(org.springframework.boot.configurationsample.method.DeprecatedClassMethodConfig.Foo.class).withDeprecation(null, null)).     assertThat(metadata).has(Metadata.withProperty("foo.flag", Boolean.class).withDefaultValue(false).fromSource(org.springframework.boot.configurationsample.method.DeprecatedClassMethodConfig.Foo.class).withDeprecation(null, null)). }
