commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void lombokSimpleProperty() throws IOException {     process(LombokSimpleProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokSimpleProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "name").         assertThat(property.getName()).isEqualTo("name").         assertThat(property.getSource()).isSameAs(property.getField()).         assertThat(property.getField().getSimpleName()).hasToString("name").         assertThat(property.isProperty(metadataEnv)).isTrue().         assertThat(property.isNested(metadataEnv)).isFalse().     }). }
false;public;0;14;;@Test public void lombokCollectionProperty() throws IOException {     process(LombokSimpleProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokSimpleProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "items").         assertThat(property.getName()).isEqualTo("items").         assertThat(property.getSource()).isSameAs(property.getField()).         assertThat(property.getField().getSimpleName()).hasToString("items").         assertThat(property.isProperty(metadataEnv)).isTrue().         assertThat(property.isNested(metadataEnv)).isFalse().     }). }
false;public;0;14;;@Test public void lombokNestedPropertySameClass() throws IOException {     process(LombokInnerClassProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokInnerClassProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "first").         assertThat(property.getName()).isEqualTo("first").         assertThat(property.getSource()).isSameAs(property.getField()).         assertThat(property.getField().getSimpleName()).hasToString("first").         assertThat(property.isProperty(metadataEnv)).isFalse().         assertThat(property.isNested(metadataEnv)).isTrue().     }). }
false;public;0;14;;@Test public void lombokNestedPropertyWithAnnotation() throws IOException {     process(LombokInnerClassProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokInnerClassProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "third").         assertThat(property.getName()).isEqualTo("third").         assertThat(property.getSource()).isSameAs(property.getField()).         assertThat(property.getField().getSimpleName()).hasToString("third").         assertThat(property.isProperty(metadataEnv)).isFalse().         assertThat(property.isNested(metadataEnv)).isTrue().     }). }
false;public;0;12;;@Test public void lombokSimplePropertyWithOnlyGetterOnClassShouldNotBeExposed() throws IOException {     process(LombokSimpleProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokSimpleProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "ignored").         assertThat(property.isProperty(metadataEnv)).isFalse().         assertThat(property.isNested(metadataEnv)).isFalse().     }). }
false;public;0;12;;@Test public void lombokSimplePropertyWithOnlyGetterOnDataClassShouldNotBeExposed() throws IOException {     process(LombokSimpleDataProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokSimpleDataProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "ignored").         assertThat(property.isProperty(metadataEnv)).isFalse().         assertThat(property.isNested(metadataEnv)).isFalse().     }). }
false;public;0;12;;@Test public void lombokSimplePropertyWithOnlyGetterOnFieldShouldNotBeExposed() throws IOException {     process(LombokExplicitProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokExplicitProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "ignoredOnlyGetter").         assertThat(property.isProperty(metadataEnv)).isFalse().         assertThat(property.isNested(metadataEnv)).isFalse().     }). }
false;public;0;12;;@Test public void lombokSimplePropertyWithOnlySetterOnFieldShouldNotBeExposed() throws IOException {     process(LombokExplicitProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokExplicitProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "ignoredOnlySetter").         assertThat(property.isProperty(metadataEnv)).isFalse().         assertThat(property.isNested(metadataEnv)).isFalse().     }). }
false;public;0;13;;@Test public void lombokMetadataSimpleProperty() throws IOException {     process(LombokSimpleProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokSimpleProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "description").         assertItemMetadata(metadataEnv, property).isProperty().hasName("test.description").hasType(String.class).hasSourceType(LombokSimpleProperties.class).hasNoDescription().isNotDeprecated().     }). }
false;public;0;13;;@Test public void lombokMetadataCollectionProperty() throws IOException {     process(LombokSimpleProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokSimpleProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "items").         assertItemMetadata(metadataEnv, property).isProperty().hasName("test.items").hasType("java.util.List<java.lang.String>").hasSourceType(LombokSimpleProperties.class).hasNoDescription().isNotDeprecated().     }). }
false;public;0;16;;@Test public void lombokMetadataNestedGroup() throws IOException {     process(LombokInnerClassProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokInnerClassProperties.class).         VariableElement field = getField(ownerElement, "third").         ExecutableElement getter = getMethod(ownerElement, "getThird").         LombokPropertyDescriptor property = new LombokPropertyDescriptor(ownerElement, null, field, "third", field.asType(), getter).         assertItemMetadata(metadataEnv, property).isGroup().hasName("test.third").hasType("org.springframework.boot.configurationsample.lombok.SimpleLombokPojo").hasSourceType(LombokInnerClassProperties.class).hasSourceMethod("getThird()").hasNoDescription().isNotDeprecated().     }). }
false;public;0;14;;@Test public void lombokMetadataNestedGroupNoGetter() throws IOException {     process(LombokInnerClassProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokInnerClassProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "first").         assertItemMetadata(metadataEnv, property).isGroup().hasName("test.first").hasType("org.springframework.boot.configurationsample.lombok.LombokInnerClassProperties$Foo").hasSourceType(LombokInnerClassProperties.class).hasSourceMethod(null).hasNoDescription().isNotDeprecated().     }). }
false;public;0;10;;@Test public void lombokMetadataNotACandidatePropertyShouldReturnNull() throws IOException {     process(LombokSimpleProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokSimpleProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "ignored").         assertThat(property.resolveItemMetadata("test", metadataEnv)).isNull().     }). }
false;public;0;12;;@Test @SuppressWarnings("deprecation") public void lombokDeprecatedPropertyOnClass() throws IOException {     process(LombokDeprecatedProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokDeprecatedProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "name").         assertItemMetadata(metadataEnv, property).isProperty().isDeprecatedWithNoInformation().     }). }
false;public;0;11;;@Test public void lombokDeprecatedPropertyOnField() throws IOException {     process(LombokDeprecatedSingleProperty.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokDeprecatedSingleProperty.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "name").         assertItemMetadata(metadataEnv, property).isProperty().isDeprecatedWithNoInformation().     }). }
false;public;0;11;;@Test public void lombokPropertyWithDescription() throws IOException {     process(LombokSimpleProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokSimpleProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "name").         assertItemMetadata(metadataEnv, property).isProperty().hasDescription("Name description.").     }). }
false;public;0;11;;@Test public void lombokPropertyWithDefaultValue() throws IOException {     process(LombokDefaultValueProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(LombokDefaultValueProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "description").         assertItemMetadata(metadataEnv, property).isProperty().hasDefaultValue("my description").     }). }
false;public;0;10;;@Test public void lombokPropertyNotCandidate() throws IOException {     process(SimpleProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(SimpleProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "theName").         assertThat(property.isProperty(metadataEnv)).isFalse().         assertThat(property.isNested(metadataEnv)).isFalse().     }). }
false;public;0;11;;@Test public void lombokNestedPropertyNotCandidate() throws IOException {     process(InnerClassProperties.class, (roundEnv, metadataEnv) -> {         TypeElement ownerElement = roundEnv.getRootElement(InnerClassProperties.class).         LombokPropertyDescriptor property = createPropertyDescriptor(ownerElement, "first").         assertThat(property.isProperty(metadataEnv)).isFalse().         assertThat(property.isNested(metadataEnv)).isFalse().     }). }
false;protected;2;6;;protected LombokPropertyDescriptor createPropertyDescriptor(TypeElement ownerElement, String name) {     VariableElement field = getField(ownerElement, name).     return new LombokPropertyDescriptor(ownerElement, null, field, name, field.asType(), null). }
