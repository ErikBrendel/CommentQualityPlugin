commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void simpleEndpoint() {     ConfigurationMetadata metadata = compile(SimpleEndpoint.class).     assertThat(metadata).has(Metadata.withGroup("management.endpoint.simple").fromSource(SimpleEndpoint.class)).     assertThat(metadata).has(enabledFlag("simple", true)).     assertThat(metadata).has(cacheTtl("simple")).     assertThat(metadata.getItems()).hasSize(3). }
false;public;0;8;;@Test public void disableEndpoint() {     ConfigurationMetadata metadata = compile(DisabledEndpoint.class).     assertThat(metadata).has(Metadata.withGroup("management.endpoint.disabled").fromSource(DisabledEndpoint.class)).     assertThat(metadata).has(enabledFlag("disabled", false)).     assertThat(metadata.getItems()).hasSize(2). }
false;public;0;8;;@Test public void enabledEndpoint() {     ConfigurationMetadata metadata = compile(EnabledEndpoint.class).     assertThat(metadata).has(Metadata.withGroup("management.endpoint.enabled").fromSource(EnabledEndpoint.class)).     assertThat(metadata).has(enabledFlag("enabled", true)).     assertThat(metadata.getItems()).hasSize(2). }
false;public;0;12;;@Test public void customPropertiesEndpoint() {     ConfigurationMetadata metadata = compile(CustomPropertiesEndpoint.class).     assertThat(metadata).has(Metadata.withGroup("management.endpoint.customprops").fromSource(CustomPropertiesEndpoint.class)).     assertThat(metadata).has(Metadata.withProperty("management.endpoint.customprops.name").ofType(String.class).withDefaultValue("test")).     assertThat(metadata).has(enabledFlag("customprops", true)).     assertThat(metadata).has(cacheTtl("customprops")).     assertThat(metadata.getItems()).hasSize(4). }
false;public;0;9;;@Test public void specificEndpoint() {     ConfigurationMetadata metadata = compile(SpecificEndpoint.class).     assertThat(metadata).has(Metadata.withGroup("management.endpoint.specific").fromSource(SpecificEndpoint.class)).     assertThat(metadata).has(enabledFlag("specific", true)).     assertThat(metadata).has(cacheTtl("specific")).     assertThat(metadata.getItems()).hasSize(3). }
false;public;0;8;;@Test public void camelCaseEndpoint() {     ConfigurationMetadata metadata = compile(CamelCaseEndpoint.class).     assertThat(metadata).has(Metadata.withGroup("management.endpoint.pascal-case").fromSource(CamelCaseEndpoint.class)).     assertThat(metadata).has(enabledFlag("PascalCase", "pascal-case", true)).     assertThat(metadata.getItems()).hasSize(2). }
false;public;0;19;;@Test public void incrementalEndpointBuildChangeGeneralEnabledFlag() throws Exception {     TestProject project = new TestProject(this.temporaryFolder, IncrementalEndpoint.class).     ConfigurationMetadata metadata = project.fullBuild().     assertThat(metadata).has(Metadata.withGroup("management.endpoint.incremental").fromSource(IncrementalEndpoint.class)).     assertThat(metadata).has(enabledFlag("incremental", true)).     assertThat(metadata).has(cacheTtl("incremental")).     assertThat(metadata.getItems()).hasSize(3).     project.replaceText(IncrementalEndpoint.class, "id = \"incremental\"", "id = \"incremental\", enableByDefault = false").     metadata = project.incrementalBuild(IncrementalEndpoint.class).     assertThat(metadata).has(Metadata.withGroup("management.endpoint.incremental").fromSource(IncrementalEndpoint.class)).     assertThat(metadata).has(enabledFlag("incremental", false)).     assertThat(metadata).has(cacheTtl("incremental")).     assertThat(metadata.getItems()).hasSize(3). }
false;public;0;18;;@Test public void incrementalEndpointBuildChangeCacheFlag() throws Exception {     TestProject project = new TestProject(this.temporaryFolder, IncrementalEndpoint.class).     ConfigurationMetadata metadata = project.fullBuild().     assertThat(metadata).has(Metadata.withGroup("management.endpoint.incremental").fromSource(IncrementalEndpoint.class)).     assertThat(metadata).has(enabledFlag("incremental", true)).     assertThat(metadata).has(cacheTtl("incremental")).     assertThat(metadata.getItems()).hasSize(3).     project.replaceText(IncrementalEndpoint.class, "@Nullable String param", "String param").     metadata = project.incrementalBuild(IncrementalEndpoint.class).     assertThat(metadata).has(Metadata.withGroup("management.endpoint.incremental").fromSource(IncrementalEndpoint.class)).     assertThat(metadata).has(enabledFlag("incremental", true)).     assertThat(metadata.getItems()).hasSize(2). }
false;public;0;19;;@Test public void incrementalEndpointBuildEnableSpecificEndpoint() throws Exception {     TestProject project = new TestProject(this.temporaryFolder, SpecificEndpoint.class).     ConfigurationMetadata metadata = project.fullBuild().     assertThat(metadata).has(Metadata.withGroup("management.endpoint.specific").fromSource(SpecificEndpoint.class)).     assertThat(metadata).has(enabledFlag("specific", true)).     assertThat(metadata).has(cacheTtl("specific")).     assertThat(metadata.getItems()).hasSize(3).     project.replaceText(SpecificEndpoint.class, "enableByDefault = true", "enableByDefault = false").     metadata = project.incrementalBuild(SpecificEndpoint.class).     assertThat(metadata).has(Metadata.withGroup("management.endpoint.specific").fromSource(SpecificEndpoint.class)).     assertThat(metadata).has(enabledFlag("specific", false)).     assertThat(metadata).has(cacheTtl("specific")).     assertThat(metadata.getItems()).hasSize(3). }
false;private;3;7;;private Metadata.MetadataItemCondition enabledFlag(String endpointId, String endpointSuffix, Boolean defaultValue) {     return Metadata.withEnabledFlag("management.endpoint." + endpointSuffix + ".enabled").withDefaultValue(defaultValue).withDescription(String.format("Whether to enable the %s endpoint.", endpointId)). }
false;private;2;4;;private Metadata.MetadataItemCondition enabledFlag(String endpointId, Boolean defaultValue) {     return enabledFlag(endpointId, endpointId, defaultValue). }
false;private;1;6;;private Metadata.MetadataItemCondition cacheTtl(String endpointId) {     return Metadata.withProperty("management.endpoint." + endpointId + ".cache.time-to-live").ofType(Duration.class).withDefaultValue("0ms").withDescription("Maximum time that a response can be cached."). }
