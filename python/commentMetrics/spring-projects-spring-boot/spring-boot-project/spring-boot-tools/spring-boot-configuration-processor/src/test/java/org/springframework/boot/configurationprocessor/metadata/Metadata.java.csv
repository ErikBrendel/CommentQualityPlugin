commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static MetadataItemCondition withGroup(String name) {     return new MetadataItemCondition(ItemType.GROUP, name). }
false;public,static;2;3;;public static MetadataItemCondition withGroup(String name, Class<?> type) {     return new MetadataItemCondition(ItemType.GROUP, name).ofType(type). }
false;public,static;2;3;;public static MetadataItemCondition withGroup(String name, String type) {     return new MetadataItemCondition(ItemType.GROUP, name).ofType(type). }
false;public,static;1;3;;public static MetadataItemCondition withProperty(String name) {     return new MetadataItemCondition(ItemType.PROPERTY, name). }
false;public,static;2;3;;public static MetadataItemCondition withProperty(String name, Class<?> type) {     return new MetadataItemCondition(ItemType.PROPERTY, name).ofType(type). }
false;public,static;2;3;;public static MetadataItemCondition withProperty(String name, String type) {     return new MetadataItemCondition(ItemType.PROPERTY, name).ofType(type). }
false;public,static;1;3;;public static Metadata.MetadataItemCondition withEnabledFlag(String key) {     return withProperty(key).ofType(Boolean.class). }
false;public,static;1;3;;public static MetadataHintCondition withHint(String name) {     return new MetadataHintCondition(name). }
false;private;0;23;;private String createDescription() {     StringBuilder description = new StringBuilder().     description.append("an item named '").append(this.name).append("'").     if (this.type != null) {         description.append(" with dataType:").append(this.type).     }     if (this.sourceType != null) {         description.append(" with sourceType:").append(this.sourceType).     }     if (this.sourceMethod != null) {         description.append(" with sourceMethod:").append(this.sourceMethod).     }     if (this.defaultValue != null) {         description.append(" with defaultValue:").append(this.defaultValue).     }     if (this.description != null) {         description.append(" with description:").append(this.description).     }     if (this.deprecation != null) {         description.append(" with deprecation:").append(this.deprecation).     }     return description.toString(). }
false;public;1;37;;@Override public boolean matches(ConfigurationMetadata value) {     ItemMetadata itemMetadata = getFirstItemWithName(value, this.name).     if (itemMetadata == null) {         return false.     }     if (this.type != null && !this.type.equals(itemMetadata.getType())) {         return false.     }     if (this.sourceType != null && !this.sourceType.getName().equals(itemMetadata.getSourceType())) {         return false.     }     if (this.sourceMethod != null && !this.sourceMethod.equals(itemMetadata.getSourceMethod())) {         return false.     }     if (this.defaultValue != null && !ObjectUtils.nullSafeEquals(this.defaultValue, itemMetadata.getDefaultValue())) {         return false.     }     if (this.defaultValue == null && itemMetadata.getDefaultValue() != null) {         return false.     }     if (this.description != null && !this.description.equals(itemMetadata.getDescription())) {         return false.     }     if (this.deprecation == null && itemMetadata.getDeprecation() != null) {         return false.     }     if (this.deprecation != null && !this.deprecation.equals(itemMetadata.getDeprecation())) {         return false.     }     return true. }
false;public;1;5;;public MetadataItemCondition ofType(Class<?> dataType) {     return new MetadataItemCondition(this.itemType, this.name, dataType.getName(), this.sourceType, this.sourceMethod, this.description, this.defaultValue, this.deprecation). }
false;public;1;5;;public MetadataItemCondition ofType(String dataType) {     return new MetadataItemCondition(this.itemType, this.name, dataType, this.sourceType, this.sourceMethod, this.description, this.defaultValue, this.deprecation). }
false;public;1;5;;public MetadataItemCondition fromSource(Class<?> sourceType) {     return new MetadataItemCondition(this.itemType, this.name, this.type, sourceType, this.sourceMethod, this.description, this.defaultValue, this.deprecation). }
false;public;1;5;;public MetadataItemCondition fromSourceMethod(String sourceMethod) {     return new MetadataItemCondition(this.itemType, this.name, this.type, this.sourceType, sourceMethod, this.description, this.defaultValue, this.deprecation). }
false;public;1;5;;public MetadataItemCondition withDescription(String description) {     return new MetadataItemCondition(this.itemType, this.name, this.type, this.sourceType, this.sourceMethod, description, this.defaultValue, this.deprecation). }
false;public;1;5;;public MetadataItemCondition withDefaultValue(Object defaultValue) {     return new MetadataItemCondition(this.itemType, this.name, this.type, this.sourceType, this.sourceMethod, this.description, defaultValue, this.deprecation). }
false;public;2;3;;public MetadataItemCondition withDeprecation(String reason, String replacement) {     return withDeprecation(reason, replacement, null). }
false;public;3;6;;public MetadataItemCondition withDeprecation(String reason, String replacement, String level) {     return new MetadataItemCondition(this.itemType, this.name, this.type, this.sourceType, this.sourceMethod, this.description, this.defaultValue, new ItemDeprecation(reason, replacement, level)). }
false;public;0;5;;public MetadataItemCondition withNoDeprecation() {     return new MetadataItemCondition(this.itemType, this.name, this.type, this.sourceType, this.sourceMethod, this.description, this.defaultValue, null). }
false;private;2;9;;private ItemMetadata getFirstItemWithName(ConfigurationMetadata metadata, String name) {     for (ItemMetadata item : metadata.getItems()) {         if (item.isOfItemType(this.itemType) && name.equals(item.getName())) {             return item.         }     }     return null. }
false;private;0;11;;private String createDescription() {     StringBuilder description = new StringBuilder().     description.append("a hints name '").append(this.name).append("'").     if (!this.valueConditions.isEmpty()) {         description.append(" with values:").append(this.valueConditions).     }     if (!this.providerConditions.isEmpty()) {         description.append(" with providers:").append(this.providerConditions).     }     return description.toString(). }
false;public;1;9;;@Override public boolean matches(ConfigurationMetadata metadata) {     ItemHint itemHint = getFirstHintWithName(metadata, this.name).     if (itemHint == null) {         return false.     }     return matches(itemHint, this.valueConditions) && matches(itemHint, this.providerConditions). }
false;private;2;9;;private boolean matches(ItemHint itemHint, List<? extends Condition<ItemHint>> conditions) {     for (Condition<ItemHint> condition : conditions) {         if (!condition.matches(itemHint)) {             return false.         }     }     return true. }
false;private;2;9;;private ItemHint getFirstHintWithName(ConfigurationMetadata metadata, String name) {     for (ItemHint hint : metadata.getHints()) {         if (name.equals(hint.getName())) {             return hint.         }     }     return null. }
false;public;3;7;;public MetadataHintCondition withValue(int index, Object value, String description) {     return new MetadataHintCondition(this.name, add(this.valueConditions, new ItemHintValueCondition(index, value, description)), this.providerConditions). }
false;public;1;3;;public MetadataHintCondition withProvider(String provider) {     return withProvider(this.providerConditions.size(), provider, null). }
false;public;3;5;;public MetadataHintCondition withProvider(String provider, String key, Object value) {     return withProvider(this.providerConditions.size(), provider, Collections.singletonMap(key, value)). }
false;public;3;6;;public MetadataHintCondition withProvider(int index, String provider, Map<String, Object> parameters) {     return new MetadataHintCondition(this.name, this.valueConditions, add(this.providerConditions, new ItemHintProviderCondition(index, provider, parameters))). }
false;private;2;5;;private <T> List<T> add(List<T> items, T item) {     List<T> result = new ArrayList<>(items).     result.add(item).     return result. }
false;private;0;11;;private String createDescription() {     StringBuilder description = new StringBuilder().     description.append("value hint at index '").append(this.index).append("'").     if (this.value != null) {         description.append(" with value:").append(this.value).     }     if (this.description != null) {         description.append(" with description:").append(this.description).     }     return description.toString(). }
false;public;1;15;;@Override public boolean matches(ItemHint value) {     if (this.index + 1 > value.getValues().size()) {         return false.     }     ItemHint.ValueHint valueHint = value.getValues().get(this.index).     if (this.value != null && !this.value.equals(valueHint.getValue())) {         return false.     }     if (this.description != null && !this.description.equals(valueHint.getDescription())) {         return false.     }     return true. }
false;public;0;11;;public String createDescription() {     StringBuilder description = new StringBuilder().     description.append("value provider").     if (this.name != null) {         description.append(" with name:").append(this.name).     }     if (this.parameters != null) {         description.append(" with parameters:").append(this.parameters).     }     return description.toString(). }
false;public;1;19;;@Override public boolean matches(ItemHint hint) {     if (this.index + 1 > hint.getProviders().size()) {         return false.     }     ItemHint.ValueProvider valueProvider = hint.getProviders().get(this.index).     if (this.name != null && !this.name.equals(valueProvider.getName())) {         return false.     }     if (this.parameters != null) {         for (Map.Entry<String, Object> entry : this.parameters.entrySet()) {             if (!IsMapContaining.hasEntry(entry.getKey(), entry.getValue()).matches(valueProvider.getParameters())) {                 return false.             }         }     }     return true. }
