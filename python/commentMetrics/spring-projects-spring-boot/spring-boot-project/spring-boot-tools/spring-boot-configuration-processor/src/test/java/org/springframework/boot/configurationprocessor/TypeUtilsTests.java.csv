commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void resolveTypeDescriptorOnConcreteClass() throws IOException {     process(SimpleGenericProperties.class, (roundEnv, typeUtils) -> {         TypeDescriptor typeDescriptor = typeUtils.resolveTypeDescriptor(roundEnv.getRootElement(SimpleGenericProperties.class)).         assertThat(typeDescriptor.getGenerics().keySet().stream().map(Object::toString)).containsOnly("A", "B", "C").         assertThat(typeDescriptor.resolveGeneric("A")).hasToString(String.class.getName()).         assertThat(typeDescriptor.resolveGeneric("B")).hasToString(Integer.class.getName()).         assertThat(typeDescriptor.resolveGeneric("C")).hasToString(Duration.class.getName()).     }). }
false;public;0;15;;@Test public void resolveTypeDescriptorOnIntermediateClass() throws IOException {     process(AbstractIntermediateGenericProperties.class, (roundEnv, typeUtils) -> {         TypeDescriptor typeDescriptor = typeUtils.resolveTypeDescriptor(roundEnv.getRootElement(AbstractIntermediateGenericProperties.class)).         assertThat(typeDescriptor.getGenerics().keySet().stream().map(Object::toString)).containsOnly("A", "B", "C").         assertThat(typeDescriptor.resolveGeneric("A")).hasToString(String.class.getName()).         assertThat(typeDescriptor.resolveGeneric("B")).hasToString(Integer.class.getName()).         assertThat(typeDescriptor.resolveGeneric("C")).hasToString("C").     }). }
false;public;0;11;;@Test public void resolveTypeDescriptorWithOnlyGenerics() throws IOException {     process(AbstractGenericProperties.class, (roundEnv, typeUtils) -> {         TypeDescriptor typeDescriptor = typeUtils.resolveTypeDescriptor(roundEnv.getRootElement(AbstractGenericProperties.class)).         assertThat(typeDescriptor.getGenerics().keySet().stream().map(Object::toString)).containsOnly("A", "B", "C").     }). }
false;private;2;7;;private void process(Class<?> target, BiConsumer<RoundEnvironmentTester, TypeUtils> consumer) throws IOException {     TestableAnnotationProcessor<TypeUtils> processor = new TestableAnnotationProcessor<>(consumer, TypeUtils::new).     TestCompiler compiler = new TestCompiler(this.temporaryFolder).     compiler.getTask(target).call(processor). }
