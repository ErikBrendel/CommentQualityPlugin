# id;timestamp;commentText;codeText;commentWords;codeWords
TestProject -> public void add(Class<?> type) throws IOException;1507173536;Add source code of given class to this project._@param type the class to add_@throws IOException on IO error;public void add(Class<?> type) throws IOException {_		Assert.assertFalse(getSourceFile(type).exists())__		copySources(type)__	};add,source,code,of,given,class,to,this,project,param,type,the,class,to,add,throws,ioexception,on,io,error;public,void,add,class,type,throws,ioexception,assert,assert,false,get,source,file,type,exists,copy,sources,type
TestProject -> public void add(Class<?> type) throws IOException;1514578213;Add source code of given class to this project._@param type the class to add_@throws IOException on IO error;public void add(Class<?> type) throws IOException {_		Assert.assertFalse(getSourceFile(type).exists())__		copySources(type)__	};add,source,code,of,given,class,to,this,project,param,type,the,class,to,add,throws,ioexception,on,io,error;public,void,add,class,type,throws,ioexception,assert,assert,false,get,source,file,type,exists,copy,sources,type
TestProject -> public void add(Class<?> type) throws IOException;1516215803;Add source code of given class to this project._@param type the class to add_@throws IOException on IO error;public void add(Class<?> type) throws IOException {_		Assert.assertFalse(getSourceFile(type).exists())__		copySources(type)__	};add,source,code,of,given,class,to,this,project,param,type,the,class,to,add,throws,ioexception,on,io,error;public,void,add,class,type,throws,ioexception,assert,assert,false,get,source,file,type,exists,copy,sources,type
TestProject -> public void add(Class<?> type) throws IOException;1550840669;Add source code of given class to this project._@param type the class to add_@throws IOException on IO error;public void add(Class<?> type) throws IOException {_		Assert.assertFalse(getSourceFile(type).exists())__		copySources(type)__	};add,source,code,of,given,class,to,this,project,param,type,the,class,to,add,throws,ioexception,on,io,error;public,void,add,class,type,throws,ioexception,assert,assert,false,get,source,file,type,exists,copy,sources,type
TestProject -> private File getOriginalSourceFile(Class<?> type);1507173536;Find the 'original' source code for given test class. Clients or subclasses should_have no need to know about these. They should work only with the copied source_code.;private File getOriginalSourceFile(Class<?> type) {_		return new File(TestCompiler.SOURCE_FOLDER, TestCompiler.sourcePathFor(type))__	};find,the,original,source,code,for,given,test,class,clients,or,subclasses,should,have,no,need,to,know,about,these,they,should,work,only,with,the,copied,source,code;private,file,get,original,source,file,class,type,return,new,file,test,compiler,test,compiler,source,path,for,type
TestProject -> private File getOriginalSourceFile(Class<?> type);1514578213;Find the 'original' source code for given test class. Clients or subclasses should_have no need to know about these. They should work only with the copied source_code.;private File getOriginalSourceFile(Class<?> type) {_		return new File(TestCompiler.SOURCE_FOLDER, TestCompiler.sourcePathFor(type))__	};find,the,original,source,code,for,given,test,class,clients,or,subclasses,should,have,no,need,to,know,about,these,they,should,work,only,with,the,copied,source,code;private,file,get,original,source,file,class,type,return,new,file,test,compiler,test,compiler,source,path,for,type
TestProject -> private File getOriginalSourceFile(Class<?> type);1516215803;Find the 'original' source code for given test class. Clients or subclasses should_have no need to know about these. They should work only with the copied source_code.;private File getOriginalSourceFile(Class<?> type) {_		return new File(TestCompiler.SOURCE_FOLDER, TestCompiler.sourcePathFor(type))__	};find,the,original,source,code,for,given,test,class,clients,or,subclasses,should,have,no,need,to,know,about,these,they,should,work,only,with,the,copied,source,code;private,file,get,original,source,file,class,type,return,new,file,test,compiler,test,compiler,source,path,for,type
TestProject -> private File getOriginalSourceFile(Class<?> type);1550840669;Find the 'original' source code for given test class. Clients or subclasses should_have no need to know about these. They should work only with the copied source_code.;private File getOriginalSourceFile(Class<?> type) {_		return new File(TestCompiler.SOURCE_FOLDER, TestCompiler.sourcePathFor(type))__	};find,the,original,source,code,for,given,test,class,clients,or,subclasses,should,have,no,need,to,know,about,these,they,should,work,only,with,the,copied,source,code;private,file,get,original,source,file,class,type,return,new,file,test,compiler,test,compiler,source,path,for,type
TestProject -> public void addSourceCode(Class<?> target, InputStream snippetStream) 			throws Exception;1507173536;Add source code at the end of file, just before last '}'_@param target the target_@param snippetStream the snippet stream_@throws Exception if the source cannot be added;public void addSourceCode(Class<?> target, InputStream snippetStream)_			throws Exception {_		File targetFile = getSourceFile(target)__		String contents = getContents(targetFile)__		int insertAt = contents.lastIndexOf('}')__		String additionalSource = FileCopyUtils_				.copyToString(new InputStreamReader(snippetStream))__		contents = contents.substring(0, insertAt) + additionalSource_				+ contents.substring(insertAt)__		putContents(targetFile, contents)__	};add,source,code,at,the,end,of,file,just,before,last,param,target,the,target,param,snippet,stream,the,snippet,stream,throws,exception,if,the,source,cannot,be,added;public,void,add,source,code,class,target,input,stream,snippet,stream,throws,exception,file,target,file,get,source,file,target,string,contents,get,contents,target,file,int,insert,at,contents,last,index,of,string,additional,source,file,copy,utils,copy,to,string,new,input,stream,reader,snippet,stream,contents,contents,substring,0,insert,at,additional,source,contents,substring,insert,at,put,contents,target,file,contents
TestProject -> public void addSourceCode(Class<?> target, InputStream snippetStream) 			throws Exception;1514578213;Add source code at the end of file, just before last '}'_@param target the target_@param snippetStream the snippet stream_@throws Exception if the source cannot be added;public void addSourceCode(Class<?> target, InputStream snippetStream)_			throws Exception {_		File targetFile = getSourceFile(target)__		String contents = getContents(targetFile)__		int insertAt = contents.lastIndexOf('}')__		String additionalSource = FileCopyUtils_				.copyToString(new InputStreamReader(snippetStream))__		contents = contents.substring(0, insertAt) + additionalSource_				+ contents.substring(insertAt)__		putContents(targetFile, contents)__	};add,source,code,at,the,end,of,file,just,before,last,param,target,the,target,param,snippet,stream,the,snippet,stream,throws,exception,if,the,source,cannot,be,added;public,void,add,source,code,class,target,input,stream,snippet,stream,throws,exception,file,target,file,get,source,file,target,string,contents,get,contents,target,file,int,insert,at,contents,last,index,of,string,additional,source,file,copy,utils,copy,to,string,new,input,stream,reader,snippet,stream,contents,contents,substring,0,insert,at,additional,source,contents,substring,insert,at,put,contents,target,file,contents
TestProject -> public void addSourceCode(Class<?> target, InputStream snippetStream) 			throws Exception;1516215803;Add source code at the end of file, just before last '}'_@param target the target_@param snippetStream the snippet stream_@throws Exception if the source cannot be added;public void addSourceCode(Class<?> target, InputStream snippetStream)_			throws Exception {_		File targetFile = getSourceFile(target)__		String contents = getContents(targetFile)__		int insertAt = contents.lastIndexOf('}')__		String additionalSource = FileCopyUtils_				.copyToString(new InputStreamReader(snippetStream))__		contents = contents.substring(0, insertAt) + additionalSource_				+ contents.substring(insertAt)__		putContents(targetFile, contents)__	};add,source,code,at,the,end,of,file,just,before,last,param,target,the,target,param,snippet,stream,the,snippet,stream,throws,exception,if,the,source,cannot,be,added;public,void,add,source,code,class,target,input,stream,snippet,stream,throws,exception,file,target,file,get,source,file,target,string,contents,get,contents,target,file,int,insert,at,contents,last,index,of,string,additional,source,file,copy,utils,copy,to,string,new,input,stream,reader,snippet,stream,contents,contents,substring,0,insert,at,additional,source,contents,substring,insert,at,put,contents,target,file,contents
TestProject -> public void addSourceCode(Class<?> target, InputStream snippetStream) 			throws Exception;1550840669;Add source code at the end of file, just before last '}'_@param target the target_@param snippetStream the snippet stream_@throws Exception if the source cannot be added;public void addSourceCode(Class<?> target, InputStream snippetStream)_			throws Exception {_		File targetFile = getSourceFile(target)__		String contents = getContents(targetFile)__		int insertAt = contents.lastIndexOf('}')__		String additionalSource = FileCopyUtils_				.copyToString(new InputStreamReader(snippetStream))__		contents = contents.substring(0, insertAt) + additionalSource_				+ contents.substring(insertAt)__		putContents(targetFile, contents)__	};add,source,code,at,the,end,of,file,just,before,last,param,target,the,target,param,snippet,stream,the,snippet,stream,throws,exception,if,the,source,cannot,be,added;public,void,add,source,code,class,target,input,stream,snippet,stream,throws,exception,file,target,file,get,source,file,target,string,contents,get,contents,target,file,int,insert,at,contents,last,index,of,string,additional,source,file,copy,utils,copy,to,string,new,input,stream,reader,snippet,stream,contents,contents,substring,0,insert,at,additional,source,contents,substring,insert,at,put,contents,target,file,contents
TestProject -> public void revert(Class<?> type) throws IOException;1507173536;Restore source code of given class to its original contents._@param type the class to revert_@throws IOException on IO error;public void revert(Class<?> type) throws IOException {_		Assert.assertTrue(getSourceFile(type).exists())__		copySources(type)__	};restore,source,code,of,given,class,to,its,original,contents,param,type,the,class,to,revert,throws,ioexception,on,io,error;public,void,revert,class,type,throws,ioexception,assert,assert,true,get,source,file,type,exists,copy,sources,type
TestProject -> public void revert(Class<?> type) throws IOException;1514578213;Restore source code of given class to its original contents._@param type the class to revert_@throws IOException on IO error;public void revert(Class<?> type) throws IOException {_		Assert.assertTrue(getSourceFile(type).exists())__		copySources(type)__	};restore,source,code,of,given,class,to,its,original,contents,param,type,the,class,to,revert,throws,ioexception,on,io,error;public,void,revert,class,type,throws,ioexception,assert,assert,true,get,source,file,type,exists,copy,sources,type
TestProject -> public void revert(Class<?> type) throws IOException;1516215803;Restore source code of given class to its original contents._@param type the class to revert_@throws IOException on IO error;public void revert(Class<?> type) throws IOException {_		Assert.assertTrue(getSourceFile(type).exists())__		copySources(type)__	};restore,source,code,of,given,class,to,its,original,contents,param,type,the,class,to,revert,throws,ioexception,on,io,error;public,void,revert,class,type,throws,ioexception,assert,assert,true,get,source,file,type,exists,copy,sources,type
TestProject -> public void revert(Class<?> type) throws IOException;1550840669;Restore source code of given class to its original contents._@param type the class to revert_@throws IOException on IO error;public void revert(Class<?> type) throws IOException {_		Assert.assertTrue(getSourceFile(type).exists())__		copySources(type)__	};restore,source,code,of,given,class,to,its,original,contents,param,type,the,class,to,revert,throws,ioexception,on,io,error;public,void,revert,class,type,throws,ioexception,assert,assert,true,get,source,file,type,exists,copy,sources,type
TestProject -> public void delete(Class<?> type);1507173536;Delete source file for given class from project._@param type the class to delete;public void delete(Class<?> type) {_		File target = getSourceFile(type)__		target.delete()__		this.sourceFiles.remove(target)__	};delete,source,file,for,given,class,from,project,param,type,the,class,to,delete;public,void,delete,class,type,file,target,get,source,file,type,target,delete,this,source,files,remove,target
TestProject -> public void delete(Class<?> type);1514578213;Delete source file for given class from project._@param type the class to delete;public void delete(Class<?> type) {_		File target = getSourceFile(type)__		target.delete()__		this.sourceFiles.remove(target)__	};delete,source,file,for,given,class,from,project,param,type,the,class,to,delete;public,void,delete,class,type,file,target,get,source,file,type,target,delete,this,source,files,remove,target
TestProject -> public void delete(Class<?> type);1516215803;Delete source file for given class from project._@param type the class to delete;public void delete(Class<?> type) {_		File target = getSourceFile(type)__		target.delete()__		this.sourceFiles.remove(target)__	};delete,source,file,for,given,class,from,project,param,type,the,class,to,delete;public,void,delete,class,type,file,target,get,source,file,type,target,delete,this,source,files,remove,target
TestProject -> public void delete(Class<?> type);1550840669;Delete source file for given class from project._@param type the class to delete;public void delete(Class<?> type) {_		File target = getSourceFile(type)__		target.delete()__		this.sourceFiles.remove(target)__	};delete,source,file,for,given,class,from,project,param,type,the,class,to,delete;public,void,delete,class,type,file,target,get,source,file,type,target,delete,this,source,files,remove,target
TestProject -> public File getOutputFile(String relativePath);1507173536;Retrieve File relative to project's output folder._@param relativePath the relative path_@return the output file;public File getOutputFile(String relativePath) {_		Assert.assertFalse(new File(relativePath).isAbsolute())__		return new File(this.compiler.getOutputLocation(), relativePath)__	};retrieve,file,relative,to,project,s,output,folder,param,relative,path,the,relative,path,return,the,output,file;public,file,get,output,file,string,relative,path,assert,assert,false,new,file,relative,path,is,absolute,return,new,file,this,compiler,get,output,location,relative,path
TestProject -> public File getOutputFile(String relativePath);1514578213;Retrieve File relative to project's output folder._@param relativePath the relative path_@return the output file;public File getOutputFile(String relativePath) {_		Assert.assertFalse(new File(relativePath).isAbsolute())__		return new File(this.compiler.getOutputLocation(), relativePath)__	};retrieve,file,relative,to,project,s,output,folder,param,relative,path,the,relative,path,return,the,output,file;public,file,get,output,file,string,relative,path,assert,assert,false,new,file,relative,path,is,absolute,return,new,file,this,compiler,get,output,location,relative,path
TestProject -> public File getOutputFile(String relativePath);1516215803;Retrieve File relative to project's output folder._@param relativePath the relative path_@return the output file;public File getOutputFile(String relativePath) {_		Assert.assertFalse(new File(relativePath).isAbsolute())__		return new File(this.compiler.getOutputLocation(), relativePath)__	};retrieve,file,relative,to,project,s,output,folder,param,relative,path,the,relative,path,return,the,output,file;public,file,get,output,file,string,relative,path,assert,assert,false,new,file,relative,path,is,absolute,return,new,file,this,compiler,get,output,location,relative,path
TestProject -> public File getOutputFile(String relativePath);1550840669;Retrieve File relative to project's output folder._@param relativePath the relative path_@return the output file;public File getOutputFile(String relativePath) {_		Assert.assertFalse(new File(relativePath).isAbsolute())__		return new File(this.compiler.getOutputLocation(), relativePath)__	};retrieve,file,relative,to,project,s,output,folder,param,relative,path,the,relative,path,return,the,output,file;public,file,get,output,file,string,relative,path,assert,assert,false,new,file,relative,path,is,absolute,return,new,file,this,compiler,get,output,location,relative,path
