commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void basicJar() throws IOException {     assertThat(this.gradleBuild.build("bootBuildInfo", "--stacktrace").task(":bootBuildInfo").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     Properties properties = buildInfoProperties().     assertThat(properties).containsEntry("build.name", this.gradleBuild.getProjectDir().getName()).     assertThat(properties).containsEntry("build.artifact", this.gradleBuild.getProjectDir().getName()).     assertThat(properties).containsEntry("build.group", "com.example").     assertThat(properties).containsEntry("build.version", "1.0"). }
false;public;0;11;;@Test public void jarWithCustomName() throws IOException {     assertThat(this.gradleBuild.build("bootBuildInfo", "--stacktrace").task(":bootBuildInfo").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     Properties properties = buildInfoProperties().     assertThat(properties).containsEntry("build.name", this.gradleBuild.getProjectDir().getName()).     assertThat(properties).containsEntry("build.artifact", "foo").     assertThat(properties).containsEntry("build.group", "com.example").     assertThat(properties).containsEntry("build.version", "1.0"). }
false;public;0;12;;@Test public void basicWar() throws IOException {     assertThat(this.gradleBuild.build("bootBuildInfo", "--stacktrace").task(":bootBuildInfo").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     Properties properties = buildInfoProperties().     assertThat(properties).containsEntry("build.name", this.gradleBuild.getProjectDir().getName()).     assertThat(properties).containsEntry("build.artifact", this.gradleBuild.getProjectDir().getName()).     assertThat(properties).containsEntry("build.group", "com.example").     assertThat(properties).containsEntry("build.version", "1.0"). }
false;public;0;11;;@Test public void warWithCustomName() throws IOException {     assertThat(this.gradleBuild.build("bootBuildInfo", "--stacktrace").task(":bootBuildInfo").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     Properties properties = buildInfoProperties().     assertThat(properties).containsEntry("build.name", this.gradleBuild.getProjectDir().getName()).     assertThat(properties).containsEntry("build.artifact", "foo").     assertThat(properties).containsEntry("build.group", "com.example").     assertThat(properties).containsEntry("build.version", "1.0"). }
false;public;0;14;;@Test public void additionalProperties() throws IOException {     assertThat(this.gradleBuild.build("bootBuildInfo", "--stacktrace").task(":bootBuildInfo").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     Properties properties = buildInfoProperties().     assertThat(properties).containsEntry("build.name", this.gradleBuild.getProjectDir().getName()).     assertThat(properties).containsEntry("build.artifact", this.gradleBuild.getProjectDir().getName()).     assertThat(properties).containsEntry("build.group", "com.example").     assertThat(properties).containsEntry("build.version", "1.0").     assertThat(properties).containsEntry("build.a", "alpha").     assertThat(properties).containsEntry("build.b", "bravo"). }
false;public;0;5;;@Test public void classesDependency() throws IOException {     assertThat(this.gradleBuild.build("classes", "--stacktrace").task(":bootBuildInfo").getOutcome()).isEqualTo(TaskOutcome.SUCCESS). }
false;private;0;13;;private Properties buildInfoProperties() {     File file = new File(this.gradleBuild.getProjectDir(), "build/resources/main/META-INF/build-info.properties").     assertThat(file).isFile().     Properties properties = new Properties().     try (FileReader reader = new FileReader(file)) {         properties.load(reader).         return properties.     } catch (IOException ex) {         throw new RuntimeException(ex).     } }
