commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Before public void createTask() {     try {         this.project = ProjectBuilder.builder().withProjectDir(this.temp.newFolder()).build().         this.project.setDescription("Test project for " + this.taskClass.getSimpleName()).         this.task = configure(this.project.getTasks().create("testArchive", this.taskClass)).     } catch (IOException ex) {         throw new RuntimeException(ex).     } }
false;public;0;12;;@Test public void basicArchiveCreation() throws IOException {     this.task.setMainClassName("com.example.Main").     executeTask().     assertThat(this.task.getArchivePath()).exists().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getManifest().getMainAttributes().getValue("Main-Class")).isEqualTo(this.launcherClass).         assertThat(jarFile.getManifest().getMainAttributes().getValue("Start-Class")).isEqualTo("com.example.Main").     } }
false;public;0;10;;@Test public void classpathJarsArePackagedBeneathLibPath() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.classpath(jarFile("one.jar"), jarFile("two.jar")).     executeTask().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getEntry(this.libPath + "/one.jar")).isNotNull().         assertThat(jarFile.getEntry(this.libPath + "/two.jar")).isNotNull().     } }
false;public;0;16;;@Test public void classpathFoldersArePackagedBeneathClassesPath() throws IOException {     this.task.setMainClassName("com.example.Main").     File classpathFolder = this.temp.newFolder().     File applicationClass = new File(classpathFolder, "com/example/Application.class").     applicationClass.getParentFile().mkdirs().     applicationClass.createNewFile().     this.task.classpath(classpathFolder).     executeTask().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getEntry(this.classesPath + "/com/example/Application.class")).isNotNull().     } }
false;public;0;23;;@Test public void moduleInfoClassIsPackagedInTheRootOfTheArchive() throws IOException {     this.task.setMainClassName("com.example.Main").     File classpathFolder = this.temp.newFolder().     File moduleInfoClass = new File(classpathFolder, "module-info.class").     moduleInfoClass.getParentFile().mkdirs().     moduleInfoClass.createNewFile().     File applicationClass = new File(classpathFolder, "com/example/Application.class").     applicationClass.getParentFile().mkdirs().     applicationClass.createNewFile().     this.task.classpath(classpathFolder).     this.task.execute().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getEntry(this.classesPath + "/com/example/Application.class")).isNotNull().         assertThat(jarFile.getEntry("com/example/Application.class")).isNull().         assertThat(jarFile.getEntry("module-info.class")).isNotNull().         assertThat(jarFile.getEntry(this.classesPath + "/module-info.class")).isNull().     } }
false;public;0;11;;@Test public void classpathCanBeSetUsingAFileCollection() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.classpath(jarFile("one.jar")).     this.task.setClasspath(this.task.getProject().files(jarFile("two.jar"))).     executeTask().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getEntry(this.libPath + "/one.jar")).isNull().         assertThat(jarFile.getEntry(this.libPath + "/two.jar")).isNotNull().     } }
false;public;0;11;;@Test public void classpathCanBeSetUsingAnObject() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.classpath(jarFile("one.jar")).     this.task.setClasspath(jarFile("two.jar")).     executeTask().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getEntry(this.libPath + "/one.jar")).isNull().         assertThat(jarFile.getEntry(this.libPath + "/two.jar")).isNotNull().     } }
false;public;0;9;;@Test public void filesOnTheClasspathThatAreNotZipFilesAreSkipped() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.classpath(this.temp.newFile("test.pom")).     this.task.execute().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getEntry(this.libPath + "/test.pom")).isNull().     } }
false;public;0;11;;@Test public void loaderIsWrittenToTheRootOfTheJar() throws IOException {     this.task.setMainClassName("com.example.Main").     executeTask().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getEntry("org/springframework/boot/loader/LaunchedURLClassLoader.class")).isNotNull().         assertThat(jarFile.getEntry("org/springframework/boot/loader/")).isNotNull().     } }
false;public;0;14;;@Test public void loaderIsWrittenToTheRootOfTheJarWhenUsingThePropertiesLauncher() throws IOException {     this.task.setMainClassName("com.example.Main").     executeTask().     this.task.getManifest().getAttributes().put("Main-Class", "org.springframework.boot.loader.PropertiesLauncher").     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getEntry("org/springframework/boot/loader/LaunchedURLClassLoader.class")).isNotNull().         assertThat(jarFile.getEntry("org/springframework/boot/loader/")).isNotNull().     } }
false;public;0;12;;@Test public void unpackCommentIsAddedToEntryIdentifiedByAPattern() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.classpath(jarFile("one.jar"), jarFile("two.jar")).     this.task.requiresUnpack("**/one.jar").     executeTask().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getEntry(this.libPath + "/one.jar").getComment()).startsWith("UNPACK:").         assertThat(jarFile.getEntry(this.libPath + "/two.jar").getComment()).isNull().     } }
false;public;0;12;;@Test public void unpackCommentIsAddedToEntryIdentifiedByASpec() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.classpath(jarFile("one.jar"), jarFile("two.jar")).     this.task.requiresUnpack((element) -> element.getName().endsWith("two.jar")).     executeTask().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getEntry(this.libPath + "/two.jar").getComment()).startsWith("UNPACK:").         assertThat(jarFile.getEntry(this.libPath + "/one.jar").getComment()).isNull().     } }
false;public;0;20;;@Test public void launchScriptCanBePrepended() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.launchScript().     executeTask().     Map<String, String> properties = new HashMap<>().     properties.put("initInfoProvides", this.task.getBaseName()).     properties.put("initInfoShortDescription", this.project.getDescription()).     properties.put("initInfoDescription", this.project.getDescription()).     assertThat(Files.readAllBytes(this.task.getArchivePath().toPath())).startsWith(new DefaultLaunchScript(null, properties).toByteArray()).     try {         Set<PosixFilePermission> permissions = Files.getPosixFilePermissions(this.task.getArchivePath().toPath()).         assertThat(permissions).contains(PosixFilePermission.OWNER_EXECUTE).     } catch (UnsupportedOperationException ex) {     // Windows, presumably. Continue     } }
false;public;0;11;;@Test public void customLaunchScriptCanBePrepended() throws IOException {     this.task.setMainClassName("com.example.Main").     File customScript = this.temp.newFile("custom.script").     Files.write(customScript.toPath(), Arrays.asList("custom script"), StandardOpenOption.CREATE).     this.task.launchScript((configuration) -> configuration.setScript(customScript)).     executeTask().     assertThat(Files.readAllBytes(this.task.getArchivePath().toPath())).startsWith("custom script".getBytes()). }
false;public;0;16;;@Test public void launchScriptInitInfoPropertiesCanBeCustomized() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.launchScript((configuration) -> {         configuration.getProperties().put("initInfoProvides", "provides").         configuration.getProperties().put("initInfoShortDescription", "short description").         configuration.getProperties().put("initInfoDescription", "description").     }).     executeTask().     byte[] bytes = Files.readAllBytes(this.task.getArchivePath().toPath()).     assertThat(bytes).containsSequence("Provides:          provides".getBytes()).     assertThat(bytes).containsSequence("Short-Description: short description".getBytes()).     assertThat(bytes).containsSequence("Description:       description".getBytes()). }
false;public;0;17;;@Test public void customMainClassInTheManifestIsHonored() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.getManifest().getAttributes().put("Main-Class", "com.example.CustomLauncher").     executeTask().     assertThat(this.task.getArchivePath()).exists().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getManifest().getMainAttributes().getValue("Main-Class")).isEqualTo("com.example.CustomLauncher").         assertThat(jarFile.getManifest().getMainAttributes().getValue("Start-Class")).isEqualTo("com.example.Main").         assertThat(jarFile.getEntry("org/springframework/boot/loader/LaunchedURLClassLoader.class")).isNull().     } }
false;public;0;14;;@Test public void customStartClassInTheManifestIsHonored() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.getManifest().getAttributes().put("Start-Class", "com.example.CustomMain").     executeTask().     assertThat(this.task.getArchivePath()).exists().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getManifest().getMainAttributes().getValue("Main-Class")).isEqualTo(this.launcherClass).         assertThat(jarFile.getManifest().getMainAttributes().getValue("Start-Class")).isEqualTo("com.example.CustomMain").     } }
false;public;0;15;;@Test public void fileTimestampPreservationCanBeDisabled() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.setPreserveFileTimestamps(false).     executeTask().     assertThat(this.task.getArchivePath()).exists().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         Enumeration<JarEntry> entries = jarFile.entries().         while (entries.hasMoreElements()) {             JarEntry entry = entries.nextElement().             assertThat(entry.getTime()).isEqualTo(BootZipCopyAction.CONSTANT_TIME_FOR_ZIP_ENTRIES).         }     } }
false;public;0;20;;@Test public void reproducibleOrderingCanBeEnabled() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.from(this.temp.newFile("bravo.txt"), this.temp.newFile("alpha.txt"), this.temp.newFile("charlie.txt")).     this.task.setReproducibleFileOrder(true).     executeTask().     assertThat(this.task.getArchivePath()).exists().     List<String> textFiles = new ArrayList<>().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         Enumeration<JarEntry> entries = jarFile.entries().         while (entries.hasMoreElements()) {             JarEntry entry = entries.nextElement().             if (entry.getName().endsWith(".txt")) {                 textFiles.add(entry.getName()).             }         }     }     assertThat(textFiles).containsExactly("alpha.txt", "bravo.txt", "charlie.txt"). }
false;public;0;11;;@Test public void devtoolsJarIsExcludedByDefault() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.classpath(this.temp.newFile("spring-boot-devtools-0.1.2.jar")).     executeTask().     assertThat(this.task.getArchivePath()).exists().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getEntry(this.libPath + "/spring-boot-devtools-0.1.2.jar")).isNull().     } }
false;public;0;12;;@Test public void devtoolsJarCanBeIncluded() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.classpath(jarFile("spring-boot-devtools-0.1.2.jar")).     this.task.setExcludeDevtools(false).     executeTask().     assertThat(this.task.getArchivePath()).exists().     try (JarFile jarFile = new JarFile(this.task.getArchivePath())) {         assertThat(jarFile.getEntry(this.libPath + "/spring-boot-devtools-0.1.2.jar")).isNotNull().     } }
false;public;0;20;;@Test public void allEntriesUseUnixPlatformAndUtf8NameEncoding() throws IOException {     this.task.setMainClassName("com.example.Main").     this.task.setMetadataCharset("UTF-8").     File classpathFolder = this.temp.newFolder().     File resource = new File(classpathFolder, "some-resource.xml").     resource.getParentFile().mkdirs().     resource.createNewFile().     this.task.classpath(classpathFolder).     executeTask().     File archivePath = this.task.getArchivePath().     try (ZipFile zip = new ZipFile(archivePath)) {         Enumeration<ZipArchiveEntry> entries = zip.getEntries().         while (entries.hasMoreElements()) {             ZipArchiveEntry entry = entries.nextElement().             assertThat(entry.getPlatform()).isEqualTo(ZipArchiveEntry.PLATFORM_UNIX).             assertThat(entry.getGeneralPurposeBit().usesUTF8ForNames()).isTrue().         }     } }
false;public;0;19;;@Test public void loaderIsWrittenFirstThenApplicationClassesThenLibraries() throws IOException {     this.task.setMainClassName("com.example.Main").     File classpathFolder = this.temp.newFolder().     File applicationClass = new File(classpathFolder, "com/example/Application.class").     applicationClass.getParentFile().mkdirs().     applicationClass.createNewFile().     this.task.classpath(classpathFolder, jarFile("first-library.jar"), jarFile("second-library.jar"), jarFile("third-library.jar")).     this.task.requiresUnpack("second-library.jar").     executeTask().     assertThat(getEntryNames(this.task.getArchivePath())).containsSubsequence("org/springframework/boot/loader/", this.classesPath + "/com/example/Application.class", this.libPath + "/first-library.jar", this.libPath + "/second-library.jar", this.libPath + "/third-library.jar"). }
false;protected;1;9;;protected File jarFile(String name) throws IOException {     File file = this.temp.newFile(name).     try (JarOutputStream jar = new JarOutputStream(new FileOutputStream(file))) {         jar.putNextEntry(new ZipEntry("META-INF/MANIFEST.MF")).         new Manifest().write(jar).         jar.closeEntry().     }     return file. }
false;private;1;6;;private T configure(T task) throws IOException {     AbstractArchiveTask archiveTask = task.     archiveTask.setBaseName("test").     archiveTask.setDestinationDir(this.temp.newFolder()).     return task. }
false;protected,abstract;0;1;;protected abstract void executeTask().
false;protected;0;3;;protected T getTask() {     return this.task. }
false;protected;1;10;;protected List<String> getEntryNames(File file) throws IOException {     List<String> entryNames = new ArrayList<>().     try (JarFile jarFile = new JarFile(file)) {         Enumeration<JarEntry> entries = jarFile.entries().         while (entries.hasMoreElements()) {             entryNames.add(entries.nextElement().getName()).         }     }     return entryNames. }
