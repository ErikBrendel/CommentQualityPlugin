commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void noBootWarTaskWithoutWarPluginApplied() {     assertThat(this.gradleBuild.build("taskExists", "-PtaskName=bootWar").getOutput()).contains("bootWar exists = false"). }
false;public;0;6;;@Test public void applyingWarPluginCreatesBootWarTask() {     assertThat(this.gradleBuild.build("taskExists", "-PtaskName=bootWar", "-PapplyWarPlugin").getOutput()).contains("bootWar exists = true"). }
false;public;0;6;;@Test public void assembleRunsBootWarAndWarIsSkipped() {     BuildResult result = this.gradleBuild.build("assemble").     assertThat(result.task(":bootWar").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(result.task(":war").getOutcome()).isEqualTo(TaskOutcome.SKIPPED). }
false;public;0;11;;@Test public void warAndBootWarCanBothBeBuilt() {     BuildResult result = this.gradleBuild.build("assemble").     assertThat(result.task(":bootWar").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(result.task(":war").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     File buildLibs = new File(this.gradleBuild.getProjectDir(), "build/libs").     assertThat(buildLibs.listFiles()).containsExactlyInAnyOrder(new File(buildLibs, this.gradleBuild.getProjectDir().getName() + ".war"), new File(buildLibs, this.gradleBuild.getProjectDir().getName() + "-boot.war")). }
false;public;0;7;;@Test public void errorMessageIsHelpfulWhenMainClassCannotBeResolved() {     BuildResult result = this.gradleBuild.buildAndFail("build", "-PapplyWarPlugin").     assertThat(result.task(":bootWar").getOutcome()).isEqualTo(TaskOutcome.FAILED).     assertThat(result.getOutput()).contains("Main class name has not been configured and it could not be resolved"). }
