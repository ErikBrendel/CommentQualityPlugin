commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void noBootJarTaskWithoutJavaPluginApplied() {     assertThat(this.gradleBuild.build("taskExists", "-PtaskName=bootJar").getOutput()).contains("bootJar exists = false"). }
false;public;0;6;;@Test public void applyingJavaPluginCreatesBootJarTask() {     assertThat(this.gradleBuild.build("taskExists", "-PtaskName=bootJar", "-PapplyJavaPlugin").getOutput()).contains("bootJar exists = true"). }
false;public;0;5;;@Test public void noBootRunTaskWithoutJavaPluginApplied() {     assertThat(this.gradleBuild.build("taskExists", "-PtaskName=bootRun").getOutput()).contains("bootRun exists = false"). }
false;public;0;6;;@Test public void applyingJavaPluginCreatesBootRunTask() {     assertThat(this.gradleBuild.build("taskExists", "-PtaskName=bootRun", "-PapplyJavaPlugin").getOutput()).contains("bootRun exists = true"). }
false;public;0;6;;@Test public void javaCompileTasksUseUtf8Encoding() {     assertThat(this.gradleBuild.build("javaCompileEncoding", "-PapplyJavaPlugin").getOutput()).contains("compileJava = UTF-8").contains("compileTestJava = UTF-8"). }
false;public;0;6;;@Test public void javaCompileTasksUseParametersCompilerFlagByDefault() {     assertThat(this.gradleBuild.build("javaCompileTasksCompilerArgs").getOutput()).contains("compileJava compiler args: [-parameters]").contains("compileTestJava compiler args: [-parameters]"). }
false;public;0;6;;@Test public void javaCompileTasksUseParametersAndAdditionalCompilerFlags() {     assertThat(this.gradleBuild.build("javaCompileTasksCompilerArgs").getOutput()).contains("compileJava compiler args: [-parameters, -Xlint:all]").contains("compileTestJava compiler args: [-parameters, -Xlint:all]"). }
false;public;0;6;;@Test public void javaCompileTasksCanOverrideDefaultParametersCompilerFlag() {     assertThat(this.gradleBuild.build("javaCompileTasksCompilerArgs").getOutput()).contains("compileJava compiler args: [-Xlint:all]").contains("compileTestJava compiler args: [-Xlint:all]"). }
false;public;0;6;;@Test public void assembleRunsBootJarAndJarIsSkipped() {     BuildResult result = this.gradleBuild.build("assemble").     assertThat(result.task(":bootJar").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(result.task(":jar").getOutcome()).isEqualTo(TaskOutcome.SKIPPED). }
false;public;0;7;;@Test public void errorMessageIsHelpfulWhenMainClassCannotBeResolved() {     BuildResult result = this.gradleBuild.buildAndFail("build", "-PapplyJavaPlugin").     assertThat(result.task(":bootJar").getOutcome()).isEqualTo(TaskOutcome.FAILED).     assertThat(result.getOutput()).contains("Main class name has not been configured and it could not be resolved"). }
false;public;0;11;;@Test public void jarAndBootJarCanBothBeBuilt() {     BuildResult result = this.gradleBuild.build("assemble").     assertThat(result.task(":bootJar").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(result.task(":jar").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     File buildLibs = new File(this.gradleBuild.getProjectDir(), "build/libs").     assertThat(buildLibs.listFiles()).containsExactlyInAnyOrder(new File(buildLibs, this.gradleBuild.getProjectDir().getName() + ".jar"), new File(buildLibs, this.gradleBuild.getProjectDir().getName() + "-boot.jar")). }
false;public;0;17;;@Test public void additionalMetadataLocationsConfiguredWhenProcessorIsPresent() throws IOException {     createMinimalMainSource().     File libs = new File(this.gradleBuild.getProjectDir(), "libs").     libs.mkdirs().     new JarOutputStream(new FileOutputStream(new File(libs, "spring-boot-configuration-processor-1.2.3.jar"))).close().     BuildResult result = this.gradleBuild.build("compileJava").     assertThat(result.task(":compileJava").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(result.getOutput()).contains("compileJava compiler args: [-parameters, -Aorg.springframework.boot." + "configurationprocessor.additionalMetadataLocations=" + new File(this.gradleBuild.getProjectDir(), "src/main/resources").getCanonicalPath()). }
false;public;0;10;;@Test public void additionalMetadataLocationsNotConfiguredWhenProcessorIsAbsent() throws IOException {     createMinimalMainSource().     BuildResult result = this.gradleBuild.build("compileJava").     assertThat(result.task(":compileJava").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(result.getOutput()).contains("compileJava compiler args: [-parameters]"). }
false;private;0;6;;private void createMinimalMainSource() throws IOException {     File examplePackage = new File(this.gradleBuild.getProjectDir(), "src/main/java/com/example").     examplePackage.mkdirs().     new File(examplePackage, "Application.java").createNewFile(). }
