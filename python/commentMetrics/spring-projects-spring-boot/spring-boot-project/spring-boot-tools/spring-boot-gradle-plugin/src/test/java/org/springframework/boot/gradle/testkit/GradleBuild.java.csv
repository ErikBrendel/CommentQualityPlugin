commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Dsl getDsl() {     return this.dsl. }
false;public;0;10;;@Override public void evaluate() throws Throwable {     before().     try {         base.evaluate().     } finally {         after().     } }
false;public;2;21;;@Override public Statement apply(Statement base, Description description) {     URL scriptUrl = findDefaultScript(description).     if (scriptUrl != null) {         script(scriptUrl.getFile()).     }     return this.temp.apply(new Statement() {          @Override         public void evaluate() throws Throwable {             before().             try {                 base.evaluate().             } finally {                 after().             }         }     }, description). }
false;private;1;7;;private URL findDefaultScript(Description description) {     URL scriptUrl = getScriptForTestMethod(description).     if (scriptUrl != null) {         return scriptUrl.     }     return getScriptForTestClass(description.getTestClass()). }
false;private;1;6;;private URL getScriptForTestMethod(Description description) {     String name = description.getTestClass().getSimpleName() + "-" + removeGradleVersion(description.getMethodName()) + this.dsl.getExtension().     return description.getTestClass().getResource(name). }
false;private;1;3;;private String removeGradleVersion(String methodName) {     return GRADLE_VERSION_PATTERN.matcher(methodName).replaceAll("").trim(). }
false;private;1;3;;private URL getScriptForTestClass(Class<?> testClass) {     return testClass.getResource(testClass.getSimpleName() + this.dsl.getExtension()). }
false;private;0;3;;private void before() throws IOException {     this.projectDir = this.temp.newFolder(). }
false;private;0;3;;private void after() {     GradleBuild.this.script = null. }
false;private;0;13;;private List<File> pluginClasspath() {     return Arrays.asList(new File("bin"), new File("build/classes/java/main"), new File("build/resources/main"), new File(pathOfJarContaining(LaunchScript.class)), new File(pathOfJarContaining(ClassVisitor.class)), new File(pathOfJarContaining(DependencyManagementPlugin.class)), new File(pathOfJarContaining(PropertiesKt.class)), new File(pathOfJarContaining(KotlinCompilerRunner.class)), new File(pathOfJarContaining(KotlinPlugin.class)), new File(pathOfJarContaining(KotlinProject.class)), new File(pathOfJarContaining(KotlinGradleSubplugin.class)), new File(pathOfJarContaining(ArchiveEntry.class))). }
false;private;1;3;;private String pathOfJarContaining(Class<?> type) {     return type.getProtectionDomain().getCodeSource().getLocation().getPath(). }
false;public;1;5;;public GradleBuild script(String script) {     this.script = script.endsWith(this.dsl.getExtension()) ? script : script + this.dsl.getExtension().     return this. }
false;public;1;8;;public BuildResult build(String... arguments) {     try {         return prepareRunner(arguments).build().     } catch (Exception ex) {         throw new RuntimeException(ex).     } }
false;public;1;8;;public BuildResult buildAndFail(String... arguments) {     try {         return prepareRunner(arguments).buildAndFail().     } catch (Exception ex) {         throw new RuntimeException(ex).     } }
false;public;1;27;;public GradleRunner prepareRunner(String... arguments) throws IOException {     String scriptContent = FileCopyUtils.copyToString(new FileReader(this.script)).replace("{version}", getBootVersion()).replace("{dependency-management-plugin-version}", getDependencyManagementPluginVersion()).     FileCopyUtils.copy(scriptContent, new FileWriter(new File(this.projectDir, "build" + this.dsl.getExtension()))).     FileSystemUtils.copyRecursively(new File("src/test/resources/repository"), new File(this.projectDir, "repository")).     GradleRunner gradleRunner = GradleRunner.create().withProjectDir(this.projectDir).withPluginClasspath(pluginClasspath()).     if (this.dsl != Dsl.KOTLIN) {         // see https://github.com/gradle/gradle/issues/6862         gradleRunner.withDebug(true).     }     if (this.gradleVersion != null) {         gradleRunner.withGradleVersion(this.gradleVersion).     } else if (this.dsl == Dsl.KOTLIN) {         gradleRunner.withGradleVersion("4.10.3").     }     List<String> allArguments = new ArrayList<>().     allArguments.add("-PbootVersion=" + getBootVersion()).     allArguments.add("--stacktrace").     allArguments.addAll(Arrays.asList(arguments)).     return gradleRunner.withArguments(allArguments). }
false;public;0;3;;public File getProjectDir() {     return this.projectDir. }
false;public;1;3;;public void setProjectDir(File projectDir) {     this.projectDir = projectDir. }
false;public;1;4;;public GradleBuild gradleVersion(String version) {     this.gradleVersion = version.     return this. }
false;public;0;3;;public String getGradleVersion() {     return this.gradleVersion. }
false;private,static;0;3;;private static String getBootVersion() {     return "TEST-SNAPSHOT". }
false;private,static;0;14;;private static String getDependencyManagementPluginVersion() {     try {         URL location = DependencyManagementExtension.class.getProtectionDomain().getCodeSource().getLocation().         try (JarFile jar = new JarFile(new File(location.toURI()))) {             return jar.getManifest().getMainAttributes().getValue("Implementation-Version").         }     } catch (Exception ex) {         throw new IllegalStateException("Failed to find dependency management plugin version", ex).     } }
