commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void basicExecution() throws IOException {     copyApplication().     new File(this.gradleBuild.getProjectDir(), "src/main/resources").mkdirs().     BuildResult result = this.gradleBuild.build("bootRun").     assertThat(result.task(":bootRun").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(result.getOutput()).contains("1. " + canonicalPathOf("build/classes/java/main")).     assertThat(result.getOutput()).contains("2. " + canonicalPathOf("build/resources/main")).     assertThat(result.getOutput()).doesNotContain(canonicalPathOf("src/main/resources")). }
false;public;0;12;;@Test public void sourceResourcesCanBeUsed() throws IOException {     copyApplication().     BuildResult result = this.gradleBuild.build("bootRun").     assertThat(result.task(":bootRun").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(result.getOutput()).contains("1. " + canonicalPathOf("src/main/resources")).     assertThat(result.getOutput()).contains("2. " + canonicalPathOf("build/classes/java/main")).     assertThat(result.getOutput()).doesNotContain(canonicalPathOf("build/resources/main")). }
false;public;0;8;;@Test public void springBootExtensionMainClassNameIsUsed() throws IOException {     BuildResult result = this.gradleBuild.build("echoMainClassName").     assertThat(result.task(":echoMainClassName").getOutcome()).isEqualTo(TaskOutcome.UP_TO_DATE).     assertThat(result.getOutput()).contains("Main class name = com.example.CustomMainClass"). }
false;public;0;8;;@Test public void applicationPluginMainClassNameIsUsed() throws IOException {     BuildResult result = this.gradleBuild.build("echoMainClassName").     assertThat(result.task(":echoMainClassName").getOutcome()).isEqualTo(TaskOutcome.UP_TO_DATE).     assertThat(result.getOutput()).contains("Main class name = com.example.CustomMainClass"). }
false;public;0;9;;@Test public void applicationPluginMainClassNameIsNotUsedWhenItIsNull() throws IOException {     copyApplication().     BuildResult result = this.gradleBuild.build("echoMainClassName").     assertThat(result.task(":echoMainClassName").getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(result.getOutput()).contains("Main class name = com.example.BootRunApplication"). }
false;public;0;8;;@Test public void applicationPluginJvmArgumentsAreUsed() throws IOException {     BuildResult result = this.gradleBuild.build("echoJvmArguments").     assertThat(result.task(":echoJvmArguments").getOutcome()).isEqualTo(TaskOutcome.UP_TO_DATE).     assertThat(result.getOutput()).contains("JVM arguments = [-Dcom.foo=bar, -Dcom.bar=baz]"). }
false;private;0;6;;private void copyApplication() throws IOException {     File output = new File(this.gradleBuild.getProjectDir(), "src/main/java/com/example").     output.mkdirs().     FileSystemUtils.copyRecursively(new File("src/test/java/com/example"), output). }
false;private;1;3;;private String canonicalPathOf(String path) throws IOException {     return new File(this.gradleBuild.getProjectDir(), path).getCanonicalPath(). }
