commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void basicBuildInfo() throws IOException {     this.gradleBuild.script("src/main/gradle/integrating-with-actuator/build-info-basic").build("bootBuildInfo").     assertThat(new File(this.gradleBuild.getProjectDir(), "build/resources/main/META-INF/build-info.properties")).isFile(). }
false;public;0;14;;@Test public void buildInfoCustomValues() throws IOException {     this.gradleBuild.script("src/main/gradle/integrating-with-actuator/build-info-custom-values").build("bootBuildInfo").     File file = new File(this.gradleBuild.getProjectDir(), "build/resources/main/META-INF/build-info.properties").     assertThat(file).isFile().     Properties properties = buildInfoProperties(file).     assertThat(properties).containsEntry("build.artifact", "example-app").     assertThat(properties).containsEntry("build.version", "1.2.3").     assertThat(properties).containsEntry("build.group", "com.example").     assertThat(properties).containsEntry("build.name", "Example application"). }
false;public;0;12;;@Test public void buildInfoAdditional() throws IOException {     this.gradleBuild.script("src/main/gradle/integrating-with-actuator/build-info-additional").build("bootBuildInfo").     File file = new File(this.gradleBuild.getProjectDir(), "build/resources/main/META-INF/build-info.properties").     assertThat(file).isFile().     Properties properties = buildInfoProperties(file).     assertThat(properties).containsEntry("build.a", "alpha").     assertThat(properties).containsEntry("build.b", "bravo"). }
false;private;1;11;;private Properties buildInfoProperties(File file) {     assertThat(file).isFile().     Properties properties = new Properties().     try (FileReader reader = new FileReader(file)) {         properties.load(reader).         return properties.     } catch (IOException ex) {         throw new RuntimeException(ex).     } }
