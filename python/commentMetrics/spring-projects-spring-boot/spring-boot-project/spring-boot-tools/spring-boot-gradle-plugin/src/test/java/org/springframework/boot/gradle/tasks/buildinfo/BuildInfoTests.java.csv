commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void basicExecution() {     Properties properties = buildInfoProperties(createTask(createProject("test"))).     assertThat(properties).containsKey("build.time").     assertThat(properties).containsEntry("build.artifact", "unspecified").     assertThat(properties).containsEntry("build.group", "").     assertThat(properties).containsEntry("build.name", "test").     assertThat(properties).containsEntry("build.version", "unspecified"). }
false;public;0;6;;@Test public void customArtifactIsReflectedInProperties() {     BuildInfo task = createTask(createProject("test")).     task.getProperties().setArtifact("custom").     assertThat(buildInfoProperties(task)).containsEntry("build.artifact", "custom"). }
false;public;0;6;;@Test public void projectGroupIsReflectedInProperties() {     BuildInfo task = createTask(createProject("test")).     task.getProject().setGroup("com.example").     assertThat(buildInfoProperties(task)).containsEntry("build.group", "com.example"). }
false;public;0;6;;@Test public void customGroupIsReflectedInProperties() {     BuildInfo task = createTask(createProject("test")).     task.getProperties().setGroup("com.example").     assertThat(buildInfoProperties(task)).containsEntry("build.group", "com.example"). }
false;public;0;6;;@Test public void customNameIsReflectedInProperties() {     BuildInfo task = createTask(createProject("test")).     task.getProperties().setName("Example").     assertThat(buildInfoProperties(task)).containsEntry("build.name", "Example"). }
false;public;0;6;;@Test public void projectVersionIsReflectedInProperties() {     BuildInfo task = createTask(createProject("test")).     task.getProject().setVersion("1.2.3").     assertThat(buildInfoProperties(task)).containsEntry("build.version", "1.2.3"). }
false;public;0;6;;@Test public void customVersionIsReflectedInProperties() {     BuildInfo task = createTask(createProject("test")).     task.getProperties().setVersion("2.3.4").     assertThat(buildInfoProperties(task)).containsEntry("build.version", "2.3.4"). }
false;public;0;6;;@Test public void timeIsSetInProperties() {     BuildInfo task = createTask(createProject("test")).     assertThat(buildInfoProperties(task)).containsEntry("build.time", DateTimeFormatter.ISO_INSTANT.format(task.getProperties().getTime())). }
false;public;0;6;;@Test public void timeCanBeRemovedFromProperties() {     BuildInfo task = createTask(createProject("test")).     task.getProperties().setTime(null).     assertThat(buildInfoProperties(task)).doesNotContainKey("build.time"). }
false;public;0;8;;@Test public void timeCanBeCustomizedInProperties() {     Instant now = Instant.now().     BuildInfo task = createTask(createProject("test")).     task.getProperties().setTime(now).     assertThat(buildInfoProperties(task)).containsEntry("build.time", DateTimeFormatter.ISO_INSTANT.format(now)). }
false;public;0;8;;@Test public void additionalPropertiesAreReflectedInProperties() {     BuildInfo task = createTask(createProject("test")).     task.getProperties().getAdditional().put("a", "alpha").     task.getProperties().getAdditional().put("b", "bravo").     assertThat(buildInfoProperties(task)).containsEntry("build.a", "alpha").     assertThat(buildInfoProperties(task)).containsEntry("build.b", "bravo"). }
false;private;1;10;;private Project createProject(String projectName) {     try {         File projectDir = this.temp.newFolder(projectName).         return ProjectBuilder.builder().withProjectDir(projectDir).withName(projectName).build().     } catch (IOException ex) {         throw new RuntimeException(ex).     } }
false;private;1;3;;private BuildInfo createTask(Project project) {     return project.getTasks().create("testBuildInfo", BuildInfo.class). }
false;private;1;5;;private Properties buildInfoProperties(BuildInfo task) {     task.generateBuildProperties().     return buildInfoProperties(new File(task.getDestinationDir(), "build-info.properties")). }
false;private;1;11;;private Properties buildInfoProperties(File file) {     assertThat(file).isFile().     Properties properties = new Properties().     try (FileReader reader = new FileReader(file)) {         properties.load(reader).         return properties.     } catch (IOException ex) {         throw new RuntimeException(ex).     } }
