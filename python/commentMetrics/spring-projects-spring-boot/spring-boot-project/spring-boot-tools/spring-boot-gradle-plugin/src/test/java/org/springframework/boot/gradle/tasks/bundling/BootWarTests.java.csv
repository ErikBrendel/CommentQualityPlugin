commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void providedClasspathJarsArePackagedInWebInfLibProvided() throws IOException {     getTask().setMainClassName("com.example.Main").     getTask().providedClasspath(jarFile("one.jar"), jarFile("two.jar")).     executeTask().     try (JarFile jarFile = new JarFile(getTask().getArchivePath())) {         assertThat(jarFile.getEntry("WEB-INF/lib-provided/one.jar")).isNotNull().         assertThat(jarFile.getEntry("WEB-INF/lib-provided/two.jar")).isNotNull().     } }
false;public;0;11;;@Test public void providedClasspathCanBeSetUsingAFileCollection() throws IOException {     getTask().setMainClassName("com.example.Main").     getTask().providedClasspath(jarFile("one.jar")).     getTask().setProvidedClasspath(getTask().getProject().files(jarFile("two.jar"))).     executeTask().     try (JarFile jarFile = new JarFile(getTask().getArchivePath())) {         assertThat(jarFile.getEntry("WEB-INF/lib-provided/one.jar")).isNull().         assertThat(jarFile.getEntry("WEB-INF/lib-provided/two.jar")).isNotNull().     } }
false;public;0;11;;@Test public void providedClasspathCanBeSetUsingAnObject() throws IOException {     getTask().setMainClassName("com.example.Main").     getTask().providedClasspath(jarFile("one.jar")).     getTask().setProvidedClasspath(jarFile("two.jar")).     executeTask().     try (JarFile jarFile = new JarFile(getTask().getArchivePath())) {         assertThat(jarFile.getEntry("WEB-INF/lib-provided/one.jar")).isNull().         assertThat(jarFile.getEntry("WEB-INF/lib-provided/two.jar")).isNotNull().     } }
false;public;0;13;;@Test public void devtoolsJarIsExcludedByDefaultWhenItsOnTheProvidedClasspath() throws IOException {     getTask().setMainClassName("com.example.Main").     getTask().providedClasspath(this.temp.newFile("spring-boot-devtools-0.1.2.jar")).     executeTask().     assertThat(getTask().getArchivePath()).exists().     try (JarFile jarFile = new JarFile(getTask().getArchivePath())) {         assertThat(jarFile.getEntry("WEB-INF/lib-provided/spring-boot-devtools-0.1.2.jar")).isNull().     } }
false;public;0;14;;@Test public void devtoolsJarCanBeIncludedWhenItsOnTheProvidedClasspath() throws IOException {     getTask().setMainClassName("com.example.Main").     getTask().providedClasspath(jarFile("spring-boot-devtools-0.1.2.jar")).     getTask().setExcludeDevtools(false).     executeTask().     assertThat(getTask().getArchivePath()).exists().     try (JarFile jarFile = new JarFile(getTask().getArchivePath())) {         assertThat(jarFile.getEntry("WEB-INF/lib-provided/spring-boot-devtools-0.1.2.jar")).isNotNull().     } }
false;public;0;16;;@Test public void webappResourcesInDirectoriesThatOverlapWithLoaderCanBePackaged() throws IOException {     File webappFolder = this.temp.newFolder("src", "main", "webapp").     File orgFolder = new File(webappFolder, "org").     orgFolder.mkdir().     new File(orgFolder, "foo.txt").createNewFile().     getTask().from(webappFolder).     getTask().setMainClassName("com.example.Main").     executeTask().     assertThat(getTask().getArchivePath()).exists().     try (JarFile jarFile = new JarFile(getTask().getArchivePath())) {         assertThat(jarFile.getEntry("org/")).isNotNull().         assertThat(jarFile.getEntry("org/foo.txt")).isNotNull().     } }
false;public;0;9;;@Test public void libProvidedEntriesAreWrittenAfterLibEntries() throws IOException {     getTask().setMainClassName("com.example.Main").     getTask().classpath(jarFile("library.jar")).     getTask().providedClasspath(jarFile("provided-library.jar")).     executeTask().     assertThat(getEntryNames(getTask().getArchivePath())).containsSubsequence("WEB-INF/lib/library.jar", "WEB-INF/lib-provided/provided-library.jar"). }
false;protected;0;4;;@Override protected void executeTask() {     getTask().copy(). }
