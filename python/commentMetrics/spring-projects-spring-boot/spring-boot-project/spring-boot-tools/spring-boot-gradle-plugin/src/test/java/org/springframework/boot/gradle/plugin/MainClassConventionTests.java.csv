commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void createConvention() throws IOException {     this.project = ProjectBuilder.builder().withProjectDir(this.temp.newFolder()).build().     this.convention = new MainClassConvention(this.project, () -> null). }
false;public;0;6;;@Test public void mainClassNameProjectPropertyIsUsed() throws Exception {     this.project.getExtensions().getByType(ExtraPropertiesExtension.class).set("mainClassName", "com.example.MainClass").     assertThat(this.convention.call()).isEqualTo("com.example.MainClass"). }
false;public;0;7;;@Test public void springBootExtensionMainClassNameIsUsed() throws Exception {     SpringBootExtension extension = this.project.getExtensions().create("springBoot", SpringBootExtension.class, this.project).     extension.setMainClassName("com.example.MainClass").     assertThat(this.convention.call()).isEqualTo("com.example.MainClass"). }
false;public;0;11;;@Test public void springBootExtensionMainClassNameIsUsedInPreferenceToMainClassNameProjectProperty() throws Exception {     this.project.getExtensions().getByType(ExtraPropertiesExtension.class).set("mainClassName", "com.example.ProjectPropertyMainClass").     SpringBootExtension extension = this.project.getExtensions().create("springBoot", SpringBootExtension.class, this.project).     extension.setMainClassName("com.example.SpringBootExtensionMainClass").     assertThat(this.convention.call()).isEqualTo("com.example.SpringBootExtensionMainClass"). }
