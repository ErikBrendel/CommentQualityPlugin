commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void basicBuild() throws InvalidRunnerConfigurationException, UnexpectedBuildFailure, IOException {     assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS). }
false;public;0;14;;@Test public void reproducibleArchive() throws InvalidRunnerConfigurationException, UnexpectedBuildFailure, IOException, InterruptedException {     assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     File jar = new File(this.gradleBuild.getProjectDir(), "build/libs").listFiles()[0].     String firstHash = FileUtils.sha1Hash(jar).     Thread.sleep(1500).     assertThat(this.gradleBuild.build("clean", this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     String secondHash = FileUtils.sha1Hash(jar).     assertThat(firstHash).isEqualTo(secondHash). }
false;public;0;8;;@Test public void upToDateWhenBuiltTwice() throws InvalidRunnerConfigurationException, UnexpectedBuildFailure, IOException {     assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.UP_TO_DATE). }
false;public;0;10;;@Test public void upToDateWhenBuiltTwiceWithLaunchScriptIncluded() throws InvalidRunnerConfigurationException, UnexpectedBuildFailure, IOException {     assertThat(this.gradleBuild.build("-PincludeLaunchScript=true", this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(this.gradleBuild.build("-PincludeLaunchScript=true", this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.UP_TO_DATE). }
false;public;0;7;;@Test public void notUpToDateWhenLaunchScriptWasNotIncludedAndThenIsIncluded() {     assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(this.gradleBuild.build("-PincludeLaunchScript=true", this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS). }
false;public;0;7;;@Test public void notUpToDateWhenLaunchScriptWasIncludedAndThenIsNotIncluded() {     assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(this.gradleBuild.build("-PincludeLaunchScript=true", this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS). }
false;public;0;9;;@Test public void notUpToDateWhenLaunchScriptPropertyChanges() {     assertThat(this.gradleBuild.build("-PincludeLaunchScript=true", "-PlaunchScriptProperty=foo", this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     assertThat(this.gradleBuild.build("-PincludeLaunchScript=true", "-PlaunchScriptProperty=bar", this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS). }
false;public;0;11;;@Test public void applicationPluginMainClassNameIsUsed() throws IOException {     assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     try (JarFile jarFile = new JarFile(new File(this.gradleBuild.getProjectDir(), "build/libs").listFiles()[0])) {         assertThat(jarFile.getManifest().getMainAttributes().getValue("Start-Class")).isEqualTo("com.example.CustomMain").     } }
false;public;0;11;;@Test public void springBootExtensionMainClassNameIsUsed() throws IOException {     assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS).     try (JarFile jarFile = new JarFile(new File(this.gradleBuild.getProjectDir(), "build/libs").listFiles()[0])) {         assertThat(jarFile.getManifest().getMainAttributes().getValue("Start-Class")).isEqualTo("com.example.CustomMain").     } }
false;public;0;5;;@Test public void duplicatesAreHandledGracefully() throws IOException {     assertThat(this.gradleBuild.build(this.taskName).task(":" + this.taskName).getOutcome()).isEqualTo(TaskOutcome.SUCCESS). }
