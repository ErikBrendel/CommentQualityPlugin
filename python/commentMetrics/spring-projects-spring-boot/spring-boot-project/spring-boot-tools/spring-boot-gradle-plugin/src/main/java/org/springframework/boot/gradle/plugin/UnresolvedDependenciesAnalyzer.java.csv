commented;modifiers;parameterAmount;loc;comment;code
false;;1;5;;void analyze(Set<UnresolvedDependency> unresolvedDependencies) {     this.dependenciesWithNoVersion = unresolvedDependencies.stream().map((unresolvedDependency) -> unresolvedDependency.getSelector()).filter(this::hasNoVersion).collect(Collectors.toSet()). }
false;;1;14;;void buildFinished(Project project) {     if (!this.dependenciesWithNoVersion.isEmpty() && !project.getPlugins().hasPlugin(DependencyManagementPlugin.class)) {         StringBuilder message = new StringBuilder().         message.append("\nDuring the build, one or more dependencies that were " + "declared without a version failed to resolve:\n").         this.dependenciesWithNoVersion.forEach((dependency) -> message.append("    ").append(dependency).append("\n")).         message.append("\nDid you forget to apply the " + "io.spring.dependency-management plugin to the ").         message.append(project.getName()).append(" project?\n").         logger.warn(message.toString()).     } }
false;private;1;4;;private boolean hasNoVersion(ModuleVersionSelector selector) {     String version = selector.getVersion().     return version == null || version.trim().isEmpty(). }
