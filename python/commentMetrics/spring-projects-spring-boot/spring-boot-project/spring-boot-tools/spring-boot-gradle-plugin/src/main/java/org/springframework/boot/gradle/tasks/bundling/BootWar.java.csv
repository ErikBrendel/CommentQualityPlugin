commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void copy() {     this.support.configureManifest(this, getMainClassName()).     super.copy(). }
false;protected;0;4;;@Override protected CopyAction createCopyAction() {     return this.support.createCopyAction(this). }
false;public;0;11;;@Override public String getMainClassName() {     if (this.mainClassName == null) {         String manifestStartClass = (String) getManifest().getAttributes().get("Start-Class").         if (manifestStartClass != null) {             setMainClassName(manifestStartClass).         }     }     return this.mainClassName. }
false;public;1;4;;@Override public void setMainClassName(String mainClass) {     this.mainClassName = mainClass. }
false;public;1;4;;@Override public void requiresUnpack(String... patterns) {     this.support.requiresUnpack(patterns). }
false;public;1;4;;@Override public void requiresUnpack(Spec<FileTreeElement> spec) {     this.support.requiresUnpack(spec). }
false;public;0;4;;@Override public LaunchScriptConfiguration getLaunchScript() {     return this.support.getLaunchScript(). }
false;public;0;4;;@Override public void launchScript() {     enableLaunchScriptIfNecessary(). }
false;public;1;4;;@Override public void launchScript(Action<LaunchScriptConfiguration> action) {     action.execute(enableLaunchScriptIfNecessary()). }
true;public;0;5;/**  * Returns the provided classpath, the contents of which will be included in the  * {@code WEB-INF/lib-provided} directory of the war.  * @return the provided classpath  */ ;/**  * Returns the provided classpath, the contents of which will be included in the  * {@code WEB-INF/lib-provided} directory of the war.  * @return the provided classpath  */ @Optional @Classpath public FileCollection getProvidedClasspath() {     return this.providedClasspath. }
true;public;1;6;/**  * Adds files to the provided classpath to include in the {@code WEB-INF/lib-provided}  * directory of the war. The given {@code classpath} is evaluated as per  * {@link Project#files(Object...)}.  * @param classpath the additions to the classpath  */ ;/**  * Adds files to the provided classpath to include in the {@code WEB-INF/lib-provided}  * directory of the war. The given {@code classpath} is evaluated as per  * {@link Project#files(Object...)}.  * @param classpath the additions to the classpath  */ public void providedClasspath(Object... classpath) {     FileCollection existingClasspath = this.providedClasspath.     this.providedClasspath = getProject().files((existingClasspath != null) ? existingClasspath : Collections.emptyList(), classpath). }
true;public;1;3;/**  * Sets the provided classpath to include in the {@code WEB-INF/lib-provided}  * directory of the war.  * @param classpath the classpath  * @since 2.0.7  */ ;/**  * Sets the provided classpath to include in the {@code WEB-INF/lib-provided}  * directory of the war.  * @param classpath the classpath  * @since 2.0.7  */ public void setProvidedClasspath(FileCollection classpath) {     this.providedClasspath = getProject().files(classpath). }
true;public;1;3;/**  * Sets the provided classpath to include in the {@code WEB-INF/lib-provided}  * directory of the war. The given {@code classpath} is evaluated as per  * {@link Project#files(Object...)}.  * @param classpath the classpath  * @since 2.0.7  */ ;/**  * Sets the provided classpath to include in the {@code WEB-INF/lib-provided}  * directory of the war. The given {@code classpath} is evaluated as per  * {@link Project#files(Object...)}.  * @param classpath the classpath  * @since 2.0.7  */ public void setProvidedClasspath(Object classpath) {     this.providedClasspath = getProject().files(classpath). }
false;public;0;4;;@Override public boolean isExcludeDevtools() {     return this.support.isExcludeDevtools(). }
false;public;1;4;;@Override public void setExcludeDevtools(boolean excludeDevtools) {     this.support.setExcludeDevtools(excludeDevtools). }
true;protected;1;8;/**  * Returns the {@link ZipCompression} that should be used when adding the file  * represented by the given {@code details} to the jar.  * <p>  * By default, any file in {@code WEB-INF/lib/} or {@code WEB-INF/lib-provided/} is  * stored and all other files are deflated.  * @param details the details  * @return the compression to use  */ ;/**  * Returns the {@link ZipCompression} that should be used when adding the file  * represented by the given {@code details} to the jar.  * <p>  * By default, any file in {@code WEB-INF/lib/} or {@code WEB-INF/lib-provided/} is  * stored and all other files are deflated.  * @param details the details  * @return the compression to use  */ protected ZipCompression resolveZipCompression(FileCopyDetails details) {     String relativePath = details.getRelativePath().getPathString().     if (relativePath.startsWith("WEB-INF/lib/") || relativePath.startsWith("WEB-INF/lib-provided/")) {         return ZipCompression.STORED.     }     return ZipCompression.DEFLATED. }
false;private;0;8;;private LaunchScriptConfiguration enableLaunchScriptIfNecessary() {     LaunchScriptConfiguration launchScript = this.support.getLaunchScript().     if (launchScript == null) {         launchScript = new LaunchScriptConfiguration(this).         this.support.setLaunchScript(launchScript).     }     return launchScript. }
