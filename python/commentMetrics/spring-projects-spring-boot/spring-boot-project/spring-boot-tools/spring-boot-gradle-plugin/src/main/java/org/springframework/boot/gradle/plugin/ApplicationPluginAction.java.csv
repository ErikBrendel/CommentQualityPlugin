commented;modifiers;parameterAmount;loc;comment;code
false;public;1;41;;@Override public void execute(Project project) {     ApplicationPluginConvention applicationConvention = project.getConvention().getPlugin(ApplicationPluginConvention.class).     DistributionContainer distributions = project.getExtensions().getByType(DistributionContainer.class).     Distribution distribution = distributions.create("boot").     if (distribution instanceof IConventionAware) {         ((IConventionAware) distribution).getConventionMapping().map("baseName", () -> applicationConvention.getApplicationName() + "-boot").     }     CreateBootStartScripts bootStartScripts = project.getTasks().create("bootStartScripts", CreateBootStartScripts.class).     bootStartScripts.setDescription("Generates OS-specific start scripts to run the" + " project as a Spring Boot application.").     ((TemplateBasedScriptGenerator) bootStartScripts.getUnixStartScriptGenerator()).setTemplate(project.getResources().getText().fromString(loadResource("/unixStartScript.txt"))).     ((TemplateBasedScriptGenerator) bootStartScripts.getWindowsStartScriptGenerator()).setTemplate(project.getResources().getText().fromString(loadResource("/windowsStartScript.txt"))).     project.getConfigurations().all((configuration) -> {         if ("bootArchives".equals(configuration.getName())) {             CopySpec libCopySpec = project.copySpec().into("lib").from((Callable<FileCollection>) () -> configuration.getArtifacts().getFiles()).             libCopySpec.setFileMode(0644).             distribution.getContents().with(libCopySpec).             bootStartScripts.setClasspath(configuration.getArtifacts().getFiles()).         }     }).     bootStartScripts.getConventionMapping().map("outputDir", () -> new File(project.getBuildDir(), "bootScripts")).     bootStartScripts.getConventionMapping().map("applicationName", applicationConvention::getApplicationName).     bootStartScripts.getConventionMapping().map("defaultJvmOpts", applicationConvention::getApplicationDefaultJvmArgs).     CopySpec binCopySpec = project.copySpec().into("bin").from(bootStartScripts).     binCopySpec.setFileMode(0755).     distribution.getContents().with(binCopySpec). }
false;public;0;4;;@Override public Class<? extends Plugin<Project>> getPluginClass() {     return ApplicationPlugin.class. }
false;private;1;15;;private String loadResource(String name) {     try (InputStreamReader reader = new InputStreamReader(getClass().getResourceAsStream(name))) {         char[] buffer = new char[4096].         int read = 0.         StringWriter writer = new StringWriter().         while ((read = reader.read(buffer)) > 0) {             writer.write(buffer, 0, read).         }         return writer.toString().     } catch (IOException ex) {         throw new GradleException("Failed to read '" + name + "'", ex).     } }
