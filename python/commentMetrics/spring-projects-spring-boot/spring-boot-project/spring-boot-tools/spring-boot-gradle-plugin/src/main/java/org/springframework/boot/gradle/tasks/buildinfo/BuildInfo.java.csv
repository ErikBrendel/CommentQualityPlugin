commented;modifiers;parameterAmount;loc;comment;code
true;public;0;16;/**  * Generates the {@code build-info.properties} file in the configured  * {@link #setDestinationDir(File) destination}.  */ ;/**  * Generates the {@code build-info.properties} file in the configured  * {@link #setDestinationDir(File) destination}.  */ @TaskAction public void generateBuildProperties() {     try {         new BuildPropertiesWriter(new File(getDestinationDir(), "build-info.properties")).writeBuildProperties(new ProjectDetails(this.properties.getGroup(), (this.properties.getArtifact() != null) ? this.properties.getArtifact() : "unspecified", this.properties.getVersion(), this.properties.getName(), this.properties.getTime(), coerceToStringValues(this.properties.getAdditional()))).     } catch (IOException ex) {         throw new TaskExecutionException(this, ex).     } }
true;public;0;5;/**  * Returns the directory to which the {@code build-info.properties} file will be  * written. Defaults to the {@link Project#getBuildDir() Project's build directory}.  * @return the destination directory  */ ;/**  * Returns the directory to which the {@code build-info.properties} file will be  * written. Defaults to the {@link Project#getBuildDir() Project's build directory}.  * @return the destination directory  */ @OutputDirectory public File getDestinationDir() {     return (this.destinationDir != null) ? this.destinationDir : getProject().getBuildDir(). }
true;public;1;3;/**  * Sets the directory to which the {@code build-info.properties} file will be written.  * @param destinationDir the destination directory  */ ;/**  * Sets the directory to which the {@code build-info.properties} file will be written.  * @param destinationDir the destination directory  */ public void setDestinationDir(File destinationDir) {     this.destinationDir = destinationDir. }
true;public;0;4;/**  * Returns the {@link BuildInfoProperties properties} that will be included in the  * {@code build-info.properties} file.  * @return the properties  */ ;/**  * Returns the {@link BuildInfoProperties properties} that will be included in the  * {@code build-info.properties} file.  * @return the properties  */ @Input public BuildInfoProperties getProperties() {     return this.properties. }
true;public;1;3;/**  * Executes the given {@code action} on the {@link #getProperties()} properties.  * @param action the action  */ ;/**  * Executes the given {@code action} on the {@link #getProperties()} properties.  * @param action the action  */ public void properties(Action<BuildInfoProperties> action) {     action.execute(this.properties). }
false;private;1;5;;private Map<String, String> coerceToStringValues(Map<String, Object> input) {     Map<String, String> output = new HashMap<>().     input.forEach((key, value) -> output.put(key, value.toString())).     return output. }
