commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Class<? extends Plugin<? extends Project>> getPluginClass() {     return WarPlugin.class. }
false;public;1;14;;@Override public void execute(Project project) {     project.getTasks().getByName(WarPlugin.WAR_TASK_NAME).setEnabled(false).     BootWar bootWar = project.getTasks().create(SpringBootPlugin.BOOT_WAR_TASK_NAME, BootWar.class).     bootWar.setGroup(BasePlugin.BUILD_GROUP).     bootWar.setDescription("Assembles an executable war archive containing webapp" + " content, and the main classes and their dependencies.").     bootWar.providedClasspath(providedRuntimeConfiguration(project)).     ArchivePublishArtifact artifact = new ArchivePublishArtifact(bootWar).     this.singlePublishedArtifact.addCandidate(artifact).     bootWar.conventionMapping("mainClassName", new MainClassConvention(project, bootWar::getClasspath)). }
false;private;1;4;;private Configuration providedRuntimeConfiguration(Project project) {     return project.getConfigurations().getByName(WarPlugin.PROVIDED_RUNTIME_CONFIGURATION_NAME). }
