commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the properties that are applied to the launch script when it's being  * including in the executable archive.  * @return the properties  */ ;/**  * Returns the properties that are applied to the launch script when it's being  * including in the executable archive.  * @return the properties  */ public Map<String, String> getProperties() {     return this.properties. }
true;public;1;3;/**  * Sets the properties that are applied to the launch script when it's being including  * in the executable archive.  * @param properties the properties  */ ;/**  * Sets the properties that are applied to the launch script when it's being including  * in the executable archive.  * @param properties the properties  */ public void properties(Map<String, String> properties) {     this.properties.putAll(properties). }
true;public;0;3;/**  * Returns the script {@link File} that will be included in the executable archive.  * When {@code null}, the default launch script will be used.  * @return the script file  */ ;/**  * Returns the script {@link File} that will be included in the executable archive.  * When {@code null}, the default launch script will be used.  * @return the script file  */ public File getScript() {     return this.script. }
true;public;1;3;/**  * Sets the script {@link File} that will be included in the executable archive. When  * {@code null}, the default launch script will be used.  * @param script the script file  */ ;/**  * Sets the script {@link File} that will be included in the executable archive. When  * {@code null}, the default launch script will be used.  * @param script the script file  */ public void setScript(File script) {     this.script = script. }
false;public;1;25;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     LaunchScriptConfiguration other = (LaunchScriptConfiguration) obj.     if (!this.properties.equals(other.properties)) {         return false.     }     if (this.script == null) {         if (other.script != null) {             return false.         }     } else if (!this.script.equals(other.script)) {         return false.     } else if (!equalContents(this.script, other.script)) {         return false.     }     return true. }
false;private;2;8;;private boolean equalContents(File one, File two) {     try {         return FileUtils.sha1Hash(one).equals(FileUtils.sha1Hash(two)).     } catch (IOException ex) {         return false.     } }
false;public;0;9;;@Override public int hashCode() {     final int prime = 31.     int result = 1.     result = prime * result + ((this.properties == null) ? 0 : this.properties.hashCode()).     result = prime * result + ((this.script == null) ? 0 : this.script.hashCode()).     return result. }
false;private;1;4;;private String removeLineBreaks(String string) {     return (string != null) ? WHITE_SPACE_PATTERN.matcher(string).replaceAll(" ") : null. }
false;private;1;4;;private String augmentLineBreaks(String string) {     return (string != null) ? LINE_FEED_PATTERN.matcher(string).replaceAll("\n#  ") : null. }
false;private;3;11;;private void putIfMissing(Map<String, String> properties, String key, String... valueCandidates) {     if (!properties.containsKey(key)) {         for (String candidate : valueCandidates) {             if (candidate != null && !candidate.isEmpty()) {                 properties.put(key, candidate).                 return.             }         }     } }
