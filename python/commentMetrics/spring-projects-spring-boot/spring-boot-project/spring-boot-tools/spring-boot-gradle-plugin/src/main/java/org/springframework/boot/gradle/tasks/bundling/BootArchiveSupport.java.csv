commented;modifiers;parameterAmount;loc;comment;code
false;;2;5;;void configureManifest(Jar jar, String mainClassName) {     Attributes attributes = jar.getManifest().getAttributes().     attributes.putIfAbsent("Main-Class", this.loaderMainClass).     attributes.putIfAbsent("Start-Class", mainClassName). }
false;;1;10;;CopyAction createCopyAction(Jar jar) {     CopyAction copyAction = new BootZipCopyAction(jar.getArchivePath(), jar.isPreserveFileTimestamps(), isUsingDefaultLoader(jar), this.requiresUnpack.getAsSpec(), this.exclusions.getAsExcludeSpec(), this.launchScript, this.compressionResolver, jar.getMetadataCharset()).     if (!jar.isReproducibleFileOrder()) {         return copyAction.     }     return new ReproducibleOrderingCopyAction(copyAction). }
false;private;1;4;;private boolean isUsingDefaultLoader(Jar jar) {     return DEFAULT_LAUNCHER_CLASSES.contains(jar.getManifest().getAttributes().get("Main-Class")). }
false;;0;3;;LaunchScriptConfiguration getLaunchScript() {     return this.launchScript. }
false;;1;3;;void setLaunchScript(LaunchScriptConfiguration launchScript) {     this.launchScript = launchScript. }
false;;1;3;;void requiresUnpack(String... patterns) {     this.requiresUnpack.include(patterns). }
false;;1;3;;void requiresUnpack(Spec<FileTreeElement> spec) {     this.requiresUnpack.include(spec). }
false;;0;3;;boolean isExcludeDevtools() {     return this.excludeDevtools. }
false;;1;4;;void setExcludeDevtools(boolean excludeDevtools) {     this.excludeDevtools = excludeDevtools.     configureExclusions(). }
false;;1;10;;boolean isZip(File file) {     try {         try (FileInputStream fileInputStream = new FileInputStream(file)) {             return isZip(fileInputStream).         }     } catch (IOException ex) {         return false.     } }
false;private;1;8;;private boolean isZip(InputStream inputStream) throws IOException {     for (int i = 0. i < ZIP_FILE_HEADER.length. i++) {         if (inputStream.read() != ZIP_FILE_HEADER[i]) {             return false.         }     }     return true. }
false;private;0;7;;private void configureExclusions() {     Set<String> excludes = new HashSet<>().     if (this.excludeDevtools) {         excludes.add("**/spring-boot-devtools-*.jar").     }     this.exclusions.setExcludes(excludes). }
false;public;1;9;;@Override public WorkResult execute(CopyActionProcessingStream stream) {     return this.delegate.execute((action) -> {         Map<RelativePath, FileCopyDetailsInternal> detailsByPath = new TreeMap<>().         stream.process((details) -> detailsByPath.put(details.getRelativePath(), details)).         detailsByPath.values().forEach(action::processFile).     }). }
