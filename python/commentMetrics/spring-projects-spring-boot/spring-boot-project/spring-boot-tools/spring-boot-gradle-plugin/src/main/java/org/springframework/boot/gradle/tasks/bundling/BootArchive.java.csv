commented;modifiers;parameterAmount;loc;comment;code
true;;0;2;/**  * Returns the name of the main class of the application.  * @return the main class name  */ ;/**  * Returns the name of the main class of the application.  * @return the main class name  */ @Input String getMainClassName().
true;;1;1;/**  * Sets the name of the main class of the application.  * @param mainClassName the name of the main class of the application  */ ;/**  * Sets the name of the main class of the application.  * @param mainClassName the name of the main class of the application  */ void setMainClassName(String mainClassName).
true;;1;1;/**  * Adds Ant-style patterns that identify files that must be unpacked from the archive  * when it is launched.  * @param patterns the patterns  */ ;/**  * Adds Ant-style patterns that identify files that must be unpacked from the archive  * when it is launched.  * @param patterns the patterns  */ void requiresUnpack(String... patterns).
true;;1;1;/**  * Adds a spec that identifies files that must be unpacked from the archive when it is  * launched.  * @param spec the spec  */ ;/**  * Adds a spec that identifies files that must be unpacked from the archive when it is  * launched.  * @param spec the spec  */ void requiresUnpack(Spec<FileTreeElement> spec).
true;;0;3;/**  * Returns the {@link LaunchScriptConfiguration} that will control the script that is  * prepended to the archive.  * @return the launch script configuration, or {@code null} if the launch script has  * not been configured.  */ ;/**  * Returns the {@link LaunchScriptConfiguration} that will control the script that is  * prepended to the archive.  * @return the launch script configuration, or {@code null} if the launch script has  * not been configured.  */ @Input @Optional LaunchScriptConfiguration getLaunchScript().
true;;0;1;/**  * Configures the archive to have a prepended launch script.  */ ;/**  * Configures the archive to have a prepended launch script.  */ void launchScript().
true;;1;1;/**  * Configures the archive to have a prepended launch script, customizing its  * configuration using the given {@code action}.  * @param action the action to apply  */ ;/**  * Configures the archive to have a prepended launch script, customizing its  * configuration using the given {@code action}.  * @param action the action to apply  */ void launchScript(Action<LaunchScriptConfiguration> action).
true;;0;3;/**  * Returns the classpath that will be included in the archive.  * @return the classpath  */ ;/**  * Returns the classpath that will be included in the archive.  * @return the classpath  */ @Optional @Classpath FileCollection getClasspath().
true;;1;1;/**  * Adds files to the classpath to include in the archive. The given {@code classpath}  * is evaluated as per {@link Project#files(Object...)}.  * @param classpath the additions to the classpath  */ ;/**  * Adds files to the classpath to include in the archive. The given {@code classpath}  * is evaluated as per {@link Project#files(Object...)}.  * @param classpath the additions to the classpath  */ void classpath(Object... classpath).
true;;1;1;/**  * Sets the classpath to include in the archive. The given {@code classpath} is  * evaluated as per {@link Project#files(Object...)}.  * @param classpath the classpath  * @since 2.0.7  */ ;/**  * Sets the classpath to include in the archive. The given {@code classpath} is  * evaluated as per {@link Project#files(Object...)}.  * @param classpath the classpath  * @since 2.0.7  */ void setClasspath(Object classpath).
true;;1;1;/**  * Sets the classpath to include in the archive.  * @param classpath the classpath  * @since 2.0.7  */ ;/**  * Sets the classpath to include in the archive.  * @param classpath the classpath  * @since 2.0.7  */ void setClasspath(FileCollection classpath).
true;;0;2;/**  * Returns {@code true} if the Devtools jar should be excluded, otherwise  * {@code false}.  * @return {@code true} if the Devtools jar should be excluded, or {@code false} if  * not  */ ;/**  * Returns {@code true} if the Devtools jar should be excluded, otherwise  * {@code false}.  * @return {@code true} if the Devtools jar should be excluded, or {@code false} if  * not  */ @Input boolean isExcludeDevtools().
true;;1;1;/**  * Sets whether or not the Devtools jar should be excluded.  * @param excludeDevtools {@code true} if the Devtools jar should be excluded, or  * {@code false} if not  */ ;/**  * Sets whether or not the Devtools jar should be excluded.  * @param excludeDevtools {@code true} if the Devtools jar should be excluded, or  * {@code false} if not  */ void setExcludeDevtools(boolean excludeDevtools).
