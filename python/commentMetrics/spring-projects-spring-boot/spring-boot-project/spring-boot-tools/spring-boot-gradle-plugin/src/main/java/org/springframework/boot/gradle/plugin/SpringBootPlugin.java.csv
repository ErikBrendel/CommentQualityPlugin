commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void apply(Project project) {     verifyGradleVersion().     createExtension(project).     Configuration bootArchives = createBootArchivesConfiguration(project).     registerPluginActions(project, bootArchives).     unregisterUnresolvedDependenciesAnalyzer(project). }
false;private;0;6;;private void verifyGradleVersion() {     if (GradleVersion.current().compareTo(GradleVersion.version("4.4")) < 0) {         throw new GradleException("Spring Boot plugin requires Gradle 4.4 or later." + " The current version is " + GradleVersion.current()).     } }
false;private;1;3;;private void createExtension(Project project) {     project.getExtensions().create("springBoot", SpringBootExtension.class, project). }
false;private;1;6;;private Configuration createBootArchivesConfiguration(Project project) {     Configuration bootArchives = project.getConfigurations().create(BOOT_ARCHIVES_CONFIGURATION_NAME).     bootArchives.setDescription("Configuration for Spring Boot archive artifacts.").     return bootArchives. }
false;private;2;18;;private void registerPluginActions(Project project, Configuration bootArchives) {     SinglePublishedArtifact singlePublishedArtifact = new SinglePublishedArtifact(bootArchives.getArtifacts()).     List<PluginApplicationAction> actions = Arrays.asList(new JavaPluginAction(singlePublishedArtifact), new WarPluginAction(singlePublishedArtifact), new MavenPluginAction(bootArchives.getUploadTaskName()), new DependencyManagementPluginAction(), new ApplicationPluginAction(), new KotlinPluginAction()).     for (PluginApplicationAction action : actions) {         Class<? extends Plugin<? extends Project>> pluginClass = action.getPluginClass().         if (pluginClass != null) {             project.getPlugins().withType(pluginClass, (plugin) -> action.execute(project)).         }     } }
false;private;1;15;;private void unregisterUnresolvedDependenciesAnalyzer(Project project) {     UnresolvedDependenciesAnalyzer unresolvedDependenciesAnalyzer = new UnresolvedDependenciesAnalyzer().     project.getConfigurations().all((configuration) -> {         ResolvableDependencies incoming = configuration.getIncoming().         incoming.afterResolve((resolvableDependencies) -> {             if (incoming.equals(resolvableDependencies)) {                 unresolvedDependenciesAnalyzer.analyze(configuration.getResolvedConfiguration().getLenientConfiguration().getUnresolvedModuleDependencies()).             }         }).     }).     project.getGradle().buildFinished((buildResult) -> unresolvedDependenciesAnalyzer.buildFinished(project)). }
false;private,static;0;22;;private static String determineSpringBootVersion() {     String implementationVersion = DependencyManagementPluginAction.class.getPackage().getImplementationVersion().     if (implementationVersion != null) {         return implementationVersion.     }     URL codeSourceLocation = DependencyManagementPluginAction.class.getProtectionDomain().getCodeSource().getLocation().     try {         URLConnection connection = codeSourceLocation.openConnection().         if (connection instanceof JarURLConnection) {             return getImplementationVersion(((JarURLConnection) connection).getJarFile()).         }         try (JarFile jarFile = new JarFile(new File(codeSourceLocation.toURI()))) {             return getImplementationVersion(jarFile).         }     } catch (Exception ex) {         return null.     } }
false;private,static;1;4;;private static String getImplementationVersion(JarFile jarFile) throws IOException {     return jarFile.getManifest().getMainAttributes().getValue(Attributes.Name.IMPLEMENTATION_VERSION). }
