commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the main class name of the application.  * @return the name of the application's main class  */ ;/**  * Returns the main class name of the application.  * @return the name of the application's main class  */ public String getMainClassName() {     return this.mainClassName. }
true;public;1;3;/**  * Sets the main class name of the application.  * @param mainClassName the name of the application's main class  */ ;/**  * Sets the main class name of the application.  * @param mainClassName the name of the application's main class  */ public void setMainClassName(String mainClassName) {     this.mainClassName = mainClassName. }
true;public;0;3;/**  * Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the  * Java plugin's {@code classes} task to depend upon it.  * <p>  * By default, the task's destination dir will be a directory named {@code META-INF}  * beneath the main source set's resources output directory, and the task's project  * artifact will be the base name of the {@code bootWar} or {@code bootJar} task.  */ ;/**  * Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the  * Java plugin's {@code classes} task to depend upon it.  * <p>  * By default, the task's destination dir will be a directory named {@code META-INF}  * beneath the main source set's resources output directory, and the task's project  * artifact will be the base name of the {@code bootWar} or {@code bootJar} task.  */ public void buildInfo() {     this.buildInfo(null). }
true;public;1;22;/**  * Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the  * Java plugin's {@code classes} task to depend upon it. The task is passed to the  * given {@code configurer} for further configuration.  * <p>  * By default, the task's destination dir will be a directory named {@code META-INF}  * beneath the main source set's resources output directory, and the task's project  * artifact will be the base name of the {@code bootWar} or {@code bootJar} task.  * @param configurer the task configurer  */ ;/**  * Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the  * Java plugin's {@code classes} task to depend upon it. The task is passed to the  * given {@code configurer} for further configuration.  * <p>  * By default, the task's destination dir will be a directory named {@code META-INF}  * beneath the main source set's resources output directory, and the task's project  * artifact will be the base name of the {@code bootWar} or {@code bootJar} task.  * @param configurer the task configurer  */ public void buildInfo(Action<BuildInfo> configurer) {     BuildInfo bootBuildInfo = this.project.getTasks().create("bootBuildInfo", BuildInfo.class).     bootBuildInfo.setGroup(BasePlugin.BUILD_GROUP).     bootBuildInfo.setDescription("Generates a META-INF/build-info.properties file.").     this.project.getPlugins().withType(JavaPlugin.class, (plugin) -> {         this.project.getTasks().getByName(JavaPlugin.CLASSES_TASK_NAME).dependsOn(bootBuildInfo).         this.project.afterEvaluate((evaluated) -> {             BuildInfoProperties properties = bootBuildInfo.getProperties().             if (properties.getArtifact() == null) {                 properties.setArtifact(determineArtifactBaseName()).             }         }).         bootBuildInfo.getConventionMapping().map("destinationDir", () -> new File(determineMainSourceSetResourcesOutputDir(), "META-INF")).     }).     if (configurer != null) {         configurer.execute(bootBuildInfo).     } }
false;private;0;5;;private File determineMainSourceSetResourcesOutputDir() {     return this.project.getConvention().getPlugin(JavaPluginConvention.class).getSourceSets().getByName(SourceSet.MAIN_SOURCE_SET_NAME).getOutput().getResourcesDir(). }
false;private;0;4;;private String determineArtifactBaseName() {     Jar artifactTask = findArtifactTask().     return (artifactTask != null) ? artifactTask.getBaseName() : null. }
false;private;0;7;;private Jar findArtifactTask() {     Jar artifactTask = (Jar) this.project.getTasks().findByName("bootWar").     if (artifactTask != null) {         return artifactTask.     }     return (Jar) this.project.getTasks().findByName("bootJar"). }
