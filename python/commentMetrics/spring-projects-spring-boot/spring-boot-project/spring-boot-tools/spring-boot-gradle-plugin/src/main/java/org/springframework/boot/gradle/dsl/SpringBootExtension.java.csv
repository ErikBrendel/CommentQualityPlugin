# id;timestamp;commentText;codeText;commentWords;codeWords
SpringBootExtension -> public String getMainClassName();1508417713;Returns the main class name of the application.__@return the name of the application's main class;public String getMainClassName() {_		return this.mainClassName__	};returns,the,main,class,name,of,the,application,return,the,name,of,the,application,s,main,class;public,string,get,main,class,name,return,this,main,class,name
SpringBootExtension -> public String getMainClassName();1516191630;Returns the main class name of the application.__@return the name of the application's main class;public String getMainClassName() {_		return this.mainClassName__	};returns,the,main,class,name,of,the,application,return,the,name,of,the,application,s,main,class;public,string,get,main,class,name,return,this,main,class,name
SpringBootExtension -> public String getMainClassName();1519849365;Returns the main class name of the application._@return the name of the application's main class;public String getMainClassName() {_		return this.mainClassName__	};returns,the,main,class,name,of,the,application,return,the,name,of,the,application,s,main,class;public,string,get,main,class,name,return,this,main,class,name
SpringBootExtension -> public String getMainClassName();1525416882;Returns the main class name of the application._@return the name of the application's main class;public String getMainClassName() {_		return this.mainClassName__	};returns,the,main,class,name,of,the,application,return,the,name,of,the,application,s,main,class;public,string,get,main,class,name,return,this,main,class,name
SpringBootExtension -> public String getMainClassName();1532738143;Returns the main class name of the application._@return the name of the application's main class;public String getMainClassName() {_		return this.mainClassName__	};returns,the,main,class,name,of,the,application,return,the,name,of,the,application,s,main,class;public,string,get,main,class,name,return,this,main,class,name
SpringBootExtension -> public void setMainClassName(String mainClassName);1508417713;Sets the main class name of the application.__@param mainClassName the name of the application's main class;public void setMainClassName(String mainClassName) {_		this.mainClassName = mainClassName__	};sets,the,main,class,name,of,the,application,param,main,class,name,the,name,of,the,application,s,main,class;public,void,set,main,class,name,string,main,class,name,this,main,class,name,main,class,name
SpringBootExtension -> public void setMainClassName(String mainClassName);1516191630;Sets the main class name of the application.__@param mainClassName the name of the application's main class;public void setMainClassName(String mainClassName) {_		this.mainClassName = mainClassName__	};sets,the,main,class,name,of,the,application,param,main,class,name,the,name,of,the,application,s,main,class;public,void,set,main,class,name,string,main,class,name,this,main,class,name,main,class,name
SpringBootExtension -> public void setMainClassName(String mainClassName);1519849365;Sets the main class name of the application._@param mainClassName the name of the application's main class;public void setMainClassName(String mainClassName) {_		this.mainClassName = mainClassName__	};sets,the,main,class,name,of,the,application,param,main,class,name,the,name,of,the,application,s,main,class;public,void,set,main,class,name,string,main,class,name,this,main,class,name,main,class,name
SpringBootExtension -> public void setMainClassName(String mainClassName);1525416882;Sets the main class name of the application._@param mainClassName the name of the application's main class;public void setMainClassName(String mainClassName) {_		this.mainClassName = mainClassName__	};sets,the,main,class,name,of,the,application,param,main,class,name,the,name,of,the,application,s,main,class;public,void,set,main,class,name,string,main,class,name,this,main,class,name,main,class,name
SpringBootExtension -> public void setMainClassName(String mainClassName);1532738143;Sets the main class name of the application._@param mainClassName the name of the application's main class;public void setMainClassName(String mainClassName) {_		this.mainClassName = mainClassName__	};sets,the,main,class,name,of,the,application,param,main,class,name,the,name,of,the,application,s,main,class;public,void,set,main,class,name,string,main,class,name,this,main,class,name,main,class,name
SpringBootExtension -> public void buildInfo();1507173536;Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the_Java plugin's {@code classes} task to depend upon it._<p>_By default, the task's destination dir will be a directory named {@code META-INF}_beneath the main source set's resources output directory, and the task's project_artifact will be the base name of the {@code bootWar} or {@code bootJar} task.;public void buildInfo() {_		this.buildInfo(null)__	};creates,a,new,link,build,info,task,named,code,boot,build,info,and,configures,the,java,plugin,s,code,classes,task,to,depend,upon,it,p,by,default,the,task,s,destination,dir,will,be,a,directory,named,code,meta,inf,beneath,the,main,source,set,s,resources,output,directory,and,the,task,s,project,artifact,will,be,the,base,name,of,the,code,boot,war,or,code,boot,jar,task;public,void,build,info,this,build,info,null
SpringBootExtension -> public void buildInfo();1508417713;Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the_Java plugin's {@code classes} task to depend upon it._<p>_By default, the task's destination dir will be a directory named {@code META-INF}_beneath the main source set's resources output directory, and the task's project_artifact will be the base name of the {@code bootWar} or {@code bootJar} task.;public void buildInfo() {_		this.buildInfo(null)__	};creates,a,new,link,build,info,task,named,code,boot,build,info,and,configures,the,java,plugin,s,code,classes,task,to,depend,upon,it,p,by,default,the,task,s,destination,dir,will,be,a,directory,named,code,meta,inf,beneath,the,main,source,set,s,resources,output,directory,and,the,task,s,project,artifact,will,be,the,base,name,of,the,code,boot,war,or,code,boot,jar,task;public,void,build,info,this,build,info,null
SpringBootExtension -> public void buildInfo();1516191630;Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the_Java plugin's {@code classes} task to depend upon it._<p>_By default, the task's destination dir will be a directory named {@code META-INF}_beneath the main source set's resources output directory, and the task's project_artifact will be the base name of the {@code bootWar} or {@code bootJar} task.;public void buildInfo() {_		this.buildInfo(null)__	};creates,a,new,link,build,info,task,named,code,boot,build,info,and,configures,the,java,plugin,s,code,classes,task,to,depend,upon,it,p,by,default,the,task,s,destination,dir,will,be,a,directory,named,code,meta,inf,beneath,the,main,source,set,s,resources,output,directory,and,the,task,s,project,artifact,will,be,the,base,name,of,the,code,boot,war,or,code,boot,jar,task;public,void,build,info,this,build,info,null
SpringBootExtension -> public void buildInfo();1519849365;Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the_Java plugin's {@code classes} task to depend upon it._<p>_By default, the task's destination dir will be a directory named {@code META-INF}_beneath the main source set's resources output directory, and the task's project_artifact will be the base name of the {@code bootWar} or {@code bootJar} task.;public void buildInfo() {_		this.buildInfo(null)__	};creates,a,new,link,build,info,task,named,code,boot,build,info,and,configures,the,java,plugin,s,code,classes,task,to,depend,upon,it,p,by,default,the,task,s,destination,dir,will,be,a,directory,named,code,meta,inf,beneath,the,main,source,set,s,resources,output,directory,and,the,task,s,project,artifact,will,be,the,base,name,of,the,code,boot,war,or,code,boot,jar,task;public,void,build,info,this,build,info,null
SpringBootExtension -> public void buildInfo();1525416882;Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the_Java plugin's {@code classes} task to depend upon it._<p>_By default, the task's destination dir will be a directory named {@code META-INF}_beneath the main source set's resources output directory, and the task's project_artifact will be the base name of the {@code bootWar} or {@code bootJar} task.;public void buildInfo() {_		this.buildInfo(null)__	};creates,a,new,link,build,info,task,named,code,boot,build,info,and,configures,the,java,plugin,s,code,classes,task,to,depend,upon,it,p,by,default,the,task,s,destination,dir,will,be,a,directory,named,code,meta,inf,beneath,the,main,source,set,s,resources,output,directory,and,the,task,s,project,artifact,will,be,the,base,name,of,the,code,boot,war,or,code,boot,jar,task;public,void,build,info,this,build,info,null
SpringBootExtension -> public void buildInfo();1532738143;Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the_Java plugin's {@code classes} task to depend upon it._<p>_By default, the task's destination dir will be a directory named {@code META-INF}_beneath the main source set's resources output directory, and the task's project_artifact will be the base name of the {@code bootWar} or {@code bootJar} task.;public void buildInfo() {_		this.buildInfo(null)__	};creates,a,new,link,build,info,task,named,code,boot,build,info,and,configures,the,java,plugin,s,code,classes,task,to,depend,upon,it,p,by,default,the,task,s,destination,dir,will,be,a,directory,named,code,meta,inf,beneath,the,main,source,set,s,resources,output,directory,and,the,task,s,project,artifact,will,be,the,base,name,of,the,code,boot,war,or,code,boot,jar,task;public,void,build,info,this,build,info,null
SpringBootExtension -> public void buildInfo(Action<BuildInfo> configurer);1507173536;Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the_Java plugin's {@code classes} task to depend upon it. The task is passed to the_given {@code configurer} for further configuration._<p>_By default, the task's destination dir will be a directory named {@code META-INF}_beneath the main source set's resources output directory, and the task's project_artifact will be the base name of the {@code bootWar} or {@code bootJar} task.__@param configurer the task configurer;public void buildInfo(Action<BuildInfo> configurer) {_		BuildInfo bootBuildInfo = this.project.getTasks().create("bootBuildInfo",_				BuildInfo.class)__		bootBuildInfo.setGroup(BasePlugin.BUILD_GROUP)__		bootBuildInfo.setDescription("Generates a META-INF/build-info.properties file.")__		this.project.getPlugins().withType(JavaPlugin.class, (plugin) -> {_			this.project.getTasks().getByName(JavaPlugin.CLASSES_TASK_NAME)_					.dependsOn(bootBuildInfo)__			this.project.afterEvaluate((evaluated) -> {_				BuildInfoProperties properties = bootBuildInfo.getProperties()__				if (properties.getArtifact() == null) {_					properties.setArtifact(determineArtifactBaseName())__				}_			})__			bootBuildInfo.setDestinationDir(this.project_					.provider(() -> new File(determineMainSourceSetResourcesOutputDir(),_							"META-INF")))__		})__		if (configurer != null) {_			configurer.execute(bootBuildInfo)__		}_	};creates,a,new,link,build,info,task,named,code,boot,build,info,and,configures,the,java,plugin,s,code,classes,task,to,depend,upon,it,the,task,is,passed,to,the,given,code,configurer,for,further,configuration,p,by,default,the,task,s,destination,dir,will,be,a,directory,named,code,meta,inf,beneath,the,main,source,set,s,resources,output,directory,and,the,task,s,project,artifact,will,be,the,base,name,of,the,code,boot,war,or,code,boot,jar,task,param,configurer,the,task,configurer;public,void,build,info,action,build,info,configurer,build,info,boot,build,info,this,project,get,tasks,create,boot,build,info,build,info,class,boot,build,info,set,group,base,plugin,boot,build,info,set,description,generates,a,meta,inf,build,info,properties,file,this,project,get,plugins,with,type,java,plugin,class,plugin,this,project,get,tasks,get,by,name,java,plugin,depends,on,boot,build,info,this,project,after,evaluate,evaluated,build,info,properties,properties,boot,build,info,get,properties,if,properties,get,artifact,null,properties,set,artifact,determine,artifact,base,name,boot,build,info,set,destination,dir,this,project,provider,new,file,determine,main,source,set,resources,output,dir,meta,inf,if,configurer,null,configurer,execute,boot,build,info
SpringBootExtension -> public void buildInfo(Action<BuildInfo> configurer);1508417713;Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the_Java plugin's {@code classes} task to depend upon it. The task is passed to the_given {@code configurer} for further configuration._<p>_By default, the task's destination dir will be a directory named {@code META-INF}_beneath the main source set's resources output directory, and the task's project_artifact will be the base name of the {@code bootWar} or {@code bootJar} task.__@param configurer the task configurer;public void buildInfo(Action<BuildInfo> configurer) {_		BuildInfo bootBuildInfo = this.project.getTasks().create("bootBuildInfo",_				BuildInfo.class)__		bootBuildInfo.setGroup(BasePlugin.BUILD_GROUP)__		bootBuildInfo.setDescription("Generates a META-INF/build-info.properties file.")__		this.project.getPlugins().withType(JavaPlugin.class, (plugin) -> {_			this.project.getTasks().getByName(JavaPlugin.CLASSES_TASK_NAME)_					.dependsOn(bootBuildInfo)__			this.project.afterEvaluate((evaluated) -> {_				BuildInfoProperties properties = bootBuildInfo.getProperties()__				if (properties.getArtifact() == null) {_					properties.setArtifact(determineArtifactBaseName())__				}_			})__			bootBuildInfo.setDestinationDir(this.project_					.provider(() -> new File(determineMainSourceSetResourcesOutputDir(),_							"META-INF")))__		})__		if (configurer != null) {_			configurer.execute(bootBuildInfo)__		}_	};creates,a,new,link,build,info,task,named,code,boot,build,info,and,configures,the,java,plugin,s,code,classes,task,to,depend,upon,it,the,task,is,passed,to,the,given,code,configurer,for,further,configuration,p,by,default,the,task,s,destination,dir,will,be,a,directory,named,code,meta,inf,beneath,the,main,source,set,s,resources,output,directory,and,the,task,s,project,artifact,will,be,the,base,name,of,the,code,boot,war,or,code,boot,jar,task,param,configurer,the,task,configurer;public,void,build,info,action,build,info,configurer,build,info,boot,build,info,this,project,get,tasks,create,boot,build,info,build,info,class,boot,build,info,set,group,base,plugin,boot,build,info,set,description,generates,a,meta,inf,build,info,properties,file,this,project,get,plugins,with,type,java,plugin,class,plugin,this,project,get,tasks,get,by,name,java,plugin,depends,on,boot,build,info,this,project,after,evaluate,evaluated,build,info,properties,properties,boot,build,info,get,properties,if,properties,get,artifact,null,properties,set,artifact,determine,artifact,base,name,boot,build,info,set,destination,dir,this,project,provider,new,file,determine,main,source,set,resources,output,dir,meta,inf,if,configurer,null,configurer,execute,boot,build,info
SpringBootExtension -> public void buildInfo(Action<BuildInfo> configurer);1516191630;Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the_Java plugin's {@code classes} task to depend upon it. The task is passed to the_given {@code configurer} for further configuration._<p>_By default, the task's destination dir will be a directory named {@code META-INF}_beneath the main source set's resources output directory, and the task's project_artifact will be the base name of the {@code bootWar} or {@code bootJar} task.__@param configurer the task configurer;public void buildInfo(Action<BuildInfo> configurer) {_		BuildInfo bootBuildInfo = this.project.getTasks().create("bootBuildInfo",_				BuildInfo.class)__		bootBuildInfo.setGroup(BasePlugin.BUILD_GROUP)__		bootBuildInfo.setDescription("Generates a META-INF/build-info.properties file.")__		this.project.getPlugins().withType(JavaPlugin.class, (plugin) -> {_			this.project.getTasks().getByName(JavaPlugin.CLASSES_TASK_NAME)_					.dependsOn(bootBuildInfo)__			this.project.afterEvaluate((evaluated) -> {_				BuildInfoProperties properties = bootBuildInfo.getProperties()__				if (properties.getArtifact() == null) {_					properties.setArtifact(determineArtifactBaseName())__				}_			})__			bootBuildInfo.getConventionMapping().map("destinationDir",_					() -> new File(determineMainSourceSetResourcesOutputDir(),_							"META-INF"))__		})__		if (configurer != null) {_			configurer.execute(bootBuildInfo)__		}_	};creates,a,new,link,build,info,task,named,code,boot,build,info,and,configures,the,java,plugin,s,code,classes,task,to,depend,upon,it,the,task,is,passed,to,the,given,code,configurer,for,further,configuration,p,by,default,the,task,s,destination,dir,will,be,a,directory,named,code,meta,inf,beneath,the,main,source,set,s,resources,output,directory,and,the,task,s,project,artifact,will,be,the,base,name,of,the,code,boot,war,or,code,boot,jar,task,param,configurer,the,task,configurer;public,void,build,info,action,build,info,configurer,build,info,boot,build,info,this,project,get,tasks,create,boot,build,info,build,info,class,boot,build,info,set,group,base,plugin,boot,build,info,set,description,generates,a,meta,inf,build,info,properties,file,this,project,get,plugins,with,type,java,plugin,class,plugin,this,project,get,tasks,get,by,name,java,plugin,depends,on,boot,build,info,this,project,after,evaluate,evaluated,build,info,properties,properties,boot,build,info,get,properties,if,properties,get,artifact,null,properties,set,artifact,determine,artifact,base,name,boot,build,info,get,convention,mapping,map,destination,dir,new,file,determine,main,source,set,resources,output,dir,meta,inf,if,configurer,null,configurer,execute,boot,build,info
SpringBootExtension -> public void buildInfo(Action<BuildInfo> configurer);1519849365;Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the_Java plugin's {@code classes} task to depend upon it. The task is passed to the_given {@code configurer} for further configuration._<p>_By default, the task's destination dir will be a directory named {@code META-INF}_beneath the main source set's resources output directory, and the task's project_artifact will be the base name of the {@code bootWar} or {@code bootJar} task._@param configurer the task configurer;public void buildInfo(Action<BuildInfo> configurer) {_		BuildInfo bootBuildInfo = this.project.getTasks().create("bootBuildInfo",_				BuildInfo.class)__		bootBuildInfo.setGroup(BasePlugin.BUILD_GROUP)__		bootBuildInfo.setDescription("Generates a META-INF/build-info.properties file.")__		this.project.getPlugins().withType(JavaPlugin.class, (plugin) -> {_			this.project.getTasks().getByName(JavaPlugin.CLASSES_TASK_NAME)_					.dependsOn(bootBuildInfo)__			this.project.afterEvaluate((evaluated) -> {_				BuildInfoProperties properties = bootBuildInfo.getProperties()__				if (properties.getArtifact() == null) {_					properties.setArtifact(determineArtifactBaseName())__				}_			})__			bootBuildInfo.getConventionMapping().map("destinationDir",_					() -> new File(determineMainSourceSetResourcesOutputDir(),_							"META-INF"))__		})__		if (configurer != null) {_			configurer.execute(bootBuildInfo)__		}_	};creates,a,new,link,build,info,task,named,code,boot,build,info,and,configures,the,java,plugin,s,code,classes,task,to,depend,upon,it,the,task,is,passed,to,the,given,code,configurer,for,further,configuration,p,by,default,the,task,s,destination,dir,will,be,a,directory,named,code,meta,inf,beneath,the,main,source,set,s,resources,output,directory,and,the,task,s,project,artifact,will,be,the,base,name,of,the,code,boot,war,or,code,boot,jar,task,param,configurer,the,task,configurer;public,void,build,info,action,build,info,configurer,build,info,boot,build,info,this,project,get,tasks,create,boot,build,info,build,info,class,boot,build,info,set,group,base,plugin,boot,build,info,set,description,generates,a,meta,inf,build,info,properties,file,this,project,get,plugins,with,type,java,plugin,class,plugin,this,project,get,tasks,get,by,name,java,plugin,depends,on,boot,build,info,this,project,after,evaluate,evaluated,build,info,properties,properties,boot,build,info,get,properties,if,properties,get,artifact,null,properties,set,artifact,determine,artifact,base,name,boot,build,info,get,convention,mapping,map,destination,dir,new,file,determine,main,source,set,resources,output,dir,meta,inf,if,configurer,null,configurer,execute,boot,build,info
SpringBootExtension -> public void buildInfo(Action<BuildInfo> configurer);1525416882;Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the_Java plugin's {@code classes} task to depend upon it. The task is passed to the_given {@code configurer} for further configuration._<p>_By default, the task's destination dir will be a directory named {@code META-INF}_beneath the main source set's resources output directory, and the task's project_artifact will be the base name of the {@code bootWar} or {@code bootJar} task._@param configurer the task configurer;public void buildInfo(Action<BuildInfo> configurer) {_		BuildInfo bootBuildInfo = this.project.getTasks().create("bootBuildInfo",_				BuildInfo.class)__		bootBuildInfo.setGroup(BasePlugin.BUILD_GROUP)__		bootBuildInfo.setDescription("Generates a META-INF/build-info.properties file.")__		this.project.getPlugins().withType(JavaPlugin.class, (plugin) -> {_			this.project.getTasks().getByName(JavaPlugin.CLASSES_TASK_NAME)_					.dependsOn(bootBuildInfo)__			this.project.afterEvaluate((evaluated) -> {_				BuildInfoProperties properties = bootBuildInfo.getProperties()__				if (properties.getArtifact() == null) {_					properties.setArtifact(determineArtifactBaseName())__				}_			})__			bootBuildInfo.getConventionMapping().map("destinationDir",_					() -> new File(determineMainSourceSetResourcesOutputDir(),_							"META-INF"))__		})__		if (configurer != null) {_			configurer.execute(bootBuildInfo)__		}_	};creates,a,new,link,build,info,task,named,code,boot,build,info,and,configures,the,java,plugin,s,code,classes,task,to,depend,upon,it,the,task,is,passed,to,the,given,code,configurer,for,further,configuration,p,by,default,the,task,s,destination,dir,will,be,a,directory,named,code,meta,inf,beneath,the,main,source,set,s,resources,output,directory,and,the,task,s,project,artifact,will,be,the,base,name,of,the,code,boot,war,or,code,boot,jar,task,param,configurer,the,task,configurer;public,void,build,info,action,build,info,configurer,build,info,boot,build,info,this,project,get,tasks,create,boot,build,info,build,info,class,boot,build,info,set,group,base,plugin,boot,build,info,set,description,generates,a,meta,inf,build,info,properties,file,this,project,get,plugins,with,type,java,plugin,class,plugin,this,project,get,tasks,get,by,name,java,plugin,depends,on,boot,build,info,this,project,after,evaluate,evaluated,build,info,properties,properties,boot,build,info,get,properties,if,properties,get,artifact,null,properties,set,artifact,determine,artifact,base,name,boot,build,info,get,convention,mapping,map,destination,dir,new,file,determine,main,source,set,resources,output,dir,meta,inf,if,configurer,null,configurer,execute,boot,build,info
SpringBootExtension -> public void buildInfo(Action<BuildInfo> configurer);1532738143;Creates a new {@link BuildInfo} task named {@code bootBuildInfo} and configures the_Java plugin's {@code classes} task to depend upon it. The task is passed to the_given {@code configurer} for further configuration._<p>_By default, the task's destination dir will be a directory named {@code META-INF}_beneath the main source set's resources output directory, and the task's project_artifact will be the base name of the {@code bootWar} or {@code bootJar} task._@param configurer the task configurer;public void buildInfo(Action<BuildInfo> configurer) {_		BuildInfo bootBuildInfo = this.project.getTasks().create("bootBuildInfo",_				BuildInfo.class)__		bootBuildInfo.setGroup(BasePlugin.BUILD_GROUP)__		bootBuildInfo.setDescription("Generates a META-INF/build-info.properties file.")__		this.project.getPlugins().withType(JavaPlugin.class, (plugin) -> {_			this.project.getTasks().getByName(JavaPlugin.CLASSES_TASK_NAME)_					.dependsOn(bootBuildInfo)__			this.project.afterEvaluate((evaluated) -> {_				BuildInfoProperties properties = bootBuildInfo.getProperties()__				if (properties.getArtifact() == null) {_					properties.setArtifact(determineArtifactBaseName())__				}_			})__			bootBuildInfo.getConventionMapping().map("destinationDir",_					() -> new File(determineMainSourceSetResourcesOutputDir(),_							"META-INF"))__		})__		if (configurer != null) {_			configurer.execute(bootBuildInfo)__		}_	};creates,a,new,link,build,info,task,named,code,boot,build,info,and,configures,the,java,plugin,s,code,classes,task,to,depend,upon,it,the,task,is,passed,to,the,given,code,configurer,for,further,configuration,p,by,default,the,task,s,destination,dir,will,be,a,directory,named,code,meta,inf,beneath,the,main,source,set,s,resources,output,directory,and,the,task,s,project,artifact,will,be,the,base,name,of,the,code,boot,war,or,code,boot,jar,task,param,configurer,the,task,configurer;public,void,build,info,action,build,info,configurer,build,info,boot,build,info,this,project,get,tasks,create,boot,build,info,build,info,class,boot,build,info,set,group,base,plugin,boot,build,info,set,description,generates,a,meta,inf,build,info,properties,file,this,project,get,plugins,with,type,java,plugin,class,plugin,this,project,get,tasks,get,by,name,java,plugin,depends,on,boot,build,info,this,project,after,evaluate,evaluated,build,info,properties,properties,boot,build,info,get,properties,if,properties,get,artifact,null,properties,set,artifact,determine,artifact,base,name,boot,build,info,get,convention,mapping,map,destination,dir,new,file,determine,main,source,set,resources,output,dir,meta,inf,if,configurer,null,configurer,execute,boot,build,info
SpringBootExtension -> public SpringBootExtension(Project project);1507173536;Creates a new {@code SpringBootPluginExtension} that is associated with the given_{@code project}.__@param project the project;public SpringBootExtension(Project project) {_		this.project = project__	};creates,a,new,code,spring,boot,plugin,extension,that,is,associated,with,the,given,code,project,param,project,the,project;public,spring,boot,extension,project,project,this,project,project
SpringBootExtension -> public SpringBootExtension(Project project);1508417713;Creates a new {@code SpringBootPluginExtension} that is associated with the given_{@code project}.__@param project the project;public SpringBootExtension(Project project) {_		this.project = project__	};creates,a,new,code,spring,boot,plugin,extension,that,is,associated,with,the,given,code,project,param,project,the,project;public,spring,boot,extension,project,project,this,project,project
SpringBootExtension -> public SpringBootExtension(Project project);1516191630;Creates a new {@code SpringBootPluginExtension} that is associated with the given_{@code project}.__@param project the project;public SpringBootExtension(Project project) {_		this.project = project__	};creates,a,new,code,spring,boot,plugin,extension,that,is,associated,with,the,given,code,project,param,project,the,project;public,spring,boot,extension,project,project,this,project,project
SpringBootExtension -> public SpringBootExtension(Project project);1519849365;Creates a new {@code SpringBootPluginExtension} that is associated with the given_{@code project}._@param project the project;public SpringBootExtension(Project project) {_		this.project = project__	};creates,a,new,code,spring,boot,plugin,extension,that,is,associated,with,the,given,code,project,param,project,the,project;public,spring,boot,extension,project,project,this,project,project
SpringBootExtension -> public SpringBootExtension(Project project);1525416882;Creates a new {@code SpringBootPluginExtension} that is associated with the given_{@code project}._@param project the project;public SpringBootExtension(Project project) {_		this.project = project__	};creates,a,new,code,spring,boot,plugin,extension,that,is,associated,with,the,given,code,project,param,project,the,project;public,spring,boot,extension,project,project,this,project,project
SpringBootExtension -> public SpringBootExtension(Project project);1532738143;Creates a new {@code SpringBootPluginExtension} that is associated with the given_{@code project}._@param project the project;public SpringBootExtension(Project project) {_		this.project = project__	};creates,a,new,code,spring,boot,plugin,extension,that,is,associated,with,the,given,code,project,param,project,the,project;public,spring,boot,extension,project,project,this,project,project
