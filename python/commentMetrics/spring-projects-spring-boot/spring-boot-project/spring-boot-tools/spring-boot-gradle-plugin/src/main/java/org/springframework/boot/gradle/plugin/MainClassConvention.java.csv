commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Override public Object call() throws Exception {     SpringBootExtension springBootExtension = this.project.getExtensions().findByType(SpringBootExtension.class).     if (springBootExtension != null && springBootExtension.getMainClassName() != null) {         return springBootExtension.getMainClassName().     }     if (this.project.hasProperty("mainClassName")) {         Object mainClassName = this.project.property("mainClassName").         if (mainClassName != null) {             return mainClassName.         }     }     return resolveMainClass(). }
false;private;0;6;;private String resolveMainClass() {     return this.classpathSupplier.get().filter(File::isDirectory).getFiles().stream().map(this::findMainClass).filter(Objects::nonNull).findFirst().orElseThrow(() -> new InvalidUserDataException("Main class name has not been configured and it could not be resolved")). }
false;private;1;9;;private String findMainClass(File file) {     try {         return MainClassFinder.findSingleMainClass(file, SPRING_BOOT_APPLICATION_CLASS_NAME).     } catch (IOException ex) {         return null.     } }
