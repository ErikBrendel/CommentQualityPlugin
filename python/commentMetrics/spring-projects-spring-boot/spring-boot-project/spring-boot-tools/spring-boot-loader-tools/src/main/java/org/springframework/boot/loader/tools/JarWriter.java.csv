# id;timestamp;commentText;codeText;commentWords;codeWords
JarWriter -> public void writeNestedLibrary(String destination, Library library) 			throws IOException;1507173536;Write a nested library._@param destination the destination of the library_@param library the library_@throws IOException if the write fails;public void writeNestedLibrary(String destination, Library library)_			throws IOException {_		File file = library.getFile()__		JarArchiveEntry entry = new JarArchiveEntry(destination + library.getName())__		entry.setTime(getNestedLibraryTime(file))__		if (library.isUnpackRequired()) {_			entry.setComment("UNPACK:" + FileUtils.sha1Hash(file))__		}_		new CrcAndSize(file).setupStoredEntry(entry)__		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true))__	};write,a,nested,library,param,destination,the,destination,of,the,library,param,library,the,library,throws,ioexception,if,the,write,fails;public,void,write,nested,library,string,destination,library,library,throws,ioexception,file,file,library,get,file,jar,archive,entry,entry,new,jar,archive,entry,destination,library,get,name,entry,set,time,get,nested,library,time,file,if,library,is,unpack,required,entry,set,comment,unpack,file,utils,sha1hash,file,new,crc,and,size,file,setup,stored,entry,entry,write,entry,entry,new,input,stream,entry,writer,new,file,input,stream,file,true
JarWriter -> public void writeNestedLibrary(String destination, Library library) 			throws IOException;1509282686;Write a nested library._@param destination the destination of the library_@param library the library_@throws IOException if the write fails;public void writeNestedLibrary(String destination, Library library)_			throws IOException {_		File file = library.getFile()__		JarArchiveEntry entry = new JarArchiveEntry(destination + library.getName())__		entry.setTime(getNestedLibraryTime(file))__		if (library.isUnpackRequired()) {_			entry.setComment("UNPACK:" + FileUtils.sha1Hash(file))__		}_		new CrcAndSize(file).setupStoredEntry(entry)__		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true))__	};write,a,nested,library,param,destination,the,destination,of,the,library,param,library,the,library,throws,ioexception,if,the,write,fails;public,void,write,nested,library,string,destination,library,library,throws,ioexception,file,file,library,get,file,jar,archive,entry,entry,new,jar,archive,entry,destination,library,get,name,entry,set,time,get,nested,library,time,file,if,library,is,unpack,required,entry,set,comment,unpack,file,utils,sha1hash,file,new,crc,and,size,file,setup,stored,entry,entry,write,entry,entry,new,input,stream,entry,writer,new,file,input,stream,file,true
JarWriter -> public void writeNestedLibrary(String destination, Library library) 			throws IOException;1512760426;Write a nested library._@param destination the destination of the library_@param library the library_@throws IOException if the write fails;public void writeNestedLibrary(String destination, Library library)_			throws IOException {_		File file = library.getFile()__		JarArchiveEntry entry = new JarArchiveEntry(destination + library.getName())__		entry.setTime(getNestedLibraryTime(file))__		if (library.isUnpackRequired()) {_			entry.setComment("UNPACK:" + FileUtils.sha1Hash(file))__		}_		new CrcAndSize(file).setupStoredEntry(entry)__		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true))__	};write,a,nested,library,param,destination,the,destination,of,the,library,param,library,the,library,throws,ioexception,if,the,write,fails;public,void,write,nested,library,string,destination,library,library,throws,ioexception,file,file,library,get,file,jar,archive,entry,entry,new,jar,archive,entry,destination,library,get,name,entry,set,time,get,nested,library,time,file,if,library,is,unpack,required,entry,set,comment,unpack,file,utils,sha1hash,file,new,crc,and,size,file,setup,stored,entry,entry,write,entry,entry,new,input,stream,entry,writer,new,file,input,stream,file,true
JarWriter -> public void writeNestedLibrary(String destination, Library library) 			throws IOException;1516194952;Write a nested library._@param destination the destination of the library_@param library the library_@throws IOException if the write fails;public void writeNestedLibrary(String destination, Library library)_			throws IOException {_		File file = library.getFile()__		JarArchiveEntry entry = new JarArchiveEntry(destination + library.getName())__		entry.setTime(getNestedLibraryTime(file))__		if (library.isUnpackRequired()) {_			entry.setComment("UNPACK:" + FileUtils.sha1Hash(file))__		}_		new CrcAndSize(file).setupStoredEntry(entry)__		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true))__	};write,a,nested,library,param,destination,the,destination,of,the,library,param,library,the,library,throws,ioexception,if,the,write,fails;public,void,write,nested,library,string,destination,library,library,throws,ioexception,file,file,library,get,file,jar,archive,entry,entry,new,jar,archive,entry,destination,library,get,name,entry,set,time,get,nested,library,time,file,if,library,is,unpack,required,entry,set,comment,unpack,file,utils,sha1hash,file,new,crc,and,size,file,setup,stored,entry,entry,write,entry,entry,new,input,stream,entry,writer,new,file,input,stream,file,true
JarWriter -> public void writeNestedLibrary(String destination, Library library) 			throws IOException;1516667888;Write a nested library._@param destination the destination of the library_@param library the library_@throws IOException if the write fails;public void writeNestedLibrary(String destination, Library library)_			throws IOException {_		File file = library.getFile()__		JarArchiveEntry entry = new JarArchiveEntry(destination + library.getName())__		entry.setTime(getNestedLibraryTime(file))__		if (library.isUnpackRequired()) {_			entry.setComment("UNPACK:" + FileUtils.sha1Hash(file))__		}_		new CrcAndSize(file).setupStoredEntry(entry)__		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true))__	};write,a,nested,library,param,destination,the,destination,of,the,library,param,library,the,library,throws,ioexception,if,the,write,fails;public,void,write,nested,library,string,destination,library,library,throws,ioexception,file,file,library,get,file,jar,archive,entry,entry,new,jar,archive,entry,destination,library,get,name,entry,set,time,get,nested,library,time,file,if,library,is,unpack,required,entry,set,comment,unpack,file,utils,sha1hash,file,new,crc,and,size,file,setup,stored,entry,entry,write,entry,entry,new,input,stream,entry,writer,new,file,input,stream,file,true
JarWriter -> public void writeNestedLibrary(String destination, Library library) 			throws IOException;1517485113;Write a nested library._@param destination the destination of the library_@param library the library_@throws IOException if the write fails;public void writeNestedLibrary(String destination, Library library)_			throws IOException {_		File file = library.getFile()__		JarArchiveEntry entry = new JarArchiveEntry(destination + library.getName())__		entry.setTime(getNestedLibraryTime(file))__		new CrcAndSize(file).setupStoredEntry(entry)__		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true),_				new LibraryUnpackHandler(library))__	};write,a,nested,library,param,destination,the,destination,of,the,library,param,library,the,library,throws,ioexception,if,the,write,fails;public,void,write,nested,library,string,destination,library,library,throws,ioexception,file,file,library,get,file,jar,archive,entry,entry,new,jar,archive,entry,destination,library,get,name,entry,set,time,get,nested,library,time,file,new,crc,and,size,file,setup,stored,entry,entry,write,entry,entry,new,input,stream,entry,writer,new,file,input,stream,file,true,new,library,unpack,handler,library
JarWriter -> public void writeNestedLibrary(String destination, Library library) 			throws IOException;1519099437;Write a nested library._@param destination the destination of the library_@param library the library_@throws IOException if the write fails;public void writeNestedLibrary(String destination, Library library)_			throws IOException {_		File file = library.getFile()__		JarArchiveEntry entry = new JarArchiveEntry(destination + library.getName())__		entry.setTime(getNestedLibraryTime(file))__		new CrcAndSize(file).setupStoredEntry(entry)__		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true),_				new LibraryUnpackHandler(library))__	};write,a,nested,library,param,destination,the,destination,of,the,library,param,library,the,library,throws,ioexception,if,the,write,fails;public,void,write,nested,library,string,destination,library,library,throws,ioexception,file,file,library,get,file,jar,archive,entry,entry,new,jar,archive,entry,destination,library,get,name,entry,set,time,get,nested,library,time,file,new,crc,and,size,file,setup,stored,entry,entry,write,entry,entry,new,input,stream,entry,writer,new,file,input,stream,file,true,new,library,unpack,handler,library
JarWriter -> public void writeNestedLibrary(String destination, Library library) 			throws IOException;1519669562;Write a nested library._@param destination the destination of the library_@param library the library_@throws IOException if the write fails;public void writeNestedLibrary(String destination, Library library)_			throws IOException {_		File file = library.getFile()__		JarArchiveEntry entry = new JarArchiveEntry(destination + library.getName())__		entry.setTime(getNestedLibraryTime(file))__		new CrcAndSize(file).setupStoredEntry(entry)__		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true),_				new LibraryUnpackHandler(library))__	};write,a,nested,library,param,destination,the,destination,of,the,library,param,library,the,library,throws,ioexception,if,the,write,fails;public,void,write,nested,library,string,destination,library,library,throws,ioexception,file,file,library,get,file,jar,archive,entry,entry,new,jar,archive,entry,destination,library,get,name,entry,set,time,get,nested,library,time,file,new,crc,and,size,file,setup,stored,entry,entry,write,entry,entry,new,input,stream,entry,writer,new,file,input,stream,file,true,new,library,unpack,handler,library
JarWriter -> public void writeNestedLibrary(String destination, Library library) 			throws IOException;1525376698;Write a nested library._@param destination the destination of the library_@param library the library_@throws IOException if the write fails;public void writeNestedLibrary(String destination, Library library)_			throws IOException {_		File file = library.getFile()__		JarArchiveEntry entry = new JarArchiveEntry(destination + library.getName())__		entry.setTime(getNestedLibraryTime(file))__		new CrcAndSize(file).setupStoredEntry(entry)__		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true),_				new LibraryUnpackHandler(library))__	};write,a,nested,library,param,destination,the,destination,of,the,library,param,library,the,library,throws,ioexception,if,the,write,fails;public,void,write,nested,library,string,destination,library,library,throws,ioexception,file,file,library,get,file,jar,archive,entry,entry,new,jar,archive,entry,destination,library,get,name,entry,set,time,get,nested,library,time,file,new,crc,and,size,file,setup,stored,entry,entry,write,entry,entry,new,input,stream,entry,writer,new,file,input,stream,file,true,new,library,unpack,handler,library
JarWriter -> public void writeNestedLibrary(String destination, Library library) 			throws IOException;1526031125;Write a nested library._@param destination the destination of the library_@param library the library_@throws IOException if the write fails;public void writeNestedLibrary(String destination, Library library)_			throws IOException {_		File file = library.getFile()__		JarArchiveEntry entry = new JarArchiveEntry(destination + library.getName())__		entry.setTime(getNestedLibraryTime(file))__		new CrcAndSize(file).setupStoredEntry(entry)__		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true),_				new LibraryUnpackHandler(library))__	};write,a,nested,library,param,destination,the,destination,of,the,library,param,library,the,library,throws,ioexception,if,the,write,fails;public,void,write,nested,library,string,destination,library,library,throws,ioexception,file,file,library,get,file,jar,archive,entry,entry,new,jar,archive,entry,destination,library,get,name,entry,set,time,get,nested,library,time,file,new,crc,and,size,file,setup,stored,entry,entry,write,entry,entry,new,input,stream,entry,writer,new,file,input,stream,file,true,new,library,unpack,handler,library
JarWriter -> public void writeNestedLibrary(String destination, Library library) 			throws IOException;1529435218;Write a nested library._@param destination the destination of the library_@param library the library_@throws IOException if the write fails;public void writeNestedLibrary(String destination, Library library)_			throws IOException {_		File file = library.getFile()__		JarArchiveEntry entry = new JarArchiveEntry(destination + library.getName())__		entry.setTime(getNestedLibraryTime(file))__		new CrcAndSize(file).setupStoredEntry(entry)__		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true),_				new LibraryUnpackHandler(library))__	};write,a,nested,library,param,destination,the,destination,of,the,library,param,library,the,library,throws,ioexception,if,the,write,fails;public,void,write,nested,library,string,destination,library,library,throws,ioexception,file,file,library,get,file,jar,archive,entry,entry,new,jar,archive,entry,destination,library,get,name,entry,set,time,get,nested,library,time,file,new,crc,and,size,file,setup,stored,entry,entry,write,entry,entry,new,input,stream,entry,writer,new,file,input,stream,file,true,new,library,unpack,handler,library
JarWriter -> public void writeNestedLibrary(String destination, Library library) 			throws IOException;1531139970;Write a nested library._@param destination the destination of the library_@param library the library_@throws IOException if the write fails;public void writeNestedLibrary(String destination, Library library)_			throws IOException {_		File file = library.getFile()__		JarArchiveEntry entry = new JarArchiveEntry(destination + library.getName())__		entry.setTime(getNestedLibraryTime(file))__		new CrcAndSize(file).setupStoredEntry(entry)__		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true),_				new LibraryUnpackHandler(library))__	};write,a,nested,library,param,destination,the,destination,of,the,library,param,library,the,library,throws,ioexception,if,the,write,fails;public,void,write,nested,library,string,destination,library,library,throws,ioexception,file,file,library,get,file,jar,archive,entry,entry,new,jar,archive,entry,destination,library,get,name,entry,set,time,get,nested,library,time,file,new,crc,and,size,file,setup,stored,entry,entry,write,entry,entry,new,input,stream,entry,writer,new,file,input,stream,file,true,new,library,unpack,handler,library
JarWriter -> public void writeNestedLibrary(String destination, Library library) 			throws IOException;1532738143;Write a nested library._@param destination the destination of the library_@param library the library_@throws IOException if the write fails;public void writeNestedLibrary(String destination, Library library)_			throws IOException {_		File file = library.getFile()__		JarArchiveEntry entry = new JarArchiveEntry(destination + library.getName())__		entry.setTime(getNestedLibraryTime(file))__		new CrcAndSize(file).setupStoredEntry(entry)__		writeEntry(entry, new InputStreamEntryWriter(new FileInputStream(file), true),_				new LibraryUnpackHandler(library))__	};write,a,nested,library,param,destination,the,destination,of,the,library,param,library,the,library,throws,ioexception,if,the,write,fails;public,void,write,nested,library,string,destination,library,library,throws,ioexception,file,file,library,get,file,jar,archive,entry,entry,new,jar,archive,entry,destination,library,get,name,entry,set,time,get,nested,library,time,file,new,crc,and,size,file,setup,stored,entry,entry,write,entry,entry,new,input,stream,entry,writer,new,file,input,stream,file,true,new,library,unpack,handler,library
JarWriter -> @Override 	public void writeLoaderClasses() throws IOException;1507173536;Write the required spring-boot-loader classes to the JAR._@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses() throws IOException {_		writeLoaderClasses(NESTED_LOADER_JAR)__	};write,the,required,spring,boot,loader,classes,to,the,jar,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,throws,ioexception,write,loader,classes
JarWriter -> @Override 	public void writeLoaderClasses() throws IOException;1509282686;Write the required spring-boot-loader classes to the JAR._@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses() throws IOException {_		writeLoaderClasses(NESTED_LOADER_JAR)__	};write,the,required,spring,boot,loader,classes,to,the,jar,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,throws,ioexception,write,loader,classes
JarWriter -> @Override 	public void writeLoaderClasses() throws IOException;1512760426;Write the required spring-boot-loader classes to the JAR._@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses() throws IOException {_		writeLoaderClasses(NESTED_LOADER_JAR)__	};write,the,required,spring,boot,loader,classes,to,the,jar,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,throws,ioexception,write,loader,classes
JarWriter -> @Override 	public void writeLoaderClasses() throws IOException;1516194952;Write the required spring-boot-loader classes to the JAR._@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses() throws IOException {_		writeLoaderClasses(NESTED_LOADER_JAR)__	};write,the,required,spring,boot,loader,classes,to,the,jar,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,throws,ioexception,write,loader,classes
JarWriter -> @Override 	public void writeLoaderClasses() throws IOException;1516667888;Write the required spring-boot-loader classes to the JAR._@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses() throws IOException {_		writeLoaderClasses(NESTED_LOADER_JAR)__	};write,the,required,spring,boot,loader,classes,to,the,jar,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,throws,ioexception,write,loader,classes
JarWriter -> @Override 	public void writeLoaderClasses() throws IOException;1517485113;Write the required spring-boot-loader classes to the JAR._@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses() throws IOException {_		writeLoaderClasses(NESTED_LOADER_JAR)__	};write,the,required,spring,boot,loader,classes,to,the,jar,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,throws,ioexception,write,loader,classes
JarWriter -> @Override 	public void writeLoaderClasses() throws IOException;1519099437;Write the required spring-boot-loader classes to the JAR._@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses() throws IOException {_		writeLoaderClasses(NESTED_LOADER_JAR)__	};write,the,required,spring,boot,loader,classes,to,the,jar,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,throws,ioexception,write,loader,classes
JarWriter -> @Override 	public void writeLoaderClasses() throws IOException;1519669562;Write the required spring-boot-loader classes to the JAR._@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses() throws IOException {_		writeLoaderClasses(NESTED_LOADER_JAR)__	};write,the,required,spring,boot,loader,classes,to,the,jar,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,throws,ioexception,write,loader,classes
JarWriter -> @Override 	public void writeLoaderClasses() throws IOException;1525376698;Write the required spring-boot-loader classes to the JAR._@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses() throws IOException {_		writeLoaderClasses(NESTED_LOADER_JAR)__	};write,the,required,spring,boot,loader,classes,to,the,jar,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,throws,ioexception,write,loader,classes
JarWriter -> @Override 	public void writeLoaderClasses() throws IOException;1526031125;Write the required spring-boot-loader classes to the JAR._@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses() throws IOException {_		writeLoaderClasses(NESTED_LOADER_JAR)__	};write,the,required,spring,boot,loader,classes,to,the,jar,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,throws,ioexception,write,loader,classes
JarWriter -> @Override 	public void writeLoaderClasses() throws IOException;1529435218;Write the required spring-boot-loader classes to the JAR._@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses() throws IOException {_		writeLoaderClasses(NESTED_LOADER_JAR)__	};write,the,required,spring,boot,loader,classes,to,the,jar,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,throws,ioexception,write,loader,classes
JarWriter -> @Override 	public void writeLoaderClasses() throws IOException;1531139970;Write the required spring-boot-loader classes to the JAR._@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses() throws IOException {_		writeLoaderClasses(NESTED_LOADER_JAR)__	};write,the,required,spring,boot,loader,classes,to,the,jar,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,throws,ioexception,write,loader,classes
JarWriter -> @Override 	public void writeLoaderClasses() throws IOException;1532738143;Write the required spring-boot-loader classes to the JAR._@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses() throws IOException {_		writeLoaderClasses(NESTED_LOADER_JAR)__	};write,the,required,spring,boot,loader,classes,to,the,jar,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,throws,ioexception,write,loader,classes
JarWriter -> EntryWriter -> void write(OutputStream outputStream) throws IOException_;1507173536;Write entry data to the specified output stream._@param outputStream the destination for the data_@throws IOException in case of I/O errors;void write(OutputStream outputStream) throws IOException_;write,entry,data,to,the,specified,output,stream,param,output,stream,the,destination,for,the,data,throws,ioexception,in,case,of,i,o,errors;void,write,output,stream,output,stream,throws,ioexception
JarWriter -> EntryWriter -> void write(OutputStream outputStream) throws IOException_;1509282686;Write entry data to the specified output stream._@param outputStream the destination for the data_@throws IOException in case of I/O errors;void write(OutputStream outputStream) throws IOException_;write,entry,data,to,the,specified,output,stream,param,output,stream,the,destination,for,the,data,throws,ioexception,in,case,of,i,o,errors;void,write,output,stream,output,stream,throws,ioexception
JarWriter -> EntryWriter -> void write(OutputStream outputStream) throws IOException_;1512760426;Write entry data to the specified output stream._@param outputStream the destination for the data_@throws IOException in case of I/O errors;void write(OutputStream outputStream) throws IOException_;write,entry,data,to,the,specified,output,stream,param,output,stream,the,destination,for,the,data,throws,ioexception,in,case,of,i,o,errors;void,write,output,stream,output,stream,throws,ioexception
JarWriter -> EntryWriter -> void write(OutputStream outputStream) throws IOException_;1516194952;Write entry data to the specified output stream._@param outputStream the destination for the data_@throws IOException in case of I/O errors;void write(OutputStream outputStream) throws IOException_;write,entry,data,to,the,specified,output,stream,param,output,stream,the,destination,for,the,data,throws,ioexception,in,case,of,i,o,errors;void,write,output,stream,output,stream,throws,ioexception
JarWriter -> EntryWriter -> void write(OutputStream outputStream) throws IOException_;1516667888;Write entry data to the specified output stream._@param outputStream the destination for the data_@throws IOException in case of I/O errors;void write(OutputStream outputStream) throws IOException_;write,entry,data,to,the,specified,output,stream,param,output,stream,the,destination,for,the,data,throws,ioexception,in,case,of,i,o,errors;void,write,output,stream,output,stream,throws,ioexception
JarWriter -> EntryWriter -> void write(OutputStream outputStream) throws IOException_;1517485113;Write entry data to the specified output stream._@param outputStream the destination for the data_@throws IOException in case of I/O errors;void write(OutputStream outputStream) throws IOException_;write,entry,data,to,the,specified,output,stream,param,output,stream,the,destination,for,the,data,throws,ioexception,in,case,of,i,o,errors;void,write,output,stream,output,stream,throws,ioexception
JarWriter -> EntryWriter -> void write(OutputStream outputStream) throws IOException_;1519099437;Write entry data to the specified output stream._@param outputStream the destination for the data_@throws IOException in case of I/O errors;void write(OutputStream outputStream) throws IOException_;write,entry,data,to,the,specified,output,stream,param,output,stream,the,destination,for,the,data,throws,ioexception,in,case,of,i,o,errors;void,write,output,stream,output,stream,throws,ioexception
JarWriter -> EntryWriter -> void write(OutputStream outputStream) throws IOException_;1519669562;Write entry data to the specified output stream._@param outputStream the destination for the data_@throws IOException in case of I/O errors;void write(OutputStream outputStream) throws IOException_;write,entry,data,to,the,specified,output,stream,param,output,stream,the,destination,for,the,data,throws,ioexception,in,case,of,i,o,errors;void,write,output,stream,output,stream,throws,ioexception
JarWriter -> EntryWriter -> void write(OutputStream outputStream) throws IOException_;1525376698;Write entry data to the specified output stream._@param outputStream the destination for the data_@throws IOException in case of I/O errors;void write(OutputStream outputStream) throws IOException_;write,entry,data,to,the,specified,output,stream,param,output,stream,the,destination,for,the,data,throws,ioexception,in,case,of,i,o,errors;void,write,output,stream,output,stream,throws,ioexception
JarWriter -> EntryWriter -> void write(OutputStream outputStream) throws IOException_;1526031125;Write entry data to the specified output stream._@param outputStream the destination for the data_@throws IOException in case of I/O errors;void write(OutputStream outputStream) throws IOException_;write,entry,data,to,the,specified,output,stream,param,output,stream,the,destination,for,the,data,throws,ioexception,in,case,of,i,o,errors;void,write,output,stream,output,stream,throws,ioexception
JarWriter -> EntryWriter -> void write(OutputStream outputStream) throws IOException_;1529435218;Write entry data to the specified output stream._@param outputStream the destination for the data_@throws IOException in case of I/O errors;void write(OutputStream outputStream) throws IOException_;write,entry,data,to,the,specified,output,stream,param,output,stream,the,destination,for,the,data,throws,ioexception,in,case,of,i,o,errors;void,write,output,stream,output,stream,throws,ioexception
JarWriter -> EntryWriter -> void write(OutputStream outputStream) throws IOException_;1531139970;Write entry data to the specified output stream._@param outputStream the destination for the data_@throws IOException in case of I/O errors;void write(OutputStream outputStream) throws IOException_;write,entry,data,to,the,specified,output,stream,param,output,stream,the,destination,for,the,data,throws,ioexception,in,case,of,i,o,errors;void,write,output,stream,output,stream,throws,ioexception
JarWriter -> EntryWriter -> void write(OutputStream outputStream) throws IOException_;1532738143;Write entry data to the specified output stream._@param outputStream the destination for the data_@throws IOException in case of I/O errors;void write(OutputStream outputStream) throws IOException_;write,entry,data,to,the,specified,output,stream,param,output,stream,the,destination,for,the,data,throws,ioexception,in,case,of,i,o,errors;void,write,output,stream,output,stream,throws,ioexception
JarWriter -> @Override 	public void close() throws IOException;1507173536;Close the writer._@throws IOException if the file cannot be closed;@Override_	public void close() throws IOException {_		this.jarOutput.close()__	};close,the,writer,throws,ioexception,if,the,file,cannot,be,closed;override,public,void,close,throws,ioexception,this,jar,output,close
JarWriter -> @Override 	public void close() throws IOException;1509282686;Close the writer._@throws IOException if the file cannot be closed;@Override_	public void close() throws IOException {_		this.jarOutput.close()__	};close,the,writer,throws,ioexception,if,the,file,cannot,be,closed;override,public,void,close,throws,ioexception,this,jar,output,close
JarWriter -> @Override 	public void close() throws IOException;1512760426;Close the writer._@throws IOException if the file cannot be closed;@Override_	public void close() throws IOException {_		this.jarOutput.close()__	};close,the,writer,throws,ioexception,if,the,file,cannot,be,closed;override,public,void,close,throws,ioexception,this,jar,output,close
JarWriter -> @Override 	public void close() throws IOException;1516194952;Close the writer._@throws IOException if the file cannot be closed;@Override_	public void close() throws IOException {_		this.jarOutput.close()__	};close,the,writer,throws,ioexception,if,the,file,cannot,be,closed;override,public,void,close,throws,ioexception,this,jar,output,close
JarWriter -> @Override 	public void close() throws IOException;1516667888;Close the writer._@throws IOException if the file cannot be closed;@Override_	public void close() throws IOException {_		this.jarOutput.close()__	};close,the,writer,throws,ioexception,if,the,file,cannot,be,closed;override,public,void,close,throws,ioexception,this,jar,output,close
JarWriter -> @Override 	public void close() throws IOException;1517485113;Close the writer._@throws IOException if the file cannot be closed;@Override_	public void close() throws IOException {_		this.jarOutput.close()__	};close,the,writer,throws,ioexception,if,the,file,cannot,be,closed;override,public,void,close,throws,ioexception,this,jar,output,close
JarWriter -> @Override 	public void close() throws IOException;1519099437;Close the writer._@throws IOException if the file cannot be closed;@Override_	public void close() throws IOException {_		this.jarOutput.close()__	};close,the,writer,throws,ioexception,if,the,file,cannot,be,closed;override,public,void,close,throws,ioexception,this,jar,output,close
JarWriter -> @Override 	public void close() throws IOException;1519669562;Close the writer._@throws IOException if the file cannot be closed;@Override_	public void close() throws IOException {_		this.jarOutput.close()__	};close,the,writer,throws,ioexception,if,the,file,cannot,be,closed;override,public,void,close,throws,ioexception,this,jar,output,close
JarWriter -> @Override 	public void close() throws IOException;1525376698;Close the writer._@throws IOException if the file cannot be closed;@Override_	public void close() throws IOException {_		this.jarOutput.close()__	};close,the,writer,throws,ioexception,if,the,file,cannot,be,closed;override,public,void,close,throws,ioexception,this,jar,output,close
JarWriter -> @Override 	public void close() throws IOException;1526031125;Close the writer._@throws IOException if the file cannot be closed;@Override_	public void close() throws IOException {_		this.jarOutput.close()__	};close,the,writer,throws,ioexception,if,the,file,cannot,be,closed;override,public,void,close,throws,ioexception,this,jar,output,close
JarWriter -> @Override 	public void close() throws IOException;1529435218;Close the writer._@throws IOException if the file cannot be closed;@Override_	public void close() throws IOException {_		this.jarOutput.close()__	};close,the,writer,throws,ioexception,if,the,file,cannot,be,closed;override,public,void,close,throws,ioexception,this,jar,output,close
JarWriter -> @Override 	public void close() throws IOException;1531139970;Close the writer._@throws IOException if the file cannot be closed;@Override_	public void close() throws IOException {_		this.jarOutput.close()__	};close,the,writer,throws,ioexception,if,the,file,cannot,be,closed;override,public,void,close,throws,ioexception,this,jar,output,close
JarWriter -> @Override 	public void close() throws IOException;1532738143;Close the writer._@throws IOException if the file cannot be closed;@Override_	public void close() throws IOException {_		this.jarOutput.close()__	};close,the,writer,throws,ioexception,if,the,file,cannot,be,closed;override,public,void,close,throws,ioexception,this,jar,output,close
JarWriter -> public JarWriter(File file, LaunchScript launchScript) 			throws FileNotFoundException, IOException;1507173536;Create a new {@link JarWriter} instance._@param file the file to write_@param launchScript an optional launch script to prepend to the front of the jar_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file, LaunchScript launchScript)_			throws FileNotFoundException, IOException {_		FileOutputStream fileOutputStream = new FileOutputStream(file)__		if (launchScript != null) {_			fileOutputStream.write(launchScript.toByteArray())__			setExecutableFilePermission(file)__		}_		this.jarOutput = new JarArchiveOutputStream(fileOutputStream)__		this.jarOutput.setEncoding("UTF-8")__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,param,launch,script,an,optional,launch,script,to,prepend,to,the,front,of,the,jar,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,launch,script,launch,script,throws,file,not,found,exception,ioexception,file,output,stream,file,output,stream,new,file,output,stream,file,if,launch,script,null,file,output,stream,write,launch,script,to,byte,array,set,executable,file,permission,file,this,jar,output,new,jar,archive,output,stream,file,output,stream,this,jar,output,set,encoding,utf,8
JarWriter -> public JarWriter(File file, LaunchScript launchScript) 			throws FileNotFoundException, IOException;1509282686;Create a new {@link JarWriter} instance._@param file the file to write_@param launchScript an optional launch script to prepend to the front of the jar_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file, LaunchScript launchScript)_			throws FileNotFoundException, IOException {_		FileOutputStream fileOutputStream = new FileOutputStream(file)__		if (launchScript != null) {_			fileOutputStream.write(launchScript.toByteArray())__			setExecutableFilePermission(file)__		}_		this.jarOutput = new JarArchiveOutputStream(fileOutputStream)__		this.jarOutput.setEncoding("UTF-8")__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,param,launch,script,an,optional,launch,script,to,prepend,to,the,front,of,the,jar,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,launch,script,launch,script,throws,file,not,found,exception,ioexception,file,output,stream,file,output,stream,new,file,output,stream,file,if,launch,script,null,file,output,stream,write,launch,script,to,byte,array,set,executable,file,permission,file,this,jar,output,new,jar,archive,output,stream,file,output,stream,this,jar,output,set,encoding,utf,8
JarWriter -> public JarWriter(File file, LaunchScript launchScript) 			throws FileNotFoundException, IOException;1512760426;Create a new {@link JarWriter} instance._@param file the file to write_@param launchScript an optional launch script to prepend to the front of the jar_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file, LaunchScript launchScript)_			throws FileNotFoundException, IOException {_		FileOutputStream fileOutputStream = new FileOutputStream(file)__		if (launchScript != null) {_			fileOutputStream.write(launchScript.toByteArray())__			setExecutableFilePermission(file)__		}_		this.jarOutput = new JarArchiveOutputStream(fileOutputStream)__		this.jarOutput.setEncoding("UTF-8")__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,param,launch,script,an,optional,launch,script,to,prepend,to,the,front,of,the,jar,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,launch,script,launch,script,throws,file,not,found,exception,ioexception,file,output,stream,file,output,stream,new,file,output,stream,file,if,launch,script,null,file,output,stream,write,launch,script,to,byte,array,set,executable,file,permission,file,this,jar,output,new,jar,archive,output,stream,file,output,stream,this,jar,output,set,encoding,utf,8
JarWriter -> public JarWriter(File file, LaunchScript launchScript) 			throws FileNotFoundException, IOException;1516194952;Create a new {@link JarWriter} instance._@param file the file to write_@param launchScript an optional launch script to prepend to the front of the jar_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file, LaunchScript launchScript)_			throws FileNotFoundException, IOException {_		FileOutputStream fileOutputStream = new FileOutputStream(file)__		if (launchScript != null) {_			fileOutputStream.write(launchScript.toByteArray())__			setExecutableFilePermission(file)__		}_		this.jarOutput = new JarArchiveOutputStream(fileOutputStream)__		this.jarOutput.setEncoding("UTF-8")__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,param,launch,script,an,optional,launch,script,to,prepend,to,the,front,of,the,jar,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,launch,script,launch,script,throws,file,not,found,exception,ioexception,file,output,stream,file,output,stream,new,file,output,stream,file,if,launch,script,null,file,output,stream,write,launch,script,to,byte,array,set,executable,file,permission,file,this,jar,output,new,jar,archive,output,stream,file,output,stream,this,jar,output,set,encoding,utf,8
JarWriter -> public JarWriter(File file, LaunchScript launchScript) 			throws FileNotFoundException, IOException;1516667888;Create a new {@link JarWriter} instance._@param file the file to write_@param launchScript an optional launch script to prepend to the front of the jar_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file, LaunchScript launchScript)_			throws FileNotFoundException, IOException {_		FileOutputStream fileOutputStream = new FileOutputStream(file)__		if (launchScript != null) {_			fileOutputStream.write(launchScript.toByteArray())__			setExecutableFilePermission(file)__		}_		this.jarOutput = new JarArchiveOutputStream(fileOutputStream)__		this.jarOutput.setEncoding("UTF-8")__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,param,launch,script,an,optional,launch,script,to,prepend,to,the,front,of,the,jar,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,launch,script,launch,script,throws,file,not,found,exception,ioexception,file,output,stream,file,output,stream,new,file,output,stream,file,if,launch,script,null,file,output,stream,write,launch,script,to,byte,array,set,executable,file,permission,file,this,jar,output,new,jar,archive,output,stream,file,output,stream,this,jar,output,set,encoding,utf,8
JarWriter -> public JarWriter(File file, LaunchScript launchScript) 			throws FileNotFoundException, IOException;1517485113;Create a new {@link JarWriter} instance._@param file the file to write_@param launchScript an optional launch script to prepend to the front of the jar_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file, LaunchScript launchScript)_			throws FileNotFoundException, IOException {_		FileOutputStream fileOutputStream = new FileOutputStream(file)__		if (launchScript != null) {_			fileOutputStream.write(launchScript.toByteArray())__			setExecutableFilePermission(file)__		}_		this.jarOutput = new JarArchiveOutputStream(fileOutputStream)__		this.jarOutput.setEncoding("UTF-8")__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,param,launch,script,an,optional,launch,script,to,prepend,to,the,front,of,the,jar,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,launch,script,launch,script,throws,file,not,found,exception,ioexception,file,output,stream,file,output,stream,new,file,output,stream,file,if,launch,script,null,file,output,stream,write,launch,script,to,byte,array,set,executable,file,permission,file,this,jar,output,new,jar,archive,output,stream,file,output,stream,this,jar,output,set,encoding,utf,8
JarWriter -> public JarWriter(File file, LaunchScript launchScript) 			throws FileNotFoundException, IOException;1519099437;Create a new {@link JarWriter} instance._@param file the file to write_@param launchScript an optional launch script to prepend to the front of the jar_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file, LaunchScript launchScript)_			throws FileNotFoundException, IOException {_		FileOutputStream fileOutputStream = new FileOutputStream(file)__		if (launchScript != null) {_			fileOutputStream.write(launchScript.toByteArray())__			setExecutableFilePermission(file)__		}_		this.jarOutput = new JarArchiveOutputStream(fileOutputStream)__		this.jarOutput.setEncoding("UTF-8")__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,param,launch,script,an,optional,launch,script,to,prepend,to,the,front,of,the,jar,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,launch,script,launch,script,throws,file,not,found,exception,ioexception,file,output,stream,file,output,stream,new,file,output,stream,file,if,launch,script,null,file,output,stream,write,launch,script,to,byte,array,set,executable,file,permission,file,this,jar,output,new,jar,archive,output,stream,file,output,stream,this,jar,output,set,encoding,utf,8
JarWriter -> public JarWriter(File file, LaunchScript launchScript) 			throws FileNotFoundException, IOException;1519669562;Create a new {@link JarWriter} instance._@param file the file to write_@param launchScript an optional launch script to prepend to the front of the jar_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file, LaunchScript launchScript)_			throws FileNotFoundException, IOException {_		FileOutputStream fileOutputStream = new FileOutputStream(file)__		if (launchScript != null) {_			fileOutputStream.write(launchScript.toByteArray())__			setExecutableFilePermission(file)__		}_		this.jarOutput = new JarArchiveOutputStream(fileOutputStream)__		this.jarOutput.setEncoding("UTF-8")__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,param,launch,script,an,optional,launch,script,to,prepend,to,the,front,of,the,jar,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,launch,script,launch,script,throws,file,not,found,exception,ioexception,file,output,stream,file,output,stream,new,file,output,stream,file,if,launch,script,null,file,output,stream,write,launch,script,to,byte,array,set,executable,file,permission,file,this,jar,output,new,jar,archive,output,stream,file,output,stream,this,jar,output,set,encoding,utf,8
JarWriter -> public JarWriter(File file, LaunchScript launchScript) 			throws FileNotFoundException, IOException;1525376698;Create a new {@link JarWriter} instance._@param file the file to write_@param launchScript an optional launch script to prepend to the front of the jar_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file, LaunchScript launchScript)_			throws FileNotFoundException, IOException {_		FileOutputStream fileOutputStream = new FileOutputStream(file)__		if (launchScript != null) {_			fileOutputStream.write(launchScript.toByteArray())__			setExecutableFilePermission(file)__		}_		this.jarOutput = new JarArchiveOutputStream(fileOutputStream)__		this.jarOutput.setEncoding("UTF-8")__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,param,launch,script,an,optional,launch,script,to,prepend,to,the,front,of,the,jar,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,launch,script,launch,script,throws,file,not,found,exception,ioexception,file,output,stream,file,output,stream,new,file,output,stream,file,if,launch,script,null,file,output,stream,write,launch,script,to,byte,array,set,executable,file,permission,file,this,jar,output,new,jar,archive,output,stream,file,output,stream,this,jar,output,set,encoding,utf,8
JarWriter -> public JarWriter(File file, LaunchScript launchScript) 			throws FileNotFoundException, IOException;1526031125;Create a new {@link JarWriter} instance._@param file the file to write_@param launchScript an optional launch script to prepend to the front of the jar_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file, LaunchScript launchScript)_			throws FileNotFoundException, IOException {_		FileOutputStream fileOutputStream = new FileOutputStream(file)__		if (launchScript != null) {_			fileOutputStream.write(launchScript.toByteArray())__			setExecutableFilePermission(file)__		}_		this.jarOutput = new JarArchiveOutputStream(fileOutputStream)__		this.jarOutput.setEncoding("UTF-8")__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,param,launch,script,an,optional,launch,script,to,prepend,to,the,front,of,the,jar,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,launch,script,launch,script,throws,file,not,found,exception,ioexception,file,output,stream,file,output,stream,new,file,output,stream,file,if,launch,script,null,file,output,stream,write,launch,script,to,byte,array,set,executable,file,permission,file,this,jar,output,new,jar,archive,output,stream,file,output,stream,this,jar,output,set,encoding,utf,8
JarWriter -> public JarWriter(File file, LaunchScript launchScript) 			throws FileNotFoundException, IOException;1529435218;Create a new {@link JarWriter} instance._@param file the file to write_@param launchScript an optional launch script to prepend to the front of the jar_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file, LaunchScript launchScript)_			throws FileNotFoundException, IOException {_		FileOutputStream fileOutputStream = new FileOutputStream(file)__		if (launchScript != null) {_			fileOutputStream.write(launchScript.toByteArray())__			setExecutableFilePermission(file)__		}_		this.jarOutput = new JarArchiveOutputStream(fileOutputStream)__		this.jarOutput.setEncoding("UTF-8")__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,param,launch,script,an,optional,launch,script,to,prepend,to,the,front,of,the,jar,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,launch,script,launch,script,throws,file,not,found,exception,ioexception,file,output,stream,file,output,stream,new,file,output,stream,file,if,launch,script,null,file,output,stream,write,launch,script,to,byte,array,set,executable,file,permission,file,this,jar,output,new,jar,archive,output,stream,file,output,stream,this,jar,output,set,encoding,utf,8
JarWriter -> public JarWriter(File file, LaunchScript launchScript) 			throws FileNotFoundException, IOException;1531139970;Create a new {@link JarWriter} instance._@param file the file to write_@param launchScript an optional launch script to prepend to the front of the jar_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file, LaunchScript launchScript)_			throws FileNotFoundException, IOException {_		FileOutputStream fileOutputStream = new FileOutputStream(file)__		if (launchScript != null) {_			fileOutputStream.write(launchScript.toByteArray())__			setExecutableFilePermission(file)__		}_		this.jarOutput = new JarArchiveOutputStream(fileOutputStream)__		this.jarOutput.setEncoding("UTF-8")__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,param,launch,script,an,optional,launch,script,to,prepend,to,the,front,of,the,jar,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,launch,script,launch,script,throws,file,not,found,exception,ioexception,file,output,stream,file,output,stream,new,file,output,stream,file,if,launch,script,null,file,output,stream,write,launch,script,to,byte,array,set,executable,file,permission,file,this,jar,output,new,jar,archive,output,stream,file,output,stream,this,jar,output,set,encoding,utf,8
JarWriter -> public JarWriter(File file, LaunchScript launchScript) 			throws FileNotFoundException, IOException;1532738143;Create a new {@link JarWriter} instance._@param file the file to write_@param launchScript an optional launch script to prepend to the front of the jar_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file, LaunchScript launchScript)_			throws FileNotFoundException, IOException {_		FileOutputStream fileOutputStream = new FileOutputStream(file)__		if (launchScript != null) {_			fileOutputStream.write(launchScript.toByteArray())__			setExecutableFilePermission(file)__		}_		this.jarOutput = new JarArchiveOutputStream(fileOutputStream)__		this.jarOutput.setEncoding("UTF-8")__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,param,launch,script,an,optional,launch,script,to,prepend,to,the,front,of,the,jar,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,launch,script,launch,script,throws,file,not,found,exception,ioexception,file,output,stream,file,output,stream,new,file,output,stream,file,if,launch,script,null,file,output,stream,write,launch,script,to,byte,array,set,executable,file,permission,file,this,jar,output,new,jar,archive,output,stream,file,output,stream,this,jar,output,set,encoding,utf,8
JarWriter -> @Override 	public void writeLoaderClasses(String loaderJarResourceName) throws IOException;1507173536;Write the required spring-boot-loader classes to the JAR._@param loaderJarResourceName the name of the resource containing the loader classes_to be written_@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses(String loaderJarResourceName) throws IOException {_		URL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName)__		JarInputStream inputStream = new JarInputStream(_				new BufferedInputStream(loaderJar.openStream()))__		JarEntry entry__		while ((entry = inputStream.getNextJarEntry()) != null) {_			if (entry.getName().endsWith(".class")) {_				writeEntry(new JarArchiveEntry(entry),_						new InputStreamEntryWriter(inputStream, false))__			}_		}_		inputStream.close()__	};write,the,required,spring,boot,loader,classes,to,the,jar,param,loader,jar,resource,name,the,name,of,the,resource,containing,the,loader,classes,to,be,written,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,string,loader,jar,resource,name,throws,ioexception,url,loader,jar,get,class,get,class,loader,get,resource,loader,jar,resource,name,jar,input,stream,input,stream,new,jar,input,stream,new,buffered,input,stream,loader,jar,open,stream,jar,entry,entry,while,entry,input,stream,get,next,jar,entry,null,if,entry,get,name,ends,with,class,write,entry,new,jar,archive,entry,entry,new,input,stream,entry,writer,input,stream,false,input,stream,close
JarWriter -> @Override 	public void writeLoaderClasses(String loaderJarResourceName) throws IOException;1509282686;Write the required spring-boot-loader classes to the JAR._@param loaderJarResourceName the name of the resource containing the loader classes_to be written_@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses(String loaderJarResourceName) throws IOException {_		URL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName)__		JarInputStream inputStream = new JarInputStream(_				new BufferedInputStream(loaderJar.openStream()))__		JarEntry entry__		while ((entry = inputStream.getNextJarEntry()) != null) {_			if (entry.getName().endsWith(".class")) {_				writeEntry(new JarArchiveEntry(entry),_						new InputStreamEntryWriter(inputStream, false))__			}_		}_		inputStream.close()__	};write,the,required,spring,boot,loader,classes,to,the,jar,param,loader,jar,resource,name,the,name,of,the,resource,containing,the,loader,classes,to,be,written,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,string,loader,jar,resource,name,throws,ioexception,url,loader,jar,get,class,get,class,loader,get,resource,loader,jar,resource,name,jar,input,stream,input,stream,new,jar,input,stream,new,buffered,input,stream,loader,jar,open,stream,jar,entry,entry,while,entry,input,stream,get,next,jar,entry,null,if,entry,get,name,ends,with,class,write,entry,new,jar,archive,entry,entry,new,input,stream,entry,writer,input,stream,false,input,stream,close
JarWriter -> @Override 	public void writeLoaderClasses(String loaderJarResourceName) throws IOException;1512760426;Write the required spring-boot-loader classes to the JAR._@param loaderJarResourceName the name of the resource containing the loader classes_to be written_@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses(String loaderJarResourceName) throws IOException {_		URL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName)__		JarInputStream inputStream = new JarInputStream(_				new BufferedInputStream(loaderJar.openStream()))__		JarEntry entry__		while ((entry = inputStream.getNextJarEntry()) != null) {_			if (entry.getName().endsWith(".class")) {_				writeEntry(new JarArchiveEntry(entry),_						new InputStreamEntryWriter(inputStream, false))__			}_		}_		inputStream.close()__	};write,the,required,spring,boot,loader,classes,to,the,jar,param,loader,jar,resource,name,the,name,of,the,resource,containing,the,loader,classes,to,be,written,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,string,loader,jar,resource,name,throws,ioexception,url,loader,jar,get,class,get,class,loader,get,resource,loader,jar,resource,name,jar,input,stream,input,stream,new,jar,input,stream,new,buffered,input,stream,loader,jar,open,stream,jar,entry,entry,while,entry,input,stream,get,next,jar,entry,null,if,entry,get,name,ends,with,class,write,entry,new,jar,archive,entry,entry,new,input,stream,entry,writer,input,stream,false,input,stream,close
JarWriter -> @Override 	public void writeLoaderClasses(String loaderJarResourceName) throws IOException;1516194952;Write the required spring-boot-loader classes to the JAR._@param loaderJarResourceName the name of the resource containing the loader classes_to be written_@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses(String loaderJarResourceName) throws IOException {_		URL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName)__		try (JarInputStream inputStream = new JarInputStream(_				new BufferedInputStream(loaderJar.openStream()))) {_			JarEntry entry__			while ((entry = inputStream.getNextJarEntry()) != null) {_				if (entry.getName().endsWith(".class")) {_					writeEntry(new JarArchiveEntry(entry),_							new InputStreamEntryWriter(inputStream, false))__				}_			}_		}_	};write,the,required,spring,boot,loader,classes,to,the,jar,param,loader,jar,resource,name,the,name,of,the,resource,containing,the,loader,classes,to,be,written,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,string,loader,jar,resource,name,throws,ioexception,url,loader,jar,get,class,get,class,loader,get,resource,loader,jar,resource,name,try,jar,input,stream,input,stream,new,jar,input,stream,new,buffered,input,stream,loader,jar,open,stream,jar,entry,entry,while,entry,input,stream,get,next,jar,entry,null,if,entry,get,name,ends,with,class,write,entry,new,jar,archive,entry,entry,new,input,stream,entry,writer,input,stream,false
JarWriter -> @Override 	public void writeLoaderClasses(String loaderJarResourceName) throws IOException;1516667888;Write the required spring-boot-loader classes to the JAR._@param loaderJarResourceName the name of the resource containing the loader classes_to be written_@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses(String loaderJarResourceName) throws IOException {_		URL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName)__		try (JarInputStream inputStream = new JarInputStream(_				new BufferedInputStream(loaderJar.openStream()))) {_			JarEntry entry__			while ((entry = inputStream.getNextJarEntry()) != null) {_				if (entry.getName().endsWith(".class")) {_					writeEntry(new JarArchiveEntry(entry),_							new InputStreamEntryWriter(inputStream, false))__				}_			}_		}_	};write,the,required,spring,boot,loader,classes,to,the,jar,param,loader,jar,resource,name,the,name,of,the,resource,containing,the,loader,classes,to,be,written,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,string,loader,jar,resource,name,throws,ioexception,url,loader,jar,get,class,get,class,loader,get,resource,loader,jar,resource,name,try,jar,input,stream,input,stream,new,jar,input,stream,new,buffered,input,stream,loader,jar,open,stream,jar,entry,entry,while,entry,input,stream,get,next,jar,entry,null,if,entry,get,name,ends,with,class,write,entry,new,jar,archive,entry,entry,new,input,stream,entry,writer,input,stream,false
JarWriter -> @Override 	public void writeLoaderClasses(String loaderJarResourceName) throws IOException;1517485113;Write the required spring-boot-loader classes to the JAR._@param loaderJarResourceName the name of the resource containing the loader classes_to be written_@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses(String loaderJarResourceName) throws IOException {_		URL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName)__		try (JarInputStream inputStream = new JarInputStream(_				new BufferedInputStream(loaderJar.openStream()))) {_			JarEntry entry__			while ((entry = inputStream.getNextJarEntry()) != null) {_				if (entry.getName().endsWith(".class")) {_					writeEntry(new JarArchiveEntry(entry),_							new InputStreamEntryWriter(inputStream, false))__				}_			}_		}_	};write,the,required,spring,boot,loader,classes,to,the,jar,param,loader,jar,resource,name,the,name,of,the,resource,containing,the,loader,classes,to,be,written,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,string,loader,jar,resource,name,throws,ioexception,url,loader,jar,get,class,get,class,loader,get,resource,loader,jar,resource,name,try,jar,input,stream,input,stream,new,jar,input,stream,new,buffered,input,stream,loader,jar,open,stream,jar,entry,entry,while,entry,input,stream,get,next,jar,entry,null,if,entry,get,name,ends,with,class,write,entry,new,jar,archive,entry,entry,new,input,stream,entry,writer,input,stream,false
JarWriter -> @Override 	public void writeLoaderClasses(String loaderJarResourceName) throws IOException;1519099437;Write the required spring-boot-loader classes to the JAR._@param loaderJarResourceName the name of the resource containing the loader classes_to be written_@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses(String loaderJarResourceName) throws IOException {_		URL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName)__		try (JarInputStream inputStream = new JarInputStream(_				new BufferedInputStream(loaderJar.openStream()))) {_			JarEntry entry__			while ((entry = inputStream.getNextJarEntry()) != null) {_				if (entry.getName().endsWith(".class")) {_					writeEntry(new JarArchiveEntry(entry),_							new InputStreamEntryWriter(inputStream, false))__				}_			}_		}_	};write,the,required,spring,boot,loader,classes,to,the,jar,param,loader,jar,resource,name,the,name,of,the,resource,containing,the,loader,classes,to,be,written,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,string,loader,jar,resource,name,throws,ioexception,url,loader,jar,get,class,get,class,loader,get,resource,loader,jar,resource,name,try,jar,input,stream,input,stream,new,jar,input,stream,new,buffered,input,stream,loader,jar,open,stream,jar,entry,entry,while,entry,input,stream,get,next,jar,entry,null,if,entry,get,name,ends,with,class,write,entry,new,jar,archive,entry,entry,new,input,stream,entry,writer,input,stream,false
JarWriter -> @Override 	public void writeLoaderClasses(String loaderJarResourceName) throws IOException;1519669562;Write the required spring-boot-loader classes to the JAR._@param loaderJarResourceName the name of the resource containing the loader classes_to be written_@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses(String loaderJarResourceName) throws IOException {_		URL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName)__		try (JarInputStream inputStream = new JarInputStream(_				new BufferedInputStream(loaderJar.openStream()))) {_			JarEntry entry__			while ((entry = inputStream.getNextJarEntry()) != null) {_				if (entry.getName().endsWith(".class")) {_					writeEntry(new JarArchiveEntry(entry),_							new InputStreamEntryWriter(inputStream, false))__				}_			}_		}_	};write,the,required,spring,boot,loader,classes,to,the,jar,param,loader,jar,resource,name,the,name,of,the,resource,containing,the,loader,classes,to,be,written,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,string,loader,jar,resource,name,throws,ioexception,url,loader,jar,get,class,get,class,loader,get,resource,loader,jar,resource,name,try,jar,input,stream,input,stream,new,jar,input,stream,new,buffered,input,stream,loader,jar,open,stream,jar,entry,entry,while,entry,input,stream,get,next,jar,entry,null,if,entry,get,name,ends,with,class,write,entry,new,jar,archive,entry,entry,new,input,stream,entry,writer,input,stream,false
JarWriter -> @Override 	public void writeLoaderClasses(String loaderJarResourceName) throws IOException;1525376698;Write the required spring-boot-loader classes to the JAR._@param loaderJarResourceName the name of the resource containing the loader classes_to be written_@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses(String loaderJarResourceName) throws IOException {_		URL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName)__		try (JarInputStream inputStream = new JarInputStream(_				new BufferedInputStream(loaderJar.openStream()))) {_			JarEntry entry__			while ((entry = inputStream.getNextJarEntry()) != null) {_				if (entry.getName().endsWith(".class")) {_					writeEntry(new JarArchiveEntry(entry),_							new InputStreamEntryWriter(inputStream, false))__				}_			}_		}_	};write,the,required,spring,boot,loader,classes,to,the,jar,param,loader,jar,resource,name,the,name,of,the,resource,containing,the,loader,classes,to,be,written,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,string,loader,jar,resource,name,throws,ioexception,url,loader,jar,get,class,get,class,loader,get,resource,loader,jar,resource,name,try,jar,input,stream,input,stream,new,jar,input,stream,new,buffered,input,stream,loader,jar,open,stream,jar,entry,entry,while,entry,input,stream,get,next,jar,entry,null,if,entry,get,name,ends,with,class,write,entry,new,jar,archive,entry,entry,new,input,stream,entry,writer,input,stream,false
JarWriter -> @Override 	public void writeLoaderClasses(String loaderJarResourceName) throws IOException;1526031125;Write the required spring-boot-loader classes to the JAR._@param loaderJarResourceName the name of the resource containing the loader classes_to be written_@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses(String loaderJarResourceName) throws IOException {_		URL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName)__		try (JarInputStream inputStream = new JarInputStream(_				new BufferedInputStream(loaderJar.openStream()))) {_			JarEntry entry__			while ((entry = inputStream.getNextJarEntry()) != null) {_				if (entry.getName().endsWith(".class")) {_					writeEntry(new JarArchiveEntry(entry),_							new InputStreamEntryWriter(inputStream, false))__				}_			}_		}_	};write,the,required,spring,boot,loader,classes,to,the,jar,param,loader,jar,resource,name,the,name,of,the,resource,containing,the,loader,classes,to,be,written,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,string,loader,jar,resource,name,throws,ioexception,url,loader,jar,get,class,get,class,loader,get,resource,loader,jar,resource,name,try,jar,input,stream,input,stream,new,jar,input,stream,new,buffered,input,stream,loader,jar,open,stream,jar,entry,entry,while,entry,input,stream,get,next,jar,entry,null,if,entry,get,name,ends,with,class,write,entry,new,jar,archive,entry,entry,new,input,stream,entry,writer,input,stream,false
JarWriter -> @Override 	public void writeLoaderClasses(String loaderJarResourceName) throws IOException;1529435218;Write the required spring-boot-loader classes to the JAR._@param loaderJarResourceName the name of the resource containing the loader classes_to be written_@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses(String loaderJarResourceName) throws IOException {_		URL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName)__		try (JarInputStream inputStream = new JarInputStream(_				new BufferedInputStream(loaderJar.openStream()))) {_			JarEntry entry__			while ((entry = inputStream.getNextJarEntry()) != null) {_				if (entry.getName().endsWith(".class")) {_					writeEntry(new JarArchiveEntry(entry),_							new InputStreamEntryWriter(inputStream, false))__				}_			}_		}_	};write,the,required,spring,boot,loader,classes,to,the,jar,param,loader,jar,resource,name,the,name,of,the,resource,containing,the,loader,classes,to,be,written,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,string,loader,jar,resource,name,throws,ioexception,url,loader,jar,get,class,get,class,loader,get,resource,loader,jar,resource,name,try,jar,input,stream,input,stream,new,jar,input,stream,new,buffered,input,stream,loader,jar,open,stream,jar,entry,entry,while,entry,input,stream,get,next,jar,entry,null,if,entry,get,name,ends,with,class,write,entry,new,jar,archive,entry,entry,new,input,stream,entry,writer,input,stream,false
JarWriter -> @Override 	public void writeLoaderClasses(String loaderJarResourceName) throws IOException;1531139970;Write the required spring-boot-loader classes to the JAR._@param loaderJarResourceName the name of the resource containing the loader classes_to be written_@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses(String loaderJarResourceName) throws IOException {_		URL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName)__		try (JarInputStream inputStream = new JarInputStream(_				new BufferedInputStream(loaderJar.openStream()))) {_			JarEntry entry__			while ((entry = inputStream.getNextJarEntry()) != null) {_				if (entry.getName().endsWith(".class")) {_					writeEntry(new JarArchiveEntry(entry),_							new InputStreamEntryWriter(inputStream, false))__				}_			}_		}_	};write,the,required,spring,boot,loader,classes,to,the,jar,param,loader,jar,resource,name,the,name,of,the,resource,containing,the,loader,classes,to,be,written,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,string,loader,jar,resource,name,throws,ioexception,url,loader,jar,get,class,get,class,loader,get,resource,loader,jar,resource,name,try,jar,input,stream,input,stream,new,jar,input,stream,new,buffered,input,stream,loader,jar,open,stream,jar,entry,entry,while,entry,input,stream,get,next,jar,entry,null,if,entry,get,name,ends,with,class,write,entry,new,jar,archive,entry,entry,new,input,stream,entry,writer,input,stream,false
JarWriter -> @Override 	public void writeLoaderClasses(String loaderJarResourceName) throws IOException;1532738143;Write the required spring-boot-loader classes to the JAR._@param loaderJarResourceName the name of the resource containing the loader classes_to be written_@throws IOException if the classes cannot be written;@Override_	public void writeLoaderClasses(String loaderJarResourceName) throws IOException {_		URL loaderJar = getClass().getClassLoader().getResource(loaderJarResourceName)__		try (JarInputStream inputStream = new JarInputStream(_				new BufferedInputStream(loaderJar.openStream()))) {_			JarEntry entry__			while ((entry = inputStream.getNextJarEntry()) != null) {_				if (entry.getName().endsWith(".class")) {_					writeEntry(new JarArchiveEntry(entry),_							new InputStreamEntryWriter(inputStream, false))__				}_			}_		}_	};write,the,required,spring,boot,loader,classes,to,the,jar,param,loader,jar,resource,name,the,name,of,the,resource,containing,the,loader,classes,to,be,written,throws,ioexception,if,the,classes,cannot,be,written;override,public,void,write,loader,classes,string,loader,jar,resource,name,throws,ioexception,url,loader,jar,get,class,get,class,loader,get,resource,loader,jar,resource,name,try,jar,input,stream,input,stream,new,jar,input,stream,new,buffered,input,stream,loader,jar,open,stream,jar,entry,entry,while,entry,input,stream,get,next,jar,entry,null,if,entry,get,name,ends,with,class,write,entry,new,jar,archive,entry,entry,new,input,stream,entry,writer,input,stream,false
JarWriter -> public void writeManifest(Manifest manifest) throws IOException;1512760426;Write the specified manifest._@param manifest the manifest to write_@throws IOException of the manifest cannot be written;public void writeManifest(Manifest manifest) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry("META-INF/MANIFEST.MF")__		writeEntry(entry, manifest::write)__	};write,the,specified,manifest,param,manifest,the,manifest,to,write,throws,ioexception,of,the,manifest,cannot,be,written;public,void,write,manifest,manifest,manifest,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,meta,inf,manifest,mf,write,entry,entry,manifest,write
JarWriter -> public void writeManifest(Manifest manifest) throws IOException;1516194952;Write the specified manifest._@param manifest the manifest to write_@throws IOException of the manifest cannot be written;public void writeManifest(Manifest manifest) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry("META-INF/MANIFEST.MF")__		writeEntry(entry, manifest::write)__	};write,the,specified,manifest,param,manifest,the,manifest,to,write,throws,ioexception,of,the,manifest,cannot,be,written;public,void,write,manifest,manifest,manifest,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,meta,inf,manifest,mf,write,entry,entry,manifest,write
JarWriter -> public void writeManifest(Manifest manifest) throws IOException;1516667888;Write the specified manifest._@param manifest the manifest to write_@throws IOException of the manifest cannot be written;public void writeManifest(Manifest manifest) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry("META-INF/MANIFEST.MF")__		writeEntry(entry, manifest::write)__	};write,the,specified,manifest,param,manifest,the,manifest,to,write,throws,ioexception,of,the,manifest,cannot,be,written;public,void,write,manifest,manifest,manifest,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,meta,inf,manifest,mf,write,entry,entry,manifest,write
JarWriter -> public void writeManifest(Manifest manifest) throws IOException;1517485113;Write the specified manifest._@param manifest the manifest to write_@throws IOException of the manifest cannot be written;public void writeManifest(Manifest manifest) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry("META-INF/MANIFEST.MF")__		writeEntry(entry, manifest::write)__	};write,the,specified,manifest,param,manifest,the,manifest,to,write,throws,ioexception,of,the,manifest,cannot,be,written;public,void,write,manifest,manifest,manifest,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,meta,inf,manifest,mf,write,entry,entry,manifest,write
JarWriter -> public void writeManifest(Manifest manifest) throws IOException;1519099437;Write the specified manifest._@param manifest the manifest to write_@throws IOException of the manifest cannot be written;public void writeManifest(Manifest manifest) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry("META-INF/MANIFEST.MF")__		writeEntry(entry, manifest::write)__	};write,the,specified,manifest,param,manifest,the,manifest,to,write,throws,ioexception,of,the,manifest,cannot,be,written;public,void,write,manifest,manifest,manifest,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,meta,inf,manifest,mf,write,entry,entry,manifest,write
JarWriter -> public void writeManifest(Manifest manifest) throws IOException;1519669562;Write the specified manifest._@param manifest the manifest to write_@throws IOException of the manifest cannot be written;public void writeManifest(Manifest manifest) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry("META-INF/MANIFEST.MF")__		writeEntry(entry, manifest::write)__	};write,the,specified,manifest,param,manifest,the,manifest,to,write,throws,ioexception,of,the,manifest,cannot,be,written;public,void,write,manifest,manifest,manifest,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,meta,inf,manifest,mf,write,entry,entry,manifest,write
JarWriter -> public void writeManifest(Manifest manifest) throws IOException;1525376698;Write the specified manifest._@param manifest the manifest to write_@throws IOException of the manifest cannot be written;public void writeManifest(Manifest manifest) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry("META-INF/MANIFEST.MF")__		writeEntry(entry, manifest::write)__	};write,the,specified,manifest,param,manifest,the,manifest,to,write,throws,ioexception,of,the,manifest,cannot,be,written;public,void,write,manifest,manifest,manifest,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,meta,inf,manifest,mf,write,entry,entry,manifest,write
JarWriter -> public void writeManifest(Manifest manifest) throws IOException;1526031125;Write the specified manifest._@param manifest the manifest to write_@throws IOException of the manifest cannot be written;public void writeManifest(Manifest manifest) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry("META-INF/MANIFEST.MF")__		writeEntry(entry, manifest::write)__	};write,the,specified,manifest,param,manifest,the,manifest,to,write,throws,ioexception,of,the,manifest,cannot,be,written;public,void,write,manifest,manifest,manifest,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,meta,inf,manifest,mf,write,entry,entry,manifest,write
JarWriter -> public void writeManifest(Manifest manifest) throws IOException;1529435218;Write the specified manifest._@param manifest the manifest to write_@throws IOException of the manifest cannot be written;public void writeManifest(Manifest manifest) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry("META-INF/MANIFEST.MF")__		writeEntry(entry, manifest::write)__	};write,the,specified,manifest,param,manifest,the,manifest,to,write,throws,ioexception,of,the,manifest,cannot,be,written;public,void,write,manifest,manifest,manifest,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,meta,inf,manifest,mf,write,entry,entry,manifest,write
JarWriter -> public void writeManifest(Manifest manifest) throws IOException;1531139970;Write the specified manifest._@param manifest the manifest to write_@throws IOException of the manifest cannot be written;public void writeManifest(Manifest manifest) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry("META-INF/MANIFEST.MF")__		writeEntry(entry, manifest::write)__	};write,the,specified,manifest,param,manifest,the,manifest,to,write,throws,ioexception,of,the,manifest,cannot,be,written;public,void,write,manifest,manifest,manifest,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,meta,inf,manifest,mf,write,entry,entry,manifest,write
JarWriter -> public void writeManifest(Manifest manifest) throws IOException;1532738143;Write the specified manifest._@param manifest the manifest to write_@throws IOException of the manifest cannot be written;public void writeManifest(Manifest manifest) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry("META-INF/MANIFEST.MF")__		writeEntry(entry, manifest::write)__	};write,the,specified,manifest,param,manifest,the,manifest,to,write,throws,ioexception,of,the,manifest,cannot,be,written;public,void,write,manifest,manifest,manifest,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,meta,inf,manifest,mf,write,entry,entry,manifest,write
JarWriter -> public JarWriter(File file) throws FileNotFoundException, IOException;1507173536;Create a new {@link JarWriter} instance._@param file the file to write_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file) throws FileNotFoundException, IOException {_		this(file, null)__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,throws,file,not,found,exception,ioexception,this,file,null
JarWriter -> public JarWriter(File file) throws FileNotFoundException, IOException;1509282686;Create a new {@link JarWriter} instance._@param file the file to write_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file) throws FileNotFoundException, IOException {_		this(file, null)__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,throws,file,not,found,exception,ioexception,this,file,null
JarWriter -> public JarWriter(File file) throws FileNotFoundException, IOException;1512760426;Create a new {@link JarWriter} instance._@param file the file to write_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file) throws FileNotFoundException, IOException {_		this(file, null)__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,throws,file,not,found,exception,ioexception,this,file,null
JarWriter -> public JarWriter(File file) throws FileNotFoundException, IOException;1516194952;Create a new {@link JarWriter} instance._@param file the file to write_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file) throws FileNotFoundException, IOException {_		this(file, null)__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,throws,file,not,found,exception,ioexception,this,file,null
JarWriter -> public JarWriter(File file) throws FileNotFoundException, IOException;1516667888;Create a new {@link JarWriter} instance._@param file the file to write_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file) throws FileNotFoundException, IOException {_		this(file, null)__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,throws,file,not,found,exception,ioexception,this,file,null
JarWriter -> public JarWriter(File file) throws FileNotFoundException, IOException;1517485113;Create a new {@link JarWriter} instance._@param file the file to write_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file) throws FileNotFoundException, IOException {_		this(file, null)__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,throws,file,not,found,exception,ioexception,this,file,null
JarWriter -> public JarWriter(File file) throws FileNotFoundException, IOException;1519099437;Create a new {@link JarWriter} instance._@param file the file to write_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file) throws FileNotFoundException, IOException {_		this(file, null)__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,throws,file,not,found,exception,ioexception,this,file,null
JarWriter -> public JarWriter(File file) throws FileNotFoundException, IOException;1519669562;Create a new {@link JarWriter} instance._@param file the file to write_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file) throws FileNotFoundException, IOException {_		this(file, null)__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,throws,file,not,found,exception,ioexception,this,file,null
JarWriter -> public JarWriter(File file) throws FileNotFoundException, IOException;1525376698;Create a new {@link JarWriter} instance._@param file the file to write_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file) throws FileNotFoundException, IOException {_		this(file, null)__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,throws,file,not,found,exception,ioexception,this,file,null
JarWriter -> public JarWriter(File file) throws FileNotFoundException, IOException;1526031125;Create a new {@link JarWriter} instance._@param file the file to write_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file) throws FileNotFoundException, IOException {_		this(file, null)__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,throws,file,not,found,exception,ioexception,this,file,null
JarWriter -> public JarWriter(File file) throws FileNotFoundException, IOException;1529435218;Create a new {@link JarWriter} instance._@param file the file to write_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file) throws FileNotFoundException, IOException {_		this(file, null)__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,throws,file,not,found,exception,ioexception,this,file,null
JarWriter -> public JarWriter(File file) throws FileNotFoundException, IOException;1531139970;Create a new {@link JarWriter} instance._@param file the file to write_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file) throws FileNotFoundException, IOException {_		this(file, null)__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,throws,file,not,found,exception,ioexception,this,file,null
JarWriter -> public JarWriter(File file) throws FileNotFoundException, IOException;1532738143;Create a new {@link JarWriter} instance._@param file the file to write_@throws IOException if the file cannot be opened_@throws FileNotFoundException if the file cannot be found;public JarWriter(File file) throws FileNotFoundException, IOException {_		this(file, null)__	};create,a,new,link,jar,writer,instance,param,file,the,file,to,write,throws,ioexception,if,the,file,cannot,be,opened,throws,file,not,found,exception,if,the,file,cannot,be,found;public,jar,writer,file,file,throws,file,not,found,exception,ioexception,this,file,null
JarWriter -> public void writeEntries(JarFile jarFile) throws IOException;1507173536;Write all entries from the specified jar file._@param jarFile the source jar file_@throws IOException if the entries cannot be written;public void writeEntries(JarFile jarFile) throws IOException {_		this.writeEntries(jarFile, new IdentityEntryTransformer())__	};write,all,entries,from,the,specified,jar,file,param,jar,file,the,source,jar,file,throws,ioexception,if,the,entries,cannot,be,written;public,void,write,entries,jar,file,jar,file,throws,ioexception,this,write,entries,jar,file,new,identity,entry,transformer
JarWriter -> public void writeEntries(JarFile jarFile) throws IOException;1509282686;Write all entries from the specified jar file._@param jarFile the source jar file_@throws IOException if the entries cannot be written;public void writeEntries(JarFile jarFile) throws IOException {_		this.writeEntries(jarFile, new IdentityEntryTransformer())__	};write,all,entries,from,the,specified,jar,file,param,jar,file,the,source,jar,file,throws,ioexception,if,the,entries,cannot,be,written;public,void,write,entries,jar,file,jar,file,throws,ioexception,this,write,entries,jar,file,new,identity,entry,transformer
JarWriter -> public void writeEntries(JarFile jarFile) throws IOException;1512760426;Write all entries from the specified jar file._@param jarFile the source jar file_@throws IOException if the entries cannot be written;public void writeEntries(JarFile jarFile) throws IOException {_		this.writeEntries(jarFile, new IdentityEntryTransformer())__	};write,all,entries,from,the,specified,jar,file,param,jar,file,the,source,jar,file,throws,ioexception,if,the,entries,cannot,be,written;public,void,write,entries,jar,file,jar,file,throws,ioexception,this,write,entries,jar,file,new,identity,entry,transformer
JarWriter -> public void writeEntries(JarFile jarFile) throws IOException;1516194952;Write all entries from the specified jar file._@param jarFile the source jar file_@throws IOException if the entries cannot be written;public void writeEntries(JarFile jarFile) throws IOException {_		this.writeEntries(jarFile, new IdentityEntryTransformer())__	};write,all,entries,from,the,specified,jar,file,param,jar,file,the,source,jar,file,throws,ioexception,if,the,entries,cannot,be,written;public,void,write,entries,jar,file,jar,file,throws,ioexception,this,write,entries,jar,file,new,identity,entry,transformer
JarWriter -> public void writeEntries(JarFile jarFile) throws IOException;1516667888;Write all entries from the specified jar file._@param jarFile the source jar file_@throws IOException if the entries cannot be written;public void writeEntries(JarFile jarFile) throws IOException {_		this.writeEntries(jarFile, new IdentityEntryTransformer())__	};write,all,entries,from,the,specified,jar,file,param,jar,file,the,source,jar,file,throws,ioexception,if,the,entries,cannot,be,written;public,void,write,entries,jar,file,jar,file,throws,ioexception,this,write,entries,jar,file,new,identity,entry,transformer
JarWriter -> public void writeEntries(JarFile jarFile) throws IOException;1517485113;Write all entries from the specified jar file._@param jarFile the source jar file_@throws IOException if the entries cannot be written;public void writeEntries(JarFile jarFile) throws IOException {_		this.writeEntries(jarFile, new IdentityEntryTransformer(), NEVER_UNPACK)__	};write,all,entries,from,the,specified,jar,file,param,jar,file,the,source,jar,file,throws,ioexception,if,the,entries,cannot,be,written;public,void,write,entries,jar,file,jar,file,throws,ioexception,this,write,entries,jar,file,new,identity,entry,transformer
JarWriter -> public void writeEntries(JarFile jarFile) throws IOException;1519099437;Write all entries from the specified jar file._@param jarFile the source jar file_@throws IOException if the entries cannot be written;public void writeEntries(JarFile jarFile) throws IOException {_		this.writeEntries(jarFile, new IdentityEntryTransformer(), NEVER_UNPACK)__	};write,all,entries,from,the,specified,jar,file,param,jar,file,the,source,jar,file,throws,ioexception,if,the,entries,cannot,be,written;public,void,write,entries,jar,file,jar,file,throws,ioexception,this,write,entries,jar,file,new,identity,entry,transformer
JarWriter -> public void writeEntries(JarFile jarFile) throws IOException;1519669562;Write all entries from the specified jar file._@param jarFile the source jar file_@throws IOException if the entries cannot be written;public void writeEntries(JarFile jarFile) throws IOException {_		this.writeEntries(jarFile, new IdentityEntryTransformer(), NEVER_UNPACK)__	};write,all,entries,from,the,specified,jar,file,param,jar,file,the,source,jar,file,throws,ioexception,if,the,entries,cannot,be,written;public,void,write,entries,jar,file,jar,file,throws,ioexception,this,write,entries,jar,file,new,identity,entry,transformer
JarWriter -> public void writeEntries(JarFile jarFile) throws IOException;1525376698;Write all entries from the specified jar file._@param jarFile the source jar file_@throws IOException if the entries cannot be written;public void writeEntries(JarFile jarFile) throws IOException {_		this.writeEntries(jarFile, new IdentityEntryTransformer(), NEVER_UNPACK)__	};write,all,entries,from,the,specified,jar,file,param,jar,file,the,source,jar,file,throws,ioexception,if,the,entries,cannot,be,written;public,void,write,entries,jar,file,jar,file,throws,ioexception,this,write,entries,jar,file,new,identity,entry,transformer
JarWriter -> public void writeEntries(JarFile jarFile) throws IOException;1526031125;Write all entries from the specified jar file._@param jarFile the source jar file_@throws IOException if the entries cannot be written;public void writeEntries(JarFile jarFile) throws IOException {_		this.writeEntries(jarFile, new IdentityEntryTransformer(), NEVER_UNPACK)__	};write,all,entries,from,the,specified,jar,file,param,jar,file,the,source,jar,file,throws,ioexception,if,the,entries,cannot,be,written;public,void,write,entries,jar,file,jar,file,throws,ioexception,this,write,entries,jar,file,new,identity,entry,transformer
JarWriter -> public void writeEntries(JarFile jarFile) throws IOException;1529435218;Write all entries from the specified jar file._@param jarFile the source jar file_@throws IOException if the entries cannot be written;public void writeEntries(JarFile jarFile) throws IOException {_		this.writeEntries(jarFile, new IdentityEntryTransformer(), NEVER_UNPACK)__	};write,all,entries,from,the,specified,jar,file,param,jar,file,the,source,jar,file,throws,ioexception,if,the,entries,cannot,be,written;public,void,write,entries,jar,file,jar,file,throws,ioexception,this,write,entries,jar,file,new,identity,entry,transformer
JarWriter -> public void writeEntries(JarFile jarFile) throws IOException;1531139970;Write all entries from the specified jar file._@param jarFile the source jar file_@throws IOException if the entries cannot be written;public void writeEntries(JarFile jarFile) throws IOException {_		this.writeEntries(jarFile, new IdentityEntryTransformer(), NEVER_UNPACK)__	};write,all,entries,from,the,specified,jar,file,param,jar,file,the,source,jar,file,throws,ioexception,if,the,entries,cannot,be,written;public,void,write,entries,jar,file,jar,file,throws,ioexception,this,write,entries,jar,file,new,identity,entry,transformer
JarWriter -> public void writeEntries(JarFile jarFile) throws IOException;1532738143;Write all entries from the specified jar file._@param jarFile the source jar file_@throws IOException if the entries cannot be written;public void writeEntries(JarFile jarFile) throws IOException {_		this.writeEntries(jarFile, new IdentityEntryTransformer(), NEVER_UNPACK)__	};write,all,entries,from,the,specified,jar,file,param,jar,file,the,source,jar,file,throws,ioexception,if,the,entries,cannot,be,written;public,void,write,entries,jar,file,jar,file,throws,ioexception,this,write,entries,jar,file,new,identity,entry,transformer
JarWriter -> private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter, 			UnpackHandler unpackHandler) throws IOException;1517485113;Perform the actual write of a {@link JarEntry}. All other {@code write} methods_delegate to this one._@param entry the entry to write_@param entryWriter the entry writer or {@code null} if there is no content_@param unpackHandler handles possible unpacking for the entry_@throws IOException in case of I/O errors;private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter,_			UnpackHandler unpackHandler) throws IOException {_		String parent = entry.getName()__		if (parent.endsWith("/")) {_			parent = parent.substring(0, parent.length() - 1)__			entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM)__		}_		else {_			entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM)__		}_		if (parent.lastIndexOf('/') != -1) {_			parent = parent.substring(0, parent.lastIndexOf('/') + 1)__			if (!parent.isEmpty()) {_				writeEntry(new JarArchiveEntry(parent), null, unpackHandler)__			}_		}__		if (this.writtenEntries.add(entry.getName())) {_			entryWriter = addUnpackCommentIfNecessary(entry, entryWriter, unpackHandler)__			this.jarOutput.putArchiveEntry(entry)__			if (entryWriter != null) {_				entryWriter.write(this.jarOutput)__			}_			this.jarOutput.closeArchiveEntry()__		}_	};perform,the,actual,write,of,a,link,jar,entry,all,other,code,write,methods,delegate,to,this,one,param,entry,the,entry,to,write,param,entry,writer,the,entry,writer,or,code,null,if,there,is,no,content,param,unpack,handler,handles,possible,unpacking,for,the,entry,throws,ioexception,in,case,of,i,o,errors;private,void,write,entry,jar,archive,entry,entry,entry,writer,entry,writer,unpack,handler,unpack,handler,throws,ioexception,string,parent,entry,get,name,if,parent,ends,with,parent,parent,substring,0,parent,length,1,entry,set,unix,mode,unix,stat,unix,stat,else,entry,set,unix,mode,unix,stat,unix,stat,if,parent,last,index,of,1,parent,parent,substring,0,parent,last,index,of,1,if,parent,is,empty,write,entry,new,jar,archive,entry,parent,null,unpack,handler,if,this,written,entries,add,entry,get,name,entry,writer,add,unpack,comment,if,necessary,entry,entry,writer,unpack,handler,this,jar,output,put,archive,entry,entry,if,entry,writer,null,entry,writer,write,this,jar,output,this,jar,output,close,archive,entry
JarWriter -> private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter, 			UnpackHandler unpackHandler) throws IOException;1519099437;Perform the actual write of a {@link JarEntry}. All other write methods_delegate to this one._@param entry the entry to write_@param entryWriter the entry writer or {@code null} if there is no content_@param unpackHandler handles possible unpacking for the entry_@throws IOException in case of I/O errors;private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter,_			UnpackHandler unpackHandler) throws IOException {_		String parent = entry.getName()__		if (parent.endsWith("/")) {_			parent = parent.substring(0, parent.length() - 1)__			entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM)__		}_		else {_			entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM)__		}_		if (parent.lastIndexOf('/') != -1) {_			parent = parent.substring(0, parent.lastIndexOf('/') + 1)__			if (!parent.isEmpty()) {_				writeEntry(new JarArchiveEntry(parent), null, unpackHandler)__			}_		}__		if (this.writtenEntries.add(entry.getName())) {_			entryWriter = addUnpackCommentIfNecessary(entry, entryWriter, unpackHandler)__			this.jarOutput.putArchiveEntry(entry)__			if (entryWriter != null) {_				entryWriter.write(this.jarOutput)__			}_			this.jarOutput.closeArchiveEntry()__		}_	};perform,the,actual,write,of,a,link,jar,entry,all,other,write,methods,delegate,to,this,one,param,entry,the,entry,to,write,param,entry,writer,the,entry,writer,or,code,null,if,there,is,no,content,param,unpack,handler,handles,possible,unpacking,for,the,entry,throws,ioexception,in,case,of,i,o,errors;private,void,write,entry,jar,archive,entry,entry,entry,writer,entry,writer,unpack,handler,unpack,handler,throws,ioexception,string,parent,entry,get,name,if,parent,ends,with,parent,parent,substring,0,parent,length,1,entry,set,unix,mode,unix,stat,unix,stat,else,entry,set,unix,mode,unix,stat,unix,stat,if,parent,last,index,of,1,parent,parent,substring,0,parent,last,index,of,1,if,parent,is,empty,write,entry,new,jar,archive,entry,parent,null,unpack,handler,if,this,written,entries,add,entry,get,name,entry,writer,add,unpack,comment,if,necessary,entry,entry,writer,unpack,handler,this,jar,output,put,archive,entry,entry,if,entry,writer,null,entry,writer,write,this,jar,output,this,jar,output,close,archive,entry
JarWriter -> private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter, 			UnpackHandler unpackHandler) throws IOException;1519669562;Perform the actual write of a {@link JarEntry}. All other write methods delegate to_this one._@param entry the entry to write_@param entryWriter the entry writer or {@code null} if there is no content_@param unpackHandler handles possible unpacking for the entry_@throws IOException in case of I/O errors;private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter,_			UnpackHandler unpackHandler) throws IOException {_		String parent = entry.getName()__		if (parent.endsWith("/")) {_			parent = parent.substring(0, parent.length() - 1)__			entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM)__		}_		else {_			entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM)__		}_		if (parent.lastIndexOf('/') != -1) {_			parent = parent.substring(0, parent.lastIndexOf('/') + 1)__			if (!parent.isEmpty()) {_				writeEntry(new JarArchiveEntry(parent), null, unpackHandler)__			}_		}__		if (this.writtenEntries.add(entry.getName())) {_			entryWriter = addUnpackCommentIfNecessary(entry, entryWriter, unpackHandler)__			this.jarOutput.putArchiveEntry(entry)__			if (entryWriter != null) {_				entryWriter.write(this.jarOutput)__			}_			this.jarOutput.closeArchiveEntry()__		}_	};perform,the,actual,write,of,a,link,jar,entry,all,other,write,methods,delegate,to,this,one,param,entry,the,entry,to,write,param,entry,writer,the,entry,writer,or,code,null,if,there,is,no,content,param,unpack,handler,handles,possible,unpacking,for,the,entry,throws,ioexception,in,case,of,i,o,errors;private,void,write,entry,jar,archive,entry,entry,entry,writer,entry,writer,unpack,handler,unpack,handler,throws,ioexception,string,parent,entry,get,name,if,parent,ends,with,parent,parent,substring,0,parent,length,1,entry,set,unix,mode,unix,stat,unix,stat,else,entry,set,unix,mode,unix,stat,unix,stat,if,parent,last,index,of,1,parent,parent,substring,0,parent,last,index,of,1,if,parent,is,empty,write,entry,new,jar,archive,entry,parent,null,unpack,handler,if,this,written,entries,add,entry,get,name,entry,writer,add,unpack,comment,if,necessary,entry,entry,writer,unpack,handler,this,jar,output,put,archive,entry,entry,if,entry,writer,null,entry,writer,write,this,jar,output,this,jar,output,close,archive,entry
JarWriter -> private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter, 			UnpackHandler unpackHandler) throws IOException;1525376698;Perform the actual write of a {@link JarEntry}. All other write methods delegate to_this one._@param entry the entry to write_@param entryWriter the entry writer or {@code null} if there is no content_@param unpackHandler handles possible unpacking for the entry_@throws IOException in case of I/O errors;private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter,_			UnpackHandler unpackHandler) throws IOException {_		String parent = entry.getName()__		if (parent.endsWith("/")) {_			parent = parent.substring(0, parent.length() - 1)__			entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM)__		}_		else {_			entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM)__		}_		if (parent.lastIndexOf('/') != -1) {_			parent = parent.substring(0, parent.lastIndexOf('/') + 1)__			if (!parent.isEmpty()) {_				writeEntry(new JarArchiveEntry(parent), null, unpackHandler)__			}_		}__		if (this.writtenEntries.add(entry.getName())) {_			entryWriter = addUnpackCommentIfNecessary(entry, entryWriter, unpackHandler)__			this.jarOutput.putArchiveEntry(entry)__			if (entryWriter != null) {_				entryWriter.write(this.jarOutput)__			}_			this.jarOutput.closeArchiveEntry()__		}_	};perform,the,actual,write,of,a,link,jar,entry,all,other,write,methods,delegate,to,this,one,param,entry,the,entry,to,write,param,entry,writer,the,entry,writer,or,code,null,if,there,is,no,content,param,unpack,handler,handles,possible,unpacking,for,the,entry,throws,ioexception,in,case,of,i,o,errors;private,void,write,entry,jar,archive,entry,entry,entry,writer,entry,writer,unpack,handler,unpack,handler,throws,ioexception,string,parent,entry,get,name,if,parent,ends,with,parent,parent,substring,0,parent,length,1,entry,set,unix,mode,unix,stat,unix,stat,else,entry,set,unix,mode,unix,stat,unix,stat,if,parent,last,index,of,1,parent,parent,substring,0,parent,last,index,of,1,if,parent,is,empty,write,entry,new,jar,archive,entry,parent,null,unpack,handler,if,this,written,entries,add,entry,get,name,entry,writer,add,unpack,comment,if,necessary,entry,entry,writer,unpack,handler,this,jar,output,put,archive,entry,entry,if,entry,writer,null,entry,writer,write,this,jar,output,this,jar,output,close,archive,entry
JarWriter -> private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter, 			UnpackHandler unpackHandler) throws IOException;1526031125;Perform the actual write of a {@link JarEntry}. All other write methods delegate to_this one._@param entry the entry to write_@param entryWriter the entry writer or {@code null} if there is no content_@param unpackHandler handles possible unpacking for the entry_@throws IOException in case of I/O errors;private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter,_			UnpackHandler unpackHandler) throws IOException {_		String parent = entry.getName()__		if (parent.endsWith("/")) {_			parent = parent.substring(0, parent.length() - 1)__			entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM)__		}_		else {_			entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM)__		}_		if (parent.lastIndexOf('/') != -1) {_			parent = parent.substring(0, parent.lastIndexOf('/') + 1)__			if (!parent.isEmpty()) {_				writeEntry(new JarArchiveEntry(parent), null, unpackHandler)__			}_		}__		if (this.writtenEntries.add(entry.getName())) {_			entryWriter = addUnpackCommentIfNecessary(entry, entryWriter, unpackHandler)__			this.jarOutput.putArchiveEntry(entry)__			if (entryWriter != null) {_				entryWriter.write(this.jarOutput)__			}_			this.jarOutput.closeArchiveEntry()__		}_	};perform,the,actual,write,of,a,link,jar,entry,all,other,write,methods,delegate,to,this,one,param,entry,the,entry,to,write,param,entry,writer,the,entry,writer,or,code,null,if,there,is,no,content,param,unpack,handler,handles,possible,unpacking,for,the,entry,throws,ioexception,in,case,of,i,o,errors;private,void,write,entry,jar,archive,entry,entry,entry,writer,entry,writer,unpack,handler,unpack,handler,throws,ioexception,string,parent,entry,get,name,if,parent,ends,with,parent,parent,substring,0,parent,length,1,entry,set,unix,mode,unix,stat,unix,stat,else,entry,set,unix,mode,unix,stat,unix,stat,if,parent,last,index,of,1,parent,parent,substring,0,parent,last,index,of,1,if,parent,is,empty,write,entry,new,jar,archive,entry,parent,null,unpack,handler,if,this,written,entries,add,entry,get,name,entry,writer,add,unpack,comment,if,necessary,entry,entry,writer,unpack,handler,this,jar,output,put,archive,entry,entry,if,entry,writer,null,entry,writer,write,this,jar,output,this,jar,output,close,archive,entry
JarWriter -> private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter, 			UnpackHandler unpackHandler) throws IOException;1529435218;Perform the actual write of a {@link JarEntry}. All other write methods delegate to_this one._@param entry the entry to write_@param entryWriter the entry writer or {@code null} if there is no content_@param unpackHandler handles possible unpacking for the entry_@throws IOException in case of I/O errors;private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter,_			UnpackHandler unpackHandler) throws IOException {_		String parent = entry.getName()__		if (parent.endsWith("/")) {_			parent = parent.substring(0, parent.length() - 1)__			entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM)__		}_		else {_			entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM)__		}_		if (parent.lastIndexOf('/') != -1) {_			parent = parent.substring(0, parent.lastIndexOf('/') + 1)__			if (!parent.isEmpty()) {_				writeEntry(new JarArchiveEntry(parent), null, unpackHandler)__			}_		}__		if (this.writtenEntries.add(entry.getName())) {_			entryWriter = addUnpackCommentIfNecessary(entry, entryWriter, unpackHandler)__			this.jarOutput.putArchiveEntry(entry)__			if (entryWriter != null) {_				entryWriter.write(this.jarOutput)__			}_			this.jarOutput.closeArchiveEntry()__		}_	};perform,the,actual,write,of,a,link,jar,entry,all,other,write,methods,delegate,to,this,one,param,entry,the,entry,to,write,param,entry,writer,the,entry,writer,or,code,null,if,there,is,no,content,param,unpack,handler,handles,possible,unpacking,for,the,entry,throws,ioexception,in,case,of,i,o,errors;private,void,write,entry,jar,archive,entry,entry,entry,writer,entry,writer,unpack,handler,unpack,handler,throws,ioexception,string,parent,entry,get,name,if,parent,ends,with,parent,parent,substring,0,parent,length,1,entry,set,unix,mode,unix,stat,unix,stat,else,entry,set,unix,mode,unix,stat,unix,stat,if,parent,last,index,of,1,parent,parent,substring,0,parent,last,index,of,1,if,parent,is,empty,write,entry,new,jar,archive,entry,parent,null,unpack,handler,if,this,written,entries,add,entry,get,name,entry,writer,add,unpack,comment,if,necessary,entry,entry,writer,unpack,handler,this,jar,output,put,archive,entry,entry,if,entry,writer,null,entry,writer,write,this,jar,output,this,jar,output,close,archive,entry
JarWriter -> private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter, 			UnpackHandler unpackHandler) throws IOException;1531139970;Perform the actual write of a {@link JarEntry}. All other write methods delegate to_this one._@param entry the entry to write_@param entryWriter the entry writer or {@code null} if there is no content_@param unpackHandler handles possible unpacking for the entry_@throws IOException in case of I/O errors;private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter,_			UnpackHandler unpackHandler) throws IOException {_		String parent = entry.getName()__		if (parent.endsWith("/")) {_			parent = parent.substring(0, parent.length() - 1)__			entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM)__		}_		else {_			entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM)__		}_		if (parent.lastIndexOf('/') != -1) {_			parent = parent.substring(0, parent.lastIndexOf('/') + 1)__			if (!parent.isEmpty()) {_				writeEntry(new JarArchiveEntry(parent), null, unpackHandler)__			}_		}__		if (this.writtenEntries.add(entry.getName())) {_			entryWriter = addUnpackCommentIfNecessary(entry, entryWriter, unpackHandler)__			this.jarOutput.putArchiveEntry(entry)__			if (entryWriter != null) {_				entryWriter.write(this.jarOutput)__			}_			this.jarOutput.closeArchiveEntry()__		}_	};perform,the,actual,write,of,a,link,jar,entry,all,other,write,methods,delegate,to,this,one,param,entry,the,entry,to,write,param,entry,writer,the,entry,writer,or,code,null,if,there,is,no,content,param,unpack,handler,handles,possible,unpacking,for,the,entry,throws,ioexception,in,case,of,i,o,errors;private,void,write,entry,jar,archive,entry,entry,entry,writer,entry,writer,unpack,handler,unpack,handler,throws,ioexception,string,parent,entry,get,name,if,parent,ends,with,parent,parent,substring,0,parent,length,1,entry,set,unix,mode,unix,stat,unix,stat,else,entry,set,unix,mode,unix,stat,unix,stat,if,parent,last,index,of,1,parent,parent,substring,0,parent,last,index,of,1,if,parent,is,empty,write,entry,new,jar,archive,entry,parent,null,unpack,handler,if,this,written,entries,add,entry,get,name,entry,writer,add,unpack,comment,if,necessary,entry,entry,writer,unpack,handler,this,jar,output,put,archive,entry,entry,if,entry,writer,null,entry,writer,write,this,jar,output,this,jar,output,close,archive,entry
JarWriter -> private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter, 			UnpackHandler unpackHandler) throws IOException;1532738143;Perform the actual write of a {@link JarEntry}. All other write methods delegate to_this one._@param entry the entry to write_@param entryWriter the entry writer or {@code null} if there is no content_@param unpackHandler handles possible unpacking for the entry_@throws IOException in case of I/O errors;private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter,_			UnpackHandler unpackHandler) throws IOException {_		String parent = entry.getName()__		if (parent.endsWith("/")) {_			parent = parent.substring(0, parent.length() - 1)__			entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM)__		}_		else {_			entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM)__		}_		if (parent.lastIndexOf('/') != -1) {_			parent = parent.substring(0, parent.lastIndexOf('/') + 1)__			if (!parent.isEmpty()) {_				writeEntry(new JarArchiveEntry(parent), null, unpackHandler)__			}_		}__		if (this.writtenEntries.add(entry.getName())) {_			entryWriter = addUnpackCommentIfNecessary(entry, entryWriter, unpackHandler)__			this.jarOutput.putArchiveEntry(entry)__			if (entryWriter != null) {_				entryWriter.write(this.jarOutput)__			}_			this.jarOutput.closeArchiveEntry()__		}_	};perform,the,actual,write,of,a,link,jar,entry,all,other,write,methods,delegate,to,this,one,param,entry,the,entry,to,write,param,entry,writer,the,entry,writer,or,code,null,if,there,is,no,content,param,unpack,handler,handles,possible,unpacking,for,the,entry,throws,ioexception,in,case,of,i,o,errors;private,void,write,entry,jar,archive,entry,entry,entry,writer,entry,writer,unpack,handler,unpack,handler,throws,ioexception,string,parent,entry,get,name,if,parent,ends,with,parent,parent,substring,0,parent,length,1,entry,set,unix,mode,unix,stat,unix,stat,else,entry,set,unix,mode,unix,stat,unix,stat,if,parent,last,index,of,1,parent,parent,substring,0,parent,last,index,of,1,if,parent,is,empty,write,entry,new,jar,archive,entry,parent,null,unpack,handler,if,this,written,entries,add,entry,get,name,entry,writer,add,unpack,comment,if,necessary,entry,entry,writer,unpack,handler,this,jar,output,put,archive,entry,entry,if,entry,writer,null,entry,writer,write,this,jar,output,this,jar,output,close,archive,entry
JarWriter -> @Override 	public void writeEntry(String entryName, InputStream inputStream) throws IOException;1507173536;Writes an entry. The {@code inputStream} is closed once the entry has been written_@param entryName The name of the entry_@param inputStream The stream from which the entry's data can be read_@throws IOException if the write fails;@Override_	public void writeEntry(String entryName, InputStream inputStream) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry(entryName)__		writeEntry(entry, new InputStreamEntryWriter(inputStream, true))__	};writes,an,entry,the,code,input,stream,is,closed,once,the,entry,has,been,written,param,entry,name,the,name,of,the,entry,param,input,stream,the,stream,from,which,the,entry,s,data,can,be,read,throws,ioexception,if,the,write,fails;override,public,void,write,entry,string,entry,name,input,stream,input,stream,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,entry,name,write,entry,entry,new,input,stream,entry,writer,input,stream,true
JarWriter -> @Override 	public void writeEntry(String entryName, InputStream inputStream) throws IOException;1509282686;Writes an entry. The {@code inputStream} is closed once the entry has been written_@param entryName The name of the entry_@param inputStream The stream from which the entry's data can be read_@throws IOException if the write fails;@Override_	public void writeEntry(String entryName, InputStream inputStream) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry(entryName)__		writeEntry(entry, new InputStreamEntryWriter(inputStream, true))__	};writes,an,entry,the,code,input,stream,is,closed,once,the,entry,has,been,written,param,entry,name,the,name,of,the,entry,param,input,stream,the,stream,from,which,the,entry,s,data,can,be,read,throws,ioexception,if,the,write,fails;override,public,void,write,entry,string,entry,name,input,stream,input,stream,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,entry,name,write,entry,entry,new,input,stream,entry,writer,input,stream,true
JarWriter -> @Override 	public void writeEntry(String entryName, InputStream inputStream) throws IOException;1512760426;Writes an entry. The {@code inputStream} is closed once the entry has been written_@param entryName The name of the entry_@param inputStream The stream from which the entry's data can be read_@throws IOException if the write fails;@Override_	public void writeEntry(String entryName, InputStream inputStream) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry(entryName)__		writeEntry(entry, new InputStreamEntryWriter(inputStream, true))__	};writes,an,entry,the,code,input,stream,is,closed,once,the,entry,has,been,written,param,entry,name,the,name,of,the,entry,param,input,stream,the,stream,from,which,the,entry,s,data,can,be,read,throws,ioexception,if,the,write,fails;override,public,void,write,entry,string,entry,name,input,stream,input,stream,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,entry,name,write,entry,entry,new,input,stream,entry,writer,input,stream,true
JarWriter -> @Override 	public void writeEntry(String entryName, InputStream inputStream) throws IOException;1516194952;Writes an entry. The {@code inputStream} is closed once the entry has been written_@param entryName The name of the entry_@param inputStream The stream from which the entry's data can be read_@throws IOException if the write fails;@Override_	public void writeEntry(String entryName, InputStream inputStream) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry(entryName)__		writeEntry(entry, new InputStreamEntryWriter(inputStream, true))__	};writes,an,entry,the,code,input,stream,is,closed,once,the,entry,has,been,written,param,entry,name,the,name,of,the,entry,param,input,stream,the,stream,from,which,the,entry,s,data,can,be,read,throws,ioexception,if,the,write,fails;override,public,void,write,entry,string,entry,name,input,stream,input,stream,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,entry,name,write,entry,entry,new,input,stream,entry,writer,input,stream,true
JarWriter -> @Override 	public void writeEntry(String entryName, InputStream inputStream) throws IOException;1516667888;Writes an entry. The {@code inputStream} is closed once the entry has been written_@param entryName The name of the entry_@param inputStream The stream from which the entry's data can be read_@throws IOException if the write fails;@Override_	public void writeEntry(String entryName, InputStream inputStream) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry(entryName)__		writeEntry(entry, new InputStreamEntryWriter(inputStream, true))__	};writes,an,entry,the,code,input,stream,is,closed,once,the,entry,has,been,written,param,entry,name,the,name,of,the,entry,param,input,stream,the,stream,from,which,the,entry,s,data,can,be,read,throws,ioexception,if,the,write,fails;override,public,void,write,entry,string,entry,name,input,stream,input,stream,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,entry,name,write,entry,entry,new,input,stream,entry,writer,input,stream,true
JarWriter -> @Override 	public void writeEntry(String entryName, InputStream inputStream) throws IOException;1517485113;Writes an entry. The {@code inputStream} is closed once the entry has been written_@param entryName The name of the entry_@param inputStream The stream from which the entry's data can be read_@throws IOException if the write fails;@Override_	public void writeEntry(String entryName, InputStream inputStream) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry(entryName)__		writeEntry(entry, new InputStreamEntryWriter(inputStream, true))__	};writes,an,entry,the,code,input,stream,is,closed,once,the,entry,has,been,written,param,entry,name,the,name,of,the,entry,param,input,stream,the,stream,from,which,the,entry,s,data,can,be,read,throws,ioexception,if,the,write,fails;override,public,void,write,entry,string,entry,name,input,stream,input,stream,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,entry,name,write,entry,entry,new,input,stream,entry,writer,input,stream,true
JarWriter -> @Override 	public void writeEntry(String entryName, InputStream inputStream) throws IOException;1519099437;Writes an entry. The {@code inputStream} is closed once the entry has been written_@param entryName The name of the entry_@param inputStream The stream from which the entry's data can be read_@throws IOException if the write fails;@Override_	public void writeEntry(String entryName, InputStream inputStream) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry(entryName)__		writeEntry(entry, new InputStreamEntryWriter(inputStream, true))__	};writes,an,entry,the,code,input,stream,is,closed,once,the,entry,has,been,written,param,entry,name,the,name,of,the,entry,param,input,stream,the,stream,from,which,the,entry,s,data,can,be,read,throws,ioexception,if,the,write,fails;override,public,void,write,entry,string,entry,name,input,stream,input,stream,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,entry,name,write,entry,entry,new,input,stream,entry,writer,input,stream,true
JarWriter -> @Override 	public void writeEntry(String entryName, InputStream inputStream) throws IOException;1519669562;Writes an entry. The {@code inputStream} is closed once the entry has been written_@param entryName The name of the entry_@param inputStream The stream from which the entry's data can be read_@throws IOException if the write fails;@Override_	public void writeEntry(String entryName, InputStream inputStream) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry(entryName)__		writeEntry(entry, new InputStreamEntryWriter(inputStream, true))__	};writes,an,entry,the,code,input,stream,is,closed,once,the,entry,has,been,written,param,entry,name,the,name,of,the,entry,param,input,stream,the,stream,from,which,the,entry,s,data,can,be,read,throws,ioexception,if,the,write,fails;override,public,void,write,entry,string,entry,name,input,stream,input,stream,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,entry,name,write,entry,entry,new,input,stream,entry,writer,input,stream,true
JarWriter -> @Override 	public void writeEntry(String entryName, InputStream inputStream) throws IOException;1525376698;Writes an entry. The {@code inputStream} is closed once the entry has been written_@param entryName The name of the entry_@param inputStream The stream from which the entry's data can be read_@throws IOException if the write fails;@Override_	public void writeEntry(String entryName, InputStream inputStream) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry(entryName)__		writeEntry(entry, new InputStreamEntryWriter(inputStream, true))__	};writes,an,entry,the,code,input,stream,is,closed,once,the,entry,has,been,written,param,entry,name,the,name,of,the,entry,param,input,stream,the,stream,from,which,the,entry,s,data,can,be,read,throws,ioexception,if,the,write,fails;override,public,void,write,entry,string,entry,name,input,stream,input,stream,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,entry,name,write,entry,entry,new,input,stream,entry,writer,input,stream,true
JarWriter -> @Override 	public void writeEntry(String entryName, InputStream inputStream) throws IOException;1526031125;Writes an entry. The {@code inputStream} is closed once the entry has been written_@param entryName The name of the entry_@param inputStream The stream from which the entry's data can be read_@throws IOException if the write fails;@Override_	public void writeEntry(String entryName, InputStream inputStream) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry(entryName)__		writeEntry(entry, new InputStreamEntryWriter(inputStream, true))__	};writes,an,entry,the,code,input,stream,is,closed,once,the,entry,has,been,written,param,entry,name,the,name,of,the,entry,param,input,stream,the,stream,from,which,the,entry,s,data,can,be,read,throws,ioexception,if,the,write,fails;override,public,void,write,entry,string,entry,name,input,stream,input,stream,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,entry,name,write,entry,entry,new,input,stream,entry,writer,input,stream,true
JarWriter -> @Override 	public void writeEntry(String entryName, InputStream inputStream) throws IOException;1529435218;Writes an entry. The {@code inputStream} is closed once the entry has been written_@param entryName The name of the entry_@param inputStream The stream from which the entry's data can be read_@throws IOException if the write fails;@Override_	public void writeEntry(String entryName, InputStream inputStream) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry(entryName)__		writeEntry(entry, new InputStreamEntryWriter(inputStream, true))__	};writes,an,entry,the,code,input,stream,is,closed,once,the,entry,has,been,written,param,entry,name,the,name,of,the,entry,param,input,stream,the,stream,from,which,the,entry,s,data,can,be,read,throws,ioexception,if,the,write,fails;override,public,void,write,entry,string,entry,name,input,stream,input,stream,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,entry,name,write,entry,entry,new,input,stream,entry,writer,input,stream,true
JarWriter -> @Override 	public void writeEntry(String entryName, InputStream inputStream) throws IOException;1531139970;Writes an entry. The {@code inputStream} is closed once the entry has been written_@param entryName The name of the entry_@param inputStream The stream from which the entry's data can be read_@throws IOException if the write fails;@Override_	public void writeEntry(String entryName, InputStream inputStream) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry(entryName)__		writeEntry(entry, new InputStreamEntryWriter(inputStream, true))__	};writes,an,entry,the,code,input,stream,is,closed,once,the,entry,has,been,written,param,entry,name,the,name,of,the,entry,param,input,stream,the,stream,from,which,the,entry,s,data,can,be,read,throws,ioexception,if,the,write,fails;override,public,void,write,entry,string,entry,name,input,stream,input,stream,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,entry,name,write,entry,entry,new,input,stream,entry,writer,input,stream,true
JarWriter -> @Override 	public void writeEntry(String entryName, InputStream inputStream) throws IOException;1532738143;Writes an entry. The {@code inputStream} is closed once the entry has been written_@param entryName the name of the entry_@param inputStream the stream from which the entry's data can be read_@throws IOException if the write fails;@Override_	public void writeEntry(String entryName, InputStream inputStream) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry(entryName)__		writeEntry(entry, new InputStreamEntryWriter(inputStream, true))__	};writes,an,entry,the,code,input,stream,is,closed,once,the,entry,has,been,written,param,entry,name,the,name,of,the,entry,param,input,stream,the,stream,from,which,the,entry,s,data,can,be,read,throws,ioexception,if,the,write,fails;override,public,void,write,entry,string,entry,name,input,stream,input,stream,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,entry,name,write,entry,entry,new,input,stream,entry,writer,input,stream,true
JarWriter -> private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter) 			throws IOException;1507173536;Perform the actual write of a {@link JarEntry}. All other {@code write} method_delegate to this one._@param entry the entry to write_@param entryWriter the entry writer or {@code null} if there is no content_@throws IOException in case of I/O errors;private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter)_			throws IOException {_		String parent = entry.getName()__		if (parent.endsWith("/")) {_			parent = parent.substring(0, parent.length() - 1)__			entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM)__		}_		else {_			entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM)__		}_		if (parent.lastIndexOf("/") != -1) {_			parent = parent.substring(0, parent.lastIndexOf("/") + 1)__			if (!parent.isEmpty()) {_				writeEntry(new JarArchiveEntry(parent), null)__			}_		}__		if (this.writtenEntries.add(entry.getName())) {_			this.jarOutput.putArchiveEntry(entry)__			if (entryWriter != null) {_				entryWriter.write(this.jarOutput)__			}_			this.jarOutput.closeArchiveEntry()__		}_	};perform,the,actual,write,of,a,link,jar,entry,all,other,code,write,method,delegate,to,this,one,param,entry,the,entry,to,write,param,entry,writer,the,entry,writer,or,code,null,if,there,is,no,content,throws,ioexception,in,case,of,i,o,errors;private,void,write,entry,jar,archive,entry,entry,entry,writer,entry,writer,throws,ioexception,string,parent,entry,get,name,if,parent,ends,with,parent,parent,substring,0,parent,length,1,entry,set,unix,mode,unix,stat,unix,stat,else,entry,set,unix,mode,unix,stat,unix,stat,if,parent,last,index,of,1,parent,parent,substring,0,parent,last,index,of,1,if,parent,is,empty,write,entry,new,jar,archive,entry,parent,null,if,this,written,entries,add,entry,get,name,this,jar,output,put,archive,entry,entry,if,entry,writer,null,entry,writer,write,this,jar,output,this,jar,output,close,archive,entry
JarWriter -> private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter) 			throws IOException;1509282686;Perform the actual write of a {@link JarEntry}. All other {@code write} method_delegate to this one._@param entry the entry to write_@param entryWriter the entry writer or {@code null} if there is no content_@throws IOException in case of I/O errors;private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter)_			throws IOException {_		String parent = entry.getName()__		if (parent.endsWith("/")) {_			parent = parent.substring(0, parent.length() - 1)__			entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM)__		}_		else {_			entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM)__		}_		if (parent.lastIndexOf("/") != -1) {_			parent = parent.substring(0, parent.lastIndexOf("/") + 1)__			if (!parent.isEmpty()) {_				writeEntry(new JarArchiveEntry(parent), null)__			}_		}__		if (this.writtenEntries.add(entry.getName())) {_			this.jarOutput.putArchiveEntry(entry)__			if (entryWriter != null) {_				entryWriter.write(this.jarOutput)__			}_			this.jarOutput.closeArchiveEntry()__		}_	};perform,the,actual,write,of,a,link,jar,entry,all,other,code,write,method,delegate,to,this,one,param,entry,the,entry,to,write,param,entry,writer,the,entry,writer,or,code,null,if,there,is,no,content,throws,ioexception,in,case,of,i,o,errors;private,void,write,entry,jar,archive,entry,entry,entry,writer,entry,writer,throws,ioexception,string,parent,entry,get,name,if,parent,ends,with,parent,parent,substring,0,parent,length,1,entry,set,unix,mode,unix,stat,unix,stat,else,entry,set,unix,mode,unix,stat,unix,stat,if,parent,last,index,of,1,parent,parent,substring,0,parent,last,index,of,1,if,parent,is,empty,write,entry,new,jar,archive,entry,parent,null,if,this,written,entries,add,entry,get,name,this,jar,output,put,archive,entry,entry,if,entry,writer,null,entry,writer,write,this,jar,output,this,jar,output,close,archive,entry
JarWriter -> private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter) 			throws IOException;1512760426;Perform the actual write of a {@link JarEntry}. All other {@code write} method_delegate to this one._@param entry the entry to write_@param entryWriter the entry writer or {@code null} if there is no content_@throws IOException in case of I/O errors;private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter)_			throws IOException {_		String parent = entry.getName()__		if (parent.endsWith("/")) {_			parent = parent.substring(0, parent.length() - 1)__			entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM)__		}_		else {_			entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM)__		}_		if (parent.lastIndexOf("/") != -1) {_			parent = parent.substring(0, parent.lastIndexOf("/") + 1)__			if (!parent.isEmpty()) {_				writeEntry(new JarArchiveEntry(parent), null)__			}_		}__		if (this.writtenEntries.add(entry.getName())) {_			this.jarOutput.putArchiveEntry(entry)__			if (entryWriter != null) {_				entryWriter.write(this.jarOutput)__			}_			this.jarOutput.closeArchiveEntry()__		}_	};perform,the,actual,write,of,a,link,jar,entry,all,other,code,write,method,delegate,to,this,one,param,entry,the,entry,to,write,param,entry,writer,the,entry,writer,or,code,null,if,there,is,no,content,throws,ioexception,in,case,of,i,o,errors;private,void,write,entry,jar,archive,entry,entry,entry,writer,entry,writer,throws,ioexception,string,parent,entry,get,name,if,parent,ends,with,parent,parent,substring,0,parent,length,1,entry,set,unix,mode,unix,stat,unix,stat,else,entry,set,unix,mode,unix,stat,unix,stat,if,parent,last,index,of,1,parent,parent,substring,0,parent,last,index,of,1,if,parent,is,empty,write,entry,new,jar,archive,entry,parent,null,if,this,written,entries,add,entry,get,name,this,jar,output,put,archive,entry,entry,if,entry,writer,null,entry,writer,write,this,jar,output,this,jar,output,close,archive,entry
JarWriter -> private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter) 			throws IOException;1516194952;Perform the actual write of a {@link JarEntry}. All other {@code write} method_delegate to this one._@param entry the entry to write_@param entryWriter the entry writer or {@code null} if there is no content_@throws IOException in case of I/O errors;private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter)_			throws IOException {_		String parent = entry.getName()__		if (parent.endsWith("/")) {_			parent = parent.substring(0, parent.length() - 1)__			entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM)__		}_		else {_			entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM)__		}_		if (parent.lastIndexOf("/") != -1) {_			parent = parent.substring(0, parent.lastIndexOf("/") + 1)__			if (!parent.isEmpty()) {_				writeEntry(new JarArchiveEntry(parent), null)__			}_		}__		if (this.writtenEntries.add(entry.getName())) {_			this.jarOutput.putArchiveEntry(entry)__			if (entryWriter != null) {_				entryWriter.write(this.jarOutput)__			}_			this.jarOutput.closeArchiveEntry()__		}_	};perform,the,actual,write,of,a,link,jar,entry,all,other,code,write,method,delegate,to,this,one,param,entry,the,entry,to,write,param,entry,writer,the,entry,writer,or,code,null,if,there,is,no,content,throws,ioexception,in,case,of,i,o,errors;private,void,write,entry,jar,archive,entry,entry,entry,writer,entry,writer,throws,ioexception,string,parent,entry,get,name,if,parent,ends,with,parent,parent,substring,0,parent,length,1,entry,set,unix,mode,unix,stat,unix,stat,else,entry,set,unix,mode,unix,stat,unix,stat,if,parent,last,index,of,1,parent,parent,substring,0,parent,last,index,of,1,if,parent,is,empty,write,entry,new,jar,archive,entry,parent,null,if,this,written,entries,add,entry,get,name,this,jar,output,put,archive,entry,entry,if,entry,writer,null,entry,writer,write,this,jar,output,this,jar,output,close,archive,entry
JarWriter -> private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter) 			throws IOException;1516667888;Perform the actual write of a {@link JarEntry}. All other {@code write} method_delegate to this one._@param entry the entry to write_@param entryWriter the entry writer or {@code null} if there is no content_@throws IOException in case of I/O errors;private void writeEntry(JarArchiveEntry entry, EntryWriter entryWriter)_			throws IOException {_		String parent = entry.getName()__		if (parent.endsWith("/")) {_			parent = parent.substring(0, parent.length() - 1)__			entry.setUnixMode(UnixStat.DIR_FLAG | UnixStat.DEFAULT_DIR_PERM)__		}_		else {_			entry.setUnixMode(UnixStat.FILE_FLAG | UnixStat.DEFAULT_FILE_PERM)__		}_		if (parent.lastIndexOf('/') != -1) {_			parent = parent.substring(0, parent.lastIndexOf('/') + 1)__			if (!parent.isEmpty()) {_				writeEntry(new JarArchiveEntry(parent), null)__			}_		}__		if (this.writtenEntries.add(entry.getName())) {_			this.jarOutput.putArchiveEntry(entry)__			if (entryWriter != null) {_				entryWriter.write(this.jarOutput)__			}_			this.jarOutput.closeArchiveEntry()__		}_	};perform,the,actual,write,of,a,link,jar,entry,all,other,code,write,method,delegate,to,this,one,param,entry,the,entry,to,write,param,entry,writer,the,entry,writer,or,code,null,if,there,is,no,content,throws,ioexception,in,case,of,i,o,errors;private,void,write,entry,jar,archive,entry,entry,entry,writer,entry,writer,throws,ioexception,string,parent,entry,get,name,if,parent,ends,with,parent,parent,substring,0,parent,length,1,entry,set,unix,mode,unix,stat,unix,stat,else,entry,set,unix,mode,unix,stat,unix,stat,if,parent,last,index,of,1,parent,parent,substring,0,parent,last,index,of,1,if,parent,is,empty,write,entry,new,jar,archive,entry,parent,null,if,this,written,entries,add,entry,get,name,this,jar,output,put,archive,entry,entry,if,entry,writer,null,entry,writer,write,this,jar,output,this,jar,output,close,archive,entry
JarWriter -> public void writeManifest(final Manifest manifest) throws IOException;1507173536;Write the specified manifest._@param manifest the manifest to write_@throws IOException of the manifest cannot be written;public void writeManifest(final Manifest manifest) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry("META-INF/MANIFEST.MF")__		writeEntry(entry, manifest::write)__	};write,the,specified,manifest,param,manifest,the,manifest,to,write,throws,ioexception,of,the,manifest,cannot,be,written;public,void,write,manifest,final,manifest,manifest,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,meta,inf,manifest,mf,write,entry,entry,manifest,write
JarWriter -> public void writeManifest(final Manifest manifest) throws IOException;1509282686;Write the specified manifest._@param manifest the manifest to write_@throws IOException of the manifest cannot be written;public void writeManifest(final Manifest manifest) throws IOException {_		JarArchiveEntry entry = new JarArchiveEntry("META-INF/MANIFEST.MF")__		writeEntry(entry, manifest::write)__	};write,the,specified,manifest,param,manifest,the,manifest,to,write,throws,ioexception,of,the,manifest,cannot,be,written;public,void,write,manifest,final,manifest,manifest,throws,ioexception,jar,archive,entry,entry,new,jar,archive,entry,meta,inf,manifest,mf,write,entry,entry,manifest,write
