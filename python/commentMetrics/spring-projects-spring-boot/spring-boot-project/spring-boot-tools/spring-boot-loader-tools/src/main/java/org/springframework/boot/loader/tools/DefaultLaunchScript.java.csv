commented;modifiers;parameterAmount;loc;comment;code
false;private;1;6;;private String loadContent(File file) throws IOException {     if (file == null) {         return loadContent(getClass().getResourceAsStream("launch.script")).     }     return loadContent(new FileInputStream(file)). }
false;private;1;10;;private String loadContent(InputStream inputStream) throws IOException {     try {         ByteArrayOutputStream outputStream = new ByteArrayOutputStream().         copy(inputStream, outputStream).         return new String(outputStream.toByteArray(), StandardCharsets.UTF_8).     } finally {         inputStream.close().     } }
false;private;2;9;;private void copy(InputStream inputStream, OutputStream outputStream) throws IOException {     byte[] buffer = new byte[BUFFER_SIZE].     int bytesRead.     while ((bytesRead = inputStream.read(buffer)) != -1) {         outputStream.write(buffer, 0, bytesRead).     }     outputStream.flush(). }
false;private;2;26;;private String expandPlaceholders(String content, Map<?, ?> properties) throws IOException {     StringBuffer expanded = new StringBuffer().     Matcher matcher = PLACEHOLDER_PATTERN.matcher(content).     while (matcher.find()) {         String name = matcher.group(1).         final String value.         String defaultValue = matcher.group(2).         if (properties != null && properties.containsKey(name)) {             Object propertyValue = properties.get(name).             if (FILE_PATH_KEYS.contains(name)) {                 value = parseFilePropertyValue(propertyValue).             } else {                 value = propertyValue.toString().             }         } else {             value = (defaultValue != null) ? defaultValue.substring(1) : matcher.group(0).         }         matcher.appendReplacement(expanded, value.replace("$", "\\$")).     }     matcher.appendTail(expanded).     return expanded.toString(). }
false;private;1;6;;private String parseFilePropertyValue(Object propertyValue) throws IOException {     if (propertyValue instanceof File) {         return loadContent((File) propertyValue).     }     return loadContent(new File(propertyValue.toString())). }
false;public;0;4;;@Override public byte[] toByteArray() {     return this.content.getBytes(StandardCharsets.UTF_8). }
