# id;timestamp;commentText;codeText;commentWords;codeWords
MainClassFinder -> public static String findSingleMainClass(File rootFolder, String annotationName) 			throws IOException;1507173536;Find a single main class from the given {@code rootFolder}. A main class annotated_with an annotation with the given {@code annotationName} will be preferred over a_main class with no such annotation._@param rootFolder the root folder to search_@param annotationName the name of the annotation that may be present on the main_class_@return the main class or {@code null}_@throws IOException if the folder cannot be read;public static String findSingleMainClass(File rootFolder, String annotationName)_			throws IOException {_		SingleMainClassCallback callback = new SingleMainClassCallback(annotationName)__		MainClassFinder.doWithMainClasses(rootFolder, callback)__		return callback.getMainClassName()__	};find,a,single,main,class,from,the,given,code,root,folder,a,main,class,annotated,with,an,annotation,with,the,given,code,annotation,name,will,be,preferred,over,a,main,class,with,no,such,annotation,param,root,folder,the,root,folder,to,search,param,annotation,name,the,name,of,the,annotation,that,may,be,present,on,the,main,class,return,the,main,class,or,code,null,throws,ioexception,if,the,folder,cannot,be,read;public,static,string,find,single,main,class,file,root,folder,string,annotation,name,throws,ioexception,single,main,class,callback,callback,new,single,main,class,callback,annotation,name,main,class,finder,do,with,main,classes,root,folder,callback,return,callback,get,main,class,name
MainClassFinder -> public static String findSingleMainClass(File rootFolder, String annotationName) 			throws IOException;1508250546;Find a single main class from the given {@code rootFolder}. A main class annotated_with an annotation with the given {@code annotationName} will be preferred over a_main class with no such annotation._@param rootFolder the root folder to search_@param annotationName the name of the annotation that may be present on the main_class_@return the main class or {@code null}_@throws IOException if the folder cannot be read;public static String findSingleMainClass(File rootFolder, String annotationName)_			throws IOException {_		SingleMainClassCallback callback = new SingleMainClassCallback(annotationName)__		MainClassFinder.doWithMainClasses(rootFolder, callback)__		return callback.getMainClassName()__	};find,a,single,main,class,from,the,given,code,root,folder,a,main,class,annotated,with,an,annotation,with,the,given,code,annotation,name,will,be,preferred,over,a,main,class,with,no,such,annotation,param,root,folder,the,root,folder,to,search,param,annotation,name,the,name,of,the,annotation,that,may,be,present,on,the,main,class,return,the,main,class,or,code,null,throws,ioexception,if,the,folder,cannot,be,read;public,static,string,find,single,main,class,file,root,folder,string,annotation,name,throws,ioexception,single,main,class,callback,callback,new,single,main,class,callback,annotation,name,main,class,finder,do,with,main,classes,root,folder,callback,return,callback,get,main,class,name
MainClassFinder -> public static String findSingleMainClass(File rootFolder, String annotationName) 			throws IOException;1525376698;Find a single main class from the given {@code rootFolder}. A main class annotated_with an annotation with the given {@code annotationName} will be preferred over a_main class with no such annotation._@param rootFolder the root folder to search_@param annotationName the name of the annotation that may be present on the main_class_@return the main class or {@code null}_@throws IOException if the folder cannot be read;public static String findSingleMainClass(File rootFolder, String annotationName)_			throws IOException {_		SingleMainClassCallback callback = new SingleMainClassCallback(annotationName)__		MainClassFinder.doWithMainClasses(rootFolder, callback)__		return callback.getMainClassName()__	};find,a,single,main,class,from,the,given,code,root,folder,a,main,class,annotated,with,an,annotation,with,the,given,code,annotation,name,will,be,preferred,over,a,main,class,with,no,such,annotation,param,root,folder,the,root,folder,to,search,param,annotation,name,the,name,of,the,annotation,that,may,be,present,on,the,main,class,return,the,main,class,or,code,null,throws,ioexception,if,the,folder,cannot,be,read;public,static,string,find,single,main,class,file,root,folder,string,annotation,name,throws,ioexception,single,main,class,callback,callback,new,single,main,class,callback,annotation,name,main,class,finder,do,with,main,classes,root,folder,callback,return,callback,get,main,class,name
MainClassFinder -> public static String findSingleMainClass(File rootFolder, String annotationName) 			throws IOException;1532738143;Find a single main class from the given {@code rootFolder}. A main class annotated_with an annotation with the given {@code annotationName} will be preferred over a_main class with no such annotation._@param rootFolder the root folder to search_@param annotationName the name of the annotation that may be present on the main_class_@return the main class or {@code null}_@throws IOException if the folder cannot be read;public static String findSingleMainClass(File rootFolder, String annotationName)_			throws IOException {_		SingleMainClassCallback callback = new SingleMainClassCallback(annotationName)__		MainClassFinder.doWithMainClasses(rootFolder, callback)__		return callback.getMainClassName()__	};find,a,single,main,class,from,the,given,code,root,folder,a,main,class,annotated,with,an,annotation,with,the,given,code,annotation,name,will,be,preferred,over,a,main,class,with,no,such,annotation,param,root,folder,the,root,folder,to,search,param,annotation,name,the,name,of,the,annotation,that,may,be,present,on,the,main,class,return,the,main,class,or,code,null,throws,ioexception,if,the,folder,cannot,be,read;public,static,string,find,single,main,class,file,root,folder,string,annotation,name,throws,ioexception,single,main,class,callback,callback,new,single,main,class,callback,annotation,name,main,class,finder,do,with,main,classes,root,folder,callback,return,callback,get,main,class,name
MainClassFinder -> public static String findMainClass(JarFile jarFile, String classesLocation) 			throws IOException;1507173536;Find the main class in a given jar file._@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@return the main class or {@code null}_@throws IOException if the jar file cannot be read;public static String findMainClass(JarFile jarFile, String classesLocation)_			throws IOException {_		return doWithMainClasses(jarFile, classesLocation, MainClass::getName)__	};find,the,main,class,in,a,given,jar,file,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,return,the,main,class,or,code,null,throws,ioexception,if,the,jar,file,cannot,be,read;public,static,string,find,main,class,jar,file,jar,file,string,classes,location,throws,ioexception,return,do,with,main,classes,jar,file,classes,location,main,class,get,name
MainClassFinder -> public static String findMainClass(JarFile jarFile, String classesLocation) 			throws IOException;1508250546;Find the main class in a given jar file._@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@return the main class or {@code null}_@throws IOException if the jar file cannot be read;public static String findMainClass(JarFile jarFile, String classesLocation)_			throws IOException {_		return doWithMainClasses(jarFile, classesLocation, MainClass::getName)__	};find,the,main,class,in,a,given,jar,file,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,return,the,main,class,or,code,null,throws,ioexception,if,the,jar,file,cannot,be,read;public,static,string,find,main,class,jar,file,jar,file,string,classes,location,throws,ioexception,return,do,with,main,classes,jar,file,classes,location,main,class,get,name
MainClassFinder -> public static String findMainClass(JarFile jarFile, String classesLocation) 			throws IOException;1525376698;Find the main class in a given jar file._@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@return the main class or {@code null}_@throws IOException if the jar file cannot be read;public static String findMainClass(JarFile jarFile, String classesLocation)_			throws IOException {_		return doWithMainClasses(jarFile, classesLocation, MainClass::getName)__	};find,the,main,class,in,a,given,jar,file,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,return,the,main,class,or,code,null,throws,ioexception,if,the,jar,file,cannot,be,read;public,static,string,find,main,class,jar,file,jar,file,string,classes,location,throws,ioexception,return,do,with,main,classes,jar,file,classes,location,main,class,get,name
MainClassFinder -> public static String findMainClass(JarFile jarFile, String classesLocation) 			throws IOException;1532738143;Find the main class in a given jar file._@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@return the main class or {@code null}_@throws IOException if the jar file cannot be read;public static String findMainClass(JarFile jarFile, String classesLocation)_			throws IOException {_		return doWithMainClasses(jarFile, classesLocation, MainClass::getName)__	};find,the,main,class,in,a,given,jar,file,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,return,the,main,class,or,code,null,throws,ioexception,if,the,jar,file,cannot,be,read;public,static,string,find,main,class,jar,file,jar,file,string,classes,location,throws,ioexception,return,do,with,main,classes,jar,file,classes,location,main,class,get,name
MainClassFinder -> public static String findMainClass(File rootFolder) throws IOException;1507173536;Find the main class from a given folder._@param rootFolder the root folder to search_@return the main class or {@code null}_@throws IOException if the folder cannot be read;public static String findMainClass(File rootFolder) throws IOException {_		return doWithMainClasses(rootFolder, MainClass::getName)__	};find,the,main,class,from,a,given,folder,param,root,folder,the,root,folder,to,search,return,the,main,class,or,code,null,throws,ioexception,if,the,folder,cannot,be,read;public,static,string,find,main,class,file,root,folder,throws,ioexception,return,do,with,main,classes,root,folder,main,class,get,name
MainClassFinder -> public static String findMainClass(File rootFolder) throws IOException;1508250546;Find the main class from a given folder._@param rootFolder the root folder to search_@return the main class or {@code null}_@throws IOException if the folder cannot be read;public static String findMainClass(File rootFolder) throws IOException {_		return doWithMainClasses(rootFolder, MainClass::getName)__	};find,the,main,class,from,a,given,folder,param,root,folder,the,root,folder,to,search,return,the,main,class,or,code,null,throws,ioexception,if,the,folder,cannot,be,read;public,static,string,find,main,class,file,root,folder,throws,ioexception,return,do,with,main,classes,root,folder,main,class,get,name
MainClassFinder -> public static String findMainClass(File rootFolder) throws IOException;1525376698;Find the main class from a given folder._@param rootFolder the root folder to search_@return the main class or {@code null}_@throws IOException if the folder cannot be read;public static String findMainClass(File rootFolder) throws IOException {_		return doWithMainClasses(rootFolder, MainClass::getName)__	};find,the,main,class,from,a,given,folder,param,root,folder,the,root,folder,to,search,return,the,main,class,or,code,null,throws,ioexception,if,the,folder,cannot,be,read;public,static,string,find,main,class,file,root,folder,throws,ioexception,return,do,with,main,classes,root,folder,main,class,get,name
MainClassFinder -> public static String findMainClass(File rootFolder) throws IOException;1532738143;Find the main class from a given folder._@param rootFolder the root folder to search_@return the main class or {@code null}_@throws IOException if the folder cannot be read;public static String findMainClass(File rootFolder) throws IOException {_		return doWithMainClasses(rootFolder, MainClass::getName)__	};find,the,main,class,from,a,given,folder,param,root,folder,the,root,folder,to,search,return,the,main,class,or,code,null,throws,ioexception,if,the,folder,cannot,be,read;public,static,string,find,main,class,file,root,folder,throws,ioexception,return,do,with,main,classes,root,folder,main,class,get,name
MainClassFinder -> MainClass -> MainClass(String name, Set<String> annotationNames);1507173536;Creates a new {@code MainClass} rather represents the main class with the given_{@code name}. The class is annotated with the annotations with the given_{@code annotationNames}._@param name the name of the class_@param annotationNames the names of the annotations on the class;MainClass(String name, Set<String> annotationNames) {_			this.name = name__			this.annotationNames = Collections_					.unmodifiableSet(new HashSet<>(annotationNames))__		};creates,a,new,code,main,class,rather,represents,the,main,class,with,the,given,code,name,the,class,is,annotated,with,the,annotations,with,the,given,code,annotation,names,param,name,the,name,of,the,class,param,annotation,names,the,names,of,the,annotations,on,the,class;main,class,string,name,set,string,annotation,names,this,name,name,this,annotation,names,collections,unmodifiable,set,new,hash,set,annotation,names
MainClassFinder -> MainClass -> MainClass(String name, Set<String> annotationNames);1508250546;Creates a new {@code MainClass} rather represents the main class with the given_{@code name}. The class is annotated with the annotations with the given_{@code annotationNames}._@param name the name of the class_@param annotationNames the names of the annotations on the class;MainClass(String name, Set<String> annotationNames) {_			this.name = name__			this.annotationNames = Collections_					.unmodifiableSet(new HashSet<>(annotationNames))__		};creates,a,new,code,main,class,rather,represents,the,main,class,with,the,given,code,name,the,class,is,annotated,with,the,annotations,with,the,given,code,annotation,names,param,name,the,name,of,the,class,param,annotation,names,the,names,of,the,annotations,on,the,class;main,class,string,name,set,string,annotation,names,this,name,name,this,annotation,names,collections,unmodifiable,set,new,hash,set,annotation,names
MainClassFinder -> MainClass -> MainClass(String name, Set<String> annotationNames);1525376698;Creates a new {@code MainClass} rather represents the main class with the given_{@code name}. The class is annotated with the annotations with the given_{@code annotationNames}._@param name the name of the class_@param annotationNames the names of the annotations on the class;MainClass(String name, Set<String> annotationNames) {_			this.name = name__			this.annotationNames = Collections_					.unmodifiableSet(new HashSet<>(annotationNames))__		};creates,a,new,code,main,class,rather,represents,the,main,class,with,the,given,code,name,the,class,is,annotated,with,the,annotations,with,the,given,code,annotation,names,param,name,the,name,of,the,class,param,annotation,names,the,names,of,the,annotations,on,the,class;main,class,string,name,set,string,annotation,names,this,name,name,this,annotation,names,collections,unmodifiable,set,new,hash,set,annotation,names
MainClassFinder -> MainClass -> MainClass(String name, Set<String> annotationNames);1532738143;Creates a new {@code MainClass} rather represents the main class with the given_{@code name}. The class is annotated with the annotations with the given_{@code annotationNames}._@param name the name of the class_@param annotationNames the names of the annotations on the class;MainClass(String name, Set<String> annotationNames) {_			this.name = name__			this.annotationNames = Collections_					.unmodifiableSet(new HashSet<>(annotationNames))__		};creates,a,new,code,main,class,rather,represents,the,main,class,with,the,given,code,name,the,class,is,annotated,with,the,annotations,with,the,given,code,annotation,names,param,name,the,name,of,the,class,param,annotation,names,the,names,of,the,annotations,on,the,class;main,class,string,name,set,string,annotation,names,this,name,name,this,annotation,names,collections,unmodifiable,set,new,hash,set,annotation,names
MainClassFinder -> MainClassCallback -> T doWith(MainClass mainClass)_;1507173536;Handle the specified main class._@param mainClass the main class_@return a non-null value if processing should end or {@code null} to continue;T doWith(MainClass mainClass)_;handle,the,specified,main,class,param,main,class,the,main,class,return,a,non,null,value,if,processing,should,end,or,code,null,to,continue;t,do,with,main,class,main,class
MainClassFinder -> MainClassCallback -> T doWith(MainClass mainClass)_;1508250546;Handle the specified main class._@param mainClass the main class_@return a non-null value if processing should end or {@code null} to continue;T doWith(MainClass mainClass)_;handle,the,specified,main,class,param,main,class,the,main,class,return,a,non,null,value,if,processing,should,end,or,code,null,to,continue;t,do,with,main,class,main,class
MainClassFinder -> MainClassCallback -> T doWith(MainClass mainClass)_;1525376698;Handle the specified main class._@param mainClass the main class_@return a non-null value if processing should end or {@code null} to continue;T doWith(MainClass mainClass)_;handle,the,specified,main,class,param,main,class,the,main,class,return,a,non,null,value,if,processing,should,end,or,code,null,to,continue;t,do,with,main,class,main,class
MainClassFinder -> MainClassCallback -> T doWith(MainClass mainClass)_;1532738143;Handle the specified main class._@param mainClass the main class_@return a non-null value if processing should end or {@code null} to continue;T doWith(MainClass mainClass)_;handle,the,specified,main,class,param,main,class,the,main,class,return,a,non,null,value,if,processing,should,end,or,code,null,to,continue;t,do,with,main,class,main,class
MainClassFinder -> public static String findSingleMainClass(JarFile jarFile, String classesLocation) 			throws IOException;1507173536;Find a single main class in a given jar file._@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@return the main class or {@code null}_@throws IOException if the jar file cannot be read;public static String findSingleMainClass(JarFile jarFile, String classesLocation)_			throws IOException {_		return findSingleMainClass(jarFile, classesLocation, null)__	};find,a,single,main,class,in,a,given,jar,file,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,return,the,main,class,or,code,null,throws,ioexception,if,the,jar,file,cannot,be,read;public,static,string,find,single,main,class,jar,file,jar,file,string,classes,location,throws,ioexception,return,find,single,main,class,jar,file,classes,location,null
MainClassFinder -> public static String findSingleMainClass(JarFile jarFile, String classesLocation) 			throws IOException;1508250546;Find a single main class in a given jar file._@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@return the main class or {@code null}_@throws IOException if the jar file cannot be read;public static String findSingleMainClass(JarFile jarFile, String classesLocation)_			throws IOException {_		return findSingleMainClass(jarFile, classesLocation, null)__	};find,a,single,main,class,in,a,given,jar,file,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,return,the,main,class,or,code,null,throws,ioexception,if,the,jar,file,cannot,be,read;public,static,string,find,single,main,class,jar,file,jar,file,string,classes,location,throws,ioexception,return,find,single,main,class,jar,file,classes,location,null
MainClassFinder -> public static String findSingleMainClass(JarFile jarFile, String classesLocation) 			throws IOException;1525376698;Find a single main class in a given jar file._@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@return the main class or {@code null}_@throws IOException if the jar file cannot be read;public static String findSingleMainClass(JarFile jarFile, String classesLocation)_			throws IOException {_		return findSingleMainClass(jarFile, classesLocation, null)__	};find,a,single,main,class,in,a,given,jar,file,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,return,the,main,class,or,code,null,throws,ioexception,if,the,jar,file,cannot,be,read;public,static,string,find,single,main,class,jar,file,jar,file,string,classes,location,throws,ioexception,return,find,single,main,class,jar,file,classes,location,null
MainClassFinder -> public static String findSingleMainClass(JarFile jarFile, String classesLocation) 			throws IOException;1532738143;Find a single main class in a given jar file._@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@return the main class or {@code null}_@throws IOException if the jar file cannot be read;public static String findSingleMainClass(JarFile jarFile, String classesLocation)_			throws IOException {_		return findSingleMainClass(jarFile, classesLocation, null)__	};find,a,single,main,class,in,a,given,jar,file,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,return,the,main,class,or,code,null,throws,ioexception,if,the,jar,file,cannot,be,read;public,static,string,find,single,main,class,jar,file,jar,file,string,classes,location,throws,ioexception,return,find,single,main,class,jar,file,classes,location,null
MainClassFinder -> public static String findSingleMainClass(JarFile jarFile, String classesLocation, 			String annotationName) throws IOException;1507173536;Find a single main class in a given jar file. A main class annotated with an_annotation with the given {@code annotationName} will be preferred over a main_class with no such annotation._@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@param annotationName the name of the annotation that may be present on the main_class_@return the main class or {@code null}_@throws IOException if the jar file cannot be read;public static String findSingleMainClass(JarFile jarFile, String classesLocation,_			String annotationName) throws IOException {_		SingleMainClassCallback callback = new SingleMainClassCallback(annotationName)__		MainClassFinder.doWithMainClasses(jarFile, classesLocation, callback)__		return callback.getMainClassName()__	};find,a,single,main,class,in,a,given,jar,file,a,main,class,annotated,with,an,annotation,with,the,given,code,annotation,name,will,be,preferred,over,a,main,class,with,no,such,annotation,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,param,annotation,name,the,name,of,the,annotation,that,may,be,present,on,the,main,class,return,the,main,class,or,code,null,throws,ioexception,if,the,jar,file,cannot,be,read;public,static,string,find,single,main,class,jar,file,jar,file,string,classes,location,string,annotation,name,throws,ioexception,single,main,class,callback,callback,new,single,main,class,callback,annotation,name,main,class,finder,do,with,main,classes,jar,file,classes,location,callback,return,callback,get,main,class,name
MainClassFinder -> public static String findSingleMainClass(JarFile jarFile, String classesLocation, 			String annotationName) throws IOException;1508250546;Find a single main class in a given jar file. A main class annotated with an_annotation with the given {@code annotationName} will be preferred over a main_class with no such annotation._@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@param annotationName the name of the annotation that may be present on the main_class_@return the main class or {@code null}_@throws IOException if the jar file cannot be read;public static String findSingleMainClass(JarFile jarFile, String classesLocation,_			String annotationName) throws IOException {_		SingleMainClassCallback callback = new SingleMainClassCallback(annotationName)__		MainClassFinder.doWithMainClasses(jarFile, classesLocation, callback)__		return callback.getMainClassName()__	};find,a,single,main,class,in,a,given,jar,file,a,main,class,annotated,with,an,annotation,with,the,given,code,annotation,name,will,be,preferred,over,a,main,class,with,no,such,annotation,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,param,annotation,name,the,name,of,the,annotation,that,may,be,present,on,the,main,class,return,the,main,class,or,code,null,throws,ioexception,if,the,jar,file,cannot,be,read;public,static,string,find,single,main,class,jar,file,jar,file,string,classes,location,string,annotation,name,throws,ioexception,single,main,class,callback,callback,new,single,main,class,callback,annotation,name,main,class,finder,do,with,main,classes,jar,file,classes,location,callback,return,callback,get,main,class,name
MainClassFinder -> public static String findSingleMainClass(JarFile jarFile, String classesLocation, 			String annotationName) throws IOException;1525376698;Find a single main class in a given jar file. A main class annotated with an_annotation with the given {@code annotationName} will be preferred over a main_class with no such annotation._@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@param annotationName the name of the annotation that may be present on the main_class_@return the main class or {@code null}_@throws IOException if the jar file cannot be read;public static String findSingleMainClass(JarFile jarFile, String classesLocation,_			String annotationName) throws IOException {_		SingleMainClassCallback callback = new SingleMainClassCallback(annotationName)__		MainClassFinder.doWithMainClasses(jarFile, classesLocation, callback)__		return callback.getMainClassName()__	};find,a,single,main,class,in,a,given,jar,file,a,main,class,annotated,with,an,annotation,with,the,given,code,annotation,name,will,be,preferred,over,a,main,class,with,no,such,annotation,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,param,annotation,name,the,name,of,the,annotation,that,may,be,present,on,the,main,class,return,the,main,class,or,code,null,throws,ioexception,if,the,jar,file,cannot,be,read;public,static,string,find,single,main,class,jar,file,jar,file,string,classes,location,string,annotation,name,throws,ioexception,single,main,class,callback,callback,new,single,main,class,callback,annotation,name,main,class,finder,do,with,main,classes,jar,file,classes,location,callback,return,callback,get,main,class,name
MainClassFinder -> public static String findSingleMainClass(JarFile jarFile, String classesLocation, 			String annotationName) throws IOException;1532738143;Find a single main class in a given jar file. A main class annotated with an_annotation with the given {@code annotationName} will be preferred over a main_class with no such annotation._@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@param annotationName the name of the annotation that may be present on the main_class_@return the main class or {@code null}_@throws IOException if the jar file cannot be read;public static String findSingleMainClass(JarFile jarFile, String classesLocation,_			String annotationName) throws IOException {_		SingleMainClassCallback callback = new SingleMainClassCallback(annotationName)__		MainClassFinder.doWithMainClasses(jarFile, classesLocation, callback)__		return callback.getMainClassName()__	};find,a,single,main,class,in,a,given,jar,file,a,main,class,annotated,with,an,annotation,with,the,given,code,annotation,name,will,be,preferred,over,a,main,class,with,no,such,annotation,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,param,annotation,name,the,name,of,the,annotation,that,may,be,present,on,the,main,class,return,the,main,class,or,code,null,throws,ioexception,if,the,jar,file,cannot,be,read;public,static,string,find,single,main,class,jar,file,jar,file,string,classes,location,string,annotation,name,throws,ioexception,single,main,class,callback,callback,new,single,main,class,callback,annotation,name,main,class,finder,do,with,main,classes,jar,file,classes,location,callback,return,callback,get,main,class,name
MainClassFinder -> public static String findSingleMainClass(File rootFolder) throws IOException;1507173536;Find a single main class from the given {@code rootFolder}._@param rootFolder the root folder to search_@return the main class or {@code null}_@throws IOException if the folder cannot be read;public static String findSingleMainClass(File rootFolder) throws IOException {_		return findSingleMainClass(rootFolder, null)__	};find,a,single,main,class,from,the,given,code,root,folder,param,root,folder,the,root,folder,to,search,return,the,main,class,or,code,null,throws,ioexception,if,the,folder,cannot,be,read;public,static,string,find,single,main,class,file,root,folder,throws,ioexception,return,find,single,main,class,root,folder,null
MainClassFinder -> public static String findSingleMainClass(File rootFolder) throws IOException;1508250546;Find a single main class from the given {@code rootFolder}._@param rootFolder the root folder to search_@return the main class or {@code null}_@throws IOException if the folder cannot be read;public static String findSingleMainClass(File rootFolder) throws IOException {_		return findSingleMainClass(rootFolder, null)__	};find,a,single,main,class,from,the,given,code,root,folder,param,root,folder,the,root,folder,to,search,return,the,main,class,or,code,null,throws,ioexception,if,the,folder,cannot,be,read;public,static,string,find,single,main,class,file,root,folder,throws,ioexception,return,find,single,main,class,root,folder,null
MainClassFinder -> public static String findSingleMainClass(File rootFolder) throws IOException;1525376698;Find a single main class from the given {@code rootFolder}._@param rootFolder the root folder to search_@return the main class or {@code null}_@throws IOException if the folder cannot be read;public static String findSingleMainClass(File rootFolder) throws IOException {_		return findSingleMainClass(rootFolder, null)__	};find,a,single,main,class,from,the,given,code,root,folder,param,root,folder,the,root,folder,to,search,return,the,main,class,or,code,null,throws,ioexception,if,the,folder,cannot,be,read;public,static,string,find,single,main,class,file,root,folder,throws,ioexception,return,find,single,main,class,root,folder,null
MainClassFinder -> public static String findSingleMainClass(File rootFolder) throws IOException;1532738143;Find a single main class from the given {@code rootFolder}._@param rootFolder the root folder to search_@return the main class or {@code null}_@throws IOException if the folder cannot be read;public static String findSingleMainClass(File rootFolder) throws IOException {_		return findSingleMainClass(rootFolder, null)__	};find,a,single,main,class,from,the,given,code,root,folder,param,root,folder,the,root,folder,to,search,return,the,main,class,or,code,null,throws,ioexception,if,the,folder,cannot,be,read;public,static,string,find,single,main,class,file,root,folder,throws,ioexception,return,find,single,main,class,root,folder,null
MainClassFinder -> static <T> T doWithMainClasses(JarFile jarFile, String classesLocation, 			MainClassCallback<T> callback) throws IOException;1507173536;Perform the given callback operation on all main classes from the given jar._@param <T> the result type_@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@param callback the callback_@return the first callback result or {@code null}_@throws IOException in case of I/O errors;static <T> T doWithMainClasses(JarFile jarFile, String classesLocation,_			MainClassCallback<T> callback) throws IOException {_		List<JarEntry> classEntries = getClassEntries(jarFile, classesLocation)__		classEntries.sort(new ClassEntryComparator())__		for (JarEntry entry : classEntries) {_			try (InputStream inputStream = new BufferedInputStream(_					jarFile.getInputStream(entry))) {_				ClassDescriptor classDescriptor = createClassDescriptor(inputStream)__				if (classDescriptor != null && classDescriptor.isMainMethodFound()) {_					String className = convertToClassName(entry.getName(),_							classesLocation)__					T result = callback.doWith(new MainClass(className,_							classDescriptor.getAnnotationNames()))__					if (result != null) {_						return result__					}_				}_			}_		}_		return null__	};perform,the,given,callback,operation,on,all,main,classes,from,the,given,jar,param,t,the,result,type,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,param,callback,the,callback,return,the,first,callback,result,or,code,null,throws,ioexception,in,case,of,i,o,errors;static,t,t,do,with,main,classes,jar,file,jar,file,string,classes,location,main,class,callback,t,callback,throws,ioexception,list,jar,entry,class,entries,get,class,entries,jar,file,classes,location,class,entries,sort,new,class,entry,comparator,for,jar,entry,entry,class,entries,try,input,stream,input,stream,new,buffered,input,stream,jar,file,get,input,stream,entry,class,descriptor,class,descriptor,create,class,descriptor,input,stream,if,class,descriptor,null,class,descriptor,is,main,method,found,string,class,name,convert,to,class,name,entry,get,name,classes,location,t,result,callback,do,with,new,main,class,class,name,class,descriptor,get,annotation,names,if,result,null,return,result,return,null
MainClassFinder -> static <T> T doWithMainClasses(JarFile jarFile, String classesLocation, 			MainClassCallback<T> callback) throws IOException;1508250546;Perform the given callback operation on all main classes from the given jar._@param <T> the result type_@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@param callback the callback_@return the first callback result or {@code null}_@throws IOException in case of I/O errors;static <T> T doWithMainClasses(JarFile jarFile, String classesLocation,_			MainClassCallback<T> callback) throws IOException {_		List<JarEntry> classEntries = getClassEntries(jarFile, classesLocation)__		classEntries.sort(new ClassEntryComparator())__		for (JarEntry entry : classEntries) {_			try (InputStream inputStream = new BufferedInputStream(_					jarFile.getInputStream(entry))) {_				ClassDescriptor classDescriptor = createClassDescriptor(inputStream)__				if (classDescriptor != null && classDescriptor.isMainMethodFound()) {_					String className = convertToClassName(entry.getName(),_							classesLocation)__					T result = callback.doWith(new MainClass(className,_							classDescriptor.getAnnotationNames()))__					if (result != null) {_						return result__					}_				}_			}_		}_		return null__	};perform,the,given,callback,operation,on,all,main,classes,from,the,given,jar,param,t,the,result,type,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,param,callback,the,callback,return,the,first,callback,result,or,code,null,throws,ioexception,in,case,of,i,o,errors;static,t,t,do,with,main,classes,jar,file,jar,file,string,classes,location,main,class,callback,t,callback,throws,ioexception,list,jar,entry,class,entries,get,class,entries,jar,file,classes,location,class,entries,sort,new,class,entry,comparator,for,jar,entry,entry,class,entries,try,input,stream,input,stream,new,buffered,input,stream,jar,file,get,input,stream,entry,class,descriptor,class,descriptor,create,class,descriptor,input,stream,if,class,descriptor,null,class,descriptor,is,main,method,found,string,class,name,convert,to,class,name,entry,get,name,classes,location,t,result,callback,do,with,new,main,class,class,name,class,descriptor,get,annotation,names,if,result,null,return,result,return,null
MainClassFinder -> static <T> T doWithMainClasses(JarFile jarFile, String classesLocation, 			MainClassCallback<T> callback) throws IOException;1525376698;Perform the given callback operation on all main classes from the given jar._@param <T> the result type_@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@param callback the callback_@return the first callback result or {@code null}_@throws IOException in case of I/O errors;static <T> T doWithMainClasses(JarFile jarFile, String classesLocation,_			MainClassCallback<T> callback) throws IOException {_		List<JarEntry> classEntries = getClassEntries(jarFile, classesLocation)__		classEntries.sort(new ClassEntryComparator())__		for (JarEntry entry : classEntries) {_			try (InputStream inputStream = new BufferedInputStream(_					jarFile.getInputStream(entry))) {_				ClassDescriptor classDescriptor = createClassDescriptor(inputStream)__				if (classDescriptor != null && classDescriptor.isMainMethodFound()) {_					String className = convertToClassName(entry.getName(),_							classesLocation)__					T result = callback.doWith(new MainClass(className,_							classDescriptor.getAnnotationNames()))__					if (result != null) {_						return result__					}_				}_			}_		}_		return null__	};perform,the,given,callback,operation,on,all,main,classes,from,the,given,jar,param,t,the,result,type,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,param,callback,the,callback,return,the,first,callback,result,or,code,null,throws,ioexception,in,case,of,i,o,errors;static,t,t,do,with,main,classes,jar,file,jar,file,string,classes,location,main,class,callback,t,callback,throws,ioexception,list,jar,entry,class,entries,get,class,entries,jar,file,classes,location,class,entries,sort,new,class,entry,comparator,for,jar,entry,entry,class,entries,try,input,stream,input,stream,new,buffered,input,stream,jar,file,get,input,stream,entry,class,descriptor,class,descriptor,create,class,descriptor,input,stream,if,class,descriptor,null,class,descriptor,is,main,method,found,string,class,name,convert,to,class,name,entry,get,name,classes,location,t,result,callback,do,with,new,main,class,class,name,class,descriptor,get,annotation,names,if,result,null,return,result,return,null
MainClassFinder -> static <T> T doWithMainClasses(JarFile jarFile, String classesLocation, 			MainClassCallback<T> callback) throws IOException;1532738143;Perform the given callback operation on all main classes from the given jar._@param <T> the result type_@param jarFile the jar file to search_@param classesLocation the location within the jar containing classes_@param callback the callback_@return the first callback result or {@code null}_@throws IOException in case of I/O errors;static <T> T doWithMainClasses(JarFile jarFile, String classesLocation,_			MainClassCallback<T> callback) throws IOException {_		List<JarEntry> classEntries = getClassEntries(jarFile, classesLocation)__		classEntries.sort(new ClassEntryComparator())__		for (JarEntry entry : classEntries) {_			try (InputStream inputStream = new BufferedInputStream(_					jarFile.getInputStream(entry))) {_				ClassDescriptor classDescriptor = createClassDescriptor(inputStream)__				if (classDescriptor != null && classDescriptor.isMainMethodFound()) {_					String className = convertToClassName(entry.getName(),_							classesLocation)__					T result = callback.doWith(new MainClass(className,_							classDescriptor.getAnnotationNames()))__					if (result != null) {_						return result__					}_				}_			}_		}_		return null__	};perform,the,given,callback,operation,on,all,main,classes,from,the,given,jar,param,t,the,result,type,param,jar,file,the,jar,file,to,search,param,classes,location,the,location,within,the,jar,containing,classes,param,callback,the,callback,return,the,first,callback,result,or,code,null,throws,ioexception,in,case,of,i,o,errors;static,t,t,do,with,main,classes,jar,file,jar,file,string,classes,location,main,class,callback,t,callback,throws,ioexception,list,jar,entry,class,entries,get,class,entries,jar,file,classes,location,class,entries,sort,new,class,entry,comparator,for,jar,entry,entry,class,entries,try,input,stream,input,stream,new,buffered,input,stream,jar,file,get,input,stream,entry,class,descriptor,class,descriptor,create,class,descriptor,input,stream,if,class,descriptor,null,class,descriptor,is,main,method,found,string,class,name,convert,to,class,name,entry,get,name,classes,location,t,result,callback,do,with,new,main,class,class,name,class,descriptor,get,annotation,names,if,result,null,return,result,return,null
MainClassFinder -> static <T> T doWithMainClasses(File rootFolder, MainClassCallback<T> callback) 			throws IOException;1507173536;Perform the given callback operation on all main classes from the given root_folder._@param <T> the result type_@param rootFolder the root folder_@param callback the callback_@return the first callback result or {@code null}_@throws IOException in case of I/O errors;static <T> T doWithMainClasses(File rootFolder, MainClassCallback<T> callback)_			throws IOException {_		if (!rootFolder.exists()) {_			return null_ _		}_		if (!rootFolder.isDirectory()) {_			throw new IllegalArgumentException(_					"Invalid root folder '" + rootFolder + "'")__		}_		String prefix = rootFolder.getAbsolutePath() + "/"__		Deque<File> stack = new ArrayDeque<>()__		stack.push(rootFolder)__		while (!stack.isEmpty()) {_			File file = stack.pop()__			if (file.isFile()) {_				try (InputStream inputStream = new FileInputStream(file)) {_					ClassDescriptor classDescriptor = createClassDescriptor(inputStream)__					if (classDescriptor != null && classDescriptor.isMainMethodFound()) {_						String className = convertToClassName(file.getAbsolutePath(),_								prefix)__						T result = callback.doWith(new MainClass(className,_								classDescriptor.getAnnotationNames()))__						if (result != null) {_							return result__						}_					}_				}_			}_			if (file.isDirectory()) {_				pushAllSorted(stack, file.listFiles(PACKAGE_FOLDER_FILTER))__				pushAllSorted(stack, file.listFiles(CLASS_FILE_FILTER))__			}_		}_		return null__	};perform,the,given,callback,operation,on,all,main,classes,from,the,given,root,folder,param,t,the,result,type,param,root,folder,the,root,folder,param,callback,the,callback,return,the,first,callback,result,or,code,null,throws,ioexception,in,case,of,i,o,errors;static,t,t,do,with,main,classes,file,root,folder,main,class,callback,t,callback,throws,ioexception,if,root,folder,exists,return,null,if,root,folder,is,directory,throw,new,illegal,argument,exception,invalid,root,folder,root,folder,string,prefix,root,folder,get,absolute,path,deque,file,stack,new,array,deque,stack,push,root,folder,while,stack,is,empty,file,file,stack,pop,if,file,is,file,try,input,stream,input,stream,new,file,input,stream,file,class,descriptor,class,descriptor,create,class,descriptor,input,stream,if,class,descriptor,null,class,descriptor,is,main,method,found,string,class,name,convert,to,class,name,file,get,absolute,path,prefix,t,result,callback,do,with,new,main,class,class,name,class,descriptor,get,annotation,names,if,result,null,return,result,if,file,is,directory,push,all,sorted,stack,file,list,files,push,all,sorted,stack,file,list,files,return,null
MainClassFinder -> static <T> T doWithMainClasses(File rootFolder, MainClassCallback<T> callback) 			throws IOException;1508250546;Perform the given callback operation on all main classes from the given root_folder._@param <T> the result type_@param rootFolder the root folder_@param callback the callback_@return the first callback result or {@code null}_@throws IOException in case of I/O errors;static <T> T doWithMainClasses(File rootFolder, MainClassCallback<T> callback)_			throws IOException {_		if (!rootFolder.exists()) {_			return null_ _		}_		if (!rootFolder.isDirectory()) {_			throw new IllegalArgumentException(_					"Invalid root folder '" + rootFolder + "'")__		}_		String prefix = rootFolder.getAbsolutePath() + "/"__		Deque<File> stack = new ArrayDeque<>()__		stack.push(rootFolder)__		while (!stack.isEmpty()) {_			File file = stack.pop()__			if (file.isFile()) {_				try (InputStream inputStream = new FileInputStream(file)) {_					ClassDescriptor classDescriptor = createClassDescriptor(inputStream)__					if (classDescriptor != null && classDescriptor.isMainMethodFound()) {_						String className = convertToClassName(file.getAbsolutePath(),_								prefix)__						T result = callback.doWith(new MainClass(className,_								classDescriptor.getAnnotationNames()))__						if (result != null) {_							return result__						}_					}_				}_			}_			if (file.isDirectory()) {_				pushAllSorted(stack, file.listFiles(PACKAGE_FOLDER_FILTER))__				pushAllSorted(stack, file.listFiles(CLASS_FILE_FILTER))__			}_		}_		return null__	};perform,the,given,callback,operation,on,all,main,classes,from,the,given,root,folder,param,t,the,result,type,param,root,folder,the,root,folder,param,callback,the,callback,return,the,first,callback,result,or,code,null,throws,ioexception,in,case,of,i,o,errors;static,t,t,do,with,main,classes,file,root,folder,main,class,callback,t,callback,throws,ioexception,if,root,folder,exists,return,null,if,root,folder,is,directory,throw,new,illegal,argument,exception,invalid,root,folder,root,folder,string,prefix,root,folder,get,absolute,path,deque,file,stack,new,array,deque,stack,push,root,folder,while,stack,is,empty,file,file,stack,pop,if,file,is,file,try,input,stream,input,stream,new,file,input,stream,file,class,descriptor,class,descriptor,create,class,descriptor,input,stream,if,class,descriptor,null,class,descriptor,is,main,method,found,string,class,name,convert,to,class,name,file,get,absolute,path,prefix,t,result,callback,do,with,new,main,class,class,name,class,descriptor,get,annotation,names,if,result,null,return,result,if,file,is,directory,push,all,sorted,stack,file,list,files,push,all,sorted,stack,file,list,files,return,null
MainClassFinder -> static <T> T doWithMainClasses(File rootFolder, MainClassCallback<T> callback) 			throws IOException;1525376698;Perform the given callback operation on all main classes from the given root_folder._@param <T> the result type_@param rootFolder the root folder_@param callback the callback_@return the first callback result or {@code null}_@throws IOException in case of I/O errors;static <T> T doWithMainClasses(File rootFolder, MainClassCallback<T> callback)_			throws IOException {_		if (!rootFolder.exists()) {_			return null_ _		}_		if (!rootFolder.isDirectory()) {_			throw new IllegalArgumentException(_					"Invalid root folder '" + rootFolder + "'")__		}_		String prefix = rootFolder.getAbsolutePath() + "/"__		Deque<File> stack = new ArrayDeque<>()__		stack.push(rootFolder)__		while (!stack.isEmpty()) {_			File file = stack.pop()__			if (file.isFile()) {_				try (InputStream inputStream = new FileInputStream(file)) {_					ClassDescriptor classDescriptor = createClassDescriptor(inputStream)__					if (classDescriptor != null && classDescriptor.isMainMethodFound()) {_						String className = convertToClassName(file.getAbsolutePath(),_								prefix)__						T result = callback.doWith(new MainClass(className,_								classDescriptor.getAnnotationNames()))__						if (result != null) {_							return result__						}_					}_				}_			}_			if (file.isDirectory()) {_				pushAllSorted(stack, file.listFiles(PACKAGE_FOLDER_FILTER))__				pushAllSorted(stack, file.listFiles(CLASS_FILE_FILTER))__			}_		}_		return null__	};perform,the,given,callback,operation,on,all,main,classes,from,the,given,root,folder,param,t,the,result,type,param,root,folder,the,root,folder,param,callback,the,callback,return,the,first,callback,result,or,code,null,throws,ioexception,in,case,of,i,o,errors;static,t,t,do,with,main,classes,file,root,folder,main,class,callback,t,callback,throws,ioexception,if,root,folder,exists,return,null,if,root,folder,is,directory,throw,new,illegal,argument,exception,invalid,root,folder,root,folder,string,prefix,root,folder,get,absolute,path,deque,file,stack,new,array,deque,stack,push,root,folder,while,stack,is,empty,file,file,stack,pop,if,file,is,file,try,input,stream,input,stream,new,file,input,stream,file,class,descriptor,class,descriptor,create,class,descriptor,input,stream,if,class,descriptor,null,class,descriptor,is,main,method,found,string,class,name,convert,to,class,name,file,get,absolute,path,prefix,t,result,callback,do,with,new,main,class,class,name,class,descriptor,get,annotation,names,if,result,null,return,result,if,file,is,directory,push,all,sorted,stack,file,list,files,push,all,sorted,stack,file,list,files,return,null
MainClassFinder -> static <T> T doWithMainClasses(File rootFolder, MainClassCallback<T> callback) 			throws IOException;1532738143;Perform the given callback operation on all main classes from the given root_folder._@param <T> the result type_@param rootFolder the root folder_@param callback the callback_@return the first callback result or {@code null}_@throws IOException in case of I/O errors;static <T> T doWithMainClasses(File rootFolder, MainClassCallback<T> callback)_			throws IOException {_		if (!rootFolder.exists()) {_			return null_ _		}_		if (!rootFolder.isDirectory()) {_			throw new IllegalArgumentException(_					"Invalid root folder '" + rootFolder + "'")__		}_		String prefix = rootFolder.getAbsolutePath() + "/"__		Deque<File> stack = new ArrayDeque<>()__		stack.push(rootFolder)__		while (!stack.isEmpty()) {_			File file = stack.pop()__			if (file.isFile()) {_				try (InputStream inputStream = new FileInputStream(file)) {_					ClassDescriptor classDescriptor = createClassDescriptor(inputStream)__					if (classDescriptor != null && classDescriptor.isMainMethodFound()) {_						String className = convertToClassName(file.getAbsolutePath(),_								prefix)__						T result = callback.doWith(new MainClass(className,_								classDescriptor.getAnnotationNames()))__						if (result != null) {_							return result__						}_					}_				}_			}_			if (file.isDirectory()) {_				pushAllSorted(stack, file.listFiles(PACKAGE_FOLDER_FILTER))__				pushAllSorted(stack, file.listFiles(CLASS_FILE_FILTER))__			}_		}_		return null__	};perform,the,given,callback,operation,on,all,main,classes,from,the,given,root,folder,param,t,the,result,type,param,root,folder,the,root,folder,param,callback,the,callback,return,the,first,callback,result,or,code,null,throws,ioexception,in,case,of,i,o,errors;static,t,t,do,with,main,classes,file,root,folder,main,class,callback,t,callback,throws,ioexception,if,root,folder,exists,return,null,if,root,folder,is,directory,throw,new,illegal,argument,exception,invalid,root,folder,root,folder,string,prefix,root,folder,get,absolute,path,deque,file,stack,new,array,deque,stack,push,root,folder,while,stack,is,empty,file,file,stack,pop,if,file,is,file,try,input,stream,input,stream,new,file,input,stream,file,class,descriptor,class,descriptor,create,class,descriptor,input,stream,if,class,descriptor,null,class,descriptor,is,main,method,found,string,class,name,convert,to,class,name,file,get,absolute,path,prefix,t,result,callback,do,with,new,main,class,class,name,class,descriptor,get,annotation,names,if,result,null,return,result,if,file,is,directory,push,all,sorted,stack,file,list,files,push,all,sorted,stack,file,list,files,return,null
