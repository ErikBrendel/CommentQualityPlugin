commented;modifiers;parameterAmount;loc;comment;code
false;public;2;3;;public void addClass(String filename, Class<?> classToCopy) throws IOException {     addClass(filename, classToCopy, null). }
false;public;3;12;;public void addClass(String filename, Class<?> classToCopy, Long time) throws IOException {     File file = getFilePath(filename).     file.getParentFile().mkdirs().     InputStream inputStream = getClass().getResourceAsStream("/" + classToCopy.getName().replace('.', '/') + ".class").     copyToFile(inputStream, file).     if (time != null) {         file.setLastModified(time).     }     this.entries.add(new FileSource(filename, file)). }
false;public;2;8;;public void addFile(String filename, File fileToCopy) throws IOException {     File file = getFilePath(filename).     file.getParentFile().mkdirs().     try (InputStream inputStream = new FileInputStream(fileToCopy)) {         copyToFile(inputStream, file).     }     this.entries.add(new FileSource(filename, file)). }
false;public;1;8;;public void addManifest(Manifest manifest) throws IOException {     File manifestFile = new File(this.jarSource, "META-INF/MANIFEST.MF").     manifestFile.getParentFile().mkdirs().     try (OutputStream outputStream = new FileOutputStream(manifestFile)) {         manifest.write(outputStream).     }     this.entries.add(new FileSource("META-INF/MANIFEST.MF", manifestFile)). }
false;private;1;8;;private File getFilePath(String filename) {     String[] paths = filename.split("\\/").     File file = this.jarSource.     for (String path : paths) {         file = new File(file, path).     }     return file. }
false;private;2;5;;private void copyToFile(InputStream inputStream, File file) throws IOException {     try (OutputStream outputStream = new FileOutputStream(file)) {         copy(inputStream, outputStream).     } }
false;private;2;6;;private void copy(InputStream in, OutputStream out) throws IOException {     int bytesRead.     while ((bytesRead = in.read(this.buffer)) != -1) {         out.write(this.buffer, 0, bytesRead).     } }
false;public;0;3;;public JarFile getJarFile() throws IOException {     return new JarFile(getFile()). }
false;public;0;3;;public File getJarSource() {     return this.jarSource. }
false;public;0;3;;public File getFile() throws IOException {     return getFile("jar"). }
false;public;1;6;;public File getFile(String extension) throws IOException {     File file = this.temporaryFolder.newFile().     file = new File(file.getParent(), file.getName() + "." + extension).     ZipUtil.pack(this.entries.toArray(new ZipEntrySource[0]), file).     return file. }
