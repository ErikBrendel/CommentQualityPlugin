commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void init() throws IOException {     this.outputDirectory = this.temporaryFolder.newFolder("remove").     this.originDirectory = this.temporaryFolder.newFolder("keep").     FileSystemUtils.deleteRecursively(this.outputDirectory).     FileSystemUtils.deleteRecursively(this.originDirectory).     this.outputDirectory.mkdirs().     this.originDirectory.mkdirs(). }
false;public;0;9;;@Test public void simpleDuplicateFile() throws IOException {     File file = new File(this.outputDirectory, "logback.xml").     file.createNewFile().     new File(this.originDirectory, "logback.xml").createNewFile().     FileUtils.removeDuplicatesFromOutputDirectory(this.outputDirectory, this.originDirectory).     assertThat(file.exists()).isFalse(). }
false;public;0;11;;@Test public void nestedDuplicateFile() throws IOException {     assertThat(new File(this.outputDirectory, "sub").mkdirs()).isTrue().     assertThat(new File(this.originDirectory, "sub").mkdirs()).isTrue().     File file = new File(this.outputDirectory, "sub/logback.xml").     file.createNewFile().     new File(this.originDirectory, "sub/logback.xml").createNewFile().     FileUtils.removeDuplicatesFromOutputDirectory(this.outputDirectory, this.originDirectory).     assertThat(file.exists()).isFalse(). }
false;public;0;11;;@Test public void nestedNonDuplicateFile() throws IOException {     assertThat(new File(this.outputDirectory, "sub").mkdirs()).isTrue().     assertThat(new File(this.originDirectory, "sub").mkdirs()).isTrue().     File file = new File(this.outputDirectory, "sub/logback.xml").     file.createNewFile().     new File(this.originDirectory, "sub/different.xml").createNewFile().     FileUtils.removeDuplicatesFromOutputDirectory(this.outputDirectory, this.originDirectory).     assertThat(file.exists()).isTrue(). }
false;public;0;9;;@Test public void nonDuplicateFile() throws IOException {     File file = new File(this.outputDirectory, "logback.xml").     file.createNewFile().     new File(this.originDirectory, "different.xml").createNewFile().     FileUtils.removeDuplicatesFromOutputDirectory(this.outputDirectory, this.originDirectory).     assertThat(file.exists()).isTrue(). }
false;public;0;9;;@Test public void hash() throws Exception {     File file = this.temporaryFolder.newFile().     try (OutputStream outputStream = new FileOutputStream(file)) {         outputStream.write(new byte[] { 1, 2, 3 }).     }     assertThat(FileUtils.sha1Hash(file)).isEqualTo("7037807198c22a7d2b0807371d763779a84fdfcf"). }
