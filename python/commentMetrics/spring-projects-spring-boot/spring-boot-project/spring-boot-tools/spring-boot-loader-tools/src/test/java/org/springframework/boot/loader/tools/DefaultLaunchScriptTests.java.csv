commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void loadsDefaultScript() throws Exception {     DefaultLaunchScript script = new DefaultLaunchScript(null, null).     String content = new String(script.toByteArray()).     assertThat(content).contains("Spring Boot Startup Script"). }
false;public;0;4;;@Test public void logFilenameCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("logFilename"). }
false;public;0;4;;@Test public void pidFilenameCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("pidFilename"). }
false;public;0;4;;@Test public void initInfoProvidesCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("initInfoProvides"). }
false;public;0;4;;@Test public void initInfoRequiredStartCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("initInfoRequiredStart"). }
false;public;0;4;;@Test public void initInfoRequiredStopCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("initInfoRequiredStop"). }
false;public;0;4;;@Test public void initInfoDefaultStartCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("initInfoDefaultStart"). }
false;public;0;4;;@Test public void initInfoDefaultStopCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("initInfoDefaultStop"). }
false;public;0;4;;@Test public void initInfoShortDescriptionCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("initInfoShortDescription"). }
false;public;0;4;;@Test public void initInfoDescriptionCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("initInfoDescription"). }
false;public;0;4;;@Test public void initInfoChkconfigCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("initInfoChkconfig"). }
false;public;0;4;;@Test public void modeCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("mode"). }
false;public;0;4;;@Test public void useStartStopDaemonCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("useStartStopDaemon"). }
false;public;0;4;;@Test public void logFolderCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("logFolder"). }
false;public;0;4;;@Test public void pidFolderCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("pidFolder"). }
false;public;0;4;;@Test public void confFolderCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("confFolder"). }
false;public;0;4;;@Test public void stopWaitTimeCanBeReplaced() throws Exception {     assertThatPlaceholderCanBeReplaced("stopWaitTime"). }
false;public;0;7;;@Test public void inlinedConfScriptFileLoad() throws IOException {     DefaultLaunchScript script = new DefaultLaunchScript(null, createProperties("inlinedConfScript:src/test/resources/example.script")).     String content = new String(script.toByteArray()).     assertThat(content).contains("FOO=BAR"). }
false;public;0;6;;@Test public void defaultForUseStartStopDaemonIsTrue() throws Exception {     DefaultLaunchScript script = new DefaultLaunchScript(null, null).     String content = new String(script.toByteArray()).     assertThat(content).contains("USE_START_STOP_DAEMON=\"true\""). }
false;public;0;6;;@Test public void defaultForModeIsAuto() throws Exception {     DefaultLaunchScript script = new DefaultLaunchScript(null, null).     String content = new String(script.toByteArray()).     assertThat(content).contains("MODE=\"auto\""). }
false;public;0;6;;@Test public void defaultForStopWaitTimeIs60() throws Exception {     DefaultLaunchScript script = new DefaultLaunchScript(null, null).     String content = new String(script.toByteArray()).     assertThat(content).contains("STOP_WAIT_TIME=\"60\""). }
false;public;0;8;;@Test public void loadFromFile() throws Exception {     File file = this.temporaryFolder.newFile().     FileCopyUtils.copy("ABC".getBytes(), file).     DefaultLaunchScript script = new DefaultLaunchScript(file, null).     String content = new String(script.toByteArray()).     assertThat(content).isEqualTo("ABC"). }
false;public;0;9;;@Test public void expandVariables() throws Exception {     File file = this.temporaryFolder.newFile().     FileCopyUtils.copy("h{{a}}ll{{b}}".getBytes(), file).     DefaultLaunchScript script = new DefaultLaunchScript(file, createProperties("a:e", "b:o")).     String content = new String(script.toByteArray()).     assertThat(content).isEqualTo("hello"). }
false;public;0;9;;@Test public void expandVariablesMultiLine() throws Exception {     File file = this.temporaryFolder.newFile().     FileCopyUtils.copy("h{{a}}l\nl{{b}}".getBytes(), file).     DefaultLaunchScript script = new DefaultLaunchScript(file, createProperties("a:e", "b:o")).     String content = new String(script.toByteArray()).     assertThat(content).isEqualTo("hel\nlo"). }
false;public;0;8;;@Test public void expandVariablesWithDefaults() throws Exception {     File file = this.temporaryFolder.newFile().     FileCopyUtils.copy("h{{a:e}}ll{{b:o}}".getBytes(), file).     DefaultLaunchScript script = new DefaultLaunchScript(file, null).     String content = new String(script.toByteArray()).     assertThat(content).isEqualTo("hello"). }
false;public;0;8;;@Test public void expandVariablesCanDefaultToBlank() throws Exception {     File file = this.temporaryFolder.newFile().     FileCopyUtils.copy("s{{p:}}{{r:}}ing".getBytes(), file).     DefaultLaunchScript script = new DefaultLaunchScript(file, null).     String content = new String(script.toByteArray()).     assertThat(content).isEqualTo("sing"). }
false;public;0;9;;@Test public void expandVariablesWithDefaultsOverride() throws Exception {     File file = this.temporaryFolder.newFile().     FileCopyUtils.copy("h{{a:e}}ll{{b:o}}".getBytes(), file).     DefaultLaunchScript script = new DefaultLaunchScript(file, createProperties("a:a")).     String content = new String(script.toByteArray()).     assertThat(content).isEqualTo("hallo"). }
false;public;0;8;;@Test public void expandVariablesMissingAreUnchanged() throws Exception {     File file = this.temporaryFolder.newFile().     FileCopyUtils.copy("h{{a}}ll{{b}}".getBytes(), file).     DefaultLaunchScript script = new DefaultLaunchScript(file, null).     String content = new String(script.toByteArray()).     assertThat(content).isEqualTo("h{{a}}ll{{b}}"). }
false;private;1;6;;private void assertThatPlaceholderCanBeReplaced(String placeholder) throws Exception {     DefaultLaunchScript script = new DefaultLaunchScript(null, createProperties(placeholder + ":__test__")).     String content = new String(script.toByteArray()).     assertThat(content).contains("__test__"). }
false;private;1;8;;private Map<?, ?> createProperties(String... pairs) {     Map<Object, Object> properties = new HashMap<>().     for (String pair : pairs) {         String[] keyValue = pair.split(":").         properties.put(keyValue[0], keyValue[1]).     }     return properties. }
