commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Override public void execute() throws BuildException {     String mainClass = this.mainClass.     if (!StringUtils.hasText(mainClass)) {         mainClass = findMainClass().         if (!StringUtils.hasText(mainClass)) {             throw new BuildException("Could not determine main class given @classesRoot " + this.classesRoot).         }     }     handle(mainClass). }
false;private;0;21;;private String findMainClass() {     if (this.classesRoot == null) {         throw new BuildException("one of @mainClass or @classesRoot must be specified").     }     if (!this.classesRoot.exists()) {         throw new BuildException("@classesRoot " + this.classesRoot + " does not exist").     }     try {         if (this.classesRoot.isDirectory()) {             return MainClassFinder.findSingleMainClass(this.classesRoot, SPRING_BOOT_APPLICATION_CLASS_NAME).         }         return MainClassFinder.findSingleMainClass(new JarFile(this.classesRoot), "/", SPRING_BOOT_APPLICATION_CLASS_NAME).     } catch (IOException ex) {         throw new BuildException(ex).     } }
false;private;1;8;;private void handle(String mainClass) {     if (StringUtils.hasText(this.property)) {         getProject().setProperty(this.property, mainClass).     } else {         log("Found main class " + mainClass).     } }
true;public;1;3;/**  * Set the main class, which will cause the search to be bypassed.  * @param mainClass the main class name  */ ;/**  * Set the main class, which will cause the search to be bypassed.  * @param mainClass the main class name  */ public void setMainClass(String mainClass) {     this.mainClass = mainClass. }
true;public;1;3;/**  * Set the root location of classes to be searched.  * @param classesRoot the root location  */ ;/**  * Set the root location of classes to be searched.  * @param classesRoot the root location  */ public void setClassesRoot(File classesRoot) {     this.classesRoot = classesRoot. }
true;public;1;3;/**  * Set the ANT property to set (if left unset, result will be printed to the log).  * @param property the ANT property to set  */ ;/**  * Set the ANT property to set (if left unset, result will be printed to the log).  * @param property the ANT property to set  */ public void setProperty(String property) {     this.property = property. }
