commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Map<String, ConfigurationMetadataGroup> getAllGroups() {     return Collections.unmodifiableMap(this.allGroups). }
false;public;0;8;;@Override public Map<String, ConfigurationMetadataProperty> getAllProperties() {     Map<String, ConfigurationMetadataProperty> properties = new HashMap<>().     for (ConfigurationMetadataGroup group : this.allGroups.values()) {         properties.putAll(group.getProperties()).     }     return properties. }
true;public;1;14;/**  * Register the specified {@link ConfigurationMetadataSource sources}.  * @param sources the sources to add  */ ;/**  * Register the specified {@link ConfigurationMetadataSource sources}.  * @param sources the sources to add  */ public void add(Collection<ConfigurationMetadataSource> sources) {     for (ConfigurationMetadataSource source : sources) {         String groupId = source.getGroupId().         ConfigurationMetadataGroup group = this.allGroups.get(groupId).         if (group == null) {             group = new ConfigurationMetadataGroup(groupId).             this.allGroups.put(groupId, group).         }         String sourceType = source.getType().         if (sourceType != null) {             putIfAbsent(group.getSources(), sourceType, source).         }     } }
true;public;2;7;/**  * Add a {@link ConfigurationMetadataProperty} with the  * {@link ConfigurationMetadataSource source} that defines it, if any.  * @param property the property to add  * @param source the source  */ ;/**  * Add a {@link ConfigurationMetadataProperty} with the  * {@link ConfigurationMetadataSource source} that defines it, if any.  * @param property the property to add  * @param source the source  */ public void add(ConfigurationMetadataProperty property, ConfigurationMetadataSource source) {     if (source != null) {         putIfAbsent(source.getProperties(), property.getId(), property).     }     putIfAbsent(getGroup(source).getProperties(), property.getId(), property). }
true;public;1;17;/**  * Merge the content of the specified repository to this repository.  * @param repository the repository to include  */ ;/**  * Merge the content of the specified repository to this repository.  * @param repository the repository to include  */ public void include(ConfigurationMetadataRepository repository) {     for (ConfigurationMetadataGroup group : repository.getAllGroups().values()) {         ConfigurationMetadataGroup existingGroup = this.allGroups.get(group.getId()).         if (existingGroup == null) {             this.allGroups.put(group.getId(), group).         } else {             // Merge properties             group.getProperties().forEach((name, value) -> putIfAbsent(existingGroup.getProperties(), name, value)).             // Merge sources             group.getSources().forEach((name, value) -> putIfAbsent(existingGroup.getSources(), name, value)).         }     } }
false;private;1;11;;private ConfigurationMetadataGroup getGroup(ConfigurationMetadataSource source) {     if (source == null) {         ConfigurationMetadataGroup rootGroup = this.allGroups.get(ROOT_GROUP).         if (rootGroup == null) {             rootGroup = new ConfigurationMetadataGroup(ROOT_GROUP).             this.allGroups.put(ROOT_GROUP, rootGroup).         }         return rootGroup.     }     return this.allGroups.get(source.getGroupId()). }
false;private;3;5;;private <V> void putIfAbsent(Map<String, V> map, String key, V value) {     if (!map.containsKey(key)) {         map.put(key, value).     } }
