commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The full identifier of the property, in lowercase dashed form (e.g.  * my.group.simple-property)  * @return the property id  */ ;/**  * The full identifier of the property, in lowercase dashed form (e.g.  * my.group.simple-property)  * @return the property id  */ public String getId() {     return this.id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
true;public;0;3;/**  * The name of the property, in lowercase dashed form (e.g. simple-property). If this  * item does not belong to any group, the id is returned.  * @return the property name  */ ;/**  * The name of the property, in lowercase dashed form (e.g. simple-property). If this  * item does not belong to any group, the id is returned.  * @return the property name  */ public String getName() {     return this.name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
true;public;0;3;/**  * The class name of the data type of the property. For example,  * {@code java.lang.String}.  * <p>  * For consistency, the type of a primitive is specified using its wrapper  * counterpart, i.e. {@code boolean} becomes {@code java.lang.Boolean}. If the type  * holds generic information, these are provided as well, i.e. a {@code HashMap} of  * String to Integer would be defined as {@code java.util.HashMap  * <java.lang.String,java.lang.Integer>}.  * <p>  * Note that this class may be a complex type that gets converted from a String as  * values are bound.  * @return the property type  */ ;/**  * The class name of the data type of the property. For example,  * {@code java.lang.String}.  * <p>  * For consistency, the type of a primitive is specified using its wrapper  * counterpart, i.e. {@code boolean} becomes {@code java.lang.Boolean}. If the type  * holds generic information, these are provided as well, i.e. a {@code HashMap} of  * String to Integer would be defined as {@code java.util.HashMap  * <java.lang.String,java.lang.Integer>}.  * <p>  * Note that this class may be a complex type that gets converted from a String as  * values are bound.  * @return the property type  */ public String getType() {     return this.type. }
false;public;1;3;;public void setType(String type) {     this.type = type. }
true;public;0;3;/**  * A description of the property, if any. Can be multi-lines.  * @return the property description  * @see #getShortDescription()  */ ;/**  * A description of the property, if any. Can be multi-lines.  * @return the property description  * @see #getShortDescription()  */ public String getDescription() {     return this.description. }
false;public;1;3;;public void setDescription(String description) {     this.description = description. }
true;public;0;3;/**  * A single-line, single-sentence description of this property, if any.  * @return the property short description  * @see #getDescription()  */ ;/**  * A single-line, single-sentence description of this property, if any.  * @return the property short description  * @see #getDescription()  */ public String getShortDescription() {     return this.shortDescription. }
false;public;1;3;;public void setShortDescription(String shortDescription) {     this.shortDescription = shortDescription. }
true;public;0;3;/**  * The default value, if any.  * @return the default value  */ ;/**  * The default value, if any.  * @return the default value  */ public Object getDefaultValue() {     return this.defaultValue. }
false;public;1;3;;public void setDefaultValue(Object defaultValue) {     this.defaultValue = defaultValue. }
true;public;0;3;/**  * Return the hints of this item.  * @return the hints  */ ;/**  * Return the hints of this item.  * @return the hints  */ public Hints getHints() {     return this.hints. }
true;public;0;3;/**  * The {@link Deprecation} for this property, if any.  * @return the deprecation  * @see #isDeprecated()  */ ;/**  * The {@link Deprecation} for this property, if any.  * @return the deprecation  * @see #isDeprecated()  */ public Deprecation getDeprecation() {     return this.deprecation. }
false;public;1;3;;public void setDeprecation(Deprecation deprecation) {     this.deprecation = deprecation. }
true;public;0;3;/**  * Specify if the property is deprecated.  * @return if the property is deprecated  * @see #getDeprecation()  */ ;/**  * Specify if the property is deprecated.  * @return if the property is deprecated  * @see #getDeprecation()  */ public boolean isDeprecated() {     return this.deprecation != null. }
