commented;modifiers;parameterAmount;loc;comment;code
false;public;2;19;;public RawConfigurationMetadata read(InputStream in, Charset charset) throws IOException {     try {         JSONObject json = readJson(in, charset).         List<ConfigurationMetadataSource> groups = parseAllSources(json).         List<ConfigurationMetadataItem> items = parseAllItems(json).         List<ConfigurationMetadataHint> hints = parseAllHints(json).         return new RawConfigurationMetadata(groups, items, hints).     } catch (Exception ex) {         if (ex instanceof IOException) {             throw (IOException) ex.         }         if (ex instanceof RuntimeException) {             throw (RuntimeException) ex.         }         throw new IllegalStateException(ex).     } }
false;private;1;13;;private List<ConfigurationMetadataSource> parseAllSources(JSONObject root) throws Exception {     List<ConfigurationMetadataSource> result = new ArrayList<>().     if (!root.has("groups")) {         return result.     }     JSONArray sources = root.getJSONArray("groups").     for (int i = 0. i < sources.length(). i++) {         JSONObject source = sources.getJSONObject(i).         result.add(parseSource(source)).     }     return result. }
false;private;1;13;;private List<ConfigurationMetadataItem> parseAllItems(JSONObject root) throws Exception {     List<ConfigurationMetadataItem> result = new ArrayList<>().     if (!root.has("properties")) {         return result.     }     JSONArray items = root.getJSONArray("properties").     for (int i = 0. i < items.length(). i++) {         JSONObject item = items.getJSONObject(i).         result.add(parseItem(item)).     }     return result. }
false;private;1;13;;private List<ConfigurationMetadataHint> parseAllHints(JSONObject root) throws Exception {     List<ConfigurationMetadataHint> result = new ArrayList<>().     if (!root.has("hints")) {         return result.     }     JSONArray items = root.getJSONArray("hints").     for (int i = 0. i < items.length(). i++) {         JSONObject item = items.getJSONObject(i).         result.add(parseHint(item)).     }     return result. }
false;private;1;11;;private ConfigurationMetadataSource parseSource(JSONObject json) throws Exception {     ConfigurationMetadataSource source = new ConfigurationMetadataSource().     source.setGroupId(json.getString("name")).     source.setType(json.optString("type", null)).     String description = json.optString("description", null).     source.setDescription(description).     source.setShortDescription(this.sentenceExtractor.getFirstSentence(description)).     source.setSourceType(json.optString("sourceType", null)).     source.setSourceMethod(json.optString("sourceMethod", null)).     return source. }
false;private;1;13;;private ConfigurationMetadataItem parseItem(JSONObject json) throws Exception {     ConfigurationMetadataItem item = new ConfigurationMetadataItem().     item.setId(json.getString("name")).     item.setType(json.optString("type", null)).     String description = json.optString("description", null).     item.setDescription(description).     item.setShortDescription(this.sentenceExtractor.getFirstSentence(description)).     item.setDefaultValue(readItemValue(json.opt("defaultValue"))).     item.setDeprecation(parseDeprecation(json)).     item.setSourceType(json.optString("sourceType", null)).     item.setSourceMethod(json.optString("sourceMethod", null)).     return item. }
false;private;1;36;;private ConfigurationMetadataHint parseHint(JSONObject json) throws Exception {     ConfigurationMetadataHint hint = new ConfigurationMetadataHint().     hint.setId(json.getString("name")).     if (json.has("values")) {         JSONArray values = json.getJSONArray("values").         for (int i = 0. i < values.length(). i++) {             JSONObject value = values.getJSONObject(i).             ValueHint valueHint = new ValueHint().             valueHint.setValue(readItemValue(value.get("value"))).             String description = value.optString("description", null).             valueHint.setDescription(description).             valueHint.setShortDescription(this.sentenceExtractor.getFirstSentence(description)).             hint.getValueHints().add(valueHint).         }     }     if (json.has("providers")) {         JSONArray providers = json.getJSONArray("providers").         for (int i = 0. i < providers.length(). i++) {             JSONObject provider = providers.getJSONObject(i).             ValueProvider valueProvider = new ValueProvider().             valueProvider.setName(provider.getString("name")).             if (provider.has("parameters")) {                 JSONObject parameters = provider.getJSONObject("parameters").                 Iterator<?> keys = parameters.keys().                 while (keys.hasNext()) {                     String key = (String) keys.next().                     valueProvider.getParameters().put(key, readItemValue(parameters.get(key))).                 }             }             hint.getValueProviders().add(valueProvider).         }     }     return hint. }
false;private;1;15;;private Deprecation parseDeprecation(JSONObject object) throws Exception {     if (object.has("deprecation")) {         JSONObject deprecationJsonObject = object.getJSONObject("deprecation").         Deprecation deprecation = new Deprecation().         deprecation.setLevel(parseDeprecationLevel(deprecationJsonObject.optString("level", null))).         String reason = deprecationJsonObject.optString("reason", null).         deprecation.setReason(reason).         deprecation.setShortReason(this.sentenceExtractor.getFirstSentence(reason)).         deprecation.setReplacement(deprecationJsonObject.optString("replacement", null)).         return deprecation.     }     return object.optBoolean("deprecated") ? new Deprecation() : null. }
false;private;1;11;;private Deprecation.Level parseDeprecationLevel(String value) {     if (value != null) {         try {             return Deprecation.Level.valueOf(value.toUpperCase(Locale.ENGLISH)).         } catch (IllegalArgumentException ex) {         // let's use the default         }     }     return Deprecation.Level.WARNING. }
false;private;1;11;;private Object readItemValue(Object value) throws Exception {     if (value instanceof JSONArray) {         JSONArray array = (JSONArray) value.         Object[] content = new Object[array.length()].         for (int i = 0. i < array.length(). i++) {             content[i] = array.get(i).         }         return content.     }     return value. }
false;private;2;15;;private JSONObject readJson(InputStream in, Charset charset) throws Exception {     try {         StringBuilder out = new StringBuilder().         InputStreamReader reader = new InputStreamReader(in, charset).         char[] buffer = new char[BUFFER_SIZE].         int bytesRead.         while ((bytesRead = reader.read(buffer)) != -1) {             out.append(buffer, 0, bytesRead).         }         return new JSONObject(out.toString()).     } finally {         in.close().     } }
