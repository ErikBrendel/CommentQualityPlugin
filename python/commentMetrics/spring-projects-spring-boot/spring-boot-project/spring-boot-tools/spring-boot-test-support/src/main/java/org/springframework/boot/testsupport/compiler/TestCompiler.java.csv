commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public TestCompilationTask getTask(Collection<File> sourceFiles) {     Iterable<? extends JavaFileObject> javaFileObjects = this.fileManager.getJavaFileObjectsFromFiles(sourceFiles).     return getTask(javaFileObjects). }
false;public;1;4;;public TestCompilationTask getTask(Class<?>... types) {     Iterable<? extends JavaFileObject> javaFileObjects = getJavaFileObjects(types).     return getTask(javaFileObjects). }
false;private;1;5;;private TestCompilationTask getTask(Iterable<? extends JavaFileObject> javaFileObjects) {     return new TestCompilationTask(this.compiler.getTask(null, this.fileManager, null, null, null, javaFileObjects)). }
false;public;0;3;;public File getOutputLocation() {     return this.outputLocation. }
false;private;1;7;;private Iterable<? extends JavaFileObject> getJavaFileObjects(Class<?>... types) {     File[] files = new File[types.length].     for (int i = 0. i < types.length. i++) {         files[i] = getFile(types[i]).     }     return this.fileManager.getJavaFileObjects(files). }
false;protected;1;3;;protected File getFile(Class<?> type) {     return new File(getSourceFolder(), sourcePathFor(type)). }
false;public,static;1;3;;public static String sourcePathFor(Class<?> type) {     return type.getName().replace('.', '/') + ".java". }
false;protected;0;3;;protected File getSourceFolder() {     return SOURCE_FOLDER. }
false;public;1;6;;public void call(Processor... processors) {     this.task.setProcessors(Arrays.asList(processors)).     if (!this.task.call()) {         throw new IllegalStateException("Compilation failed").     } }
