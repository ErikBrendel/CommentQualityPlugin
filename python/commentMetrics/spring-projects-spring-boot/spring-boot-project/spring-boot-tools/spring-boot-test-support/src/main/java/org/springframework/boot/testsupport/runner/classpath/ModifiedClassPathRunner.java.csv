commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;10;;@Override protected TestClass createTestClass(Class<?> testClass) {     try {         ClassLoader classLoader = createTestClassLoader(testClass).         return new ModifiedClassPathTestClass(classLoader, testClass.getName()).     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
false;protected;0;6;;@Override protected Object createTest() throws Exception {     ModifiedClassPathTestClass testClass = (ModifiedClassPathTestClass) getTestClass().     return testClass.doWithModifiedClassPathThreadContextClassLoader(() -> ModifiedClassPathRunner.super.createTest()). }
false;private;1;6;;private URLClassLoader createTestClassLoader(Class<?> testClass) throws Exception {     ClassLoader classLoader = this.getClass().getClassLoader().     return new ModifiedClassPathClassLoader(processUrls(extractUrls(classLoader), testClass), classLoader.getParent(), classLoader). }
false;private;1;12;;private URL[] extractUrls(ClassLoader classLoader) throws Exception {     List<URL> extractedUrls = new ArrayList<>().     doExtractUrls(classLoader).forEach((URL url) -> {         if (isManifestOnlyJar(url)) {             extractedUrls.addAll(extractUrlsFromManifestClassPath(url)).         } else {             extractedUrls.add(url).         }     }).     return extractedUrls.toArray(new URL[0]). }
false;private;1;7;;private Stream<URL> doExtractUrls(ClassLoader classLoader) throws Exception {     if (classLoader instanceof URLClassLoader) {         return Stream.of(((URLClassLoader) classLoader).getURLs()).     }     return Stream.of(ManagementFactory.getRuntimeMXBean().getClassPath().split(File.pathSeparator)).map(this::toURL). }
false;private;1;8;;private URL toURL(String entry) {     try {         return new File(entry).toURI().toURL().     } catch (Exception ex) {         throw new IllegalArgumentException(ex).     } }
false;private;1;3;;private boolean isManifestOnlyJar(URL url) {     return isSurefireBooterJar(url) || isShortenedIntelliJJar(url). }
false;private;1;3;;private boolean isSurefireBooterJar(URL url) {     return url.getPath().contains("surefirebooter"). }
false;private;1;14;;private boolean isShortenedIntelliJJar(URL url) {     String urlPath = url.getPath().     boolean isCandidate = INTELLIJ_CLASSPATH_JAR_PATTERN.matcher(urlPath).matches().     if (isCandidate) {         try {             Attributes attributes = getManifestMainAttributesFromUrl(url).             String createdBy = attributes.getValue("Created-By").             return createdBy != null && createdBy.contains("IntelliJ").         } catch (Exception ex) {         }     }     return false. }
false;private;1;12;;private List<URL> extractUrlsFromManifestClassPath(URL booterJar) {     List<URL> urls = new ArrayList<>().     try {         for (String entry : getClassPath(booterJar)) {             urls.add(new URL(entry)).         }     } catch (Exception ex) {         throw new RuntimeException(ex).     }     return urls. }
false;private;1;5;;private String[] getClassPath(URL booterJar) throws Exception {     Attributes attributes = getManifestMainAttributesFromUrl(booterJar).     return StringUtils.delimitedListToStringArray(attributes.getValue(Attributes.Name.CLASS_PATH), " "). }
false;private;1;5;;private Attributes getManifestMainAttributesFromUrl(URL url) throws Exception {     try (JarFile jarFile = new JarFile(new File(url.toURI()))) {         return jarFile.getManifest().getMainAttributes().     } }
false;private;2;11;;private URL[] processUrls(URL[] urls, Class<?> testClass) throws Exception {     ClassPathEntryFilter filter = new ClassPathEntryFilter(testClass).     List<URL> processedUrls = new ArrayList<>().     processedUrls.addAll(getAdditionalUrls(testClass)).     for (URL url : urls) {         if (!filter.isExcluded(url)) {             processedUrls.add(url).         }     }     return processedUrls.toArray(new URL[0]). }
false;private;1;8;;private List<URL> getAdditionalUrls(Class<?> testClass) throws Exception {     ClassPathOverrides overrides = AnnotationUtils.findAnnotation(testClass, ClassPathOverrides.class).     if (overrides == null) {         return Collections.emptyList().     }     return resolveCoordinates(overrides.value()). }
false;private;1;27;;private List<URL> resolveCoordinates(String[] coordinates) throws Exception {     DefaultServiceLocator serviceLocator = MavenRepositorySystemUtils.newServiceLocator().     serviceLocator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class).     serviceLocator.addService(TransporterFactory.class, HttpTransporterFactory.class).     RepositorySystem repositorySystem = serviceLocator.getService(RepositorySystem.class).     DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession().     LocalRepository localRepository = new LocalRepository(System.getProperty("user.home") + "/.m2/repository").     session.setLocalRepositoryManager(repositorySystem.newLocalRepositoryManager(session, localRepository)).     CollectRequest collectRequest = new CollectRequest(null, Arrays.asList(new RemoteRepository.Builder("central", "default", "https://repo.maven.apache.org/maven2").build())).     collectRequest.setDependencies(createDependencies(coordinates)).     DependencyRequest dependencyRequest = new DependencyRequest(collectRequest, null).     DependencyResult result = repositorySystem.resolveDependencies(session, dependencyRequest).     List<URL> resolvedArtifacts = new ArrayList<>().     for (ArtifactResult artifact : result.getArtifactResults()) {         resolvedArtifacts.add(artifact.getArtifact().getFile().toURI().toURL()).     }     return resolvedArtifacts. }
false;private;1;7;;private List<Dependency> createDependencies(String[] allCoordinates) {     List<Dependency> dependencies = new ArrayList<>().     for (String coordinate : allCoordinates) {         dependencies.add(new Dependency(new DefaultArtifact(coordinate), null)).     }     return dependencies. }
false;private;1;12;;private boolean isExcluded(URL url) throws Exception {     if (!"file".equals(url.getProtocol())) {         return false.     }     String name = new File(url.toURI()).getName().     for (String exclusion : this.exclusions) {         if (this.matcher.match(exclusion, name)) {             return true.         }     }     return false. }
false;public;1;10;;@Override public List<FrameworkMethod> getAnnotatedMethods(Class<? extends Annotation> annotationClass) {     try {         return getAnnotatedMethods(annotationClass.getName()).     } catch (ClassNotFoundException ex) {         throw new RuntimeException(ex).     } }
false;private;1;8;;@SuppressWarnings("unchecked") private List<FrameworkMethod> getAnnotatedMethods(String annotationClassName) throws ClassNotFoundException {     Class<? extends Annotation> annotationClass = (Class<? extends Annotation>) this.classLoader.loadClass(annotationClassName).     List<FrameworkMethod> methods = super.getAnnotatedMethods(annotationClass).     return wrapFrameworkMethods(methods). }
false;private;1;9;;private List<FrameworkMethod> wrapFrameworkMethods(List<FrameworkMethod> methods) {     List<FrameworkMethod> wrapped = new ArrayList<>(methods.size()).     for (FrameworkMethod frameworkMethod : methods) {         wrapped.add(new ModifiedClassPathFrameworkMethod(frameworkMethod.getMethod())).     }     return wrapped. }
false;private;1;12;;private <T, E extends Throwable> T doWithModifiedClassPathThreadContextClassLoader(ModifiedClassPathTcclAction<T, E> action) throws E {     ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader().     Thread.currentThread().setContextClassLoader(this.classLoader).     try {         return action.perform().     } finally {         Thread.currentThread().setContextClassLoader(originalClassLoader).     } }
false;;0;1;;T perform() throws E.
false;public;2;7;;@Override public Object invokeExplosively(Object target, Object... params) throws Throwable {     return doWithModifiedClassPathThreadContextClassLoader(() -> ModifiedClassPathFrameworkMethod.super.invokeExplosively(target, params)). }
false;public;1;7;;@Override public Class<?> loadClass(String name) throws ClassNotFoundException {     if (name.startsWith("org.junit") || name.startsWith("org.hamcrest")) {         return this.junitLoader.loadClass(name).     }     return super.loadClass(name). }
