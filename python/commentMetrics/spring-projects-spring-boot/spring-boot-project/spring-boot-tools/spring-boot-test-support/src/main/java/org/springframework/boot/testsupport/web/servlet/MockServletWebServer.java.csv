commented;modifiers;parameterAmount;loc;comment;code
false;private;0;41;;private void initialize() {     try {         this.servletContext = mock(ServletContext.class).         given(this.servletContext.addServlet(anyString(), any(Servlet.class))).willAnswer((invocation) -> {             RegisteredServlet registeredServlet = new RegisteredServlet(invocation.getArgument(1)).             MockServletWebServer.this.registeredServlets.add(registeredServlet).             return registeredServlet.getRegistration().         }).         given(this.servletContext.addFilter(anyString(), any(Filter.class))).willAnswer((invocation) -> {             RegisteredFilter registeredFilter = new RegisteredFilter(invocation.getArgument(1)).             MockServletWebServer.this.registeredFilters.add(registeredFilter).             return registeredFilter.getRegistration().         }).         final Map<String, String> initParameters = new HashMap<>().         given(this.servletContext.setInitParameter(anyString(), anyString())).will((invocation) -> {             initParameters.put(invocation.getArgument(0), invocation.getArgument(1)).             return null.         }).         given(this.servletContext.getInitParameterNames()).willReturn(Collections.enumeration(initParameters.keySet())).         given(this.servletContext.getInitParameter(anyString())).willAnswer((invocation) -> initParameters.get(invocation.getArgument(0))).         given(this.servletContext.getAttributeNames()).willReturn(Collections.emptyEnumeration()).         given(this.servletContext.getNamedDispatcher("default")).willReturn(mock(RequestDispatcher.class)).         for (Initializer initializer : this.initializers) {             initializer.onStartup(this.servletContext).         }     } catch (ServletException ex) {         throw new RuntimeException(ex).     } }
false;public;0;4;;public void stop() {     this.servletContext = null.     this.registeredServlets.clear(). }
false;public;0;3;;public ServletContext getServletContext() {     return this.servletContext. }
false;public;0;5;;public Servlet[] getServlets() {     Servlet[] servlets = new Servlet[this.registeredServlets.size()].     Arrays.setAll(servlets, (i) -> this.registeredServlets.get(i).getServlet()).     return servlets. }
false;public;1;3;;public RegisteredServlet getRegisteredServlet(int index) {     return getRegisteredServlets().get(index). }
false;public;0;3;;public List<RegisteredServlet> getRegisteredServlets() {     return this.registeredServlets. }
false;public;1;3;;public RegisteredFilter getRegisteredFilters(int index) {     return getRegisteredFilters().get(index). }
false;public;0;3;;public List<RegisteredFilter> getRegisteredFilters() {     return this.registeredFilters. }
false;public;0;3;;public int getPort() {     return this.port. }
false;public;0;3;;public ServletRegistration.Dynamic getRegistration() {     return this.registration. }
false;public;0;3;;public Servlet getServlet() {     return this.servlet. }
false;public;0;3;;public FilterRegistration.Dynamic getRegistration() {     return this.registration. }
false;public;0;3;;public Filter getFilter() {     return this.filter. }
false;;1;1;;void onStartup(ServletContext context) throws ServletException.
