commented;modifiers;parameterAmount;loc;comment;code
true;public;0;15;/**  * Returns the location into which test classes have been built.  * @return test classes location  */ ;/**  * Returns the location into which test classes have been built.  * @return test classes location  */ public File getTestClassesLocation() {     try {         File location = new File(this.testClass.getProtectionDomain().getCodeSource().getLocation().toURI()).         if (location.getPath().endsWith(path("target", "test-classes"))) {             return location.         }         throw new IllegalStateException("Unexpected test classes location '" + location + "'").     } catch (URISyntaxException ex) {         throw new IllegalStateException("Invalid test class code source location", ex).     } }
true;public;0;9;/**  * Returns the location into which test resources have been built.  * @return test resources location  */ ;/**  * Returns the location into which test resources have been built.  * @return test resources location  */ public File getTestResourcesLocation() {     File testClassesLocation = getTestClassesLocation().     if (testClassesLocation.getPath().endsWith(path("target", "test-classes"))) {         return testClassesLocation.     }     throw new IllegalStateException("Cannot determine test resources location from classes location '" + testClassesLocation + "'"). }
true;public;0;3;/**  * Returns the root location into which build output is written.  * @return root location  */ ;/**  * Returns the root location into which build output is written.  * @return root location  */ public File getRootLocation() {     return getTestClassesLocation().getParentFile(). }
false;private;1;3;;private String path(String... components) {     return File.separator + String.join(File.separator, components). }
