commented;modifiers;parameterAmount;loc;comment;code
true;public;0;7;// tag::test-env[] ;// end::runner[] // tag::test-env[] @Test public void serviceNameCanBeConfigured() {     this.contextRunner.withPropertyValues("user.name=test123").run((context) -> {         assertThat(context).hasSingleBean(UserService.class).         assertThat(context.getBean(UserService.class).getName()).isEqualTo("test123").     }). }
true;public;0;5;// tag::test-classloader[] ;// end::test-env[] // tag::test-classloader[] @Test public void serviceIsIgnoredIfLibraryIsNotPresent() {     this.contextRunner.withClassLoader(new FilteredClassLoader(UserService.class)).run((context) -> assertThat(context).doesNotHaveBean("userService")). }
true;public;0;9;// tag::test-user-config[] ;// end::test-classloader[] // tag::test-user-config[] @Test public void defaultServiceBacksOff() {     this.contextRunner.withUserConfiguration(UserConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(UserService.class).         assertThat(context.getBean(UserService.class)).isSameAs(context.getBean(UserConfiguration.class).myUserService()).     }). }
false;public;0;4;;@Bean public UserService myUserService() {     return new UserService("mine"). }
