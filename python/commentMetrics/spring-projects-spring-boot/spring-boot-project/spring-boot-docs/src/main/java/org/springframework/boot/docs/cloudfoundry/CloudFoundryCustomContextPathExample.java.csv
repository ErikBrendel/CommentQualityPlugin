commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;13;;@Override protected void prepareContext(Host host, ServletContextInitializer[] initializers) {     super.prepareContext(host, initializers).     StandardContext child = new StandardContext().     child.addLifecycleListener(new Tomcat.FixContextListener()).     child.setPath("/cloudfoundryapplication").     ServletContainerInitializer initializer = getServletContextInitializer(getContextPath()).     child.addServletContainerInitializer(initializer, Collections.emptySet()).     child.setCrossContext(true).     host.addChild(child). }
true;public;0;20;// tag::configuration[] ;// tag::configuration[] @Bean public TomcatServletWebServerFactory servletWebServerFactory() {     return new TomcatServletWebServerFactory() {          @Override         protected void prepareContext(Host host, ServletContextInitializer[] initializers) {             super.prepareContext(host, initializers).             StandardContext child = new StandardContext().             child.addLifecycleListener(new Tomcat.FixContextListener()).             child.setPath("/cloudfoundryapplication").             ServletContainerInitializer initializer = getServletContextInitializer(getContextPath()).             child.addServletContainerInitializer(initializer, Collections.emptySet()).             child.setCrossContext(true).             host.addChild(child).         }     }. }
false;public;2;8;;@Override public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {     ServletContext context = req.getServletContext().getContext(contextPath).     context.getRequestDispatcher("/cloudfoundryapplication").forward(req, res). }
false;private;1;17;;private ServletContainerInitializer getServletContextInitializer(String contextPath) {     return (c, context) -> {         Servlet servlet = new GenericServlet() {              @Override             public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {                 ServletContext context = req.getServletContext().getContext(contextPath).                 context.getRequestDispatcher("/cloudfoundryapplication").forward(req, res).             }         }.         context.addServlet("cloudfoundry", servlet).addMapping("/*").     }. }
