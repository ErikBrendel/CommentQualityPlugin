commented;modifiers;parameterAmount;loc;comment;code
false;public;2;8;;@Override public boolean isMatch(String sourceFolder, URL url) {     String jarName = getJarName(url).     if (!StringUtils.hasLength(jarName)) {         return false.     }     return isMatch(sourceFolder, jarName). }
false;private;1;7;;private String getJarName(URL url) {     Matcher matcher = URL_MODULE_PATTERN.matcher(url.toString()).     if (matcher.find()) {         return matcher.group(1).     }     return null. }
false;private;2;11;;private boolean isMatch(String sourceFolder, String jarName) {     sourceFolder = stripTrailingSlash(sourceFolder).     sourceFolder = stripCommonEnds(sourceFolder).     String[] folders = StringUtils.delimitedListToStringArray(sourceFolder, "/").     for (int i = folders.length - 1. i >= 0. i--) {         if (isFolderMatch(folders[i], jarName)) {             return true.         }     }     return false. }
false;private;2;7;;private boolean isFolderMatch(String folder, String jarName) {     if (!jarName.startsWith(folder) || SKIPPED_PROJECTS.contains(folder)) {         return false.     }     String version = jarName.substring(folder.length()).     return version.isEmpty() || VERSION_PATTERN.matcher(version).matches(). }
false;private;1;6;;private String stripTrailingSlash(String string) {     if (string.endsWith("/")) {         return string.substring(0, string.length() - 1).     }     return string. }
false;private;1;8;;private String stripCommonEnds(String string) {     for (String ending : COMMON_ENDINGS) {         if (string.endsWith(ending)) {             return string.substring(0, string.length() - ending.length()).         }     }     return string. }
