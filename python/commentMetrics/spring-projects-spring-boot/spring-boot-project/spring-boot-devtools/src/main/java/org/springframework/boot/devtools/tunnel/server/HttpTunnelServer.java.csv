# id;timestamp;commentText;codeText;commentWords;codeWords
HttpTunnelServer -> ServerThread -> public void handleIncomingHttp(HttpConnection httpConnection) throws IOException;1507173536;Handle an incoming {@link HttpConnection}._@param httpConnection the connection to handle._@throws IOException in case of I/O errors;public void handleIncomingHttp(HttpConnection httpConnection) throws IOException {_			if (this.closed) {_				httpConnection.respond(HttpStatus.GONE)__			}_			synchronized (this.httpConnections) {_				while (this.httpConnections.size() > 1) {_					this.httpConnections.removeFirst()_							.respond(HttpStatus.TOO_MANY_REQUESTS)__				}_				this.lastHttpRequestTime = System.currentTimeMillis()__				this.httpConnections.addLast(httpConnection)__				this.httpConnections.notify()__			}_			forwardToTargetServer(httpConnection)__		};handle,an,incoming,link,http,connection,param,http,connection,the,connection,to,handle,throws,ioexception,in,case,of,i,o,errors;public,void,handle,incoming,http,http,connection,http,connection,throws,ioexception,if,this,closed,http,connection,respond,http,status,gone,synchronized,this,http,connections,while,this,http,connections,size,1,this,http,connections,remove,first,respond,http,status,this,last,http,request,time,system,current,time,millis,this,http,connections,add,last,http,connection,this,http,connections,notify,forward,to,target,server,http,connection
HttpTunnelServer -> ServerThread -> public void handleIncomingHttp(HttpConnection httpConnection) throws IOException;1508247426;Handle an incoming {@link HttpConnection}._@param httpConnection the connection to handle._@throws IOException in case of I/O errors;public void handleIncomingHttp(HttpConnection httpConnection) throws IOException {_			if (this.closed) {_				httpConnection.respond(HttpStatus.GONE)__			}_			synchronized (this.httpConnections) {_				while (this.httpConnections.size() > 1) {_					this.httpConnections.removeFirst()_							.respond(HttpStatus.TOO_MANY_REQUESTS)__				}_				this.lastHttpRequestTime = System.currentTimeMillis()__				this.httpConnections.addLast(httpConnection)__				this.httpConnections.notify()__			}_			forwardToTargetServer(httpConnection)__		};handle,an,incoming,link,http,connection,param,http,connection,the,connection,to,handle,throws,ioexception,in,case,of,i,o,errors;public,void,handle,incoming,http,http,connection,http,connection,throws,ioexception,if,this,closed,http,connection,respond,http,status,gone,synchronized,this,http,connections,while,this,http,connections,size,1,this,http,connections,remove,first,respond,http,status,this,last,http,request,time,system,current,time,millis,this,http,connections,add,last,http,connection,this,http,connections,notify,forward,to,target,server,http,connection
HttpTunnelServer -> ServerThread -> public void handleIncomingHttp(HttpConnection httpConnection) throws IOException;1520609932;Handle an incoming {@link HttpConnection}._@param httpConnection the connection to handle._@throws IOException in case of I/O errors;public void handleIncomingHttp(HttpConnection httpConnection) throws IOException {_			if (this.closed) {_				httpConnection.respond(HttpStatus.GONE)__			}_			synchronized (this.httpConnections) {_				while (this.httpConnections.size() > 1) {_					this.httpConnections.removeFirst()_							.respond(HttpStatus.TOO_MANY_REQUESTS)__				}_				this.lastHttpRequestTime = System.currentTimeMillis()__				this.httpConnections.addLast(httpConnection)__				this.httpConnections.notify()__			}_			forwardToTargetServer(httpConnection)__		};handle,an,incoming,link,http,connection,param,http,connection,the,connection,to,handle,throws,ioexception,in,case,of,i,o,errors;public,void,handle,incoming,http,http,connection,http,connection,throws,ioexception,if,this,closed,http,connection,respond,http,status,gone,synchronized,this,http,connections,while,this,http,connections,size,1,this,http,connections,remove,first,respond,http,status,this,last,http,request,time,system,current,time,millis,this,http,connections,add,last,http,connection,this,http,connections,notify,forward,to,target,server,http,connection
HttpTunnelServer -> ServerThread -> public void handleIncomingHttp(HttpConnection httpConnection) throws IOException;1534432765;Handle an incoming {@link HttpConnection}._@param httpConnection the connection to handle._@throws IOException in case of I/O errors;public void handleIncomingHttp(HttpConnection httpConnection) throws IOException {_			if (this.closed) {_				httpConnection.respond(HttpStatus.GONE)__			}_			synchronized (this.httpConnections) {_				while (this.httpConnections.size() > 1) {_					this.httpConnections.removeFirst()_							.respond(HttpStatus.TOO_MANY_REQUESTS)__				}_				this.lastHttpRequestTime = System.currentTimeMillis()__				this.httpConnections.addLast(httpConnection)__				this.httpConnections.notify()__			}_			forwardToTargetServer(httpConnection)__		};handle,an,incoming,link,http,connection,param,http,connection,the,connection,to,handle,throws,ioexception,in,case,of,i,o,errors;public,void,handle,incoming,http,http,connection,http,connection,throws,ioexception,if,this,closed,http,connection,respond,http,status,gone,synchronized,this,http,connections,while,this,http,connections,size,1,this,http,connections,remove,first,respond,http,status,this,last,http,request,time,system,current,time,millis,this,http,connections,add,last,http,connection,this,http,connections,notify,forward,to,target,server,http,connection
HttpTunnelServer -> HttpConnection -> protected ServerHttpAsyncRequestControl startAsync();1507173536;Start asynchronous support or if unavailable return {@code null} to cause_{@link #waitForResponse()} to block._@return the async request control;protected ServerHttpAsyncRequestControl startAsync() {_			try {_				_				ServerHttpAsyncRequestControl async = this.request_						.getAsyncRequestControl(this.response)__				async.start()__				return async__			}_			catch (Exception ex) {_				return null__			}_		};start,asynchronous,support,or,if,unavailable,return,code,null,to,cause,link,wait,for,response,to,block,return,the,async,request,control;protected,server,http,async,request,control,start,async,try,server,http,async,request,control,async,this,request,get,async,request,control,this,response,async,start,return,async,catch,exception,ex,return,null
HttpTunnelServer -> HttpConnection -> protected ServerHttpAsyncRequestControl startAsync();1508247426;Start asynchronous support or if unavailable return {@code null} to cause_{@link #waitForResponse()} to block._@return the async request control;protected ServerHttpAsyncRequestControl startAsync() {_			try {_				_				ServerHttpAsyncRequestControl async = this.request_						.getAsyncRequestControl(this.response)__				async.start()__				return async__			}_			catch (Exception ex) {_				return null__			}_		};start,asynchronous,support,or,if,unavailable,return,code,null,to,cause,link,wait,for,response,to,block,return,the,async,request,control;protected,server,http,async,request,control,start,async,try,server,http,async,request,control,async,this,request,get,async,request,control,this,response,async,start,return,async,catch,exception,ex,return,null
HttpTunnelServer -> HttpConnection -> protected ServerHttpAsyncRequestControl startAsync();1520609932;Start asynchronous support or if unavailable return {@code null} to cause_{@link #waitForResponse()} to block._@return the async request control;protected ServerHttpAsyncRequestControl startAsync() {_			try {_				_				ServerHttpAsyncRequestControl async = this.request_						.getAsyncRequestControl(this.response)__				async.start()__				return async__			}_			catch (Exception ex) {_				return null__			}_		};start,asynchronous,support,or,if,unavailable,return,code,null,to,cause,link,wait,for,response,to,block,return,the,async,request,control;protected,server,http,async,request,control,start,async,try,server,http,async,request,control,async,this,request,get,async,request,control,this,response,async,start,return,async,catch,exception,ex,return,null
HttpTunnelServer -> HttpConnection -> protected ServerHttpAsyncRequestControl startAsync();1534432765;Start asynchronous support or if unavailable return {@code null} to cause_{@link #waitForResponse()} to block._@return the async request control;protected ServerHttpAsyncRequestControl startAsync() {_			try {_				_				ServerHttpAsyncRequestControl async = this.request_						.getAsyncRequestControl(this.response)__				async.start()__				return async__			}_			catch (Exception ex) {_				return null__			}_		};start,asynchronous,support,or,if,unavailable,return,code,null,to,cause,link,wait,for,response,to,block,return,the,async,request,control;protected,server,http,async,request,control,start,async,try,server,http,async,request,control,async,this,request,get,async,request,control,this,response,async,start,return,async,catch,exception,ex,return,null
HttpTunnelServer -> protected void handle(HttpConnection httpConnection) throws IOException;1507173536;Handle an incoming HTTP connection._@param httpConnection the HTTP connection_@throws IOException in case of I/O errors;protected void handle(HttpConnection httpConnection) throws IOException {_		try {_			getServerThread().handleIncomingHttp(httpConnection)__			httpConnection.waitForResponse()__		}_		catch (ConnectException ex) {_			httpConnection.respond(HttpStatus.GONE)__		}_	};handle,an,incoming,http,connection,param,http,connection,the,http,connection,throws,ioexception,in,case,of,i,o,errors;protected,void,handle,http,connection,http,connection,throws,ioexception,try,get,server,thread,handle,incoming,http,http,connection,http,connection,wait,for,response,catch,connect,exception,ex,http,connection,respond,http,status,gone
HttpTunnelServer -> protected void handle(HttpConnection httpConnection) throws IOException;1508247426;Handle an incoming HTTP connection._@param httpConnection the HTTP connection_@throws IOException in case of I/O errors;protected void handle(HttpConnection httpConnection) throws IOException {_		try {_			getServerThread().handleIncomingHttp(httpConnection)__			httpConnection.waitForResponse()__		}_		catch (ConnectException ex) {_			httpConnection.respond(HttpStatus.GONE)__		}_	};handle,an,incoming,http,connection,param,http,connection,the,http,connection,throws,ioexception,in,case,of,i,o,errors;protected,void,handle,http,connection,http,connection,throws,ioexception,try,get,server,thread,handle,incoming,http,http,connection,http,connection,wait,for,response,catch,connect,exception,ex,http,connection,respond,http,status,gone
HttpTunnelServer -> protected void handle(HttpConnection httpConnection) throws IOException;1520609932;Handle an incoming HTTP connection._@param httpConnection the HTTP connection_@throws IOException in case of I/O errors;protected void handle(HttpConnection httpConnection) throws IOException {_		try {_			getServerThread().handleIncomingHttp(httpConnection)__			httpConnection.waitForResponse()__		}_		catch (ConnectException ex) {_			httpConnection.respond(HttpStatus.GONE)__		}_	};handle,an,incoming,http,connection,param,http,connection,the,http,connection,throws,ioexception,in,case,of,i,o,errors;protected,void,handle,http,connection,http,connection,throws,ioexception,try,get,server,thread,handle,incoming,http,http,connection,http,connection,wait,for,response,catch,connect,exception,ex,http,connection,respond,http,status,gone
HttpTunnelServer -> protected void handle(HttpConnection httpConnection) throws IOException;1534432765;Handle an incoming HTTP connection._@param httpConnection the HTTP connection_@throws IOException in case of I/O errors;protected void handle(HttpConnection httpConnection) throws IOException {_		try {_			getServerThread().handleIncomingHttp(httpConnection)__			httpConnection.waitForResponse()__		}_		catch (ConnectException ex) {_			httpConnection.respond(HttpStatus.GONE)__		}_	};handle,an,incoming,http,connection,param,http,connection,the,http,connection,throws,ioexception,in,case,of,i,o,errors;protected,void,handle,http,connection,http,connection,throws,ioexception,try,get,server,thread,handle,incoming,http,http,connection,http,connection,wait,for,response,catch,connect,exception,ex,http,connection,respond,http,status,gone
HttpTunnelServer -> HttpConnection -> public boolean isDisconnectRequest();1507173536;Detect if the request is actually a signal to disconnect._@return if the request is a signal to disconnect;public boolean isDisconnectRequest() {_			return DISCONNECT_MEDIA_TYPE_					.equals(this.request.getHeaders().getContentType())__		};detect,if,the,request,is,actually,a,signal,to,disconnect,return,if,the,request,is,a,signal,to,disconnect;public,boolean,is,disconnect,request,return,equals,this,request,get,headers,get,content,type
HttpTunnelServer -> HttpConnection -> public boolean isDisconnectRequest();1508247426;Detect if the request is actually a signal to disconnect._@return if the request is a signal to disconnect;public boolean isDisconnectRequest() {_			return DISCONNECT_MEDIA_TYPE_					.equals(this.request.getHeaders().getContentType())__		};detect,if,the,request,is,actually,a,signal,to,disconnect,return,if,the,request,is,a,signal,to,disconnect;public,boolean,is,disconnect,request,return,equals,this,request,get,headers,get,content,type
HttpTunnelServer -> HttpConnection -> public boolean isDisconnectRequest();1520609932;Detect if the request is actually a signal to disconnect._@return if the request is a signal to disconnect;public boolean isDisconnectRequest() {_			return DISCONNECT_MEDIA_TYPE_					.equals(this.request.getHeaders().getContentType())__		};detect,if,the,request,is,actually,a,signal,to,disconnect,return,if,the,request,is,a,signal,to,disconnect;public,boolean,is,disconnect,request,return,equals,this,request,get,headers,get,content,type
HttpTunnelServer -> HttpConnection -> public boolean isDisconnectRequest();1534432765;Detect if the request is actually a signal to disconnect._@return if the request is a signal to disconnect;public boolean isDisconnectRequest() {_			return DISCONNECT_MEDIA_TYPE_					.equals(this.request.getHeaders().getContentType())__		};detect,if,the,request,is,actually,a,signal,to,disconnect,return,if,the,request,is,a,signal,to,disconnect;public,boolean,is,disconnect,request,return,equals,this,request,get,headers,get,content,type
HttpTunnelServer -> public void setLongPollTimeout(int longPollTimeout);1507173536;Set the long poll timeout for the server._@param longPollTimeout the long poll timeout in milliseconds;public void setLongPollTimeout(int longPollTimeout) {_		Assert.isTrue(longPollTimeout > 0, "LongPollTimeout must be a positive value")__		this.longPollTimeout = longPollTimeout__	};set,the,long,poll,timeout,for,the,server,param,long,poll,timeout,the,long,poll,timeout,in,milliseconds;public,void,set,long,poll,timeout,int,long,poll,timeout,assert,is,true,long,poll,timeout,0,long,poll,timeout,must,be,a,positive,value,this,long,poll,timeout,long,poll,timeout
HttpTunnelServer -> public void setLongPollTimeout(int longPollTimeout);1508247426;Set the long poll timeout for the server._@param longPollTimeout the long poll timeout in milliseconds;public void setLongPollTimeout(int longPollTimeout) {_		Assert.isTrue(longPollTimeout > 0, "LongPollTimeout must be a positive value")__		this.longPollTimeout = longPollTimeout__	};set,the,long,poll,timeout,for,the,server,param,long,poll,timeout,the,long,poll,timeout,in,milliseconds;public,void,set,long,poll,timeout,int,long,poll,timeout,assert,is,true,long,poll,timeout,0,long,poll,timeout,must,be,a,positive,value,this,long,poll,timeout,long,poll,timeout
HttpTunnelServer -> public void setLongPollTimeout(int longPollTimeout);1520609932;Set the long poll timeout for the server._@param longPollTimeout the long poll timeout in milliseconds;public void setLongPollTimeout(int longPollTimeout) {_		Assert.isTrue(longPollTimeout > 0, "LongPollTimeout must be a positive value")__		this.longPollTimeout = longPollTimeout__	};set,the,long,poll,timeout,for,the,server,param,long,poll,timeout,the,long,poll,timeout,in,milliseconds;public,void,set,long,poll,timeout,int,long,poll,timeout,assert,is,true,long,poll,timeout,0,long,poll,timeout,must,be,a,positive,value,this,long,poll,timeout,long,poll,timeout
HttpTunnelServer -> public void setLongPollTimeout(int longPollTimeout);1534432765;Set the long poll timeout for the server._@param longPollTimeout the long poll timeout in milliseconds;public void setLongPollTimeout(int longPollTimeout) {_		Assert.isTrue(longPollTimeout > 0, "LongPollTimeout must be a positive value")__		this.longPollTimeout = longPollTimeout__	};set,the,long,poll,timeout,for,the,server,param,long,poll,timeout,the,long,poll,timeout,in,milliseconds;public,void,set,long,poll,timeout,int,long,poll,timeout,assert,is,true,long,poll,timeout,0,long,poll,timeout,must,be,a,positive,value,this,long,poll,timeout,long,poll,timeout
HttpTunnelServer -> protected ServerThread getServerThread() throws IOException;1507173536;Returns the active server thread, creating and starting it if necessary._@return the {@code ServerThread} (never {@code null})_@throws IOException in case of I/O errors;protected ServerThread getServerThread() throws IOException {_		synchronized (this) {_			if (this.serverThread == null) {_				ByteChannel channel = this.serverConnection.open(this.longPollTimeout)__				this.serverThread = new ServerThread(channel)__				this.serverThread.start()__			}_			return this.serverThread__		}_	};returns,the,active,server,thread,creating,and,starting,it,if,necessary,return,the,code,server,thread,never,code,null,throws,ioexception,in,case,of,i,o,errors;protected,server,thread,get,server,thread,throws,ioexception,synchronized,this,if,this,server,thread,null,byte,channel,channel,this,server,connection,open,this,long,poll,timeout,this,server,thread,new,server,thread,channel,this,server,thread,start,return,this,server,thread
HttpTunnelServer -> protected ServerThread getServerThread() throws IOException;1508247426;Returns the active server thread, creating and starting it if necessary._@return the {@code ServerThread} (never {@code null})_@throws IOException in case of I/O errors;protected ServerThread getServerThread() throws IOException {_		synchronized (this) {_			if (this.serverThread == null) {_				ByteChannel channel = this.serverConnection.open(this.longPollTimeout)__				this.serverThread = new ServerThread(channel)__				this.serverThread.start()__			}_			return this.serverThread__		}_	};returns,the,active,server,thread,creating,and,starting,it,if,necessary,return,the,code,server,thread,never,code,null,throws,ioexception,in,case,of,i,o,errors;protected,server,thread,get,server,thread,throws,ioexception,synchronized,this,if,this,server,thread,null,byte,channel,channel,this,server,connection,open,this,long,poll,timeout,this,server,thread,new,server,thread,channel,this,server,thread,start,return,this,server,thread
HttpTunnelServer -> protected ServerThread getServerThread() throws IOException;1520609932;Returns the active server thread, creating and starting it if necessary._@return the {@code ServerThread} (never {@code null})_@throws IOException in case of I/O errors;protected ServerThread getServerThread() throws IOException {_		synchronized (this) {_			if (this.serverThread == null) {_				ByteChannel channel = this.serverConnection.open(this.longPollTimeout)__				this.serverThread = new ServerThread(channel)__				this.serverThread.start()__			}_			return this.serverThread__		}_	};returns,the,active,server,thread,creating,and,starting,it,if,necessary,return,the,code,server,thread,never,code,null,throws,ioexception,in,case,of,i,o,errors;protected,server,thread,get,server,thread,throws,ioexception,synchronized,this,if,this,server,thread,null,byte,channel,channel,this,server,connection,open,this,long,poll,timeout,this,server,thread,new,server,thread,channel,this,server,thread,start,return,this,server,thread
HttpTunnelServer -> protected ServerThread getServerThread() throws IOException;1534432765;Returns the active server thread, creating and starting it if necessary._@return the {@code ServerThread} (never {@code null})_@throws IOException in case of I/O errors;protected ServerThread getServerThread() throws IOException {_		synchronized (this) {_			if (this.serverThread == null) {_				ByteChannel channel = this.serverConnection.open(this.longPollTimeout)__				this.serverThread = new ServerThread(channel)__				this.serverThread.start()__			}_			return this.serverThread__		}_	};returns,the,active,server,thread,creating,and,starting,it,if,necessary,return,the,code,server,thread,never,code,null,throws,ioexception,in,case,of,i,o,errors;protected,server,thread,get,server,thread,throws,ioexception,synchronized,this,if,this,server,thread,null,byte,channel,channel,this,server,connection,open,this,long,poll,timeout,this,server,thread,new,server,thread,channel,this,server,thread,start,return,this,server,thread
HttpTunnelServer -> HttpConnection -> public void waitForResponse();1507173536;Cause the request to block or use asynchronous methods to wait until a response_is available.;public void waitForResponse() {_			if (this.async == null) {_				while (!this.complete) {_					try {_						synchronized (this) {_							wait(1000)__						}_					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__					}_				}_			}_		};cause,the,request,to,block,or,use,asynchronous,methods,to,wait,until,a,response,is,available;public,void,wait,for,response,if,this,async,null,while,this,complete,try,synchronized,this,wait,1000,catch,interrupted,exception,ex,thread,current,thread,interrupt
HttpTunnelServer -> HttpConnection -> public void waitForResponse();1508247426;Cause the request to block or use asynchronous methods to wait until a response_is available.;public void waitForResponse() {_			if (this.async == null) {_				while (!this.complete) {_					try {_						synchronized (this) {_							wait(1000)__						}_					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__					}_				}_			}_		};cause,the,request,to,block,or,use,asynchronous,methods,to,wait,until,a,response,is,available;public,void,wait,for,response,if,this,async,null,while,this,complete,try,synchronized,this,wait,1000,catch,interrupted,exception,ex,thread,current,thread,interrupt
HttpTunnelServer -> HttpConnection -> public void waitForResponse();1520609932;Cause the request to block or use asynchronous methods to wait until a response_is available.;public void waitForResponse() {_			if (this.async == null) {_				while (!this.complete) {_					try {_						synchronized (this) {_							wait(1000)__						}_					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__					}_				}_			}_		};cause,the,request,to,block,or,use,asynchronous,methods,to,wait,until,a,response,is,available;public,void,wait,for,response,if,this,async,null,while,this,complete,try,synchronized,this,wait,1000,catch,interrupted,exception,ex,thread,current,thread,interrupt
HttpTunnelServer -> HttpConnection -> public void waitForResponse();1534432765;Cause the request to block or use asynchronous methods to wait until a response_is available.;public void waitForResponse() {_			if (this.async == null) {_				while (!this.complete) {_					try {_						synchronized (this) {_							wait(1000)__						}_					}_					catch (InterruptedException ex) {_						Thread.currentThread().interrupt()__					}_				}_			}_		};cause,the,request,to,block,or,use,asynchronous,methods,to,wait,until,a,response,is,available;public,void,wait,for,response,if,this,async,null,while,this,complete,try,synchronized,this,wait,1000,catch,interrupted,exception,ex,thread,current,thread,interrupt
HttpTunnelServer -> public void setDisconnectTimeout(long disconnectTimeout);1507173536;Set the maximum amount of time to wait for a client before closing the connection._@param disconnectTimeout the disconnect timeout in milliseconds;public void setDisconnectTimeout(long disconnectTimeout) {_		Assert.isTrue(disconnectTimeout > 0,_				"DisconnectTimeout must be a positive value")__		this.disconnectTimeout = disconnectTimeout__	};set,the,maximum,amount,of,time,to,wait,for,a,client,before,closing,the,connection,param,disconnect,timeout,the,disconnect,timeout,in,milliseconds;public,void,set,disconnect,timeout,long,disconnect,timeout,assert,is,true,disconnect,timeout,0,disconnect,timeout,must,be,a,positive,value,this,disconnect,timeout,disconnect,timeout
HttpTunnelServer -> public void setDisconnectTimeout(long disconnectTimeout);1508247426;Set the maximum amount of time to wait for a client before closing the connection._@param disconnectTimeout the disconnect timeout in milliseconds;public void setDisconnectTimeout(long disconnectTimeout) {_		Assert.isTrue(disconnectTimeout > 0,_				"DisconnectTimeout must be a positive value")__		this.disconnectTimeout = disconnectTimeout__	};set,the,maximum,amount,of,time,to,wait,for,a,client,before,closing,the,connection,param,disconnect,timeout,the,disconnect,timeout,in,milliseconds;public,void,set,disconnect,timeout,long,disconnect,timeout,assert,is,true,disconnect,timeout,0,disconnect,timeout,must,be,a,positive,value,this,disconnect,timeout,disconnect,timeout
HttpTunnelServer -> public void setDisconnectTimeout(long disconnectTimeout);1520609932;Set the maximum amount of time to wait for a client before closing the connection._@param disconnectTimeout the disconnect timeout in milliseconds;public void setDisconnectTimeout(long disconnectTimeout) {_		Assert.isTrue(disconnectTimeout > 0,_				"DisconnectTimeout must be a positive value")__		this.disconnectTimeout = disconnectTimeout__	};set,the,maximum,amount,of,time,to,wait,for,a,client,before,closing,the,connection,param,disconnect,timeout,the,disconnect,timeout,in,milliseconds;public,void,set,disconnect,timeout,long,disconnect,timeout,assert,is,true,disconnect,timeout,0,disconnect,timeout,must,be,a,positive,value,this,disconnect,timeout,disconnect,timeout
HttpTunnelServer -> public void setDisconnectTimeout(long disconnectTimeout);1534432765;Set the maximum amount of time to wait for a client before closing the connection._@param disconnectTimeout the disconnect timeout in milliseconds;public void setDisconnectTimeout(long disconnectTimeout) {_		Assert.isTrue(disconnectTimeout > 0,_				"DisconnectTimeout must be a positive value")__		this.disconnectTimeout = disconnectTimeout__	};set,the,maximum,amount,of,time,to,wait,for,a,client,before,closing,the,connection,param,disconnect,timeout,the,disconnect,timeout,in,milliseconds;public,void,set,disconnect,timeout,long,disconnect,timeout,assert,is,true,disconnect,timeout,0,disconnect,timeout,must,be,a,positive,value,this,disconnect,timeout,disconnect,timeout
HttpTunnelServer -> HttpConnection -> public void respond(HttpStatus status) throws IOException;1507173536;Send a HTTP status response._@param status the status to send_@throws IOException in case of I/O errors;public void respond(HttpStatus status) throws IOException {_			Assert.notNull(status, "Status must not be null")__			this.response.setStatusCode(status)__			complete()__		};send,a,http,status,response,param,status,the,status,to,send,throws,ioexception,in,case,of,i,o,errors;public,void,respond,http,status,status,throws,ioexception,assert,not,null,status,status,must,not,be,null,this,response,set,status,code,status,complete
HttpTunnelServer -> HttpConnection -> public void respond(HttpStatus status) throws IOException;1508247426;Send a HTTP status response._@param status the status to send_@throws IOException in case of I/O errors;public void respond(HttpStatus status) throws IOException {_			Assert.notNull(status, "Status must not be null")__			this.response.setStatusCode(status)__			complete()__		};send,a,http,status,response,param,status,the,status,to,send,throws,ioexception,in,case,of,i,o,errors;public,void,respond,http,status,status,throws,ioexception,assert,not,null,status,status,must,not,be,null,this,response,set,status,code,status,complete
HttpTunnelServer -> HttpConnection -> public void respond(HttpStatus status) throws IOException;1520609932;Send a HTTP status response._@param status the status to send_@throws IOException in case of I/O errors;public void respond(HttpStatus status) throws IOException {_			Assert.notNull(status, "Status must not be null")__			this.response.setStatusCode(status)__			complete()__		};send,a,http,status,response,param,status,the,status,to,send,throws,ioexception,in,case,of,i,o,errors;public,void,respond,http,status,status,throws,ioexception,assert,not,null,status,status,must,not,be,null,this,response,set,status,code,status,complete
HttpTunnelServer -> HttpConnection -> public void respond(HttpStatus status) throws IOException;1534432765;Send a HTTP status response._@param status the status to send_@throws IOException in case of I/O errors;public void respond(HttpStatus status) throws IOException {_			Assert.notNull(status, "Status must not be null")__			this.response.setStatusCode(status)__			complete()__		};send,a,http,status,response,param,status,the,status,to,send,throws,ioexception,in,case,of,i,o,errors;public,void,respond,http,status,status,throws,ioexception,assert,not,null,status,status,must,not,be,null,this,response,set,status,code,status,complete
HttpTunnelServer -> void clearServerThread();1507173536;Called when the server thread exits.;void clearServerThread() {_		synchronized (this) {_			this.serverThread = null__		}_	};called,when,the,server,thread,exits;void,clear,server,thread,synchronized,this,this,server,thread,null
HttpTunnelServer -> void clearServerThread();1508247426;Called when the server thread exits.;void clearServerThread() {_		synchronized (this) {_			this.serverThread = null__		}_	};called,when,the,server,thread,exits;void,clear,server,thread,synchronized,this,this,server,thread,null
HttpTunnelServer -> void clearServerThread();1520609932;Called when the server thread exits.;void clearServerThread() {_		synchronized (this) {_			this.serverThread = null__		}_	};called,when,the,server,thread,exits;void,clear,server,thread,synchronized,this,this,server,thread,null
HttpTunnelServer -> void clearServerThread();1534432765;Called when the server thread exits.;void clearServerThread() {_		synchronized (this) {_			this.serverThread = null__		}_	};called,when,the,server,thread,exits;void,clear,server,thread,synchronized,this,this,server,thread,null
HttpTunnelServer -> HttpConnection -> protected final ServerHttpResponse getResponse();1507173536;Return the underlying response._@return the response;protected final ServerHttpResponse getResponse() {_			return this.response__		};return,the,underlying,response,return,the,response;protected,final,server,http,response,get,response,return,this,response
HttpTunnelServer -> HttpConnection -> protected final ServerHttpResponse getResponse();1508247426;Return the underlying response._@return the response;protected final ServerHttpResponse getResponse() {_			return this.response__		};return,the,underlying,response,return,the,response;protected,final,server,http,response,get,response,return,this,response
HttpTunnelServer -> HttpConnection -> protected final ServerHttpResponse getResponse();1520609932;Return the underlying response._@return the response;protected final ServerHttpResponse getResponse() {_			return this.response__		};return,the,underlying,response,return,the,response;protected,final,server,http,response,get,response,return,this,response
HttpTunnelServer -> HttpConnection -> protected final ServerHttpResponse getResponse();1534432765;Return the underlying response._@return the response;protected final ServerHttpResponse getResponse() {_			return this.response__		};return,the,underlying,response,return,the,response;protected,final,server,http,response,get,response,return,this,response
HttpTunnelServer -> HttpConnection -> public boolean isOlderThan(int time);1507173536;Determine if a connection is older than the specified time._@param time the time to check_@return {@code true} if the request is older than the time;public boolean isOlderThan(int time) {_			long runningTime = System.currentTimeMillis() - this.createTime__			return (runningTime > time)__		};determine,if,a,connection,is,older,than,the,specified,time,param,time,the,time,to,check,return,code,true,if,the,request,is,older,than,the,time;public,boolean,is,older,than,int,time,long,running,time,system,current,time,millis,this,create,time,return,running,time,time
HttpTunnelServer -> HttpConnection -> public boolean isOlderThan(int time);1508247426;Determine if a connection is older than the specified time._@param time the time to check_@return {@code true} if the request is older than the time;public boolean isOlderThan(int time) {_			long runningTime = System.currentTimeMillis() - this.createTime__			return (runningTime > time)__		};determine,if,a,connection,is,older,than,the,specified,time,param,time,the,time,to,check,return,code,true,if,the,request,is,older,than,the,time;public,boolean,is,older,than,int,time,long,running,time,system,current,time,millis,this,create,time,return,running,time,time
HttpTunnelServer -> HttpConnection -> public boolean isOlderThan(int time);1520609932;Determine if a connection is older than the specified time._@param time the time to check_@return {@code true} if the request is older than the time;public boolean isOlderThan(int time) {_			long runningTime = System.currentTimeMillis() - this.createTime__			return (runningTime > time)__		};determine,if,a,connection,is,older,than,the,specified,time,param,time,the,time,to,check,return,code,true,if,the,request,is,older,than,the,time;public,boolean,is,older,than,int,time,long,running,time,system,current,time,millis,this,create,time,return,running,time,time
HttpTunnelServer -> HttpConnection -> public boolean isOlderThan(int time);1534432765;Determine if a connection is older than the specified time._@param time the time to check_@return {@code true} if the request is older than the time;public boolean isOlderThan(int time) {_			long runningTime = System.currentTimeMillis() - this.createTime__			return (runningTime > time)__		};determine,if,a,connection,is,older,than,the,specified,time,param,time,the,time,to,check,return,code,true,if,the,request,is,older,than,the,time;public,boolean,is,older,than,int,time,long,running,time,system,current,time,millis,this,create,time,return,running,time,time
HttpTunnelServer -> HttpConnection -> public final ServerHttpRequest getRequest();1507173536;Return the underlying request._@return the request;public final ServerHttpRequest getRequest() {_			return this.request__		};return,the,underlying,request,return,the,request;public,final,server,http,request,get,request,return,this,request
HttpTunnelServer -> HttpConnection -> public final ServerHttpRequest getRequest();1508247426;Return the underlying request._@return the request;public final ServerHttpRequest getRequest() {_			return this.request__		};return,the,underlying,request,return,the,request;public,final,server,http,request,get,request,return,this,request
HttpTunnelServer -> HttpConnection -> public final ServerHttpRequest getRequest();1520609932;Return the underlying request._@return the request;public final ServerHttpRequest getRequest() {_			return this.request__		};return,the,underlying,request,return,the,request;public,final,server,http,request,get,request,return,this,request
HttpTunnelServer -> HttpConnection -> public final ServerHttpRequest getRequest();1534432765;Return the underlying request._@return the request;public final ServerHttpRequest getRequest() {_			return this.request__		};return,the,underlying,request,return,the,request;public,final,server,http,request,get,request,return,this,request
HttpTunnelServer -> public HttpTunnelServer(TargetServerConnection serverConnection);1507173536;Creates a new {@link HttpTunnelServer} instance._@param serverConnection the connection to the target server;public HttpTunnelServer(TargetServerConnection serverConnection) {_		Assert.notNull(serverConnection, "ServerConnection must not be null")__		this.serverConnection = serverConnection__	};creates,a,new,link,http,tunnel,server,instance,param,server,connection,the,connection,to,the,target,server;public,http,tunnel,server,target,server,connection,server,connection,assert,not,null,server,connection,server,connection,must,not,be,null,this,server,connection,server,connection
HttpTunnelServer -> public HttpTunnelServer(TargetServerConnection serverConnection);1508247426;Creates a new {@link HttpTunnelServer} instance._@param serverConnection the connection to the target server;public HttpTunnelServer(TargetServerConnection serverConnection) {_		Assert.notNull(serverConnection, "ServerConnection must not be null")__		this.serverConnection = serverConnection__	};creates,a,new,link,http,tunnel,server,instance,param,server,connection,the,connection,to,the,target,server;public,http,tunnel,server,target,server,connection,server,connection,assert,not,null,server,connection,server,connection,must,not,be,null,this,server,connection,server,connection
HttpTunnelServer -> public HttpTunnelServer(TargetServerConnection serverConnection);1520609932;Creates a new {@link HttpTunnelServer} instance._@param serverConnection the connection to the target server;public HttpTunnelServer(TargetServerConnection serverConnection) {_		Assert.notNull(serverConnection, "ServerConnection must not be null")__		this.serverConnection = serverConnection__	};creates,a,new,link,http,tunnel,server,instance,param,server,connection,the,connection,to,the,target,server;public,http,tunnel,server,target,server,connection,server,connection,assert,not,null,server,connection,server,connection,must,not,be,null,this,server,connection,server,connection
HttpTunnelServer -> public HttpTunnelServer(TargetServerConnection serverConnection);1534432765;Creates a new {@link HttpTunnelServer} instance._@param serverConnection the connection to the target server;public HttpTunnelServer(TargetServerConnection serverConnection) {_		Assert.notNull(serverConnection, "ServerConnection must not be null")__		this.serverConnection = serverConnection__	};creates,a,new,link,http,tunnel,server,instance,param,server,connection,the,connection,to,the,target,server;public,http,tunnel,server,target,server,connection,server,connection,assert,not,null,server,connection,server,connection,must,not,be,null,this,server,connection,server,connection
HttpTunnelServer -> HttpConnection -> public void respond(HttpTunnelPayload payload) throws IOException;1507173536;Send a payload response._@param payload the payload to send_@throws IOException in case of I/O errors;public void respond(HttpTunnelPayload payload) throws IOException {_			Assert.notNull(payload, "Payload must not be null")__			this.response.setStatusCode(HttpStatus.OK)__			payload.assignTo(this.response)__			complete()__		};send,a,payload,response,param,payload,the,payload,to,send,throws,ioexception,in,case,of,i,o,errors;public,void,respond,http,tunnel,payload,payload,throws,ioexception,assert,not,null,payload,payload,must,not,be,null,this,response,set,status,code,http,status,ok,payload,assign,to,this,response,complete
HttpTunnelServer -> HttpConnection -> public void respond(HttpTunnelPayload payload) throws IOException;1508247426;Send a payload response._@param payload the payload to send_@throws IOException in case of I/O errors;public void respond(HttpTunnelPayload payload) throws IOException {_			Assert.notNull(payload, "Payload must not be null")__			this.response.setStatusCode(HttpStatus.OK)__			payload.assignTo(this.response)__			complete()__		};send,a,payload,response,param,payload,the,payload,to,send,throws,ioexception,in,case,of,i,o,errors;public,void,respond,http,tunnel,payload,payload,throws,ioexception,assert,not,null,payload,payload,must,not,be,null,this,response,set,status,code,http,status,ok,payload,assign,to,this,response,complete
HttpTunnelServer -> HttpConnection -> public void respond(HttpTunnelPayload payload) throws IOException;1520609932;Send a payload response._@param payload the payload to send_@throws IOException in case of I/O errors;public void respond(HttpTunnelPayload payload) throws IOException {_			Assert.notNull(payload, "Payload must not be null")__			this.response.setStatusCode(HttpStatus.OK)__			payload.assignTo(this.response)__			complete()__		};send,a,payload,response,param,payload,the,payload,to,send,throws,ioexception,in,case,of,i,o,errors;public,void,respond,http,tunnel,payload,payload,throws,ioexception,assert,not,null,payload,payload,must,not,be,null,this,response,set,status,code,http,status,ok,payload,assign,to,this,response,complete
HttpTunnelServer -> HttpConnection -> public void respond(HttpTunnelPayload payload) throws IOException;1534432765;Send a payload response._@param payload the payload to send_@throws IOException in case of I/O errors;public void respond(HttpTunnelPayload payload) throws IOException {_			Assert.notNull(payload, "Payload must not be null")__			this.response.setStatusCode(HttpStatus.OK)__			payload.assignTo(this.response)__			complete()__		};send,a,payload,response,param,payload,the,payload,to,send,throws,ioexception,in,case,of,i,o,errors;public,void,respond,http,tunnel,payload,payload,throws,ioexception,assert,not,null,payload,payload,must,not,be,null,this,response,set,status,code,http,status,ok,payload,assign,to,this,response,complete
HttpTunnelServer -> public void handle(ServerHttpRequest request, ServerHttpResponse response) 			throws IOException;1507173536;Handle an incoming HTTP connection._@param request the HTTP request_@param response the HTTP response_@throws IOException in case of I/O errors;public void handle(ServerHttpRequest request, ServerHttpResponse response)_			throws IOException {_		handle(new HttpConnection(request, response))__	};handle,an,incoming,http,connection,param,request,the,http,request,param,response,the,http,response,throws,ioexception,in,case,of,i,o,errors;public,void,handle,server,http,request,request,server,http,response,response,throws,ioexception,handle,new,http,connection,request,response
HttpTunnelServer -> public void handle(ServerHttpRequest request, ServerHttpResponse response) 			throws IOException;1508247426;Handle an incoming HTTP connection._@param request the HTTP request_@param response the HTTP response_@throws IOException in case of I/O errors;public void handle(ServerHttpRequest request, ServerHttpResponse response)_			throws IOException {_		handle(new HttpConnection(request, response))__	};handle,an,incoming,http,connection,param,request,the,http,request,param,response,the,http,response,throws,ioexception,in,case,of,i,o,errors;public,void,handle,server,http,request,request,server,http,response,response,throws,ioexception,handle,new,http,connection,request,response
HttpTunnelServer -> public void handle(ServerHttpRequest request, ServerHttpResponse response) 			throws IOException;1520609932;Handle an incoming HTTP connection._@param request the HTTP request_@param response the HTTP response_@throws IOException in case of I/O errors;public void handle(ServerHttpRequest request, ServerHttpResponse response)_			throws IOException {_		handle(new HttpConnection(request, response))__	};handle,an,incoming,http,connection,param,request,the,http,request,param,response,the,http,response,throws,ioexception,in,case,of,i,o,errors;public,void,handle,server,http,request,request,server,http,response,response,throws,ioexception,handle,new,http,connection,request,response
HttpTunnelServer -> public void handle(ServerHttpRequest request, ServerHttpResponse response) 			throws IOException;1534432765;Handle an incoming HTTP connection._@param request the HTTP request_@param response the HTTP response_@throws IOException in case of I/O errors;public void handle(ServerHttpRequest request, ServerHttpResponse response)_			throws IOException {_		handle(new HttpConnection(request, response))__	};handle,an,incoming,http,connection,param,request,the,http,request,param,response,the,http,response,throws,ioexception,in,case,of,i,o,errors;public,void,handle,server,http,request,request,server,http,response,response,throws,ioexception,handle,new,http,connection,request,response
HttpTunnelServer -> HttpConnection -> protected void complete();1507173536;Called when a request is complete.;protected void complete() {_			if (this.async != null) {_				this.async.complete()__			}_			else {_				synchronized (this) {_					this.complete = true__					notifyAll()__				}_			}_		};called,when,a,request,is,complete;protected,void,complete,if,this,async,null,this,async,complete,else,synchronized,this,this,complete,true,notify,all
HttpTunnelServer -> HttpConnection -> protected void complete();1508247426;Called when a request is complete.;protected void complete() {_			if (this.async != null) {_				this.async.complete()__			}_			else {_				synchronized (this) {_					this.complete = true__					notifyAll()__				}_			}_		};called,when,a,request,is,complete;protected,void,complete,if,this,async,null,this,async,complete,else,synchronized,this,this,complete,true,notify,all
HttpTunnelServer -> HttpConnection -> protected void complete();1520609932;Called when a request is complete.;protected void complete() {_			if (this.async != null) {_				this.async.complete()__			}_			else {_				synchronized (this) {_					this.complete = true__					notifyAll()__				}_			}_		};called,when,a,request,is,complete;protected,void,complete,if,this,async,null,this,async,complete,else,synchronized,this,this,complete,true,notify,all
HttpTunnelServer -> HttpConnection -> protected void complete();1534432765;Called when a request is complete.;protected void complete() {_			if (this.async != null) {_				this.async.complete()__			}_			else {_				synchronized (this) {_					this.complete = true__					notifyAll()__				}_			}_		};called,when,a,request,is,complete;protected,void,complete,if,this,async,null,this,async,complete,else,synchronized,this,this,complete,true,notify,all
