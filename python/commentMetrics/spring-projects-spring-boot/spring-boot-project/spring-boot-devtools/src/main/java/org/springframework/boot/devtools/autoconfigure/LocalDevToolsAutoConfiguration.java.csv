commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Bean @RestartScope @ConditionalOnMissingBean public LiveReloadServer liveReloadServer(DevToolsProperties properties) {     return new LiveReloadServer(properties.getLivereload().getPort(), Restarter.getInstance().getThreadFactory()). }
false;public;1;5;;@Bean public OptionalLiveReloadServer optionalLiveReloadServer(LiveReloadServer liveReloadServer) {     return new OptionalLiveReloadServer(liveReloadServer). }
false;public;1;5;;@Bean public LiveReloadServerEventListener liveReloadServerEventListener(OptionalLiveReloadServer liveReloadServer) {     return new LiveReloadServerEventListener(liveReloadServer). }
false;public;1;7;;@Override public void onApplicationEvent(ClassPathChangedEvent event) {     if (event.isRestartRequired()) {         Restarter.getInstance().restart(new FileWatchingFailureHandler(fileSystemWatcherFactory())).     } }
false;public;0;9;;@Bean @ConditionalOnMissingBean public ClassPathFileSystemWatcher classPathFileSystemWatcher() {     URL[] urls = Restarter.getInstance().getInitialUrls().     ClassPathFileSystemWatcher watcher = new ClassPathFileSystemWatcher(fileSystemWatcherFactory(), classPathRestartStrategy(), urls).     watcher.setStopWatcherOnRestart(true).     return watcher. }
false;public;0;6;;@Bean @ConditionalOnMissingBean public ClassPathRestartStrategy classPathRestartStrategy() {     return new PatternClassPathRestartStrategy(this.properties.getRestart().getAllExclude()). }
false;public;0;4;;@Bean public HateoasObjenesisCacheDisabler hateoasObjenesisCacheDisabler() {     return new HateoasObjenesisCacheDisabler(). }
false;public;0;4;;@Bean public FileSystemWatcherFactory fileSystemWatcherFactory() {     return this::newFileSystemWatcher. }
false;public;0;5;;@Bean @ConditionalOnProperty(prefix = "spring.devtools.restart", name = "log-condition-evaluation-delta", matchIfMissing = true) public ConditionEvaluationDeltaLoggingListener conditionEvaluationDeltaLoggingListener() {     return new ConditionEvaluationDeltaLoggingListener(). }
false;private;0;15;;private FileSystemWatcher newFileSystemWatcher() {     Restart restartProperties = this.properties.getRestart().     FileSystemWatcher watcher = new FileSystemWatcher(true, restartProperties.getPollInterval(), restartProperties.getQuietPeriod()).     String triggerFile = restartProperties.getTriggerFile().     if (StringUtils.hasLength(triggerFile)) {         watcher.setTriggerFilter(new TriggerFileFilter(triggerFile)).     }     List<File> additionalPaths = restartProperties.getAdditionalPaths().     for (File path : additionalPaths) {         watcher.addSourceFolder(path.getAbsoluteFile()).     }     return watcher. }
false;public;1;9;;@Override public boolean supportsEventType(ResolvableType eventType) {     Class<?> type = eventType.getRawClass().     if (type == null) {         return false.     }     return ContextRefreshedEvent.class.isAssignableFrom(type) || ClassPathChangedEvent.class.isAssignableFrom(type). }
false;public;1;4;;@Override public boolean supportsSourceType(Class<?> sourceType) {     return true. }
false;public;1;8;;@Override public void onApplicationEvent(ApplicationEvent event) {     if (event instanceof ContextRefreshedEvent || (event instanceof ClassPathChangedEvent && !((ClassPathChangedEvent) event).isRestartRequired())) {         this.liveReloadServer.triggerReload().     } }
false;public;0;4;;@Override public int getOrder() {     return 0. }
