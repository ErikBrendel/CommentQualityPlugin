# id;timestamp;commentText;codeText;commentWords;codeWords
HttpTunnelPayload -> public void assignTo(HttpOutputMessage message) throws IOException;1507173536;Assign this payload to the given {@link HttpOutputMessage}._@param message the message to assign this payload to_@throws IOException in case of I/O errors;public void assignTo(HttpOutputMessage message) throws IOException {_		Assert.notNull(message, "Message must not be null")__		HttpHeaders headers = message.getHeaders()__		headers.setContentLength(this.data.remaining())__		headers.add(SEQ_HEADER, Long.toString(getSequence()))__		headers.setContentType(MediaType.APPLICATION_OCTET_STREAM)__		WritableByteChannel body = Channels.newChannel(message.getBody())__		while (this.data.hasRemaining()) {_			body.write(this.data)__		}_		body.close()__	};assign,this,payload,to,the,given,link,http,output,message,param,message,the,message,to,assign,this,payload,to,throws,ioexception,in,case,of,i,o,errors;public,void,assign,to,http,output,message,message,throws,ioexception,assert,not,null,message,message,must,not,be,null,http,headers,headers,message,get,headers,headers,set,content,length,this,data,remaining,headers,add,long,to,string,get,sequence,headers,set,content,type,media,type,writable,byte,channel,body,channels,new,channel,message,get,body,while,this,data,has,remaining,body,write,this,data,body,close
HttpTunnelPayload -> public void assignTo(HttpOutputMessage message) throws IOException;1507661773;Assign this payload to the given {@link HttpOutputMessage}._@param message the message to assign this payload to_@throws IOException in case of I/O errors;public void assignTo(HttpOutputMessage message) throws IOException {_		Assert.notNull(message, "Message must not be null")__		HttpHeaders headers = message.getHeaders()__		headers.setContentLength(this.data.remaining())__		headers.add(SEQ_HEADER, Long.toString(getSequence()))__		headers.setContentType(MediaType.APPLICATION_OCTET_STREAM)__		WritableByteChannel body = Channels.newChannel(message.getBody())__		while (this.data.hasRemaining()) {_			body.write(this.data)__		}_		body.close()__	};assign,this,payload,to,the,given,link,http,output,message,param,message,the,message,to,assign,this,payload,to,throws,ioexception,in,case,of,i,o,errors;public,void,assign,to,http,output,message,message,throws,ioexception,assert,not,null,message,message,must,not,be,null,http,headers,headers,message,get,headers,headers,set,content,length,this,data,remaining,headers,add,long,to,string,get,sequence,headers,set,content,type,media,type,writable,byte,channel,body,channels,new,channel,message,get,body,while,this,data,has,remaining,body,write,this,data,body,close
HttpTunnelPayload -> public void assignTo(HttpOutputMessage message) throws IOException;1516357852;Assign this payload to the given {@link HttpOutputMessage}._@param message the message to assign this payload to_@throws IOException in case of I/O errors;public void assignTo(HttpOutputMessage message) throws IOException {_		Assert.notNull(message, "Message must not be null")__		HttpHeaders headers = message.getHeaders()__		headers.setContentLength(this.data.remaining())__		headers.add(SEQ_HEADER, Long.toString(getSequence()))__		headers.setContentType(MediaType.APPLICATION_OCTET_STREAM)__		WritableByteChannel body = Channels.newChannel(message.getBody())__		while (this.data.hasRemaining()) {_			body.write(this.data)__		}_		body.close()__	};assign,this,payload,to,the,given,link,http,output,message,param,message,the,message,to,assign,this,payload,to,throws,ioexception,in,case,of,i,o,errors;public,void,assign,to,http,output,message,message,throws,ioexception,assert,not,null,message,message,must,not,be,null,http,headers,headers,message,get,headers,headers,set,content,length,this,data,remaining,headers,add,long,to,string,get,sequence,headers,set,content,type,media,type,writable,byte,channel,body,channels,new,channel,message,get,body,while,this,data,has,remaining,body,write,this,data,body,close
HttpTunnelPayload -> public void assignTo(HttpOutputMessage message) throws IOException;1518511836;Assign this payload to the given {@link HttpOutputMessage}._@param message the message to assign this payload to_@throws IOException in case of I/O errors;public void assignTo(HttpOutputMessage message) throws IOException {_		Assert.notNull(message, "Message must not be null")__		HttpHeaders headers = message.getHeaders()__		headers.setContentLength(this.data.remaining())__		headers.add(SEQ_HEADER, Long.toString(getSequence()))__		headers.setContentType(MediaType.APPLICATION_OCTET_STREAM)__		WritableByteChannel body = Channels.newChannel(message.getBody())__		while (this.data.hasRemaining()) {_			body.write(this.data)__		}_		body.close()__	};assign,this,payload,to,the,given,link,http,output,message,param,message,the,message,to,assign,this,payload,to,throws,ioexception,in,case,of,i,o,errors;public,void,assign,to,http,output,message,message,throws,ioexception,assert,not,null,message,message,must,not,be,null,http,headers,headers,message,get,headers,headers,set,content,length,this,data,remaining,headers,add,long,to,string,get,sequence,headers,set,content,type,media,type,writable,byte,channel,body,channels,new,channel,message,get,body,while,this,data,has,remaining,body,write,this,data,body,close
HttpTunnelPayload -> public String toHexString();1507173536;Return the payload as a hexadecimal string._@return the payload as a hex string;public String toHexString() {_		byte[] bytes = this.data.array()__		char[] hex = new char[this.data.remaining() * 2]__		for (int i = this.data.position()_ i < this.data.remaining()_ i++) {_			int b = bytes[i] & 0xFF__			hex[i * 2] = HEX_CHARS[b >>> 4]__			hex[i * 2 + 1] = HEX_CHARS[b & 0x0F]__		}_		return new String(hex)__	};return,the,payload,as,a,hexadecimal,string,return,the,payload,as,a,hex,string;public,string,to,hex,string,byte,bytes,this,data,array,char,hex,new,char,this,data,remaining,2,for,int,i,this,data,position,i,this,data,remaining,i,int,b,bytes,i,0x,ff,hex,i,2,b,4,hex,i,2,1,b,0x0f,return,new,string,hex
HttpTunnelPayload -> public String toHexString();1507661773;Return the payload as a hexadecimal string._@return the payload as a hex string;public String toHexString() {_		byte[] bytes = this.data.array()__		char[] hex = new char[this.data.remaining() * 2]__		for (int i = this.data.position()_ i < this.data.remaining()_ i++) {_			int b = bytes[i] & 0xFF__			hex[i * 2] = HEX_CHARS[b >>> 4]__			hex[i * 2 + 1] = HEX_CHARS[b & 0x0F]__		}_		return new String(hex)__	};return,the,payload,as,a,hexadecimal,string,return,the,payload,as,a,hex,string;public,string,to,hex,string,byte,bytes,this,data,array,char,hex,new,char,this,data,remaining,2,for,int,i,this,data,position,i,this,data,remaining,i,int,b,bytes,i,0x,ff,hex,i,2,b,4,hex,i,2,1,b,0x0f,return,new,string,hex
HttpTunnelPayload -> public String toHexString();1516357852;Return the payload as a hexadecimal string._@return the payload as a hex string;public String toHexString() {_		byte[] bytes = this.data.array()__		char[] hex = new char[this.data.remaining() * 2]__		for (int i = this.data.position()_ i < this.data.remaining()_ i++) {_			int b = bytes[i] & 0xFF__			hex[i * 2] = HEX_CHARS[b >>> 4]__			hex[i * 2 + 1] = HEX_CHARS[b & 0x0F]__		}_		return new String(hex)__	};return,the,payload,as,a,hexadecimal,string,return,the,payload,as,a,hex,string;public,string,to,hex,string,byte,bytes,this,data,array,char,hex,new,char,this,data,remaining,2,for,int,i,this,data,position,i,this,data,remaining,i,int,b,bytes,i,0x,ff,hex,i,2,b,4,hex,i,2,1,b,0x0f,return,new,string,hex
HttpTunnelPayload -> public String toHexString();1518511836;Return the payload as a hexadecimal string._@return the payload as a hex string;public String toHexString() {_		byte[] bytes = this.data.array()__		char[] hex = new char[this.data.remaining() * 2]__		for (int i = this.data.position()_ i < this.data.remaining()_ i++) {_			int b = bytes[i] & 0xFF__			hex[i * 2] = HEX_CHARS[b >>> 4]__			hex[i * 2 + 1] = HEX_CHARS[b & 0x0F]__		}_		return new String(hex)__	};return,the,payload,as,a,hexadecimal,string,return,the,payload,as,a,hex,string;public,string,to,hex,string,byte,bytes,this,data,array,char,hex,new,char,this,data,remaining,2,for,int,i,this,data,position,i,this,data,remaining,i,int,b,bytes,i,0x,ff,hex,i,2,b,4,hex,i,2,1,b,0x0f,return,new,string,hex
HttpTunnelPayload -> public void writeTo(WritableByteChannel channel) throws IOException;1507173536;Write the content of this payload to the given target channel._@param channel the channel to write to_@throws IOException in case of I/O errors;public void writeTo(WritableByteChannel channel) throws IOException {_		Assert.notNull(channel, "Channel must not be null")__		while (this.data.hasRemaining()) {_			channel.write(this.data)__		}_	};write,the,content,of,this,payload,to,the,given,target,channel,param,channel,the,channel,to,write,to,throws,ioexception,in,case,of,i,o,errors;public,void,write,to,writable,byte,channel,channel,throws,ioexception,assert,not,null,channel,channel,must,not,be,null,while,this,data,has,remaining,channel,write,this,data
HttpTunnelPayload -> public void writeTo(WritableByteChannel channel) throws IOException;1507661773;Write the content of this payload to the given target channel._@param channel the channel to write to_@throws IOException in case of I/O errors;public void writeTo(WritableByteChannel channel) throws IOException {_		Assert.notNull(channel, "Channel must not be null")__		while (this.data.hasRemaining()) {_			channel.write(this.data)__		}_	};write,the,content,of,this,payload,to,the,given,target,channel,param,channel,the,channel,to,write,to,throws,ioexception,in,case,of,i,o,errors;public,void,write,to,writable,byte,channel,channel,throws,ioexception,assert,not,null,channel,channel,must,not,be,null,while,this,data,has,remaining,channel,write,this,data
HttpTunnelPayload -> public void writeTo(WritableByteChannel channel) throws IOException;1516357852;Write the content of this payload to the given target channel._@param channel the channel to write to_@throws IOException in case of I/O errors;public void writeTo(WritableByteChannel channel) throws IOException {_		Assert.notNull(channel, "Channel must not be null")__		while (this.data.hasRemaining()) {_			channel.write(this.data)__		}_	};write,the,content,of,this,payload,to,the,given,target,channel,param,channel,the,channel,to,write,to,throws,ioexception,in,case,of,i,o,errors;public,void,write,to,writable,byte,channel,channel,throws,ioexception,assert,not,null,channel,channel,must,not,be,null,while,this,data,has,remaining,channel,write,this,data
HttpTunnelPayload -> public void writeTo(WritableByteChannel channel) throws IOException;1518511836;Write the content of this payload to the given target channel._@param channel the channel to write to_@throws IOException in case of I/O errors;public void writeTo(WritableByteChannel channel) throws IOException {_		Assert.notNull(channel, "Channel must not be null")__		while (this.data.hasRemaining()) {_			channel.write(this.data)__		}_	};write,the,content,of,this,payload,to,the,given,target,channel,param,channel,the,channel,to,write,to,throws,ioexception,in,case,of,i,o,errors;public,void,write,to,writable,byte,channel,channel,throws,ioexception,assert,not,null,channel,channel,must,not,be,null,while,this,data,has,remaining,channel,write,this,data
HttpTunnelPayload -> public void logOutgoing();1507173536;Log incoming payload information at trace level to aid diagnostics.;public void logOutgoing() {_		log("> ")__	};log,incoming,payload,information,at,trace,level,to,aid,diagnostics;public,void,log,outgoing,log
HttpTunnelPayload -> public void logOutgoing();1507661773;Log incoming payload information at trace level to aid diagnostics.;public void logOutgoing() {_		log("> ")__	};log,incoming,payload,information,at,trace,level,to,aid,diagnostics;public,void,log,outgoing,log
HttpTunnelPayload -> public void logOutgoing();1516357852;Log incoming payload information at trace level to aid diagnostics.;public void logOutgoing() {_		log("> ")__	};log,incoming,payload,information,at,trace,level,to,aid,diagnostics;public,void,log,outgoing,log
HttpTunnelPayload -> public void logOutgoing();1518511836;Log incoming payload information at trace level to aid diagnostics.;public void logOutgoing() {_		log("> ")__	};log,incoming,payload,information,at,trace,level,to,aid,diagnostics;public,void,log,outgoing,log
HttpTunnelPayload -> public static HttpTunnelPayload get(HttpInputMessage message) throws IOException;1507173536;Return the {@link HttpTunnelPayload} for the given message or {@code null} if there_is no payload._@param message the HTTP message_@return the payload or {@code null}_@throws IOException in case of I/O errors;public static HttpTunnelPayload get(HttpInputMessage message) throws IOException {_		long length = message.getHeaders().getContentLength()__		if (length <= 0) {_			return null__		}_		String seqHeader = message.getHeaders().getFirst(SEQ_HEADER)__		Assert.state(StringUtils.hasLength(seqHeader), "Missing sequence header")__		ReadableByteChannel body = Channels.newChannel(message.getBody())__		ByteBuffer payload = ByteBuffer.allocate((int) length)__		while (payload.hasRemaining()) {_			body.read(payload)__		}_		body.close()__		payload.flip()__		return new HttpTunnelPayload(Long.valueOf(seqHeader), payload)__	};return,the,link,http,tunnel,payload,for,the,given,message,or,code,null,if,there,is,no,payload,param,message,the,http,message,return,the,payload,or,code,null,throws,ioexception,in,case,of,i,o,errors;public,static,http,tunnel,payload,get,http,input,message,message,throws,ioexception,long,length,message,get,headers,get,content,length,if,length,0,return,null,string,seq,header,message,get,headers,get,first,assert,state,string,utils,has,length,seq,header,missing,sequence,header,readable,byte,channel,body,channels,new,channel,message,get,body,byte,buffer,payload,byte,buffer,allocate,int,length,while,payload,has,remaining,body,read,payload,body,close,payload,flip,return,new,http,tunnel,payload,long,value,of,seq,header,payload
HttpTunnelPayload -> public static HttpTunnelPayload get(HttpInputMessage message) throws IOException;1507661773;Return the {@link HttpTunnelPayload} for the given message or {@code null} if there_is no payload._@param message the HTTP message_@return the payload or {@code null}_@throws IOException in case of I/O errors;public static HttpTunnelPayload get(HttpInputMessage message) throws IOException {_		long length = message.getHeaders().getContentLength()__		if (length <= 0) {_			return null__		}_		String seqHeader = message.getHeaders().getFirst(SEQ_HEADER)__		Assert.state(StringUtils.hasLength(seqHeader), "Missing sequence header")__		ReadableByteChannel body = Channels.newChannel(message.getBody())__		ByteBuffer payload = ByteBuffer.allocate((int) length)__		while (payload.hasRemaining()) {_			body.read(payload)__		}_		body.close()__		payload.flip()__		return new HttpTunnelPayload(Long.valueOf(seqHeader), payload)__	};return,the,link,http,tunnel,payload,for,the,given,message,or,code,null,if,there,is,no,payload,param,message,the,http,message,return,the,payload,or,code,null,throws,ioexception,in,case,of,i,o,errors;public,static,http,tunnel,payload,get,http,input,message,message,throws,ioexception,long,length,message,get,headers,get,content,length,if,length,0,return,null,string,seq,header,message,get,headers,get,first,assert,state,string,utils,has,length,seq,header,missing,sequence,header,readable,byte,channel,body,channels,new,channel,message,get,body,byte,buffer,payload,byte,buffer,allocate,int,length,while,payload,has,remaining,body,read,payload,body,close,payload,flip,return,new,http,tunnel,payload,long,value,of,seq,header,payload
HttpTunnelPayload -> public static HttpTunnelPayload get(HttpInputMessage message) throws IOException;1516357852;Return the {@link HttpTunnelPayload} for the given message or {@code null} if there_is no payload._@param message the HTTP message_@return the payload or {@code null}_@throws IOException in case of I/O errors;public static HttpTunnelPayload get(HttpInputMessage message) throws IOException {_		long length = message.getHeaders().getContentLength()__		if (length <= 0) {_			return null__		}_		String seqHeader = message.getHeaders().getFirst(SEQ_HEADER)__		Assert.state(StringUtils.hasLength(seqHeader), "Missing sequence header")__		ReadableByteChannel body = Channels.newChannel(message.getBody())__		ByteBuffer payload = ByteBuffer.allocate((int) length)__		while (payload.hasRemaining()) {_			body.read(payload)__		}_		body.close()__		payload.flip()__		return new HttpTunnelPayload(Long.valueOf(seqHeader), payload)__	};return,the,link,http,tunnel,payload,for,the,given,message,or,code,null,if,there,is,no,payload,param,message,the,http,message,return,the,payload,or,code,null,throws,ioexception,in,case,of,i,o,errors;public,static,http,tunnel,payload,get,http,input,message,message,throws,ioexception,long,length,message,get,headers,get,content,length,if,length,0,return,null,string,seq,header,message,get,headers,get,first,assert,state,string,utils,has,length,seq,header,missing,sequence,header,readable,byte,channel,body,channels,new,channel,message,get,body,byte,buffer,payload,byte,buffer,allocate,int,length,while,payload,has,remaining,body,read,payload,body,close,payload,flip,return,new,http,tunnel,payload,long,value,of,seq,header,payload
HttpTunnelPayload -> public static HttpTunnelPayload get(HttpInputMessage message) throws IOException;1518511836;Return the {@link HttpTunnelPayload} for the given message or {@code null} if there_is no payload._@param message the HTTP message_@return the payload or {@code null}_@throws IOException in case of I/O errors;public static HttpTunnelPayload get(HttpInputMessage message) throws IOException {_		long length = message.getHeaders().getContentLength()__		if (length <= 0) {_			return null__		}_		String seqHeader = message.getHeaders().getFirst(SEQ_HEADER)__		Assert.state(StringUtils.hasLength(seqHeader), "Missing sequence header")__		ReadableByteChannel body = Channels.newChannel(message.getBody())__		ByteBuffer payload = ByteBuffer.allocate((int) length)__		while (payload.hasRemaining()) {_			body.read(payload)__		}_		body.close()__		payload.flip()__		return new HttpTunnelPayload(Long.valueOf(seqHeader), payload)__	};return,the,link,http,tunnel,payload,for,the,given,message,or,code,null,if,there,is,no,payload,param,message,the,http,message,return,the,payload,or,code,null,throws,ioexception,in,case,of,i,o,errors;public,static,http,tunnel,payload,get,http,input,message,message,throws,ioexception,long,length,message,get,headers,get,content,length,if,length,0,return,null,string,seq,header,message,get,headers,get,first,assert,state,string,utils,has,length,seq,header,missing,sequence,header,readable,byte,channel,body,channels,new,channel,message,get,body,byte,buffer,payload,byte,buffer,allocate,int,length,while,payload,has,remaining,body,read,payload,body,close,payload,flip,return,new,http,tunnel,payload,long,value,of,seq,header,payload
HttpTunnelPayload -> public static ByteBuffer getPayloadData(ReadableByteChannel channel) 			throws IOException;1507173536;Return the payload data for the given source {@link ReadableByteChannel} or null if_the channel timed out whilst reading._@param channel the source channel_@return payload data or {@code null}_@throws IOException in case of I/O errors;public static ByteBuffer getPayloadData(ReadableByteChannel channel)_			throws IOException {_		ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE)__		try {_			int amountRead = channel.read(buffer)__			Assert.state(amountRead != -1, "Target server connection closed")__			buffer.flip()__			return buffer__		}_		catch (InterruptedIOException ex) {_			return null__		}_	};return,the,payload,data,for,the,given,source,link,readable,byte,channel,or,null,if,the,channel,timed,out,whilst,reading,param,channel,the,source,channel,return,payload,data,or,code,null,throws,ioexception,in,case,of,i,o,errors;public,static,byte,buffer,get,payload,data,readable,byte,channel,channel,throws,ioexception,byte,buffer,buffer,byte,buffer,allocate,try,int,amount,read,channel,read,buffer,assert,state,amount,read,1,target,server,connection,closed,buffer,flip,return,buffer,catch,interrupted,ioexception,ex,return,null
HttpTunnelPayload -> public static ByteBuffer getPayloadData(ReadableByteChannel channel) 			throws IOException;1507661773;Return the payload data for the given source {@link ReadableByteChannel} or null if_the channel timed out whilst reading._@param channel the source channel_@return payload data or {@code null}_@throws IOException in case of I/O errors;public static ByteBuffer getPayloadData(ReadableByteChannel channel)_			throws IOException {_		ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE)__		try {_			int amountRead = channel.read(buffer)__			Assert.state(amountRead != -1, "Target server connection closed")__			buffer.flip()__			return buffer__		}_		catch (InterruptedIOException ex) {_			return null__		}_	};return,the,payload,data,for,the,given,source,link,readable,byte,channel,or,null,if,the,channel,timed,out,whilst,reading,param,channel,the,source,channel,return,payload,data,or,code,null,throws,ioexception,in,case,of,i,o,errors;public,static,byte,buffer,get,payload,data,readable,byte,channel,channel,throws,ioexception,byte,buffer,buffer,byte,buffer,allocate,try,int,amount,read,channel,read,buffer,assert,state,amount,read,1,target,server,connection,closed,buffer,flip,return,buffer,catch,interrupted,ioexception,ex,return,null
HttpTunnelPayload -> public static ByteBuffer getPayloadData(ReadableByteChannel channel) 			throws IOException;1516357852;Return the payload data for the given source {@link ReadableByteChannel} or null if_the channel timed out whilst reading._@param channel the source channel_@return payload data or {@code null}_@throws IOException in case of I/O errors;public static ByteBuffer getPayloadData(ReadableByteChannel channel)_			throws IOException {_		ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE)__		try {_			int amountRead = channel.read(buffer)__			Assert.state(amountRead != -1, "Target server connection closed")__			buffer.flip()__			return buffer__		}_		catch (InterruptedIOException ex) {_			return null__		}_	};return,the,payload,data,for,the,given,source,link,readable,byte,channel,or,null,if,the,channel,timed,out,whilst,reading,param,channel,the,source,channel,return,payload,data,or,code,null,throws,ioexception,in,case,of,i,o,errors;public,static,byte,buffer,get,payload,data,readable,byte,channel,channel,throws,ioexception,byte,buffer,buffer,byte,buffer,allocate,try,int,amount,read,channel,read,buffer,assert,state,amount,read,1,target,server,connection,closed,buffer,flip,return,buffer,catch,interrupted,ioexception,ex,return,null
HttpTunnelPayload -> public static ByteBuffer getPayloadData(ReadableByteChannel channel) 			throws IOException;1518511836;Return the payload data for the given source {@link ReadableByteChannel} or null if_the channel timed out whilst reading._@param channel the source channel_@return payload data or {@code null}_@throws IOException in case of I/O errors;public static ByteBuffer getPayloadData(ReadableByteChannel channel)_			throws IOException {_		ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE)__		try {_			int amountRead = channel.read(buffer)__			Assert.state(amountRead != -1, "Target server connection closed")__			buffer.flip()__			return buffer__		}_		catch (InterruptedIOException ex) {_			return null__		}_	};return,the,payload,data,for,the,given,source,link,readable,byte,channel,or,null,if,the,channel,timed,out,whilst,reading,param,channel,the,source,channel,return,payload,data,or,code,null,throws,ioexception,in,case,of,i,o,errors;public,static,byte,buffer,get,payload,data,readable,byte,channel,channel,throws,ioexception,byte,buffer,buffer,byte,buffer,allocate,try,int,amount,read,channel,read,buffer,assert,state,amount,read,1,target,server,connection,closed,buffer,flip,return,buffer,catch,interrupted,ioexception,ex,return,null
HttpTunnelPayload -> public HttpTunnelPayload(long sequence, ByteBuffer data);1507173536;Create a new {@link HttpTunnelPayload} instance._@param sequence the sequence number of the payload_@param data the payload data;public HttpTunnelPayload(long sequence, ByteBuffer data) {_		Assert.isTrue(sequence > 0, "Sequence must be positive")__		Assert.notNull(data, "Data must not be null")__		this.sequence = sequence__		this.data = data__	};create,a,new,link,http,tunnel,payload,instance,param,sequence,the,sequence,number,of,the,payload,param,data,the,payload,data;public,http,tunnel,payload,long,sequence,byte,buffer,data,assert,is,true,sequence,0,sequence,must,be,positive,assert,not,null,data,data,must,not,be,null,this,sequence,sequence,this,data,data
HttpTunnelPayload -> public HttpTunnelPayload(long sequence, ByteBuffer data);1507661773;Create a new {@link HttpTunnelPayload} instance._@param sequence the sequence number of the payload_@param data the payload data;public HttpTunnelPayload(long sequence, ByteBuffer data) {_		Assert.isTrue(sequence > 0, "Sequence must be positive")__		Assert.notNull(data, "Data must not be null")__		this.sequence = sequence__		this.data = data__	};create,a,new,link,http,tunnel,payload,instance,param,sequence,the,sequence,number,of,the,payload,param,data,the,payload,data;public,http,tunnel,payload,long,sequence,byte,buffer,data,assert,is,true,sequence,0,sequence,must,be,positive,assert,not,null,data,data,must,not,be,null,this,sequence,sequence,this,data,data
HttpTunnelPayload -> public HttpTunnelPayload(long sequence, ByteBuffer data);1516357852;Create a new {@link HttpTunnelPayload} instance._@param sequence the sequence number of the payload_@param data the payload data;public HttpTunnelPayload(long sequence, ByteBuffer data) {_		Assert.isTrue(sequence > 0, "Sequence must be positive")__		Assert.notNull(data, "Data must not be null")__		this.sequence = sequence__		this.data = data__	};create,a,new,link,http,tunnel,payload,instance,param,sequence,the,sequence,number,of,the,payload,param,data,the,payload,data;public,http,tunnel,payload,long,sequence,byte,buffer,data,assert,is,true,sequence,0,sequence,must,be,positive,assert,not,null,data,data,must,not,be,null,this,sequence,sequence,this,data,data
HttpTunnelPayload -> public HttpTunnelPayload(long sequence, ByteBuffer data);1518511836;Create a new {@link HttpTunnelPayload} instance._@param sequence the sequence number of the payload_@param data the payload data;public HttpTunnelPayload(long sequence, ByteBuffer data) {_		Assert.isTrue(sequence > 0, "Sequence must be positive")__		Assert.notNull(data, "Data must not be null")__		this.sequence = sequence__		this.data = data__	};create,a,new,link,http,tunnel,payload,instance,param,sequence,the,sequence,number,of,the,payload,param,data,the,payload,data;public,http,tunnel,payload,long,sequence,byte,buffer,data,assert,is,true,sequence,0,sequence,must,be,positive,assert,not,null,data,data,must,not,be,null,this,sequence,sequence,this,data,data
HttpTunnelPayload -> public long getSequence();1507173536;Return the sequence number of the payload._@return the sequence;public long getSequence() {_		return this.sequence__	};return,the,sequence,number,of,the,payload,return,the,sequence;public,long,get,sequence,return,this,sequence
HttpTunnelPayload -> public long getSequence();1507661773;Return the sequence number of the payload._@return the sequence;public long getSequence() {_		return this.sequence__	};return,the,sequence,number,of,the,payload,return,the,sequence;public,long,get,sequence,return,this,sequence
HttpTunnelPayload -> public long getSequence();1516357852;Return the sequence number of the payload._@return the sequence;public long getSequence() {_		return this.sequence__	};return,the,sequence,number,of,the,payload,return,the,sequence;public,long,get,sequence,return,this,sequence
HttpTunnelPayload -> public long getSequence();1518511836;Return the sequence number of the payload._@return the sequence;public long getSequence() {_		return this.sequence__	};return,the,sequence,number,of,the,payload,return,the,sequence;public,long,get,sequence,return,this,sequence
HttpTunnelPayload -> public void logIncoming();1507173536;Log incoming payload information at trace level to aid diagnostics.;public void logIncoming() {_		log("< ")__	};log,incoming,payload,information,at,trace,level,to,aid,diagnostics;public,void,log,incoming,log
HttpTunnelPayload -> public void logIncoming();1507661773;Log incoming payload information at trace level to aid diagnostics.;public void logIncoming() {_		log("< ")__	};log,incoming,payload,information,at,trace,level,to,aid,diagnostics;public,void,log,incoming,log
HttpTunnelPayload -> public void logIncoming();1516357852;Log incoming payload information at trace level to aid diagnostics.;public void logIncoming() {_		log("< ")__	};log,incoming,payload,information,at,trace,level,to,aid,diagnostics;public,void,log,incoming,log
HttpTunnelPayload -> public void logIncoming();1518511836;Log incoming payload information at trace level to aid diagnostics.;public void logIncoming() {_		log("< ")__	};log,incoming,payload,information,at,trace,level,to,aid,diagnostics;public,void,log,incoming,log
