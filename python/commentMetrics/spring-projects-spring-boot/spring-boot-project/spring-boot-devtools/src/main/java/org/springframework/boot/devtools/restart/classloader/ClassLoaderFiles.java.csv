commented;modifiers;parameterAmount;loc;comment;code
true;public;1;8;/**  * Add all elements items from the specified {@link ClassLoaderFiles} to this  * instance.  * @param files the files to add  */ ;/**  * Add all elements items from the specified {@link ClassLoaderFiles} to this  * instance.  * @param files the files to add  */ public void addAll(ClassLoaderFiles files) {     Assert.notNull(files, "Files must not be null").     for (SourceFolder folder : files.getSourceFolders()) {         for (Map.Entry<String, ClassLoaderFile> entry : folder.getFilesEntrySet()) {             addFile(folder.getName(), entry.getKey(), entry.getValue()).         }     } }
true;public;2;3;/**  * Add a single {@link ClassLoaderFile} to the collection.  * @param name the name of the file  * @param file the file to add  */ ;/**  * Add a single {@link ClassLoaderFile} to the collection.  * @param name the name of the file  * @param file the file to add  */ public void addFile(String name, ClassLoaderFile file) {     addFile("", name, file). }
true;public;3;7;/**  * Add a single {@link ClassLoaderFile} to the collection.  * @param sourceFolder the source folder of the file  * @param name the name of the file  * @param file the file to add  */ ;/**  * Add a single {@link ClassLoaderFile} to the collection.  * @param sourceFolder the source folder of the file  * @param name the name of the file  * @param file the file to add  */ public void addFile(String sourceFolder, String name, ClassLoaderFile file) {     Assert.notNull(sourceFolder, "SourceFolder must not be null").     Assert.notNull(name, "Name must not be null").     Assert.notNull(file, "File must not be null").     removeAll(name).     getOrCreateSourceFolder(sourceFolder).add(name, file). }
false;private;1;5;;private void removeAll(String name) {     for (SourceFolder sourceFolder : this.sourceFolders.values()) {         sourceFolder.remove(name).     } }
true;protected,final;1;8;/**  * Get or create a {@link SourceFolder} with the given name.  * @param name the name of the folder  * @return an existing or newly added {@link SourceFolder}  */ ;/**  * Get or create a {@link SourceFolder} with the given name.  * @param name the name of the folder  * @return an existing or newly added {@link SourceFolder}  */ protected final SourceFolder getOrCreateSourceFolder(String name) {     SourceFolder sourceFolder = this.sourceFolders.get(name).     if (sourceFolder == null) {         sourceFolder = new SourceFolder(name).         this.sourceFolders.put(name, sourceFolder).     }     return sourceFolder. }
true;public;0;3;/**  * Return all {@link SourceFolder SourceFolders} that have been added to the  * collection.  * @return a collection of {@link SourceFolder} items  */ ;/**  * Return all {@link SourceFolder SourceFolders} that have been added to the  * collection.  * @return a collection of {@link SourceFolder} items  */ public Collection<SourceFolder> getSourceFolders() {     return Collections.unmodifiableCollection(this.sourceFolders.values()). }
true;public;0;7;/**  * Return the size of the collection.  * @return the size of the collection  */ ;/**  * Return the size of the collection.  * @return the size of the collection  */ public int size() {     int size = 0.     for (SourceFolder sourceFolder : this.sourceFolders.values()) {         size += sourceFolder.getFiles().size().     }     return size. }
false;public;1;10;;@Override public ClassLoaderFile getFile(String name) {     for (SourceFolder sourceFolder : this.sourceFolders.values()) {         ClassLoaderFile file = sourceFolder.get(name).         if (file != null) {             return file.         }     }     return null. }
false;public;0;3;;public Set<Entry<String, ClassLoaderFile>> getFilesEntrySet() {     return this.files.entrySet(). }
false;protected,final;2;3;;protected final void add(String name, ClassLoaderFile file) {     this.files.put(name, file). }
false;protected,final;1;3;;protected final void remove(String name) {     this.files.remove(name). }
false;protected,final;1;3;;protected final ClassLoaderFile get(String name) {     return this.files.get(name). }
true;public;0;3;/**  * Return the name of the source folder.  * @return the name of the source folder  */ ;/**  * Return the name of the source folder.  * @return the name of the source folder  */ public String getName() {     return this.name. }
true;public;0;3;/**  * Return all {@link ClassLoaderFile ClassLoaderFiles} in the collection that are  * contained in this source folder.  * @return the files contained in the source folder  */ ;/**  * Return all {@link ClassLoaderFile ClassLoaderFiles} in the collection that are  * contained in this source folder.  * @return the files contained in the source folder  */ public Collection<ClassLoaderFile> getFiles() {     return Collections.unmodifiableCollection(this.files.values()). }
