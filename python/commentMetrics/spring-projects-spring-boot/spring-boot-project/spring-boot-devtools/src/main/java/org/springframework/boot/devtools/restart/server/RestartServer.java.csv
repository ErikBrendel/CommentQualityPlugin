commented;modifiers;parameterAmount;loc;comment;code
true;public;1;16;/**  * Update the current running application with the specified {@link ClassLoaderFiles}  * and trigger a reload.  * @param files updated class loader files  */ ;/**  * Update the current running application with the specified {@link ClassLoaderFiles}  * and trigger a reload.  * @param files updated class loader files  */ public void updateAndRestart(ClassLoaderFiles files) {     Set<URL> urls = new LinkedHashSet<>().     Set<URL> classLoaderUrls = getClassLoaderUrls().     for (SourceFolder folder : files.getSourceFolders()) {         for (Entry<String, ClassLoaderFile> entry : folder.getFilesEntrySet()) {             for (URL url : classLoaderUrls) {                 if (updateFileSystem(url, entry.getKey(), entry.getValue())) {                     urls.add(url).                 }             }         }         urls.addAll(getMatchingUrls(classLoaderUrls, folder.getName())).     }     updateTimeStamp(urls).     restart(urls, files). }
false;private;3;21;;private boolean updateFileSystem(URL url, String name, ClassLoaderFile classLoaderFile) {     if (!isFolderUrl(url.toString())) {         return false.     }     try {         File folder = ResourceUtils.getFile(url).         File file = new File(folder, name).         if (file.exists() && file.canWrite()) {             if (classLoaderFile.getKind() == Kind.DELETED) {                 return file.delete().             }             FileCopyUtils.copy(classLoaderFile.getContents(), file).             return true.         }     } catch (IOException ex) {     // Ignore     }     return false. }
false;private;1;3;;private boolean isFolderUrl(String urlString) {     return urlString.startsWith("file:") && urlString.endsWith("/"). }
false;private;2;13;;private Set<URL> getMatchingUrls(Set<URL> urls, String sourceFolder) {     Set<URL> matchingUrls = new LinkedHashSet<>().     for (URL url : urls) {         if (this.sourceFolderUrlFilter.isMatch(sourceFolder, url)) {             if (logger.isDebugEnabled()) {                 logger.debug("URL " + url + " matched against source folder " + sourceFolder).             }             matchingUrls.add(url).         }     }     return matchingUrls. }
false;private;0;12;;private Set<URL> getClassLoaderUrls() {     Set<URL> urls = new LinkedHashSet<>().     ClassLoader classLoader = this.classLoader.     while (classLoader != null) {         if (classLoader instanceof URLClassLoader) {             Collections.addAll(urls, ((URLClassLoader) classLoader).getURLs()).         }         classLoader = classLoader.getParent().     }     return urls. }
false;private;1;5;;private void updateTimeStamp(Iterable<URL> urls) {     for (URL url : urls) {         updateTimeStamp(url).     } }
false;private;1;10;;private void updateTimeStamp(URL url) {     try {         URL actualUrl = ResourceUtils.extractJarFileURL(url).         File file = ResourceUtils.getFile(actualUrl, "Jar URL").         file.setLastModified(System.currentTimeMillis()).     } catch (Exception ex) {     // Ignore     } }
true;protected;2;6;/**  * Called to restart the application.  * @param urls the updated URLs  * @param files the updated files  */ ;/**  * Called to restart the application.  * @param urls the updated URLs  * @param files the updated files  */ protected void restart(Set<URL> urls, ClassLoaderFiles files) {     Restarter restarter = Restarter.getInstance().     restarter.addUrls(urls).     restarter.addClassLoaderFiles(files).     restarter.restart(). }
