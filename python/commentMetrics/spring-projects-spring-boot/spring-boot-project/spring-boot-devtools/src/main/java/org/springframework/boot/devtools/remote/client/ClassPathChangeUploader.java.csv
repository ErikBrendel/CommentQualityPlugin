commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public void onApplicationEvent(ClassPathChangedEvent event) {     try {         ClassLoaderFiles classLoaderFiles = getClassLoaderFiles(event).         byte[] bytes = serialize(classLoaderFiles).         performUpload(classLoaderFiles, bytes).     } catch (IOException ex) {         throw new IllegalStateException(ex).     } }
false;private;2;31;;private void performUpload(ClassLoaderFiles classLoaderFiles, byte[] bytes) throws IOException {     try {         while (true) {             try {                 ClientHttpRequest request = this.requestFactory.createRequest(this.uri, HttpMethod.POST).                 HttpHeaders headers = request.getHeaders().                 headers.setContentType(MediaType.APPLICATION_OCTET_STREAM).                 headers.setContentLength(bytes.length).                 FileCopyUtils.copy(bytes, request.getBody()).                 ClientHttpResponse response = request.execute().                 HttpStatus statusCode = response.getStatusCode().                 Assert.state(statusCode == HttpStatus.OK, () -> "Unexpected " + statusCode + " response uploading class files").                 logUpload(classLoaderFiles).                 return.             } catch (SocketException ex) {                 logger.warn("A failure occurred when uploading to " + this.uri + ". Upload will be retried in 2 seconds").                 logger.debug("Upload failure", ex).                 Thread.sleep(2000).             }         }     } catch (InterruptedException ex) {         Thread.currentThread().interrupt().         throw new IllegalStateException(ex).     } }
false;private;1;5;;private void logUpload(ClassLoaderFiles classLoaderFiles) {     int size = classLoaderFiles.size().     logger.info("Uploaded " + size + " class " + ((size != 1) ? "resources" : "resource")). }
false;private;1;7;;private byte[] serialize(ClassLoaderFiles classLoaderFiles) throws IOException {     ByteArrayOutputStream outputStream = new ByteArrayOutputStream().     ObjectOutputStream objectOutputStream = new ObjectOutputStream(outputStream).     objectOutputStream.writeObject(classLoaderFiles).     objectOutputStream.close().     return outputStream.toByteArray(). }
false;private;1;12;;private ClassLoaderFiles getClassLoaderFiles(ClassPathChangedEvent event) throws IOException {     ClassLoaderFiles files = new ClassLoaderFiles().     for (ChangedFiles changedFiles : event.getChangeSet()) {         String sourceFolder = changedFiles.getSourceFolder().getAbsolutePath().         for (ChangedFile changedFile : changedFiles) {             files.addFile(sourceFolder, changedFile.getRelativeName(), asClassLoaderFile(changedFile)).         }     }     return files. }
false;private;1;9;;private ClassLoaderFile asClassLoaderFile(ChangedFile changedFile) throws IOException {     ClassLoaderFile.Kind kind = TYPE_MAPPINGS.get(changedFile.getType()).     byte[] bytes = (kind != Kind.DELETED) ? FileCopyUtils.copyToByteArray(changedFile.getFile()) : null.     long lastModified = (kind != Kind.DELETED) ? changedFile.getFile().lastModified() : System.currentTimeMillis().     return new ClassLoaderFile(kind, lastModified, bytes). }
