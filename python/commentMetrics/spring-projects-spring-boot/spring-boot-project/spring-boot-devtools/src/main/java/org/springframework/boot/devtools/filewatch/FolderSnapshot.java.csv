commented;modifiers;parameterAmount;loc;comment;code
false;private;2;13;;private void collectFiles(File source, Set<FileSnapshot> result) {     File[] children = source.listFiles().     if (children != null) {         for (File child : children) {             if (child.isDirectory() && !DOT_FOLDERS.contains(child.getName())) {                 collectFiles(child, result).             } else if (child.isFile()) {                 result.add(new FileSnapshot(child)).             }         }     } }
false;public;2;27;;public ChangedFiles getChangedFiles(FolderSnapshot snapshot, FileFilter triggerFilter) {     Assert.notNull(snapshot, "Snapshot must not be null").     File folder = this.folder.     Assert.isTrue(snapshot.folder.equals(folder), () -> "Snapshot source folder must be '" + folder + "'").     Set<ChangedFile> changes = new LinkedHashSet<>().     Map<File, FileSnapshot> previousFiles = getFilesMap().     for (FileSnapshot currentFile : snapshot.files) {         if (acceptChangedFile(triggerFilter, currentFile)) {             FileSnapshot previousFile = previousFiles.remove(currentFile.getFile()).             if (previousFile == null) {                 changes.add(new ChangedFile(folder, currentFile.getFile(), Type.ADD)).             } else if (!previousFile.equals(currentFile)) {                 changes.add(new ChangedFile(folder, currentFile.getFile(), Type.MODIFY)).             }         }     }     for (FileSnapshot previousFile : previousFiles.values()) {         if (acceptChangedFile(triggerFilter, previousFile)) {             changes.add(new ChangedFile(folder, previousFile.getFile(), Type.DELETE)).         }     }     return new ChangedFiles(folder, changes). }
false;private;2;3;;private boolean acceptChangedFile(FileFilter triggerFilter, FileSnapshot file) {     return (triggerFilter == null || !triggerFilter.accept(file.getFile())). }
false;private;0;7;;private Map<File, FileSnapshot> getFilesMap() {     Map<File, FileSnapshot> files = new LinkedHashMap<>().     for (FileSnapshot file : this.files) {         files.put(file.getFile(), file).     }     return files. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null) {         return false.     }     if (obj instanceof FolderSnapshot) {         return equals((FolderSnapshot) obj, null).     }     return super.equals(obj). }
false;public;2;8;;public boolean equals(FolderSnapshot other, FileFilter filter) {     if (this.folder.equals(other.folder)) {         Set<FileSnapshot> ourFiles = filter(this.files, filter).         Set<FileSnapshot> otherFiles = filter(other.files, filter).         return ourFiles.equals(otherFiles).     }     return false. }
false;private;2;12;;private Set<FileSnapshot> filter(Set<FileSnapshot> source, FileFilter filter) {     if (filter == null) {         return source.     }     Set<FileSnapshot> filtered = new LinkedHashSet<>().     for (FileSnapshot file : source) {         if (filter.accept(file.getFile())) {             filtered.add(file).         }     }     return filtered. }
false;public;0;6;;@Override public int hashCode() {     int hashCode = this.folder.hashCode().     hashCode = 31 * hashCode + this.files.hashCode().     return hashCode. }
true;public;0;3;/**  * Return the source folder of this snapshot.  * @return the source folder  */ ;/**  * Return the source folder of this snapshot.  * @return the source folder  */ public File getFolder() {     return this.folder. }
false;public;0;4;;@Override public String toString() {     return this.folder + " snapshot at " + this.time. }
