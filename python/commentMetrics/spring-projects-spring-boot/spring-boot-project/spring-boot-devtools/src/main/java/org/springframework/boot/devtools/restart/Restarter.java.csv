# id;timestamp;commentText;codeText;commentWords;codeWords
Restarter -> protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1507173536;Internal constructor to create a new {@link Restarter} instance._@param thread the source thread_@param args the application arguments_@param forceReferenceCleanup if soft/weak reference cleanup should be forced_@param initializer the restart initializer_@see #initialize(String[]);protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		Assert.notNull(thread, "Thread must not be null")__		Assert.notNull(args, "Args must not be null")__		Assert.notNull(initializer, "Initializer must not be null")__		this.logger.debug("Creating new Restarter for thread " + thread)__		SilentExitExceptionHandler.setup(thread)__		this.forceReferenceCleanup = forceReferenceCleanup__		this.initialUrls = initializer.getInitialUrls(thread)__		this.mainClassName = getMainClassName(thread)__		this.applicationClassLoader = thread.getContextClassLoader()__		this.args = args__		this.exceptionHandler = thread.getUncaughtExceptionHandler()__		this.leakSafeThreads.add(new LeakSafeThread())__	};internal,constructor,to,create,a,new,link,restarter,instance,param,thread,the,source,thread,param,args,the,application,arguments,param,force,reference,cleanup,if,soft,weak,reference,cleanup,should,be,forced,param,initializer,the,restart,initializer,see,initialize,string;protected,restarter,thread,thread,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,assert,not,null,thread,thread,must,not,be,null,assert,not,null,args,args,must,not,be,null,assert,not,null,initializer,initializer,must,not,be,null,this,logger,debug,creating,new,restarter,for,thread,thread,silent,exit,exception,handler,setup,thread,this,force,reference,cleanup,force,reference,cleanup,this,initial,urls,initializer,get,initial,urls,thread,this,main,class,name,get,main,class,name,thread,this,application,class,loader,thread,get,context,class,loader,this,args,args,this,exception,handler,thread,get,uncaught,exception,handler,this,leak,safe,threads,add,new,leak,safe,thread
Restarter -> protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1512760426;Internal constructor to create a new {@link Restarter} instance._@param thread the source thread_@param args the application arguments_@param forceReferenceCleanup if soft/weak reference cleanup should be forced_@param initializer the restart initializer_@see #initialize(String[]);protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		Assert.notNull(thread, "Thread must not be null")__		Assert.notNull(args, "Args must not be null")__		Assert.notNull(initializer, "Initializer must not be null")__		this.logger.debug("Creating new Restarter for thread " + thread)__		SilentExitExceptionHandler.setup(thread)__		this.forceReferenceCleanup = forceReferenceCleanup__		this.initialUrls = initializer.getInitialUrls(thread)__		this.mainClassName = getMainClassName(thread)__		this.applicationClassLoader = thread.getContextClassLoader()__		this.args = args__		this.exceptionHandler = thread.getUncaughtExceptionHandler()__		this.leakSafeThreads.add(new LeakSafeThread())__	};internal,constructor,to,create,a,new,link,restarter,instance,param,thread,the,source,thread,param,args,the,application,arguments,param,force,reference,cleanup,if,soft,weak,reference,cleanup,should,be,forced,param,initializer,the,restart,initializer,see,initialize,string;protected,restarter,thread,thread,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,assert,not,null,thread,thread,must,not,be,null,assert,not,null,args,args,must,not,be,null,assert,not,null,initializer,initializer,must,not,be,null,this,logger,debug,creating,new,restarter,for,thread,thread,silent,exit,exception,handler,setup,thread,this,force,reference,cleanup,force,reference,cleanup,this,initial,urls,initializer,get,initial,urls,thread,this,main,class,name,get,main,class,name,thread,this,application,class,loader,thread,get,context,class,loader,this,args,args,this,exception,handler,thread,get,uncaught,exception,handler,this,leak,safe,threads,add,new,leak,safe,thread
Restarter -> protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1513163939;Internal constructor to create a new {@link Restarter} instance._@param thread the source thread_@param args the application arguments_@param forceReferenceCleanup if soft/weak reference cleanup should be forced_@param initializer the restart initializer_@see #initialize(String[]);protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		Assert.notNull(thread, "Thread must not be null")__		Assert.notNull(args, "Args must not be null")__		Assert.notNull(initializer, "Initializer must not be null")__		this.logger.debug("Creating new Restarter for thread " + thread)__		SilentExitExceptionHandler.setup(thread)__		this.forceReferenceCleanup = forceReferenceCleanup__		this.initialUrls = initializer.getInitialUrls(thread)__		this.mainClassName = getMainClassName(thread)__		this.applicationClassLoader = thread.getContextClassLoader()__		this.args = args__		this.exceptionHandler = thread.getUncaughtExceptionHandler()__		this.leakSafeThreads.add(new LeakSafeThread())__	};internal,constructor,to,create,a,new,link,restarter,instance,param,thread,the,source,thread,param,args,the,application,arguments,param,force,reference,cleanup,if,soft,weak,reference,cleanup,should,be,forced,param,initializer,the,restart,initializer,see,initialize,string;protected,restarter,thread,thread,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,assert,not,null,thread,thread,must,not,be,null,assert,not,null,args,args,must,not,be,null,assert,not,null,initializer,initializer,must,not,be,null,this,logger,debug,creating,new,restarter,for,thread,thread,silent,exit,exception,handler,setup,thread,this,force,reference,cleanup,force,reference,cleanup,this,initial,urls,initializer,get,initial,urls,thread,this,main,class,name,get,main,class,name,thread,this,application,class,loader,thread,get,context,class,loader,this,args,args,this,exception,handler,thread,get,uncaught,exception,handler,this,leak,safe,threads,add,new,leak,safe,thread
Restarter -> protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1513164616;Internal constructor to create a new {@link Restarter} instance._@param thread the source thread_@param args the application arguments_@param forceReferenceCleanup if soft/weak reference cleanup should be forced_@param initializer the restart initializer_@see #initialize(String[]);protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		Assert.notNull(thread, "Thread must not be null")__		Assert.notNull(args, "Args must not be null")__		Assert.notNull(initializer, "Initializer must not be null")__		this.logger.debug("Creating new Restarter for thread " + thread)__		SilentExitExceptionHandler.setup(thread)__		this.forceReferenceCleanup = forceReferenceCleanup__		this.initialUrls = initializer.getInitialUrls(thread)__		this.mainClassName = getMainClassName(thread)__		this.applicationClassLoader = thread.getContextClassLoader()__		this.args = args__		this.exceptionHandler = thread.getUncaughtExceptionHandler()__		this.leakSafeThreads.add(new LeakSafeThread())__	};internal,constructor,to,create,a,new,link,restarter,instance,param,thread,the,source,thread,param,args,the,application,arguments,param,force,reference,cleanup,if,soft,weak,reference,cleanup,should,be,forced,param,initializer,the,restart,initializer,see,initialize,string;protected,restarter,thread,thread,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,assert,not,null,thread,thread,must,not,be,null,assert,not,null,args,args,must,not,be,null,assert,not,null,initializer,initializer,must,not,be,null,this,logger,debug,creating,new,restarter,for,thread,thread,silent,exit,exception,handler,setup,thread,this,force,reference,cleanup,force,reference,cleanup,this,initial,urls,initializer,get,initial,urls,thread,this,main,class,name,get,main,class,name,thread,this,application,class,loader,thread,get,context,class,loader,this,args,args,this,exception,handler,thread,get,uncaught,exception,handler,this,leak,safe,threads,add,new,leak,safe,thread
Restarter -> protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1513204375;Internal constructor to create a new {@link Restarter} instance._@param thread the source thread_@param args the application arguments_@param forceReferenceCleanup if soft/weak reference cleanup should be forced_@param initializer the restart initializer_@see #initialize(String[]);protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		Assert.notNull(thread, "Thread must not be null")__		Assert.notNull(args, "Args must not be null")__		Assert.notNull(initializer, "Initializer must not be null")__		this.logger.debug("Creating new Restarter for thread " + thread)__		SilentExitExceptionHandler.setup(thread)__		this.forceReferenceCleanup = forceReferenceCleanup__		this.initialUrls = initializer.getInitialUrls(thread)__		this.mainClassName = getMainClassName(thread)__		this.applicationClassLoader = thread.getContextClassLoader()__		this.args = args__		this.exceptionHandler = thread.getUncaughtExceptionHandler()__		this.leakSafeThreads.add(new LeakSafeThread())__	};internal,constructor,to,create,a,new,link,restarter,instance,param,thread,the,source,thread,param,args,the,application,arguments,param,force,reference,cleanup,if,soft,weak,reference,cleanup,should,be,forced,param,initializer,the,restart,initializer,see,initialize,string;protected,restarter,thread,thread,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,assert,not,null,thread,thread,must,not,be,null,assert,not,null,args,args,must,not,be,null,assert,not,null,initializer,initializer,must,not,be,null,this,logger,debug,creating,new,restarter,for,thread,thread,silent,exit,exception,handler,setup,thread,this,force,reference,cleanup,force,reference,cleanup,this,initial,urls,initializer,get,initial,urls,thread,this,main,class,name,get,main,class,name,thread,this,application,class,loader,thread,get,context,class,loader,this,args,args,this,exception,handler,thread,get,uncaught,exception,handler,this,leak,safe,threads,add,new,leak,safe,thread
Restarter -> protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1519362690;Internal constructor to create a new {@link Restarter} instance._@param thread the source thread_@param args the application arguments_@param forceReferenceCleanup if soft/weak reference cleanup should be forced_@param initializer the restart initializer_@see #initialize(String[]);protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		Assert.notNull(thread, "Thread must not be null")__		Assert.notNull(args, "Args must not be null")__		Assert.notNull(initializer, "Initializer must not be null")__		this.logger.debug("Creating new Restarter for thread " + thread)__		SilentExitExceptionHandler.setup(thread)__		this.forceReferenceCleanup = forceReferenceCleanup__		this.initialUrls = initializer.getInitialUrls(thread)__		this.mainClassName = getMainClassName(thread)__		this.applicationClassLoader = thread.getContextClassLoader()__		this.args = args__		this.exceptionHandler = thread.getUncaughtExceptionHandler()__		this.leakSafeThreads.add(new LeakSafeThread())__	};internal,constructor,to,create,a,new,link,restarter,instance,param,thread,the,source,thread,param,args,the,application,arguments,param,force,reference,cleanup,if,soft,weak,reference,cleanup,should,be,forced,param,initializer,the,restart,initializer,see,initialize,string;protected,restarter,thread,thread,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,assert,not,null,thread,thread,must,not,be,null,assert,not,null,args,args,must,not,be,null,assert,not,null,initializer,initializer,must,not,be,null,this,logger,debug,creating,new,restarter,for,thread,thread,silent,exit,exception,handler,setup,thread,this,force,reference,cleanup,force,reference,cleanup,this,initial,urls,initializer,get,initial,urls,thread,this,main,class,name,get,main,class,name,thread,this,application,class,loader,thread,get,context,class,loader,this,args,args,this,exception,handler,thread,get,uncaught,exception,handler,this,leak,safe,threads,add,new,leak,safe,thread
Restarter -> protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1522687863;Internal constructor to create a new {@link Restarter} instance._@param thread the source thread_@param args the application arguments_@param forceReferenceCleanup if soft/weak reference cleanup should be forced_@param initializer the restart initializer_@see #initialize(String[]);protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		Assert.notNull(thread, "Thread must not be null")__		Assert.notNull(args, "Args must not be null")__		Assert.notNull(initializer, "Initializer must not be null")__		this.logger.debug("Creating new Restarter for thread " + thread)__		SilentExitExceptionHandler.setup(thread)__		this.forceReferenceCleanup = forceReferenceCleanup__		this.initialUrls = initializer.getInitialUrls(thread)__		this.mainClassName = getMainClassName(thread)__		this.applicationClassLoader = thread.getContextClassLoader()__		this.args = args__		this.exceptionHandler = thread.getUncaughtExceptionHandler()__		this.leakSafeThreads.add(new LeakSafeThread())__	};internal,constructor,to,create,a,new,link,restarter,instance,param,thread,the,source,thread,param,args,the,application,arguments,param,force,reference,cleanup,if,soft,weak,reference,cleanup,should,be,forced,param,initializer,the,restart,initializer,see,initialize,string;protected,restarter,thread,thread,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,assert,not,null,thread,thread,must,not,be,null,assert,not,null,args,args,must,not,be,null,assert,not,null,initializer,initializer,must,not,be,null,this,logger,debug,creating,new,restarter,for,thread,thread,silent,exit,exception,handler,setup,thread,this,force,reference,cleanup,force,reference,cleanup,this,initial,urls,initializer,get,initial,urls,thread,this,main,class,name,get,main,class,name,thread,this,application,class,loader,thread,get,context,class,loader,this,args,args,this,exception,handler,thread,get,uncaught,exception,handler,this,leak,safe,threads,add,new,leak,safe,thread
Restarter -> protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1527837989;Internal constructor to create a new {@link Restarter} instance._@param thread the source thread_@param args the application arguments_@param forceReferenceCleanup if soft/weak reference cleanup should be forced_@param initializer the restart initializer_@see #initialize(String[]);protected Restarter(Thread thread, String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		Assert.notNull(thread, "Thread must not be null")__		Assert.notNull(args, "Args must not be null")__		Assert.notNull(initializer, "Initializer must not be null")__		if (this.logger.isDebugEnabled()) {_			this.logger.debug("Creating new Restarter for thread " + thread)__		}_		SilentExitExceptionHandler.setup(thread)__		this.forceReferenceCleanup = forceReferenceCleanup__		this.initialUrls = initializer.getInitialUrls(thread)__		this.mainClassName = getMainClassName(thread)__		this.applicationClassLoader = thread.getContextClassLoader()__		this.args = args__		this.exceptionHandler = thread.getUncaughtExceptionHandler()__		this.leakSafeThreads.add(new LeakSafeThread())__	};internal,constructor,to,create,a,new,link,restarter,instance,param,thread,the,source,thread,param,args,the,application,arguments,param,force,reference,cleanup,if,soft,weak,reference,cleanup,should,be,forced,param,initializer,the,restart,initializer,see,initialize,string;protected,restarter,thread,thread,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,assert,not,null,thread,thread,must,not,be,null,assert,not,null,args,args,must,not,be,null,assert,not,null,initializer,initializer,must,not,be,null,if,this,logger,is,debug,enabled,this,logger,debug,creating,new,restarter,for,thread,thread,silent,exit,exception,handler,setup,thread,this,force,reference,cleanup,force,reference,cleanup,this,initial,urls,initializer,get,initial,urls,thread,this,main,class,name,get,main,class,name,thread,this,application,class,loader,thread,get,context,class,loader,this,args,args,this,exception,handler,thread,get,uncaught,exception,handler,this,leak,safe,threads,add,new,leak,safe,thread
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1507173536;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		initialize(args, forceReferenceCleanup, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,initialize,args,force,reference,cleanup,initializer,true
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1512760426;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		initialize(args, forceReferenceCleanup, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,initialize,args,force,reference,cleanup,initializer,true
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1513163939;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer, boolean)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		initialize(args, forceReferenceCleanup, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,boolean,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,initialize,args,force,reference,cleanup,initializer,true
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1513164616;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer, boolean)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		initialize(args, forceReferenceCleanup, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,boolean,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,initialize,args,force,reference,cleanup,initializer,true
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1513204375;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer, boolean)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		initialize(args, forceReferenceCleanup, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,boolean,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,initialize,args,force,reference,cleanup,initializer,true
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1519362690;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer, boolean)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		initialize(args, forceReferenceCleanup, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,boolean,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,initialize,args,force,reference,cleanup,initializer,true
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1522687863;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer, boolean)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		initialize(args, forceReferenceCleanup, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,boolean,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,initialize,args,force,reference,cleanup,initializer,true
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer);1527837989;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer, boolean)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer) {_		initialize(args, forceReferenceCleanup, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,boolean,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,initialize,args,force,reference,cleanup,initializer,true
Restarter -> public void addUrls(Collection<URL> urls);1507173536;Add additional URLs to be includes in the next restart._@param urls the urls to add;public void addUrls(Collection<URL> urls) {_		Assert.notNull(urls, "Urls must not be null")__		this.urls.addAll(urls)__	};add,additional,urls,to,be,includes,in,the,next,restart,param,urls,the,urls,to,add;public,void,add,urls,collection,url,urls,assert,not,null,urls,urls,must,not,be,null,this,urls,add,all,urls
Restarter -> public void addUrls(Collection<URL> urls);1512760426;Add additional URLs to be includes in the next restart._@param urls the urls to add;public void addUrls(Collection<URL> urls) {_		Assert.notNull(urls, "Urls must not be null")__		this.urls.addAll(urls)__	};add,additional,urls,to,be,includes,in,the,next,restart,param,urls,the,urls,to,add;public,void,add,urls,collection,url,urls,assert,not,null,urls,urls,must,not,be,null,this,urls,add,all,urls
Restarter -> public void addUrls(Collection<URL> urls);1513163939;Add additional URLs to be includes in the next restart._@param urls the urls to add;public void addUrls(Collection<URL> urls) {_		Assert.notNull(urls, "Urls must not be null")__		this.urls.addAll(urls)__	};add,additional,urls,to,be,includes,in,the,next,restart,param,urls,the,urls,to,add;public,void,add,urls,collection,url,urls,assert,not,null,urls,urls,must,not,be,null,this,urls,add,all,urls
Restarter -> public void addUrls(Collection<URL> urls);1513164616;Add additional URLs to be includes in the next restart._@param urls the urls to add;public void addUrls(Collection<URL> urls) {_		Assert.notNull(urls, "Urls must not be null")__		this.urls.addAll(urls)__	};add,additional,urls,to,be,includes,in,the,next,restart,param,urls,the,urls,to,add;public,void,add,urls,collection,url,urls,assert,not,null,urls,urls,must,not,be,null,this,urls,add,all,urls
Restarter -> public void addUrls(Collection<URL> urls);1513204375;Add additional URLs to be includes in the next restart._@param urls the urls to add;public void addUrls(Collection<URL> urls) {_		Assert.notNull(urls, "Urls must not be null")__		this.urls.addAll(urls)__	};add,additional,urls,to,be,includes,in,the,next,restart,param,urls,the,urls,to,add;public,void,add,urls,collection,url,urls,assert,not,null,urls,urls,must,not,be,null,this,urls,add,all,urls
Restarter -> public void addUrls(Collection<URL> urls);1519362690;Add additional URLs to be includes in the next restart._@param urls the urls to add;public void addUrls(Collection<URL> urls) {_		Assert.notNull(urls, "Urls must not be null")__		this.urls.addAll(urls)__	};add,additional,urls,to,be,includes,in,the,next,restart,param,urls,the,urls,to,add;public,void,add,urls,collection,url,urls,assert,not,null,urls,urls,must,not,be,null,this,urls,add,all,urls
Restarter -> public void addUrls(Collection<URL> urls);1522687863;Add additional URLs to be includes in the next restart._@param urls the urls to add;public void addUrls(Collection<URL> urls) {_		Assert.notNull(urls, "Urls must not be null")__		this.urls.addAll(urls)__	};add,additional,urls,to,be,includes,in,the,next,restart,param,urls,the,urls,to,add;public,void,add,urls,collection,url,urls,assert,not,null,urls,urls,must,not,be,null,this,urls,add,all,urls
Restarter -> public void addUrls(Collection<URL> urls);1527837989;Add additional URLs to be includes in the next restart._@param urls the urls to add;public void addUrls(Collection<URL> urls) {_		Assert.notNull(urls, "Urls must not be null")__		this.urls.addAll(urls)__	};add,additional,urls,to,be,includes,in,the,next,restart,param,urls,the,urls,to,add;public,void,add,urls,collection,url,urls,assert,not,null,urls,urls,must,not,be,null,this,urls,add,all,urls
Restarter -> void finish();1507173536;Called to finish {@link Restarter} initialization when application logging is_available.;void finish() {_		synchronized (this.monitor) {_			if (!isFinished()) {_				this.logger = DeferredLog.replay(this.logger,_						LogFactory.getLog(getClass()))__				this.finished = true__			}_		}_	};called,to,finish,link,restarter,initialization,when,application,logging,is,available;void,finish,synchronized,this,monitor,if,is,finished,this,logger,deferred,log,replay,this,logger,log,factory,get,log,get,class,this,finished,true
Restarter -> void finish();1512760426;Called to finish {@link Restarter} initialization when application logging is_available.;void finish() {_		synchronized (this.monitor) {_			if (!isFinished()) {_				this.logger = DeferredLog.replay(this.logger,_						LogFactory.getLog(getClass()))__				this.finished = true__			}_		}_	};called,to,finish,link,restarter,initialization,when,application,logging,is,available;void,finish,synchronized,this,monitor,if,is,finished,this,logger,deferred,log,replay,this,logger,log,factory,get,log,get,class,this,finished,true
Restarter -> void finish();1513163939;Called to finish {@link Restarter} initialization when application logging is_available.;void finish() {_		synchronized (this.monitor) {_			if (!isFinished()) {_				this.logger = DeferredLog.replay(this.logger,_						LogFactory.getLog(getClass()))__				this.finished = true__			}_		}_	};called,to,finish,link,restarter,initialization,when,application,logging,is,available;void,finish,synchronized,this,monitor,if,is,finished,this,logger,deferred,log,replay,this,logger,log,factory,get,log,get,class,this,finished,true
Restarter -> void finish();1513164616;Called to finish {@link Restarter} initialization when application logging is_available.;void finish() {_		synchronized (this.monitor) {_			if (!isFinished()) {_				this.logger = DeferredLog.replay(this.logger,_						LogFactory.getLog(getClass()))__				this.finished = true__			}_		}_	};called,to,finish,link,restarter,initialization,when,application,logging,is,available;void,finish,synchronized,this,monitor,if,is,finished,this,logger,deferred,log,replay,this,logger,log,factory,get,log,get,class,this,finished,true
Restarter -> void finish();1513204375;Called to finish {@link Restarter} initialization when application logging is_available.;void finish() {_		synchronized (this.monitor) {_			if (!isFinished()) {_				this.logger = DeferredLog.replay(this.logger,_						LogFactory.getLog(getClass()))__				this.finished = true__			}_		}_	};called,to,finish,link,restarter,initialization,when,application,logging,is,available;void,finish,synchronized,this,monitor,if,is,finished,this,logger,deferred,log,replay,this,logger,log,factory,get,log,get,class,this,finished,true
Restarter -> void finish();1519362690;Called to finish {@link Restarter} initialization when application logging is_available.;void finish() {_		synchronized (this.monitor) {_			if (!isFinished()) {_				this.logger = DeferredLog.replay(this.logger,_						LogFactory.getLog(getClass()))__				this.finished = true__			}_		}_	};called,to,finish,link,restarter,initialization,when,application,logging,is,available;void,finish,synchronized,this,monitor,if,is,finished,this,logger,deferred,log,replay,this,logger,log,factory,get,log,get,class,this,finished,true
Restarter -> void finish();1522687863;Called to finish {@link Restarter} initialization when application logging is_available.;void finish() {_		synchronized (this.monitor) {_			if (!isFinished()) {_				this.logger = DeferredLog.replay(this.logger,_						LogFactory.getLog(getClass()))__				this.finished = true__			}_		}_	};called,to,finish,link,restarter,initialization,when,application,logging,is,available;void,finish,synchronized,this,monitor,if,is,finished,this,logger,deferred,log,replay,this,logger,log,factory,get,log,get,class,this,finished,true
Restarter -> void finish();1527837989;Called to finish {@link Restarter} initialization when application logging is_available.;void finish() {_		synchronized (this.monitor) {_			if (!isFinished()) {_				this.logger = DeferredLog.replay(this.logger,_						LogFactory.getLog(getClass()))__				this.finished = true__			}_		}_	};called,to,finish,link,restarter,initialization,when,application,logging,is,available;void,finish,synchronized,this,monitor,if,is,finished,this,logger,deferred,log,replay,this,logger,log,factory,get,log,get,class,this,finished,true
Restarter -> public static void disable();1507173536;Initialize and disable restart support.;public static void disable() {_		initialize(NO_ARGS, false, RestartInitializer.NONE)__		getInstance().setEnabled(false)__	};initialize,and,disable,restart,support;public,static,void,disable,initialize,false,restart,initializer,none,get,instance,set,enabled,false
Restarter -> public static void disable();1512760426;Initialize and disable restart support.;public static void disable() {_		initialize(NO_ARGS, false, RestartInitializer.NONE)__		getInstance().setEnabled(false)__	};initialize,and,disable,restart,support;public,static,void,disable,initialize,false,restart,initializer,none,get,instance,set,enabled,false
Restarter -> public static void disable();1513163939;Initialize and disable restart support.;public static void disable() {_		initialize(NO_ARGS, false, RestartInitializer.NONE)__		getInstance().setEnabled(false)__	};initialize,and,disable,restart,support;public,static,void,disable,initialize,false,restart,initializer,none,get,instance,set,enabled,false
Restarter -> public static void disable();1513164616;Initialize and disable restart support.;public static void disable() {_		initialize(NO_ARGS, false, RestartInitializer.NONE)__		getInstance().setEnabled(false)__	};initialize,and,disable,restart,support;public,static,void,disable,initialize,false,restart,initializer,none,get,instance,set,enabled,false
Restarter -> public static void disable();1513204375;Initialize and disable restart support.;public static void disable() {_		initialize(NO_ARGS, false, RestartInitializer.NONE)__		getInstance().setEnabled(false)__	};initialize,and,disable,restart,support;public,static,void,disable,initialize,false,restart,initializer,none,get,instance,set,enabled,false
Restarter -> public static void disable();1519362690;Initialize and disable restart support.;public static void disable() {_		initialize(NO_ARGS, false, RestartInitializer.NONE)__		getInstance().setEnabled(false)__	};initialize,and,disable,restart,support;public,static,void,disable,initialize,false,restart,initializer,none,get,instance,set,enabled,false
Restarter -> public static void disable();1522687863;Initialize and disable restart support.;public static void disable() {_		initialize(NO_ARGS, false, RestartInitializer.NONE)__		getInstance().setEnabled(false)__	};initialize,and,disable,restart,support;public,static,void,disable,initialize,false,restart,initializer,none,get,instance,set,enabled,false
Restarter -> public static void disable();1527837989;Initialize and disable restart support.;public static void disable() {_		initialize(NO_ARGS, false, RestartInitializer.NONE)__		getInstance().setEnabled(false)__	};initialize,and,disable,restart,support;public,static,void,disable,initialize,false,restart,initializer,none,get,instance,set,enabled,false
Restarter -> static void setInstance(Restarter instance);1513163939;Set the restarter instance (useful for testing)._@param instance the instance to set;static void setInstance(Restarter instance) {_		synchronized (INSTANCE_MONITOR) {_			Restarter.instance = instance__		}_	};set,the,restarter,instance,useful,for,testing,param,instance,the,instance,to,set;static,void,set,instance,restarter,instance,synchronized,restarter,instance,instance
Restarter -> static void setInstance(Restarter instance);1513164616;Set the restarter instance (useful for testing)._@param instance the instance to set;static void setInstance(Restarter instance) {_		synchronized (INSTANCE_MONITOR) {_			Restarter.instance = instance__		}_	};set,the,restarter,instance,useful,for,testing,param,instance,the,instance,to,set;static,void,set,instance,restarter,instance,synchronized,restarter,instance,instance
Restarter -> static void setInstance(Restarter instance);1513204375;Set the restarter instance (useful for testing)._@param instance the instance to set;static void setInstance(Restarter instance) {_		synchronized (INSTANCE_MONITOR) {_			Restarter.instance = instance__		}_	};set,the,restarter,instance,useful,for,testing,param,instance,the,instance,to,set;static,void,set,instance,restarter,instance,synchronized,restarter,instance,instance
Restarter -> static void setInstance(Restarter instance);1519362690;Set the restarter instance (useful for testing)._@param instance the instance to set;static void setInstance(Restarter instance) {_		synchronized (INSTANCE_MONITOR) {_			Restarter.instance = instance__		}_	};set,the,restarter,instance,useful,for,testing,param,instance,the,instance,to,set;static,void,set,instance,restarter,instance,synchronized,restarter,instance,instance
Restarter -> static void setInstance(Restarter instance);1522687863;Set the restarter instance (useful for testing)._@param instance the instance to set;static void setInstance(Restarter instance) {_		synchronized (INSTANCE_MONITOR) {_			Restarter.instance = instance__		}_	};set,the,restarter,instance,useful,for,testing,param,instance,the,instance,to,set;static,void,set,instance,restarter,instance,synchronized,restarter,instance,instance
Restarter -> static void setInstance(Restarter instance);1527837989;Set the restarter instance (useful for testing)._@param instance the instance to set;static void setInstance(Restarter instance) {_		synchronized (INSTANCE_MONITOR) {_			Restarter.instance = instance__		}_	};set,the,restarter,instance,useful,for,testing,param,instance,the,instance,to,set;static,void,set,instance,restarter,instance,synchronized,restarter,instance,instance
Restarter -> public URL[] getInitialUrls();1507173536;Return the initial set of URLs as configured by the {@link RestartInitializer}._@return the initial URLs or {@code null};public URL[] getInitialUrls() {_		return this.initialUrls__	};return,the,initial,set,of,urls,as,configured,by,the,link,restart,initializer,return,the,initial,urls,or,code,null;public,url,get,initial,urls,return,this,initial,urls
Restarter -> public URL[] getInitialUrls();1512760426;Return the initial set of URLs as configured by the {@link RestartInitializer}._@return the initial URLs or {@code null};public URL[] getInitialUrls() {_		return this.initialUrls__	};return,the,initial,set,of,urls,as,configured,by,the,link,restart,initializer,return,the,initial,urls,or,code,null;public,url,get,initial,urls,return,this,initial,urls
Restarter -> public URL[] getInitialUrls();1513163939;Return the initial set of URLs as configured by the {@link RestartInitializer}._@return the initial URLs or {@code null};public URL[] getInitialUrls() {_		return this.initialUrls__	};return,the,initial,set,of,urls,as,configured,by,the,link,restart,initializer,return,the,initial,urls,or,code,null;public,url,get,initial,urls,return,this,initial,urls
Restarter -> public URL[] getInitialUrls();1513164616;Return the initial set of URLs as configured by the {@link RestartInitializer}._@return the initial URLs or {@code null};public URL[] getInitialUrls() {_		return this.initialUrls__	};return,the,initial,set,of,urls,as,configured,by,the,link,restart,initializer,return,the,initial,urls,or,code,null;public,url,get,initial,urls,return,this,initial,urls
Restarter -> public URL[] getInitialUrls();1513204375;Return the initial set of URLs as configured by the {@link RestartInitializer}._@return the initial URLs or {@code null};public URL[] getInitialUrls() {_		return this.initialUrls__	};return,the,initial,set,of,urls,as,configured,by,the,link,restart,initializer,return,the,initial,urls,or,code,null;public,url,get,initial,urls,return,this,initial,urls
Restarter -> public URL[] getInitialUrls();1519362690;Return the initial set of URLs as configured by the {@link RestartInitializer}._@return the initial URLs or {@code null};public URL[] getInitialUrls() {_		return this.initialUrls__	};return,the,initial,set,of,urls,as,configured,by,the,link,restart,initializer,return,the,initial,urls,or,code,null;public,url,get,initial,urls,return,this,initial,urls
Restarter -> public URL[] getInitialUrls();1522687863;Return the initial set of URLs as configured by the {@link RestartInitializer}._@return the initial URLs or {@code null};public URL[] getInitialUrls() {_		return this.initialUrls__	};return,the,initial,set,of,urls,as,configured,by,the,link,restart,initializer,return,the,initial,urls,or,code,null;public,url,get,initial,urls,return,this,initial,urls
Restarter -> public URL[] getInitialUrls();1527837989;Return the initial set of URLs as configured by the {@link RestartInitializer}._@return the initial URLs or {@code null};public URL[] getInitialUrls() {_		return this.initialUrls__	};return,the,initial,set,of,urls,as,configured,by,the,link,restart,initializer,return,the,initial,urls,or,code,null;public,url,get,initial,urls,return,this,initial,urls
Restarter -> public static Restarter getInstance();1507173536;Return the active {@link Restarter} instance. Cannot be called before_{@link #initialize(String[]) initialization}._@return the restarter;public static Restarter getInstance() {_		synchronized (INSTANCE_MONITOR) {_			Assert.state(instance != null, "Restarter has not been initialized")__			return instance__		}_	};return,the,active,link,restarter,instance,cannot,be,called,before,link,initialize,string,initialization,return,the,restarter;public,static,restarter,get,instance,synchronized,assert,state,instance,null,restarter,has,not,been,initialized,return,instance
Restarter -> public static Restarter getInstance();1512760426;Return the active {@link Restarter} instance. Cannot be called before_{@link #initialize(String[]) initialization}._@return the restarter;public static Restarter getInstance() {_		synchronized (INSTANCE_MONITOR) {_			Assert.state(instance != null, "Restarter has not been initialized")__			return instance__		}_	};return,the,active,link,restarter,instance,cannot,be,called,before,link,initialize,string,initialization,return,the,restarter;public,static,restarter,get,instance,synchronized,assert,state,instance,null,restarter,has,not,been,initialized,return,instance
Restarter -> public static Restarter getInstance();1513163939;Return the active {@link Restarter} instance. Cannot be called before_{@link #initialize(String[]) initialization}._@return the restarter;public static Restarter getInstance() {_		synchronized (INSTANCE_MONITOR) {_			Assert.state(instance != null, "Restarter has not been initialized")__			return instance__		}_	};return,the,active,link,restarter,instance,cannot,be,called,before,link,initialize,string,initialization,return,the,restarter;public,static,restarter,get,instance,synchronized,assert,state,instance,null,restarter,has,not,been,initialized,return,instance
Restarter -> public static Restarter getInstance();1513164616;Return the active {@link Restarter} instance. Cannot be called before_{@link #initialize(String[]) initialization}._@return the restarter;public static Restarter getInstance() {_		synchronized (INSTANCE_MONITOR) {_			Assert.state(instance != null, "Restarter has not been initialized")__			return instance__		}_	};return,the,active,link,restarter,instance,cannot,be,called,before,link,initialize,string,initialization,return,the,restarter;public,static,restarter,get,instance,synchronized,assert,state,instance,null,restarter,has,not,been,initialized,return,instance
Restarter -> public static Restarter getInstance();1513204375;Return the active {@link Restarter} instance. Cannot be called before_{@link #initialize(String[]) initialization}._@return the restarter;public static Restarter getInstance() {_		synchronized (INSTANCE_MONITOR) {_			Assert.state(instance != null, "Restarter has not been initialized")__			return instance__		}_	};return,the,active,link,restarter,instance,cannot,be,called,before,link,initialize,string,initialization,return,the,restarter;public,static,restarter,get,instance,synchronized,assert,state,instance,null,restarter,has,not,been,initialized,return,instance
Restarter -> public static Restarter getInstance();1519362690;Return the active {@link Restarter} instance. Cannot be called before_{@link #initialize(String[]) initialization}._@return the restarter;public static Restarter getInstance() {_		synchronized (INSTANCE_MONITOR) {_			Assert.state(instance != null, "Restarter has not been initialized")__			return instance__		}_	};return,the,active,link,restarter,instance,cannot,be,called,before,link,initialize,string,initialization,return,the,restarter;public,static,restarter,get,instance,synchronized,assert,state,instance,null,restarter,has,not,been,initialized,return,instance
Restarter -> public static Restarter getInstance();1522687863;Return the active {@link Restarter} instance. Cannot be called before_{@link #initialize(String[]) initialization}._@return the restarter;public static Restarter getInstance() {_		synchronized (INSTANCE_MONITOR) {_			Assert.state(instance != null, "Restarter has not been initialized")__			return instance__		}_	};return,the,active,link,restarter,instance,cannot,be,called,before,link,initialize,string,initialization,return,the,restarter;public,static,restarter,get,instance,synchronized,assert,state,instance,null,restarter,has,not,been,initialized,return,instance
Restarter -> public static Restarter getInstance();1527837989;Return the active {@link Restarter} instance. Cannot be called before_{@link #initialize(String[]) initialization}._@return the restarter;public static Restarter getInstance() {_		synchronized (INSTANCE_MONITOR) {_			Assert.state(instance != null, "Restarter has not been initialized")__			return instance__		}_	};return,the,active,link,restarter,instance,cannot,be,called,before,link,initialize,string,initialization,return,the,restarter;public,static,restarter,get,instance,synchronized,assert,state,instance,null,restarter,has,not,been,initialized,return,instance
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup);1507173536;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup) {_		initialize(args, forceReferenceCleanup, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,initialize,args,force,reference,cleanup,new,default,restart,initializer
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup);1512760426;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup) {_		initialize(args, forceReferenceCleanup, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,initialize,args,force,reference,cleanup,new,default,restart,initializer
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup);1513163939;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup) {_		initialize(args, forceReferenceCleanup, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,initialize,args,force,reference,cleanup,new,default,restart,initializer
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup);1513164616;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup) {_		initialize(args, forceReferenceCleanup, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,initialize,args,force,reference,cleanup,new,default,restart,initializer
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup);1513204375;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup) {_		initialize(args, forceReferenceCleanup, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,initialize,args,force,reference,cleanup,new,default,restart,initializer
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup);1519362690;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup) {_		initialize(args, forceReferenceCleanup, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,initialize,args,force,reference,cleanup,new,default,restart,initializer
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup);1522687863;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup) {_		initialize(args, forceReferenceCleanup, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,initialize,args,force,reference,cleanup,new,default,restart,initializer
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup);1527837989;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, boolean forceReferenceCleanup) {_		initialize(args, forceReferenceCleanup, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,boolean,force,reference,cleanup,initialize,args,force,reference,cleanup,new,default,restart,initializer
Restarter -> public static void clearInstance();1507173536;Clear the instance. Primarily provided for tests and not usually used in_application code.;public static void clearInstance() {_		synchronized (INSTANCE_MONITOR) {_			instance = null__		}_	};clear,the,instance,primarily,provided,for,tests,and,not,usually,used,in,application,code;public,static,void,clear,instance,synchronized,instance,null
Restarter -> public static void clearInstance();1512760426;Clear the instance. Primarily provided for tests and not usually used in_application code.;public static void clearInstance() {_		synchronized (INSTANCE_MONITOR) {_			instance = null__		}_	};clear,the,instance,primarily,provided,for,tests,and,not,usually,used,in,application,code;public,static,void,clear,instance,synchronized,instance,null
Restarter -> public static void clearInstance();1513163939;Clear the instance. Primarily provided for tests and not usually used in_application code.;public static void clearInstance() {_		synchronized (INSTANCE_MONITOR) {_			instance = null__		}_	};clear,the,instance,primarily,provided,for,tests,and,not,usually,used,in,application,code;public,static,void,clear,instance,synchronized,instance,null
Restarter -> public static void clearInstance();1513164616;Clear the instance. Primarily provided for tests and not usually used in_application code.;public static void clearInstance() {_		synchronized (INSTANCE_MONITOR) {_			instance = null__		}_	};clear,the,instance,primarily,provided,for,tests,and,not,usually,used,in,application,code;public,static,void,clear,instance,synchronized,instance,null
Restarter -> public static void clearInstance();1513204375;Clear the instance. Primarily provided for tests and not usually used in_application code.;public static void clearInstance() {_		synchronized (INSTANCE_MONITOR) {_			instance = null__		}_	};clear,the,instance,primarily,provided,for,tests,and,not,usually,used,in,application,code;public,static,void,clear,instance,synchronized,instance,null
Restarter -> public static void clearInstance();1519362690;Clear the instance. Primarily provided for tests and not usually used in_application code.;public static void clearInstance() {_		synchronized (INSTANCE_MONITOR) {_			instance = null__		}_	};clear,the,instance,primarily,provided,for,tests,and,not,usually,used,in,application,code;public,static,void,clear,instance,synchronized,instance,null
Restarter -> public static void clearInstance();1522687863;Clear the instance. Primarily provided for tests and not usually used in_application code.;public static void clearInstance() {_		synchronized (INSTANCE_MONITOR) {_			instance = null__		}_	};clear,the,instance,primarily,provided,for,tests,and,not,usually,used,in,application,code;public,static,void,clear,instance,synchronized,instance,null
Restarter -> public static void clearInstance();1527837989;Clear the instance. Primarily provided for tests and not usually used in_application code.;public static void clearInstance() {_		synchronized (INSTANCE_MONITOR) {_			instance = null__		}_	};clear,the,instance,primarily,provided,for,tests,and,not,usually,used,in,application,code;public,static,void,clear,instance,synchronized,instance,null
Restarter -> public void restart(FailureHandler failureHandler);1512760426;Restart the running application._@param failureHandler a failure handler to deal with application that doesn't start;public void restart(FailureHandler failureHandler) {_		if (!this.enabled) {_			this.logger.debug("Application restart is disabled")__			return__		}_		this.logger.debug("Restarting application")__		getLeakSafeThread().call(() -> {_			Restarter.this.stop()__			Restarter.this.start(failureHandler)__			return null__		})__	};restart,the,running,application,param,failure,handler,a,failure,handler,to,deal,with,application,that,doesn,t,start;public,void,restart,failure,handler,failure,handler,if,this,enabled,this,logger,debug,application,restart,is,disabled,return,this,logger,debug,restarting,application,get,leak,safe,thread,call,restarter,this,stop,restarter,this,start,failure,handler,return,null
Restarter -> public void restart(FailureHandler failureHandler);1513163939;Restart the running application._@param failureHandler a failure handler to deal with application that doesn't start;public void restart(FailureHandler failureHandler) {_		if (!this.enabled) {_			this.logger.debug("Application restart is disabled")__			return__		}_		this.logger.debug("Restarting application")__		getLeakSafeThread().call(() -> {_			Restarter.this.stop()__			Restarter.this.start(failureHandler)__			return null__		})__	};restart,the,running,application,param,failure,handler,a,failure,handler,to,deal,with,application,that,doesn,t,start;public,void,restart,failure,handler,failure,handler,if,this,enabled,this,logger,debug,application,restart,is,disabled,return,this,logger,debug,restarting,application,get,leak,safe,thread,call,restarter,this,stop,restarter,this,start,failure,handler,return,null
Restarter -> public void restart(FailureHandler failureHandler);1513164616;Restart the running application._@param failureHandler a failure handler to deal with application that doesn't start;public void restart(FailureHandler failureHandler) {_		if (!this.enabled) {_			this.logger.debug("Application restart is disabled")__			return__		}_		this.logger.debug("Restarting application")__		getLeakSafeThread().call(() -> {_			Restarter.this.stop()__			Restarter.this.start(failureHandler)__			return null__		})__	};restart,the,running,application,param,failure,handler,a,failure,handler,to,deal,with,application,that,doesn,t,start;public,void,restart,failure,handler,failure,handler,if,this,enabled,this,logger,debug,application,restart,is,disabled,return,this,logger,debug,restarting,application,get,leak,safe,thread,call,restarter,this,stop,restarter,this,start,failure,handler,return,null
Restarter -> public void restart(FailureHandler failureHandler);1513204375;Restart the running application._@param failureHandler a failure handler to deal with application that doesn't start;public void restart(FailureHandler failureHandler) {_		if (!this.enabled) {_			this.logger.debug("Application restart is disabled")__			return__		}_		this.logger.debug("Restarting application")__		getLeakSafeThread().call(() -> {_			Restarter.this.stop()__			Restarter.this.start(failureHandler)__			return null__		})__	};restart,the,running,application,param,failure,handler,a,failure,handler,to,deal,with,application,that,doesn,t,start;public,void,restart,failure,handler,failure,handler,if,this,enabled,this,logger,debug,application,restart,is,disabled,return,this,logger,debug,restarting,application,get,leak,safe,thread,call,restarter,this,stop,restarter,this,start,failure,handler,return,null
Restarter -> public void restart(FailureHandler failureHandler);1519362690;Restart the running application._@param failureHandler a failure handler to deal with application that doesn't start;public void restart(FailureHandler failureHandler) {_		if (!this.enabled) {_			this.logger.debug("Application restart is disabled")__			return__		}_		this.logger.debug("Restarting application")__		getLeakSafeThread().call(() -> {_			Restarter.this.stop()__			Restarter.this.start(failureHandler)__			return null__		})__	};restart,the,running,application,param,failure,handler,a,failure,handler,to,deal,with,application,that,doesn,t,start;public,void,restart,failure,handler,failure,handler,if,this,enabled,this,logger,debug,application,restart,is,disabled,return,this,logger,debug,restarting,application,get,leak,safe,thread,call,restarter,this,stop,restarter,this,start,failure,handler,return,null
Restarter -> public void restart(FailureHandler failureHandler);1522687863;Restart the running application._@param failureHandler a failure handler to deal with application that doesn't start;public void restart(FailureHandler failureHandler) {_		if (!this.enabled) {_			this.logger.debug("Application restart is disabled")__			return__		}_		this.logger.debug("Restarting application")__		getLeakSafeThread().call(() -> {_			Restarter.this.stop()__			Restarter.this.start(failureHandler)__			return null__		})__	};restart,the,running,application,param,failure,handler,a,failure,handler,to,deal,with,application,that,doesn,t,start;public,void,restart,failure,handler,failure,handler,if,this,enabled,this,logger,debug,application,restart,is,disabled,return,this,logger,debug,restarting,application,get,leak,safe,thread,call,restarter,this,stop,restarter,this,start,failure,handler,return,null
Restarter -> public void restart(FailureHandler failureHandler);1527837989;Restart the running application._@param failureHandler a failure handler to deal with application that doesn't start;public void restart(FailureHandler failureHandler) {_		if (!this.enabled) {_			this.logger.debug("Application restart is disabled")__			return__		}_		this.logger.debug("Restarting application")__		getLeakSafeThread().call(() -> {_			Restarter.this.stop()__			Restarter.this.start(failureHandler)__			return null__		})__	};restart,the,running,application,param,failure,handler,a,failure,handler,to,deal,with,application,that,doesn,t,start;public,void,restart,failure,handler,failure,handler,if,this,enabled,this,logger,debug,application,restart,is,disabled,return,this,logger,debug,restarting,application,get,leak,safe,thread,call,restarter,this,stop,restarter,this,start,failure,handler,return,null
Restarter -> protected Throwable relaunch(ClassLoader classLoader) throws Exception;1507173536;Relaunch the application using the specified classloader._@param classLoader the classloader to use_@return any exception that caused the launch to fail or {@code null}_@throws Exception in case of errors;protected Throwable relaunch(ClassLoader classLoader) throws Exception {_		RestartLauncher launcher = new RestartLauncher(classLoader, this.mainClassName,_				this.args, this.exceptionHandler)__		launcher.start()__		launcher.join()__		return launcher.getError()__	};relaunch,the,application,using,the,specified,classloader,param,class,loader,the,classloader,to,use,return,any,exception,that,caused,the,launch,to,fail,or,code,null,throws,exception,in,case,of,errors;protected,throwable,relaunch,class,loader,class,loader,throws,exception,restart,launcher,launcher,new,restart,launcher,class,loader,this,main,class,name,this,args,this,exception,handler,launcher,start,launcher,join,return,launcher,get,error
Restarter -> protected Throwable relaunch(ClassLoader classLoader) throws Exception;1512760426;Relaunch the application using the specified classloader._@param classLoader the classloader to use_@return any exception that caused the launch to fail or {@code null}_@throws Exception in case of errors;protected Throwable relaunch(ClassLoader classLoader) throws Exception {_		RestartLauncher launcher = new RestartLauncher(classLoader, this.mainClassName,_				this.args, this.exceptionHandler)__		launcher.start()__		launcher.join()__		return launcher.getError()__	};relaunch,the,application,using,the,specified,classloader,param,class,loader,the,classloader,to,use,return,any,exception,that,caused,the,launch,to,fail,or,code,null,throws,exception,in,case,of,errors;protected,throwable,relaunch,class,loader,class,loader,throws,exception,restart,launcher,launcher,new,restart,launcher,class,loader,this,main,class,name,this,args,this,exception,handler,launcher,start,launcher,join,return,launcher,get,error
Restarter -> protected Throwable relaunch(ClassLoader classLoader) throws Exception;1513163939;Relaunch the application using the specified classloader._@param classLoader the classloader to use_@return any exception that caused the launch to fail or {@code null}_@throws Exception in case of errors;protected Throwable relaunch(ClassLoader classLoader) throws Exception {_		RestartLauncher launcher = new RestartLauncher(classLoader, this.mainClassName,_				this.args, this.exceptionHandler)__		launcher.start()__		launcher.join()__		return launcher.getError()__	};relaunch,the,application,using,the,specified,classloader,param,class,loader,the,classloader,to,use,return,any,exception,that,caused,the,launch,to,fail,or,code,null,throws,exception,in,case,of,errors;protected,throwable,relaunch,class,loader,class,loader,throws,exception,restart,launcher,launcher,new,restart,launcher,class,loader,this,main,class,name,this,args,this,exception,handler,launcher,start,launcher,join,return,launcher,get,error
Restarter -> protected Throwable relaunch(ClassLoader classLoader) throws Exception;1513164616;Relaunch the application using the specified classloader._@param classLoader the classloader to use_@return any exception that caused the launch to fail or {@code null}_@throws Exception in case of errors;protected Throwable relaunch(ClassLoader classLoader) throws Exception {_		RestartLauncher launcher = new RestartLauncher(classLoader, this.mainClassName,_				this.args, this.exceptionHandler)__		launcher.start()__		launcher.join()__		return launcher.getError()__	};relaunch,the,application,using,the,specified,classloader,param,class,loader,the,classloader,to,use,return,any,exception,that,caused,the,launch,to,fail,or,code,null,throws,exception,in,case,of,errors;protected,throwable,relaunch,class,loader,class,loader,throws,exception,restart,launcher,launcher,new,restart,launcher,class,loader,this,main,class,name,this,args,this,exception,handler,launcher,start,launcher,join,return,launcher,get,error
Restarter -> protected Throwable relaunch(ClassLoader classLoader) throws Exception;1513204375;Relaunch the application using the specified classloader._@param classLoader the classloader to use_@return any exception that caused the launch to fail or {@code null}_@throws Exception in case of errors;protected Throwable relaunch(ClassLoader classLoader) throws Exception {_		RestartLauncher launcher = new RestartLauncher(classLoader, this.mainClassName,_				this.args, this.exceptionHandler)__		launcher.start()__		launcher.join()__		return launcher.getError()__	};relaunch,the,application,using,the,specified,classloader,param,class,loader,the,classloader,to,use,return,any,exception,that,caused,the,launch,to,fail,or,code,null,throws,exception,in,case,of,errors;protected,throwable,relaunch,class,loader,class,loader,throws,exception,restart,launcher,launcher,new,restart,launcher,class,loader,this,main,class,name,this,args,this,exception,handler,launcher,start,launcher,join,return,launcher,get,error
Restarter -> protected Throwable relaunch(ClassLoader classLoader) throws Exception;1519362690;Relaunch the application using the specified classloader._@param classLoader the classloader to use_@return any exception that caused the launch to fail or {@code null}_@throws Exception in case of errors;protected Throwable relaunch(ClassLoader classLoader) throws Exception {_		RestartLauncher launcher = new RestartLauncher(classLoader, this.mainClassName,_				this.args, this.exceptionHandler)__		launcher.start()__		launcher.join()__		return launcher.getError()__	};relaunch,the,application,using,the,specified,classloader,param,class,loader,the,classloader,to,use,return,any,exception,that,caused,the,launch,to,fail,or,code,null,throws,exception,in,case,of,errors;protected,throwable,relaunch,class,loader,class,loader,throws,exception,restart,launcher,launcher,new,restart,launcher,class,loader,this,main,class,name,this,args,this,exception,handler,launcher,start,launcher,join,return,launcher,get,error
Restarter -> protected Throwable relaunch(ClassLoader classLoader) throws Exception;1522687863;Relaunch the application using the specified classloader._@param classLoader the classloader to use_@return any exception that caused the launch to fail or {@code null}_@throws Exception in case of errors;protected Throwable relaunch(ClassLoader classLoader) throws Exception {_		RestartLauncher launcher = new RestartLauncher(classLoader, this.mainClassName,_				this.args, this.exceptionHandler)__		launcher.start()__		launcher.join()__		return launcher.getError()__	};relaunch,the,application,using,the,specified,classloader,param,class,loader,the,classloader,to,use,return,any,exception,that,caused,the,launch,to,fail,or,code,null,throws,exception,in,case,of,errors;protected,throwable,relaunch,class,loader,class,loader,throws,exception,restart,launcher,launcher,new,restart,launcher,class,loader,this,main,class,name,this,args,this,exception,handler,launcher,start,launcher,join,return,launcher,get,error
Restarter -> protected Throwable relaunch(ClassLoader classLoader) throws Exception;1527837989;Relaunch the application using the specified classloader._@param classLoader the classloader to use_@return any exception that caused the launch to fail or {@code null}_@throws Exception in case of errors;protected Throwable relaunch(ClassLoader classLoader) throws Exception {_		RestartLauncher launcher = new RestartLauncher(classLoader, this.mainClassName,_				this.args, this.exceptionHandler)__		launcher.start()__		launcher.join()__		return launcher.getError()__	};relaunch,the,application,using,the,specified,classloader,param,class,loader,the,classloader,to,use,return,any,exception,that,caused,the,launch,to,fail,or,code,null,throws,exception,in,case,of,errors;protected,throwable,relaunch,class,loader,class,loader,throws,exception,restart,launcher,launcher,new,restart,launcher,class,loader,this,main,class,name,this,args,this,exception,handler,launcher,start,launcher,join,return,launcher,get,error
Restarter -> final static void setInstance(Restarter instance);1507173536;Set the restarter instance (useful for testing)._@param instance the instance to set;final static void setInstance(Restarter instance) {_		synchronized (INSTANCE_MONITOR) {_			Restarter.instance = instance__		}_	};set,the,restarter,instance,useful,for,testing,param,instance,the,instance,to,set;final,static,void,set,instance,restarter,instance,synchronized,restarter,instance,instance
Restarter -> final static void setInstance(Restarter instance);1512760426;Set the restarter instance (useful for testing)._@param instance the instance to set;final static void setInstance(Restarter instance) {_		synchronized (INSTANCE_MONITOR) {_			Restarter.instance = instance__		}_	};set,the,restarter,instance,useful,for,testing,param,instance,the,instance,to,set;final,static,void,set,instance,restarter,instance,synchronized,restarter,instance,instance
Restarter -> protected void stop() throws Exception;1507173536;Stop the application._@throws Exception in case of errors;protected void stop() throws Exception {_		this.logger.debug("Stopping application")__		this.stopLock.lock()__		try {_			for (ConfigurableApplicationContext context : this.rootContexts) {_				context.close()__				this.rootContexts.remove(context)__			}_			cleanupCaches()__			if (this.forceReferenceCleanup) {_				forceReferenceCleanup()__			}_		}_		finally {_			this.stopLock.unlock()__		}_		System.gc()__		System.runFinalization()__	};stop,the,application,throws,exception,in,case,of,errors;protected,void,stop,throws,exception,this,logger,debug,stopping,application,this,stop,lock,lock,try,for,configurable,application,context,context,this,root,contexts,context,close,this,root,contexts,remove,context,cleanup,caches,if,this,force,reference,cleanup,force,reference,cleanup,finally,this,stop,lock,unlock,system,gc,system,run,finalization
Restarter -> protected void stop() throws Exception;1512760426;Stop the application._@throws Exception in case of errors;protected void stop() throws Exception {_		this.logger.debug("Stopping application")__		this.stopLock.lock()__		try {_			for (ConfigurableApplicationContext context : this.rootContexts) {_				context.close()__				this.rootContexts.remove(context)__			}_			cleanupCaches()__			if (this.forceReferenceCleanup) {_				forceReferenceCleanup()__			}_		}_		finally {_			this.stopLock.unlock()__		}_		System.gc()__		System.runFinalization()__	};stop,the,application,throws,exception,in,case,of,errors;protected,void,stop,throws,exception,this,logger,debug,stopping,application,this,stop,lock,lock,try,for,configurable,application,context,context,this,root,contexts,context,close,this,root,contexts,remove,context,cleanup,caches,if,this,force,reference,cleanup,force,reference,cleanup,finally,this,stop,lock,unlock,system,gc,system,run,finalization
Restarter -> protected void stop() throws Exception;1513163939;Stop the application._@throws Exception in case of errors;protected void stop() throws Exception {_		this.logger.debug("Stopping application")__		this.stopLock.lock()__		try {_			for (ConfigurableApplicationContext context : this.rootContexts) {_				context.close()__				this.rootContexts.remove(context)__			}_			cleanupCaches()__			if (this.forceReferenceCleanup) {_				forceReferenceCleanup()__			}_		}_		finally {_			this.stopLock.unlock()__		}_		System.gc()__		System.runFinalization()__	};stop,the,application,throws,exception,in,case,of,errors;protected,void,stop,throws,exception,this,logger,debug,stopping,application,this,stop,lock,lock,try,for,configurable,application,context,context,this,root,contexts,context,close,this,root,contexts,remove,context,cleanup,caches,if,this,force,reference,cleanup,force,reference,cleanup,finally,this,stop,lock,unlock,system,gc,system,run,finalization
Restarter -> protected void stop() throws Exception;1513164616;Stop the application._@throws Exception in case of errors;protected void stop() throws Exception {_		this.logger.debug("Stopping application")__		this.stopLock.lock()__		try {_			for (ConfigurableApplicationContext context : this.rootContexts) {_				context.close()__				this.rootContexts.remove(context)__			}_			cleanupCaches()__			if (this.forceReferenceCleanup) {_				forceReferenceCleanup()__			}_		}_		finally {_			this.stopLock.unlock()__		}_		System.gc()__		System.runFinalization()__	};stop,the,application,throws,exception,in,case,of,errors;protected,void,stop,throws,exception,this,logger,debug,stopping,application,this,stop,lock,lock,try,for,configurable,application,context,context,this,root,contexts,context,close,this,root,contexts,remove,context,cleanup,caches,if,this,force,reference,cleanup,force,reference,cleanup,finally,this,stop,lock,unlock,system,gc,system,run,finalization
Restarter -> protected void stop() throws Exception;1513204375;Stop the application._@throws Exception in case of errors;protected void stop() throws Exception {_		this.logger.debug("Stopping application")__		this.stopLock.lock()__		try {_			for (ConfigurableApplicationContext context : this.rootContexts) {_				context.close()__				this.rootContexts.remove(context)__			}_			cleanupCaches()__			if (this.forceReferenceCleanup) {_				forceReferenceCleanup()__			}_		}_		finally {_			this.stopLock.unlock()__		}_		System.gc()__		System.runFinalization()__	};stop,the,application,throws,exception,in,case,of,errors;protected,void,stop,throws,exception,this,logger,debug,stopping,application,this,stop,lock,lock,try,for,configurable,application,context,context,this,root,contexts,context,close,this,root,contexts,remove,context,cleanup,caches,if,this,force,reference,cleanup,force,reference,cleanup,finally,this,stop,lock,unlock,system,gc,system,run,finalization
Restarter -> protected void stop() throws Exception;1519362690;Stop the application._@throws Exception in case of errors;protected void stop() throws Exception {_		this.logger.debug("Stopping application")__		this.stopLock.lock()__		try {_			for (ConfigurableApplicationContext context : this.rootContexts) {_				context.close()__				this.rootContexts.remove(context)__			}_			cleanupCaches()__			if (this.forceReferenceCleanup) {_				forceReferenceCleanup()__			}_		}_		finally {_			this.stopLock.unlock()__		}_		System.gc()__		System.runFinalization()__	};stop,the,application,throws,exception,in,case,of,errors;protected,void,stop,throws,exception,this,logger,debug,stopping,application,this,stop,lock,lock,try,for,configurable,application,context,context,this,root,contexts,context,close,this,root,contexts,remove,context,cleanup,caches,if,this,force,reference,cleanup,force,reference,cleanup,finally,this,stop,lock,unlock,system,gc,system,run,finalization
Restarter -> protected void stop() throws Exception;1522687863;Stop the application._@throws Exception in case of errors;protected void stop() throws Exception {_		this.logger.debug("Stopping application")__		this.stopLock.lock()__		try {_			for (ConfigurableApplicationContext context : this.rootContexts) {_				context.close()__				this.rootContexts.remove(context)__			}_			cleanupCaches()__			if (this.forceReferenceCleanup) {_				forceReferenceCleanup()__			}_		}_		finally {_			this.stopLock.unlock()__		}_		System.gc()__		System.runFinalization()__	};stop,the,application,throws,exception,in,case,of,errors;protected,void,stop,throws,exception,this,logger,debug,stopping,application,this,stop,lock,lock,try,for,configurable,application,context,context,this,root,contexts,context,close,this,root,contexts,remove,context,cleanup,caches,if,this,force,reference,cleanup,force,reference,cleanup,finally,this,stop,lock,unlock,system,gc,system,run,finalization
Restarter -> protected void stop() throws Exception;1527837989;Stop the application._@throws Exception in case of errors;protected void stop() throws Exception {_		this.logger.debug("Stopping application")__		this.stopLock.lock()__		try {_			for (ConfigurableApplicationContext context : this.rootContexts) {_				context.close()__				this.rootContexts.remove(context)__			}_			cleanupCaches()__			if (this.forceReferenceCleanup) {_				forceReferenceCleanup()__			}_		}_		finally {_			this.stopLock.unlock()__		}_		System.gc()__		System.runFinalization()__	};stop,the,application,throws,exception,in,case,of,errors;protected,void,stop,throws,exception,this,logger,debug,stopping,application,this,stop,lock,lock,try,for,configurable,application,context,context,this,root,contexts,context,close,this,root,contexts,remove,context,cleanup,caches,if,this,force,reference,cleanup,force,reference,cleanup,finally,this,stop,lock,unlock,system,gc,system,run,finalization
Restarter -> private void setEnabled(boolean enabled);1507173536;Set if restart support is enabled._@param enabled if restart support is enabled;private void setEnabled(boolean enabled) {_		this.enabled = enabled__	};set,if,restart,support,is,enabled,param,enabled,if,restart,support,is,enabled;private,void,set,enabled,boolean,enabled,this,enabled,enabled
Restarter -> private void setEnabled(boolean enabled);1512760426;Set if restart support is enabled._@param enabled if restart support is enabled;private void setEnabled(boolean enabled) {_		this.enabled = enabled__	};set,if,restart,support,is,enabled,param,enabled,if,restart,support,is,enabled;private,void,set,enabled,boolean,enabled,this,enabled,enabled
Restarter -> private void setEnabled(boolean enabled);1513163939;Set if restart support is enabled._@param enabled if restart support is enabled;private void setEnabled(boolean enabled) {_		this.enabled = enabled__	};set,if,restart,support,is,enabled,param,enabled,if,restart,support,is,enabled;private,void,set,enabled,boolean,enabled,this,enabled,enabled
Restarter -> private void setEnabled(boolean enabled);1513164616;Set if restart support is enabled._@param enabled if restart support is enabled;private void setEnabled(boolean enabled) {_		this.enabled = enabled__	};set,if,restart,support,is,enabled,param,enabled,if,restart,support,is,enabled;private,void,set,enabled,boolean,enabled,this,enabled,enabled
Restarter -> private void setEnabled(boolean enabled);1513204375;Set if restart support is enabled._@param enabled if restart support is enabled;private void setEnabled(boolean enabled) {_		this.enabled = enabled__	};set,if,restart,support,is,enabled,param,enabled,if,restart,support,is,enabled;private,void,set,enabled,boolean,enabled,this,enabled,enabled
Restarter -> private void setEnabled(boolean enabled);1519362690;Set if restart support is enabled._@param enabled if restart support is enabled;private void setEnabled(boolean enabled) {_		this.enabled = enabled__	};set,if,restart,support,is,enabled,param,enabled,if,restart,support,is,enabled;private,void,set,enabled,boolean,enabled,this,enabled,enabled
Restarter -> private void setEnabled(boolean enabled);1522687863;Set if restart support is enabled._@param enabled if restart support is enabled;private void setEnabled(boolean enabled) {_		this.enabled = enabled__	};set,if,restart,support,is,enabled,param,enabled,if,restart,support,is,enabled;private,void,set,enabled,boolean,enabled,this,enabled,enabled
Restarter -> private void setEnabled(boolean enabled);1527837989;Set if restart support is enabled._@param enabled if restart support is enabled;private void setEnabled(boolean enabled) {_		this.enabled = enabled__	};set,if,restart,support,is,enabled,param,enabled,if,restart,support,is,enabled;private,void,set,enabled,boolean,enabled,this,enabled,enabled
Restarter -> public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles);1507173536;Add additional {@link ClassLoaderFiles} to be included in the next restart._@param classLoaderFiles the files to add;public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles) {_		Assert.notNull(classLoaderFiles, "ClassLoaderFiles must not be null")__		this.classLoaderFiles.addAll(classLoaderFiles)__	};add,additional,link,class,loader,files,to,be,included,in,the,next,restart,param,class,loader,files,the,files,to,add;public,void,add,class,loader,files,class,loader,files,class,loader,files,assert,not,null,class,loader,files,class,loader,files,must,not,be,null,this,class,loader,files,add,all,class,loader,files
Restarter -> public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles);1512760426;Add additional {@link ClassLoaderFiles} to be included in the next restart._@param classLoaderFiles the files to add;public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles) {_		Assert.notNull(classLoaderFiles, "ClassLoaderFiles must not be null")__		this.classLoaderFiles.addAll(classLoaderFiles)__	};add,additional,link,class,loader,files,to,be,included,in,the,next,restart,param,class,loader,files,the,files,to,add;public,void,add,class,loader,files,class,loader,files,class,loader,files,assert,not,null,class,loader,files,class,loader,files,must,not,be,null,this,class,loader,files,add,all,class,loader,files
Restarter -> public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles);1513163939;Add additional {@link ClassLoaderFiles} to be included in the next restart._@param classLoaderFiles the files to add;public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles) {_		Assert.notNull(classLoaderFiles, "ClassLoaderFiles must not be null")__		this.classLoaderFiles.addAll(classLoaderFiles)__	};add,additional,link,class,loader,files,to,be,included,in,the,next,restart,param,class,loader,files,the,files,to,add;public,void,add,class,loader,files,class,loader,files,class,loader,files,assert,not,null,class,loader,files,class,loader,files,must,not,be,null,this,class,loader,files,add,all,class,loader,files
Restarter -> public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles);1513164616;Add additional {@link ClassLoaderFiles} to be included in the next restart._@param classLoaderFiles the files to add;public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles) {_		Assert.notNull(classLoaderFiles, "ClassLoaderFiles must not be null")__		this.classLoaderFiles.addAll(classLoaderFiles)__	};add,additional,link,class,loader,files,to,be,included,in,the,next,restart,param,class,loader,files,the,files,to,add;public,void,add,class,loader,files,class,loader,files,class,loader,files,assert,not,null,class,loader,files,class,loader,files,must,not,be,null,this,class,loader,files,add,all,class,loader,files
Restarter -> public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles);1513204375;Add additional {@link ClassLoaderFiles} to be included in the next restart._@param classLoaderFiles the files to add;public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles) {_		Assert.notNull(classLoaderFiles, "ClassLoaderFiles must not be null")__		this.classLoaderFiles.addAll(classLoaderFiles)__	};add,additional,link,class,loader,files,to,be,included,in,the,next,restart,param,class,loader,files,the,files,to,add;public,void,add,class,loader,files,class,loader,files,class,loader,files,assert,not,null,class,loader,files,class,loader,files,must,not,be,null,this,class,loader,files,add,all,class,loader,files
Restarter -> public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles);1519362690;Add additional {@link ClassLoaderFiles} to be included in the next restart._@param classLoaderFiles the files to add;public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles) {_		Assert.notNull(classLoaderFiles, "ClassLoaderFiles must not be null")__		this.classLoaderFiles.addAll(classLoaderFiles)__	};add,additional,link,class,loader,files,to,be,included,in,the,next,restart,param,class,loader,files,the,files,to,add;public,void,add,class,loader,files,class,loader,files,class,loader,files,assert,not,null,class,loader,files,class,loader,files,must,not,be,null,this,class,loader,files,add,all,class,loader,files
Restarter -> public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles);1522687863;Add additional {@link ClassLoaderFiles} to be included in the next restart._@param classLoaderFiles the files to add;public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles) {_		Assert.notNull(classLoaderFiles, "ClassLoaderFiles must not be null")__		this.classLoaderFiles.addAll(classLoaderFiles)__	};add,additional,link,class,loader,files,to,be,included,in,the,next,restart,param,class,loader,files,the,files,to,add;public,void,add,class,loader,files,class,loader,files,class,loader,files,assert,not,null,class,loader,files,class,loader,files,must,not,be,null,this,class,loader,files,add,all,class,loader,files
Restarter -> public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles);1527837989;Add additional {@link ClassLoaderFiles} to be included in the next restart._@param classLoaderFiles the files to add;public void addClassLoaderFiles(ClassLoaderFiles classLoaderFiles) {_		Assert.notNull(classLoaderFiles, "ClassLoaderFiles must not be null")__		this.classLoaderFiles.addAll(classLoaderFiles)__	};add,additional,link,class,loader,files,to,be,included,in,the,next,restart,param,class,loader,files,the,files,to,add;public,void,add,class,loader,files,class,loader,files,class,loader,files,assert,not,null,class,loader,files,class,loader,files,must,not,be,null,this,class,loader,files,add,all,class,loader,files
Restarter -> private void preInitializeLeakyClasses();1507173536;CGLIB has a private exception field which needs to initialized early to ensure that_the stacktrace doesn't retain a reference to the RestartClassLoader.;private void preInitializeLeakyClasses() {_		try {_			Class<?> readerClass = ClassNameReader.class__			Field field = readerClass.getDeclaredField("EARLY_EXIT")__			field.setAccessible(true)__			((Throwable) field.get(null)).fillInStackTrace()__		}_		catch (Exception ex) {_			this.logger.warn("Unable to pre-initialize classes", ex)__		}_	};cglib,has,a,private,exception,field,which,needs,to,initialized,early,to,ensure,that,the,stacktrace,doesn,t,retain,a,reference,to,the,restart,class,loader;private,void,pre,initialize,leaky,classes,try,class,reader,class,class,name,reader,class,field,field,reader,class,get,declared,field,field,set,accessible,true,throwable,field,get,null,fill,in,stack,trace,catch,exception,ex,this,logger,warn,unable,to,pre,initialize,classes,ex
Restarter -> private void preInitializeLeakyClasses();1512760426;CGLIB has a private exception field which needs to initialized early to ensure that_the stacktrace doesn't retain a reference to the RestartClassLoader.;private void preInitializeLeakyClasses() {_		try {_			Class<?> readerClass = ClassNameReader.class__			Field field = readerClass.getDeclaredField("EARLY_EXIT")__			field.setAccessible(true)__			((Throwable) field.get(null)).fillInStackTrace()__		}_		catch (Exception ex) {_			this.logger.warn("Unable to pre-initialize classes", ex)__		}_	};cglib,has,a,private,exception,field,which,needs,to,initialized,early,to,ensure,that,the,stacktrace,doesn,t,retain,a,reference,to,the,restart,class,loader;private,void,pre,initialize,leaky,classes,try,class,reader,class,class,name,reader,class,field,field,reader,class,get,declared,field,field,set,accessible,true,throwable,field,get,null,fill,in,stack,trace,catch,exception,ex,this,logger,warn,unable,to,pre,initialize,classes,ex
Restarter -> private void preInitializeLeakyClasses();1513163939;CGLIB has a private exception field which needs to initialized early to ensure that_the stacktrace doesn't retain a reference to the RestartClassLoader.;private void preInitializeLeakyClasses() {_		try {_			Class<?> readerClass = ClassNameReader.class__			Field field = readerClass.getDeclaredField("EARLY_EXIT")__			field.setAccessible(true)__			((Throwable) field.get(null)).fillInStackTrace()__		}_		catch (Exception ex) {_			this.logger.warn("Unable to pre-initialize classes", ex)__		}_	};cglib,has,a,private,exception,field,which,needs,to,initialized,early,to,ensure,that,the,stacktrace,doesn,t,retain,a,reference,to,the,restart,class,loader;private,void,pre,initialize,leaky,classes,try,class,reader,class,class,name,reader,class,field,field,reader,class,get,declared,field,field,set,accessible,true,throwable,field,get,null,fill,in,stack,trace,catch,exception,ex,this,logger,warn,unable,to,pre,initialize,classes,ex
Restarter -> private void preInitializeLeakyClasses();1513164616;CGLIB has a private exception field which needs to initialized early to ensure that_the stacktrace doesn't retain a reference to the RestartClassLoader.;private void preInitializeLeakyClasses() {_		try {_			Class<?> readerClass = ClassNameReader.class__			Field field = readerClass.getDeclaredField("EARLY_EXIT")__			field.setAccessible(true)__			((Throwable) field.get(null)).fillInStackTrace()__		}_		catch (Exception ex) {_			this.logger.warn("Unable to pre-initialize classes", ex)__		}_	};cglib,has,a,private,exception,field,which,needs,to,initialized,early,to,ensure,that,the,stacktrace,doesn,t,retain,a,reference,to,the,restart,class,loader;private,void,pre,initialize,leaky,classes,try,class,reader,class,class,name,reader,class,field,field,reader,class,get,declared,field,field,set,accessible,true,throwable,field,get,null,fill,in,stack,trace,catch,exception,ex,this,logger,warn,unable,to,pre,initialize,classes,ex
Restarter -> private void preInitializeLeakyClasses();1513204375;CGLIB has a private exception field which needs to initialized early to ensure that_the stacktrace doesn't retain a reference to the RestartClassLoader.;private void preInitializeLeakyClasses() {_		try {_			Class<?> readerClass = ClassNameReader.class__			Field field = readerClass.getDeclaredField("EARLY_EXIT")__			field.setAccessible(true)__			((Throwable) field.get(null)).fillInStackTrace()__		}_		catch (Exception ex) {_			this.logger.warn("Unable to pre-initialize classes", ex)__		}_	};cglib,has,a,private,exception,field,which,needs,to,initialized,early,to,ensure,that,the,stacktrace,doesn,t,retain,a,reference,to,the,restart,class,loader;private,void,pre,initialize,leaky,classes,try,class,reader,class,class,name,reader,class,field,field,reader,class,get,declared,field,field,set,accessible,true,throwable,field,get,null,fill,in,stack,trace,catch,exception,ex,this,logger,warn,unable,to,pre,initialize,classes,ex
Restarter -> private void preInitializeLeakyClasses();1519362690;CGLIB has a private exception field which needs to initialized early to ensure that_the stacktrace doesn't retain a reference to the RestartClassLoader.;private void preInitializeLeakyClasses() {_		try {_			Class<?> readerClass = ClassNameReader.class__			Field field = readerClass.getDeclaredField("EARLY_EXIT")__			field.setAccessible(true)__			((Throwable) field.get(null)).fillInStackTrace()__		}_		catch (Exception ex) {_			this.logger.warn("Unable to pre-initialize classes", ex)__		}_	};cglib,has,a,private,exception,field,which,needs,to,initialized,early,to,ensure,that,the,stacktrace,doesn,t,retain,a,reference,to,the,restart,class,loader;private,void,pre,initialize,leaky,classes,try,class,reader,class,class,name,reader,class,field,field,reader,class,get,declared,field,field,set,accessible,true,throwable,field,get,null,fill,in,stack,trace,catch,exception,ex,this,logger,warn,unable,to,pre,initialize,classes,ex
Restarter -> private void preInitializeLeakyClasses();1522687863;CGLIB has a private exception field which needs to initialized early to ensure that_the stacktrace doesn't retain a reference to the RestartClassLoader.;private void preInitializeLeakyClasses() {_		try {_			Class<?> readerClass = ClassNameReader.class__			Field field = readerClass.getDeclaredField("EARLY_EXIT")__			field.setAccessible(true)__			((Throwable) field.get(null)).fillInStackTrace()__		}_		catch (Exception ex) {_			this.logger.warn("Unable to pre-initialize classes", ex)__		}_	};cglib,has,a,private,exception,field,which,needs,to,initialized,early,to,ensure,that,the,stacktrace,doesn,t,retain,a,reference,to,the,restart,class,loader;private,void,pre,initialize,leaky,classes,try,class,reader,class,class,name,reader,class,field,field,reader,class,get,declared,field,field,set,accessible,true,throwable,field,get,null,fill,in,stack,trace,catch,exception,ex,this,logger,warn,unable,to,pre,initialize,classes,ex
Restarter -> private void preInitializeLeakyClasses();1527837989;CGLIB has a private exception field which needs to initialized early to ensure that_the stacktrace doesn't retain a reference to the RestartClassLoader.;private void preInitializeLeakyClasses() {_		try {_			Class<?> readerClass = ClassNameReader.class__			Field field = readerClass.getDeclaredField("EARLY_EXIT")__			field.setAccessible(true)__			((Throwable) field.get(null)).fillInStackTrace()__		}_		catch (Exception ex) {_			this.logger.warn("Unable to pre-initialize classes", ex)__		}_	};cglib,has,a,private,exception,field,which,needs,to,initialized,early,to,ensure,that,the,stacktrace,doesn,t,retain,a,reference,to,the,restart,class,loader;private,void,pre,initialize,leaky,classes,try,class,reader,class,class,name,reader,class,field,field,reader,class,get,declared,field,field,set,accessible,true,throwable,field,get,null,fill,in,stack,trace,catch,exception,ex,this,logger,warn,unable,to,pre,initialize,classes,ex
Restarter -> public ThreadFactory getThreadFactory();1507173536;Return a {@link ThreadFactory} that can be used to create leak safe threads._@return a leak safe thread factory;public ThreadFactory getThreadFactory() {_		return new LeakSafeThreadFactory()__	};return,a,link,thread,factory,that,can,be,used,to,create,leak,safe,threads,return,a,leak,safe,thread,factory;public,thread,factory,get,thread,factory,return,new,leak,safe,thread,factory
Restarter -> public ThreadFactory getThreadFactory();1512760426;Return a {@link ThreadFactory} that can be used to create leak safe threads._@return a leak safe thread factory;public ThreadFactory getThreadFactory() {_		return new LeakSafeThreadFactory()__	};return,a,link,thread,factory,that,can,be,used,to,create,leak,safe,threads,return,a,leak,safe,thread,factory;public,thread,factory,get,thread,factory,return,new,leak,safe,thread,factory
Restarter -> public ThreadFactory getThreadFactory();1513163939;Return a {@link ThreadFactory} that can be used to create leak safe threads._@return a leak safe thread factory;public ThreadFactory getThreadFactory() {_		return new LeakSafeThreadFactory()__	};return,a,link,thread,factory,that,can,be,used,to,create,leak,safe,threads,return,a,leak,safe,thread,factory;public,thread,factory,get,thread,factory,return,new,leak,safe,thread,factory
Restarter -> public ThreadFactory getThreadFactory();1513164616;Return a {@link ThreadFactory} that can be used to create leak safe threads._@return a leak safe thread factory;public ThreadFactory getThreadFactory() {_		return new LeakSafeThreadFactory()__	};return,a,link,thread,factory,that,can,be,used,to,create,leak,safe,threads,return,a,leak,safe,thread,factory;public,thread,factory,get,thread,factory,return,new,leak,safe,thread,factory
Restarter -> public ThreadFactory getThreadFactory();1513204375;Return a {@link ThreadFactory} that can be used to create leak safe threads._@return a leak safe thread factory;public ThreadFactory getThreadFactory() {_		return new LeakSafeThreadFactory()__	};return,a,link,thread,factory,that,can,be,used,to,create,leak,safe,threads,return,a,leak,safe,thread,factory;public,thread,factory,get,thread,factory,return,new,leak,safe,thread,factory
Restarter -> public ThreadFactory getThreadFactory();1519362690;Return a {@link ThreadFactory} that can be used to create leak safe threads._@return a leak safe thread factory;public ThreadFactory getThreadFactory() {_		return new LeakSafeThreadFactory()__	};return,a,link,thread,factory,that,can,be,used,to,create,leak,safe,threads,return,a,leak,safe,thread,factory;public,thread,factory,get,thread,factory,return,new,leak,safe,thread,factory
Restarter -> public ThreadFactory getThreadFactory();1522687863;Return a {@link ThreadFactory} that can be used to create leak safe threads._@return a leak safe thread factory;public ThreadFactory getThreadFactory() {_		return new LeakSafeThreadFactory()__	};return,a,link,thread,factory,that,can,be,used,to,create,leak,safe,threads,return,a,leak,safe,thread,factory;public,thread,factory,get,thread,factory,return,new,leak,safe,thread,factory
Restarter -> public ThreadFactory getThreadFactory();1527837989;Return a {@link ThreadFactory} that can be used to create leak safe threads._@return a leak safe thread factory;public ThreadFactory getThreadFactory() {_		return new LeakSafeThreadFactory()__	};return,a,link,thread,factory,that,can,be,used,to,create,leak,safe,threads,return,a,leak,safe,thread,factory;public,thread,factory,get,thread,factory,return,new,leak,safe,thread,factory
Restarter -> public void restart();1507173536;Restart the running application.;public void restart() {_		restart(FailureHandler.NONE)__	};restart,the,running,application;public,void,restart,restart,failure,handler,none
Restarter -> public void restart();1512760426;Restart the running application.;public void restart() {_		restart(FailureHandler.NONE)__	};restart,the,running,application;public,void,restart,restart,failure,handler,none
Restarter -> public void restart();1513163939;Restart the running application.;public void restart() {_		restart(FailureHandler.NONE)__	};restart,the,running,application;public,void,restart,restart,failure,handler,none
Restarter -> public void restart();1513164616;Restart the running application.;public void restart() {_		restart(FailureHandler.NONE)__	};restart,the,running,application;public,void,restart,restart,failure,handler,none
Restarter -> public void restart();1513204375;Restart the running application.;public void restart() {_		restart(FailureHandler.NONE)__	};restart,the,running,application;public,void,restart,restart,failure,handler,none
Restarter -> public void restart();1519362690;Restart the running application.;public void restart() {_		restart(FailureHandler.NONE)__	};restart,the,running,application;public,void,restart,restart,failure,handler,none
Restarter -> public void restart();1522687863;Restart the running application.;public void restart() {_		restart(FailureHandler.NONE)__	};restart,the,running,application;public,void,restart,restart,failure,handler,none
Restarter -> public void restart();1527837989;Restart the running application.;public void restart() {_		restart(FailureHandler.NONE)__	};restart,the,running,application;public,void,restart,restart,failure,handler,none
Restarter -> protected void start(FailureHandler failureHandler) throws Exception;1507173536;Start the application._@param failureHandler a failure handler for application that won't start_@throws Exception in case of errors;protected void start(FailureHandler failureHandler) throws Exception {_		do {_			Throwable error = doStart()__			if (error == null) {_				return__			}_			if (failureHandler.handle(error) == Outcome.ABORT) {_				return__			}_		}_		while (true)__	};start,the,application,param,failure,handler,a,failure,handler,for,application,that,won,t,start,throws,exception,in,case,of,errors;protected,void,start,failure,handler,failure,handler,throws,exception,do,throwable,error,do,start,if,error,null,return,if,failure,handler,handle,error,outcome,abort,return,while,true
Restarter -> protected void start(FailureHandler failureHandler) throws Exception;1512760426;Start the application._@param failureHandler a failure handler for application that won't start_@throws Exception in case of errors;protected void start(FailureHandler failureHandler) throws Exception {_		do {_			Throwable error = doStart()__			if (error == null) {_				return__			}_			if (failureHandler.handle(error) == Outcome.ABORT) {_				return__			}_		}_		while (true)__	};start,the,application,param,failure,handler,a,failure,handler,for,application,that,won,t,start,throws,exception,in,case,of,errors;protected,void,start,failure,handler,failure,handler,throws,exception,do,throwable,error,do,start,if,error,null,return,if,failure,handler,handle,error,outcome,abort,return,while,true
Restarter -> protected void start(FailureHandler failureHandler) throws Exception;1513163939;Start the application._@param failureHandler a failure handler for application that won't start_@throws Exception in case of errors;protected void start(FailureHandler failureHandler) throws Exception {_		do {_			Throwable error = doStart()__			if (error == null) {_				return__			}_			if (failureHandler.handle(error) == Outcome.ABORT) {_				return__			}_		}_		while (true)__	};start,the,application,param,failure,handler,a,failure,handler,for,application,that,won,t,start,throws,exception,in,case,of,errors;protected,void,start,failure,handler,failure,handler,throws,exception,do,throwable,error,do,start,if,error,null,return,if,failure,handler,handle,error,outcome,abort,return,while,true
Restarter -> protected void start(FailureHandler failureHandler) throws Exception;1513164616;Start the application._@param failureHandler a failure handler for application that won't start_@throws Exception in case of errors;protected void start(FailureHandler failureHandler) throws Exception {_		do {_			Throwable error = doStart()__			if (error == null) {_				return__			}_			if (failureHandler.handle(error) == Outcome.ABORT) {_				return__			}_		}_		while (true)__	};start,the,application,param,failure,handler,a,failure,handler,for,application,that,won,t,start,throws,exception,in,case,of,errors;protected,void,start,failure,handler,failure,handler,throws,exception,do,throwable,error,do,start,if,error,null,return,if,failure,handler,handle,error,outcome,abort,return,while,true
Restarter -> protected void start(FailureHandler failureHandler) throws Exception;1513204375;Start the application._@param failureHandler a failure handler for application that won't start_@throws Exception in case of errors;protected void start(FailureHandler failureHandler) throws Exception {_		do {_			Throwable error = doStart()__			if (error == null) {_				return__			}_			if (failureHandler.handle(error) == Outcome.ABORT) {_				return__			}_		}_		while (true)__	};start,the,application,param,failure,handler,a,failure,handler,for,application,that,won,t,start,throws,exception,in,case,of,errors;protected,void,start,failure,handler,failure,handler,throws,exception,do,throwable,error,do,start,if,error,null,return,if,failure,handler,handle,error,outcome,abort,return,while,true
Restarter -> protected void start(FailureHandler failureHandler) throws Exception;1519362690;Start the application._@param failureHandler a failure handler for application that won't start_@throws Exception in case of errors;protected void start(FailureHandler failureHandler) throws Exception {_		do {_			Throwable error = doStart()__			if (error == null) {_				return__			}_			if (failureHandler.handle(error) == Outcome.ABORT) {_				return__			}_		}_		while (true)__	};start,the,application,param,failure,handler,a,failure,handler,for,application,that,won,t,start,throws,exception,in,case,of,errors;protected,void,start,failure,handler,failure,handler,throws,exception,do,throwable,error,do,start,if,error,null,return,if,failure,handler,handle,error,outcome,abort,return,while,true
Restarter -> protected void start(FailureHandler failureHandler) throws Exception;1522687863;Start the application._@param failureHandler a failure handler for application that won't start_@throws Exception in case of errors;protected void start(FailureHandler failureHandler) throws Exception {_		do {_			Throwable error = doStart()__			if (error == null) {_				return__			}_			if (failureHandler.handle(error) == Outcome.ABORT) {_				return__			}_		}_		while (true)__	};start,the,application,param,failure,handler,a,failure,handler,for,application,that,won,t,start,throws,exception,in,case,of,errors;protected,void,start,failure,handler,failure,handler,throws,exception,do,throwable,error,do,start,if,error,null,return,if,failure,handler,handle,error,outcome,abort,return,while,true
Restarter -> protected void start(FailureHandler failureHandler) throws Exception;1527837989;Start the application._@param failureHandler a failure handler for application that won't start_@throws Exception in case of errors;protected void start(FailureHandler failureHandler) throws Exception {_		do {_			Throwable error = doStart()__			if (error == null) {_				return__			}_			if (failureHandler.handle(error) == Outcome.ABORT) {_				return__			}_		}_		while (true)__	};start,the,application,param,failure,handler,a,failure,handler,for,application,that,won,t,start,throws,exception,in,case,of,errors;protected,void,start,failure,handler,failure,handler,throws,exception,do,throwable,error,do,start,if,error,null,return,if,failure,handler,handle,error,outcome,abort,return,while,true
Restarter -> public static void initialize(String[] args, RestartInitializer initializer);1507173536;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, RestartInitializer initializer) {_		initialize(args, false, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,restart,initializer,initializer,initialize,args,false,initializer,true
Restarter -> public static void initialize(String[] args, RestartInitializer initializer);1512760426;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, RestartInitializer initializer) {_		initialize(args, false, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,restart,initializer,initializer,initialize,args,false,initializer,true
Restarter -> public static void initialize(String[] args, RestartInitializer initializer);1513163939;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, RestartInitializer initializer) {_		initialize(args, false, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,restart,initializer,initializer,initialize,args,false,initializer,true
Restarter -> public static void initialize(String[] args, RestartInitializer initializer);1513164616;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, RestartInitializer initializer) {_		initialize(args, false, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,restart,initializer,initializer,initialize,args,false,initializer,true
Restarter -> public static void initialize(String[] args, RestartInitializer initializer);1513204375;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, RestartInitializer initializer) {_		initialize(args, false, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,restart,initializer,initializer,initialize,args,false,initializer,true
Restarter -> public static void initialize(String[] args, RestartInitializer initializer);1519362690;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, RestartInitializer initializer) {_		initialize(args, false, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,restart,initializer,initializer,initialize,args,false,initializer,true
Restarter -> public static void initialize(String[] args, RestartInitializer initializer);1522687863;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, RestartInitializer initializer) {_		initialize(args, false, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,restart,initializer,initializer,initialize,args,false,initializer,true
Restarter -> public static void initialize(String[] args, RestartInitializer initializer);1527837989;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@param initializer the restart initializer_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args, RestartInitializer initializer) {_		initialize(args, false, initializer, true)__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,param,initializer,the,restart,initializer,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,restart,initializer,initializer,initialize,args,false,initializer,true
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer, boolean restartOnInitialize);1507173536;Initialize restart support for the current application. Called automatically by_{@link RestartApplicationListener} but can also be called directly if main_application arguments are not the same as those passed to the_{@link SpringApplication}._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_each restart. This will slow down restarts and is intended primarily for testing_@param initializer the restart initializer_@param restartOnInitialize if the restarter should be restarted immediately when_the {@link RestartInitializer} returns non {@code null} results;public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer, boolean restartOnInitialize) {_		Restarter localInstance = null__		synchronized (INSTANCE_MONITOR) {_			if (instance == null) {_				localInstance = new Restarter(Thread.currentThread(), args,_						forceReferenceCleanup, initializer)__				instance = localInstance__			}_		}_		if (localInstance != null) {_			localInstance.initialize(restartOnInitialize)__		}_	};initialize,restart,support,for,the,current,application,called,automatically,by,link,restart,application,listener,but,can,also,be,called,directly,if,main,application,arguments,are,not,the,same,as,those,passed,to,the,link,spring,application,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,each,restart,this,will,slow,down,restarts,and,is,intended,primarily,for,testing,param,initializer,the,restart,initializer,param,restart,on,initialize,if,the,restarter,should,be,restarted,immediately,when,the,link,restart,initializer,returns,non,code,null,results;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,boolean,restart,on,initialize,restarter,local,instance,null,synchronized,if,instance,null,local,instance,new,restarter,thread,current,thread,args,force,reference,cleanup,initializer,instance,local,instance,if,local,instance,null,local,instance,initialize,restart,on,initialize
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer, boolean restartOnInitialize);1512760426;Initialize restart support for the current application. Called automatically by_{@link RestartApplicationListener} but can also be called directly if main_application arguments are not the same as those passed to the_{@link SpringApplication}._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_each restart. This will slow down restarts and is intended primarily for testing_@param initializer the restart initializer_@param restartOnInitialize if the restarter should be restarted immediately when_the {@link RestartInitializer} returns non {@code null} results;public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer, boolean restartOnInitialize) {_		Restarter localInstance = null__		synchronized (INSTANCE_MONITOR) {_			if (instance == null) {_				localInstance = new Restarter(Thread.currentThread(), args,_						forceReferenceCleanup, initializer)__				instance = localInstance__			}_		}_		if (localInstance != null) {_			localInstance.initialize(restartOnInitialize)__		}_	};initialize,restart,support,for,the,current,application,called,automatically,by,link,restart,application,listener,but,can,also,be,called,directly,if,main,application,arguments,are,not,the,same,as,those,passed,to,the,link,spring,application,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,each,restart,this,will,slow,down,restarts,and,is,intended,primarily,for,testing,param,initializer,the,restart,initializer,param,restart,on,initialize,if,the,restarter,should,be,restarted,immediately,when,the,link,restart,initializer,returns,non,code,null,results;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,boolean,restart,on,initialize,restarter,local,instance,null,synchronized,if,instance,null,local,instance,new,restarter,thread,current,thread,args,force,reference,cleanup,initializer,instance,local,instance,if,local,instance,null,local,instance,initialize,restart,on,initialize
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer, boolean restartOnInitialize);1513163939;Initialize restart support for the current application. Called automatically by_{@link RestartApplicationListener} but can also be called directly if main_application arguments are not the same as those passed to the_{@link SpringApplication}._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_each restart. This will slow down restarts and is intended primarily for testing_@param initializer the restart initializer_@param restartOnInitialize if the restarter should be restarted immediately when_the {@link RestartInitializer} returns non {@code null} results;public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer, boolean restartOnInitialize) {_		Restarter localInstance = null__		synchronized (INSTANCE_MONITOR) {_			if (instance == null) {_				localInstance = new Restarter(Thread.currentThread(), args,_						forceReferenceCleanup, initializer)__				instance = localInstance__			}_		}_		if (localInstance != null) {_			localInstance.initialize(restartOnInitialize)__		}_	};initialize,restart,support,for,the,current,application,called,automatically,by,link,restart,application,listener,but,can,also,be,called,directly,if,main,application,arguments,are,not,the,same,as,those,passed,to,the,link,spring,application,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,each,restart,this,will,slow,down,restarts,and,is,intended,primarily,for,testing,param,initializer,the,restart,initializer,param,restart,on,initialize,if,the,restarter,should,be,restarted,immediately,when,the,link,restart,initializer,returns,non,code,null,results;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,boolean,restart,on,initialize,restarter,local,instance,null,synchronized,if,instance,null,local,instance,new,restarter,thread,current,thread,args,force,reference,cleanup,initializer,instance,local,instance,if,local,instance,null,local,instance,initialize,restart,on,initialize
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer, boolean restartOnInitialize);1513164616;Initialize restart support for the current application. Called automatically by_{@link RestartApplicationListener} but can also be called directly if main_application arguments are not the same as those passed to the_{@link SpringApplication}._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_each restart. This will slow down restarts and is intended primarily for testing_@param initializer the restart initializer_@param restartOnInitialize if the restarter should be restarted immediately when_the {@link RestartInitializer} returns non {@code null} results;public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer, boolean restartOnInitialize) {_		Restarter localInstance = null__		synchronized (INSTANCE_MONITOR) {_			if (instance == null) {_				localInstance = new Restarter(Thread.currentThread(), args,_						forceReferenceCleanup, initializer)__				instance = localInstance__			}_		}_		if (localInstance != null) {_			localInstance.initialize(restartOnInitialize)__		}_	};initialize,restart,support,for,the,current,application,called,automatically,by,link,restart,application,listener,but,can,also,be,called,directly,if,main,application,arguments,are,not,the,same,as,those,passed,to,the,link,spring,application,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,each,restart,this,will,slow,down,restarts,and,is,intended,primarily,for,testing,param,initializer,the,restart,initializer,param,restart,on,initialize,if,the,restarter,should,be,restarted,immediately,when,the,link,restart,initializer,returns,non,code,null,results;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,boolean,restart,on,initialize,restarter,local,instance,null,synchronized,if,instance,null,local,instance,new,restarter,thread,current,thread,args,force,reference,cleanup,initializer,instance,local,instance,if,local,instance,null,local,instance,initialize,restart,on,initialize
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer, boolean restartOnInitialize);1513204375;Initialize restart support for the current application. Called automatically by_{@link RestartApplicationListener} but can also be called directly if main_application arguments are not the same as those passed to the_{@link SpringApplication}._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_each restart. This will slow down restarts and is intended primarily for testing_@param initializer the restart initializer_@param restartOnInitialize if the restarter should be restarted immediately when_the {@link RestartInitializer} returns non {@code null} results;public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer, boolean restartOnInitialize) {_		Restarter localInstance = null__		synchronized (INSTANCE_MONITOR) {_			if (instance == null) {_				localInstance = new Restarter(Thread.currentThread(), args,_						forceReferenceCleanup, initializer)__				instance = localInstance__			}_		}_		if (localInstance != null) {_			localInstance.initialize(restartOnInitialize)__		}_	};initialize,restart,support,for,the,current,application,called,automatically,by,link,restart,application,listener,but,can,also,be,called,directly,if,main,application,arguments,are,not,the,same,as,those,passed,to,the,link,spring,application,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,each,restart,this,will,slow,down,restarts,and,is,intended,primarily,for,testing,param,initializer,the,restart,initializer,param,restart,on,initialize,if,the,restarter,should,be,restarted,immediately,when,the,link,restart,initializer,returns,non,code,null,results;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,boolean,restart,on,initialize,restarter,local,instance,null,synchronized,if,instance,null,local,instance,new,restarter,thread,current,thread,args,force,reference,cleanup,initializer,instance,local,instance,if,local,instance,null,local,instance,initialize,restart,on,initialize
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer, boolean restartOnInitialize);1519362690;Initialize restart support for the current application. Called automatically by_{@link RestartApplicationListener} but can also be called directly if main_application arguments are not the same as those passed to the_{@link SpringApplication}._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_each restart. This will slow down restarts and is intended primarily for testing_@param initializer the restart initializer_@param restartOnInitialize if the restarter should be restarted immediately when_the {@link RestartInitializer} returns non {@code null} results;public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer, boolean restartOnInitialize) {_		Restarter localInstance = null__		synchronized (INSTANCE_MONITOR) {_			if (instance == null) {_				localInstance = new Restarter(Thread.currentThread(), args,_						forceReferenceCleanup, initializer)__				instance = localInstance__			}_		}_		if (localInstance != null) {_			localInstance.initialize(restartOnInitialize)__		}_	};initialize,restart,support,for,the,current,application,called,automatically,by,link,restart,application,listener,but,can,also,be,called,directly,if,main,application,arguments,are,not,the,same,as,those,passed,to,the,link,spring,application,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,each,restart,this,will,slow,down,restarts,and,is,intended,primarily,for,testing,param,initializer,the,restart,initializer,param,restart,on,initialize,if,the,restarter,should,be,restarted,immediately,when,the,link,restart,initializer,returns,non,code,null,results;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,boolean,restart,on,initialize,restarter,local,instance,null,synchronized,if,instance,null,local,instance,new,restarter,thread,current,thread,args,force,reference,cleanup,initializer,instance,local,instance,if,local,instance,null,local,instance,initialize,restart,on,initialize
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer, boolean restartOnInitialize);1522687863;Initialize restart support for the current application. Called automatically by_{@link RestartApplicationListener} but can also be called directly if main_application arguments are not the same as those passed to the_{@link SpringApplication}._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_each restart. This will slow down restarts and is intended primarily for testing_@param initializer the restart initializer_@param restartOnInitialize if the restarter should be restarted immediately when_the {@link RestartInitializer} returns non {@code null} results;public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer, boolean restartOnInitialize) {_		Restarter localInstance = null__		synchronized (INSTANCE_MONITOR) {_			if (instance == null) {_				localInstance = new Restarter(Thread.currentThread(), args,_						forceReferenceCleanup, initializer)__				instance = localInstance__			}_		}_		if (localInstance != null) {_			localInstance.initialize(restartOnInitialize)__		}_	};initialize,restart,support,for,the,current,application,called,automatically,by,link,restart,application,listener,but,can,also,be,called,directly,if,main,application,arguments,are,not,the,same,as,those,passed,to,the,link,spring,application,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,each,restart,this,will,slow,down,restarts,and,is,intended,primarily,for,testing,param,initializer,the,restart,initializer,param,restart,on,initialize,if,the,restarter,should,be,restarted,immediately,when,the,link,restart,initializer,returns,non,code,null,results;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,boolean,restart,on,initialize,restarter,local,instance,null,synchronized,if,instance,null,local,instance,new,restarter,thread,current,thread,args,force,reference,cleanup,initializer,instance,local,instance,if,local,instance,null,local,instance,initialize,restart,on,initialize
Restarter -> public static void initialize(String[] args, boolean forceReferenceCleanup, 			RestartInitializer initializer, boolean restartOnInitialize);1527837989;Initialize restart support for the current application. Called automatically by_{@link RestartApplicationListener} but can also be called directly if main_application arguments are not the same as those passed to the_{@link SpringApplication}._@param args main application arguments_@param forceReferenceCleanup if forcing of soft/weak reference should happen on_each restart. This will slow down restarts and is intended primarily for testing_@param initializer the restart initializer_@param restartOnInitialize if the restarter should be restarted immediately when_the {@link RestartInitializer} returns non {@code null} results;public static void initialize(String[] args, boolean forceReferenceCleanup,_			RestartInitializer initializer, boolean restartOnInitialize) {_		Restarter localInstance = null__		synchronized (INSTANCE_MONITOR) {_			if (instance == null) {_				localInstance = new Restarter(Thread.currentThread(), args,_						forceReferenceCleanup, initializer)__				instance = localInstance__			}_		}_		if (localInstance != null) {_			localInstance.initialize(restartOnInitialize)__		}_	};initialize,restart,support,for,the,current,application,called,automatically,by,link,restart,application,listener,but,can,also,be,called,directly,if,main,application,arguments,are,not,the,same,as,those,passed,to,the,link,spring,application,param,args,main,application,arguments,param,force,reference,cleanup,if,forcing,of,soft,weak,reference,should,happen,on,each,restart,this,will,slow,down,restarts,and,is,intended,primarily,for,testing,param,initializer,the,restart,initializer,param,restart,on,initialize,if,the,restarter,should,be,restarted,immediately,when,the,link,restart,initializer,returns,non,code,null,results;public,static,void,initialize,string,args,boolean,force,reference,cleanup,restart,initializer,initializer,boolean,restart,on,initialize,restarter,local,instance,null,synchronized,if,instance,null,local,instance,new,restarter,thread,current,thread,args,force,reference,cleanup,initializer,instance,local,instance,if,local,instance,null,local,instance,initialize,restart,on,initialize
Restarter -> private void forceReferenceCleanup();1507173536;Cleanup any soft/weak references by forcing an {@link OutOfMemoryError} error.;private void forceReferenceCleanup() {_		try {_			final List<long[]> memory = new LinkedList<>()__			while (true) {_				memory.add(new long[102400])__			}_		}_		catch (final OutOfMemoryError ex) {_			_		}_	};cleanup,any,soft,weak,references,by,forcing,an,link,out,of,memory,error,error;private,void,force,reference,cleanup,try,final,list,long,memory,new,linked,list,while,true,memory,add,new,long,102400,catch,final,out,of,memory,error,ex
Restarter -> private void forceReferenceCleanup();1512760426;Cleanup any soft/weak references by forcing an {@link OutOfMemoryError} error.;private void forceReferenceCleanup() {_		try {_			final List<long[]> memory = new LinkedList<>()__			while (true) {_				memory.add(new long[102400])__			}_		}_		catch (OutOfMemoryError ex) {_			_		}_	};cleanup,any,soft,weak,references,by,forcing,an,link,out,of,memory,error,error;private,void,force,reference,cleanup,try,final,list,long,memory,new,linked,list,while,true,memory,add,new,long,102400,catch,out,of,memory,error,ex
Restarter -> private void forceReferenceCleanup();1513163939;Cleanup any soft/weak references by forcing an {@link OutOfMemoryError} error.;private void forceReferenceCleanup() {_		try {_			final List<long[]> memory = new LinkedList<>()__			while (true) {_				memory.add(new long[102400])__			}_		}_		catch (OutOfMemoryError ex) {_			_		}_	};cleanup,any,soft,weak,references,by,forcing,an,link,out,of,memory,error,error;private,void,force,reference,cleanup,try,final,list,long,memory,new,linked,list,while,true,memory,add,new,long,102400,catch,out,of,memory,error,ex
Restarter -> private void forceReferenceCleanup();1513164616;Cleanup any soft/weak references by forcing an {@link OutOfMemoryError} error.;private void forceReferenceCleanup() {_		try {_			final List<long[]> memory = new LinkedList<>()__			while (true) {_				memory.add(new long[102400])__			}_		}_		catch (OutOfMemoryError ex) {_			_		}_	};cleanup,any,soft,weak,references,by,forcing,an,link,out,of,memory,error,error;private,void,force,reference,cleanup,try,final,list,long,memory,new,linked,list,while,true,memory,add,new,long,102400,catch,out,of,memory,error,ex
Restarter -> private void forceReferenceCleanup();1513204375;Cleanup any soft/weak references by forcing an {@link OutOfMemoryError} error.;private void forceReferenceCleanup() {_		try {_			final List<long[]> memory = new LinkedList<>()__			while (true) {_				memory.add(new long[102400])__			}_		}_		catch (OutOfMemoryError ex) {_			_		}_	};cleanup,any,soft,weak,references,by,forcing,an,link,out,of,memory,error,error;private,void,force,reference,cleanup,try,final,list,long,memory,new,linked,list,while,true,memory,add,new,long,102400,catch,out,of,memory,error,ex
Restarter -> private void forceReferenceCleanup();1519362690;Cleanup any soft/weak references by forcing an {@link OutOfMemoryError} error.;private void forceReferenceCleanup() {_		try {_			final List<long[]> memory = new LinkedList<>()__			while (true) {_				memory.add(new long[102400])__			}_		}_		catch (OutOfMemoryError ex) {_			_		}_	};cleanup,any,soft,weak,references,by,forcing,an,link,out,of,memory,error,error;private,void,force,reference,cleanup,try,final,list,long,memory,new,linked,list,while,true,memory,add,new,long,102400,catch,out,of,memory,error,ex
Restarter -> private void forceReferenceCleanup();1522687863;Cleanup any soft/weak references by forcing an {@link OutOfMemoryError} error.;private void forceReferenceCleanup() {_		try {_			final List<long[]> memory = new LinkedList<>()__			while (true) {_				memory.add(new long[102400])__			}_		}_		catch (OutOfMemoryError ex) {_			_		}_	};cleanup,any,soft,weak,references,by,forcing,an,link,out,of,memory,error,error;private,void,force,reference,cleanup,try,final,list,long,memory,new,linked,list,while,true,memory,add,new,long,102400,catch,out,of,memory,error,ex
Restarter -> private void forceReferenceCleanup();1527837989;Cleanup any soft/weak references by forcing an {@link OutOfMemoryError} error.;private void forceReferenceCleanup() {_		try {_			final List<long[]> memory = new LinkedList<>()__			while (true) {_				memory.add(new long[102400])__			}_		}_		catch (OutOfMemoryError ex) {_			_		}_	};cleanup,any,soft,weak,references,by,forcing,an,link,out,of,memory,error,error;private,void,force,reference,cleanup,try,final,list,long,memory,new,linked,list,while,true,memory,add,new,long,102400,catch,out,of,memory,error,ex
Restarter -> public static void initialize(String[] args);1507173536;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args) {_		initialize(args, false, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,initialize,args,false,new,default,restart,initializer
Restarter -> public static void initialize(String[] args);1512760426;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args) {_		initialize(args, false, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,initialize,args,false,new,default,restart,initializer
Restarter -> public static void initialize(String[] args);1513163939;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args) {_		initialize(args, false, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,initialize,args,false,new,default,restart,initializer
Restarter -> public static void initialize(String[] args);1513164616;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args) {_		initialize(args, false, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,initialize,args,false,new,default,restart,initializer
Restarter -> public static void initialize(String[] args);1513204375;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args) {_		initialize(args, false, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,initialize,args,false,new,default,restart,initializer
Restarter -> public static void initialize(String[] args);1519362690;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args) {_		initialize(args, false, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,initialize,args,false,new,default,restart,initializer
Restarter -> public static void initialize(String[] args);1522687863;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args) {_		initialize(args, false, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,initialize,args,false,new,default,restart,initializer
Restarter -> public static void initialize(String[] args);1527837989;Initialize restart support. See_{@link #initialize(String[], boolean, RestartInitializer)} for details._@param args main application arguments_@see #initialize(String[], boolean, RestartInitializer);public static void initialize(String[] args) {_		initialize(args, false, new DefaultRestartInitializer())__	};initialize,restart,support,see,link,initialize,string,boolean,restart,initializer,for,details,param,args,main,application,arguments,see,initialize,string,boolean,restart,initializer;public,static,void,initialize,string,args,initialize,args,false,new,default,restart,initializer
