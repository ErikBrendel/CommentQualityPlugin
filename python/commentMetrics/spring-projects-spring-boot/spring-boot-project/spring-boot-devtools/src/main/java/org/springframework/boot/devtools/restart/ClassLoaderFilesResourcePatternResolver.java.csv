commented;modifiers;parameterAmount;loc;comment;code
false;private;1;9;;private ResourceLoader retrieveResourceLoader(ApplicationContext applicationContext) {     Field field = ReflectionUtils.findField(applicationContext.getClass(), "resourceLoader", ResourceLoader.class).     if (field == null) {         return null.     }     ReflectionUtils.makeAccessible(field).     return (ResourceLoader) ReflectionUtils.getField(field, applicationContext). }
false;private;0;6;;private ResourcePatternResolverFactory getResourcePatternResolverFactory() {     if (ClassUtils.isPresent(WEB_CONTEXT_CLASS, null)) {         return new WebResourcePatternResolverFactory().     }     return new ResourcePatternResolverFactory(). }
false;public;0;4;;@Override public ClassLoader getClassLoader() {     return this.patternResolverDelegate.getClassLoader(). }
false;public;1;8;;@Override public Resource getResource(String location) {     Resource candidate = this.patternResolverDelegate.getResource(location).     if (isDeleted(candidate)) {         return new DeletedClassLoaderFileResource(location).     }     return candidate. }
false;public;1;13;;@Override public Resource[] getResources(String locationPattern) throws IOException {     List<Resource> resources = new ArrayList<>().     Resource[] candidates = this.patternResolverDelegate.getResources(locationPattern).     for (Resource candidate : candidates) {         if (!isDeleted(candidate)) {             resources.add(candidate).         }     }     resources.addAll(getAdditionalResources(locationPattern)).     return resources.toArray(new Resource[0]). }
false;private;1;19;;private List<Resource> getAdditionalResources(String locationPattern) throws MalformedURLException {     List<Resource> additionalResources = new ArrayList<>().     String trimmedLocationPattern = trimLocationPattern(locationPattern).     for (SourceFolder sourceFolder : this.classLoaderFiles.getSourceFolders()) {         for (Entry<String, ClassLoaderFile> entry : sourceFolder.getFilesEntrySet()) {             String name = entry.getKey().             ClassLoaderFile file = entry.getValue().             if (file.getKind() != Kind.DELETED && this.antPathMatcher.match(trimmedLocationPattern, name)) {                 URL url = new URL("reloaded", null, -1, "/" + name, new ClassLoaderFileURLStreamHandler(file)).                 UrlResource resource = new UrlResource(url).                 additionalResources.add(resource).             }         }     }     return additionalResources. }
false;private;1;8;;private String trimLocationPattern(String pattern) {     for (String prefix : LOCATION_PATTERN_PREFIXES) {         if (pattern.startsWith(prefix)) {             return pattern.substring(prefix.length()).         }     }     return pattern. }
false;private;1;19;;private boolean isDeleted(Resource resource) {     for (SourceFolder sourceFolder : this.classLoaderFiles.getSourceFolders()) {         for (Entry<String, ClassLoaderFile> entry : sourceFolder.getFilesEntrySet()) {             try {                 String name = entry.getKey().                 ClassLoaderFile file = entry.getValue().                 if (file.getKind() == Kind.DELETED && resource.exists() && resource.getURI().toString().endsWith(name)) {                     return true.                 }             } catch (IOException ex) {                 throw new IllegalStateException("Failed to retrieve URI from '" + resource + "'", ex).             }         }     }     return false. }
false;public;0;4;;@Override public boolean exists() {     return false. }
false;public;0;4;;@Override public String getDescription() {     return "Deleted: " + this.name. }
false;public;0;4;;@Override public InputStream getInputStream() throws IOException {     throw new IOException(this.name + " has been deleted"). }
false;public;2;8;;public ResourcePatternResolver getResourcePatternResolver(ApplicationContext applicationContext, ResourceLoader resourceLoader) {     if (resourceLoader == null) {         resourceLoader = new DefaultResourceLoader().         copyProtocolResolvers(applicationContext, resourceLoader).     }     return new PathMatchingResourcePatternResolver(resourceLoader). }
false;protected,final;2;8;;protected final void copyProtocolResolvers(ApplicationContext applicationContext, ResourceLoader resourceLoader) {     if (applicationContext instanceof DefaultResourceLoader && resourceLoader instanceof DefaultResourceLoader) {         copyProtocolResolvers((DefaultResourceLoader) applicationContext, (DefaultResourceLoader) resourceLoader).     } }
false;protected,final;2;6;;protected final void copyProtocolResolvers(DefaultResourceLoader source, DefaultResourceLoader destination) {     for (ProtocolResolver resolver : source.getProtocolResolvers()) {         destination.addProtocolResolver(resolver).     } }
false;public;2;9;;@Override public ResourcePatternResolver getResourcePatternResolver(ApplicationContext applicationContext, ResourceLoader resourceLoader) {     if (applicationContext instanceof WebApplicationContext) {         return getResourcePatternResolver((WebApplicationContext) applicationContext, resourceLoader).     }     return super.getResourcePatternResolver(applicationContext, resourceLoader). }
false;private;2;10;;private ResourcePatternResolver getResourcePatternResolver(WebApplicationContext applicationContext, ResourceLoader resourceLoader) {     if (resourceLoader == null) {         resourceLoader = new WebApplicationContextResourceLoader(applicationContext).         copyProtocolResolvers(applicationContext, resourceLoader).     }     return new ServletContextResourcePatternResolver(resourceLoader). }
false;protected;1;8;;@Override protected Resource getResourceByPath(String path) {     if (this.applicationContext.getServletContext() != null) {         return new ServletContextResource(this.applicationContext.getServletContext(), path).     }     return super.getResourceByPath(path). }
