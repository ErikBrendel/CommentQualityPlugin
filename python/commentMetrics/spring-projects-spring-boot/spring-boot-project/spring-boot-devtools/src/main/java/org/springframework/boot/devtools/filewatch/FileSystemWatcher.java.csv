# id;timestamp;commentText;codeText;commentWords;codeWords
FileSystemWatcher -> public FileSystemWatcher();1507173536;Create a new {@link FileSystemWatcher} instance.;public FileSystemWatcher() {_		this(true, DEFAULT_POLL_INTERVAL, DEFAULT_QUIET_PERIOD)__	};create,a,new,link,file,system,watcher,instance;public,file,system,watcher,this,true
FileSystemWatcher -> public FileSystemWatcher();1510040789;Create a new {@link FileSystemWatcher} instance.;public FileSystemWatcher() {_		this(true, DEFAULT_POLL_INTERVAL, DEFAULT_QUIET_PERIOD)__	};create,a,new,link,file,system,watcher,instance;public,file,system,watcher,this,true
FileSystemWatcher -> public FileSystemWatcher();1511157177;Create a new {@link FileSystemWatcher} instance.;public FileSystemWatcher() {_		this(true, DEFAULT_POLL_INTERVAL, DEFAULT_QUIET_PERIOD)__	};create,a,new,link,file,system,watcher,instance;public,file,system,watcher,this,true
FileSystemWatcher -> public FileSystemWatcher();1516666024;Create a new {@link FileSystemWatcher} instance.;public FileSystemWatcher() {_		this(true, DEFAULT_POLL_INTERVAL, DEFAULT_QUIET_PERIOD)__	};create,a,new,link,file,system,watcher,instance;public,file,system,watcher,this,true
FileSystemWatcher -> public FileSystemWatcher();1516838954;Create a new {@link FileSystemWatcher} instance.;public FileSystemWatcher() {_		this(true, DEFAULT_POLL_INTERVAL, DEFAULT_QUIET_PERIOD)__	};create,a,new,link,file,system,watcher,instance;public,file,system,watcher,this,true
FileSystemWatcher -> public FileSystemWatcher();1530545187;Create a new {@link FileSystemWatcher} instance.;public FileSystemWatcher() {_		this(true, DEFAULT_POLL_INTERVAL, DEFAULT_QUIET_PERIOD)__	};create,a,new,link,file,system,watcher,instance;public,file,system,watcher,this,true
FileSystemWatcher -> public void addListener(FileChangeListener fileChangeListener);1507173536;Add listener for file change events. Cannot be called after the watcher has been_{@link #start() started}._@param fileChangeListener the listener to add;public void addListener(FileChangeListener fileChangeListener) {_		Assert.notNull(fileChangeListener, "FileChangeListener must not be null")__		synchronized (this.monitor) {_			checkNotStarted()__			this.listeners.add(fileChangeListener)__		}_	};add,listener,for,file,change,events,cannot,be,called,after,the,watcher,has,been,link,start,started,param,file,change,listener,the,listener,to,add;public,void,add,listener,file,change,listener,file,change,listener,assert,not,null,file,change,listener,file,change,listener,must,not,be,null,synchronized,this,monitor,check,not,started,this,listeners,add,file,change,listener
FileSystemWatcher -> public void addListener(FileChangeListener fileChangeListener);1510040789;Add listener for file change events. Cannot be called after the watcher has been_{@link #start() started}._@param fileChangeListener the listener to add;public void addListener(FileChangeListener fileChangeListener) {_		Assert.notNull(fileChangeListener, "FileChangeListener must not be null")__		synchronized (this.monitor) {_			checkNotStarted()__			this.listeners.add(fileChangeListener)__		}_	};add,listener,for,file,change,events,cannot,be,called,after,the,watcher,has,been,link,start,started,param,file,change,listener,the,listener,to,add;public,void,add,listener,file,change,listener,file,change,listener,assert,not,null,file,change,listener,file,change,listener,must,not,be,null,synchronized,this,monitor,check,not,started,this,listeners,add,file,change,listener
FileSystemWatcher -> public void addListener(FileChangeListener fileChangeListener);1511157177;Add listener for file change events. Cannot be called after the watcher has been_{@link #start() started}._@param fileChangeListener the listener to add;public void addListener(FileChangeListener fileChangeListener) {_		Assert.notNull(fileChangeListener, "FileChangeListener must not be null")__		synchronized (this.monitor) {_			checkNotStarted()__			this.listeners.add(fileChangeListener)__		}_	};add,listener,for,file,change,events,cannot,be,called,after,the,watcher,has,been,link,start,started,param,file,change,listener,the,listener,to,add;public,void,add,listener,file,change,listener,file,change,listener,assert,not,null,file,change,listener,file,change,listener,must,not,be,null,synchronized,this,monitor,check,not,started,this,listeners,add,file,change,listener
FileSystemWatcher -> public void addListener(FileChangeListener fileChangeListener);1516666024;Add listener for file change events. Cannot be called after the watcher has been_{@link #start() started}._@param fileChangeListener the listener to add;public void addListener(FileChangeListener fileChangeListener) {_		Assert.notNull(fileChangeListener, "FileChangeListener must not be null")__		synchronized (this.monitor) {_			checkNotStarted()__			this.listeners.add(fileChangeListener)__		}_	};add,listener,for,file,change,events,cannot,be,called,after,the,watcher,has,been,link,start,started,param,file,change,listener,the,listener,to,add;public,void,add,listener,file,change,listener,file,change,listener,assert,not,null,file,change,listener,file,change,listener,must,not,be,null,synchronized,this,monitor,check,not,started,this,listeners,add,file,change,listener
FileSystemWatcher -> public void addListener(FileChangeListener fileChangeListener);1516838954;Add listener for file change events. Cannot be called after the watcher has been_{@link #start() started}._@param fileChangeListener the listener to add;public void addListener(FileChangeListener fileChangeListener) {_		Assert.notNull(fileChangeListener, "FileChangeListener must not be null")__		synchronized (this.monitor) {_			checkNotStarted()__			this.listeners.add(fileChangeListener)__		}_	};add,listener,for,file,change,events,cannot,be,called,after,the,watcher,has,been,link,start,started,param,file,change,listener,the,listener,to,add;public,void,add,listener,file,change,listener,file,change,listener,assert,not,null,file,change,listener,file,change,listener,must,not,be,null,synchronized,this,monitor,check,not,started,this,listeners,add,file,change,listener
FileSystemWatcher -> public void addListener(FileChangeListener fileChangeListener);1530545187;Add listener for file change events. Cannot be called after the watcher has been_{@link #start() started}._@param fileChangeListener the listener to add;public void addListener(FileChangeListener fileChangeListener) {_		Assert.notNull(fileChangeListener, "FileChangeListener must not be null")__		synchronized (this.monitor) {_			checkNotStarted()__			this.listeners.add(fileChangeListener)__		}_	};add,listener,for,file,change,events,cannot,be,called,after,the,watcher,has,been,link,start,started,param,file,change,listener,the,listener,to,add;public,void,add,listener,file,change,listener,file,change,listener,assert,not,null,file,change,listener,file,change,listener,must,not,be,null,synchronized,this,monitor,check,not,started,this,listeners,add,file,change,listener
FileSystemWatcher -> void stopAfter(int remainingScans);1507173536;Stop monitoring the source folders._@param remainingScans the number of remaining scans;void stopAfter(int remainingScans) {_		Thread thread = null__		synchronized (this.monitor) {_			thread = this.watchThread__			if (thread != null) {_				this.remainingScans.set(remainingScans)__				if (remainingScans <= 0) {_					thread.interrupt()__				}_			}_			this.watchThread = null__		}_		if (Thread.currentThread() != thread) {_			try {_				thread.join()__			}_			catch (InterruptedException ex) {_				Thread.currentThread().interrupt()__			}_		}_	};stop,monitoring,the,source,folders,param,remaining,scans,the,number,of,remaining,scans;void,stop,after,int,remaining,scans,thread,thread,null,synchronized,this,monitor,thread,this,watch,thread,if,thread,null,this,remaining,scans,set,remaining,scans,if,remaining,scans,0,thread,interrupt,this,watch,thread,null,if,thread,current,thread,thread,try,thread,join,catch,interrupted,exception,ex,thread,current,thread,interrupt
FileSystemWatcher -> void stopAfter(int remainingScans);1510040789;Stop monitoring the source folders._@param remainingScans the number of remaining scans;void stopAfter(int remainingScans) {_		Thread thread = null__		synchronized (this.monitor) {_			thread = this.watchThread__			if (thread != null) {_				this.remainingScans.set(remainingScans)__				if (remainingScans <= 0) {_					thread.interrupt()__				}_			}_			this.watchThread = null__		}_		if (thread != null && Thread.currentThread() != thread) {_			try {_				thread.join()__			}_			catch (InterruptedException ex) {_				Thread.currentThread().interrupt()__			}_		}_	};stop,monitoring,the,source,folders,param,remaining,scans,the,number,of,remaining,scans;void,stop,after,int,remaining,scans,thread,thread,null,synchronized,this,monitor,thread,this,watch,thread,if,thread,null,this,remaining,scans,set,remaining,scans,if,remaining,scans,0,thread,interrupt,this,watch,thread,null,if,thread,null,thread,current,thread,thread,try,thread,join,catch,interrupted,exception,ex,thread,current,thread,interrupt
FileSystemWatcher -> void stopAfter(int remainingScans);1511157177;Stop monitoring the source folders._@param remainingScans the number of remaining scans;void stopAfter(int remainingScans) {_		Thread thread = null__		synchronized (this.monitor) {_			thread = this.watchThread__			if (thread != null) {_				this.remainingScans.set(remainingScans)__				if (remainingScans <= 0) {_					thread.interrupt()__				}_			}_			this.watchThread = null__		}_		if (thread != null && Thread.currentThread() != thread) {_			try {_				thread.join()__			}_			catch (InterruptedException ex) {_				Thread.currentThread().interrupt()__			}_		}_	};stop,monitoring,the,source,folders,param,remaining,scans,the,number,of,remaining,scans;void,stop,after,int,remaining,scans,thread,thread,null,synchronized,this,monitor,thread,this,watch,thread,if,thread,null,this,remaining,scans,set,remaining,scans,if,remaining,scans,0,thread,interrupt,this,watch,thread,null,if,thread,null,thread,current,thread,thread,try,thread,join,catch,interrupted,exception,ex,thread,current,thread,interrupt
FileSystemWatcher -> void stopAfter(int remainingScans);1516666024;Stop monitoring the source folders._@param remainingScans the number of remaining scans;void stopAfter(int remainingScans) {_		Thread thread__		synchronized (this.monitor) {_			thread = this.watchThread__			if (thread != null) {_				this.remainingScans.set(remainingScans)__				if (remainingScans <= 0) {_					thread.interrupt()__				}_			}_			this.watchThread = null__		}_		if (thread != null && Thread.currentThread() != thread) {_			try {_				thread.join()__			}_			catch (InterruptedException ex) {_				Thread.currentThread().interrupt()__			}_		}_	};stop,monitoring,the,source,folders,param,remaining,scans,the,number,of,remaining,scans;void,stop,after,int,remaining,scans,thread,thread,synchronized,this,monitor,thread,this,watch,thread,if,thread,null,this,remaining,scans,set,remaining,scans,if,remaining,scans,0,thread,interrupt,this,watch,thread,null,if,thread,null,thread,current,thread,thread,try,thread,join,catch,interrupted,exception,ex,thread,current,thread,interrupt
FileSystemWatcher -> void stopAfter(int remainingScans);1516838954;Stop monitoring the source folders._@param remainingScans the number of remaining scans;void stopAfter(int remainingScans) {_		Thread thread__		synchronized (this.monitor) {_			thread = this.watchThread__			if (thread != null) {_				this.remainingScans.set(remainingScans)__				if (remainingScans <= 0) {_					thread.interrupt()__				}_			}_			this.watchThread = null__		}_		if (thread != null && Thread.currentThread() != thread) {_			try {_				thread.join()__			}_			catch (InterruptedException ex) {_				Thread.currentThread().interrupt()__			}_		}_	};stop,monitoring,the,source,folders,param,remaining,scans,the,number,of,remaining,scans;void,stop,after,int,remaining,scans,thread,thread,synchronized,this,monitor,thread,this,watch,thread,if,thread,null,this,remaining,scans,set,remaining,scans,if,remaining,scans,0,thread,interrupt,this,watch,thread,null,if,thread,null,thread,current,thread,thread,try,thread,join,catch,interrupted,exception,ex,thread,current,thread,interrupt
FileSystemWatcher -> void stopAfter(int remainingScans);1530545187;Stop monitoring the source folders._@param remainingScans the number of remaining scans;void stopAfter(int remainingScans) {_		Thread thread__		synchronized (this.monitor) {_			thread = this.watchThread__			if (thread != null) {_				this.remainingScans.set(remainingScans)__				if (remainingScans <= 0) {_					thread.interrupt()__				}_			}_			this.watchThread = null__		}_		if (thread != null && Thread.currentThread() != thread) {_			try {_				thread.join()__			}_			catch (InterruptedException ex) {_				Thread.currentThread().interrupt()__			}_		}_	};stop,monitoring,the,source,folders,param,remaining,scans,the,number,of,remaining,scans;void,stop,after,int,remaining,scans,thread,thread,synchronized,this,monitor,thread,this,watch,thread,if,thread,null,this,remaining,scans,set,remaining,scans,if,remaining,scans,0,thread,interrupt,this,watch,thread,null,if,thread,null,thread,current,thread,thread,try,thread,join,catch,interrupted,exception,ex,thread,current,thread,interrupt
FileSystemWatcher -> public FileSystemWatcher(boolean daemon, Duration pollInterval, 			Duration quietPeriod);1511157177;Create a new {@link FileSystemWatcher} instance._@param daemon if a daemon thread used to monitor changes_@param pollInterval the amount of time to wait between checking for changes_@param quietPeriod the amount of time required after a change has been detected to_ensure that updates have completed;public FileSystemWatcher(boolean daemon, Duration pollInterval,_			Duration quietPeriod) {_		Assert.notNull(pollInterval, "PollInterval must not be null")__		Assert.notNull(quietPeriod, "QuietPeriod must not be null")__		Assert.isTrue(pollInterval.toMillis() > 0, "PollInterval must be positive")__		Assert.isTrue(quietPeriod.toMillis() > 0, "QuietPeriod must be positive")__		Assert.isTrue(pollInterval.toMillis() > quietPeriod.toMillis(),_				"PollInterval must be greater than QuietPeriod")__		this.daemon = daemon__		this.pollInterval = pollInterval.toMillis()__		this.quietPeriod = quietPeriod.toMillis()__	};create,a,new,link,file,system,watcher,instance,param,daemon,if,a,daemon,thread,used,to,monitor,changes,param,poll,interval,the,amount,of,time,to,wait,between,checking,for,changes,param,quiet,period,the,amount,of,time,required,after,a,change,has,been,detected,to,ensure,that,updates,have,completed;public,file,system,watcher,boolean,daemon,duration,poll,interval,duration,quiet,period,assert,not,null,poll,interval,poll,interval,must,not,be,null,assert,not,null,quiet,period,quiet,period,must,not,be,null,assert,is,true,poll,interval,to,millis,0,poll,interval,must,be,positive,assert,is,true,quiet,period,to,millis,0,quiet,period,must,be,positive,assert,is,true,poll,interval,to,millis,quiet,period,to,millis,poll,interval,must,be,greater,than,quiet,period,this,daemon,daemon,this,poll,interval,poll,interval,to,millis,this,quiet,period,quiet,period,to,millis
FileSystemWatcher -> public FileSystemWatcher(boolean daemon, Duration pollInterval, 			Duration quietPeriod);1516666024;Create a new {@link FileSystemWatcher} instance._@param daemon if a daemon thread used to monitor changes_@param pollInterval the amount of time to wait between checking for changes_@param quietPeriod the amount of time required after a change has been detected to_ensure that updates have completed;public FileSystemWatcher(boolean daemon, Duration pollInterval,_			Duration quietPeriod) {_		Assert.notNull(pollInterval, "PollInterval must not be null")__		Assert.notNull(quietPeriod, "QuietPeriod must not be null")__		Assert.isTrue(pollInterval.toMillis() > 0, "PollInterval must be positive")__		Assert.isTrue(quietPeriod.toMillis() > 0, "QuietPeriod must be positive")__		Assert.isTrue(pollInterval.toMillis() > quietPeriod.toMillis(),_				"PollInterval must be greater than QuietPeriod")__		this.daemon = daemon__		this.pollInterval = pollInterval.toMillis()__		this.quietPeriod = quietPeriod.toMillis()__	};create,a,new,link,file,system,watcher,instance,param,daemon,if,a,daemon,thread,used,to,monitor,changes,param,poll,interval,the,amount,of,time,to,wait,between,checking,for,changes,param,quiet,period,the,amount,of,time,required,after,a,change,has,been,detected,to,ensure,that,updates,have,completed;public,file,system,watcher,boolean,daemon,duration,poll,interval,duration,quiet,period,assert,not,null,poll,interval,poll,interval,must,not,be,null,assert,not,null,quiet,period,quiet,period,must,not,be,null,assert,is,true,poll,interval,to,millis,0,poll,interval,must,be,positive,assert,is,true,quiet,period,to,millis,0,quiet,period,must,be,positive,assert,is,true,poll,interval,to,millis,quiet,period,to,millis,poll,interval,must,be,greater,than,quiet,period,this,daemon,daemon,this,poll,interval,poll,interval,to,millis,this,quiet,period,quiet,period,to,millis
FileSystemWatcher -> public FileSystemWatcher(boolean daemon, Duration pollInterval, 			Duration quietPeriod);1516838954;Create a new {@link FileSystemWatcher} instance._@param daemon if a daemon thread used to monitor changes_@param pollInterval the amount of time to wait between checking for changes_@param quietPeriod the amount of time required after a change has been detected to_ensure that updates have completed;public FileSystemWatcher(boolean daemon, Duration pollInterval,_			Duration quietPeriod) {_		Assert.notNull(pollInterval, "PollInterval must not be null")__		Assert.notNull(quietPeriod, "QuietPeriod must not be null")__		Assert.isTrue(pollInterval.toMillis() > 0, "PollInterval must be positive")__		Assert.isTrue(quietPeriod.toMillis() > 0, "QuietPeriod must be positive")__		Assert.isTrue(pollInterval.toMillis() > quietPeriod.toMillis(),_				"PollInterval must be greater than QuietPeriod")__		this.daemon = daemon__		this.pollInterval = pollInterval.toMillis()__		this.quietPeriod = quietPeriod.toMillis()__	};create,a,new,link,file,system,watcher,instance,param,daemon,if,a,daemon,thread,used,to,monitor,changes,param,poll,interval,the,amount,of,time,to,wait,between,checking,for,changes,param,quiet,period,the,amount,of,time,required,after,a,change,has,been,detected,to,ensure,that,updates,have,completed;public,file,system,watcher,boolean,daemon,duration,poll,interval,duration,quiet,period,assert,not,null,poll,interval,poll,interval,must,not,be,null,assert,not,null,quiet,period,quiet,period,must,not,be,null,assert,is,true,poll,interval,to,millis,0,poll,interval,must,be,positive,assert,is,true,quiet,period,to,millis,0,quiet,period,must,be,positive,assert,is,true,poll,interval,to,millis,quiet,period,to,millis,poll,interval,must,be,greater,than,quiet,period,this,daemon,daemon,this,poll,interval,poll,interval,to,millis,this,quiet,period,quiet,period,to,millis
FileSystemWatcher -> public FileSystemWatcher(boolean daemon, Duration pollInterval, 			Duration quietPeriod);1530545187;Create a new {@link FileSystemWatcher} instance._@param daemon if a daemon thread used to monitor changes_@param pollInterval the amount of time to wait between checking for changes_@param quietPeriod the amount of time required after a change has been detected to_ensure that updates have completed;public FileSystemWatcher(boolean daemon, Duration pollInterval,_			Duration quietPeriod) {_		Assert.notNull(pollInterval, "PollInterval must not be null")__		Assert.notNull(quietPeriod, "QuietPeriod must not be null")__		Assert.isTrue(pollInterval.toMillis() > 0, "PollInterval must be positive")__		Assert.isTrue(quietPeriod.toMillis() > 0, "QuietPeriod must be positive")__		Assert.isTrue(pollInterval.toMillis() > quietPeriod.toMillis(),_				"PollInterval must be greater than QuietPeriod")__		this.daemon = daemon__		this.pollInterval = pollInterval.toMillis()__		this.quietPeriod = quietPeriod.toMillis()__	};create,a,new,link,file,system,watcher,instance,param,daemon,if,a,daemon,thread,used,to,monitor,changes,param,poll,interval,the,amount,of,time,to,wait,between,checking,for,changes,param,quiet,period,the,amount,of,time,required,after,a,change,has,been,detected,to,ensure,that,updates,have,completed;public,file,system,watcher,boolean,daemon,duration,poll,interval,duration,quiet,period,assert,not,null,poll,interval,poll,interval,must,not,be,null,assert,not,null,quiet,period,quiet,period,must,not,be,null,assert,is,true,poll,interval,to,millis,0,poll,interval,must,be,positive,assert,is,true,quiet,period,to,millis,0,quiet,period,must,be,positive,assert,is,true,poll,interval,to,millis,quiet,period,to,millis,poll,interval,must,be,greater,than,quiet,period,this,daemon,daemon,this,poll,interval,poll,interval,to,millis,this,quiet,period,quiet,period,to,millis
FileSystemWatcher -> public FileSystemWatcher(boolean daemon, long pollInterval, long quietPeriod);1507173536;Create a new {@link FileSystemWatcher} instance._@param daemon if a daemon thread used to monitor changes_@param pollInterval the amount of time to wait between checking for changes_@param quietPeriod the amount of time required after a change has been detected to_ensure that updates have completed;public FileSystemWatcher(boolean daemon, long pollInterval, long quietPeriod) {_		Assert.isTrue(pollInterval > 0, "PollInterval must be positive")__		Assert.isTrue(quietPeriod > 0, "QuietPeriod must be positive")__		Assert.isTrue(pollInterval > quietPeriod,_				"PollInterval must be greater than QuietPeriod")__		this.daemon = daemon__		this.pollInterval = pollInterval__		this.quietPeriod = quietPeriod__	};create,a,new,link,file,system,watcher,instance,param,daemon,if,a,daemon,thread,used,to,monitor,changes,param,poll,interval,the,amount,of,time,to,wait,between,checking,for,changes,param,quiet,period,the,amount,of,time,required,after,a,change,has,been,detected,to,ensure,that,updates,have,completed;public,file,system,watcher,boolean,daemon,long,poll,interval,long,quiet,period,assert,is,true,poll,interval,0,poll,interval,must,be,positive,assert,is,true,quiet,period,0,quiet,period,must,be,positive,assert,is,true,poll,interval,quiet,period,poll,interval,must,be,greater,than,quiet,period,this,daemon,daemon,this,poll,interval,poll,interval,this,quiet,period,quiet,period
FileSystemWatcher -> public FileSystemWatcher(boolean daemon, long pollInterval, long quietPeriod);1510040789;Create a new {@link FileSystemWatcher} instance._@param daemon if a daemon thread used to monitor changes_@param pollInterval the amount of time to wait between checking for changes_@param quietPeriod the amount of time required after a change has been detected to_ensure that updates have completed;public FileSystemWatcher(boolean daemon, long pollInterval, long quietPeriod) {_		Assert.isTrue(pollInterval > 0, "PollInterval must be positive")__		Assert.isTrue(quietPeriod > 0, "QuietPeriod must be positive")__		Assert.isTrue(pollInterval > quietPeriod,_				"PollInterval must be greater than QuietPeriod")__		this.daemon = daemon__		this.pollInterval = pollInterval__		this.quietPeriod = quietPeriod__	};create,a,new,link,file,system,watcher,instance,param,daemon,if,a,daemon,thread,used,to,monitor,changes,param,poll,interval,the,amount,of,time,to,wait,between,checking,for,changes,param,quiet,period,the,amount,of,time,required,after,a,change,has,been,detected,to,ensure,that,updates,have,completed;public,file,system,watcher,boolean,daemon,long,poll,interval,long,quiet,period,assert,is,true,poll,interval,0,poll,interval,must,be,positive,assert,is,true,quiet,period,0,quiet,period,must,be,positive,assert,is,true,poll,interval,quiet,period,poll,interval,must,be,greater,than,quiet,period,this,daemon,daemon,this,poll,interval,poll,interval,this,quiet,period,quiet,period
FileSystemWatcher -> public void addSourceFolder(File folder);1507173536;Add a source folder to monitor. Cannot be called after the watcher has been_{@link #start() started}._@param folder the folder to monitor;public void addSourceFolder(File folder) {_		Assert.notNull(folder, "Folder must not be null")__		Assert.isTrue(folder.isDirectory(),_				"Folder '" + folder + "' must exist and must" + " be a directory")__		synchronized (this.monitor) {_			checkNotStarted()__			this.folders.put(folder, null)__		}_	};add,a,source,folder,to,monitor,cannot,be,called,after,the,watcher,has,been,link,start,started,param,folder,the,folder,to,monitor;public,void,add,source,folder,file,folder,assert,not,null,folder,folder,must,not,be,null,assert,is,true,folder,is,directory,folder,folder,must,exist,and,must,be,a,directory,synchronized,this,monitor,check,not,started,this,folders,put,folder,null
FileSystemWatcher -> public void addSourceFolder(File folder);1510040789;Add a source folder to monitor. Cannot be called after the watcher has been_{@link #start() started}._@param folder the folder to monitor;public void addSourceFolder(File folder) {_		Assert.notNull(folder, "Folder must not be null")__		Assert.isTrue(folder.isDirectory(),_				"Folder '" + folder + "' must exist and must" + " be a directory")__		synchronized (this.monitor) {_			checkNotStarted()__			this.folders.put(folder, null)__		}_	};add,a,source,folder,to,monitor,cannot,be,called,after,the,watcher,has,been,link,start,started,param,folder,the,folder,to,monitor;public,void,add,source,folder,file,folder,assert,not,null,folder,folder,must,not,be,null,assert,is,true,folder,is,directory,folder,folder,must,exist,and,must,be,a,directory,synchronized,this,monitor,check,not,started,this,folders,put,folder,null
FileSystemWatcher -> public void addSourceFolder(File folder);1511157177;Add a source folder to monitor. Cannot be called after the watcher has been_{@link #start() started}._@param folder the folder to monitor;public void addSourceFolder(File folder) {_		Assert.notNull(folder, "Folder must not be null")__		Assert.isTrue(folder.isDirectory(),_				"Folder '" + folder + "' must exist and must" + " be a directory")__		synchronized (this.monitor) {_			checkNotStarted()__			this.folders.put(folder, null)__		}_	};add,a,source,folder,to,monitor,cannot,be,called,after,the,watcher,has,been,link,start,started,param,folder,the,folder,to,monitor;public,void,add,source,folder,file,folder,assert,not,null,folder,folder,must,not,be,null,assert,is,true,folder,is,directory,folder,folder,must,exist,and,must,be,a,directory,synchronized,this,monitor,check,not,started,this,folders,put,folder,null
FileSystemWatcher -> public void addSourceFolder(File folder);1516666024;Add a source folder to monitor. Cannot be called after the watcher has been_{@link #start() started}._@param folder the folder to monitor;public void addSourceFolder(File folder) {_		Assert.notNull(folder, "Folder must not be null")__		Assert.isTrue(folder.isDirectory(),_				"Folder '" + folder + "' must exist and must" + " be a directory")__		synchronized (this.monitor) {_			checkNotStarted()__			this.folders.put(folder, null)__		}_	};add,a,source,folder,to,monitor,cannot,be,called,after,the,watcher,has,been,link,start,started,param,folder,the,folder,to,monitor;public,void,add,source,folder,file,folder,assert,not,null,folder,folder,must,not,be,null,assert,is,true,folder,is,directory,folder,folder,must,exist,and,must,be,a,directory,synchronized,this,monitor,check,not,started,this,folders,put,folder,null
FileSystemWatcher -> public void addSourceFolder(File folder);1516838954;Add a source folder to monitor. Cannot be called after the watcher has been_{@link #start() started}._@param folder the folder to monitor;public void addSourceFolder(File folder) {_		Assert.notNull(folder, "Folder must not be null")__		Assert.isTrue(folder.isDirectory(),_				"Folder '" + folder + "' must exist and must" + " be a directory")__		synchronized (this.monitor) {_			checkNotStarted()__			this.folders.put(folder, null)__		}_	};add,a,source,folder,to,monitor,cannot,be,called,after,the,watcher,has,been,link,start,started,param,folder,the,folder,to,monitor;public,void,add,source,folder,file,folder,assert,not,null,folder,folder,must,not,be,null,assert,is,true,folder,is,directory,folder,folder,must,exist,and,must,be,a,directory,synchronized,this,monitor,check,not,started,this,folders,put,folder,null
FileSystemWatcher -> public void addSourceFolder(File folder);1530545187;Add a source folder to monitor. Cannot be called after the watcher has been_{@link #start() started}._@param folder the folder to monitor;public void addSourceFolder(File folder) {_		Assert.notNull(folder, "Folder must not be null")__		Assert.isTrue(!folder.isFile(), "Folder '" + folder + "' must not be a file")__		synchronized (this.monitor) {_			checkNotStarted()__			this.folders.put(folder, null)__		}_	};add,a,source,folder,to,monitor,cannot,be,called,after,the,watcher,has,been,link,start,started,param,folder,the,folder,to,monitor;public,void,add,source,folder,file,folder,assert,not,null,folder,folder,must,not,be,null,assert,is,true,folder,is,file,folder,folder,must,not,be,a,file,synchronized,this,monitor,check,not,started,this,folders,put,folder,null
FileSystemWatcher -> public void addSourceFolders(Iterable<File> folders);1507173536;Add source folders to monitor. Cannot be called after the watcher has been_{@link #start() started}._@param folders the folders to monitor;public void addSourceFolders(Iterable<File> folders) {_		Assert.notNull(folders, "Folders must not be null")__		synchronized (this.monitor) {_			for (File folder : folders) {_				addSourceFolder(folder)__			}_		}_	};add,source,folders,to,monitor,cannot,be,called,after,the,watcher,has,been,link,start,started,param,folders,the,folders,to,monitor;public,void,add,source,folders,iterable,file,folders,assert,not,null,folders,folders,must,not,be,null,synchronized,this,monitor,for,file,folder,folders,add,source,folder,folder
FileSystemWatcher -> public void addSourceFolders(Iterable<File> folders);1510040789;Add source folders to monitor. Cannot be called after the watcher has been_{@link #start() started}._@param folders the folders to monitor;public void addSourceFolders(Iterable<File> folders) {_		Assert.notNull(folders, "Folders must not be null")__		synchronized (this.monitor) {_			for (File folder : folders) {_				addSourceFolder(folder)__			}_		}_	};add,source,folders,to,monitor,cannot,be,called,after,the,watcher,has,been,link,start,started,param,folders,the,folders,to,monitor;public,void,add,source,folders,iterable,file,folders,assert,not,null,folders,folders,must,not,be,null,synchronized,this,monitor,for,file,folder,folders,add,source,folder,folder
FileSystemWatcher -> public void addSourceFolders(Iterable<File> folders);1511157177;Add source folders to monitor. Cannot be called after the watcher has been_{@link #start() started}._@param folders the folders to monitor;public void addSourceFolders(Iterable<File> folders) {_		Assert.notNull(folders, "Folders must not be null")__		synchronized (this.monitor) {_			for (File folder : folders) {_				addSourceFolder(folder)__			}_		}_	};add,source,folders,to,monitor,cannot,be,called,after,the,watcher,has,been,link,start,started,param,folders,the,folders,to,monitor;public,void,add,source,folders,iterable,file,folders,assert,not,null,folders,folders,must,not,be,null,synchronized,this,monitor,for,file,folder,folders,add,source,folder,folder
FileSystemWatcher -> public void addSourceFolders(Iterable<File> folders);1516666024;Add source folders to monitor. Cannot be called after the watcher has been_{@link #start() started}._@param folders the folders to monitor;public void addSourceFolders(Iterable<File> folders) {_		Assert.notNull(folders, "Folders must not be null")__		synchronized (this.monitor) {_			for (File folder : folders) {_				addSourceFolder(folder)__			}_		}_	};add,source,folders,to,monitor,cannot,be,called,after,the,watcher,has,been,link,start,started,param,folders,the,folders,to,monitor;public,void,add,source,folders,iterable,file,folders,assert,not,null,folders,folders,must,not,be,null,synchronized,this,monitor,for,file,folder,folders,add,source,folder,folder
FileSystemWatcher -> public void addSourceFolders(Iterable<File> folders);1516838954;Add source folders to monitor. Cannot be called after the watcher has been_{@link #start() started}._@param folders the folders to monitor;public void addSourceFolders(Iterable<File> folders) {_		Assert.notNull(folders, "Folders must not be null")__		synchronized (this.monitor) {_			for (File folder : folders) {_				addSourceFolder(folder)__			}_		}_	};add,source,folders,to,monitor,cannot,be,called,after,the,watcher,has,been,link,start,started,param,folders,the,folders,to,monitor;public,void,add,source,folders,iterable,file,folders,assert,not,null,folders,folders,must,not,be,null,synchronized,this,monitor,for,file,folder,folders,add,source,folder,folder
FileSystemWatcher -> public void addSourceFolders(Iterable<File> folders);1530545187;Add source folders to monitor. Cannot be called after the watcher has been_{@link #start() started}._@param folders the folders to monitor;public void addSourceFolders(Iterable<File> folders) {_		Assert.notNull(folders, "Folders must not be null")__		synchronized (this.monitor) {_			for (File folder : folders) {_				addSourceFolder(folder)__			}_		}_	};add,source,folders,to,monitor,cannot,be,called,after,the,watcher,has,been,link,start,started,param,folders,the,folders,to,monitor;public,void,add,source,folders,iterable,file,folders,assert,not,null,folders,folders,must,not,be,null,synchronized,this,monitor,for,file,folder,folders,add,source,folder,folder
FileSystemWatcher -> public void setTriggerFilter(FileFilter triggerFilter);1507173536;Set an optional {@link FileFilter} used to limit the files that trigger a change._@param triggerFilter a trigger filter or null;public void setTriggerFilter(FileFilter triggerFilter) {_		synchronized (this.monitor) {_			this.triggerFilter = triggerFilter__		}_	};set,an,optional,link,file,filter,used,to,limit,the,files,that,trigger,a,change,param,trigger,filter,a,trigger,filter,or,null;public,void,set,trigger,filter,file,filter,trigger,filter,synchronized,this,monitor,this,trigger,filter,trigger,filter
FileSystemWatcher -> public void setTriggerFilter(FileFilter triggerFilter);1510040789;Set an optional {@link FileFilter} used to limit the files that trigger a change._@param triggerFilter a trigger filter or null;public void setTriggerFilter(FileFilter triggerFilter) {_		synchronized (this.monitor) {_			this.triggerFilter = triggerFilter__		}_	};set,an,optional,link,file,filter,used,to,limit,the,files,that,trigger,a,change,param,trigger,filter,a,trigger,filter,or,null;public,void,set,trigger,filter,file,filter,trigger,filter,synchronized,this,monitor,this,trigger,filter,trigger,filter
FileSystemWatcher -> public void setTriggerFilter(FileFilter triggerFilter);1511157177;Set an optional {@link FileFilter} used to limit the files that trigger a change._@param triggerFilter a trigger filter or null;public void setTriggerFilter(FileFilter triggerFilter) {_		synchronized (this.monitor) {_			this.triggerFilter = triggerFilter__		}_	};set,an,optional,link,file,filter,used,to,limit,the,files,that,trigger,a,change,param,trigger,filter,a,trigger,filter,or,null;public,void,set,trigger,filter,file,filter,trigger,filter,synchronized,this,monitor,this,trigger,filter,trigger,filter
FileSystemWatcher -> public void setTriggerFilter(FileFilter triggerFilter);1516666024;Set an optional {@link FileFilter} used to limit the files that trigger a change._@param triggerFilter a trigger filter or null;public void setTriggerFilter(FileFilter triggerFilter) {_		synchronized (this.monitor) {_			this.triggerFilter = triggerFilter__		}_	};set,an,optional,link,file,filter,used,to,limit,the,files,that,trigger,a,change,param,trigger,filter,a,trigger,filter,or,null;public,void,set,trigger,filter,file,filter,trigger,filter,synchronized,this,monitor,this,trigger,filter,trigger,filter
FileSystemWatcher -> public void setTriggerFilter(FileFilter triggerFilter);1516838954;Set an optional {@link FileFilter} used to limit the files that trigger a change._@param triggerFilter a trigger filter or null;public void setTriggerFilter(FileFilter triggerFilter) {_		synchronized (this.monitor) {_			this.triggerFilter = triggerFilter__		}_	};set,an,optional,link,file,filter,used,to,limit,the,files,that,trigger,a,change,param,trigger,filter,a,trigger,filter,or,null;public,void,set,trigger,filter,file,filter,trigger,filter,synchronized,this,monitor,this,trigger,filter,trigger,filter
FileSystemWatcher -> public void setTriggerFilter(FileFilter triggerFilter);1530545187;Set an optional {@link FileFilter} used to limit the files that trigger a change._@param triggerFilter a trigger filter or null;public void setTriggerFilter(FileFilter triggerFilter) {_		synchronized (this.monitor) {_			this.triggerFilter = triggerFilter__		}_	};set,an,optional,link,file,filter,used,to,limit,the,files,that,trigger,a,change,param,trigger,filter,a,trigger,filter,or,null;public,void,set,trigger,filter,file,filter,trigger,filter,synchronized,this,monitor,this,trigger,filter,trigger,filter
FileSystemWatcher -> public void start();1507173536;Start monitoring the source folder for changes.;public void start() {_		synchronized (this.monitor) {_			saveInitialSnapshots()__			if (this.watchThread == null) {_				Map<File, FolderSnapshot> localFolders = new HashMap<>()__				localFolders.putAll(this.folders)__				this.watchThread = new Thread(new Watcher(this.remainingScans,_						new ArrayList<>(this.listeners), this.triggerFilter,_						this.pollInterval, this.quietPeriod, localFolders))__				this.watchThread.setName("File Watcher")__				this.watchThread.setDaemon(this.daemon)__				this.watchThread.start()__			}_		}_	};start,monitoring,the,source,folder,for,changes;public,void,start,synchronized,this,monitor,save,initial,snapshots,if,this,watch,thread,null,map,file,folder,snapshot,local,folders,new,hash,map,local,folders,put,all,this,folders,this,watch,thread,new,thread,new,watcher,this,remaining,scans,new,array,list,this,listeners,this,trigger,filter,this,poll,interval,this,quiet,period,local,folders,this,watch,thread,set,name,file,watcher,this,watch,thread,set,daemon,this,daemon,this,watch,thread,start
FileSystemWatcher -> public void start();1510040789;Start monitoring the source folder for changes.;public void start() {_		synchronized (this.monitor) {_			saveInitialSnapshots()__			if (this.watchThread == null) {_				Map<File, FolderSnapshot> localFolders = new HashMap<>()__				localFolders.putAll(this.folders)__				this.watchThread = new Thread(new Watcher(this.remainingScans,_						new ArrayList<>(this.listeners), this.triggerFilter,_						this.pollInterval, this.quietPeriod, localFolders))__				this.watchThread.setName("File Watcher")__				this.watchThread.setDaemon(this.daemon)__				this.watchThread.start()__			}_		}_	};start,monitoring,the,source,folder,for,changes;public,void,start,synchronized,this,monitor,save,initial,snapshots,if,this,watch,thread,null,map,file,folder,snapshot,local,folders,new,hash,map,local,folders,put,all,this,folders,this,watch,thread,new,thread,new,watcher,this,remaining,scans,new,array,list,this,listeners,this,trigger,filter,this,poll,interval,this,quiet,period,local,folders,this,watch,thread,set,name,file,watcher,this,watch,thread,set,daemon,this,daemon,this,watch,thread,start
FileSystemWatcher -> public void start();1511157177;Start monitoring the source folder for changes.;public void start() {_		synchronized (this.monitor) {_			saveInitialSnapshots()__			if (this.watchThread == null) {_				Map<File, FolderSnapshot> localFolders = new HashMap<>()__				localFolders.putAll(this.folders)__				this.watchThread = new Thread(new Watcher(this.remainingScans,_						new ArrayList<>(this.listeners), this.triggerFilter,_						this.pollInterval, this.quietPeriod, localFolders))__				this.watchThread.setName("File Watcher")__				this.watchThread.setDaemon(this.daemon)__				this.watchThread.start()__			}_		}_	};start,monitoring,the,source,folder,for,changes;public,void,start,synchronized,this,monitor,save,initial,snapshots,if,this,watch,thread,null,map,file,folder,snapshot,local,folders,new,hash,map,local,folders,put,all,this,folders,this,watch,thread,new,thread,new,watcher,this,remaining,scans,new,array,list,this,listeners,this,trigger,filter,this,poll,interval,this,quiet,period,local,folders,this,watch,thread,set,name,file,watcher,this,watch,thread,set,daemon,this,daemon,this,watch,thread,start
FileSystemWatcher -> public void start();1516666024;Start monitoring the source folder for changes.;public void start() {_		synchronized (this.monitor) {_			saveInitialSnapshots()__			if (this.watchThread == null) {_				Map<File, FolderSnapshot> localFolders = new HashMap<>()__				localFolders.putAll(this.folders)__				this.watchThread = new Thread(new Watcher(this.remainingScans,_						new ArrayList<>(this.listeners), this.triggerFilter,_						this.pollInterval, this.quietPeriod, localFolders))__				this.watchThread.setName("File Watcher")__				this.watchThread.setDaemon(this.daemon)__				this.watchThread.start()__			}_		}_	};start,monitoring,the,source,folder,for,changes;public,void,start,synchronized,this,monitor,save,initial,snapshots,if,this,watch,thread,null,map,file,folder,snapshot,local,folders,new,hash,map,local,folders,put,all,this,folders,this,watch,thread,new,thread,new,watcher,this,remaining,scans,new,array,list,this,listeners,this,trigger,filter,this,poll,interval,this,quiet,period,local,folders,this,watch,thread,set,name,file,watcher,this,watch,thread,set,daemon,this,daemon,this,watch,thread,start
FileSystemWatcher -> public void start();1516838954;Start monitoring the source folder for changes.;public void start() {_		synchronized (this.monitor) {_			saveInitialSnapshots()__			if (this.watchThread == null) {_				Map<File, FolderSnapshot> localFolders = new HashMap<>()__				localFolders.putAll(this.folders)__				this.watchThread = new Thread(new Watcher(this.remainingScans,_						new ArrayList<>(this.listeners), this.triggerFilter,_						this.pollInterval, this.quietPeriod, localFolders))__				this.watchThread.setName("File Watcher")__				this.watchThread.setDaemon(this.daemon)__				this.watchThread.start()__			}_		}_	};start,monitoring,the,source,folder,for,changes;public,void,start,synchronized,this,monitor,save,initial,snapshots,if,this,watch,thread,null,map,file,folder,snapshot,local,folders,new,hash,map,local,folders,put,all,this,folders,this,watch,thread,new,thread,new,watcher,this,remaining,scans,new,array,list,this,listeners,this,trigger,filter,this,poll,interval,this,quiet,period,local,folders,this,watch,thread,set,name,file,watcher,this,watch,thread,set,daemon,this,daemon,this,watch,thread,start
FileSystemWatcher -> public void start();1530545187;Start monitoring the source folder for changes.;public void start() {_		synchronized (this.monitor) {_			saveInitialSnapshots()__			if (this.watchThread == null) {_				Map<File, FolderSnapshot> localFolders = new HashMap<>()__				localFolders.putAll(this.folders)__				this.watchThread = new Thread(new Watcher(this.remainingScans,_						new ArrayList<>(this.listeners), this.triggerFilter,_						this.pollInterval, this.quietPeriod, localFolders))__				this.watchThread.setName("File Watcher")__				this.watchThread.setDaemon(this.daemon)__				this.watchThread.start()__			}_		}_	};start,monitoring,the,source,folder,for,changes;public,void,start,synchronized,this,monitor,save,initial,snapshots,if,this,watch,thread,null,map,file,folder,snapshot,local,folders,new,hash,map,local,folders,put,all,this,folders,this,watch,thread,new,thread,new,watcher,this,remaining,scans,new,array,list,this,listeners,this,trigger,filter,this,poll,interval,this,quiet,period,local,folders,this,watch,thread,set,name,file,watcher,this,watch,thread,set,daemon,this,daemon,this,watch,thread,start
FileSystemWatcher -> public void stop();1507173536;Stop monitoring the source folders.;public void stop() {_		stopAfter(0)__	};stop,monitoring,the,source,folders;public,void,stop,stop,after,0
FileSystemWatcher -> public void stop();1510040789;Stop monitoring the source folders.;public void stop() {_		stopAfter(0)__	};stop,monitoring,the,source,folders;public,void,stop,stop,after,0
FileSystemWatcher -> public void stop();1511157177;Stop monitoring the source folders.;public void stop() {_		stopAfter(0)__	};stop,monitoring,the,source,folders;public,void,stop,stop,after,0
FileSystemWatcher -> public void stop();1516666024;Stop monitoring the source folders.;public void stop() {_		stopAfter(0)__	};stop,monitoring,the,source,folders;public,void,stop,stop,after,0
FileSystemWatcher -> public void stop();1516838954;Stop monitoring the source folders.;public void stop() {_		stopAfter(0)__	};stop,monitoring,the,source,folders;public,void,stop,stop,after,0
FileSystemWatcher -> public void stop();1530545187;Stop monitoring the source folders.;public void stop() {_		stopAfter(0)__	};stop,monitoring,the,source,folders;public,void,stop,stop,after,0
