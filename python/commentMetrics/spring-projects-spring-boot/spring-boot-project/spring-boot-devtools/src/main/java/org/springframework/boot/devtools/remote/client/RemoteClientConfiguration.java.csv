commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@Bean public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {     return new PropertySourcesPlaceholderConfigurer(). }
false;public;0;12;;@Bean public ClientHttpRequestFactory clientHttpRequestFactory() {     List<ClientHttpRequestInterceptor> interceptors = Arrays.asList(getSecurityInterceptor()).     SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory().     Proxy proxy = this.properties.getRemote().getProxy().     if (proxy.getHost() != null && proxy.getPort() != null) {         requestFactory.setProxy(new java.net.Proxy(Type.HTTP, new InetSocketAddress(proxy.getHost(), proxy.getPort()))).     }     return new InterceptingClientHttpRequestFactory(requestFactory, interceptors). }
false;private;0;9;;private ClientHttpRequestInterceptor getSecurityInterceptor() {     RemoteDevToolsProperties remoteProperties = this.properties.getRemote().     String secretHeaderName = remoteProperties.getSecretHeaderName().     String secret = remoteProperties.getSecret().     Assert.state(secret != null, "The environment value 'spring.devtools.remote.secret' " + "is required to secure your connection.").     return new HttpHeaderInterceptor(secretHeaderName, secret). }
false;public;0;4;;@Override public void afterPropertiesSet() {     logWarnings(). }
false;private;0;10;;private void logWarnings() {     RemoteDevToolsProperties remoteProperties = this.properties.getRemote().     if (!remoteProperties.getRestart().isEnabled()) {         logger.warn("Remote restart is disabled.").     }     if (!this.remoteUrl.startsWith("https://")) {         logger.warn("The connection to " + this.remoteUrl + " is insecure. You should use a URL starting with 'https://'.").     } }
false;public;0;7;;@Bean @RestartScope @ConditionalOnMissingBean public LiveReloadServer liveReloadServer() {     return new LiveReloadServer(this.properties.getLivereload().getPort(), Restarter.getInstance().getThreadFactory()). }
false;public;1;6;;@Override public void onApplicationEvent(ClassPathChangedEvent event) {     String url = this.remoteUrl + this.properties.getRemote().getContextPath().     this.executor.execute(new DelayedLiveReloadTrigger(optionalLiveReloadServer(), this.clientHttpRequestFactory, url)). }
false;public;0;4;;@Bean public OptionalLiveReloadServer optionalLiveReloadServer() {     return new OptionalLiveReloadServer(this.liveReloadServer). }
false;final;0;3;;final ExecutorService getExecutor() {     return this.executor. }
false;public;0;10;;@Bean public ClassPathFileSystemWatcher classPathFileSystemWatcher() {     DefaultRestartInitializer restartInitializer = new DefaultRestartInitializer().     URL[] urls = restartInitializer.getInitialUrls(Thread.currentThread()).     if (urls == null) {         urls = new URL[0].     }     return new ClassPathFileSystemWatcher(getFileSystemWatcherFactory(), classPathRestartStrategy(), urls). }
false;public;0;4;;@Bean public FileSystemWatcherFactory getFileSystemWatcherFactory() {     return this::newFileSystemWatcher. }
false;private;0;11;;private FileSystemWatcher newFileSystemWatcher() {     Restart restartProperties = this.properties.getRestart().     FileSystemWatcher watcher = new FileSystemWatcher(true, restartProperties.getPollInterval(), restartProperties.getQuietPeriod()).     String triggerFile = restartProperties.getTriggerFile().     if (StringUtils.hasLength(triggerFile)) {         watcher.setTriggerFilter(new TriggerFileFilter(triggerFile)).     }     return watcher. }
false;public;0;5;;@Bean public ClassPathRestartStrategy classPathRestartStrategy() {     return new PatternClassPathRestartStrategy(this.properties.getRestart().getAllExclude()). }
false;public;1;7;;@Bean public ClassPathChangeUploader classPathChangeUploader(ClientHttpRequestFactory requestFactory) {     String url = this.remoteUrl + this.properties.getRemote().getContextPath() + "/restart".     return new ClassPathChangeUploader(url, requestFactory). }
