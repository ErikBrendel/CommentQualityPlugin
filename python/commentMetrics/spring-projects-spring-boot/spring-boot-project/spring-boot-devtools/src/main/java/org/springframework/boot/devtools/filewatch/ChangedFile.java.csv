commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the file that was changed.  * @return the file  */ ;/**  * Return the file that was changed.  * @return the file  */ public File getFile() {     return this.file. }
true;public;0;3;/**  * Return the type of change.  * @return the type of change  */ ;/**  * Return the type of change.  * @return the type of change  */ public Type getType() {     return this.type. }
true;public;0;9;/**  * Return the name of the file relative to the source folder.  * @return the relative name  */ ;/**  * Return the name of the file relative to the source folder.  * @return the relative name  */ public String getRelativeName() {     File folder = this.sourceFolder.getAbsoluteFile().     File file = this.file.getAbsoluteFile().     String folderName = StringUtils.cleanPath(folder.getPath()).     String fileName = StringUtils.cleanPath(file.getPath()).     Assert.state(fileName.startsWith(folderName), () -> "The file " + fileName + " is not contained in the source folder " + folderName).     return fileName.substring(folderName.length() + 1). }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null) {         return false.     }     if (obj instanceof ChangedFile) {         ChangedFile other = (ChangedFile) obj.         return this.file.equals(other.file) && this.type.equals(other.type).     }     return super.equals(obj). }
false;public;0;4;;@Override public int hashCode() {     return this.file.hashCode() * 31 + this.type.hashCode(). }
false;public;0;4;;@Override public String toString() {     return this.file + " (" + this.type + ")". }
