commented;modifiers;parameterAmount;loc;comment;code
false;;2;6;;@Bean NonEmbeddedInMemoryDatabaseShutdownExecutor inMemoryDatabaseShutdownExecutor(DataSource dataSource, DataSourceProperties dataSourceProperties) {     return new NonEmbeddedInMemoryDatabaseShutdownExecutor(dataSource, dataSourceProperties). }
false;public;0;10;;@Override public void destroy() throws Exception {     if (dataSourceRequiresShutdown()) {         try (Connection connection = this.dataSource.getConnection()) {             try (Statement statement = connection.createStatement()) {                 statement.execute("SHUTDOWN").             }         }     } }
false;private;0;8;;private boolean dataSourceRequiresShutdown() {     for (InMemoryDatabase inMemoryDatabase : InMemoryDatabase.values()) {         if (inMemoryDatabase.matches(this.dataSourceProperties)) {             return true.         }     }     return false. }
false;;1;7;;boolean matches(DataSourceProperties properties) {     String url = properties.getUrl().     return (url == null || this.urlPrefix == null || url.startsWith(this.urlPrefix)) && this.driverClassNames.contains(properties.determineDriverClassName()). }
false;public;0;4;;@Override public ConfigurationPhase getConfigurationPhase() {     return ConfigurationPhase.REGISTER_BEAN. }
false;public;2;31;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     ConditionMessage.Builder message = ConditionMessage.forCondition("DevTools DataSource Condition").     String[] dataSourceBeanNames = context.getBeanFactory().getBeanNamesForType(DataSource.class).     if (dataSourceBeanNames.length != 1) {         return ConditionOutcome.noMatch(message.didNotFind("a single DataSource bean").atAll()).     }     if (context.getBeanFactory().getBeanNamesForType(DataSourceProperties.class).length != 1) {         return ConditionOutcome.noMatch(message.didNotFind("a single DataSourceProperties bean").atAll()).     }     BeanDefinition dataSourceDefinition = context.getRegistry().getBeanDefinition(dataSourceBeanNames[0]).     if (dataSourceDefinition instanceof AnnotatedBeanDefinition && ((AnnotatedBeanDefinition) dataSourceDefinition).getFactoryMethodMetadata() != null && ((AnnotatedBeanDefinition) dataSourceDefinition).getFactoryMethodMetadata().getDeclaringClassName().startsWith(DataSourceAutoConfiguration.class.getPackage().getName() + ".DataSourceConfiguration$")) {         return ConditionOutcome.match(message.foundExactly("auto-configured DataSource")).     }     return ConditionOutcome.noMatch(message.didNotFind("an auto-configured DataSource").atAll()). }
