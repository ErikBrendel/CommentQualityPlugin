commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public URL[] getInitialUrls(Thread thread) {     if (!isMain(thread)) {         return null.     }     for (StackTraceElement element : thread.getStackTrace()) {         if (isSkippedStackElement(element)) {             return null.         }     }     return getUrls(thread). }
true;protected;1;4;/**  * Returns if the thread is for a main invocation. By default checks the name of the  * thread and the context classloader.  * @param thread the thread to check  * @return {@code true} if the thread is a main invocation  */ ;/**  * Returns if the thread is for a main invocation. By default checks the name of the  * thread and the context classloader.  * @param thread the thread to check  * @return {@code true} if the thread is a main invocation  */ protected boolean isMain(Thread thread) {     return thread.getName().equals("main") && thread.getContextClassLoader().getClass().getName().contains("AppClassLoader"). }
true;private;1;8;/**  * Checks if a specific {@link StackTraceElement} should cause the initializer to be  * skipped.  * @param element the stack element to check  * @return {@code true} if the stack element means that the initializer should be  * skipped  */ ;/**  * Checks if a specific {@link StackTraceElement} should cause the initializer to be  * skipped.  * @param element the stack element to check  * @return {@code true} if the stack element means that the initializer should be  * skipped  */ private boolean isSkippedStackElement(StackTraceElement element) {     for (String skipped : SKIPPED_STACK_ELEMENTS) {         if (element.getClassName().startsWith(skipped)) {             return true.         }     }     return false. }
true;protected;1;3;/**  * Return the URLs that should be used with initialization.  * @param thread the source thread  * @return the URLs  */ ;/**  * Return the URLs that should be used with initialization.  * @param thread the source thread  * @return the URLs  */ protected URL[] getUrls(Thread thread) {     return ChangeableUrls.fromClassLoader(thread.getContextClassLoader()).toArray(). }
