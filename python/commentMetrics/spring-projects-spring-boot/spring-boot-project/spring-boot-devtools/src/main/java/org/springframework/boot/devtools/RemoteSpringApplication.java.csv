commented;modifiers;parameterAmount;loc;comment;code
false;private;1;11;;private void run(String[] args) {     Restarter.initialize(args, RestartInitializer.NONE).     SpringApplication application = new SpringApplication(RemoteClientConfiguration.class).     application.setWebApplicationType(WebApplicationType.NONE).     application.setBanner(getBanner()).     application.setInitializers(getInitializers()).     application.setListeners(getListeners()).     application.run(args).     waitIndefinitely(). }
false;private;0;5;;private Collection<ApplicationContextInitializer<?>> getInitializers() {     List<ApplicationContextInitializer<?>> initializers = new ArrayList<>().     initializers.add(new RestartScopeInitializer()).     return initializers. }
false;private;0;9;;private Collection<ApplicationListener<?>> getListeners() {     List<ApplicationListener<?>> listeners = new ArrayList<>().     listeners.add(new AnsiOutputApplicationListener()).     listeners.add(new ConfigFileApplicationListener()).     listeners.add(new ClasspathLoggingApplicationListener()).     listeners.add(new LoggingApplicationListener()).     listeners.add(new RemoteUrlPropertyExtractor()).     return listeners. }
false;private;0;5;;private Banner getBanner() {     ClassPathResource banner = new ClassPathResource("remote-banner.txt", RemoteSpringApplication.class).     return new ResourceBanner(banner). }
false;private;0;10;;private void waitIndefinitely() {     while (true) {         try {             Thread.sleep(1000).         } catch (InterruptedException ex) {             Thread.currentThread().interrupt().         }     } }
true;public,static;1;3;/**  * Run the {@link RemoteSpringApplication}.  * @param args the program arguments (including the remote URL as a non-option  * argument)  */ ;/**  * Run the {@link RemoteSpringApplication}.  * @param args the program arguments (including the remote URL as a non-option  * argument)  */ public static void main(String[] args) {     new RemoteSpringApplication().run(args). }
