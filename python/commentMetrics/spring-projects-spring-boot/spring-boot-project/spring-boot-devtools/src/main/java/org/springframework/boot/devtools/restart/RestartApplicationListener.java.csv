commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;@Override public void onApplicationEvent(ApplicationEvent event) {     if (event instanceof ApplicationStartingEvent) {         onApplicationStartingEvent((ApplicationStartingEvent) event).     }     if (event instanceof ApplicationPreparedEvent) {         onApplicationPreparedEvent((ApplicationPreparedEvent) event).     }     if (event instanceof ApplicationReadyEvent || event instanceof ApplicationFailedEvent) {         Restarter.getInstance().finish().     }     if (event instanceof ApplicationFailedEvent) {         onApplicationFailedEvent((ApplicationFailedEvent) event).     } }
false;private;1;20;;private void onApplicationStartingEvent(ApplicationStartingEvent event) {     // It's too early to use the Spring environment but we should still allow     // users to disable restart using a System property.     String enabled = System.getProperty(ENABLED_PROPERTY).     if (enabled == null || Boolean.parseBoolean(enabled)) {         String[] args = event.getArgs().         DefaultRestartInitializer initializer = new DefaultRestartInitializer().         boolean restartOnInitialize = !AgentReloader.isActive().         if (!restartOnInitialize) {             logger.info("Restart disabled due to an agent-based reloader being active").         }         Restarter.initialize(args, false, initializer, restartOnInitialize).     } else {         logger.info("Restart disabled due to System property '" + ENABLED_PROPERTY + "' being set to false").         Restarter.disable().     } }
false;private;1;3;;private void onApplicationPreparedEvent(ApplicationPreparedEvent event) {     Restarter.getInstance().prepare(event.getApplicationContext()). }
false;private;1;3;;private void onApplicationFailedEvent(ApplicationFailedEvent event) {     Restarter.getInstance().remove(event.getApplicationContext()). }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
true;public;1;3;/**  * Set the order of the listener.  * @param order the order of the listener  */ ;/**  * Set the order of the listener.  * @param order the order of the listener  */ public void setOrder(int order) {     this.order = order. }
