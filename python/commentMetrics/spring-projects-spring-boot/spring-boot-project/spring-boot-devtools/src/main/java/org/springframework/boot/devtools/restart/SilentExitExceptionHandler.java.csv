commented;modifiers;parameterAmount;loc;comment;code
false;public;2;12;;@Override public void uncaughtException(Thread thread, Throwable exception) {     if (exception instanceof SilentExitException) {         if (isJvmExiting(thread)) {             preventNonZeroExitCode().         }         return.     }     if (this.delegate != null) {         this.delegate.uncaughtException(thread, exception).     } }
false;private;1;8;;private boolean isJvmExiting(Thread exceptionThread) {     for (Thread thread : getAllThreads()) {         if (thread != exceptionThread && thread.isAlive() && !thread.isDaemon()) {             return false.         }     }     return true. }
false;protected;0;10;;protected Thread[] getAllThreads() {     ThreadGroup rootThreadGroup = getRootThreadGroup().     Thread[] threads = new Thread[32].     int count = rootThreadGroup.enumerate(threads).     while (count == threads.length) {         threads = new Thread[threads.length * 2].         count = rootThreadGroup.enumerate(threads).     }     return Arrays.copyOf(threads, count). }
false;private;0;7;;private ThreadGroup getRootThreadGroup() {     ThreadGroup candidate = Thread.currentThread().getThreadGroup().     while (candidate.getParent() != null) {         candidate = candidate.getParent().     }     return candidate. }
false;protected;0;3;;protected void preventNonZeroExitCode() {     System.exit(0). }
false;public,static;1;7;;public static void setup(Thread thread) {     UncaughtExceptionHandler handler = thread.getUncaughtExceptionHandler().     if (!(handler instanceof SilentExitExceptionHandler)) {         handler = new SilentExitExceptionHandler(handler).         thread.setUncaughtExceptionHandler(handler).     } }
false;public,static;0;3;;public static void exitCurrentThread() {     throw new SilentExitException(). }
