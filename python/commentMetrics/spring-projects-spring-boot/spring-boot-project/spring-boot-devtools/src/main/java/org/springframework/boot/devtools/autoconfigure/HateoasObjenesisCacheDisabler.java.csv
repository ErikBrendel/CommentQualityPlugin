commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void afterPropertiesSet() {     disableCaching(). }
false;private;0;6;;private void disableCaching() {     if (!cacheDisabled) {         cacheDisabled = true.         doDisableCaching().     } }
false;private;0;11;;private void doDisableCaching() {     try {         Class<?> type = ClassUtils.forName("org.springframework.hateoas.server.core.DummyInvocationUtils", getClass().getClassLoader()).         removeObjenesisCache(type).     } catch (Exception ex) {     // Assume that Spring HATEOAS is not on the classpath and continue     } }
false;private;1;19;;private void removeObjenesisCache(Class<?> dummyInvocationUtils) {     try {         Field objenesisField = ReflectionUtils.findField(dummyInvocationUtils, "OBJENESIS").         if (objenesisField != null) {             ReflectionUtils.makeAccessible(objenesisField).             Object objenesis = ReflectionUtils.getField(objenesisField, null).             Field cacheField = ReflectionUtils.findField(objenesis.getClass(), "cache").             ReflectionUtils.makeAccessible(cacheField).             ReflectionUtils.setField(cacheField, objenesis, null).         }     } catch (Exception ex) {         logger.warn("Failed to disable Spring HATEOAS's Objenesis cache. ClassCastExceptions may occur", ex).     } }
