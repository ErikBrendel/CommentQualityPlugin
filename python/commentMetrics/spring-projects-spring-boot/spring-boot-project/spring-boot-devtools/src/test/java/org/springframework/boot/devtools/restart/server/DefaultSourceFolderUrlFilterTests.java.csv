commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void mavenSourceFolder() throws Exception {     doTest("my-module/target/classes/"). }
false;public;0;4;;@Test public void gradleEclipseSourceFolder() throws Exception {     doTest("my-module/bin/"). }
false;public;0;4;;@Test public void unusualSourceFolder() throws Exception {     doTest("my-module/something/quite/quite/mad/"). }
false;public;0;15;;@Test public void skippedProjects() throws Exception {     String sourceFolder = "/Users/me/code/spring-boot-samples/" + "spring-boot-sample-devtools".     URL jarUrl = new URL("jar:file:/Users/me/tmp/" + "spring-boot-sample-devtools-1.3.0.BUILD-SNAPSHOT.jar!/").     assertThat(this.filter.isMatch(sourceFolder, jarUrl)).isTrue().     URL nestedJarUrl = new URL("jar:file:/Users/me/tmp/" + "spring-boot-sample-devtools-1.3.0.BUILD-SNAPSHOT.jar!/" + "lib/spring-boot-1.3.0.BUILD-SNAPSHOT.jar!/").     assertThat(this.filter.isMatch(sourceFolder, nestedJarUrl)).isFalse().     URL fileUrl = new URL("file:/Users/me/tmp/" + "spring-boot-sample-devtools-1.3.0.BUILD-SNAPSHOT.jar").     assertThat(this.filter.isMatch(sourceFolder, fileUrl)).isTrue(). }
false;private;1;6;;private void doTest(String sourcePostfix) throws MalformedURLException {     doTest(sourcePostfix, "my-module", true).     doTest(sourcePostfix, "my-module-other", false).     doTest(sourcePostfix, "my-module-other-again", false).     doTest(sourcePostfix, "my-module.other", false). }
false;private;3;11;;private void doTest(String sourcePostfix, String moduleRoot, boolean expected) throws MalformedURLException {     String sourceFolder = SOURCE_ROOT + sourcePostfix.     for (String postfix : COMMON_POSTFIXES) {         for (URL url : getUrls(moduleRoot + postfix)) {             boolean match = this.filter.isMatch(sourceFolder, url).             assertThat(match).as(url + " against " + sourceFolder).isEqualTo(expected).         }     } }
false;private;1;12;;private List<URL> getUrls(String name) throws MalformedURLException {     List<URL> urls = new ArrayList<>().     urls.add(new URL("file:/some/path/" + name)).     urls.add(new URL("file:/some/path/" + name + "!/")).     for (String postfix : COMMON_POSTFIXES) {         urls.add(new URL("jar:file:/some/path/lib-module" + postfix + "!/lib/" + name)).         urls.add(new URL("jar:file:/some/path/lib-module" + postfix + "!/lib/" + name + "!/")).     }     return urls. }
