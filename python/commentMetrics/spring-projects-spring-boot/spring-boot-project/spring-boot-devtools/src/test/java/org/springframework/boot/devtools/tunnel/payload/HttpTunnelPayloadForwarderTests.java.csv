commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void targetChannelMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new HttpTunnelPayloadForwarder(null)).withMessageContaining("TargetChannel must not be null"). }
false;public;0;10;;@Test public void forwardInSequence() throws Exception {     ByteArrayOutputStream out = new ByteArrayOutputStream().     WritableByteChannel channel = Channels.newChannel(out).     HttpTunnelPayloadForwarder forwarder = new HttpTunnelPayloadForwarder(channel).     forwarder.forward(payload(1, "he")).     forwarder.forward(payload(2, "ll")).     forwarder.forward(payload(3, "o")).     assertThat(out.toByteArray()).isEqualTo("hello".getBytes()). }
false;public;0;10;;@Test public void forwardOutOfSequence() throws Exception {     ByteArrayOutputStream out = new ByteArrayOutputStream().     WritableByteChannel channel = Channels.newChannel(out).     HttpTunnelPayloadForwarder forwarder = new HttpTunnelPayloadForwarder(channel).     forwarder.forward(payload(3, "o")).     forwarder.forward(payload(2, "ll")).     forwarder.forward(payload(1, "he")).     assertThat(out.toByteArray()).isEqualTo("hello".getBytes()). }
false;public;0;10;;@Test public void overflow() throws Exception {     WritableByteChannel channel = Channels.newChannel(new ByteArrayOutputStream()).     HttpTunnelPayloadForwarder forwarder = new HttpTunnelPayloadForwarder(channel).     assertThatIllegalStateException().isThrownBy(() -> {         for (int i = 2. i < 130. i++) {             forwarder.forward(payload(i, "data" + i)).         }     }).withMessageContaining("Too many messages queued"). }
false;private;2;3;;private HttpTunnelPayload payload(long sequence, String data) {     return new HttpTunnelPayload(sequence, ByteBuffer.wrap(data.getBytes())). }
