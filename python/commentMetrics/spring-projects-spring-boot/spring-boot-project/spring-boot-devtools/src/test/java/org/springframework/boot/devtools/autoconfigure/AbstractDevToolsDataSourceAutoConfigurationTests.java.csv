commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void singleManuallyConfiguredDataSourceIsNotClosed() throws SQLException {     ConfigurableApplicationContext context = createContext(SingleDataSourceConfiguration.class).     DataSource dataSource = context.getBean(DataSource.class).     Statement statement = configureDataSourceBehavior(dataSource).     verify(statement, never()).execute("SHUTDOWN"). }
false;public;0;11;;@Test public void multipleDataSourcesAreIgnored() throws SQLException {     ConfigurableApplicationContext context = createContext(MultipleDataSourcesConfiguration.class).     Collection<DataSource> dataSources = context.getBeansOfType(DataSource.class).values().     for (DataSource dataSource : dataSources) {         Statement statement = configureDataSourceBehavior(dataSource).         verify(statement, never()).execute("SHUTDOWN").     } }
false;public;0;11;;@Test public void emptyFactoryMethodMetadataIgnored() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     DataSource dataSource = mock(DataSource.class).     AnnotatedGenericBeanDefinition beanDefinition = new AnnotatedGenericBeanDefinition(dataSource.getClass()).     context.registerBeanDefinition("dataSource", beanDefinition).     context.register(DevToolsDataSourceAutoConfiguration.class).     context.refresh().     context.close(). }
false;protected,final;1;8;;protected final Statement configureDataSourceBehavior(DataSource dataSource) throws SQLException {     Connection connection = mock(Connection.class).     Statement statement = mock(Statement.class).     doReturn(connection).when(dataSource).getConnection().     given(connection.createStatement()).willReturn(statement).     return statement. }
false;protected,final;1;3;;protected final ConfigurableApplicationContext createContext(Class<?>... classes) {     return this.createContext(null, classes). }
false;protected,final;2;4;;protected final ConfigurableApplicationContext createContext(String driverClassName, Class<?>... classes) {     return this.createContext(driverClassName, null, classes). }
false;protected,final;3;16;;protected final ConfigurableApplicationContext createContext(String driverClassName, String url, Class<?>... classes) {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(classes).     context.register(DevToolsDataSourceAutoConfiguration.class).     if (driverClassName != null) {         TestPropertyValues.of("spring.datasource.driver-class-name:" + driverClassName).applyTo(context).     }     if (url != null) {         TestPropertyValues.of("spring.datasource.url:" + url).applyTo(context).     }     context.refresh().     return context. }
false;public;0;4;;@Bean public DataSource dataSource() {     return mock(DataSource.class). }
false;public;0;4;;@Bean public DataSource dataSourceOne() {     return mock(DataSource.class). }
false;public;0;4;;@Bean public DataSource dataSourceTwo() {     return mock(DataSource.class). }
false;public;0;4;;@Bean public DataSourceSpyBeanPostProcessor dataSourceSpyBeanPostProcessor() {     return new DataSourceSpyBeanPostProcessor(). }
false;public;2;8;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     if (bean instanceof DataSource) {         bean = spy(bean).     }     return bean. }
false;public;2;5;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     return bean. }
