commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before @After public void cleanup() {     Restarter.clearInstance().     System.clearProperty(ENABLED_PROPERTY). }
false;public;0;5;;@Test public void isHighestPriority() {     assertThat(new RestartApplicationListener().getOrder()).isEqualTo(Ordered.HIGHEST_PRECEDENCE). }
false;public;0;8;;@Test public void initializeWithReady() {     testInitialize(false).     assertThat(Restarter.getInstance()).hasFieldOrPropertyWithValue("args", ARGS).     assertThat(Restarter.getInstance().isFinished()).isTrue().     assertThat((List<?>) ReflectionTestUtils.getField(Restarter.getInstance(), "rootContexts")).isNotEmpty(). }
false;public;0;8;;@Test public void initializeWithFail() {     testInitialize(true).     assertThat(Restarter.getInstance()).hasFieldOrPropertyWithValue("args", ARGS).     assertThat(Restarter.getInstance().isFinished()).isTrue().     assertThat((List<?>) ReflectionTestUtils.getField(Restarter.getInstance(), "rootContexts")).isEmpty(). }
false;public;0;9;;@Test public void disableWithSystemProperty() {     System.setProperty(ENABLED_PROPERTY, "false").     this.output.reset().     testInitialize(false).     assertThat(Restarter.getInstance()).hasFieldOrPropertyWithValue("enabled", false).     assertThat(this.output.toString()).contains("Restart disabled due to System property"). }
false;private;1;20;;private void testInitialize(boolean failed) {     Restarter.clearInstance().     RestartApplicationListener listener = new RestartApplicationListener().     SpringApplication application = new SpringApplication().     ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class).     listener.onApplicationEvent(new ApplicationStartingEvent(application, ARGS)).     assertThat(Restarter.getInstance()).isNotEqualTo(nullValue()).     assertThat(Restarter.getInstance().isFinished()).isFalse().     listener.onApplicationEvent(new ApplicationPreparedEvent(application, ARGS, context)).     if (failed) {         listener.onApplicationEvent(new ApplicationFailedEvent(application, ARGS, context, new RuntimeException())).     } else {         listener.onApplicationEvent(new ApplicationReadyEvent(application, ARGS, context)).     } }
