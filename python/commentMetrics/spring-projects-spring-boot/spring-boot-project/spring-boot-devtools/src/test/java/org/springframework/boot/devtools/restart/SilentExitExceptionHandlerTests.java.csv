commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void run() {     SilentExitExceptionHandler.exitCurrentThread().     fail("Didn't exit"). }
false;public;0;13;;@Test public void setupAndExit() throws Exception {     TestThread testThread = new TestThread() {          @Override         public void run() {             SilentExitExceptionHandler.exitCurrentThread().             fail("Didn't exit").         }     }.     SilentExitExceptionHandler.setup(testThread).     testThread.startAndJoin().     assertThat(testThread.getThrown()).isNull(). }
false;public;0;4;;@Override public void run() {     throw new IllegalStateException("Expected"). }
false;public;0;12;;@Test public void doesntInterfereWithOtherExceptions() throws Exception {     TestThread testThread = new TestThread() {          @Override         public void run() {             throw new IllegalStateException("Expected").         }     }.     SilentExitExceptionHandler.setup(testThread).     testThread.startAndJoin().     assertThat(testThread.getThrown().getMessage()).isEqualTo("Expected"). }
false;public;0;17;;@Test public void preventsNonZeroExitCodeWhenAllOtherThreadsAreDaemonThreads() {     try {         SilentExitExceptionHandler.exitCurrentThread().     } catch (Exception ex) {         TestSilentExitExceptionHandler silentExitExceptionHandler = new TestSilentExitExceptionHandler().         silentExitExceptionHandler.uncaughtException(Thread.currentThread(), ex).         try {             assertThat(silentExitExceptionHandler.nonZeroExitCodePrevented).isTrue().         } finally {             silentExitExceptionHandler.cleanUp().         }     } }
false;public;0;3;;public Throwable getThrown() {     return this.thrown. }
false;public;0;4;;public void startAndJoin() throws InterruptedException {     start().     join(). }
false;protected;0;4;;@Override protected void preventNonZeroExitCode() {     this.nonZeroExitCodePrevented = true. }
false;protected;0;24;;@Override protected Thread[] getAllThreads() {     final CountDownLatch threadRunning = new CountDownLatch(1).     Thread daemonThread = new Thread(() -> {         synchronized (TestSilentExitExceptionHandler.this.monitor) {             threadRunning.countDown().             try {                 TestSilentExitExceptionHandler.this.monitor.wait().             } catch (InterruptedException ex) {                 Thread.currentThread().interrupt().             }         }     }).     daemonThread.setDaemon(true).     daemonThread.start().     try {         threadRunning.await().     } catch (InterruptedException ex) {         Thread.currentThread().interrupt().     }     return new Thread[] { Thread.currentThread(), daemonThread }. }
false;private;0;5;;private void cleanUp() {     synchronized (this.monitor) {         this.monitor.notifyAll().     } }
