commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.server = new HttpRestartServer(this.delegate). }
false;public;0;6;;@Test public void sourceFolderUrlFilterMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new HttpRestartServer((SourceFolderUrlFilter) null)).withMessageContaining("SourceFolderUrlFilter must not be null"). }
false;public;0;6;;@Test public void restartServerMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new HttpRestartServer((RestartServer) null)).withMessageContaining("RestartServer must not be null"). }
false;public;0;14;;@Test public void sendClassLoaderFiles() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest().     MockHttpServletResponse response = new MockHttpServletResponse().     ClassLoaderFiles files = new ClassLoaderFiles().     files.addFile("name", new ClassLoaderFile(Kind.ADDED, new byte[0])).     byte[] bytes = serialize(files).     request.setContent(bytes).     this.server.handle(new ServletServerHttpRequest(request), new ServletServerHttpResponse(response)).     verify(this.delegate).updateAndRestart(this.filesCaptor.capture()).     assertThat(this.filesCaptor.getValue().getFile("name")).isNotNull().     assertThat(response.getStatus()).isEqualTo(200). }
false;public;0;10;;@Test public void sendNoContent() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest().     MockHttpServletResponse response = new MockHttpServletResponse().     this.server.handle(new ServletServerHttpRequest(request), new ServletServerHttpResponse(response)).     verifyZeroInteractions(this.delegate).     assertThat(response.getStatus()).isEqualTo(500). }
false;public;0;10;;@Test public void sendBadData() throws Exception {     MockHttpServletRequest request = new MockHttpServletRequest().     MockHttpServletResponse response = new MockHttpServletResponse().     request.setContent(new byte[] { 0, 0, 0 }).     this.server.handle(new ServletServerHttpRequest(request), new ServletServerHttpResponse(response)).     verifyZeroInteractions(this.delegate).     assertThat(response.getStatus()).isEqualTo(500). }
false;private;1;7;;private byte[] serialize(Object object) throws IOException {     ByteArrayOutputStream bos = new ByteArrayOutputStream().     ObjectOutputStream oos = new ObjectOutputStream(bos).     oos.writeObject(object).     oos.close().     return bos.toByteArray(). }
