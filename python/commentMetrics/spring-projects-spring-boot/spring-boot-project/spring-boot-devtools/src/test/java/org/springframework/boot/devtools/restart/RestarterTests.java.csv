commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     RestarterInitializer.setRestarterInstance(). }
false;public;0;4;;@After public void cleanup() {     Restarter.clearInstance(). }
false;public;0;6;;@Test public void cantGetInstanceBeforeInitialize() {     Restarter.clearInstance().     assertThatIllegalStateException().isThrownBy(Restarter::getInstance).withMessageContaining("Restarter has not been initialized"). }
false;public;0;11;;@Test public void testRestart() throws Exception {     Restarter.clearInstance().     Thread thread = new Thread(SampleApplication::main).     thread.start().     Thread.sleep(2600).     String output = this.out.toString().     assertThat(StringUtils.countOccurrencesOf(output, "Tick 0")).isGreaterThan(1).     assertThat(StringUtils.countOccurrencesOf(output, "Tick 1")).isGreaterThan(1).     assertThat(CloseCountingApplicationListener.closed).isGreaterThan(0). }
false;public;0;8;;@Test @SuppressWarnings("rawtypes") public void getOrAddAttributeWithNewAttribute() {     ObjectFactory objectFactory = mock(ObjectFactory.class).     given(objectFactory.getObject()).willReturn("abc").     Object attribute = Restarter.getInstance().getOrAddAttribute("x", objectFactory).     assertThat(attribute).isEqualTo("abc"). }
false;public;0;6;;@Test public void addUrlsMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> Restarter.getInstance().addUrls(null)).withMessageContaining("Urls must not be null"). }
false;public;0;11;;@Test public void addUrls() throws Exception {     URL url = new URL("file:/proj/module-a.jar!/").     Collection<URL> urls = Collections.singleton(url).     Restarter restarter = Restarter.getInstance().     restarter.addUrls(urls).     restarter.restart().     ClassLoader classLoader = ((TestableRestarter) restarter).getRelaunchClassLoader().     assertThat(((URLClassLoader) classLoader).getURLs()[0]).isEqualTo(url). }
false;public;0;6;;@Test public void addClassLoaderFilesMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> Restarter.getInstance().addClassLoaderFiles(null)).withMessageContaining("ClassLoaderFiles must not be null"). }
false;public;0;11;;@Test public void addClassLoaderFiles() {     ClassLoaderFiles classLoaderFiles = new ClassLoaderFiles().     classLoaderFiles.addFile("f", new ClassLoaderFile(Kind.ADDED, "abc".getBytes())).     Restarter restarter = Restarter.getInstance().     restarter.addClassLoaderFiles(classLoaderFiles).     restarter.restart().     ClassLoader classLoader = ((TestableRestarter) restarter).getRelaunchClassLoader().     assertThat(classLoader.getResourceAsStream("f")).hasContent("abc"). }
false;public;0;9;;@Test @SuppressWarnings("rawtypes") public void getOrAddAttributeWithExistingAttribute() {     Restarter.getInstance().getOrAddAttribute("x", () -> "abc").     ObjectFactory objectFactory = mock(ObjectFactory.class).     Object attribute = Restarter.getInstance().getOrAddAttribute("x", objectFactory).     assertThat(attribute).isEqualTo("abc").     verifyZeroInteractions(objectFactory). }
false;public;0;18;;@Test public void getThreadFactory() throws Exception {     final ClassLoader parentLoader = Thread.currentThread().getContextClassLoader().     final ClassLoader contextClassLoader = new URLClassLoader(new URL[0]).     Thread thread = new Thread(() -> {         Runnable runnable = mock(Runnable.class).         Thread regular = new Thread().         ThreadFactory factory = Restarter.getInstance().getThreadFactory().         Thread viaFactory = factory.newThread(runnable).         // Regular threads will inherit the current thread         assertThat(regular.getContextClassLoader()).isEqualTo(contextClassLoader).         // Factory threads should inherit from the initial thread         assertThat(viaFactory.getContextClassLoader()).isEqualTo(parentLoader).     }).     thread.setContextClassLoader(contextClassLoader).     thread.start().     thread.join(). }
false;public;0;9;;@Test public void getInitialUrls() throws Exception {     Restarter.clearInstance().     RestartInitializer initializer = mock(RestartInitializer.class).     URL[] urls = new URL[] { new URL("file:/proj/module-a.jar!/") }.     given(initializer.getInitialUrls(any(Thread.class))).willReturn(urls).     Restarter.initialize(new String[0], false, initializer, false).     assertThat(Restarter.getInstance().getInitialUrls()).isEqualTo(urls). }
false;public;0;4;;@Scheduled(fixedDelay = 200) public void tickBean() {     System.out.println("Tick " + this.count++ + " " + Thread.currentThread()). }
false;public;0;7;;@Scheduled(initialDelay = 500, fixedDelay = 500) public void restart() {     System.out.println("Restart " + Thread.currentThread()).     if (!SampleApplication.quit) {         Restarter.getInstance().restart().     } }
false;public,static;1;10;;public static void main(String... args) {     Restarter.initialize(args, false, new MockRestartInitializer(), true).     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(SampleApplication.class).     context.addApplicationListener(new CloseCountingApplicationListener()).     Restarter.getInstance().prepare(context).     System.out.println("Sleep " + Thread.currentThread()).     sleep().     quit = true. }
false;private,static;0;8;;private static void sleep() {     try {         Thread.sleep(1200).     } catch (InterruptedException ex) {     // Ignore     } }
false;public;1;4;;@Override public void onApplicationEvent(ContextClosedEvent event) {     closed++. }
false;public;1;10;;@Override public void restart(FailureHandler failureHandler) {     try {         stop().         start(failureHandler).     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
false;protected;1;5;;@Override protected Throwable relaunch(ClassLoader classLoader) {     this.relaunchClassLoader = classLoader.     return null. }
false;protected;0;3;;@Override protected void stop() { }
false;public;0;3;;public ClassLoader getRelaunchClassLoader() {     return this.relaunchClassLoader. }
false;static;0;3;;static void setRestarterInstance() {     main(new String[0]). }
false;static;1;3;;static void main(String[] args) {     Restarter.setInstance(new TestableRestarter()). }
