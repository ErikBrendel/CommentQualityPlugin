commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void readHeader() throws Exception {     String header = "".     for (int i = 0. i < 100. i++) {         header += "x-something-" + i + ": xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx".     }     String data = header + "\r\n\r\n" + "content\r\n".     ConnectionInputStream inputStream = new ConnectionInputStream(new ByteArrayInputStream(data.getBytes())).     assertThat(inputStream.readHeader()).isEqualTo(header). }
false;public;0;10;;@Test public void readFully() throws Exception {     byte[] bytes = "the data that we want to read fully".getBytes().     LimitedInputStream source = new LimitedInputStream(new ByteArrayInputStream(bytes), 2).     ConnectionInputStream inputStream = new ConnectionInputStream(source).     byte[] buffer = new byte[bytes.length].     inputStream.readFully(buffer, 0, buffer.length).     assertThat(buffer).isEqualTo(bytes). }
false;public;0;7;;@Test public void checkedRead() throws Exception {     ConnectionInputStream inputStream = new ConnectionInputStream(new ByteArrayInputStream(NO_BYTES)).     assertThatIOException().isThrownBy(inputStream::checkedRead).withMessageContaining("End of stream"). }
false;public;0;9;;@Test public void checkedReadArray() throws Exception {     byte[] buffer = new byte[100].     ConnectionInputStream inputStream = new ConnectionInputStream(new ByteArrayInputStream(NO_BYTES)).     assertThatIOException().isThrownBy(() -> inputStream.checkedRead(buffer, 0, buffer.length)).withMessageContaining("End of stream"). }
false;public;3;4;;@Override public int read(byte[] b, int off, int len) throws IOException {     return super.read(b, off, Math.min(len, this.max)). }
