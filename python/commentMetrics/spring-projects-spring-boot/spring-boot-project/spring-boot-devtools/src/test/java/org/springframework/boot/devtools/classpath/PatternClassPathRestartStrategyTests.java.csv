commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void nullPattern() {     ClassPathRestartStrategy strategy = createStrategy(null).     assertRestartRequired(strategy, "a/b.txt", true). }
false;public;0;5;;@Test public void emptyPattern() {     ClassPathRestartStrategy strategy = createStrategy("").     assertRestartRequired(strategy, "a/b.txt", true). }
false;public;0;8;;@Test public void singlePattern() {     ClassPathRestartStrategy strategy = createStrategy("static/**").     assertRestartRequired(strategy, "static/file.txt", false).     assertRestartRequired(strategy, "static/folder/file.txt", false).     assertRestartRequired(strategy, "public/file.txt", true).     assertRestartRequired(strategy, "public/folder/file.txt", true). }
false;public;0;10;;@Test public void multiplePatterns() {     ClassPathRestartStrategy strategy = createStrategy("static/**,public/**").     assertRestartRequired(strategy, "static/file.txt", false).     assertRestartRequired(strategy, "static/folder/file.txt", false).     assertRestartRequired(strategy, "public/file.txt", false).     assertRestartRequired(strategy, "public/folder/file.txt", false).     assertRestartRequired(strategy, "src/file.txt", true).     assertRestartRequired(strategy, "src/folder/file.txt", true). }
false;public;0;8;;@Test public void pomChange() {     ClassPathRestartStrategy strategy = createStrategy("META-INF/maven/**").     assertRestartRequired(strategy, "pom.xml", true).     String mavenFolder = "META-INF/maven/org.springframework.boot/spring-boot-devtools".     assertRestartRequired(strategy, mavenFolder + "/pom.xml", false).     assertRestartRequired(strategy, mavenFolder + "/pom.properties", false). }
false;public;0;8;;@Test public void testChange() {     ClassPathRestartStrategy strategy = createStrategy("**/*Test.class,**/*Tests.class").     assertRestartRequired(strategy, "com/example/ExampleTests.class", false).     assertRestartRequired(strategy, "com/example/ExampleTest.class", false).     assertRestartRequired(strategy, "com/example/Example.class", true). }
false;private;1;3;;private ClassPathRestartStrategy createStrategy(String pattern) {     return new PatternClassPathRestartStrategy(pattern). }
false;private;3;5;;private void assertRestartRequired(ClassPathRestartStrategy strategy, String relativeName, boolean expected) {     assertThat(strategy.isRestartRequired(mockFile(relativeName))).isEqualTo(expected). }
false;private;1;3;;private ChangedFile mockFile(String relativeName) {     return new ChangedFile(new File("."), new File("./" + relativeName), Type.ADD). }
