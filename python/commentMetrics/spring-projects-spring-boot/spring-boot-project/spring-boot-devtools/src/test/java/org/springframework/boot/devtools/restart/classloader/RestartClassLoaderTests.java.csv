commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() throws Exception {     this.sampleJarFile = createSampleJarFile().     URL url = this.sampleJarFile.toURI().toURL().     ClassLoader classLoader = getClass().getClassLoader().     URL[] urls = new URL[] { url }.     this.parentClassLoader = new URLClassLoader(urls, classLoader).     this.updatedFiles = new ClassLoaderFiles().     this.reloadClassLoader = new RestartClassLoader(this.parentClassLoader, urls, this.updatedFiles). }
false;private;0;12;;private File createSampleJarFile() throws IOException {     File file = this.temp.newFile("sample.jar").     JarOutputStream jarOutputStream = new JarOutputStream(new FileOutputStream(file)).     jarOutputStream.putNextEntry(new ZipEntry(PACKAGE_PATH + "/Sample.class")).     StreamUtils.copy(getClass().getResourceAsStream("Sample.class"), jarOutputStream).     jarOutputStream.closeEntry().     jarOutputStream.putNextEntry(new ZipEntry(PACKAGE_PATH + "/Sample.txt")).     StreamUtils.copy("fromchild", StandardCharsets.UTF_8, jarOutputStream).     jarOutputStream.closeEntry().     jarOutputStream.close().     return file. }
false;public;0;6;;@Test public void parentMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new RestartClassLoader(null, new URL[] {})).withMessageContaining("Parent must not be null"). }
false;public;0;6;;@Test public void updatedFilesMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new RestartClassLoader(this.parentClassLoader, new URL[] {}, null)).withMessageContaining("UpdatedFiles must not be null"). }
false;public;0;6;;@Test public void getResourceFromReloadableUrl() throws Exception {     String content = readString(this.reloadClassLoader.getResourceAsStream(PACKAGE_PATH + "/Sample.txt")).     assertThat(content).startsWith("fromchild"). }
false;public;0;6;;@Test public void getResourceFromParent() throws Exception {     String content = readString(this.reloadClassLoader.getResourceAsStream(PACKAGE_PATH + "/Parent.txt")).     assertThat(content).startsWith("fromparent"). }
false;public;0;6;;@Test public void getResourcesFiltersDuplicates() throws Exception {     List<URL> resources = toList(this.reloadClassLoader.getResources(PACKAGE_PATH + "/Sample.txt")).     assertThat(resources.size()).isEqualTo(1). }
false;public;0;5;;@Test public void loadClassFromReloadableUrl() throws Exception {     Class<?> loaded = this.reloadClassLoader.loadClass(PACKAGE + ".Sample").     assertThat(loaded.getClassLoader()).isEqualTo(this.reloadClassLoader). }
false;public;0;5;;@Test public void loadClassFromParent() throws Exception {     Class<?> loaded = this.reloadClassLoader.loadClass(PACKAGE + ".SampleParent").     assertThat(loaded.getClassLoader()).isEqualTo(getClass().getClassLoader()). }
false;public;0;6;;@Test public void getDeletedResource() {     String name = PACKAGE_PATH + "/Sample.txt".     this.updatedFiles.addFile(name, new ClassLoaderFile(Kind.DELETED, null)).     assertThat(this.reloadClassLoader.getResource(name)).isNull(). }
false;public;0;6;;@Test public void getDeletedResourceAsStream() {     String name = PACKAGE_PATH + "/Sample.txt".     this.updatedFiles.addFile(name, new ClassLoaderFile(Kind.DELETED, null)).     assertThat(this.reloadClassLoader.getResourceAsStream(name)).isNull(). }
false;public;0;8;;@Test public void getUpdatedResource() throws Exception {     String name = PACKAGE_PATH + "/Sample.txt".     byte[] bytes = "abc".getBytes().     this.updatedFiles.addFile(name, new ClassLoaderFile(Kind.MODIFIED, bytes)).     URL resource = this.reloadClassLoader.getResource(name).     assertThat(FileCopyUtils.copyToByteArray(resource.openStream())).isEqualTo(bytes). }
false;public;0;7;;@Test public void getResourcesWithDeleted() throws Exception {     String name = PACKAGE_PATH + "/Sample.txt".     this.updatedFiles.addFile(name, new ClassLoaderFile(Kind.DELETED, null)).     List<URL> resources = toList(this.reloadClassLoader.getResources(name)).     assertThat(resources).isEmpty(). }
false;public;0;9;;@Test public void getResourcesWithUpdated() throws Exception {     String name = PACKAGE_PATH + "/Sample.txt".     byte[] bytes = "abc".getBytes().     this.updatedFiles.addFile(name, new ClassLoaderFile(Kind.MODIFIED, bytes)).     List<URL> resources = toList(this.reloadClassLoader.getResources(name)).     assertThat(FileCopyUtils.copyToByteArray(resources.get(0).openStream())).isEqualTo(bytes). }
false;public;0;7;;@Test public void getDeletedClass() throws Exception {     String name = PACKAGE_PATH + "/Sample.class".     this.updatedFiles.addFile(name, new ClassLoaderFile(Kind.DELETED, null)).     assertThatExceptionOfType(ClassNotFoundException.class).isThrownBy(() -> this.reloadClassLoader.loadClass(PACKAGE + ".Sample")). }
false;public;0;7;;@Test public void getUpdatedClass() throws Exception {     String name = PACKAGE_PATH + "/Sample.class".     this.updatedFiles.addFile(name, new ClassLoaderFile(Kind.MODIFIED, new byte[10])).     assertThatExceptionOfType(ClassFormatError.class).isThrownBy(() -> this.reloadClassLoader.loadClass(PACKAGE + ".Sample")). }
false;public;0;9;;@Test public void getAddedClass() throws Exception {     String name = PACKAGE_PATH + "/SampleParent.class".     byte[] bytes = FileCopyUtils.copyToByteArray(getClass().getResourceAsStream("SampleParent.class")).     this.updatedFiles.addFile(name, new ClassLoaderFile(Kind.ADDED, bytes)).     Class<?> loaded = this.reloadClassLoader.loadClass(PACKAGE + ".SampleParent").     assertThat(loaded.getClassLoader()).isEqualTo(this.reloadClassLoader). }
false;private;1;3;;private String readString(InputStream in) throws IOException {     return new String(FileCopyUtils.copyToByteArray(in)). }
false;private;1;4;;private <T> List<T> toList(Enumeration<T> enumeration) {     return (enumeration != null) ? Collections.list(enumeration) : Collections.emptyList(). }
