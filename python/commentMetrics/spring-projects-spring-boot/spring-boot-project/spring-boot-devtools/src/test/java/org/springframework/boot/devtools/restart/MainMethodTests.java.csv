commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() throws Exception {     this.actualMain = Valid.class.getMethod("main", String[].class). }
false;public;0;5;;@Test public void threadMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new MainMethod(null)).withMessageContaining("Thread must not be null"). }
false;public;0;7;;@Test public void validMainMethod() throws Exception {     MainMethod method = new TestThread(Valid::main).test().     assertThat(method.getMethod()).isEqualTo(this.actualMain).     assertThat(method.getDeclaringClassName()).isEqualTo(this.actualMain.getDeclaringClass().getName()). }
false;public;0;6;;@Test public void missingArgsMainMethod() throws Exception {     assertThatIllegalStateException().isThrownBy(() -> new TestThread(MissingArgs::main).test()).withMessageContaining("Unable to find main method"). }
false;public;0;6;;@Test public void nonStatic() throws Exception {     assertThatIllegalStateException().isThrownBy(() -> new TestThread(() -> new NonStaticMain().main()).test()).withMessageContaining("Unable to find main method"). }
false;public;0;8;;public MainMethod test() throws InterruptedException {     start().     join().     if (this.exception != null) {         ReflectionUtils.rethrowRuntimeException(this.exception).     }     return this.mainMethod. }
false;public;0;10;;@Override public void run() {     try {         this.runnable.run().         this.mainMethod = MainMethodTests.mainMethod.get().     } catch (Exception ex) {         this.exception = ex.     } }
false;public,static;1;3;;public static void main(String... args) {     someOtherMethod(). }
false;private,static;0;3;;private static void someOtherMethod() {     mainMethod.set(new MainMethod()). }
false;public,static;0;3;;public static void main() {     mainMethod.set(new MainMethod()). }
false;public;1;3;;public void main(String... args) {     mainMethod.set(new MainMethod()). }
