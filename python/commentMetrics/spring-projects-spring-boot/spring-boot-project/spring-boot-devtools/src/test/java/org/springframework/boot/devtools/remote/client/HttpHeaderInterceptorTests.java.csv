commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() throws Exception {     MockitoAnnotations.initMocks(this).     this.body = new byte[] {}.     this.httpRequest = new MockHttpServletRequest().     this.request = new ServletServerHttpRequest(this.httpRequest).     this.name = "X-AUTH-TOKEN".     this.value = "secret".     given(this.execution.execute(this.request, this.body)).willReturn(this.response).     this.interceptor = new HttpHeaderInterceptor(this.name, this.value). }
false;public;0;6;;@Test public void constructorNullHeaderName() {     assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderInterceptor(null, this.value)).withMessageContaining("Name must not be empty"). }
false;public;0;6;;@Test public void constructorEmptyHeaderName() {     assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderInterceptor("", this.value)).withMessageContaining("Name must not be empty"). }
false;public;0;6;;@Test public void constructorNullHeaderValue() {     assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderInterceptor(this.name, null)).withMessageContaining("Value must not be empty"). }
false;public;0;6;;@Test public void constructorEmptyHeaderValue() {     assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderInterceptor(this.name, "")).withMessageContaining("Value must not be empty"). }
false;public;0;7;;@Test public void intercept() throws IOException {     ClientHttpResponse result = this.interceptor.intercept(this.request, this.body, this.execution).     assertThat(this.request.getHeaders().getFirst(this.name)).isEqualTo(this.value).     assertThat(result).isEqualTo(this.response). }
