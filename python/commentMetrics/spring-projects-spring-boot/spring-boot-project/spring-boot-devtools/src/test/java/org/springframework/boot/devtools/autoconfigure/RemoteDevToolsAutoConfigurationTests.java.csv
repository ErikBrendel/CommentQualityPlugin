commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.request = new MockHttpServletRequest().     this.response = new MockHttpServletResponse().     this.chain = new MockFilterChain(). }
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;6;;@Test public void disabledIfRemoteSecretIsMissing() {     loadContext("a:b").     assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.context.getBean(DispatcherFilter.class)). }
false;public;0;9;;@Test public void ignoresUnmappedUrl() throws Exception {     loadContext("spring.devtools.remote.secret:supersecret").     DispatcherFilter filter = this.context.getBean(DispatcherFilter.class).     this.request.setRequestURI("/restart").     this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, "supersecret").     filter.doFilter(this.request, this.response, this.chain).     assertRestartInvoked(false). }
false;public;0;8;;@Test public void ignoresIfMissingSecretFromRequest() throws Exception {     loadContext("spring.devtools.remote.secret:supersecret").     DispatcherFilter filter = this.context.getBean(DispatcherFilter.class).     this.request.setRequestURI(DEFAULT_CONTEXT_PATH + "/restart").     filter.doFilter(this.request, this.response, this.chain).     assertRestartInvoked(false). }
false;public;0;9;;@Test public void ignoresInvalidSecretInRequest() throws Exception {     loadContext("spring.devtools.remote.secret:supersecret").     DispatcherFilter filter = this.context.getBean(DispatcherFilter.class).     this.request.setRequestURI(DEFAULT_CONTEXT_PATH + "/restart").     this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, "invalid").     filter.doFilter(this.request, this.response, this.chain).     assertRestartInvoked(false). }
false;public;0;9;;@Test public void invokeRestartWithDefaultSetup() throws Exception {     loadContext("spring.devtools.remote.secret:supersecret").     DispatcherFilter filter = this.context.getBean(DispatcherFilter.class).     this.request.setRequestURI(DEFAULT_CONTEXT_PATH + "/restart").     this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, "supersecret").     filter.doFilter(this.request, this.response, this.chain).     assertRestartInvoked(true). }
false;public;0;10;;@Test public void invokeRestartWithCustomServerContextPath() throws Exception {     loadContext("spring.devtools.remote.secret:supersecret", "server.servlet.context-path:/test").     DispatcherFilter filter = this.context.getBean(DispatcherFilter.class).     this.request.setRequestURI("/test" + DEFAULT_CONTEXT_PATH + "/restart").     this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, "supersecret").     filter.doFilter(this.request, this.response, this.chain).     assertRestartInvoked(true). }
false;public;0;7;;@Test public void disableRestart() {     loadContext("spring.devtools.remote.secret:supersecret", "spring.devtools.remote.restart.enabled:false").     assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.context.getBean("remoteRestartHandlerMapper")). }
false;public;0;10;;@Test public void devToolsHealthReturns200() throws Exception {     loadContext("spring.devtools.remote.secret:supersecret").     DispatcherFilter filter = this.context.getBean(DispatcherFilter.class).     this.request.setRequestURI(DEFAULT_CONTEXT_PATH).     this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, "supersecret").     this.response.setStatus(500).     filter.doFilter(this.request, this.response, this.chain).     assertThat(this.response.getStatus()).isEqualTo(200). }
false;public;0;11;;@Test public void devToolsHealthWithCustomServerContextPathReturns200() throws Exception {     loadContext("spring.devtools.remote.secret:supersecret", "server.servlet.context-path:/test").     DispatcherFilter filter = this.context.getBean(DispatcherFilter.class).     this.request.setRequestURI("/test" + DEFAULT_CONTEXT_PATH).     this.request.addHeader(DEFAULT_SECRET_HEADER_NAME, "supersecret").     this.response.setStatus(500).     filter.doFilter(this.request, this.response, this.chain).     assertThat(this.response.getStatus()).isEqualTo(200). }
false;private;1;4;;private void assertRestartInvoked(boolean value) {     assertThat(this.context.getBean(MockHttpRestartServer.class).invoked).isEqualTo(value). }
false;private;1;7;;private void loadContext(String... properties) {     this.context = new AnnotationConfigWebApplicationContext().     this.context.setServletContext(new MockServletContext()).     this.context.register(Config.class, PropertyPlaceholderAutoConfiguration.class).     TestPropertyValues.of(properties).applyTo(this.context).     this.context.refresh(). }
false;public;0;6;;@Bean public HttpRestartServer remoteRestartHttpRestartServer() {     SourceFolderUrlFilter sourceFolderUrlFilter = mock(SourceFolderUrlFilter.class).     return new MockHttpRestartServer(sourceFolderUrlFilter). }
false;public;2;4;;@Override public void handle(ServerHttpRequest request, ServerHttpResponse response) {     this.invoked = true. }
