commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     MockitoAnnotations.initMocks(this). }
false;public;0;7;;@Test public void eventPublisherMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new ClassPathFileChangeListener(null, this.restartStrategy, this.fileSystemWatcher)).withMessageContaining("EventPublisher must not be null"). }
false;public;0;7;;@Test public void restartStrategyMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new ClassPathFileChangeListener(this.eventPublisher, null, this.fileSystemWatcher)).withMessageContaining("RestartStrategy must not be null"). }
false;public;0;5;;@Test public void sendsEventWithoutRestart() {     testSendsEvent(false).     verify(this.fileSystemWatcher, never()).stop(). }
false;public;0;5;;@Test public void sendsEventWithRestart() {     testSendsEvent(true).     verify(this.fileSystemWatcher).stop(). }
false;private;1;22;;private void testSendsEvent(boolean restart) {     ClassPathFileChangeListener listener = new ClassPathFileChangeListener(this.eventPublisher, this.restartStrategy, this.fileSystemWatcher).     File folder = new File("s1").     File file = new File("f1").     ChangedFile file1 = new ChangedFile(folder, file, ChangedFile.Type.ADD).     ChangedFile file2 = new ChangedFile(folder, file, ChangedFile.Type.ADD).     Set<ChangedFile> files = new LinkedHashSet<>().     files.add(file1).     files.add(file2).     ChangedFiles changedFiles = new ChangedFiles(new File("source"), files).     Set<ChangedFiles> changeSet = Collections.singleton(changedFiles).     if (restart) {         given(this.restartStrategy.isRestartRequired(file2)).willReturn(true).     }     listener.onChange(changeSet).     verify(this.eventPublisher).publishEvent(this.eventCaptor.capture()).     ClassPathChangedEvent actualEvent = (ClassPathChangedEvent) this.eventCaptor.getValue().     assertThat(actualEvent.getChangeSet()).isEqualTo(changeSet).     assertThat(actualEvent.isRestartRequired()).isEqualTo(restart). }
