commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void urlsMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new ClassPathFileSystemWatcher(mock(FileSystemWatcherFactory.class), mock(ClassPathRestartStrategy.class), (URL[]) null)).withMessageContaining("Urls must not be null"). }
false;public;0;29;;@Test public void configuredWithRestartStrategy() throws Exception {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     Map<String, Object> properties = new HashMap<>().     File folder = this.temp.newFolder().     List<URL> urls = new ArrayList<>().     urls.add(new URL("https://spring.io")).     urls.add(folder.toURI().toURL()).     properties.put("urls", urls).     MapPropertySource propertySource = new MapPropertySource("test", properties).     context.getEnvironment().getPropertySources().addLast(propertySource).     context.register(Config.class).     context.refresh().     Thread.sleep(200).     File classFile = new File(folder, "Example.class").     FileCopyUtils.copy("file".getBytes(), classFile).     Thread.sleep(1000).     List<ClassPathChangedEvent> events = context.getBean(Listener.class).getEvents().     for (int i = 0. i < 20. i++) {         if (!events.isEmpty()) {             break.         }         Thread.sleep(500).     }     assertThat(events.size()).isEqualTo(1).     assertThat(events.get(0).getChangeSet().iterator().next().getFiles().iterator().next().getFile()).isEqualTo(classFile).     context.close(). }
false;public;0;8;;@Bean public ClassPathFileSystemWatcher watcher() {     FileSystemWatcher watcher = new FileSystemWatcher(false, Duration.ofMillis(100), Duration.ofMillis(10)).     URL[] urls = this.environment.getProperty("urls", URL[].class).     return new ClassPathFileSystemWatcher(new MockFileSystemWatcherFactory(watcher), restartStrategy(), urls). }
false;public;0;4;;@Bean public ClassPathRestartStrategy restartStrategy() {     return (file) -> false. }
false;public;0;4;;@Bean public Listener listener() {     return new Listener(). }
false;public;1;4;;@Override public void onApplicationEvent(ClassPathChangedEvent event) {     this.events.add(event). }
false;public;0;3;;public List<ClassPathChangedEvent> getEvents() {     return this.events. }
false;public;0;4;;@Override public FileSystemWatcher getFileSystemWatcher() {     return this.watcher. }
