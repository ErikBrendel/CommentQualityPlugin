commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod) throws IOException {     return new MockRequest(uri, httpMethod). }
false;public;1;5;;public void willRespond(HttpStatus... response) {     for (HttpStatus status : response) {         this.responses.add(new Response(0, null, status)).     } }
false;public;1;5;;public void willRespond(IOException... response) {     for (IOException exception : response) {         this.responses.addLast(exception).     } }
false;public;1;5;;public void willRespond(String... response) {     for (String payload : response) {         this.responses.add(new Response(0, payload.getBytes(), HttpStatus.OK)).     } }
false;public;2;3;;public void willRespondAfterDelay(int delay, HttpStatus status) {     this.responses.add(new Response(delay, null, status)). }
false;public;0;3;;public List<MockClientHttpRequest> getExecutedRequests() {     return this.executedRequests. }
false;protected;0;13;;@Override protected ClientHttpResponse executeInternal() throws IOException {     MockClientHttpRequestFactory.this.executedRequests.add(this).     Object response = MockClientHttpRequestFactory.this.responses.pollFirst().     if (response instanceof IOException) {         throw (IOException) response.     }     if (response == null) {         response = new Response(0, null, HttpStatus.GONE).     }     return ((Response) response).asHttpResponse(MockClientHttpRequestFactory.this.seq). }
false;public;1;13;;public ClientHttpResponse asHttpResponse(AtomicLong seq) {     MockClientHttpResponse httpResponse = new MockClientHttpResponse((this.payload != null) ? this.payload : NO_DATA, this.status).     waitForDelay().     if (this.payload != null) {         httpResponse.getHeaders().setContentLength(this.payload.length).         httpResponse.getHeaders().setContentType(MediaType.APPLICATION_OCTET_STREAM).         httpResponse.getHeaders().add("x-seq", Long.toString(seq.incrementAndGet())).     }     return httpResponse. }
false;private;0;10;;private void waitForDelay() {     if (this.delay > 0) {         try {             Thread.sleep(this.delay).         } catch (InterruptedException ex) {         // Ignore         }     } }
