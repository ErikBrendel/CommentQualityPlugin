commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.files = new ClassLoaderFiles().     this.resolver = new ClassLoaderFilesResourcePatternResolver(new GenericApplicationContext(), this.files). }
false;public;0;4;;@Test public void getClassLoaderShouldReturnClassLoader() {     assertThat(this.resolver.getClassLoader()).isNotNull(). }
false;public;0;5;;@Test public void getResourceShouldReturnResource() {     Resource resource = this.resolver.getResource("index.html").     assertThat(resource).isNotNull().isInstanceOf(ClassPathResource.class). }
false;public;0;8;;@Test public void getResourceWhenHasServletContextShouldReturnServletResource() {     GenericWebApplicationContext context = new GenericWebApplicationContext(new MockServletContext()).     this.resolver = new ClassLoaderFilesResourcePatternResolver(context, this.files).     Resource resource = this.resolver.getResource("index.html").     assertThat(resource).isNotNull().isInstanceOf(ServletContextResource.class). }
false;public;0;10;;@Test public void getResourceWhenDeletedShouldReturnDeletedResource() throws Exception {     File folder = this.temp.newFolder().     File file = createFile(folder, "name.class").     this.files.addFile(folder.getName(), "name.class", new ClassLoaderFile(Kind.DELETED, null)).     Resource resource = this.resolver.getResource("file:" + file.getAbsolutePath()).     assertThat(resource).isNotNull().isInstanceOf(DeletedClassLoaderFileResource.class). }
false;public;0;8;;@Test public void getResourcesShouldReturnResources() throws Exception {     File folder = this.temp.newFolder().     createFile(folder, "name.class").     Resource[] resources = this.resolver.getResources("file:" + folder.getAbsolutePath() + "/**").     assertThat(resources).isNotEmpty(). }
false;public;0;10;;@Test public void getResourcesWhenDeletedShouldFilterDeleted() throws Exception {     File folder = this.temp.newFolder().     createFile(folder, "name.class").     this.files.addFile(folder.getName(), "name.class", new ClassLoaderFile(Kind.DELETED, null)).     Resource[] resources = this.resolver.getResources("file:" + folder.getAbsolutePath() + "/**").     assertThat(resources).isEmpty(). }
false;public;0;9;;@Test public void customResourceLoaderIsUsedInNonWebApplication() {     GenericApplicationContext context = new GenericApplicationContext().     ResourceLoader resourceLoader = mock(ResourceLoader.class).     context.setResourceLoader(resourceLoader).     this.resolver = new ClassLoaderFilesResourcePatternResolver(context, this.files).     this.resolver.getResource("foo.txt").     verify(resourceLoader).getResource("foo.txt"). }
false;public;0;11;;@Test public void customProtocolResolverIsUsedInNonWebApplication() {     GenericApplicationContext context = new GenericApplicationContext().     Resource resource = mock(Resource.class).     ProtocolResolver resolver = mockProtocolResolver("foo:some-file.txt", resource).     context.addProtocolResolver(resolver).     this.resolver = new ClassLoaderFilesResourcePatternResolver(context, this.files).     Resource actual = this.resolver.getResource("foo:some-file.txt").     assertThat(actual).isSameAs(resource).     verify(resolver).resolve(eq("foo:some-file.txt"), any(ResourceLoader.class)). }
false;public;0;10;;@Test public void customResourceLoaderIsUsedInWebApplication() {     GenericWebApplicationContext context = new GenericWebApplicationContext(new MockServletContext()).     ResourceLoader resourceLoader = mock(ResourceLoader.class).     context.setResourceLoader(resourceLoader).     this.resolver = new ClassLoaderFilesResourcePatternResolver(context, this.files).     this.resolver.getResource("foo.txt").     verify(resourceLoader).getResource("foo.txt"). }
false;public;0;12;;@Test public void customProtocolResolverIsUsedInWebApplication() {     GenericWebApplicationContext context = new GenericWebApplicationContext(new MockServletContext()).     Resource resource = mock(Resource.class).     ProtocolResolver resolver = mockProtocolResolver("foo:some-file.txt", resource).     context.addProtocolResolver(resolver).     this.resolver = new ClassLoaderFilesResourcePatternResolver(context, this.files).     Resource actual = this.resolver.getResource("foo:some-file.txt").     assertThat(actual).isSameAs(resource).     verify(resolver).resolve(eq("foo:some-file.txt"), any(ResourceLoader.class)). }
false;private;2;5;;private ProtocolResolver mockProtocolResolver(String path, Resource resource) {     ProtocolResolver resolver = mock(ProtocolResolver.class).     given(resolver.resolve(eq(path), any(ResourceLoader.class))).willReturn(resource).     return resolver. }
false;private;2;5;;private File createFile(File folder, String name) throws IOException {     File file = new File(folder, name).     FileCopyUtils.copy("test".getBytes(), file).     return file. }
