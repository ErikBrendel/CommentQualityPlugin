commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void folderUrl() throws Exception {     URL url = makeUrl("myproject").     assertThat(ChangeableUrls.fromUrls(url).size()).isEqualTo(1). }
false;public;0;5;;@Test public void fileUrl() throws Exception {     URL url = this.temporaryFolder.newFile().toURI().toURL().     assertThat(ChangeableUrls.fromUrls(url)).isEmpty(). }
false;public;0;5;;@Test public void httpUrl() throws Exception {     URL url = new URL("http://spring.io").     assertThat(ChangeableUrls.fromUrls(url)).isEmpty(). }
false;public;0;5;;@Test public void httpsUrl() throws Exception {     URL url = new URL("https://spring.io").     assertThat(ChangeableUrls.fromUrls(url)).isEmpty(). }
false;public;0;8;;@Test public void skipsUrls() throws Exception {     ChangeableUrls urls = ChangeableUrls.fromUrls(makeUrl("spring-boot"), makeUrl("spring-boot-autoconfigure"), makeUrl("spring-boot-actuator"), makeUrl("spring-boot-starter"), makeUrl("spring-boot-starter-some-thing")).     assertThat(urls).isEmpty(). }
false;public;0;18;;@Test public void urlsFromJarClassPathAreConsidered() throws Exception {     File relative = this.temporaryFolder.newFolder().     URL absoluteUrl = this.temporaryFolder.newFolder().toURI().toURL().     File jarWithClassPath = makeJarFileWithUrlsInManifestClassPath("project-core/target/classes/", "project-web/target/classes/", "does-not-exist/target/classes", relative.getName() + "/", absoluteUrl).     new File(jarWithClassPath.getParentFile(), "project-core/target/classes").mkdirs().     new File(jarWithClassPath.getParentFile(), "project-web/target/classes").mkdirs().     ChangeableUrls urls = ChangeableUrls.fromClassLoader(new URLClassLoader(new URL[] { jarWithClassPath.toURI().toURL(), makeJarFileWithNoManifest() })).     assertThat(urls.toList()).containsExactly(new URL(jarWithClassPath.toURI().toURL(), "project-core/target/classes/"), new URL(jarWithClassPath.toURI().toURL(), "project-web/target/classes/"), relative.toURI().toURL(), absoluteUrl). }
false;private;1;8;;private URL makeUrl(String name) throws IOException {     File file = this.temporaryFolder.newFolder().     file = new File(file, name).     file = new File(file, "target").     file = new File(file, "classes").     file.mkdirs().     return file.toURI().toURL(). }
false;private;1;10;;private File makeJarFileWithUrlsInManifestClassPath(Object... urls) throws Exception {     File classpathJar = this.temporaryFolder.newFile("classpath.jar").     Manifest manifest = new Manifest().     manifest.getMainAttributes().putValue(Attributes.Name.MANIFEST_VERSION.toString(), "1.0").     manifest.getMainAttributes().putValue(Attributes.Name.CLASS_PATH.toString(), StringUtils.arrayToDelimitedString(urls, " ")).     new JarOutputStream(new FileOutputStream(classpathJar), manifest).close().     return classpathJar. }
false;private;0;5;;private URL makeJarFileWithNoManifest() throws Exception {     File classpathJar = this.temporaryFolder.newFile("no-manifest.jar").     new ZipOutputStream(new FileOutputStream(classpathJar)).close().     return classpathJar.toURI().toURL(). }
