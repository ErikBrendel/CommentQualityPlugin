commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() throws IOException {     MockitoAnnotations.initMocks(this).     given(this.errorRequest.execute()).willReturn(this.errorResponse).     given(this.okRequest.execute()).willReturn(this.okResponse).     given(this.errorResponse.getStatusCode()).willReturn(HttpStatus.INTERNAL_SERVER_ERROR).     given(this.okResponse.getStatusCode()).willReturn(HttpStatus.OK).     this.trigger = new DelayedLiveReloadTrigger(this.liveReloadServer, this.requestFactory, URL). }
false;public;0;6;;@Test public void liveReloadServerMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new DelayedLiveReloadTrigger(null, this.requestFactory, URL)).withMessageContaining("LiveReloadServer must not be null"). }
false;public;0;6;;@Test public void requestFactoryMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new DelayedLiveReloadTrigger(this.liveReloadServer, null, URL)).withMessageContaining("RequestFactory must not be null"). }
false;public;0;7;;@Test public void urlMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new DelayedLiveReloadTrigger(this.liveReloadServer, this.requestFactory, null)).withMessageContaining("URL must not be empty"). }
false;public;0;7;;@Test public void urlMustNotBeEmpty() {     assertThatIllegalArgumentException().isThrownBy(() -> new DelayedLiveReloadTrigger(this.liveReloadServer, this.requestFactory, "")).withMessageContaining("URL must not be empty"). }
false;public;0;11;;@Test public void triggerReloadOnStatus() throws Exception {     given(this.requestFactory.createRequest(new URI(URL), HttpMethod.GET)).willThrow(new IOException()).willReturn(this.errorRequest, this.okRequest).     long startTime = System.currentTimeMillis().     this.trigger.setTimings(10, 200, 30000).     this.trigger.run().     assertThat(System.currentTimeMillis() - startTime).isGreaterThan(300L).     verify(this.liveReloadServer).triggerReload(). }
false;public;0;8;;@Test public void timeout() throws Exception {     given(this.requestFactory.createRequest(new URI(URL), HttpMethod.GET)).willThrow(new IOException()).     this.trigger.setTimings(10, 0, 10).     this.trigger.run().     verify(this.liveReloadServer, never()).triggerReload(). }
