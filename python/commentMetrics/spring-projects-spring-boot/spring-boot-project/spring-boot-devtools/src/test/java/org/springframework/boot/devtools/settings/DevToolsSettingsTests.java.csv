commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void includePatterns() throws Exception {     DevToolsSettings settings = DevToolsSettings.load(ROOT + "spring-devtools-include.properties").     assertThat(settings.isRestartInclude(new URL("file://test/a"))).isTrue().     assertThat(settings.isRestartInclude(new URL("file://test/b"))).isTrue().     assertThat(settings.isRestartInclude(new URL("file://test/c"))).isFalse(). }
false;public;0;8;;@Test public void excludePatterns() throws Exception {     DevToolsSettings settings = DevToolsSettings.load(ROOT + "spring-devtools-exclude.properties").     assertThat(settings.isRestartExclude(new URL("file://test/a"))).isTrue().     assertThat(settings.isRestartExclude(new URL("file://test/b"))).isTrue().     assertThat(settings.isRestartExclude(new URL("file://test/c"))).isFalse(). }
false;public;0;11;;@Test public void defaultIncludePatterns() throws Exception {     DevToolsSettings settings = DevToolsSettings.get().     assertThat(settings.isRestartExclude(makeUrl("spring-boot"))).isTrue().     assertThat(settings.isRestartExclude(makeUrl("spring-boot-autoconfigure"))).isTrue().     assertThat(settings.isRestartExclude(makeUrl("spring-boot-actuator"))).isTrue().     assertThat(settings.isRestartExclude(makeUrl("spring-boot-starter"))).isTrue().     assertThat(settings.isRestartExclude(makeUrl("spring-boot-starter-some-thing"))).isTrue(). }
false;private;1;8;;private URL makeUrl(String name) throws IOException {     File file = this.temporaryFolder.newFolder().     file = new File(file, name).     file = new File(file, "target").     file = new File(file, "classes").     file.mkdirs().     return file.toURI().toURL(). }
