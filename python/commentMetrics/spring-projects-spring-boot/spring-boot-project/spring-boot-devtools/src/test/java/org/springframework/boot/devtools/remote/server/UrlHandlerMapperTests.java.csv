commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void requestUriMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new UrlHandlerMapper(null, this.handler)).withMessageContaining("URL must not be empty"). }
false;public;0;6;;@Test public void requestUriMustNotBeEmpty() {     assertThatIllegalArgumentException().isThrownBy(() -> new UrlHandlerMapper("", this.handler)).withMessageContaining("URL must not be empty"). }
false;public;0;6;;@Test public void requestUrlMustStartWithSlash() {     assertThatIllegalArgumentException().isThrownBy(() -> new UrlHandlerMapper("tunnel", this.handler)).withMessageContaining("URL must start with '/'"). }
false;public;0;7;;@Test public void handlesMatchedUrl() {     UrlHandlerMapper mapper = new UrlHandlerMapper("/tunnel", this.handler).     HttpServletRequest servletRequest = new MockHttpServletRequest("GET", "/tunnel").     ServerHttpRequest request = new ServletServerHttpRequest(servletRequest).     assertThat(mapper.getHandler(request)).isEqualTo(this.handler). }
false;public;0;8;;@Test public void ignoresDifferentUrl() {     UrlHandlerMapper mapper = new UrlHandlerMapper("/tunnel", this.handler).     HttpServletRequest servletRequest = new MockHttpServletRequest("GET", "/tunnel/other").     ServerHttpRequest request = new ServletServerHttpRequest(servletRequest).     assertThat(mapper.getHandler(request)).isNull(). }
