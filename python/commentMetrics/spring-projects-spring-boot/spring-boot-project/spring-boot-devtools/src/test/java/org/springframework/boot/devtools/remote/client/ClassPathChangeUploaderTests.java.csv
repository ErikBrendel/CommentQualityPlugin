commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.requestFactory = new MockClientHttpRequestFactory().     this.uploader = new ClassPathChangeUploader("http://localhost/upload", this.requestFactory). }
false;public;0;6;;@Test public void urlMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new ClassPathChangeUploader(null, this.requestFactory)).withMessageContaining("URL must not be empty"). }
false;public;0;6;;@Test public void urlMustNotBeEmpty() {     assertThatIllegalArgumentException().isThrownBy(() -> new ClassPathChangeUploader("", this.requestFactory)).withMessageContaining("URL must not be empty"). }
false;public;0;7;;@Test public void requestFactoryMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new ClassPathChangeUploader("http://localhost:8080", null)).withMessageContaining("RequestFactory must not be null"). }
false;public;0;7;;@Test public void urlMustNotBeMalformed() {     assertThatIllegalArgumentException().isThrownBy(() -> new ClassPathChangeUploader("htttttp:///ttest", this.requestFactory)).withMessageContaining("Malformed URL 'htttttp:///ttest'"). }
false;public;0;10;;@Test public void sendsClassLoaderFiles() throws Exception {     File sourceFolder = this.temp.newFolder().     ClassPathChangedEvent event = createClassPathChangedEvent(sourceFolder).     this.requestFactory.willRespond(HttpStatus.OK).     this.uploader.onApplicationEvent(event).     assertThat(this.requestFactory.getExecutedRequests()).hasSize(1).     MockClientHttpRequest request = this.requestFactory.getExecutedRequests().get(0).     verifyUploadRequest(sourceFolder, request). }
false;public;0;11;;@Test public void retriesOnSocketException() throws Exception {     File sourceFolder = this.temp.newFolder().     ClassPathChangedEvent event = createClassPathChangedEvent(sourceFolder).     this.requestFactory.willRespond(new SocketException()).     this.requestFactory.willRespond(HttpStatus.OK).     this.uploader.onApplicationEvent(event).     assertThat(this.requestFactory.getExecutedRequests()).hasSize(2).     verifyUploadRequest(sourceFolder, this.requestFactory.getExecutedRequests().get(1)). }
false;private;2;13;;private void verifyUploadRequest(File sourceFolder, MockClientHttpRequest request) throws IOException, ClassNotFoundException {     ClassLoaderFiles classLoaderFiles = deserialize(request.getBodyAsBytes()).     Collection<SourceFolder> sourceFolders = classLoaderFiles.getSourceFolders().     assertThat(sourceFolders.size()).isEqualTo(1).     SourceFolder classSourceFolder = sourceFolders.iterator().next().     assertThat(classSourceFolder.getName()).isEqualTo(sourceFolder.getAbsolutePath()).     Iterator<ClassLoaderFile> classFiles = classSourceFolder.getFiles().iterator().     assertClassFile(classFiles.next(), "File1", ClassLoaderFile.Kind.ADDED).     assertClassFile(classFiles.next(), "File2", ClassLoaderFile.Kind.MODIFIED).     assertClassFile(classFiles.next(), null, ClassLoaderFile.Kind.DELETED).     assertThat(classFiles.hasNext()).isFalse(). }
false;private;3;5;;private void assertClassFile(ClassLoaderFile file, String content, Kind kind) {     assertThat(file.getContents()).isEqualTo((content != null) ? content.getBytes() : null).     assertThat(file.getKind()).isEqualTo(kind). }
false;private;1;14;;private ClassPathChangedEvent createClassPathChangedEvent(File sourceFolder) throws IOException {     Set<ChangedFile> files = new LinkedHashSet<>().     File file1 = createFile(sourceFolder, "File1").     File file2 = createFile(sourceFolder, "File2").     File file3 = createFile(sourceFolder, "File3").     files.add(new ChangedFile(sourceFolder, file1, Type.ADD)).     files.add(new ChangedFile(sourceFolder, file2, Type.MODIFY)).     files.add(new ChangedFile(sourceFolder, file3, Type.DELETE)).     Set<ChangedFiles> changeSet = new LinkedHashSet<>().     changeSet.add(new ChangedFiles(sourceFolder, files)).     ClassPathChangedEvent event = new ClassPathChangedEvent(this, changeSet, false).     return event. }
false;private;2;5;;private File createFile(File sourceFolder, String name) throws IOException {     File file = new File(sourceFolder, name).     FileCopyUtils.copy(name.getBytes(), file).     return file. }
false;private;1;6;;private ClassLoaderFiles deserialize(byte[] bytes) throws IOException, ClassNotFoundException {     ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(bytes)).     return (ClassLoaderFiles) objectInputStream.readObject(). }
