commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void sourceFolderMustNotBeNull() throws Exception {     assertThatIllegalArgumentException().isThrownBy(() -> new ChangedFile(null, this.temp.newFile(), Type.ADD)).withMessageContaining("SourceFolder must not be null"). }
false;public;0;6;;@Test public void fileMustNotBeNull() throws Exception {     assertThatIllegalArgumentException().isThrownBy(() -> new ChangedFile(this.temp.newFolder(), null, Type.ADD)).withMessageContaining("File must not be null"). }
false;public;0;6;;@Test public void typeMustNotBeNull() throws Exception {     assertThatIllegalArgumentException().isThrownBy(() -> new ChangedFile(this.temp.newFile(), this.temp.newFolder(), null)).withMessageContaining("Type must not be null"). }
false;public;0;6;;@Test public void getFile() throws Exception {     File file = this.temp.newFile().     ChangedFile changedFile = new ChangedFile(this.temp.newFolder(), file, Type.ADD).     assertThat(changedFile.getFile()).isEqualTo(file). }
false;public;0;6;;@Test public void getType() throws Exception {     ChangedFile changedFile = new ChangedFile(this.temp.newFolder(), this.temp.newFile(), Type.DELETE).     assertThat(changedFile.getType()).isEqualTo(Type.DELETE). }
false;public;0;8;;@Test public void getRelativeName() throws Exception {     File folder = this.temp.newFolder().     File subFolder = new File(folder, "A").     File file = new File(subFolder, "B.txt").     ChangedFile changedFile = new ChangedFile(folder, file, Type.ADD).     assertThat(changedFile.getRelativeName()).isEqualTo("A/B.txt"). }
