commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() throws Exception {     this.server = new MonitoredLiveReloadServer(0).     this.port = this.server.start(). }
false;public;0;4;;@After public void tearDown() throws Exception {     this.server.stop(). }
false;public;0;8;;@Test @Ignore public void servesLivereloadJs() throws Exception {     RestTemplate template = new RestTemplate().     URI uri = new URI("http://localhost:" + this.port + "/livereload.js").     String script = template.getForObject(uri, String.class).     assertThat(script).contains("livereload.com/protocols/official-7"). }
false;public;0;10;;@Test public void triggerReload() throws Exception {     LiveReloadWebSocketHandler handler = connect().     this.server.triggerReload().     Thread.sleep(200).     this.server.stop().     assertThat(handler.getMessages().get(0)).contains("http://livereload.com/protocols/official-7").     assertThat(handler.getMessages().get(1)).contains("command\":\"reload\""). }
false;public;0;8;;@Test public void pingPong() throws Exception {     LiveReloadWebSocketHandler handler = connect().     handler.sendMessage(new PingMessage()).     Thread.sleep(200).     assertThat(handler.getPongCount()).isEqualTo(1).     this.server.stop(). }
false;public;0;7;;@Test public void clientClose() throws Exception {     LiveReloadWebSocketHandler handler = connect().     handler.close().     awaitClosedException().     assertThat(this.server.getClosedExceptions().size()).isGreaterThan(0). }
false;private;0;7;;private void awaitClosedException() throws InterruptedException {     long startTime = System.currentTimeMillis().     while (this.server.getClosedExceptions().isEmpty() && System.currentTimeMillis() - startTime < 10000) {         Thread.sleep(100).     } }
false;public;0;7;;@Test public void serverClose() throws Exception {     LiveReloadWebSocketHandler handler = connect().     this.server.stop().     Thread.sleep(200).     assertThat(handler.getCloseStatus().getCode()).isEqualTo(1006). }
false;private;0;7;;private LiveReloadWebSocketHandler connect() throws Exception {     WebSocketClient client = new StandardWebSocketClient(new WsWebSocketContainer()).     LiveReloadWebSocketHandler handler = new LiveReloadWebSocketHandler().     client.doHandshake(handler, "ws://localhost:" + this.port + "/livereload").     handler.awaitHello().     return handler. }
true;public,static;1;13;/**  * Useful main method for manual testing against a real browser.  * @param args main args  * @throws IOException in case of I/O errors  */ ;/**  * Useful main method for manual testing against a real browser.  * @param args main args  * @throws IOException in case of I/O errors  */ public static void main(String[] args) throws IOException {     LiveReloadServer server = new LiveReloadServer().     server.start().     while (true) {         try {             Thread.sleep(1000).         } catch (InterruptedException ex) {             Thread.currentThread().interrupt().         }         server.triggerReload().     } }
false;protected;3;5;;@Override protected Connection createConnection(java.net.Socket socket, InputStream inputStream, OutputStream outputStream) throws IOException {     return new MonitoredConnection(socket, inputStream, outputStream). }
false;public;0;5;;public List<ConnectionClosedException> getClosedExceptions() {     synchronized (this.monitor) {         return new ArrayList<>(this.closedExceptions).     } }
false;public;0;12;;@Override public void run() throws Exception {     try {         super.run().     } catch (ConnectionClosedException ex) {         synchronized (MonitoredLiveReloadServer.this.monitor) {             MonitoredLiveReloadServer.this.closedExceptions.add(ex).         }         throw ex.     } }
false;public;1;7;;@Override public void afterConnectionEstablished(WebSocketSession session) throws Exception {     this.session = session.     session.sendMessage(new TextMessage(HANDSHAKE)).     this.helloLatch.countDown(). }
false;public;0;4;;public void awaitHello() throws InterruptedException {     this.helloLatch.await(1, TimeUnit.MINUTES).     Thread.sleep(200). }
false;protected;2;7;;@Override protected void handleTextMessage(WebSocketSession session, TextMessage message) {     if (message.getPayload().contains("hello")) {         this.helloLatch.countDown().     }     this.messages.add(message.getPayload()). }
false;protected;2;4;;@Override protected void handlePongMessage(WebSocketSession session, PongMessage message) {     this.pongCount++. }
false;public;2;4;;@Override public void afterConnectionClosed(WebSocketSession session, CloseStatus status) {     this.closeStatus = status. }
false;public;1;3;;public void sendMessage(WebSocketMessage<?> message) throws IOException {     this.session.sendMessage(message). }
false;public;0;3;;public void close() throws IOException {     this.session.close(). }
false;public;0;3;;public List<String> getMessages() {     return this.messages. }
false;public;0;3;;public int getPongCount() {     return this.pongCount. }
false;public;0;3;;public CloseStatus getCloseStatus() {     return this.closeStatus. }
