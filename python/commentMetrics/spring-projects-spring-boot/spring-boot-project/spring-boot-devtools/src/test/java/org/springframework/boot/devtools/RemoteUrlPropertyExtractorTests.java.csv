commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@After public void preventRunFailuresFromPollutingLoggerContext() {     ((Logger) LoggerFactory.getLogger(RemoteUrlPropertyExtractorTests.class)).getLoggerContext().getTurboFilterList().clear(). }
false;public;0;5;;@Test public void missingUrl() {     assertThatIllegalStateException().isThrownBy(this::doTest).withMessageContaining("No remote URL specified"). }
false;public;0;6;;@Test public void malformedUrl() {     assertThatIllegalStateException().isThrownBy(() -> doTest("::://wibble")).withMessageContaining("Malformed URL '::://wibble'"). }
false;public;0;7;;@Test public void multipleUrls() {     assertThatIllegalStateException().isThrownBy(() -> doTest("http://localhost:8080", "http://localhost:9090")).withMessageContaining("Multiple URLs specified"). }
false;public;0;8;;@Test public void validUrl() {     ApplicationContext context = doTest("http://localhost:8080").     assertThat(context.getEnvironment().getProperty("remoteUrl")).isEqualTo("http://localhost:8080").     assertThat(context.getEnvironment().getProperty("spring.thymeleaf.cache")).isNull(). }
false;public;0;6;;@Test public void cleanValidUrl() {     ApplicationContext context = doTest("http://localhost:8080/").     assertThat(context.getEnvironment().getProperty("remoteUrl")).isEqualTo("http://localhost:8080"). }
false;private;1;6;;private ApplicationContext doTest(String... args) {     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     application.addListeners(new RemoteUrlPropertyExtractor()).     return application.run(args). }
