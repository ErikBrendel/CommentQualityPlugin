commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     this.request = new MockHttpServletRequest("GET", "/").     this.serverRequest = new ServletServerHttpRequest(this.request).     this.manager = new HttpHeaderAccessManager(HEADER, SECRET). }
false;public;0;6;;@Test public void headerNameMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderAccessManager(null, SECRET)).withMessageContaining("HeaderName must not be empty"). }
false;public;0;6;;@Test public void headerNameMustNotBeEmpty() {     assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderAccessManager("", SECRET)).withMessageContaining("HeaderName must not be empty"). }
false;public;0;6;;@Test public void expectedSecretMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderAccessManager(HEADER, null)).withMessageContaining("ExpectedSecret must not be empty"). }
false;public;0;6;;@Test public void expectedSecretMustNotBeEmpty() {     assertThatIllegalArgumentException().isThrownBy(() -> new HttpHeaderAccessManager(HEADER, "")).withMessageContaining("ExpectedSecret must not be empty"). }
false;public;0;5;;@Test public void allowsMatching() {     this.request.addHeader(HEADER, SECRET).     assertThat(this.manager.isAllowed(this.serverRequest)).isTrue(). }
false;public;0;5;;@Test public void disallowsWrongSecret() {     this.request.addHeader(HEADER, "wrong").     assertThat(this.manager.isAllowed(this.serverRequest)).isFalse(). }
false;public;0;4;;@Test public void disallowsNoSecret() {     assertThat(this.manager.isAllowed(this.serverRequest)).isFalse(). }
false;public;0;5;;@Test public void disallowsWrongHeader() {     this.request.addHeader("X-WRONG", SECRET).     assertThat(this.manager.isAllowed(this.serverRequest)).isFalse(). }
