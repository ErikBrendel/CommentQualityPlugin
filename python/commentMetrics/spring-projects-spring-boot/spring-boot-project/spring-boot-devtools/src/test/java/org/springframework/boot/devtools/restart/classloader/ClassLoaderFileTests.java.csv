commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void kindMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new ClassLoaderFile(null, null)).withMessageContaining("Kind must not be null"). }
false;public;0;6;;@Test public void addedContentsMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new ClassLoaderFile(Kind.ADDED, null)).withMessageContaining("Contents must not be null"). }
false;public;0;6;;@Test public void modifiedContentsMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new ClassLoaderFile(Kind.MODIFIED, null)).withMessageContaining("Contents must not be null"). }
false;public;0;6;;@Test public void deletedContentsMustBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new ClassLoaderFile(Kind.DELETED, new byte[10])).withMessageContaining("Contents must be null"). }
false;public;0;6;;@Test public void added() {     ClassLoaderFile file = new ClassLoaderFile(Kind.ADDED, BYTES).     assertThat(file.getKind()).isEqualTo(ClassLoaderFile.Kind.ADDED).     assertThat(file.getContents()).isEqualTo(BYTES). }
false;public;0;6;;@Test public void modified() {     ClassLoaderFile file = new ClassLoaderFile(Kind.MODIFIED, BYTES).     assertThat(file.getKind()).isEqualTo(ClassLoaderFile.Kind.MODIFIED).     assertThat(file.getContents()).isEqualTo(BYTES). }
false;public;0;6;;@Test public void deleted() {     ClassLoaderFile file = new ClassLoaderFile(Kind.DELETED, null).     assertThat(file.getKind()).isEqualTo(ClassLoaderFile.Kind.DELETED).     assertThat(file.getContents()).isNull(). }
