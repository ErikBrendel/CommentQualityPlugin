commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void cleanup() {     if (this.context != null) {         this.context.close().     } }
false;public;0;7;;@Test public void thymeleafCacheIsFalse() {     this.context = initializeAndRun(Config.class).     SpringResourceTemplateResolver resolver = this.context.getBean(SpringResourceTemplateResolver.class).     assertThat(resolver.isCacheable()).isFalse(). }
false;public;0;7;;@Test public void defaultPropertyCanBeOverriddenFromCommandLine() {     this.context = initializeAndRun(Config.class, "--spring.thymeleaf.cache=true").     SpringResourceTemplateResolver resolver = this.context.getBean(SpringResourceTemplateResolver.class).     assertThat(resolver.isCacheable()).isTrue(). }
false;public;0;15;;@Test public void defaultPropertyCanBeOverriddenFromUserHomeProperties() {     String userHome = System.getProperty("user.home").     System.setProperty("user.home", new File("src/test/resources/user-home").getAbsolutePath()).     try {         this.context = initializeAndRun(Config.class).         SpringResourceTemplateResolver resolver = this.context.getBean(SpringResourceTemplateResolver.class).         assertThat(resolver.isCacheable()).isTrue().     } finally {         System.setProperty("user.home", userHome).     } }
false;public;0;6;;@Test public void resourceCachePeriodIsZero() {     this.context = initializeAndRun(WebResourcesConfig.class).     ResourceProperties properties = this.context.getBean(ResourceProperties.class).     assertThat(properties.getCache().getPeriod()).isEqualTo(Duration.ZERO). }
false;public;0;6;;@Test public void liveReloadServer() {     this.context = initializeAndRun(Config.class).     LiveReloadServer server = this.context.getBean(LiveReloadServer.class).     assertThat(server.isStarted()).isTrue(). }
false;public;0;8;;@Test public void liveReloadTriggeredOnContextRefresh() {     this.context = initializeAndRun(ConfigWithMockLiveReload.class).     LiveReloadServer server = this.context.getBean(LiveReloadServer.class).     reset(server).     this.context.publishEvent(new ContextRefreshedEvent(this.context)).     verify(server).triggerReload(). }
false;public;0;10;;@Test public void liveReloadTriggeredOnClassPathChangeWithoutRestart() {     this.context = initializeAndRun(ConfigWithMockLiveReload.class).     LiveReloadServer server = this.context.getBean(LiveReloadServer.class).     reset(server).     ClassPathChangedEvent event = new ClassPathChangedEvent(this.context, Collections.emptySet(), false).     this.context.publishEvent(event).     verify(server).triggerReload(). }
false;public;0;10;;@Test public void liveReloadNotTriggeredOnClassPathChangeWithRestart() {     this.context = initializeAndRun(ConfigWithMockLiveReload.class).     LiveReloadServer server = this.context.getBean(LiveReloadServer.class).     reset(server).     ClassPathChangedEvent event = new ClassPathChangedEvent(this.context, Collections.emptySet(), true).     this.context.publishEvent(event).     verify(server, never()).triggerReload(). }
false;public;0;8;;@Test public void liveReloadDisabled() {     Map<String, Object> properties = new HashMap<>().     properties.put("spring.devtools.livereload.enabled", false).     this.context = initializeAndRun(Config.class, properties).     assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.context.getBean(OptionalLiveReloadServer.class)). }
false;public;0;8;;@Test public void restartTriggeredOnClassPathChangeWithRestart() {     this.context = initializeAndRun(Config.class).     ClassPathChangedEvent event = new ClassPathChangedEvent(this.context, Collections.emptySet(), true).     this.context.publishEvent(event).     verify(this.mockRestarter.getMock()).restart(any(FailureHandler.class)). }
false;public;0;8;;@Test public void restartNotTriggeredOnClassPathChangeWithRestart() {     this.context = initializeAndRun(Config.class).     ClassPathChangedEvent event = new ClassPathChangedEvent(this.context, Collections.emptySet(), false).     this.context.publishEvent(event).     verify(this.mockRestarter.getMock(), never()).restart(). }
false;public;0;7;;@Test public void restartWatchingClassPath() {     this.context = initializeAndRun(Config.class).     ClassPathFileSystemWatcher watcher = this.context.getBean(ClassPathFileSystemWatcher.class).     assertThat(watcher).isNotNull(). }
false;public;0;8;;@Test public void restartDisabled() {     Map<String, Object> properties = new HashMap<>().     properties.put("spring.devtools.restart.enabled", false).     this.context = initializeAndRun(Config.class, properties).     assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.context.getBean(ClassPathFileSystemWatcher.class)). }
false;public;0;12;;@Test public void restartWithTriggerFile() {     Map<String, Object> properties = new HashMap<>().     properties.put("spring.devtools.restart.trigger-file", "somefile.txt").     this.context = initializeAndRun(Config.class, properties).     ClassPathFileSystemWatcher classPathWatcher = this.context.getBean(ClassPathFileSystemWatcher.class).     Object watcher = ReflectionTestUtils.getField(classPathWatcher, "fileSystemWatcher").     Object filter = ReflectionTestUtils.getField(watcher, "triggerFilter").     assertThat(filter).isInstanceOf(TriggerFileFilter.class). }
false;public;0;17;;@Test public void watchingAdditionalPaths() {     Map<String, Object> properties = new HashMap<>().     properties.put("spring.devtools.restart.additional-paths", "src/main/java,src/test/java").     this.context = initializeAndRun(Config.class, properties).     ClassPathFileSystemWatcher classPathWatcher = this.context.getBean(ClassPathFileSystemWatcher.class).     Object watcher = ReflectionTestUtils.getField(classPathWatcher, "fileSystemWatcher").     @SuppressWarnings("unchecked")     Map<File, Object> folders = (Map<File, Object>) ReflectionTestUtils.getField(watcher, "folders").     assertThat(folders).hasSize(2).containsKey(new File("src/main/java").getAbsoluteFile()).containsKey(new File("src/test/java").getAbsoluteFile()). }
false;public;0;11;;@Test public void devToolsSwitchesJspServletToDevelopmentMode() {     this.context = initializeAndRun(Config.class).     TomcatWebServer tomcatContainer = (TomcatWebServer) ((ServletWebServerApplicationContext) this.context).getWebServer().     Container context = tomcatContainer.getTomcat().getHost().findChildren()[0].     StandardWrapper jspServletWrapper = (StandardWrapper) context.findChild("jsp").     EmbeddedServletOptions options = (EmbeddedServletOptions) ReflectionTestUtils.getField(jspServletWrapper.getServlet(), "options").     assertThat(options.getDevelopment()).isTrue(). }
false;private;2;4;;private ConfigurableApplicationContext initializeAndRun(Class<?> config, String... args) {     return initializeAndRun(config, Collections.emptyMap(), args). }
false;private;3;8;;private ConfigurableApplicationContext initializeAndRun(Class<?> config, Map<String, Object> properties, String... args) {     Restarter.initialize(new String[0], false, new MockRestartInitializer(), false).     SpringApplication application = new SpringApplication(config).     application.setDefaultProperties(getDefaultProperties(properties)).     ConfigurableApplicationContext context = application.run(args).     return context. }
false;private;1;9;;private Map<String, Object> getDefaultProperties(Map<String, Object> specifiedProperties) {     Map<String, Object> properties = new HashMap<>().     properties.put("spring.thymeleaf.check-template-location", false).     properties.put("spring.devtools.livereload.port", 0).     properties.put("server.port", 0).     properties.putAll(specifiedProperties).     return properties. }
false;public;0;4;;@Bean public LiveReloadServer liveReloadServer() {     return mock(LiveReloadServer.class). }
false;public;0;6;;@Bean public RedisTemplate<Object, Object> sessionRedisTemplate() {     RedisTemplate<Object, Object> redisTemplate = new RedisTemplate<>().     redisTemplate.setConnectionFactory(mock(RedisConnectionFactory.class)).     return redisTemplate. }
