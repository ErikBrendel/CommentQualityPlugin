commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public ResponseActions expectRequest(ExpectedCount count, RequestMatcher requestMatcher) {     return this.expectationManager.expectRequest(count, requestMatcher). }
false;public;1;20;;@Override public ClientHttpResponse validateRequest(ClientHttpRequest request) throws IOException {     String uri = request.getURI().toString().     if (uri.startsWith(this.rootUri)) {         request = replaceURI(request, uri.substring(this.rootUri.length())).     }     try {         return this.expectationManager.validateRequest(request).     } catch (AssertionError ex) {         String message = ex.getMessage().         String prefix = "Request URI expected:</".         if (message != null && message.startsWith(prefix)) {             throw new AssertionError("Request URI expected:<" + this.rootUri + message.substring(prefix.length() - 1)).         }         throw ex.     } }
false;private;2;15;;private ClientHttpRequest replaceURI(ClientHttpRequest request, String replacementUri) {     URI uri.     try {         uri = new URI(replacementUri).         if (request instanceof MockClientHttpRequest) {             ((MockClientHttpRequest) request).setURI(uri).             return request.         }         return new ReplaceUriClientHttpRequest(uri, request).     } catch (URISyntaxException ex) {         throw new IllegalStateException(ex).     } }
false;public;0;4;;@Override public void verify() {     this.expectationManager.verify(). }
false;public;0;4;;@Override public void reset() {     this.expectationManager.reset(). }
true;public,static;1;3;/**  * Return a bound {@link MockRestServiceServer} for the given {@link RestTemplate},  * configured with {@link RootUriRequestExpectationManager} when possible.  * @param restTemplate the source REST template  * @return a configured {@link MockRestServiceServer}  */ ;/**  * Return a bound {@link MockRestServiceServer} for the given {@link RestTemplate},  * configured with {@link RootUriRequestExpectationManager} when possible.  * @param restTemplate the source REST template  * @return a configured {@link MockRestServiceServer}  */ public static MockRestServiceServer bindTo(RestTemplate restTemplate) {     return bindTo(restTemplate, new SimpleRequestExpectationManager()). }
true;public,static;2;5;/**  * Return a bound {@link MockRestServiceServer} for the given {@link RestTemplate},  * configured with {@link RootUriRequestExpectationManager} when possible.  * @param restTemplate the source REST template  * @param expectationManager the source {@link RequestExpectationManager}  * @return a configured {@link MockRestServiceServer}  */ ;/**  * Return a bound {@link MockRestServiceServer} for the given {@link RestTemplate},  * configured with {@link RootUriRequestExpectationManager} when possible.  * @param restTemplate the source REST template  * @param expectationManager the source {@link RequestExpectationManager}  * @return a configured {@link MockRestServiceServer}  */ public static MockRestServiceServer bindTo(RestTemplate restTemplate, RequestExpectationManager expectationManager) {     MockRestServiceServerBuilder builder = MockRestServiceServer.bindTo(restTemplate).     return builder.build(forRestTemplate(restTemplate, expectationManager)). }
true;public,static;2;11;/**  * Return {@link RequestExpectationManager} to be used for binding with the specified  * {@link RestTemplate}. If the {@link RestTemplate} is using a  * {@link RootUriTemplateHandler} then a {@link RootUriRequestExpectationManager} is  * returned, otherwise the source manager is returned unchanged.  * @param restTemplate the source REST template  * @param expectationManager the source {@link RequestExpectationManager}  * @return a {@link RequestExpectationManager} to be bound to the template  */ ;/**  * Return {@link RequestExpectationManager} to be used for binding with the specified  * {@link RestTemplate}. If the {@link RestTemplate} is using a  * {@link RootUriTemplateHandler} then a {@link RootUriRequestExpectationManager} is  * returned, otherwise the source manager is returned unchanged.  * @param restTemplate the source REST template  * @param expectationManager the source {@link RequestExpectationManager}  * @return a {@link RequestExpectationManager} to be bound to the template  */ public static RequestExpectationManager forRestTemplate(RestTemplate restTemplate, RequestExpectationManager expectationManager) {     Assert.notNull(restTemplate, "RestTemplate must not be null").     UriTemplateHandler templateHandler = restTemplate.getUriTemplateHandler().     if (templateHandler instanceof RootUriTemplateHandler) {         return new RootUriRequestExpectationManager(((RootUriTemplateHandler) templateHandler).getRootUri(), expectationManager).     }     return expectationManager. }
false;public;0;4;;@Override public URI getURI() {     return this.uri. }
false;public;0;4;;@Override public OutputStream getBody() throws IOException {     return getRequest().getBody(). }
false;public;0;4;;@Override public ClientHttpResponse execute() throws IOException {     return getRequest().execute(). }
false;public;0;4;;@Override public ClientHttpRequest getRequest() {     return (ClientHttpRequest) super.getRequest(). }
