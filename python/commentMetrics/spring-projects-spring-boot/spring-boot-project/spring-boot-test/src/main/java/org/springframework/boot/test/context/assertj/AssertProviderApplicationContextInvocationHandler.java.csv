commented;modifiers;parameterAmount;loc;comment;code
false;private;1;8;;private Object getContextOrStartupFailure(Supplier<?> contextSupplier) {     try {         return contextSupplier.get().     } catch (RuntimeException ex) {         return ex.     } }
false;public;3;19;;@Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {     if (isToString(method)) {         return toString().     }     if (isGetSourceContext(method)) {         return getSourceContext(args).     }     if (isGetStartupFailure(method)) {         return getStartupFailure().     }     if (isAssertThat(method)) {         return getAssertThat(proxy).     }     if (isCloseMethod(method)) {         return invokeClose().     }     return invokeApplicationContextMethod(method, args). }
false;private;1;3;;private boolean isToString(Method method) {     return ("toString".equals(method.getName()) && method.getParameterCount() == 0). }
false;public;0;14;;@Override public String toString() {     if (this.startupFailure != null) {         return "Unstarted application context " + this.applicationContextType.getName() + "[startupFailure=" + this.startupFailure.getClass().getName() + "]".     }     ToStringCreator builder = new ToStringCreator(this.applicationContext).append("id", this.applicationContext.getId()).append("applicationName", this.applicationContext.getApplicationName()).append("beanDefinitionCount", this.applicationContext.getBeanDefinitionCount()).     return "Started application " + builder. }
false;private;1;5;;private boolean isGetSourceContext(Method method) {     return "getSourceApplicationContext".equals(method.getName()) && ((method.getParameterCount() == 0) || Arrays.equals(new Class<?>[] { Class.class }, method.getParameterTypes())). }
false;private;1;7;;private Object getSourceContext(Object[] args) {     ApplicationContext context = getStartedApplicationContext().     if (!ObjectUtils.isEmpty(args)) {         Assert.isInstanceOf((Class<?>) args[0], context).     }     return context. }
false;private;1;4;;private boolean isGetStartupFailure(Method method) {     return ("getStartupFailure".equals(method.getName()) && method.getParameterCount() == 0). }
false;private;0;3;;private Object getStartupFailure() {     return this.startupFailure. }
false;private;1;3;;private boolean isAssertThat(Method method) {     return ("assertThat".equals(method.getName()) && method.getParameterCount() == 0). }
false;private;1;4;;private Object getAssertThat(Object proxy) {     return new ApplicationContextAssert<>((ApplicationContext) proxy, this.startupFailure). }
false;private;1;3;;private boolean isCloseMethod(Method method) {     return ("close".equals(method.getName()) && method.getParameterCount() == 0). }
false;private;0;6;;private Object invokeClose() throws IOException {     if (this.applicationContext instanceof Closeable) {         ((Closeable) this.applicationContext).close().     }     return null. }
false;private;2;9;;private Object invokeApplicationContextMethod(Method method, Object[] args) throws Throwable {     try {         return method.invoke(getStartedApplicationContext(), args).     } catch (InvocationTargetException ex) {         throw ex.getTargetException().     } }
false;private;0;7;;private ApplicationContext getStartedApplicationContext() {     if (this.startupFailure != null) {         throw new IllegalStateException(toString() + " failed to start", this.startupFailure).     }     return this.applicationContext. }
