commented;modifiers;parameterAmount;loc;comment;code
false;public;2;23;;@Override public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {     MapPropertySource source = (MapPropertySource) environment.getPropertySources().get(TestPropertySourceUtils.INLINED_PROPERTIES_PROPERTY_SOURCE_NAME).     if (source == null || isTestServerPortFixed(source, environment) || isTestManagementPortConfigured(source)) {         return.     }     Integer managementPort = getPropertyAsInteger(environment, MANAGEMENT_PORT_PROPERTY, null).     if (managementPort == null || managementPort.equals(-1)) {         return.     }     Integer serverPort = getPropertyAsInteger(environment, SERVER_PORT_PROPERTY, 8080).     if (!managementPort.equals(serverPort)) {         source.getSource().put(MANAGEMENT_PORT_PROPERTY, "0").     } else {         source.getSource().put(MANAGEMENT_PORT_PROPERTY, "").     } }
false;private;2;5;;private boolean isTestServerPortFixed(MapPropertySource source, ConfigurableEnvironment environment) {     return !Integer.valueOf(0).equals(getPropertyAsInteger(source, SERVER_PORT_PROPERTY, environment)). }
false;private;1;3;;private boolean isTestManagementPortConfigured(PropertySource<?> source) {     return source.getProperty(MANAGEMENT_PORT_PROPERTY) != null. }
false;private;3;8;;private Integer getPropertyAsInteger(ConfigurableEnvironment environment, String property, Integer defaultValue) {     return environment.getPropertySources().stream().filter((source) -> !source.getName().equals(TestPropertySourceUtils.INLINED_PROPERTIES_PROPERTY_SOURCE_NAME)).map((source) -> getPropertyAsInteger(source, property, environment)).filter(Objects::nonNull).findFirst().orElse(defaultValue). }
false;private;3;19;;private Integer getPropertyAsInteger(PropertySource<?> source, String property, ConfigurableEnvironment environment) {     Object value = source.getProperty(property).     if (value == null) {         return null.     }     if (ClassUtils.isAssignableValue(Integer.class, value)) {         return (Integer) value.     }     try {         return environment.getConversionService().convert(value, Integer.class).     } catch (ConversionFailedException ex) {         if (value instanceof String) {             return getResolvedValueIfPossible(environment, (String) value).         }         throw ex.     } }
false;private;2;5;;private Integer getResolvedValueIfPossible(ConfigurableEnvironment environment, String value) {     String resolvedValue = environment.resolveRequiredPlaceholders(value).     return environment.getConversionService().convert(resolvedValue, Integer.class). }
