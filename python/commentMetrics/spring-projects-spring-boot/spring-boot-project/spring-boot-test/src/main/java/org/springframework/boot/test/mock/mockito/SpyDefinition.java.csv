commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ResolvableType getTypeToSpy() {     return this.typeToSpy. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null || obj.getClass() != getClass()) {         return false.     }     SpyDefinition other = (SpyDefinition) obj.     boolean result = super.equals(obj).     result = result && ObjectUtils.nullSafeEquals(this.typeToSpy, other.typeToSpy).     return result. }
false;public;0;6;;@Override public int hashCode() {     int result = super.hashCode().     result = MULTIPLIER * result + ObjectUtils.nullSafeHashCode(this.typeToSpy).     return result. }
false;public;0;6;;@Override public String toString() {     return new ToStringCreator(this).append("name", getName()).append("typeToSpy", this.typeToSpy).append("reset", getReset()).toString(). }
false;public;1;3;;public <T> T createSpy(Object instance) {     return createSpy(getName(), instance). }
false;public;2;19;;@SuppressWarnings("unchecked") public <T> T createSpy(String name, Object instance) {     Assert.notNull(instance, "Instance must not be null").     Assert.isInstanceOf(this.typeToSpy.resolve(), instance).     if (Mockito.mockingDetails(instance).isSpy()) {         return (T) instance.     }     MockSettings settings = MockReset.withSettings(getReset()).     if (StringUtils.hasLength(name)) {         settings.name(name).     }     settings.spiedInstance(instance).     settings.defaultAnswer(Mockito.CALLS_REAL_METHODS).     if (this.isProxyTargetAware()) {         settings.verificationStartedListeners(new SpringAopBypassingVerificationStartedListener()).     }     return (T) Mockito.mock(instance.getClass(), settings). }
false;public;1;4;;@Override public void onVerificationStarted(VerificationStartedEvent event) {     event.setMock(AopTestUtils.getUltimateTargetObject(event.getMock())). }
