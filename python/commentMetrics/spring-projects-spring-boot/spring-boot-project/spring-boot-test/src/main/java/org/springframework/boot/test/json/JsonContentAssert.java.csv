commented;modifiers;parameterAmount;loc;comment;code
true;public;1;20;/**  * Overridden version of {@code isEqualTo} to perform JSON tests based on the object  * type.  * @see org.assertj.core.api.AbstractAssert#isEqualTo(java.lang.Object)  */ ;/**  * Overridden version of {@code isEqualTo} to perform JSON tests based on the object  * type.  * @see org.assertj.core.api.AbstractAssert#isEqualTo(java.lang.Object)  */ @Override public JsonContentAssert isEqualTo(Object expected) {     if (expected == null || expected instanceof CharSequence) {         return isEqualToJson((CharSequence) expected).     }     if (expected instanceof byte[]) {         return isEqualToJson((byte[]) expected).     }     if (expected instanceof File) {         return isEqualToJson((File) expected).     }     if (expected instanceof InputStream) {         return isEqualToJson((InputStream) expected).     }     if (expected instanceof Resource) {         return isEqualToJson((Resource) expected).     }     failWithMessage("Unsupported type for JSON assert {}", expected.getClass()).     return null. }
true;public;1;4;/**  * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal  * to the specified JSON. The {@code expected} value can contain the JSON itself or,  * if it ends with {@code .json}, the name of a resource to be loaded using  * {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal  * to the specified JSON. The {@code expected} value can contain the JSON itself or,  * if it ends with {@code .json}, the name of a resource to be loaded using  * {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(CharSequence expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, JSONCompareMode.LENIENT)). }
true;public;2;4;/**  * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal  * to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal  * to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(String path, Class<?> resourceLoadClass) {     String expectedJson = this.loader.getJson(path, resourceLoadClass).     return assertNotFailed(compare(expectedJson, JSONCompareMode.LENIENT)). }
true;public;1;4;/**  * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal  * to the specified JSON bytes.  * @param expected the expected JSON bytes  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal  * to the specified JSON bytes.  * @param expected the expected JSON bytes  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(byte[] expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, JSONCompareMode.LENIENT)). }
true;public;1;4;/**  * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal  * to the specified JSON file.  * @param expected a file containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal  * to the specified JSON file.  * @param expected a file containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(File expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, JSONCompareMode.LENIENT)). }
true;public;1;4;/**  * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal  * to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal  * to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(InputStream expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, JSONCompareMode.LENIENT)). }
true;public;1;4;/**  * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal  * to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is {@link JSONCompareMode#LENIENT leniently} equal  * to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(Resource expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, JSONCompareMode.LENIENT)). }
true;public;1;4;/**  * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to  * the specified JSON. The {@code expected} value can contain the JSON itself or, if  * it ends with {@code .json}, the name of a resource to be loaded using  * {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to  * the specified JSON. The {@code expected} value can contain the JSON itself or, if  * it ends with {@code .json}, the name of a resource to be loaded using  * {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isStrictlyEqualToJson(CharSequence expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, JSONCompareMode.STRICT)). }
true;public;2;5;/**  * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to  * the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to  * the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isStrictlyEqualToJson(String path, Class<?> resourceLoadClass) {     String expectedJson = this.loader.getJson(path, resourceLoadClass).     return assertNotFailed(compare(expectedJson, JSONCompareMode.STRICT)). }
true;public;1;4;/**  * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to  * the specified JSON bytes.  * @param expected the expected JSON bytes  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to  * the specified JSON bytes.  * @param expected the expected JSON bytes  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isStrictlyEqualToJson(byte[] expected) {     return assertNotFailed(compare(this.loader.getJson(expected), JSONCompareMode.STRICT)). }
true;public;1;4;/**  * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to  * the specified JSON file.  * @param expected a file containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to  * the specified JSON file.  * @param expected a file containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isStrictlyEqualToJson(File expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, JSONCompareMode.STRICT)). }
true;public;1;4;/**  * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to  * the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to  * the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isStrictlyEqualToJson(InputStream expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, JSONCompareMode.STRICT)). }
true;public;1;4;/**  * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to  * the specified JSON resource.  * @param expected a resource containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is {@link JSONCompareMode#STRICT strictly} equal to  * the specified JSON resource.  * @param expected a resource containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isStrictlyEqualToJson(Resource expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, JSONCompareMode.STRICT)). }
true;public;2;5;/**  * Verifies that the actual value is equal to the specified JSON. The {@code expected}  * value can contain the JSON itself or, if it ends with {@code .json}, the name of a  * resource to be loaded using {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is equal to the specified JSON. The {@code expected}  * value can contain the JSON itself or, if it ends with {@code .json}, the name of a  * resource to be loaded using {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(CharSequence expected, JSONCompareMode compareMode) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, compareMode)). }
true;public;3;5;/**  * Verifies that the actual value is equal to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is equal to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(String path, Class<?> resourceLoadClass, JSONCompareMode compareMode) {     String expectedJson = this.loader.getJson(path, resourceLoadClass).     return assertNotFailed(compare(expectedJson, compareMode)). }
true;public;2;4;/**  * Verifies that the actual value is equal to the specified JSON bytes.  * @param expected the expected JSON bytes  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is equal to the specified JSON bytes.  * @param expected the expected JSON bytes  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(byte[] expected, JSONCompareMode compareMode) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, compareMode)). }
true;public;2;4;/**  * Verifies that the actual value is equal to the specified JSON file.  * @param expected a file containing the expected JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is equal to the specified JSON file.  * @param expected a file containing the expected JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(File expected, JSONCompareMode compareMode) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, compareMode)). }
true;public;2;4;/**  * Verifies that the actual value is equal to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is equal to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(InputStream expected, JSONCompareMode compareMode) {     return assertNotFailed(compare(this.loader.getJson(expected), compareMode)). }
true;public;2;5;/**  * Verifies that the actual value is equal to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is equal to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(Resource expected, JSONCompareMode compareMode) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, compareMode)). }
true;public;2;5;/**  * Verifies that the actual value is equal to the specified JSON. The {@code expected}  * value can contain the JSON itself or, if it ends with {@code .json}, the name of a  * resource to be loaded using {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is equal to the specified JSON. The {@code expected}  * value can contain the JSON itself or, if it ends with {@code .json}, the name of a  * resource to be loaded using {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(CharSequence expected, JSONComparator comparator) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, comparator)). }
true;public;3;5;/**  * Verifies that the actual value is equal to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is equal to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(String path, Class<?> resourceLoadClass, JSONComparator comparator) {     String expectedJson = this.loader.getJson(path, resourceLoadClass).     return assertNotFailed(compare(expectedJson, comparator)). }
true;public;2;4;/**  * Verifies that the actual value is equal to the specified JSON bytes.  * @param expected the expected JSON bytes  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is equal to the specified JSON bytes.  * @param expected the expected JSON bytes  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(byte[] expected, JSONComparator comparator) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, comparator)). }
true;public;2;4;/**  * Verifies that the actual value is equal to the specified JSON file.  * @param expected a file containing the expected JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is equal to the specified JSON file.  * @param expected a file containing the expected JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(File expected, JSONComparator comparator) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, comparator)). }
true;public;2;5;/**  * Verifies that the actual value is equal to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is equal to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(InputStream expected, JSONComparator comparator) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, comparator)). }
true;public;2;4;/**  * Verifies that the actual value is equal to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ ;/**  * Verifies that the actual value is equal to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is not equal to the given one  */ public JsonContentAssert isEqualToJson(Resource expected, JSONComparator comparator) {     String expectedJson = this.loader.getJson(expected).     return assertNotFailed(compare(expectedJson, comparator)). }
true;public;1;20;/**  * Overridden version of {@code isNotEqualTo} to perform JSON tests based on the  * object type.  * @see org.assertj.core.api.AbstractAssert#isEqualTo(java.lang.Object)  */ ;/**  * Overridden version of {@code isNotEqualTo} to perform JSON tests based on the  * object type.  * @see org.assertj.core.api.AbstractAssert#isEqualTo(java.lang.Object)  */ @Override public JsonContentAssert isNotEqualTo(Object expected) {     if (expected == null || expected instanceof CharSequence) {         return isNotEqualToJson((CharSequence) expected).     }     if (expected instanceof byte[]) {         return isNotEqualToJson((byte[]) expected).     }     if (expected instanceof File) {         return isNotEqualToJson((File) expected).     }     if (expected instanceof InputStream) {         return isNotEqualToJson((InputStream) expected).     }     if (expected instanceof Resource) {         return isNotEqualToJson((Resource) expected).     }     failWithMessage("Unsupported type for JSON assert {}", expected.getClass()).     return null. }
true;public;1;4;/**  * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}  * equal to the specified JSON. The {@code expected} value can contain the JSON itself  * or, if it ends with {@code .json}, the name of a resource to be loaded using  * {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}  * equal to the specified JSON. The {@code expected} value can contain the JSON itself  * or, if it ends with {@code .json}, the name of a resource to be loaded using  * {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(CharSequence expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, JSONCompareMode.LENIENT)). }
true;public;2;4;/**  * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}  * equal to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}  * equal to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(String path, Class<?> resourceLoadClass) {     String expectedJson = this.loader.getJson(path, resourceLoadClass).     return assertNotPassed(compare(expectedJson, JSONCompareMode.LENIENT)). }
true;public;1;4;/**  * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}  * equal to the specified JSON bytes.  * @param expected the expected JSON bytes  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}  * equal to the specified JSON bytes.  * @param expected the expected JSON bytes  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(byte[] expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, JSONCompareMode.LENIENT)). }
true;public;1;4;/**  * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}  * equal to the specified JSON file.  * @param expected a file containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}  * equal to the specified JSON file.  * @param expected a file containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(File expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, JSONCompareMode.LENIENT)). }
true;public;1;4;/**  * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}  * equal to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}  * equal to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(InputStream expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, JSONCompareMode.LENIENT)). }
true;public;1;4;/**  * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}  * equal to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not {@link JSONCompareMode#LENIENT leniently}  * equal to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(Resource expected) {     return assertNotPassed(compare(this.loader.getJson(expected), JSONCompareMode.LENIENT)). }
true;public;1;4;/**  * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal  * to the specified JSON. The {@code expected} value can contain the JSON itself or,  * if it ends with {@code .json}, the name of a resource to be loaded using  * {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal  * to the specified JSON. The {@code expected} value can contain the JSON itself or,  * if it ends with {@code .json}, the name of a resource to be loaded using  * {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotStrictlyEqualToJson(CharSequence expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT)). }
true;public;2;5;/**  * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal  * to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal  * to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotStrictlyEqualToJson(String path, Class<?> resourceLoadClass) {     String expectedJson = this.loader.getJson(path, resourceLoadClass).     return assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT)). }
true;public;1;4;/**  * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal  * to the specified JSON bytes.  * @param expected the expected JSON bytes  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal  * to the specified JSON bytes.  * @param expected the expected JSON bytes  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotStrictlyEqualToJson(byte[] expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT)). }
true;public;1;4;/**  * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal  * to the specified JSON file.  * @param expected a file containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal  * to the specified JSON file.  * @param expected a file containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotStrictlyEqualToJson(File expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT)). }
true;public;1;4;/**  * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal  * to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal  * to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotStrictlyEqualToJson(InputStream expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT)). }
true;public;1;4;/**  * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal  * to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not {@link JSONCompareMode#STRICT strictly} equal  * to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotStrictlyEqualToJson(Resource expected) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, JSONCompareMode.STRICT)). }
true;public;2;5;/**  * Verifies that the actual value is not equal to the specified JSON. The  * {@code expected} value can contain the JSON itself or, if it ends with  * {@code .json}, the name of a resource to be loaded using {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not equal to the specified JSON. The  * {@code expected} value can contain the JSON itself or, if it ends with  * {@code .json}, the name of a resource to be loaded using {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(CharSequence expected, JSONCompareMode compareMode) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, compareMode)). }
true;public;3;5;/**  * Verifies that the actual value is not equal to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not equal to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(String path, Class<?> resourceLoadClass, JSONCompareMode compareMode) {     String expectedJson = this.loader.getJson(path, resourceLoadClass).     return assertNotPassed(compare(expectedJson, compareMode)). }
true;public;2;5;/**  * Verifies that the actual value is not equal to the specified JSON bytes.  * @param expected the expected JSON bytes  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not equal to the specified JSON bytes.  * @param expected the expected JSON bytes  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(byte[] expected, JSONCompareMode compareMode) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, compareMode)). }
true;public;2;5;/**  * Verifies that the actual value is not equal to the specified JSON file.  * @param expected a file containing the expected JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not equal to the specified JSON file.  * @param expected a file containing the expected JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(File expected, JSONCompareMode compareMode) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, compareMode)). }
true;public;2;5;/**  * Verifies that the actual value is not equal to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not equal to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(InputStream expected, JSONCompareMode compareMode) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, compareMode)). }
true;public;2;5;/**  * Verifies that the actual value is not equal to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not equal to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @param compareMode the compare mode used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(Resource expected, JSONCompareMode compareMode) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, compareMode)). }
true;public;2;5;/**  * Verifies that the actual value is not equal to the specified JSON. The  * {@code expected} value can contain the JSON itself or, if it ends with  * {@code .json}, the name of a resource to be loaded using {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not equal to the specified JSON. The  * {@code expected} value can contain the JSON itself or, if it ends with  * {@code .json}, the name of a resource to be loaded using {@code resourceLoadClass}.  * @param expected the expected JSON or the name of a resource containing the expected  * JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(CharSequence expected, JSONComparator comparator) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, comparator)). }
true;public;3;5;/**  * Verifies that the actual value is not equal to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not equal to the specified JSON resource.  * @param path the name of a resource containing the expected JSON  * @param resourceLoadClass the source class used to load the resource  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(String path, Class<?> resourceLoadClass, JSONComparator comparator) {     String expectedJson = this.loader.getJson(path, resourceLoadClass).     return assertNotPassed(compare(expectedJson, comparator)). }
true;public;2;5;/**  * Verifies that the actual value is not equal to the specified JSON bytes.  * @param expected the expected JSON bytes  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not equal to the specified JSON bytes.  * @param expected the expected JSON bytes  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(byte[] expected, JSONComparator comparator) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, comparator)). }
true;public;2;4;/**  * Verifies that the actual value is not equal to the specified JSON file.  * @param expected a file containing the expected JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not equal to the specified JSON file.  * @param expected a file containing the expected JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(File expected, JSONComparator comparator) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, comparator)). }
true;public;2;5;/**  * Verifies that the actual value is not equal to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not equal to the specified JSON input stream.  * @param expected an input stream containing the expected JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(InputStream expected, JSONComparator comparator) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, comparator)). }
true;public;2;5;/**  * Verifies that the actual value is not equal to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ ;/**  * Verifies that the actual value is not equal to the specified JSON resource.  * @param expected a resource containing the expected JSON  * @param comparator the comparator used when checking  * @return {@code this} assertion object  * @throws AssertionError if the actual JSON value is equal to the given one  */ public JsonContentAssert isNotEqualToJson(Resource expected, JSONComparator comparator) {     String expectedJson = this.loader.getJson(expected).     return assertNotPassed(compare(expectedJson, comparator)). }
true;public;2;4;/**  * Verify that the actual value at the given JSON path produces a non-null result. If  * the JSON path expression is not {@linkplain JsonPath#isDefinite() definite}, this  * method verifies that the value at the given path is not <em>empty</em>.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is missing  */ ;/**  * Verify that the actual value at the given JSON path produces a non-null result. If  * the JSON path expression is not {@linkplain JsonPath#isDefinite() definite}, this  * method verifies that the value at the given path is not <em>empty</em>.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is missing  */ public JsonContentAssert hasJsonPathValue(CharSequence expression, Object... args) {     new JsonPathValue(expression, args).assertHasValue(Object.class, "an object").     return this. }
true;public;2;5;/**  * Verify that the actual value at the given JSON path produces a non-null string  * result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is missing or not a string  */ ;/**  * Verify that the actual value at the given JSON path produces a non-null string  * result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is missing or not a string  */ public JsonContentAssert hasJsonPathStringValue(CharSequence expression, Object... args) {     new JsonPathValue(expression, args).assertHasValue(String.class, "a string").     return this. }
true;public;2;5;/**  * Verify that the actual value at the given JSON path produces a non-null number  * result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is missing or not a number  */ ;/**  * Verify that the actual value at the given JSON path produces a non-null number  * result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is missing or not a number  */ public JsonContentAssert hasJsonPathNumberValue(CharSequence expression, Object... args) {     new JsonPathValue(expression, args).assertHasValue(Number.class, "a number").     return this. }
true;public;2;5;/**  * Verify that the actual value at the given JSON path produces a non-null boolean  * result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is missing or not a boolean  */ ;/**  * Verify that the actual value at the given JSON path produces a non-null boolean  * result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is missing or not a boolean  */ public JsonContentAssert hasJsonPathBooleanValue(CharSequence expression, Object... args) {     new JsonPathValue(expression, args).assertHasValue(Boolean.class, "a boolean").     return this. }
true;public;2;5;/**  * Verify that the actual value at the given JSON path produces a non-null array  * result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is missing or not an array  */ ;/**  * Verify that the actual value at the given JSON path produces a non-null array  * result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is missing or not an array  */ public JsonContentAssert hasJsonPathArrayValue(CharSequence expression, Object... args) {     new JsonPathValue(expression, args).assertHasValue(List.class, "an array").     return this. }
true;public;2;5;/**  * Verify that the actual value at the given JSON path produces a non-null map result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is missing or not a map  */ ;/**  * Verify that the actual value at the given JSON path produces a non-null map result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is missing or not a map  */ public JsonContentAssert hasJsonPathMapValue(CharSequence expression, Object... args) {     new JsonPathValue(expression, args).assertHasValue(Map.class, "a map").     return this. }
true;public;2;5;/**  * Verify that the actual value at the given JSON path produces an  * {@link ObjectUtils#isEmpty(Object) empty} result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is not empty  */ ;/**  * Verify that the actual value at the given JSON path produces an  * {@link ObjectUtils#isEmpty(Object) empty} result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is not empty  */ public JsonContentAssert hasEmptyJsonPathValue(CharSequence expression, Object... args) {     new JsonPathValue(expression, args).assertHasEmptyValue().     return this. }
true;public;2;5;/**  * Verify that the actual value at the given JSON path produces no result. If the JSON  * path expression is not {@linkplain JsonPath#isDefinite() definite}, this method  * verifies that the value at the given path is <em>empty</em>.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is not missing  */ ;/**  * Verify that the actual value at the given JSON path produces no result. If the JSON  * path expression is not {@linkplain JsonPath#isDefinite() definite}, this method  * verifies that the value at the given path is <em>empty</em>.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is not missing  */ public JsonContentAssert doesNotHaveJsonPathValue(CharSequence expression, Object... args) {     new JsonPathValue(expression, args).assertDoesNotHaveValue().     return this. }
true;public;2;5;/**  * Verify that the actual value at the given JSON path does not produce an  * {@link ObjectUtils#isEmpty(Object) empty} result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is empty  */ ;/**  * Verify that the actual value at the given JSON path does not produce an  * {@link ObjectUtils#isEmpty(Object) empty} result.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return {@code this} assertion object  * @throws AssertionError if the value at the given path is empty  */ public JsonContentAssert doesNotHaveEmptyJsonPathValue(CharSequence expression, Object... args) {     new JsonPathValue(expression, args).assertDoesNotHaveEmptyValue().     return this. }
true;public;2;4;/**  * Extract the value at the given JSON path for further object assertions.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return a new assertion object whose object under test is the extracted item  * @throws AssertionError if the path is not valid  */ ;/**  * Extract the value at the given JSON path for further object assertions.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return a new assertion object whose object under test is the extracted item  * @throws AssertionError if the path is not valid  */ public AbstractObjectAssert<?, Object> extractingJsonPathValue(CharSequence expression, Object... args) {     return Assertions.assertThat(new JsonPathValue(expression, args).getValue(false)). }
true;public;2;5;/**  * Extract the string value at the given JSON path for further object assertions.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return a new assertion object whose object under test is the extracted item  * @throws AssertionError if the path is not valid or does not result in a string  */ ;/**  * Extract the string value at the given JSON path for further object assertions.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return a new assertion object whose object under test is the extracted item  * @throws AssertionError if the path is not valid or does not result in a string  */ public AbstractCharSequenceAssert<?, String> extractingJsonPathStringValue(CharSequence expression, Object... args) {     return Assertions.assertThat(extractingJsonPathValue(expression, args, String.class, "a string")). }
true;public;2;5;/**  * Extract the number value at the given JSON path for further object assertions.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return a new assertion object whose object under test is the extracted item  * @throws AssertionError if the path is not valid or does not result in a number  */ ;/**  * Extract the number value at the given JSON path for further object assertions.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return a new assertion object whose object under test is the extracted item  * @throws AssertionError if the path is not valid or does not result in a number  */ public AbstractObjectAssert<?, Number> extractingJsonPathNumberValue(CharSequence expression, Object... args) {     return Assertions.assertThat(extractingJsonPathValue(expression, args, Number.class, "a number")). }
true;public;2;5;/**  * Extract the boolean value at the given JSON path for further object assertions.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return a new assertion object whose object under test is the extracted item  * @throws AssertionError if the path is not valid or does not result in a boolean  */ ;/**  * Extract the boolean value at the given JSON path for further object assertions.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @return a new assertion object whose object under test is the extracted item  * @throws AssertionError if the path is not valid or does not result in a boolean  */ public AbstractBooleanAssert<?> extractingJsonPathBooleanValue(CharSequence expression, Object... args) {     return Assertions.assertThat(extractingJsonPathValue(expression, args, Boolean.class, "a boolean")). }
true;public;2;6;/**  * Extract the array value at the given JSON path for further object assertions.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @param <E> element type  * @return a new assertion object whose object under test is the extracted item  * @throws AssertionError if the path is not valid or does not result in an array  */ ;/**  * Extract the array value at the given JSON path for further object assertions.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @param <E> element type  * @return a new assertion object whose object under test is the extracted item  * @throws AssertionError if the path is not valid or does not result in an array  */ @SuppressWarnings("unchecked") public <E> ListAssert<E> extractingJsonPathArrayValue(CharSequence expression, Object... args) {     return Assertions.assertThat(extractingJsonPathValue(expression, args, List.class, "an array")). }
true;public;2;6;/**  * Extract the map value at the given JSON path for further object assertions.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @param <K> key type  * @param <V> value type  * @return a new assertion object whose object under test is the extracted item  * @throws AssertionError if the path is not valid or does not result in a map  */ ;/**  * Extract the map value at the given JSON path for further object assertions.  * @param expression the {@link JsonPath} expression  * @param args arguments to parameterize the {@code JsonPath} expression with, using  * formatting specifiers defined in {@link String#format(String, Object...)}  * @param <K> key type  * @param <V> value type  * @return a new assertion object whose object under test is the extracted item  * @throws AssertionError if the path is not valid or does not result in a map  */ @SuppressWarnings("unchecked") public <K, V> MapAssert<K, V> extractingJsonPathMapValue(CharSequence expression, Object... args) {     return Assertions.assertThat(extractingJsonPathValue(expression, args, Map.class, "a map")). }
false;private;4;9;;@SuppressWarnings("unchecked") private <T> T extractingJsonPathValue(CharSequence expression, Object[] args, Class<T> type, String expectedDescription) {     JsonPathValue value = new JsonPathValue(expression, args).     if (value.getValue(false) != null) {         value.assertHasValue(type, expectedDescription).     }     return (T) value.getValue(false). }
false;private;2;17;;private JSONCompareResult compare(CharSequence expectedJson, JSONCompareMode compareMode) {     if (this.actual == null) {         return compareForNull(expectedJson).     }     try {         return JSONCompare.compareJSON((expectedJson != null) ? expectedJson.toString() : null, this.actual.toString(), compareMode).     } catch (Exception ex) {         if (ex instanceof RuntimeException) {             throw (RuntimeException) ex.         }         throw new IllegalStateException(ex).     } }
false;private;2;17;;private JSONCompareResult compare(CharSequence expectedJson, JSONComparator comparator) {     if (this.actual == null) {         return compareForNull(expectedJson).     }     try {         return JSONCompare.compareJSON((expectedJson != null) ? expectedJson.toString() : null, this.actual.toString(), comparator).     } catch (Exception ex) {         if (ex instanceof RuntimeException) {             throw (RuntimeException) ex.         }         throw new IllegalStateException(ex).     } }
false;private;1;8;;private JSONCompareResult compareForNull(CharSequence expectedJson) {     JSONCompareResult result = new JSONCompareResult().     result.passed().     if (expectedJson != null) {         result.fail("Expected null JSON").     }     return result. }
false;private;1;6;;private JsonContentAssert assertNotFailed(JSONCompareResult result) {     if (result.failed()) {         failWithMessage("JSON Comparison failure: {}", result.getMessage()).     }     return this. }
false;private;1;6;;private JsonContentAssert assertNotPassed(JSONCompareResult result) {     if (result.passed()) {         failWithMessage("JSON Comparison failure: {}", result.getMessage()).     }     return this. }
false;public;0;6;;public void assertHasEmptyValue() {     if (ObjectUtils.isEmpty(getValue(false)) || isIndefiniteAndEmpty()) {         return.     }     failWithMessage(getExpectedValueMessage("an empty value")). }
false;public;0;7;;public void assertDoesNotHaveEmptyValue() {     if (!ObjectUtils.isEmpty(getValue(false))) {         return.     }     failWithMessage(getExpectedValueMessage("a non-empty value")). }
false;public;2;9;;public void assertHasValue(Class<?> type, String expectedDescription) {     Object value = getValue(true).     if (value == null || isIndefiniteAndEmpty()) {         failWithMessage(getNoValueMessage()).     }     if (type != null && !type.isInstance(value)) {         failWithMessage(getExpectedValueMessage(expectedDescription)).     } }
false;public;0;6;;public void assertDoesNotHaveValue() {     if (getValue(false) == null || isIndefiniteAndEmpty()) {         return.     }     failWithMessage(getExpectedValueMessage("no value")). }
false;private;0;3;;private boolean isIndefiniteAndEmpty() {     return !isDefinite() && isEmpty(). }
false;private;0;3;;private boolean isDefinite() {     return this.jsonPath.isDefinite(). }
false;private;0;3;;private boolean isEmpty() {     return ObjectUtils.isEmpty(getValue(false)). }
false;public;1;12;;public Object getValue(boolean required) {     try {         CharSequence json = JsonContentAssert.this.actual.         return this.jsonPath.read((json != null) ? json.toString() : null).     } catch (Exception ex) {         if (required) {             failWithMessage("{}. {}", getNoValueMessage(), ex.getMessage()).         }         return null.     } }
false;private;0;3;;private String getNoValueMessage() {     return "No value at JSON path \"" + this.expression + "\"". }
false;private;1;5;;private String getExpectedValueMessage(String expectedDescription) {     return String.format("Expected %s at JSON path \"%s\" but found: %s", expectedDescription, this.expression, ObjectUtils.nullSafeToString(StringUtils.quoteIfString(getValue(false)))). }
