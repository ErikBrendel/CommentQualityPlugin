commented;modifiers;parameterAmount;loc;comment;code
false;public;1;49;;@Override public ApplicationContext loadContext(MergedContextConfiguration config) throws Exception {     Class<?>[] configClasses = config.getClasses().     String[] configLocations = config.getLocations().     Assert.state(!ObjectUtils.isEmpty(configClasses) || !ObjectUtils.isEmpty(configLocations), () -> "No configuration classes " + "or locations found in @SpringApplicationConfiguration. " + "For default configuration detection to work you need " + "Spring 4.0.3 or better (found " + SpringVersion.getVersion() + ").").     SpringApplication application = getSpringApplication().     application.setMainApplicationClass(config.getTestClass()).     application.addPrimarySources(Arrays.asList(configClasses)).     application.getSources().addAll(Arrays.asList(configLocations)).     ConfigurableEnvironment environment = getEnvironment().     if (!ObjectUtils.isEmpty(config.getActiveProfiles())) {         setActiveProfiles(environment, config.getActiveProfiles()).     }     ResourceLoader resourceLoader = (application.getResourceLoader() != null) ? application.getResourceLoader() : new DefaultResourceLoader(getClass().getClassLoader()).     TestPropertySourceUtils.addPropertiesFilesToEnvironment(environment, resourceLoader, config.getPropertySourceLocations()).     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(environment, getInlinedProperties(config)).     application.setEnvironment(environment).     List<ApplicationContextInitializer<?>> initializers = getInitializers(config, application).     if (config instanceof WebMergedContextConfiguration) {         application.setWebApplicationType(WebApplicationType.SERVLET).         if (!isEmbeddedWebEnvironment(config)) {             new WebConfigurer().configure(config, application, initializers).         }     } else if (config instanceof ReactiveWebMergedContextConfiguration) {         application.setWebApplicationType(WebApplicationType.REACTIVE).         if (!isEmbeddedWebEnvironment(config)) {             new ReactiveWebConfigurer().configure(application).         }     } else {         application.setWebApplicationType(WebApplicationType.NONE).     }     application.setInitializers(initializers).     return application.run(getArgs(config)). }
true;protected;0;3;/**  * Builds new {@link org.springframework.boot.SpringApplication} instance. You can  * override this method to add custom behavior  * @return {@link org.springframework.boot.SpringApplication} instance  */ ;/**  * Builds new {@link org.springframework.boot.SpringApplication} instance. You can  * override this method to add custom behavior  * @return {@link org.springframework.boot.SpringApplication} instance  */ protected SpringApplication getSpringApplication() {     return new SpringApplication(). }
true;protected;0;3;/**  * Builds a new {@link ConfigurableEnvironment} instance. You can override this method  * to return something other than {@link StandardEnvironment} if necessary.  * @return a {@link ConfigurableEnvironment} instance  */ ;/**  * Builds a new {@link ConfigurableEnvironment} instance. You can override this method  * to return something other than {@link StandardEnvironment} if necessary.  * @return a {@link ConfigurableEnvironment} instance  */ protected ConfigurableEnvironment getEnvironment() {     return new StandardEnvironment(). }
true;protected;1;5;/**  * Return the application arguments to use. If no arguments are available, return an  * empty array.  * @param config the source context configuration  * @return the application arguments to use  * @see SpringApplication#run(String...)  */ ;/**  * Return the application arguments to use. If no arguments are available, return an  * empty array.  * @param config the source context configuration  * @return the application arguments to use  * @see SpringApplication#run(String...)  */ protected String[] getArgs(MergedContextConfiguration config) {     SpringBootTest annotation = AnnotatedElementUtils.findMergedAnnotation(config.getTestClass(), SpringBootTest.class).     return (annotation != null) ? annotation.args() : new String[0]. }
false;private;2;7;;private void setActiveProfiles(ConfigurableEnvironment environment, String[] profiles) {     TestPropertyValues.of("spring.profiles.active=" + StringUtils.arrayToCommaDelimitedString(profiles)).applyTo(environment). }
false;protected;1;10;;protected String[] getInlinedProperties(MergedContextConfiguration config) {     ArrayList<String> properties = new ArrayList<>().     // JMX bean names will clash if the same bean is used in multiple contexts     disableJmx(properties).     properties.addAll(Arrays.asList(config.getPropertySourceProperties())).     if (!isEmbeddedWebEnvironment(config) && !hasCustomServerPort(properties)) {         properties.add("server.port=-1").     }     return StringUtils.toStringArray(properties). }
false;private;1;3;;private void disableJmx(List<String> properties) {     properties.add("spring.jmx.enabled=false"). }
false;private;1;4;;private boolean hasCustomServerPort(List<String> properties) {     Binder binder = new Binder(convertToConfigurationPropertySource(properties)).     return binder.bind("server.port", Bindable.of(String.class)).isBound(). }
false;private;1;5;;private ConfigurationPropertySource convertToConfigurationPropertySource(List<String> properties) {     return new MapConfigurationPropertySource(TestPropertySourceUtils.convertInlinedPropertiesToMap(StringUtils.toStringArray(properties))). }
true;protected;2;17;/**  * Return the {@link ApplicationContextInitializer initializers} that will be applied  * to the context. By default this method will adapt {@link ContextCustomizer context  * customizers}, add {@link SpringApplication#getInitializers() application  * initializers} and add  * {@link MergedContextConfiguration#getContextInitializerClasses() initializers  * specified on the test}.  * @param config the source context configuration  * @param application the application instance  * @return the initializers to apply  * @since 2.0.0  */ ;/**  * Return the {@link ApplicationContextInitializer initializers} that will be applied  * to the context. By default this method will adapt {@link ContextCustomizer context  * customizers}, add {@link SpringApplication#getInitializers() application  * initializers} and add  * {@link MergedContextConfiguration#getContextInitializerClasses() initializers  * specified on the test}.  * @param config the source context configuration  * @param application the application instance  * @return the initializers to apply  * @since 2.0.0  */ protected List<ApplicationContextInitializer<?>> getInitializers(MergedContextConfiguration config, SpringApplication application) {     List<ApplicationContextInitializer<?>> initializers = new ArrayList<>().     for (ContextCustomizer contextCustomizer : config.getContextCustomizers()) {         initializers.add(new ContextCustomizerAdapter(contextCustomizer, config)).     }     initializers.addAll(application.getInitializers()).     for (Class<? extends ApplicationContextInitializer<?>> initializerClass : config.getContextInitializerClasses()) {         initializers.add(BeanUtils.instantiateClass(initializerClass)).     }     if (config.getParent() != null) {         initializers.add(new ParentContextApplicationContextInitializer(config.getParentApplicationContext())).     }     return initializers. }
false;private;1;8;;private boolean isEmbeddedWebEnvironment(MergedContextConfiguration config) {     SpringBootTest annotation = AnnotatedElementUtils.findMergedAnnotation(config.getTestClass(), SpringBootTest.class).     if (annotation != null && annotation.webEnvironment().isEmbedded()) {         return true.     }     return false. }
false;public;1;10;;@Override public void processContextConfiguration(ContextConfigurationAttributes configAttributes) {     super.processContextConfiguration(configAttributes).     if (!configAttributes.hasResources()) {         Class<?>[] defaultConfigClasses = detectDefaultConfigurationClasses(configAttributes.getDeclaringClass()).         configAttributes.setClasses(defaultConfigClasses).     } }
true;protected;1;4;/**  * Detect the default configuration classes for the supplied test class. By default  * simply delegates to  * {@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses}.  * @param declaringClass the test class that declared {@code @ContextConfiguration}  * @return an array of default configuration classes, potentially empty but never  * {@code null}  * @see AnnotationConfigContextLoaderUtils  */ ;/**  * Detect the default configuration classes for the supplied test class. By default  * simply delegates to  * {@link AnnotationConfigContextLoaderUtils#detectDefaultConfigurationClasses}.  * @param declaringClass the test class that declared {@code @ContextConfiguration}  * @return an array of default configuration classes, potentially empty but never  * {@code null}  * @see AnnotationConfigContextLoaderUtils  */ protected Class<?>[] detectDefaultConfigurationClasses(Class<?> declaringClass) {     return AnnotationConfigContextLoaderUtils.detectDefaultConfigurationClasses(declaringClass). }
false;public;1;5;;@Override public ApplicationContext loadContext(String... locations) throws Exception {     throw new UnsupportedOperationException("SpringApplicationContextLoader " + "does not support the loadContext(String...) method"). }
false;protected;0;4;;@Override protected String[] getResourceSuffixes() {     return new String[] { "-context.xml", "Context.groovy" }. }
false;protected;0;4;;@Override protected String getResourceSuffix() {     throw new IllegalStateException(). }
false;;3;7;;void configure(MergedContextConfiguration configuration, SpringApplication application, List<ApplicationContextInitializer<?>> initializers) {     WebMergedContextConfiguration webConfiguration = (WebMergedContextConfiguration) configuration.     addMockServletContext(initializers, webConfiguration).     application.setApplicationContextClass(WEB_CONTEXT_CLASS). }
false;private;2;8;;private void addMockServletContext(List<ApplicationContextInitializer<?>> initializers, WebMergedContextConfiguration webConfiguration) {     SpringBootMockServletContext servletContext = new SpringBootMockServletContext(webConfiguration.getResourceBasePath()).     initializers.add(0, new ServletContextApplicationContextInitializer(servletContext, true)). }
false;;1;3;;void configure(SpringApplication application) {     application.setApplicationContextClass(WEB_CONTEXT_CLASS). }
false;public;1;4;;@Override public void initialize(ConfigurableApplicationContext applicationContext) {     this.contextCustomizer.customizeContext(applicationContext, this.config). }
false;public;1;4;;@Override public void initialize(ConfigurableApplicationContext applicationContext) {     applicationContext.setParent(this.parent). }
