commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the name for bean.  * @return the name or {@code null}  */ ;/**  * Return the name for bean.  * @return the name or {@code null}  */ public String getName() {     return this.name. }
true;public;0;3;/**  * Return the mock reset mode.  * @return the reset mode  */ ;/**  * Return the mock reset mode.  * @return the reset mode  */ public MockReset getReset() {     return this.reset. }
true;public;0;3;/**  * Return if AOP advised beans should be proxy target aware.  * @return if proxy target aware  */ ;/**  * Return if AOP advised beans should be proxy target aware.  * @return if proxy target aware  */ public boolean isProxyTargetAware() {     return this.proxyTargetAware. }
true;public;0;3;/**  * Return the qualifier or {@code null}.  * @return the qualifier  */ ;/**  * Return the qualifier or {@code null}.  * @return the qualifier  */ public QualifierDefinition getQualifier() {     return this.qualifier. }
false;public;1;17;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null || !getClass().isAssignableFrom(obj.getClass())) {         return false.     }     Definition other = (Definition) obj.     boolean result = true.     result = result && ObjectUtils.nullSafeEquals(this.name, other.name).     result = result && ObjectUtils.nullSafeEquals(this.reset, other.reset).     result = result && ObjectUtils.nullSafeEquals(this.proxyTargetAware, other.proxyTargetAware).     result = result && ObjectUtils.nullSafeEquals(this.qualifier, other.qualifier).     return result. }
false;public;0;10;;@Override public int hashCode() {     int result = 1.     result = MULTIPLIER * result + ObjectUtils.nullSafeHashCode(this.name).     result = MULTIPLIER * result + ObjectUtils.nullSafeHashCode(this.reset).     result = MULTIPLIER * result + ObjectUtils.nullSafeHashCode(this.proxyTargetAware).     result = MULTIPLIER * result + ObjectUtils.nullSafeHashCode(this.qualifier).     return result. }
