commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedContextConfiguration) {     SpringBootTest annotation = AnnotatedElementUtils.getMergedAnnotation(mergedContextConfiguration.getTestClass(), SpringBootTest.class).     if (annotation.webEnvironment().isEmbedded()) {         registerTestRestTemplate(context).     } }
false;private;1;6;;private void registerTestRestTemplate(ConfigurableApplicationContext context) {     ConfigurableListableBeanFactory beanFactory = context.getBeanFactory().     if (beanFactory instanceof BeanDefinitionRegistry) {         registerTestRestTemplate((BeanDefinitionRegistry) beanFactory).     } }
false;private;1;7;;private void registerTestRestTemplate(BeanDefinitionRegistry registry) {     RootBeanDefinition definition = new RootBeanDefinition(TestRestTemplateRegistrar.class).     definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).     registry.registerBeanDefinition(TestRestTemplateRegistrar.class.getName(), definition). }
false;public;1;7;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     return true. }
false;public;0;4;;@Override public int hashCode() {     return getClass().hashCode(). }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     this.beanFactory = beanFactory. }
false;public;0;4;;@Override public int getOrder() {     return Ordered.LOWEST_PRECEDENCE. }
false;public;1;11;;@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {     if (BeanFactoryUtils.beanNamesForTypeIncludingAncestors((ListableBeanFactory) this.beanFactory, TestRestTemplate.class).length == 0) {         registry.registerBeanDefinition(TestRestTemplate.class.getName(), new RootBeanDefinition(TestRestTemplateFactory.class)).     } }
false;public;1;4;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { }
false;public;1;12;;@Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {     RestTemplateBuilder builder = getRestTemplateBuilder(applicationContext).     boolean sslEnabled = isSslEnabled(applicationContext).     TestRestTemplate template = new TestRestTemplate(builder, null, null, sslEnabled ? SSL_OPTIONS : DEFAULT_OPTIONS).     LocalHostUriTemplateHandler handler = new LocalHostUriTemplateHandler(applicationContext.getEnvironment(), sslEnabled ? "https" : "http").     template.setUriTemplateHandler(handler).     this.template = template. }
false;private;1;11;;private boolean isSslEnabled(ApplicationContext context) {     try {         AbstractServletWebServerFactory webServerFactory = context.getBean(AbstractServletWebServerFactory.class).         return webServerFactory.getSsl() != null && webServerFactory.getSsl().isEnabled().     } catch (NoSuchBeanDefinitionException ex) {         return false.     } }
false;private;1;9;;private RestTemplateBuilder getRestTemplateBuilder(ApplicationContext applicationContext) {     try {         return applicationContext.getBean(RestTemplateBuilder.class).     } catch (NoSuchBeanDefinitionException ex) {         return new RestTemplateBuilder().     } }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return TestRestTemplate.class. }
false;public;0;4;;@Override public TestRestTemplate getObject() throws Exception {     return this.template. }
