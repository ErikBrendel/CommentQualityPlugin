commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {     SpringBootTest annotation = AnnotatedElementUtils.getMergedAnnotation(mergedConfig.getTestClass(), SpringBootTest.class).     if (annotation.webEnvironment().isEmbedded()) {         registerWebTestClient(context).     } }
false;private;1;6;;private void registerWebTestClient(ConfigurableApplicationContext context) {     ConfigurableListableBeanFactory beanFactory = context.getBeanFactory().     if (beanFactory instanceof BeanDefinitionRegistry) {         registerWebTestClient((BeanDefinitionRegistry) beanFactory).     } }
false;private;1;7;;private void registerWebTestClient(BeanDefinitionRegistry registry) {     RootBeanDefinition definition = new RootBeanDefinition(WebTestClientRegistrar.class).     definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).     registry.registerBeanDefinition(WebTestClientRegistrar.class.getName(), definition). }
false;public;1;4;;@Override public boolean equals(Object obj) {     return (obj != null && obj.getClass() == getClass()). }
false;public;0;4;;@Override public int hashCode() {     return getClass().hashCode(). }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     this.beanFactory = beanFactory. }
false;public;0;4;;@Override public int getOrder() {     return Ordered.LOWEST_PRECEDENCE. }
false;public;1;11;;@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {     if (BeanFactoryUtils.beanNamesForTypeIncludingAncestors((ListableBeanFactory) this.beanFactory, WebTestClient.class).length == 0) {         registry.registerBeanDefinition(WebTestClient.class.getName(), new RootBeanDefinition(WebTestClientFactory.class)).     } }
false;public;1;4;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { }
false;public;1;5;;@Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {     this.applicationContext = applicationContext. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return WebTestClient.class. }
false;public;0;7;;@Override public WebTestClient getObject() throws Exception {     if (this.object == null) {         this.object = createWebTestClient().     }     return this.object. }
false;private;0;9;;private WebTestClient createWebTestClient() {     boolean sslEnabled = isSslEnabled(this.applicationContext).     String port = this.applicationContext.getEnvironment().getProperty("local.server.port", "8080").     String baseUrl = (sslEnabled ? "https" : "http") + "://localhost:" + port.     WebTestClient.Builder builder = WebTestClient.bindToServer().     customizeWebTestClientCodecs(builder, this.applicationContext).     return builder.baseUrl(baseUrl).build(). }
false;private;1;11;;private boolean isSslEnabled(ApplicationContext context) {     try {         AbstractReactiveWebServerFactory webServerFactory = context.getBean(AbstractReactiveWebServerFactory.class).         return webServerFactory.getSsl() != null && webServerFactory.getSsl().isEnabled().     } catch (NoSuchBeanDefinitionException ex) {         return false.     } }
false;private;2;11;;private void customizeWebTestClientCodecs(WebTestClient.Builder clientBuilder, ApplicationContext context) {     Collection<CodecCustomizer> codecCustomizers = context.getBeansOfType(CodecCustomizer.class).values().     if (!CollectionUtils.isEmpty(codecCustomizers)) {         clientBuilder.exchangeStrategies(ExchangeStrategies.builder().codecs((codecs) -> codecCustomizers.forEach((codecCustomizer) -> codecCustomizer.customize(codecs))).build()).     } }
