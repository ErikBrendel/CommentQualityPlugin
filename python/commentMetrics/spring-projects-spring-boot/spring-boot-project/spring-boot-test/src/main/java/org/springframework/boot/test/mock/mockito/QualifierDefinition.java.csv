commented;modifiers;parameterAmount;loc;comment;code
false;public;2;3;;public boolean matches(ConfigurableListableBeanFactory beanFactory, String beanName) {     return beanFactory.isAutowireCandidate(beanName, this.descriptor). }
false;public;1;3;;public void applyTo(RootBeanDefinition definition) {     definition.setQualifiedElement(this.field). }
false;public;1;11;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null || !getClass().isAssignableFrom(obj.getClass())) {         return false.     }     QualifierDefinition other = (QualifierDefinition) obj.     return this.annotations.equals(other.annotations). }
false;public;0;4;;@Override public int hashCode() {     return this.annotations.hashCode(). }
false;public,static;1;10;;public static QualifierDefinition forElement(AnnotatedElement element) {     if (element != null && element instanceof Field) {         Field field = (Field) element.         Set<Annotation> annotations = getQualifierAnnotations(field).         if (!annotations.isEmpty()) {             return new QualifierDefinition(field, annotations).         }     }     return null. }
false;private,static;1;11;;private static Set<Annotation> getQualifierAnnotations(Field field) {     // Assume that any annotations other than @MockBean/@SpyBean are qualifiers     Annotation[] candidates = field.getDeclaredAnnotations().     Set<Annotation> annotations = new HashSet<>(candidates.length).     for (Annotation candidate : candidates) {         if (!isMockOrSpyAnnotation(candidate)) {             annotations.add(candidate).         }     }     return annotations. }
false;private,static;1;6;;private static boolean isMockOrSpyAnnotation(Annotation candidate) {     Class<? extends Annotation> type = candidate.annotationType().     return (type.equals(MockBean.class) || type.equals(SpyBean.class) || AnnotationUtils.isAnnotationMetaPresent(type, MockBean.class) || AnnotationUtils.isAnnotationMetaPresent(type, SpyBean.class)). }
