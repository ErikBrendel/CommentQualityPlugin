commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;4;;@Override public final int getOrder() {     return 1950. }
false;public;1;5;;@Override public void prepareTestInstance(TestContext testContext) throws Exception {     initMocks(testContext).     injectFields(testContext). }
false;public;1;8;;@Override public void beforeTestMethod(TestContext testContext) throws Exception {     if (Boolean.TRUE.equals(testContext.getAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE))) {         initMocks(testContext).         reinjectFields(testContext).     } }
false;private;1;5;;private void initMocks(TestContext testContext) {     if (hasMockitoAnnotations(testContext)) {         MockitoAnnotations.initMocks(testContext.getTestInstance()).     } }
false;private;1;5;;private boolean hasMockitoAnnotations(TestContext testContext) {     MockitoAnnotationCollection collector = new MockitoAnnotationCollection().     ReflectionUtils.doWithFields(testContext.getTestClass(), collector).     return collector.hasAnnotations(). }
false;private;1;5;;private void injectFields(TestContext testContext) {     postProcessFields(testContext, (mockitoField, postProcessor) -> postProcessor.inject(mockitoField.field, mockitoField.target, mockitoField.definition)). }
false;private;1;9;;private void reinjectFields(final TestContext testContext) {     postProcessFields(testContext, (mockitoField, postProcessor) -> {         ReflectionUtils.makeAccessible(mockitoField.field).         ReflectionUtils.setField(mockitoField.field, testContext.getTestInstance(), null).         postProcessor.inject(mockitoField.field, mockitoField.target, mockitoField.definition).     }). }
false;private;2;16;;private void postProcessFields(TestContext testContext, BiConsumer<MockitoField, MockitoPostProcessor> consumer) {     DefinitionsParser parser = new DefinitionsParser().     parser.parse(testContext.getTestClass()).     if (!parser.getDefinitions().isEmpty()) {         MockitoPostProcessor postProcessor = testContext.getApplicationContext().getBean(MockitoPostProcessor.class).         for (Definition definition : parser.getDefinitions()) {             Field field = parser.getField(definition).             if (field != null) {                 consumer.accept(new MockitoField(field, testContext.getTestInstance(), definition), postProcessor).             }         }     } }
false;public;1;9;;@Override public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException {     for (Annotation annotation : field.getDeclaredAnnotations()) {         if (annotation.annotationType().getName().startsWith("org.mockito")) {             this.annotations.add(annotation).         }     } }
false;public;0;3;;public boolean hasAnnotations() {     return !this.annotations.isEmpty(). }
