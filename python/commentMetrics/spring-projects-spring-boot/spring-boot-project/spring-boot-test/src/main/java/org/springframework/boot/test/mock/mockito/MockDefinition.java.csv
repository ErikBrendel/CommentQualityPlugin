commented;modifiers;parameterAmount;loc;comment;code
false;private;1;7;;private Set<Class<?>> asClassSet(Class<?>[] classes) {     Set<Class<?>> classSet = new LinkedHashSet<>().     if (classes != null) {         classSet.addAll(Arrays.asList(classes)).     }     return Collections.unmodifiableSet(classSet). }
true;public;0;3;/**  * Return the type that should be mocked.  * @return the type to mock. never {@code null}  */ ;/**  * Return the type that should be mocked.  * @return the type to mock. never {@code null}  */ public ResolvableType getTypeToMock() {     return this.typeToMock. }
true;public;0;3;/**  * Return the extra interfaces.  * @return the extra interfaces or an empty set  */ ;/**  * Return the extra interfaces.  * @return the extra interfaces or an empty set  */ public Set<Class<?>> getExtraInterfaces() {     return this.extraInterfaces. }
true;public;0;3;/**  * Return the answers mode.  * @return the answers mode. never {@code null}  */ ;/**  * Return the answers mode.  * @return the answers mode. never {@code null}  */ public Answers getAnswer() {     return this.answer. }
true;public;0;3;/**  * Return if the mock is serializable.  * @return if the mock is serializable  */ ;/**  * Return if the mock is serializable.  * @return if the mock is serializable  */ public boolean isSerializable() {     return this.serializable. }
false;public;1;17;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj == null || obj.getClass() != getClass()) {         return false.     }     MockDefinition other = (MockDefinition) obj.     boolean result = super.equals(obj).     result = result && ObjectUtils.nullSafeEquals(this.typeToMock, other.typeToMock).     result = result && ObjectUtils.nullSafeEquals(this.extraInterfaces, other.extraInterfaces).     result = result && ObjectUtils.nullSafeEquals(this.answer, other.answer).     result = result && this.serializable == other.serializable.     return result. }
false;public;0;9;;@Override public int hashCode() {     int result = super.hashCode().     result = MULTIPLIER * result + ObjectUtils.nullSafeHashCode(this.typeToMock).     result = MULTIPLIER * result + ObjectUtils.nullSafeHashCode(this.extraInterfaces).     result = MULTIPLIER * result + ObjectUtils.nullSafeHashCode(this.answer).     result = MULTIPLIER * result + Boolean.hashCode(this.serializable).     return result. }
false;public;0;8;;@Override public String toString() {     return new ToStringCreator(this).append("name", getName()).append("typeToMock", this.typeToMock).append("extraInterfaces", this.extraInterfaces).append("answer", this.answer).append("serializable", this.serializable).append("reset", getReset()).toString(). }
false;public;0;3;;public <T> T createMock() {     return createMock(getName()). }
false;public;1;15;;@SuppressWarnings("unchecked") public <T> T createMock(String name) {     MockSettings settings = MockReset.withSettings(getReset()).     if (StringUtils.hasLength(name)) {         settings.name(name).     }     if (!this.extraInterfaces.isEmpty()) {         settings.extraInterfaces(ClassUtils.toClassArray(this.extraInterfaces)).     }     settings.defaultAnswer(this.answer).     if (this.serializable) {         settings.serializable().     }     return (T) Mockito.mock(this.typeToMock.resolve(), settings). }
