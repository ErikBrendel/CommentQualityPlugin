commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getOrder() {     return Ordered.LOWEST_PRECEDENCE - 100. }
false;public;1;6;;@Override public void beforeTestMethod(TestContext testContext) throws Exception {     if (MOCKITO_IS_PRESENT) {         resetMocks(testContext.getApplicationContext(), MockReset.BEFORE).     } }
false;public;1;6;;@Override public void afterTestMethod(TestContext testContext) throws Exception {     if (MOCKITO_IS_PRESENT) {         resetMocks(testContext.getApplicationContext(), MockReset.AFTER).     } }
false;private;2;5;;private void resetMocks(ApplicationContext applicationContext, MockReset reset) {     if (applicationContext instanceof ConfigurableApplicationContext) {         resetMocks((ConfigurableApplicationContext) applicationContext, reset).     } }
false;private;2;30;;private void resetMocks(ConfigurableApplicationContext applicationContext, MockReset reset) {     ConfigurableListableBeanFactory beanFactory = applicationContext.getBeanFactory().     String[] names = beanFactory.getBeanDefinitionNames().     Set<String> instantiatedSingletons = new HashSet<>(Arrays.asList(beanFactory.getSingletonNames())).     for (String name : names) {         BeanDefinition definition = beanFactory.getBeanDefinition(name).         if (definition.isSingleton() && instantiatedSingletons.contains(name)) {             Object bean = beanFactory.getSingleton(name).             if (reset.equals(MockReset.get(bean))) {                 Mockito.reset(bean).             }         }     }     try {         MockitoBeans mockedBeans = beanFactory.getBean(MockitoBeans.class).         for (Object mockedBean : mockedBeans) {             if (reset.equals(MockReset.get(mockedBean))) {                 Mockito.reset(mockedBean).             }         }     } catch (NoSuchBeanDefinitionException ex) {     // Continue     }     if (applicationContext.getParent() != null) {         resetMocks(applicationContext.getParent(), reset).     } }
