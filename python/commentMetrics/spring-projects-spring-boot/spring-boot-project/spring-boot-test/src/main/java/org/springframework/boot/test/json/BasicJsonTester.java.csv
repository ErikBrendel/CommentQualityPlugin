commented;modifiers;parameterAmount;loc;comment;code
true;protected,final;1;3;/**  * Initialize the marshal tester for use, configuring it to load JSON resources as  * UTF-8.  * @param resourceLoadClass the source class used when loading relative classpath  * resources  */ ;/**  * Initialize the marshal tester for use, configuring it to load JSON resources as  * UTF-8.  * @param resourceLoadClass the source class used when loading relative classpath  * resources  */ protected final void initialize(Class<?> resourceLoadClass) {     this.initialize(resourceLoadClass, null). }
true;protected,final;2;5;/**  * Initialize the marshal tester for use.  * @param resourceLoadClass the source class used when loading relative classpath  * resources  * @param charset the charset used when loading relative classpath resources  * @since 1.4.1  */ ;/**  * Initialize the marshal tester for use.  * @param resourceLoadClass the source class used when loading relative classpath  * resources  * @param charset the charset used when loading relative classpath resources  * @since 1.4.1  */ protected final void initialize(Class<?> resourceLoadClass, Charset charset) {     if (this.loader == null) {         this.loader = new JsonLoader(resourceLoadClass, charset).     } }
true;public;1;4;/**  * Create JSON content from the specified String source. The source can contain the  * JSON itself or, if it ends with {@code .json}, the name of a resource to be loaded  * using {@code resourceLoadClass}.  * @param source the JSON content or a {@code .json} resource name  * @return the JSON content  */ ;/**  * Create JSON content from the specified String source. The source can contain the  * JSON itself or, if it ends with {@code .json}, the name of a resource to be loaded  * using {@code resourceLoadClass}.  * @param source the JSON content or a {@code .json} resource name  * @return the JSON content  */ public JsonContent<Object> from(CharSequence source) {     verify().     return getJsonContent(this.loader.getJson(source)). }
true;public;2;4;/**  * Create JSON content from the specified resource path.  * @param path the path of the resource to load  * @param resourceLoadClass the source class used to load the resource  * @return the JSON content  */ ;/**  * Create JSON content from the specified resource path.  * @param path the path of the resource to load  * @param resourceLoadClass the source class used to load the resource  * @return the JSON content  */ public JsonContent<Object> from(String path, Class<?> resourceLoadClass) {     verify().     return getJsonContent(this.loader.getJson(path, resourceLoadClass)). }
true;public;1;4;/**  * Create JSON content from the specified JSON bytes.  * @param source the bytes of JSON  * @return the JSON content  */ ;/**  * Create JSON content from the specified JSON bytes.  * @param source the bytes of JSON  * @return the JSON content  */ public JsonContent<Object> from(byte[] source) {     verify().     return getJsonContent(this.loader.getJson(source)). }
true;public;1;4;/**  * Create JSON content from the specified JSON file.  * @param source the file containing JSON  * @return the JSON content  */ ;/**  * Create JSON content from the specified JSON file.  * @param source the file containing JSON  * @return the JSON content  */ public JsonContent<Object> from(File source) {     verify().     return getJsonContent(this.loader.getJson(source)). }
true;public;1;4;/**  * Create JSON content from the specified JSON input stream.  * @param source the input stream containing JSON  * @return the JSON content  */ ;/**  * Create JSON content from the specified JSON input stream.  * @param source the input stream containing JSON  * @return the JSON content  */ public JsonContent<Object> from(InputStream source) {     verify().     return getJsonContent(this.loader.getJson(source)). }
true;public;1;4;/**  * Create JSON content from the specified JSON resource.  * @param source the resource containing JSON  * @return the JSON content  */ ;/**  * Create JSON content from the specified JSON resource.  * @param source the resource containing JSON  * @return the JSON content  */ public JsonContent<Object> from(Resource source) {     verify().     return getJsonContent(this.loader.getJson(source)). }
false;private;0;3;;private void verify() {     Assert.state(this.loader != null, "Uninitialized BasicJsonTester"). }
false;private;1;3;;private JsonContent<Object> getJsonContent(String json) {     return new JsonContent<>(this.loader.getResourceLoadClass(), null, json). }
