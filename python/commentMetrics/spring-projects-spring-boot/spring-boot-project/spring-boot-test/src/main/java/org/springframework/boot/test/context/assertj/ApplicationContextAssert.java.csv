# id;timestamp;commentText;codeText;commentWords;codeWords
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(String name);1507173536;Verifies that the application context does not contain a beans of the given name._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a beans of the given_name;public ApplicationContextAssert<C> doesNotHaveBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of name:%n <%s>", name))__		}_		try {_			Object bean = getApplicationContext().getBean(name)__			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a bean of name:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), name, bean))__		}_		catch (NoSuchBeanDefinitionException ex) {_		}_		return this__	};verifies,that,the,application,context,does,not,contain,a,beans,of,the,given,name,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,beans,of,the,given,name;public,application,context,assert,c,does,not,have,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,name,n,s,name,try,object,bean,get,application,context,get,bean,name,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,bean,of,name,n,s,nbut,found,n,s,get,application,context,name,bean,catch,no,such,bean,definition,exception,ex,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(String name);1514389543;Verifies that the application context does not contain a beans of the given name._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a beans of the given_name;public ApplicationContextAssert<C> doesNotHaveBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of name:%n <%s>", name))__		}_		try {_			Object bean = getApplicationContext().getBean(name)__			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a bean of name:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), name, bean))__		}_		catch (NoSuchBeanDefinitionException ex) {_		}_		return this__	};verifies,that,the,application,context,does,not,contain,a,beans,of,the,given,name,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,beans,of,the,given,name;public,application,context,assert,c,does,not,have,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,name,n,s,name,try,object,bean,get,application,context,get,bean,name,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,bean,of,name,n,s,nbut,found,n,s,get,application,context,name,bean,catch,no,such,bean,definition,exception,ex,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(String name);1518486594;Verifies that the application context does not contain a beans of the given name._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a beans of the given_name;public ApplicationContextAssert<C> doesNotHaveBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of name:%n <%s>", name))__		}_		try {_			Object bean = getApplicationContext().getBean(name)__			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a bean of name:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), name, bean))__		}_		catch (NoSuchBeanDefinitionException ex) {_		}_		return this__	};verifies,that,the,application,context,does,not,contain,a,beans,of,the,given,name,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,beans,of,the,given,name;public,application,context,assert,c,does,not,have,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,name,n,s,name,try,object,bean,get,application,context,get,bean,name,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,bean,of,name,n,s,nbut,found,n,s,get,application,context,name,bean,catch,no,such,bean,definition,exception,ex,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(String name);1523353653;Verifies that the application context does not contain a beans of the given name._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a beans of the given_name;public ApplicationContextAssert<C> doesNotHaveBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of name:%n <%s>", name))__		}_		try {_			Object bean = getApplicationContext().getBean(name)__			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a bean of name:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), name, bean))__		}_		catch (NoSuchBeanDefinitionException ex) {_		}_		return this__	};verifies,that,the,application,context,does,not,contain,a,beans,of,the,given,name,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,beans,of,the,given,name;public,application,context,assert,c,does,not,have,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,name,n,s,name,try,object,bean,get,application,context,get,bean,name,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,bean,of,name,n,s,nbut,found,n,s,get,application,context,name,bean,catch,no,such,bean,definition,exception,ex,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(String name);1525416882;Verifies that the application context does not contain a beans of the given name._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a beans of the given_name;public ApplicationContextAssert<C> doesNotHaveBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of name:%n <%s>", name))__		}_		try {_			Object bean = getApplicationContext().getBean(name)__			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a bean of name:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), name, bean))__		}_		catch (NoSuchBeanDefinitionException ex) {_		}_		return this__	};verifies,that,the,application,context,does,not,contain,a,beans,of,the,given,name,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,beans,of,the,given,name;public,application,context,assert,c,does,not,have,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,name,n,s,name,try,object,bean,get,application,context,get,bean,name,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,bean,of,name,n,s,nbut,found,n,s,get,application,context,name,bean,catch,no,such,bean,definition,exception,ex,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(String name);1532738143;Verifies that the application context does not contain a beans of the given name._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a beans of the given_name;public ApplicationContextAssert<C> doesNotHaveBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of name:%n <%s>", name))__		}_		try {_			Object bean = getApplicationContext().getBean(name)__			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a bean of name:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), name, bean))__		}_		catch (NoSuchBeanDefinitionException ex) {_		}_		return this__	};verifies,that,the,application,context,does,not,contain,a,beans,of,the,given,name,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,beans,of,the,given,name;public,application,context,assert,c,does,not,have,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,name,n,s,name,try,object,bean,get,application,context,get,bean,name,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,bean,of,name,n,s,nbut,found,n,s,get,application,context,name,bean,catch,no,such,bean,definition,exception,ex,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(String name);1540442057;Verifies that the application context does not contain a beans of the given name._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a beans of the given_name;public ApplicationContextAssert<C> doesNotHaveBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of name:%n <%s>", name))__		}_		try {_			Object bean = getApplicationContext().getBean(name)__			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a bean of name:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), name, bean))__		}_		catch (NoSuchBeanDefinitionException ex) {_		}_		return this__	};verifies,that,the,application,context,does,not,contain,a,beans,of,the,given,name,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,beans,of,the,given,name;public,application,context,assert,c,does,not,have,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,name,n,s,name,try,object,bean,get,application,context,get,bean,name,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,bean,of,name,n,s,nbut,found,n,s,get,application,context,name,bean,catch,no,such,bean,definition,exception,ex,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type, Scope scope);1518486594;Verifies that the application context does not contain any beans of the given type._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean(Foo.class)_ </pre>_@param type the bean type_@param scope the scope of the assertion_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains any beans of the given_type;public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length > 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a beans of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,does,not,contain,any,beans,of,the,given,type,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,class,pre,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,any,beans,of,the,given,type;public,application,context,assert,c,does,not,have,bean,class,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,beans,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type, Scope scope);1523353653;Verifies that the application context does not contain any beans of the given type._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean(Foo.class, Scope.NO_ANCESTORS)_ </pre>_@param type the bean type_@param scope the scope of the assertion_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains any beans of the given_type;public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length > 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a beans of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,does,not,contain,any,beans,of,the,given,type,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,class,scope,pre,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,any,beans,of,the,given,type;public,application,context,assert,c,does,not,have,bean,class,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,beans,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type, Scope scope);1525416882;Verifies that the application context does not contain any beans of the given type._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean(Foo.class, Scope.NO_ANCESTORS)_ </pre>_@param type the bean type_@param scope the scope of the assertion_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains any beans of the given_type;public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length > 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a beans of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,does,not,contain,any,beans,of,the,given,type,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,class,scope,pre,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,any,beans,of,the,given,type;public,application,context,assert,c,does,not,have,bean,class,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,beans,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type, Scope scope);1532738143;Verifies that the application context does not contain any beans of the given type._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean(Foo.class, Scope.NO_ANCESTORS)_ </pre>_@param type the bean type_@param scope the scope of the assertion_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains any beans of the given_type;public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length > 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a beans of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,does,not,contain,any,beans,of,the,given,type,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,class,scope,pre,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,any,beans,of,the,given,type;public,application,context,assert,c,does,not,have,bean,class,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,beans,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type, Scope scope);1540442057;Verifies that the application context does not contain any beans of the given type._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean(Foo.class, Scope.NO_ANCESTORS)_ </pre>_@param type the bean type_@param scope the scope of the assertion_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains any beans of the given_type;public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length > 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a beans of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,does,not,contain,any,beans,of,the,given,type,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,class,scope,pre,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,any,beans,of,the,given,type;public,application,context,assert,c,does,not,have,bean,class,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,beans,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type);1507173536;Verifies that the application context does not contain any beans of the given type._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains any beans of the given_type;public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of type:%n <%s>", type))__		}_		String[] names = getApplicationContext().getBeanNamesForType(type)__		if (names.length > 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a beans of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,does,not,contain,any,beans,of,the,given,type,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,any,beans,of,the,given,type;public,application,context,assert,c,does,not,have,bean,class,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,type,n,s,type,string,names,get,application,context,get,bean,names,for,type,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,beans,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type);1514389543;Verifies that the application context does not contain any beans of the given type._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains any beans of the given_type;public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"not to have any beans of type:%n <%s>", type))__		}_		String[] names = getApplicationContext().getBeanNamesForType(type)__		if (names.length > 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nnot to have a beans of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,does,not,contain,any,beans,of,the,given,type,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,any,beans,of,the,given,type;public,application,context,assert,c,does,not,have,bean,class,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,not,to,have,any,beans,of,type,n,s,type,string,names,get,application,context,get,bean,names,for,type,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nnot,to,have,a,beans,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type);1518486594;Verifies that the application context (or ancestors) does not contain any beans of_the given type._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains any beans of the given_type;public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type) {_		return doesNotHaveBean(type, Scope.INCLUDE_ANCESTORS)__	};verifies,that,the,application,context,or,ancestors,does,not,contain,any,beans,of,the,given,type,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,any,beans,of,the,given,type;public,application,context,assert,c,does,not,have,bean,class,type,return,does,not,have,bean,type,scope
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type);1523353653;Verifies that the application context (or ancestors) does not contain any beans of_the given type._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains any beans of the given_type;public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type) {_		return doesNotHaveBean(type, Scope.INCLUDE_ANCESTORS)__	};verifies,that,the,application,context,or,ancestors,does,not,contain,any,beans,of,the,given,type,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,any,beans,of,the,given,type;public,application,context,assert,c,does,not,have,bean,class,type,return,does,not,have,bean,type,scope
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type);1525416882;Verifies that the application context (or ancestors) does not contain any beans of_the given type._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains any beans of the given_type;public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type) {_		return doesNotHaveBean(type, Scope.INCLUDE_ANCESTORS)__	};verifies,that,the,application,context,or,ancestors,does,not,contain,any,beans,of,the,given,type,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,any,beans,of,the,given,type;public,application,context,assert,c,does,not,have,bean,class,type,return,does,not,have,bean,type,scope
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type);1532738143;Verifies that the application context (or ancestors) does not contain any beans of_the given type._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains any beans of the given_type;public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type) {_		return doesNotHaveBean(type, Scope.INCLUDE_ANCESTORS)__	};verifies,that,the,application,context,or,ancestors,does,not,contain,any,beans,of,the,given,type,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,any,beans,of,the,given,type;public,application,context,assert,c,does,not,have,bean,class,type,return,does,not,have,bean,type,scope
ApplicationContextAssert -> public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type);1540442057;Verifies that the application context (or ancestors) does not contain any beans of_the given type._<p>_Example: <pre class="code">_assertThat(context).doesNotHaveBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains any beans of the given_type;public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type) {_		return doesNotHaveBean(type, Scope.INCLUDE_ANCESTORS)__	};verifies,that,the,application,context,or,ancestors,does,not,contain,any,beans,of,the,given,type,p,example,pre,class,code,assert,that,context,does,not,have,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,any,beans,of,the,given,type;public,application,context,assert,c,does,not,have,bean,class,type,return,does,not,have,bean,type,scope
ApplicationContextAssert -> public ApplicationContextAssert<C> hasSingleBean(Class<?> type, Scope scope);1518486594;Verifies that the application context contains a single bean with the given type._<p>_Example: <pre class="code">_assertThat(context).hasSingleBean(Foo.class)_ </pre>_@param type the bean type_@param scope the scope of the assertion_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does no beans of the given type_@throws AssertionError if the application context contains multiple beans of the_given type;public ApplicationContextAssert<C> hasSingleBean(Class<?> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have a single bean of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length == 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found no beans of that type",_					getApplicationContext(), type))__		}_		if (names.length > 1) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,contains,a,single,bean,with,the,given,type,p,example,pre,class,code,assert,that,context,has,single,bean,foo,class,pre,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,no,beans,of,the,given,type,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,application,context,assert,c,has,single,bean,class,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,a,single,bean,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,no,beans,of,that,type,get,application,context,type,if,names,length,1,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasSingleBean(Class<?> type, Scope scope);1523353653;Verifies that the application context contains a single bean with the given type._<p>_Example: <pre class="code">_assertThat(context).hasSingleBean(Foo.class, Scope.NO_ANCESTORS)_ </pre>_@param type the bean type_@param scope the scope of the assertion_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does no beans of the given type_@throws AssertionError if the application context contains multiple beans of the_given type;public ApplicationContextAssert<C> hasSingleBean(Class<?> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have a single bean of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length == 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found no beans of that type",_					getApplicationContext(), type))__		}_		if (names.length > 1) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,contains,a,single,bean,with,the,given,type,p,example,pre,class,code,assert,that,context,has,single,bean,foo,class,scope,pre,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,no,beans,of,the,given,type,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,application,context,assert,c,has,single,bean,class,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,a,single,bean,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,no,beans,of,that,type,get,application,context,type,if,names,length,1,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasSingleBean(Class<?> type, Scope scope);1525416882;Verifies that the application context contains a single bean with the given type._<p>_Example: <pre class="code">_assertThat(context).hasSingleBean(Foo.class, Scope.NO_ANCESTORS)_ </pre>_@param type the bean type_@param scope the scope of the assertion_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does no beans of the given type_@throws AssertionError if the application context contains multiple beans of the_given type;public ApplicationContextAssert<C> hasSingleBean(Class<?> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have a single bean of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length == 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found no beans of that type",_					getApplicationContext(), type))__		}_		if (names.length > 1) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,contains,a,single,bean,with,the,given,type,p,example,pre,class,code,assert,that,context,has,single,bean,foo,class,scope,pre,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,no,beans,of,the,given,type,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,application,context,assert,c,has,single,bean,class,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,a,single,bean,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,no,beans,of,that,type,get,application,context,type,if,names,length,1,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasSingleBean(Class<?> type, Scope scope);1532738143;Verifies that the application context contains a single bean with the given type._<p>_Example: <pre class="code">_assertThat(context).hasSingleBean(Foo.class, Scope.NO_ANCESTORS)_ </pre>_@param type the bean type_@param scope the scope of the assertion_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does no beans of the given type_@throws AssertionError if the application context contains multiple beans of the_given type;public ApplicationContextAssert<C> hasSingleBean(Class<?> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have a single bean of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length == 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found no beans of that type",_					getApplicationContext(), type))__		}_		if (names.length > 1) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,contains,a,single,bean,with,the,given,type,p,example,pre,class,code,assert,that,context,has,single,bean,foo,class,scope,pre,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,no,beans,of,the,given,type,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,application,context,assert,c,has,single,bean,class,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,a,single,bean,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,no,beans,of,that,type,get,application,context,type,if,names,length,1,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasSingleBean(Class<?> type, Scope scope);1540442057;Verifies that the application context contains a single bean with the given type._<p>_Example: <pre class="code">_assertThat(context).hasSingleBean(Foo.class, Scope.NO_ANCESTORS)_ </pre>_@param type the bean type_@param scope the scope of the assertion_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does no beans of the given type_@throws AssertionError if the application context contains multiple beans of the_given type;public ApplicationContextAssert<C> hasSingleBean(Class<?> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have a single bean of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length == 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found no beans of that type",_					getApplicationContext(), type))__		}_		if (names.length > 1) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,contains,a,single,bean,with,the,given,type,p,example,pre,class,code,assert,that,context,has,single,bean,foo,class,scope,pre,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,no,beans,of,the,given,type,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,application,context,assert,c,has,single,bean,class,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,a,single,bean,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,no,beans,of,that,type,get,application,context,type,if,names,length,1,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public AbstractThrowableAssert<?, ? extends Throwable> getFailure();1507173536;Obtain the failure that stopped the application context from running, the failure_becoming the object under test._<p>_Example: <pre class="code">_assertThat(context).getFailure().containsMessage("missing bean")__</pre>_@return assertions on the cause of the failure_@throws AssertionError if the application context started without a failure;public AbstractThrowableAssert<?, ? extends Throwable> getFailure() {_		hasFailed()__		return assertThat(this.startupFailure)__	};obtain,the,failure,that,stopped,the,application,context,from,running,the,failure,becoming,the,object,under,test,p,example,pre,class,code,assert,that,context,get,failure,contains,message,missing,bean,pre,return,assertions,on,the,cause,of,the,failure,throws,assertion,error,if,the,application,context,started,without,a,failure;public,abstract,throwable,assert,extends,throwable,get,failure,has,failed,return,assert,that,this,startup,failure
ApplicationContextAssert -> public AbstractThrowableAssert<?, ? extends Throwable> getFailure();1514389543;Obtain the failure that stopped the application context from running, the failure_becoming the object under test._<p>_Example: <pre class="code">_assertThat(context).getFailure().containsMessage("missing bean")__</pre>_@return assertions on the cause of the failure_@throws AssertionError if the application context started without a failure;public AbstractThrowableAssert<?, ? extends Throwable> getFailure() {_		hasFailed()__		return assertThat(this.startupFailure)__	};obtain,the,failure,that,stopped,the,application,context,from,running,the,failure,becoming,the,object,under,test,p,example,pre,class,code,assert,that,context,get,failure,contains,message,missing,bean,pre,return,assertions,on,the,cause,of,the,failure,throws,assertion,error,if,the,application,context,started,without,a,failure;public,abstract,throwable,assert,extends,throwable,get,failure,has,failed,return,assert,that,this,startup,failure
ApplicationContextAssert -> public AbstractThrowableAssert<?, ? extends Throwable> getFailure();1518486594;Obtain the failure that stopped the application context from running, the failure_becoming the object under test._<p>_Example: <pre class="code">_assertThat(context).getFailure().containsMessage("missing bean")__</pre>_@return assertions on the cause of the failure_@throws AssertionError if the application context started without a failure;public AbstractThrowableAssert<?, ? extends Throwable> getFailure() {_		hasFailed()__		return assertThat(this.startupFailure)__	};obtain,the,failure,that,stopped,the,application,context,from,running,the,failure,becoming,the,object,under,test,p,example,pre,class,code,assert,that,context,get,failure,contains,message,missing,bean,pre,return,assertions,on,the,cause,of,the,failure,throws,assertion,error,if,the,application,context,started,without,a,failure;public,abstract,throwable,assert,extends,throwable,get,failure,has,failed,return,assert,that,this,startup,failure
ApplicationContextAssert -> public AbstractThrowableAssert<?, ? extends Throwable> getFailure();1523353653;Obtain the failure that stopped the application context from running, the failure_becoming the object under test._<p>_Example: <pre class="code">_assertThat(context).getFailure().containsMessage("missing bean")__</pre>_@return assertions on the cause of the failure_@throws AssertionError if the application context started without a failure;public AbstractThrowableAssert<?, ? extends Throwable> getFailure() {_		hasFailed()__		return assertThat(this.startupFailure)__	};obtain,the,failure,that,stopped,the,application,context,from,running,the,failure,becoming,the,object,under,test,p,example,pre,class,code,assert,that,context,get,failure,contains,message,missing,bean,pre,return,assertions,on,the,cause,of,the,failure,throws,assertion,error,if,the,application,context,started,without,a,failure;public,abstract,throwable,assert,extends,throwable,get,failure,has,failed,return,assert,that,this,startup,failure
ApplicationContextAssert -> public AbstractThrowableAssert<?, ? extends Throwable> getFailure();1525416882;Obtain the failure that stopped the application context from running, the failure_becoming the object under test._<p>_Example: <pre class="code">_assertThat(context).getFailure().containsMessage("missing bean")__</pre>_@return assertions on the cause of the failure_@throws AssertionError if the application context started without a failure;public AbstractThrowableAssert<?, ? extends Throwable> getFailure() {_		hasFailed()__		return assertThat(this.startupFailure)__	};obtain,the,failure,that,stopped,the,application,context,from,running,the,failure,becoming,the,object,under,test,p,example,pre,class,code,assert,that,context,get,failure,contains,message,missing,bean,pre,return,assertions,on,the,cause,of,the,failure,throws,assertion,error,if,the,application,context,started,without,a,failure;public,abstract,throwable,assert,extends,throwable,get,failure,has,failed,return,assert,that,this,startup,failure
ApplicationContextAssert -> public AbstractThrowableAssert<?, ? extends Throwable> getFailure();1532738143;Obtain the failure that stopped the application context from running, the failure_becoming the object under test._<p>_Example: <pre class="code">_assertThat(context).getFailure().containsMessage("missing bean")__</pre>_@return assertions on the cause of the failure_@throws AssertionError if the application context started without a failure;public AbstractThrowableAssert<?, ? extends Throwable> getFailure() {_		hasFailed()__		return assertThat(this.startupFailure)__	};obtain,the,failure,that,stopped,the,application,context,from,running,the,failure,becoming,the,object,under,test,p,example,pre,class,code,assert,that,context,get,failure,contains,message,missing,bean,pre,return,assertions,on,the,cause,of,the,failure,throws,assertion,error,if,the,application,context,started,without,a,failure;public,abstract,throwable,assert,extends,throwable,get,failure,has,failed,return,assert,that,this,startup,failure
ApplicationContextAssert -> public AbstractThrowableAssert<?, ? extends Throwable> getFailure();1540442057;Obtain the failure that stopped the application context from running, the failure_becoming the object under test._<p>_Example: <pre class="code">_assertThat(context).getFailure().containsMessage("missing bean")__</pre>_@return assertions on the cause of the failure_@throws AssertionError if the application context started without a failure;public AbstractThrowableAssert<?, ? extends Throwable> getFailure() {_		hasFailed()__		return assertThat(this.startupFailure)__	};obtain,the,failure,that,stopped,the,application,context,from,running,the,failure,becoming,the,object,under,test,p,example,pre,class,code,assert,that,context,get,failure,contains,message,missing,bean,pre,return,assertions,on,the,cause,of,the,failure,throws,assertion,error,if,the,application,context,started,without,a,failure;public,abstract,throwable,assert,extends,throwable,get,failure,has,failed,return,assert,that,this,startup,failure
ApplicationContextAssert -> public ApplicationContextAssert<C> hasNotFailed();1507173536;Verifies that the application has not failed to start._<p>_Example: <pre class="code"> assertThat(context).hasNotFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context failed to start;public ApplicationContextAssert<C> hasNotFailed() {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting("to have not failed"))__		}_		return this__	};verifies,that,the,application,has,not,failed,to,start,p,example,pre,class,code,assert,that,context,has,not,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,failed,to,start;public,application,context,assert,c,has,not,failed,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,not,failed,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasNotFailed();1514389543;Verifies that the application has not failed to start._<p>_Example: <pre class="code"> assertThat(context).hasNotFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context failed to start;public ApplicationContextAssert<C> hasNotFailed() {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting("to have not failed"))__		}_		return this__	};verifies,that,the,application,has,not,failed,to,start,p,example,pre,class,code,assert,that,context,has,not,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,failed,to,start;public,application,context,assert,c,has,not,failed,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,not,failed,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasNotFailed();1518486594;Verifies that the application has not failed to start._<p>_Example: <pre class="code"> assertThat(context).hasNotFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context failed to start;public ApplicationContextAssert<C> hasNotFailed() {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting("to have not failed"))__		}_		return this__	};verifies,that,the,application,has,not,failed,to,start,p,example,pre,class,code,assert,that,context,has,not,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,failed,to,start;public,application,context,assert,c,has,not,failed,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,not,failed,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasNotFailed();1523353653;Verifies that the application has not failed to start._<p>_Example: <pre class="code"> assertThat(context).hasNotFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context failed to start;public ApplicationContextAssert<C> hasNotFailed() {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting("to have not failed"))__		}_		return this__	};verifies,that,the,application,has,not,failed,to,start,p,example,pre,class,code,assert,that,context,has,not,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,failed,to,start;public,application,context,assert,c,has,not,failed,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,not,failed,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasNotFailed();1525416882;Verifies that the application has not failed to start._<p>_Example: <pre class="code"> assertThat(context).hasNotFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context failed to start;public ApplicationContextAssert<C> hasNotFailed() {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting("to have not failed"))__		}_		return this__	};verifies,that,the,application,has,not,failed,to,start,p,example,pre,class,code,assert,that,context,has,not,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,failed,to,start;public,application,context,assert,c,has,not,failed,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,not,failed,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasNotFailed();1532738143;Verifies that the application has not failed to start._<p>_Example: <pre class="code"> assertThat(context).hasNotFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context failed to start;public ApplicationContextAssert<C> hasNotFailed() {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting("to have not failed"))__		}_		return this__	};verifies,that,the,application,has,not,failed,to,start,p,example,pre,class,code,assert,that,context,has,not,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,failed,to,start;public,application,context,assert,c,has,not,failed,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,not,failed,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasNotFailed();1540442057;Verifies that the application has not failed to start._<p>_Example: <pre class="code"> assertThat(context).hasNotFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context failed to start;public ApplicationContextAssert<C> hasNotFailed() {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting("to have not failed"))__		}_		return this__	};verifies,that,the,application,has,not,failed,to,start,p,example,pre,class,code,assert,that,context,has,not,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,failed,to,start;public,application,context,assert,c,has,not,failed,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,not,failed,return,this
ApplicationContextAssert -> @SuppressWarnings("unchecked") 	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type);1507173536;Obtain a single bean of the given name and type from the application context, the_bean becoming the object under test. If no bean of the specified name can be found_an assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo", Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean("foo", Foo.class).isNull()_</pre>_@param <T> the bean type_@param name the name of the bean_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a bean with the given_name but a different type;@SuppressWarnings("unchecked")_	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s> (%s)", name, type))__		}_		Object bean = findBean(name)__		if (bean != null && type != null && !type.isInstance(bean)) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto contain a bean of name:%n <%s> (%s)%nbut found:%n <%s> of type <%s>",_					getApplicationContext(), name, type, bean, bean.getClass()))__		}_		return Assertions.assertThat((T) bean).as(_				"Bean of name <%s> and type <%s> from <%s>", name, type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,and,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,foo,foo,class,is,null,pre,param,t,the,bean,type,param,name,the,name,of,the,bean,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,bean,with,the,given,name,but,a,different,type;suppress,warnings,unchecked,public,t,abstract,object,assert,t,get,bean,string,name,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,s,name,type,object,bean,find,bean,name,if,bean,null,type,null,type,is,instance,bean,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,contain,a,bean,of,name,n,s,s,nbut,found,n,s,of,type,s,get,application,context,name,type,bean,bean,get,class,return,assertions,assert,that,t,bean,as,bean,of,name,s,and,type,s,from,s,name,type,get,application,context
ApplicationContextAssert -> @SuppressWarnings("unchecked") 	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type);1514389543;Obtain a single bean of the given name and type from the application context, the_bean becoming the object under test. If no bean of the specified name can be found_an assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo", Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean("foo", Foo.class).isNull()_</pre>_@param <T> the bean type_@param name the name of the bean_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a bean with the given_name but a different type;@SuppressWarnings("unchecked")_	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s> (%s)", name, type))__		}_		Object bean = findBean(name)__		if (bean != null && type != null && !type.isInstance(bean)) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto contain a bean of name:%n <%s> (%s)%nbut found:%n <%s> of type <%s>",_					getApplicationContext(), name, type, bean, bean.getClass()))__		}_		return Assertions.assertThat((T) bean).as(_				"Bean of name <%s> and type <%s> from <%s>", name, type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,and,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,foo,foo,class,is,null,pre,param,t,the,bean,type,param,name,the,name,of,the,bean,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,bean,with,the,given,name,but,a,different,type;suppress,warnings,unchecked,public,t,abstract,object,assert,t,get,bean,string,name,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,s,name,type,object,bean,find,bean,name,if,bean,null,type,null,type,is,instance,bean,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,contain,a,bean,of,name,n,s,s,nbut,found,n,s,of,type,s,get,application,context,name,type,bean,bean,get,class,return,assertions,assert,that,t,bean,as,bean,of,name,s,and,type,s,from,s,name,type,get,application,context
ApplicationContextAssert -> @SuppressWarnings("unchecked") 	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type);1518486594;Obtain a single bean of the given name and type from the application context, the_bean becoming the object under test. If no bean of the specified name can be found_an assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo", Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean("foo", Foo.class).isNull()_</pre>_@param <T> the bean type_@param name the name of the bean_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a bean with the given_name but a different type;@SuppressWarnings("unchecked")_	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s> (%s)", name, type))__		}_		Object bean = findBean(name)__		if (bean != null && type != null && !type.isInstance(bean)) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto contain a bean of name:%n <%s> (%s)%nbut found:%n <%s> of type <%s>",_					getApplicationContext(), name, type, bean, bean.getClass()))__		}_		return Assertions.assertThat((T) bean).as(_				"Bean of name <%s> and type <%s> from <%s>", name, type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,and,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,foo,foo,class,is,null,pre,param,t,the,bean,type,param,name,the,name,of,the,bean,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,bean,with,the,given,name,but,a,different,type;suppress,warnings,unchecked,public,t,abstract,object,assert,t,get,bean,string,name,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,s,name,type,object,bean,find,bean,name,if,bean,null,type,null,type,is,instance,bean,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,contain,a,bean,of,name,n,s,s,nbut,found,n,s,of,type,s,get,application,context,name,type,bean,bean,get,class,return,assertions,assert,that,t,bean,as,bean,of,name,s,and,type,s,from,s,name,type,get,application,context
ApplicationContextAssert -> @SuppressWarnings("unchecked") 	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type);1523353653;Obtain a single bean of the given name and type from the application context, the_bean becoming the object under test. If no bean of the specified name can be found_an assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo", Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean("foo", Foo.class).isNull()_</pre>_@param <T> the bean type_@param name the name of the bean_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a bean with the given_name but a different type;@SuppressWarnings("unchecked")_	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s> (%s)", name, type))__		}_		Object bean = findBean(name)__		if (bean != null && type != null && !type.isInstance(bean)) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto contain a bean of name:%n <%s> (%s)%nbut found:%n <%s> of type <%s>",_					getApplicationContext(), name, type, bean, bean.getClass()))__		}_		return Assertions.assertThat((T) bean).as(_				"Bean of name <%s> and type <%s> from <%s>", name, type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,and,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,foo,foo,class,is,null,pre,param,t,the,bean,type,param,name,the,name,of,the,bean,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,bean,with,the,given,name,but,a,different,type;suppress,warnings,unchecked,public,t,abstract,object,assert,t,get,bean,string,name,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,s,name,type,object,bean,find,bean,name,if,bean,null,type,null,type,is,instance,bean,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,contain,a,bean,of,name,n,s,s,nbut,found,n,s,of,type,s,get,application,context,name,type,bean,bean,get,class,return,assertions,assert,that,t,bean,as,bean,of,name,s,and,type,s,from,s,name,type,get,application,context
ApplicationContextAssert -> @SuppressWarnings("unchecked") 	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type);1525416882;Obtain a single bean of the given name and type from the application context, the_bean becoming the object under test. If no bean of the specified name can be found_an assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo", Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean("foo", Foo.class).isNull()_</pre>_@param <T> the bean type_@param name the name of the bean_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a bean with the given_name but a different type;@SuppressWarnings("unchecked")_	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s> (%s)", name, type))__		}_		Object bean = findBean(name)__		if (bean != null && type != null && !type.isInstance(bean)) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto contain a bean of name:%n <%s> (%s)%nbut found:%n <%s> of type <%s>",_					getApplicationContext(), name, type, bean, bean.getClass()))__		}_		return Assertions.assertThat((T) bean).as(_				"Bean of name <%s> and type <%s> from <%s>", name, type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,and,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,foo,foo,class,is,null,pre,param,t,the,bean,type,param,name,the,name,of,the,bean,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,bean,with,the,given,name,but,a,different,type;suppress,warnings,unchecked,public,t,abstract,object,assert,t,get,bean,string,name,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,s,name,type,object,bean,find,bean,name,if,bean,null,type,null,type,is,instance,bean,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,contain,a,bean,of,name,n,s,s,nbut,found,n,s,of,type,s,get,application,context,name,type,bean,bean,get,class,return,assertions,assert,that,t,bean,as,bean,of,name,s,and,type,s,from,s,name,type,get,application,context
ApplicationContextAssert -> @SuppressWarnings("unchecked") 	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type);1532738143;Obtain a single bean of the given name and type from the application context, the_bean becoming the object under test. If no bean of the specified name can be found_an assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo", Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean("foo", Foo.class).isNull()_</pre>_@param <T> the bean type_@param name the name of the bean_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a bean with the given_name but a different type;@SuppressWarnings("unchecked")_	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s> (%s)", name, type))__		}_		Object bean = findBean(name)__		if (bean != null && type != null && !type.isInstance(bean)) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto contain a bean of name:%n <%s> (%s)%nbut found:%n <%s> of type <%s>",_					getApplicationContext(), name, type, bean, bean.getClass()))__		}_		return Assertions.assertThat((T) bean).as(_				"Bean of name <%s> and type <%s> from <%s>", name, type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,and,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,foo,foo,class,is,null,pre,param,t,the,bean,type,param,name,the,name,of,the,bean,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,bean,with,the,given,name,but,a,different,type;suppress,warnings,unchecked,public,t,abstract,object,assert,t,get,bean,string,name,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,s,name,type,object,bean,find,bean,name,if,bean,null,type,null,type,is,instance,bean,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,contain,a,bean,of,name,n,s,s,nbut,found,n,s,of,type,s,get,application,context,name,type,bean,bean,get,class,return,assertions,assert,that,t,bean,as,bean,of,name,s,and,type,s,from,s,name,type,get,application,context
ApplicationContextAssert -> @SuppressWarnings("unchecked") 	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type);1540442057;Obtain a single bean of the given name and type from the application context, the_bean becoming the object under test. If no bean of the specified name can be found_an assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo", Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean("foo", Foo.class).isNull()_</pre>_@param <T> the bean type_@param name the name of the bean_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains a bean with the given_name but a different type;@SuppressWarnings("unchecked")_	public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s> (%s)", name, type))__		}_		Object bean = findBean(name)__		if (bean != null && type != null && !type.isInstance(bean)) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto contain a bean of name:%n <%s> (%s)%nbut found:%n <%s> of type <%s>",_					getApplicationContext(), name, type, bean, bean.getClass()))__		}_		return Assertions.assertThat((T) bean).as(_				"Bean of name <%s> and type <%s> from <%s>", name, type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,and,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,foo,foo,class,is,null,pre,param,t,the,bean,type,param,name,the,name,of,the,bean,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,a,bean,with,the,given,name,but,a,different,type;suppress,warnings,unchecked,public,t,abstract,object,assert,t,get,bean,string,name,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,s,name,type,object,bean,find,bean,name,if,bean,null,type,null,type,is,instance,bean,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,contain,a,bean,of,name,n,s,s,nbut,found,n,s,of,type,s,get,application,context,name,type,bean,bean,get,class,return,assertions,assert,that,t,bean,as,bean,of,name,s,and,type,s,from,s,name,type,get,application,context
ApplicationContextAssert -> public <T> MapAssert<String, T> getBeans(Class<T> type, Scope scope);1518486594;Obtain a map bean names and instances of the given type from the application_context, the map becoming the object under test. If no bean of the specified type_can be found an assert on an empty {@code map} is returned._<p>_Example: <pre class="code">_assertThat(context).getBeans(Foo.class).containsKey("foo")__</pre>_@param <T> the bean type_@param type the bean type_@param scope the scope of the assertion_@return bean assertions for the beans, or an assert on an empty {@code map} if the_no beans are found_@throws AssertionError if the application context did not start;public <T> MapAssert<String, T> getBeans(Class<T> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans of type:%n <%s>", type))__		}_		return Assertions.assertThat(scope.getBeansOfType(getApplicationContext(), type))_				.as("Beans of type <%s> from <%s>", type, getApplicationContext())__	};obtain,a,map,bean,names,and,instances,of,the,given,type,from,the,application,context,the,map,becoming,the,object,under,test,if,no,bean,of,the,specified,type,can,be,found,an,assert,on,an,empty,code,map,is,returned,p,example,pre,class,code,assert,that,context,get,beans,foo,class,contains,key,foo,pre,param,t,the,bean,type,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,bean,assertions,for,the,beans,or,an,assert,on,an,empty,code,map,if,the,no,beans,are,found,throws,assertion,error,if,the,application,context,did,not,start;public,t,map,assert,string,t,get,beans,class,t,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,of,type,n,s,type,return,assertions,assert,that,scope,get,beans,of,type,get,application,context,type,as,beans,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> MapAssert<String, T> getBeans(Class<T> type, Scope scope);1523353653;Obtain a map bean names and instances of the given type from the application_context, the map becoming the object under test. If no bean of the specified type_can be found an assert on an empty {@code map} is returned._<p>_Example: <pre class="code">_assertThat(context).getBeans(Foo.class, Scope.NO_ANCESTORS).containsKey("foo")__</pre>_@param <T> the bean type_@param type the bean type_@param scope the scope of the assertion_@return bean assertions for the beans, or an assert on an empty {@code map} if the_no beans are found_@throws AssertionError if the application context did not start;public <T> MapAssert<String, T> getBeans(Class<T> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans of type:%n <%s>", type))__		}_		return Assertions.assertThat(scope.getBeansOfType(getApplicationContext(), type))_				.as("Beans of type <%s> from <%s>", type, getApplicationContext())__	};obtain,a,map,bean,names,and,instances,of,the,given,type,from,the,application,context,the,map,becoming,the,object,under,test,if,no,bean,of,the,specified,type,can,be,found,an,assert,on,an,empty,code,map,is,returned,p,example,pre,class,code,assert,that,context,get,beans,foo,class,scope,contains,key,foo,pre,param,t,the,bean,type,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,bean,assertions,for,the,beans,or,an,assert,on,an,empty,code,map,if,the,no,beans,are,found,throws,assertion,error,if,the,application,context,did,not,start;public,t,map,assert,string,t,get,beans,class,t,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,of,type,n,s,type,return,assertions,assert,that,scope,get,beans,of,type,get,application,context,type,as,beans,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> MapAssert<String, T> getBeans(Class<T> type, Scope scope);1525416882;Obtain a map bean names and instances of the given type from the application_context, the map becoming the object under test. If no bean of the specified type_can be found an assert on an empty {@code map} is returned._<p>_Example: <pre class="code">_assertThat(context).getBeans(Foo.class, Scope.NO_ANCESTORS).containsKey("foo")__</pre>_@param <T> the bean type_@param type the bean type_@param scope the scope of the assertion_@return bean assertions for the beans, or an assert on an empty {@code map} if the_no beans are found_@throws AssertionError if the application context did not start;public <T> MapAssert<String, T> getBeans(Class<T> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans of type:%n <%s>", type))__		}_		return Assertions.assertThat(scope.getBeansOfType(getApplicationContext(), type))_				.as("Beans of type <%s> from <%s>", type, getApplicationContext())__	};obtain,a,map,bean,names,and,instances,of,the,given,type,from,the,application,context,the,map,becoming,the,object,under,test,if,no,bean,of,the,specified,type,can,be,found,an,assert,on,an,empty,code,map,is,returned,p,example,pre,class,code,assert,that,context,get,beans,foo,class,scope,contains,key,foo,pre,param,t,the,bean,type,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,bean,assertions,for,the,beans,or,an,assert,on,an,empty,code,map,if,the,no,beans,are,found,throws,assertion,error,if,the,application,context,did,not,start;public,t,map,assert,string,t,get,beans,class,t,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,of,type,n,s,type,return,assertions,assert,that,scope,get,beans,of,type,get,application,context,type,as,beans,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> MapAssert<String, T> getBeans(Class<T> type, Scope scope);1532738143;Obtain a map bean names and instances of the given type from the application_context, the map becoming the object under test. If no bean of the specified type_can be found an assert on an empty {@code map} is returned._<p>_Example: <pre class="code">_assertThat(context).getBeans(Foo.class, Scope.NO_ANCESTORS).containsKey("foo")__</pre>_@param <T> the bean type_@param type the bean type_@param scope the scope of the assertion_@return bean assertions for the beans, or an assert on an empty {@code map} if the_no beans are found_@throws AssertionError if the application context did not start;public <T> MapAssert<String, T> getBeans(Class<T> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans of type:%n <%s>", type))__		}_		return Assertions.assertThat(scope.getBeansOfType(getApplicationContext(), type))_				.as("Beans of type <%s> from <%s>", type, getApplicationContext())__	};obtain,a,map,bean,names,and,instances,of,the,given,type,from,the,application,context,the,map,becoming,the,object,under,test,if,no,bean,of,the,specified,type,can,be,found,an,assert,on,an,empty,code,map,is,returned,p,example,pre,class,code,assert,that,context,get,beans,foo,class,scope,contains,key,foo,pre,param,t,the,bean,type,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,bean,assertions,for,the,beans,or,an,assert,on,an,empty,code,map,if,the,no,beans,are,found,throws,assertion,error,if,the,application,context,did,not,start;public,t,map,assert,string,t,get,beans,class,t,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,of,type,n,s,type,return,assertions,assert,that,scope,get,beans,of,type,get,application,context,type,as,beans,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> MapAssert<String, T> getBeans(Class<T> type, Scope scope);1540442057;Obtain a map bean names and instances of the given type from the application_context, the map becoming the object under test. If no bean of the specified type_can be found an assert on an empty {@code map} is returned._<p>_Example: <pre class="code">_assertThat(context).getBeans(Foo.class, Scope.NO_ANCESTORS).containsKey("foo")__</pre>_@param <T> the bean type_@param type the bean type_@param scope the scope of the assertion_@return bean assertions for the beans, or an assert on an empty {@code map} if the_no beans are found_@throws AssertionError if the application context did not start;public <T> MapAssert<String, T> getBeans(Class<T> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans of type:%n <%s>", type))__		}_		return Assertions.assertThat(scope.getBeansOfType(getApplicationContext(), type))_				.as("Beans of type <%s> from <%s>", type, getApplicationContext())__	};obtain,a,map,bean,names,and,instances,of,the,given,type,from,the,application,context,the,map,becoming,the,object,under,test,if,no,bean,of,the,specified,type,can,be,found,an,assert,on,an,empty,code,map,is,returned,p,example,pre,class,code,assert,that,context,get,beans,foo,class,scope,contains,key,foo,pre,param,t,the,bean,type,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,bean,assertions,for,the,beans,or,an,assert,on,an,empty,code,map,if,the,no,beans,are,found,throws,assertion,error,if,the,application,context,did,not,start;public,t,map,assert,string,t,get,beans,class,t,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,of,type,n,s,type,return,assertions,assert,that,scope,get,beans,of,type,get,application,context,type,as,beans,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public ApplicationContextAssert<C> hasBean(String name);1507173536;Verifies that the application context contains a bean with the given name._<p>_Example: <pre class="code">_assertThat(context).hasBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does not contain a bean with the_given name;public ApplicationContextAssert<C> hasBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have bean named:%n <%s>", name))__		}_		if (findBean(name) == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have bean named:%n <%s>%nbut found no such bean",_					getApplicationContext(), name))__		}_		return this__	};verifies,that,the,application,context,contains,a,bean,with,the,given,name,p,example,pre,class,code,assert,that,context,has,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,not,contain,a,bean,with,the,given,name;public,application,context,assert,c,has,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,bean,named,n,s,name,if,find,bean,name,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,bean,named,n,s,nbut,found,no,such,bean,get,application,context,name,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasBean(String name);1514389543;Verifies that the application context contains a bean with the given name._<p>_Example: <pre class="code">_assertThat(context).hasBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does not contain a bean with the_given name;public ApplicationContextAssert<C> hasBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have bean named:%n <%s>", name))__		}_		if (findBean(name) == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have bean named:%n <%s>%nbut found no such bean",_					getApplicationContext(), name))__		}_		return this__	};verifies,that,the,application,context,contains,a,bean,with,the,given,name,p,example,pre,class,code,assert,that,context,has,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,not,contain,a,bean,with,the,given,name;public,application,context,assert,c,has,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,bean,named,n,s,name,if,find,bean,name,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,bean,named,n,s,nbut,found,no,such,bean,get,application,context,name,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasBean(String name);1518486594;Verifies that the application context contains a bean with the given name._<p>_Example: <pre class="code">_assertThat(context).hasBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does not contain a bean with the_given name;public ApplicationContextAssert<C> hasBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have bean named:%n <%s>", name))__		}_		if (findBean(name) == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have bean named:%n <%s>%nbut found no such bean",_					getApplicationContext(), name))__		}_		return this__	};verifies,that,the,application,context,contains,a,bean,with,the,given,name,p,example,pre,class,code,assert,that,context,has,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,not,contain,a,bean,with,the,given,name;public,application,context,assert,c,has,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,bean,named,n,s,name,if,find,bean,name,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,bean,named,n,s,nbut,found,no,such,bean,get,application,context,name,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasBean(String name);1523353653;Verifies that the application context contains a bean with the given name._<p>_Example: <pre class="code">_assertThat(context).hasBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does not contain a bean with the_given name;public ApplicationContextAssert<C> hasBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have bean named:%n <%s>", name))__		}_		if (findBean(name) == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have bean named:%n <%s>%nbut found no such bean",_					getApplicationContext(), name))__		}_		return this__	};verifies,that,the,application,context,contains,a,bean,with,the,given,name,p,example,pre,class,code,assert,that,context,has,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,not,contain,a,bean,with,the,given,name;public,application,context,assert,c,has,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,bean,named,n,s,name,if,find,bean,name,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,bean,named,n,s,nbut,found,no,such,bean,get,application,context,name,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasBean(String name);1525416882;Verifies that the application context contains a bean with the given name._<p>_Example: <pre class="code">_assertThat(context).hasBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does not contain a bean with the_given name;public ApplicationContextAssert<C> hasBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have bean named:%n <%s>", name))__		}_		if (findBean(name) == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have bean named:%n <%s>%nbut found no such bean",_					getApplicationContext(), name))__		}_		return this__	};verifies,that,the,application,context,contains,a,bean,with,the,given,name,p,example,pre,class,code,assert,that,context,has,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,not,contain,a,bean,with,the,given,name;public,application,context,assert,c,has,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,bean,named,n,s,name,if,find,bean,name,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,bean,named,n,s,nbut,found,no,such,bean,get,application,context,name,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasBean(String name);1532738143;Verifies that the application context contains a bean with the given name._<p>_Example: <pre class="code">_assertThat(context).hasBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does not contain a bean with the_given name;public ApplicationContextAssert<C> hasBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have bean named:%n <%s>", name))__		}_		if (findBean(name) == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have bean named:%n <%s>%nbut found no such bean",_					getApplicationContext(), name))__		}_		return this__	};verifies,that,the,application,context,contains,a,bean,with,the,given,name,p,example,pre,class,code,assert,that,context,has,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,not,contain,a,bean,with,the,given,name;public,application,context,assert,c,has,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,bean,named,n,s,name,if,find,bean,name,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,bean,named,n,s,nbut,found,no,such,bean,get,application,context,name,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasBean(String name);1540442057;Verifies that the application context contains a bean with the given name._<p>_Example: <pre class="code">_assertThat(context).hasBean("fooBean")_ </pre>_@param name the name of the bean_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does not contain a bean with the_given name;public ApplicationContextAssert<C> hasBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have bean named:%n <%s>", name))__		}_		if (findBean(name) == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have bean named:%n <%s>%nbut found no such bean",_					getApplicationContext(), name))__		}_		return this__	};verifies,that,the,application,context,contains,a,bean,with,the,given,name,p,example,pre,class,code,assert,that,context,has,bean,foo,bean,pre,param,name,the,name,of,the,bean,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,not,contain,a,bean,with,the,given,name;public,application,context,assert,c,has,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,bean,named,n,s,name,if,find,bean,name,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,bean,named,n,s,nbut,found,no,such,bean,get,application,context,name,return,this
ApplicationContextAssert -> public AbstractObjectAssert<?, Object> getBean(String name);1507173536;Obtain a single bean of the given name from the application context, the bean_becoming the object under test. If no bean of the specified name can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo").isInstanceOf(Foo.class)__assertThat(context).getBean("foo").isNull()_</pre>_@param name the name of the bean_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start;public AbstractObjectAssert<?, Object> getBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s>", name))__		}_		Object bean = findBean(name)__		return Assertions.assertThat(bean).as("Bean of name <%s> from <%s>", name,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,is,instance,of,foo,class,assert,that,context,get,bean,foo,is,null,pre,param,name,the,name,of,the,bean,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start;public,abstract,object,assert,object,get,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,name,object,bean,find,bean,name,return,assertions,assert,that,bean,as,bean,of,name,s,from,s,name,get,application,context
ApplicationContextAssert -> public AbstractObjectAssert<?, Object> getBean(String name);1514389543;Obtain a single bean of the given name from the application context, the bean_becoming the object under test. If no bean of the specified name can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo").isInstanceOf(Foo.class)__assertThat(context).getBean("foo").isNull()_</pre>_@param name the name of the bean_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start;public AbstractObjectAssert<?, Object> getBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s>", name))__		}_		Object bean = findBean(name)__		return Assertions.assertThat(bean).as("Bean of name <%s> from <%s>", name,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,is,instance,of,foo,class,assert,that,context,get,bean,foo,is,null,pre,param,name,the,name,of,the,bean,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start;public,abstract,object,assert,object,get,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,name,object,bean,find,bean,name,return,assertions,assert,that,bean,as,bean,of,name,s,from,s,name,get,application,context
ApplicationContextAssert -> public AbstractObjectAssert<?, Object> getBean(String name);1518486594;Obtain a single bean of the given name from the application context, the bean_becoming the object under test. If no bean of the specified name can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo").isInstanceOf(Foo.class)__assertThat(context).getBean("foo").isNull()_</pre>_@param name the name of the bean_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start;public AbstractObjectAssert<?, Object> getBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s>", name))__		}_		Object bean = findBean(name)__		return Assertions.assertThat(bean).as("Bean of name <%s> from <%s>", name,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,is,instance,of,foo,class,assert,that,context,get,bean,foo,is,null,pre,param,name,the,name,of,the,bean,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start;public,abstract,object,assert,object,get,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,name,object,bean,find,bean,name,return,assertions,assert,that,bean,as,bean,of,name,s,from,s,name,get,application,context
ApplicationContextAssert -> public AbstractObjectAssert<?, Object> getBean(String name);1523353653;Obtain a single bean of the given name from the application context, the bean_becoming the object under test. If no bean of the specified name can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo").isInstanceOf(Foo.class)__assertThat(context).getBean("foo").isNull()_</pre>_@param name the name of the bean_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start;public AbstractObjectAssert<?, Object> getBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s>", name))__		}_		Object bean = findBean(name)__		return Assertions.assertThat(bean).as("Bean of name <%s> from <%s>", name,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,is,instance,of,foo,class,assert,that,context,get,bean,foo,is,null,pre,param,name,the,name,of,the,bean,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start;public,abstract,object,assert,object,get,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,name,object,bean,find,bean,name,return,assertions,assert,that,bean,as,bean,of,name,s,from,s,name,get,application,context
ApplicationContextAssert -> public AbstractObjectAssert<?, Object> getBean(String name);1525416882;Obtain a single bean of the given name from the application context, the bean_becoming the object under test. If no bean of the specified name can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo").isInstanceOf(Foo.class)__assertThat(context).getBean("foo").isNull()_</pre>_@param name the name of the bean_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start;public AbstractObjectAssert<?, Object> getBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s>", name))__		}_		Object bean = findBean(name)__		return Assertions.assertThat(bean).as("Bean of name <%s> from <%s>", name,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,is,instance,of,foo,class,assert,that,context,get,bean,foo,is,null,pre,param,name,the,name,of,the,bean,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start;public,abstract,object,assert,object,get,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,name,object,bean,find,bean,name,return,assertions,assert,that,bean,as,bean,of,name,s,from,s,name,get,application,context
ApplicationContextAssert -> public AbstractObjectAssert<?, Object> getBean(String name);1532738143;Obtain a single bean of the given name from the application context, the bean_becoming the object under test. If no bean of the specified name can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo").isInstanceOf(Foo.class)__assertThat(context).getBean("foo").isNull()_</pre>_@param name the name of the bean_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start;public AbstractObjectAssert<?, Object> getBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s>", name))__		}_		Object bean = findBean(name)__		return Assertions.assertThat(bean).as("Bean of name <%s> from <%s>", name,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,is,instance,of,foo,class,assert,that,context,get,bean,foo,is,null,pre,param,name,the,name,of,the,bean,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start;public,abstract,object,assert,object,get,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,name,object,bean,find,bean,name,return,assertions,assert,that,bean,as,bean,of,name,s,from,s,name,get,application,context
ApplicationContextAssert -> public AbstractObjectAssert<?, Object> getBean(String name);1540442057;Obtain a single bean of the given name from the application context, the bean_becoming the object under test. If no bean of the specified name can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean("foo").isInstanceOf(Foo.class)__assertThat(context).getBean("foo").isNull()_</pre>_@param name the name of the bean_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start;public AbstractObjectAssert<?, Object> getBean(String name) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain a bean of name:%n <%s>", name))__		}_		Object bean = findBean(name)__		return Assertions.assertThat(bean).as("Bean of name <%s> from <%s>", name,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,name,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,bean,of,the,specified,name,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,is,instance,of,foo,class,assert,that,context,get,bean,foo,is,null,pre,param,name,the,name,of,the,bean,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start;public,abstract,object,assert,object,get,bean,string,name,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,a,bean,of,name,n,s,name,object,bean,find,bean,name,return,assertions,assert,that,bean,as,bean,of,name,s,from,s,name,get,application,context
ApplicationContextAssert -> public <T> MapAssert<String, T> getBeans(Class<T> type);1507173536;Obtain a map bean names and instances of the given type from the application_context, the map becoming the object under test. If no bean of the specified type_can be found an assert on an empty {@code map} is returned._<p>_Example: <pre class="code">_assertThat(context).getBeans(Foo.class).containsKey("foo")__</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the beans, or an assert on an empty {@code map} if the_no beans are found_@throws AssertionError if the application context did not start;public <T> MapAssert<String, T> getBeans(Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans of type:%n <%s>", type))__		}_		return Assertions.assertThat(getApplicationContext().getBeansOfType(type))_				.as("Beans of type <%s> from <%s>", type, getApplicationContext())__	};obtain,a,map,bean,names,and,instances,of,the,given,type,from,the,application,context,the,map,becoming,the,object,under,test,if,no,bean,of,the,specified,type,can,be,found,an,assert,on,an,empty,code,map,is,returned,p,example,pre,class,code,assert,that,context,get,beans,foo,class,contains,key,foo,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,beans,or,an,assert,on,an,empty,code,map,if,the,no,beans,are,found,throws,assertion,error,if,the,application,context,did,not,start;public,t,map,assert,string,t,get,beans,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,of,type,n,s,type,return,assertions,assert,that,get,application,context,get,beans,of,type,type,as,beans,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> MapAssert<String, T> getBeans(Class<T> type);1514389543;Obtain a map bean names and instances of the given type from the application_context, the map becoming the object under test. If no bean of the specified type_can be found an assert on an empty {@code map} is returned._<p>_Example: <pre class="code">_assertThat(context).getBeans(Foo.class).containsKey("foo")__</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the beans, or an assert on an empty {@code map} if the_no beans are found_@throws AssertionError if the application context did not start;public <T> MapAssert<String, T> getBeans(Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans of type:%n <%s>", type))__		}_		return Assertions.assertThat(getApplicationContext().getBeansOfType(type))_				.as("Beans of type <%s> from <%s>", type, getApplicationContext())__	};obtain,a,map,bean,names,and,instances,of,the,given,type,from,the,application,context,the,map,becoming,the,object,under,test,if,no,bean,of,the,specified,type,can,be,found,an,assert,on,an,empty,code,map,is,returned,p,example,pre,class,code,assert,that,context,get,beans,foo,class,contains,key,foo,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,beans,or,an,assert,on,an,empty,code,map,if,the,no,beans,are,found,throws,assertion,error,if,the,application,context,did,not,start;public,t,map,assert,string,t,get,beans,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,of,type,n,s,type,return,assertions,assert,that,get,application,context,get,beans,of,type,type,as,beans,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> MapAssert<String, T> getBeans(Class<T> type);1518486594;Obtain a map bean names and instances of the given type from the application_context (or ancestors), the map becoming the object under test. If no bean of the_specified type can be found an assert on an empty {@code map} is returned._<p>_Example: <pre class="code">_assertThat(context).getBeans(Foo.class).containsKey("foo")__</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the beans, or an assert on an empty {@code map} if the_no beans are found_@throws AssertionError if the application context did not start;public <T> MapAssert<String, T> getBeans(Class<T> type) {_		return getBeans(type, Scope.INCLUDE_ANCESTORS)__	};obtain,a,map,bean,names,and,instances,of,the,given,type,from,the,application,context,or,ancestors,the,map,becoming,the,object,under,test,if,no,bean,of,the,specified,type,can,be,found,an,assert,on,an,empty,code,map,is,returned,p,example,pre,class,code,assert,that,context,get,beans,foo,class,contains,key,foo,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,beans,or,an,assert,on,an,empty,code,map,if,the,no,beans,are,found,throws,assertion,error,if,the,application,context,did,not,start;public,t,map,assert,string,t,get,beans,class,t,type,return,get,beans,type,scope
ApplicationContextAssert -> public <T> MapAssert<String, T> getBeans(Class<T> type);1523353653;Obtain a map bean names and instances of the given type from the application_context (or ancestors), the map becoming the object under test. If no bean of the_specified type can be found an assert on an empty {@code map} is returned._<p>_Example: <pre class="code">_assertThat(context).getBeans(Foo.class).containsKey("foo")__</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the beans, or an assert on an empty {@code map} if the_no beans are found_@throws AssertionError if the application context did not start;public <T> MapAssert<String, T> getBeans(Class<T> type) {_		return getBeans(type, Scope.INCLUDE_ANCESTORS)__	};obtain,a,map,bean,names,and,instances,of,the,given,type,from,the,application,context,or,ancestors,the,map,becoming,the,object,under,test,if,no,bean,of,the,specified,type,can,be,found,an,assert,on,an,empty,code,map,is,returned,p,example,pre,class,code,assert,that,context,get,beans,foo,class,contains,key,foo,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,beans,or,an,assert,on,an,empty,code,map,if,the,no,beans,are,found,throws,assertion,error,if,the,application,context,did,not,start;public,t,map,assert,string,t,get,beans,class,t,type,return,get,beans,type,scope
ApplicationContextAssert -> public <T> MapAssert<String, T> getBeans(Class<T> type);1525416882;Obtain a map bean names and instances of the given type from the application_context (or ancestors), the map becoming the object under test. If no bean of the_specified type can be found an assert on an empty {@code map} is returned._<p>_Example: <pre class="code">_assertThat(context).getBeans(Foo.class).containsKey("foo")__</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the beans, or an assert on an empty {@code map} if the_no beans are found_@throws AssertionError if the application context did not start;public <T> MapAssert<String, T> getBeans(Class<T> type) {_		return getBeans(type, Scope.INCLUDE_ANCESTORS)__	};obtain,a,map,bean,names,and,instances,of,the,given,type,from,the,application,context,or,ancestors,the,map,becoming,the,object,under,test,if,no,bean,of,the,specified,type,can,be,found,an,assert,on,an,empty,code,map,is,returned,p,example,pre,class,code,assert,that,context,get,beans,foo,class,contains,key,foo,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,beans,or,an,assert,on,an,empty,code,map,if,the,no,beans,are,found,throws,assertion,error,if,the,application,context,did,not,start;public,t,map,assert,string,t,get,beans,class,t,type,return,get,beans,type,scope
ApplicationContextAssert -> public <T> MapAssert<String, T> getBeans(Class<T> type);1532738143;Obtain a map bean names and instances of the given type from the application_context (or ancestors), the map becoming the object under test. If no bean of the_specified type can be found an assert on an empty {@code map} is returned._<p>_Example: <pre class="code">_assertThat(context).getBeans(Foo.class).containsKey("foo")__</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the beans, or an assert on an empty {@code map} if the_no beans are found_@throws AssertionError if the application context did not start;public <T> MapAssert<String, T> getBeans(Class<T> type) {_		return getBeans(type, Scope.INCLUDE_ANCESTORS)__	};obtain,a,map,bean,names,and,instances,of,the,given,type,from,the,application,context,or,ancestors,the,map,becoming,the,object,under,test,if,no,bean,of,the,specified,type,can,be,found,an,assert,on,an,empty,code,map,is,returned,p,example,pre,class,code,assert,that,context,get,beans,foo,class,contains,key,foo,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,beans,or,an,assert,on,an,empty,code,map,if,the,no,beans,are,found,throws,assertion,error,if,the,application,context,did,not,start;public,t,map,assert,string,t,get,beans,class,t,type,return,get,beans,type,scope
ApplicationContextAssert -> public <T> MapAssert<String, T> getBeans(Class<T> type);1540442057;Obtain a map bean names and instances of the given type from the application_context (or ancestors), the map becoming the object under test. If no bean of the_specified type can be found an assert on an empty {@code map} is returned._<p>_Example: <pre class="code">_assertThat(context).getBeans(Foo.class).containsKey("foo")__</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the beans, or an assert on an empty {@code map} if the_no beans are found_@throws AssertionError if the application context did not start;public <T> MapAssert<String, T> getBeans(Class<T> type) {_		return getBeans(type, Scope.INCLUDE_ANCESTORS)__	};obtain,a,map,bean,names,and,instances,of,the,given,type,from,the,application,context,or,ancestors,the,map,becoming,the,object,under,test,if,no,bean,of,the,specified,type,can,be,found,an,assert,on,an,empty,code,map,is,returned,p,example,pre,class,code,assert,that,context,get,beans,foo,class,contains,key,foo,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,beans,or,an,assert,on,an,empty,code,map,if,the,no,beans,are,found,throws,assertion,error,if,the,application,context,did,not,start;public,t,map,assert,string,t,get,beans,class,t,type,return,get,beans,type,scope
ApplicationContextAssert -> ApplicationContextAssert(C applicationContext, Throwable startupFailure);1507173536;Create a new {@link ApplicationContextAssert} instance._@param applicationContext the source application context_@param startupFailure the startup failure or {@code null};ApplicationContextAssert(C applicationContext, Throwable startupFailure) {_		super(applicationContext, ApplicationContextAssert.class)__		Assert.notNull(applicationContext, "ApplicationContext must not be null")__		this.startupFailure = startupFailure__	};create,a,new,link,application,context,assert,instance,param,application,context,the,source,application,context,param,startup,failure,the,startup,failure,or,code,null;application,context,assert,c,application,context,throwable,startup,failure,super,application,context,application,context,assert,class,assert,not,null,application,context,application,context,must,not,be,null,this,startup,failure,startup,failure
ApplicationContextAssert -> ApplicationContextAssert(C applicationContext, Throwable startupFailure);1514389543;Create a new {@link ApplicationContextAssert} instance._@param applicationContext the source application context_@param startupFailure the startup failure or {@code null};ApplicationContextAssert(C applicationContext, Throwable startupFailure) {_		super(applicationContext, ApplicationContextAssert.class)__		Assert.notNull(applicationContext, "ApplicationContext must not be null")__		this.startupFailure = startupFailure__	};create,a,new,link,application,context,assert,instance,param,application,context,the,source,application,context,param,startup,failure,the,startup,failure,or,code,null;application,context,assert,c,application,context,throwable,startup,failure,super,application,context,application,context,assert,class,assert,not,null,application,context,application,context,must,not,be,null,this,startup,failure,startup,failure
ApplicationContextAssert -> ApplicationContextAssert(C applicationContext, Throwable startupFailure);1518486594;Create a new {@link ApplicationContextAssert} instance._@param applicationContext the source application context_@param startupFailure the startup failure or {@code null};ApplicationContextAssert(C applicationContext, Throwable startupFailure) {_		super(applicationContext, ApplicationContextAssert.class)__		Assert.notNull(applicationContext, "ApplicationContext must not be null")__		this.startupFailure = startupFailure__	};create,a,new,link,application,context,assert,instance,param,application,context,the,source,application,context,param,startup,failure,the,startup,failure,or,code,null;application,context,assert,c,application,context,throwable,startup,failure,super,application,context,application,context,assert,class,assert,not,null,application,context,application,context,must,not,be,null,this,startup,failure,startup,failure
ApplicationContextAssert -> ApplicationContextAssert(C applicationContext, Throwable startupFailure);1523353653;Create a new {@link ApplicationContextAssert} instance._@param applicationContext the source application context_@param startupFailure the startup failure or {@code null};ApplicationContextAssert(C applicationContext, Throwable startupFailure) {_		super(applicationContext, ApplicationContextAssert.class)__		Assert.notNull(applicationContext, "ApplicationContext must not be null")__		this.startupFailure = startupFailure__	};create,a,new,link,application,context,assert,instance,param,application,context,the,source,application,context,param,startup,failure,the,startup,failure,or,code,null;application,context,assert,c,application,context,throwable,startup,failure,super,application,context,application,context,assert,class,assert,not,null,application,context,application,context,must,not,be,null,this,startup,failure,startup,failure
ApplicationContextAssert -> ApplicationContextAssert(C applicationContext, Throwable startupFailure);1525416882;Create a new {@link ApplicationContextAssert} instance._@param applicationContext the source application context_@param startupFailure the startup failure or {@code null};ApplicationContextAssert(C applicationContext, Throwable startupFailure) {_		super(applicationContext, ApplicationContextAssert.class)__		Assert.notNull(applicationContext, "ApplicationContext must not be null")__		this.startupFailure = startupFailure__	};create,a,new,link,application,context,assert,instance,param,application,context,the,source,application,context,param,startup,failure,the,startup,failure,or,code,null;application,context,assert,c,application,context,throwable,startup,failure,super,application,context,application,context,assert,class,assert,not,null,application,context,application,context,must,not,be,null,this,startup,failure,startup,failure
ApplicationContextAssert -> ApplicationContextAssert(C applicationContext, Throwable startupFailure);1532738143;Create a new {@link ApplicationContextAssert} instance._@param applicationContext the source application context_@param startupFailure the startup failure or {@code null};ApplicationContextAssert(C applicationContext, Throwable startupFailure) {_		super(applicationContext, ApplicationContextAssert.class)__		Assert.notNull(applicationContext, "ApplicationContext must not be null")__		this.startupFailure = startupFailure__	};create,a,new,link,application,context,assert,instance,param,application,context,the,source,application,context,param,startup,failure,the,startup,failure,or,code,null;application,context,assert,c,application,context,throwable,startup,failure,super,application,context,application,context,assert,class,assert,not,null,application,context,application,context,must,not,be,null,this,startup,failure,startup,failure
ApplicationContextAssert -> ApplicationContextAssert(C applicationContext, Throwable startupFailure);1540442057;Create a new {@link ApplicationContextAssert} instance._@param applicationContext the source application context_@param startupFailure the startup failure or {@code null};ApplicationContextAssert(C applicationContext, Throwable startupFailure) {_		super(applicationContext, ApplicationContextAssert.class)__		Assert.notNull(applicationContext, "ApplicationContext must not be null")__		this.startupFailure = startupFailure__	};create,a,new,link,application,context,assert,instance,param,application,context,the,source,application,context,param,startup,failure,the,startup,failure,or,code,null;application,context,assert,c,application,context,throwable,startup,failure,super,application,context,application,context,assert,class,assert,not,null,application,context,application,context,must,not,be,null,this,startup,failure,startup,failure
ApplicationContextAssert -> public <T> AbstractObjectAssert<?, T> getBean(Class<T> type);1507173536;Obtain a single bean of the given type from the application context, the bean_becoming the object under test. If no beans of the specified type can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean(Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean(Bar.class).isNull()_</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains multiple beans of the_given type;public <T> AbstractObjectAssert<?, T> getBean(Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain bean of type:%n <%s>", type))__		}_		String[] names = getApplicationContext().getBeanNamesForType(type)__		if (names.length > 1) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nsingle bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		T bean = (names.length == 0 ? null_				: getApplicationContext().getBean(names[0], type))__		return Assertions.assertThat(bean).as("Bean of type <%s> from <%s>", type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,beans,of,the,specified,type,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,bar,class,is,null,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,t,abstract,object,assert,t,get,bean,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,bean,of,type,n,s,type,string,names,get,application,context,get,bean,names,for,type,type,if,names,length,1,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nsingle,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,t,bean,names,length,0,null,get,application,context,get,bean,names,0,type,return,assertions,assert,that,bean,as,bean,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> AbstractObjectAssert<?, T> getBean(Class<T> type);1514389543;Obtain a single bean of the given type from the application context, the bean_becoming the object under test. If no beans of the specified type can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean(Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean(Bar.class).isNull()_</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains multiple beans of the_given type;public <T> AbstractObjectAssert<?, T> getBean(Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain bean of type:%n <%s>", type))__		}_		String[] names = getApplicationContext().getBeanNamesForType(type)__		if (names.length > 1) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nsingle bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		T bean = (names.length == 0 ? null_				: getApplicationContext().getBean(names[0], type))__		return Assertions.assertThat(bean).as("Bean of type <%s> from <%s>", type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,beans,of,the,specified,type,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,bar,class,is,null,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,t,abstract,object,assert,t,get,bean,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,bean,of,type,n,s,type,string,names,get,application,context,get,bean,names,for,type,type,if,names,length,1,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nsingle,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,t,bean,names,length,0,null,get,application,context,get,bean,names,0,type,return,assertions,assert,that,bean,as,bean,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> AbstractObjectAssert<?, T> getBean(Class<T> type);1518486594;Obtain a single bean of the given type from the application context (or ancestors),_the bean becoming the object under test. If no beans of the specified type can be_found an assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean(Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean(Bar.class).isNull()_</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains multiple beans of the_given type;public <T> AbstractObjectAssert<?, T> getBean(Class<T> type) {_		return getBean(type, Scope.INCLUDE_ANCESTORS)__	};obtain,a,single,bean,of,the,given,type,from,the,application,context,or,ancestors,the,bean,becoming,the,object,under,test,if,no,beans,of,the,specified,type,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,bar,class,is,null,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,t,abstract,object,assert,t,get,bean,class,t,type,return,get,bean,type,scope
ApplicationContextAssert -> public <T> AbstractObjectAssert<?, T> getBean(Class<T> type);1523353653;Obtain a single bean of the given type from the application context (or ancestors),_the bean becoming the object under test. If no beans of the specified type can be_found an assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean(Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean(Bar.class).isNull()_</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains multiple beans of the_given type;public <T> AbstractObjectAssert<?, T> getBean(Class<T> type) {_		return getBean(type, Scope.INCLUDE_ANCESTORS)__	};obtain,a,single,bean,of,the,given,type,from,the,application,context,or,ancestors,the,bean,becoming,the,object,under,test,if,no,beans,of,the,specified,type,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,bar,class,is,null,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,t,abstract,object,assert,t,get,bean,class,t,type,return,get,bean,type,scope
ApplicationContextAssert -> public <T> AbstractObjectAssert<?, T> getBean(Class<T> type);1525416882;Obtain a single bean of the given type from the application context (or ancestors),_the bean becoming the object under test. If no beans of the specified type can be_found an assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean(Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean(Bar.class).isNull()_</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains multiple beans of the_given type;public <T> AbstractObjectAssert<?, T> getBean(Class<T> type) {_		return getBean(type, Scope.INCLUDE_ANCESTORS)__	};obtain,a,single,bean,of,the,given,type,from,the,application,context,or,ancestors,the,bean,becoming,the,object,under,test,if,no,beans,of,the,specified,type,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,bar,class,is,null,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,t,abstract,object,assert,t,get,bean,class,t,type,return,get,bean,type,scope
ApplicationContextAssert -> public <T> AbstractObjectAssert<?, T> getBean(Class<T> type);1532738143;Obtain a single bean of the given type from the application context (or ancestors),_the bean becoming the object under test. If no beans of the specified type can be_found an assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean(Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean(Bar.class).isNull()_</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains multiple beans of the_given type;public <T> AbstractObjectAssert<?, T> getBean(Class<T> type) {_		return getBean(type, Scope.INCLUDE_ANCESTORS)__	};obtain,a,single,bean,of,the,given,type,from,the,application,context,or,ancestors,the,bean,becoming,the,object,under,test,if,no,beans,of,the,specified,type,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,bar,class,is,null,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,t,abstract,object,assert,t,get,bean,class,t,type,return,get,bean,type,scope
ApplicationContextAssert -> public <T> AbstractObjectAssert<?, T> getBean(Class<T> type);1540442057;Obtain a single bean of the given type from the application context (or ancestors),_the bean becoming the object under test. If no beans of the specified type can be_found an assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean(Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean(Bar.class).isNull()_</pre>_@param <T> the bean type_@param type the bean type_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains multiple beans of the_given type;public <T> AbstractObjectAssert<?, T> getBean(Class<T> type) {_		return getBean(type, Scope.INCLUDE_ANCESTORS)__	};obtain,a,single,bean,of,the,given,type,from,the,application,context,or,ancestors,the,bean,becoming,the,object,under,test,if,no,beans,of,the,specified,type,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,bar,class,is,null,pre,param,t,the,bean,type,param,type,the,bean,type,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,t,abstract,object,assert,t,get,bean,class,t,type,return,get,bean,type,scope
ApplicationContextAssert -> public <T> AbstractObjectAssert<?, T> getBean(Class<T> type, Scope scope);1518486594;Obtain a single bean of the given type from the application context, the bean_becoming the object under test. If no beans of the specified type can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean(Foo.class).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean(Bar.class).isNull()_</pre>_@param <T> the bean type_@param type the bean type_@param scope the scope of the assertion_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains multiple beans of the_given type;public <T> AbstractObjectAssert<?, T> getBean(Class<T> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain bean of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length > 1) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nsingle bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		T bean = (names.length == 0 ? null_				: getApplicationContext().getBean(names[0], type))__		return Assertions.assertThat(bean).as("Bean of type <%s> from <%s>", type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,beans,of,the,specified,type,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,class,is,instance,of,default,foo,class,assert,that,context,get,bean,bar,class,is,null,pre,param,t,the,bean,type,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,t,abstract,object,assert,t,get,bean,class,t,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,bean,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,1,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nsingle,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,t,bean,names,length,0,null,get,application,context,get,bean,names,0,type,return,assertions,assert,that,bean,as,bean,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> AbstractObjectAssert<?, T> getBean(Class<T> type, Scope scope);1523353653;Obtain a single bean of the given type from the application context, the bean_becoming the object under test. If no beans of the specified type can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean(Foo.class, Scope.NO_ANCESTORS).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean(Bar.class, Scope.NO_ANCESTORS).isNull()_</pre>_@param <T> the bean type_@param type the bean type_@param scope the scope of the assertion_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains multiple beans of the_given type;public <T> AbstractObjectAssert<?, T> getBean(Class<T> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain bean of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length > 1) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nsingle bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		T bean = (names.length == 0 ? null_				: getApplicationContext().getBean(names[0], type))__		return Assertions.assertThat(bean).as("Bean of type <%s> from <%s>", type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,beans,of,the,specified,type,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,class,scope,is,instance,of,default,foo,class,assert,that,context,get,bean,bar,class,scope,is,null,pre,param,t,the,bean,type,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,t,abstract,object,assert,t,get,bean,class,t,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,bean,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,1,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nsingle,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,t,bean,names,length,0,null,get,application,context,get,bean,names,0,type,return,assertions,assert,that,bean,as,bean,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> AbstractObjectAssert<?, T> getBean(Class<T> type, Scope scope);1525416882;Obtain a single bean of the given type from the application context, the bean_becoming the object under test. If no beans of the specified type can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean(Foo.class, Scope.NO_ANCESTORS).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean(Bar.class, Scope.NO_ANCESTORS).isNull()_</pre>_@param <T> the bean type_@param type the bean type_@param scope the scope of the assertion_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains multiple beans of the_given type;public <T> AbstractObjectAssert<?, T> getBean(Class<T> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain bean of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length > 1) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nsingle bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		T bean = (names.length != 0 ? getApplicationContext().getBean(names[0], type)_				: null)__		return Assertions.assertThat(bean).as("Bean of type <%s> from <%s>", type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,beans,of,the,specified,type,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,class,scope,is,instance,of,default,foo,class,assert,that,context,get,bean,bar,class,scope,is,null,pre,param,t,the,bean,type,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,t,abstract,object,assert,t,get,bean,class,t,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,bean,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,1,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nsingle,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,t,bean,names,length,0,get,application,context,get,bean,names,0,type,null,return,assertions,assert,that,bean,as,bean,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> AbstractObjectAssert<?, T> getBean(Class<T> type, Scope scope);1532738143;Obtain a single bean of the given type from the application context, the bean_becoming the object under test. If no beans of the specified type can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean(Foo.class, Scope.NO_ANCESTORS).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean(Bar.class, Scope.NO_ANCESTORS).isNull()_</pre>_@param <T> the bean type_@param type the bean type_@param scope the scope of the assertion_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains multiple beans of the_given type;public <T> AbstractObjectAssert<?, T> getBean(Class<T> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain bean of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		if (names.length > 1) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nsingle bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		T bean = (names.length != 0) ? getApplicationContext().getBean(names[0], type)_				: null__		return Assertions.assertThat(bean).as("Bean of type <%s> from <%s>", type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,beans,of,the,specified,type,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,class,scope,is,instance,of,default,foo,class,assert,that,context,get,bean,bar,class,scope,is,null,pre,param,t,the,bean,type,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,t,abstract,object,assert,t,get,bean,class,t,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,bean,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,if,names,length,1,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nsingle,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,t,bean,names,length,0,get,application,context,get,bean,names,0,type,null,return,assertions,assert,that,bean,as,bean,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> AbstractObjectAssert<?, T> getBean(Class<T> type, Scope scope);1540442057;Obtain a single bean of the given type from the application context, the bean_becoming the object under test. If no beans of the specified type can be found an_assert on {@code null} is returned._<p>_Example: <pre class="code">_assertThat(context).getBean(Foo.class, Scope.NO_ANCESTORS).isInstanceOf(DefaultFoo.class)__assertThat(context).getBean(Bar.class, Scope.NO_ANCESTORS).isNull()_</pre>_@param <T> the bean type_@param type the bean type_@param scope the scope of the assertion_@return bean assertions for the bean, or an assert on {@code null} if the no bean_is found_@throws AssertionError if the application context did not start_@throws AssertionError if the application context contains multiple beans of the_given type;public <T> AbstractObjectAssert<?, T> getBean(Class<T> type, Scope scope) {_		Assert.notNull(scope, "Scope must not be null")__		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to contain bean of type:%n <%s>", type))__		}_		String[] names = scope.getBeanNamesForType(getApplicationContext(), type)__		String name = (names.length > 0) ? getPrimary(names, scope) : null__		if (names.length > 1 && name == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nsingle bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		T bean = (name != null) ? getApplicationContext().getBean(name, type) : null__		return Assertions.assertThat(bean).as("Bean of type <%s> from <%s>", type,_				getApplicationContext())__	};obtain,a,single,bean,of,the,given,type,from,the,application,context,the,bean,becoming,the,object,under,test,if,no,beans,of,the,specified,type,can,be,found,an,assert,on,code,null,is,returned,p,example,pre,class,code,assert,that,context,get,bean,foo,class,scope,is,instance,of,default,foo,class,assert,that,context,get,bean,bar,class,scope,is,null,pre,param,t,the,bean,type,param,type,the,bean,type,param,scope,the,scope,of,the,assertion,return,bean,assertions,for,the,bean,or,an,assert,on,code,null,if,the,no,bean,is,found,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,t,abstract,object,assert,t,get,bean,class,t,type,scope,scope,assert,not,null,scope,scope,must,not,be,null,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,contain,bean,of,type,n,s,type,string,names,scope,get,bean,names,for,type,get,application,context,type,string,name,names,length,0,get,primary,names,scope,null,if,names,length,1,name,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nsingle,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,t,bean,name,null,get,application,context,get,bean,name,type,null,return,assertions,assert,that,bean,as,bean,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type);1507173536;Obtain the beans names of the given type from the application context, the names_becoming the object array under test._<p>_Example: <pre class="code">_assertThat(context).getBeanNames(Foo.class).containsOnly("fooBean")_ </pre>_@param <T> the bean type_@param type the bean type_@return array assertions for the bean names_@throws AssertionError if the application context did not start;public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans names with type:%n <%s>", type))__		}_		return Assertions.assertThat(getApplicationContext().getBeanNamesForType(type))_				.as("Bean names of type <%s> from <%s>", type, getApplicationContext())__	};obtain,the,beans,names,of,the,given,type,from,the,application,context,the,names,becoming,the,object,array,under,test,p,example,pre,class,code,assert,that,context,get,bean,names,foo,class,contains,only,foo,bean,pre,param,t,the,bean,type,param,type,the,bean,type,return,array,assertions,for,the,bean,names,throws,assertion,error,if,the,application,context,did,not,start;public,t,abstract,object,array,assert,string,get,bean,names,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,names,with,type,n,s,type,return,assertions,assert,that,get,application,context,get,bean,names,for,type,type,as,bean,names,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type);1514389543;Obtain the beans names of the given type from the application context, the names_becoming the object array under test._<p>_Example: <pre class="code">_assertThat(context).getBeanNames(Foo.class).containsOnly("fooBean")_ </pre>_@param <T> the bean type_@param type the bean type_@return array assertions for the bean names_@throws AssertionError if the application context did not start;public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans names with type:%n <%s>", type))__		}_		return Assertions.assertThat(getApplicationContext().getBeanNamesForType(type))_				.as("Bean names of type <%s> from <%s>", type, getApplicationContext())__	};obtain,the,beans,names,of,the,given,type,from,the,application,context,the,names,becoming,the,object,array,under,test,p,example,pre,class,code,assert,that,context,get,bean,names,foo,class,contains,only,foo,bean,pre,param,t,the,bean,type,param,type,the,bean,type,return,array,assertions,for,the,bean,names,throws,assertion,error,if,the,application,context,did,not,start;public,t,abstract,object,array,assert,string,get,bean,names,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,names,with,type,n,s,type,return,assertions,assert,that,get,application,context,get,bean,names,for,type,type,as,bean,names,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type);1518486594;Obtain the beans names of the given type from the application context, the names_becoming the object array under test._<p>_Example: <pre class="code">_assertThat(context).getBeanNames(Foo.class).containsOnly("fooBean")_ </pre>_@param <T> the bean type_@param type the bean type_@return array assertions for the bean names_@throws AssertionError if the application context did not start;public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans names with type:%n <%s>", type))__		}_		return Assertions.assertThat(getApplicationContext().getBeanNamesForType(type))_				.as("Bean names of type <%s> from <%s>", type, getApplicationContext())__	};obtain,the,beans,names,of,the,given,type,from,the,application,context,the,names,becoming,the,object,array,under,test,p,example,pre,class,code,assert,that,context,get,bean,names,foo,class,contains,only,foo,bean,pre,param,t,the,bean,type,param,type,the,bean,type,return,array,assertions,for,the,bean,names,throws,assertion,error,if,the,application,context,did,not,start;public,t,abstract,object,array,assert,string,get,bean,names,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,names,with,type,n,s,type,return,assertions,assert,that,get,application,context,get,bean,names,for,type,type,as,bean,names,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type);1523353653;Obtain the beans names of the given type from the application context, the names_becoming the object array under test._<p>_Example: <pre class="code">_assertThat(context).getBeanNames(Foo.class).containsOnly("fooBean")_ </pre>_@param <T> the bean type_@param type the bean type_@return array assertions for the bean names_@throws AssertionError if the application context did not start;public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans names with type:%n <%s>", type))__		}_		return Assertions.assertThat(getApplicationContext().getBeanNamesForType(type))_				.as("Bean names of type <%s> from <%s>", type, getApplicationContext())__	};obtain,the,beans,names,of,the,given,type,from,the,application,context,the,names,becoming,the,object,array,under,test,p,example,pre,class,code,assert,that,context,get,bean,names,foo,class,contains,only,foo,bean,pre,param,t,the,bean,type,param,type,the,bean,type,return,array,assertions,for,the,bean,names,throws,assertion,error,if,the,application,context,did,not,start;public,t,abstract,object,array,assert,string,get,bean,names,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,names,with,type,n,s,type,return,assertions,assert,that,get,application,context,get,bean,names,for,type,type,as,bean,names,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type);1525416882;Obtain the beans names of the given type from the application context, the names_becoming the object array under test._<p>_Example: <pre class="code">_assertThat(context).getBeanNames(Foo.class).containsOnly("fooBean")_ </pre>_@param <T> the bean type_@param type the bean type_@return array assertions for the bean names_@throws AssertionError if the application context did not start;public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans names with type:%n <%s>", type))__		}_		return Assertions.assertThat(getApplicationContext().getBeanNamesForType(type))_				.as("Bean names of type <%s> from <%s>", type, getApplicationContext())__	};obtain,the,beans,names,of,the,given,type,from,the,application,context,the,names,becoming,the,object,array,under,test,p,example,pre,class,code,assert,that,context,get,bean,names,foo,class,contains,only,foo,bean,pre,param,t,the,bean,type,param,type,the,bean,type,return,array,assertions,for,the,bean,names,throws,assertion,error,if,the,application,context,did,not,start;public,t,abstract,object,array,assert,string,get,bean,names,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,names,with,type,n,s,type,return,assertions,assert,that,get,application,context,get,bean,names,for,type,type,as,bean,names,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type);1532738143;Obtain the beans names of the given type from the application context, the names_becoming the object array under test._<p>_Example: <pre class="code">_assertThat(context).getBeanNames(Foo.class).containsOnly("fooBean")_ </pre>_@param <T> the bean type_@param type the bean type_@return array assertions for the bean names_@throws AssertionError if the application context did not start;public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans names with type:%n <%s>", type))__		}_		return Assertions.assertThat(getApplicationContext().getBeanNamesForType(type))_				.as("Bean names of type <%s> from <%s>", type, getApplicationContext())__	};obtain,the,beans,names,of,the,given,type,from,the,application,context,the,names,becoming,the,object,array,under,test,p,example,pre,class,code,assert,that,context,get,bean,names,foo,class,contains,only,foo,bean,pre,param,t,the,bean,type,param,type,the,bean,type,return,array,assertions,for,the,bean,names,throws,assertion,error,if,the,application,context,did,not,start;public,t,abstract,object,array,assert,string,get,bean,names,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,names,with,type,n,s,type,return,assertions,assert,that,get,application,context,get,bean,names,for,type,type,as,bean,names,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type);1540442057;Obtain the beans names of the given type from the application context, the names_becoming the object array under test._<p>_Example: <pre class="code">_assertThat(context).getBeanNames(Foo.class).containsOnly("fooBean")_ </pre>_@param <T> the bean type_@param type the bean type_@return array assertions for the bean names_@throws AssertionError if the application context did not start;public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to get beans names with type:%n <%s>", type))__		}_		return Assertions.assertThat(getApplicationContext().getBeanNamesForType(type))_				.as("Bean names of type <%s> from <%s>", type, getApplicationContext())__	};obtain,the,beans,names,of,the,given,type,from,the,application,context,the,names,becoming,the,object,array,under,test,p,example,pre,class,code,assert,that,context,get,bean,names,foo,class,contains,only,foo,bean,pre,param,t,the,bean,type,param,type,the,bean,type,return,array,assertions,for,the,bean,names,throws,assertion,error,if,the,application,context,did,not,start;public,t,abstract,object,array,assert,string,get,bean,names,class,t,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,get,beans,names,with,type,n,s,type,return,assertions,assert,that,get,application,context,get,bean,names,for,type,type,as,bean,names,of,type,s,from,s,type,get,application,context
ApplicationContextAssert -> public ApplicationContextAssert<C> hasSingleBean(Class<?> type);1507173536;Verifies that the application context contains a single bean with the given type._<p>_Example: <pre class="code">_assertThat(context).hasSingleBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does no beans of the given type_@throws AssertionError if the application context contains multiple beans of the_given type;public ApplicationContextAssert<C> hasSingleBean(Class<?> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have a single bean of type:%n <%s>", type))__		}_		String[] names = getApplicationContext().getBeanNamesForType(type)__		if (names.length == 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found no beans of that type",_					getApplicationContext(), type))__		}_		if (names.length > 1) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,contains,a,single,bean,with,the,given,type,p,example,pre,class,code,assert,that,context,has,single,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,no,beans,of,the,given,type,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,application,context,assert,c,has,single,bean,class,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,a,single,bean,of,type,n,s,type,string,names,get,application,context,get,bean,names,for,type,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,no,beans,of,that,type,get,application,context,type,if,names,length,1,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasSingleBean(Class<?> type);1514389543;Verifies that the application context contains a single bean with the given type._<p>_Example: <pre class="code">_assertThat(context).hasSingleBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does no beans of the given type_@throws AssertionError if the application context contains multiple beans of the_given type;public ApplicationContextAssert<C> hasSingleBean(Class<?> type) {_		if (this.startupFailure != null) {_			throwAssertionError(contextFailedToStartWhenExpecting(_					"to have a single bean of type:%n <%s>", type))__		}_		String[] names = getApplicationContext().getBeanNamesForType(type)__		if (names.length == 0) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found no beans of that type",_					getApplicationContext(), type))__		}_		if (names.length > 1) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found:%n <%s>",_					getApplicationContext(), type, names))__		}_		return this__	};verifies,that,the,application,context,contains,a,single,bean,with,the,given,type,p,example,pre,class,code,assert,that,context,has,single,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,no,beans,of,the,given,type,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,application,context,assert,c,has,single,bean,class,type,if,this,startup,failure,null,throw,assertion,error,context,failed,to,start,when,expecting,to,have,a,single,bean,of,type,n,s,type,string,names,get,application,context,get,bean,names,for,type,type,if,names,length,0,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,no,beans,of,that,type,get,application,context,type,if,names,length,1,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,a,single,bean,of,type,n,s,nbut,found,n,s,get,application,context,type,names,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasSingleBean(Class<?> type);1518486594;Verifies that the application context (or ancestors) contains a single bean with_the given type._<p>_Example: <pre class="code">_assertThat(context).hasSingleBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does no beans of the given type_@throws AssertionError if the application context contains multiple beans of the_given type;public ApplicationContextAssert<C> hasSingleBean(Class<?> type) {_		return hasSingleBean(type, Scope.INCLUDE_ANCESTORS)__	};verifies,that,the,application,context,or,ancestors,contains,a,single,bean,with,the,given,type,p,example,pre,class,code,assert,that,context,has,single,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,no,beans,of,the,given,type,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,application,context,assert,c,has,single,bean,class,type,return,has,single,bean,type,scope
ApplicationContextAssert -> public ApplicationContextAssert<C> hasSingleBean(Class<?> type);1523353653;Verifies that the application context (or ancestors) contains a single bean with_the given type._<p>_Example: <pre class="code">_assertThat(context).hasSingleBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does no beans of the given type_@throws AssertionError if the application context contains multiple beans of the_given type;public ApplicationContextAssert<C> hasSingleBean(Class<?> type) {_		return hasSingleBean(type, Scope.INCLUDE_ANCESTORS)__	};verifies,that,the,application,context,or,ancestors,contains,a,single,bean,with,the,given,type,p,example,pre,class,code,assert,that,context,has,single,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,no,beans,of,the,given,type,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,application,context,assert,c,has,single,bean,class,type,return,has,single,bean,type,scope
ApplicationContextAssert -> public ApplicationContextAssert<C> hasSingleBean(Class<?> type);1525416882;Verifies that the application context (or ancestors) contains a single bean with_the given type._<p>_Example: <pre class="code">_assertThat(context).hasSingleBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does no beans of the given type_@throws AssertionError if the application context contains multiple beans of the_given type;public ApplicationContextAssert<C> hasSingleBean(Class<?> type) {_		return hasSingleBean(type, Scope.INCLUDE_ANCESTORS)__	};verifies,that,the,application,context,or,ancestors,contains,a,single,bean,with,the,given,type,p,example,pre,class,code,assert,that,context,has,single,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,no,beans,of,the,given,type,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,application,context,assert,c,has,single,bean,class,type,return,has,single,bean,type,scope
ApplicationContextAssert -> public ApplicationContextAssert<C> hasSingleBean(Class<?> type);1532738143;Verifies that the application context (or ancestors) contains a single bean with_the given type._<p>_Example: <pre class="code">_assertThat(context).hasSingleBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does no beans of the given type_@throws AssertionError if the application context contains multiple beans of the_given type;public ApplicationContextAssert<C> hasSingleBean(Class<?> type) {_		return hasSingleBean(type, Scope.INCLUDE_ANCESTORS)__	};verifies,that,the,application,context,or,ancestors,contains,a,single,bean,with,the,given,type,p,example,pre,class,code,assert,that,context,has,single,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,no,beans,of,the,given,type,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,application,context,assert,c,has,single,bean,class,type,return,has,single,bean,type,scope
ApplicationContextAssert -> public ApplicationContextAssert<C> hasSingleBean(Class<?> type);1540442057;Verifies that the application context (or ancestors) contains a single bean with_the given type._<p>_Example: <pre class="code">_assertThat(context).hasSingleBean(Foo.class)_ </pre>_@param type the bean type_@return {@code this} assertion object._@throws AssertionError if the application context did not start_@throws AssertionError if the application context does no beans of the given type_@throws AssertionError if the application context contains multiple beans of the_given type;public ApplicationContextAssert<C> hasSingleBean(Class<?> type) {_		return hasSingleBean(type, Scope.INCLUDE_ANCESTORS)__	};verifies,that,the,application,context,or,ancestors,contains,a,single,bean,with,the,given,type,p,example,pre,class,code,assert,that,context,has,single,bean,foo,class,pre,param,type,the,bean,type,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,did,not,start,throws,assertion,error,if,the,application,context,does,no,beans,of,the,given,type,throws,assertion,error,if,the,application,context,contains,multiple,beans,of,the,given,type;public,application,context,assert,c,has,single,bean,class,type,return,has,single,bean,type,scope
ApplicationContextAssert -> public ApplicationContextAssert<C> hasFailed();1507173536;Verifies that the application has failed to start._<p>_Example: <pre class="code"> assertThat(context).hasFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context started without a failure;public ApplicationContextAssert<C> hasFailed() {_		if (this.startupFailure == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have failed%nbut context started successfully",_					getApplicationContext()))__		}_		return this__	};verifies,that,the,application,has,failed,to,start,p,example,pre,class,code,assert,that,context,has,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,started,without,a,failure;public,application,context,assert,c,has,failed,if,this,startup,failure,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,failed,nbut,context,started,successfully,get,application,context,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasFailed();1514389543;Verifies that the application has failed to start._<p>_Example: <pre class="code"> assertThat(context).hasFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context started without a failure;public ApplicationContextAssert<C> hasFailed() {_		if (this.startupFailure == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have failed%nbut context started successfully",_					getApplicationContext()))__		}_		return this__	};verifies,that,the,application,has,failed,to,start,p,example,pre,class,code,assert,that,context,has,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,started,without,a,failure;public,application,context,assert,c,has,failed,if,this,startup,failure,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,failed,nbut,context,started,successfully,get,application,context,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasFailed();1518486594;Verifies that the application has failed to start._<p>_Example: <pre class="code"> assertThat(context).hasFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context started without a failure;public ApplicationContextAssert<C> hasFailed() {_		if (this.startupFailure == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have failed%nbut context started successfully",_					getApplicationContext()))__		}_		return this__	};verifies,that,the,application,has,failed,to,start,p,example,pre,class,code,assert,that,context,has,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,started,without,a,failure;public,application,context,assert,c,has,failed,if,this,startup,failure,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,failed,nbut,context,started,successfully,get,application,context,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasFailed();1523353653;Verifies that the application has failed to start._<p>_Example: <pre class="code"> assertThat(context).hasFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context started without a failure;public ApplicationContextAssert<C> hasFailed() {_		if (this.startupFailure == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have failed%nbut context started successfully",_					getApplicationContext()))__		}_		return this__	};verifies,that,the,application,has,failed,to,start,p,example,pre,class,code,assert,that,context,has,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,started,without,a,failure;public,application,context,assert,c,has,failed,if,this,startup,failure,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,failed,nbut,context,started,successfully,get,application,context,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasFailed();1525416882;Verifies that the application has failed to start._<p>_Example: <pre class="code"> assertThat(context).hasFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context started without a failure;public ApplicationContextAssert<C> hasFailed() {_		if (this.startupFailure == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have failed%nbut context started successfully",_					getApplicationContext()))__		}_		return this__	};verifies,that,the,application,has,failed,to,start,p,example,pre,class,code,assert,that,context,has,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,started,without,a,failure;public,application,context,assert,c,has,failed,if,this,startup,failure,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,failed,nbut,context,started,successfully,get,application,context,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasFailed();1532738143;Verifies that the application has failed to start._<p>_Example: <pre class="code"> assertThat(context).hasFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context started without a failure;public ApplicationContextAssert<C> hasFailed() {_		if (this.startupFailure == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have failed%nbut context started successfully",_					getApplicationContext()))__		}_		return this__	};verifies,that,the,application,has,failed,to,start,p,example,pre,class,code,assert,that,context,has,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,started,without,a,failure;public,application,context,assert,c,has,failed,if,this,startup,failure,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,failed,nbut,context,started,successfully,get,application,context,return,this
ApplicationContextAssert -> public ApplicationContextAssert<C> hasFailed();1540442057;Verifies that the application has failed to start._<p>_Example: <pre class="code"> assertThat(context).hasFailed()__</pre>_@return {@code this} assertion object._@throws AssertionError if the application context started without a failure;public ApplicationContextAssert<C> hasFailed() {_		if (this.startupFailure == null) {_			throwAssertionError(new BasicErrorMessageFactory(_					"%nExpecting:%n <%s>%nto have failed%nbut context started successfully",_					getApplicationContext()))__		}_		return this__	};verifies,that,the,application,has,failed,to,start,p,example,pre,class,code,assert,that,context,has,failed,pre,return,code,this,assertion,object,throws,assertion,error,if,the,application,context,started,without,a,failure;public,application,context,assert,c,has,failed,if,this,startup,failure,null,throw,assertion,error,new,basic,error,message,factory,n,expecting,n,s,nto,have,failed,nbut,context,started,successfully,get,application,context,return,this
