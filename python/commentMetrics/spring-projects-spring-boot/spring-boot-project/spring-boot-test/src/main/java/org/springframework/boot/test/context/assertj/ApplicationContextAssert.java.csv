commented;modifiers;parameterAmount;loc;comment;code
true;public;1;12;/**  * Verifies that the application context contains a bean with the given name.  * <p>  * Example: <pre class="code">  * assertThat(context).hasBean("fooBean"). </pre>  * @param name the name of the bean  * @return {@code this} assertion object.  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context does not contain a bean with the  * given name  */ ;/**  * Verifies that the application context contains a bean with the given name.  * <p>  * Example: <pre class="code">  * assertThat(context).hasBean("fooBean"). </pre>  * @param name the name of the bean  * @return {@code this} assertion object.  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context does not contain a bean with the  * given name  */ public ApplicationContextAssert<C> hasBean(String name) {     if (this.startupFailure != null) {         throwAssertionError(contextFailedToStartWhenExpecting("to have bean named:%n <%s>", name)).     }     if (findBean(name) == null) {         throwAssertionError(new BasicErrorMessageFactory("%nExpecting:%n <%s>%nto have bean named:%n <%s>%nbut found no such bean", getApplicationContext(), name)).     }     return this. }
true;public;1;3;/**  * Verifies that the application context (or ancestors) contains a single bean with  * the given type.  * <p>  * Example: <pre class="code">  * assertThat(context).hasSingleBean(Foo.class). </pre>  * @param type the bean type  * @return {@code this} assertion object.  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context does no beans of the given type  * @throws AssertionError if the application context contains multiple beans of the  * given type  */ ;/**  * Verifies that the application context (or ancestors) contains a single bean with  * the given type.  * <p>  * Example: <pre class="code">  * assertThat(context).hasSingleBean(Foo.class). </pre>  * @param type the bean type  * @return {@code this} assertion object.  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context does no beans of the given type  * @throws AssertionError if the application context contains multiple beans of the  * given type  */ public ApplicationContextAssert<C> hasSingleBean(Class<?> type) {     return hasSingleBean(type, Scope.INCLUDE_ANCESTORS). }
true;public;2;19;/**  * Verifies that the application context contains a single bean with the given type.  * <p>  * Example: <pre class="code">  * assertThat(context).hasSingleBean(Foo.class, Scope.NO_ANCESTORS). </pre>  * @param type the bean type  * @param scope the scope of the assertion  * @return {@code this} assertion object.  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context does no beans of the given type  * @throws AssertionError if the application context contains multiple beans of the  * given type  */ ;/**  * Verifies that the application context contains a single bean with the given type.  * <p>  * Example: <pre class="code">  * assertThat(context).hasSingleBean(Foo.class, Scope.NO_ANCESTORS). </pre>  * @param type the bean type  * @param scope the scope of the assertion  * @return {@code this} assertion object.  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context does no beans of the given type  * @throws AssertionError if the application context contains multiple beans of the  * given type  */ public ApplicationContextAssert<C> hasSingleBean(Class<?> type, Scope scope) {     Assert.notNull(scope, "Scope must not be null").     if (this.startupFailure != null) {         throwAssertionError(contextFailedToStartWhenExpecting("to have a single bean of type:%n <%s>", type)).     }     String[] names = scope.getBeanNamesForType(getApplicationContext(), type).     if (names.length == 0) {         throwAssertionError(new BasicErrorMessageFactory("%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found no beans of that type", getApplicationContext(), type)).     }     if (names.length > 1) {         throwAssertionError(new BasicErrorMessageFactory("%nExpecting:%n <%s>%nto have a single bean of type:%n <%s>%nbut found:%n <%s>", getApplicationContext(), type, names)).     }     return this. }
true;public;1;3;/**  * Verifies that the application context (or ancestors) does not contain any beans of  * the given type.  * <p>  * Example: <pre class="code">  * assertThat(context).doesNotHaveBean(Foo.class). </pre>  * @param type the bean type  * @return {@code this} assertion object.  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context contains any beans of the given  * type  */ ;/**  * Verifies that the application context (or ancestors) does not contain any beans of  * the given type.  * <p>  * Example: <pre class="code">  * assertThat(context).doesNotHaveBean(Foo.class). </pre>  * @param type the bean type  * @return {@code this} assertion object.  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context contains any beans of the given  * type  */ public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type) {     return doesNotHaveBean(type, Scope.INCLUDE_ANCESTORS). }
true;public;2;14;/**  * Verifies that the application context does not contain any beans of the given type.  * <p>  * Example: <pre class="code">  * assertThat(context).doesNotHaveBean(Foo.class, Scope.NO_ANCESTORS). </pre>  * @param type the bean type  * @param scope the scope of the assertion  * @return {@code this} assertion object.  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context contains any beans of the given  * type  */ ;/**  * Verifies that the application context does not contain any beans of the given type.  * <p>  * Example: <pre class="code">  * assertThat(context).doesNotHaveBean(Foo.class, Scope.NO_ANCESTORS). </pre>  * @param type the bean type  * @param scope the scope of the assertion  * @return {@code this} assertion object.  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context contains any beans of the given  * type  */ public ApplicationContextAssert<C> doesNotHaveBean(Class<?> type, Scope scope) {     Assert.notNull(scope, "Scope must not be null").     if (this.startupFailure != null) {         throwAssertionError(contextFailedToStartWhenExpecting("not to have any beans of type:%n <%s>", type)).     }     String[] names = scope.getBeanNamesForType(getApplicationContext(), type).     if (names.length > 0) {         throwAssertionError(new BasicErrorMessageFactory("%nExpecting:%n <%s>%nnot to have a beans of type:%n <%s>%nbut found:%n <%s>", getApplicationContext(), type, names)).     }     return this. }
true;public;1;15;/**  * Verifies that the application context does not contain a beans of the given name.  * <p>  * Example: <pre class="code">  * assertThat(context).doesNotHaveBean("fooBean"). </pre>  * @param name the name of the bean  * @return {@code this} assertion object.  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context contains a beans of the given  * name  */ ;/**  * Verifies that the application context does not contain a beans of the given name.  * <p>  * Example: <pre class="code">  * assertThat(context).doesNotHaveBean("fooBean"). </pre>  * @param name the name of the bean  * @return {@code this} assertion object.  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context contains a beans of the given  * name  */ public ApplicationContextAssert<C> doesNotHaveBean(String name) {     if (this.startupFailure != null) {         throwAssertionError(contextFailedToStartWhenExpecting("not to have any beans of name:%n <%s>", name)).     }     try {         Object bean = getApplicationContext().getBean(name).         throwAssertionError(new BasicErrorMessageFactory("%nExpecting:%n <%s>%nnot to have a bean of name:%n <%s>%nbut found:%n <%s>", getApplicationContext(), name, bean)).     } catch (NoSuchBeanDefinitionException ex) {     }     return this. }
true;public;1;8;/**  * Obtain the beans names of the given type from the application context, the names  * becoming the object array under test.  * <p>  * Example: <pre class="code">  * assertThat(context).getBeanNames(Foo.class).containsOnly("fooBean"). </pre>  * @param <T> the bean type  * @param type the bean type  * @return array assertions for the bean names  * @throws AssertionError if the application context did not start  */ ;/**  * Obtain the beans names of the given type from the application context, the names  * becoming the object array under test.  * <p>  * Example: <pre class="code">  * assertThat(context).getBeanNames(Foo.class).containsOnly("fooBean"). </pre>  * @param <T> the bean type  * @param type the bean type  * @return array assertions for the bean names  * @throws AssertionError if the application context did not start  */ public <T> AbstractObjectArrayAssert<?, String> getBeanNames(Class<T> type) {     if (this.startupFailure != null) {         throwAssertionError(contextFailedToStartWhenExpecting("to get beans names with type:%n <%s>", type)).     }     return Assertions.assertThat(getApplicationContext().getBeanNamesForType(type)).as("Bean names of type <%s> from <%s>", type, getApplicationContext()). }
true;public;1;3;/**  * Obtain a single bean of the given type from the application context (or ancestors),  * the bean becoming the object under test. If no beans of the specified type can be  * found an assert on {@code null} is returned.  * <p>  * Example: <pre class="code">  * assertThat(context).getBean(Foo.class).isInstanceOf(DefaultFoo.class).  * assertThat(context).getBean(Bar.class).isNull().</pre>  * @param <T> the bean type  * @param type the bean type  * @return bean assertions for the bean, or an assert on {@code null} if the no bean  * is found  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context contains multiple beans of the  * given type  */ ;/**  * Obtain a single bean of the given type from the application context (or ancestors),  * the bean becoming the object under test. If no beans of the specified type can be  * found an assert on {@code null} is returned.  * <p>  * Example: <pre class="code">  * assertThat(context).getBean(Foo.class).isInstanceOf(DefaultFoo.class).  * assertThat(context).getBean(Bar.class).isNull().</pre>  * @param <T> the bean type  * @param type the bean type  * @return bean assertions for the bean, or an assert on {@code null} if the no bean  * is found  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context contains multiple beans of the  * given type  */ public <T> AbstractObjectAssert<?, T> getBean(Class<T> type) {     return getBean(type, Scope.INCLUDE_ANCESTORS). }
true;public;2;17;/**  * Obtain a single bean of the given type from the application context, the bean  * becoming the object under test. If no beans of the specified type can be found an  * assert on {@code null} is returned.  * <p>  * Example: <pre class="code">  * assertThat(context).getBean(Foo.class, Scope.NO_ANCESTORS).isInstanceOf(DefaultFoo.class).  * assertThat(context).getBean(Bar.class, Scope.NO_ANCESTORS).isNull().</pre>  * @param <T> the bean type  * @param type the bean type  * @param scope the scope of the assertion  * @return bean assertions for the bean, or an assert on {@code null} if the no bean  * is found  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context contains multiple beans of the  * given type  */ ;/**  * Obtain a single bean of the given type from the application context, the bean  * becoming the object under test. If no beans of the specified type can be found an  * assert on {@code null} is returned.  * <p>  * Example: <pre class="code">  * assertThat(context).getBean(Foo.class, Scope.NO_ANCESTORS).isInstanceOf(DefaultFoo.class).  * assertThat(context).getBean(Bar.class, Scope.NO_ANCESTORS).isNull().</pre>  * @param <T> the bean type  * @param type the bean type  * @param scope the scope of the assertion  * @return bean assertions for the bean, or an assert on {@code null} if the no bean  * is found  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context contains multiple beans of the  * given type  */ public <T> AbstractObjectAssert<?, T> getBean(Class<T> type, Scope scope) {     Assert.notNull(scope, "Scope must not be null").     if (this.startupFailure != null) {         throwAssertionError(contextFailedToStartWhenExpecting("to contain bean of type:%n <%s>", type)).     }     String[] names = scope.getBeanNamesForType(getApplicationContext(), type).     String name = (names.length > 0) ? getPrimary(names, scope) : null.     if (names.length > 1 && name == null) {         throwAssertionError(new BasicErrorMessageFactory("%nExpecting:%n <%s>%nsingle bean of type:%n <%s>%nbut found:%n <%s>", getApplicationContext(), type, names)).     }     T bean = (name != null) ? getApplicationContext().getBean(name, type) : null.     return Assertions.assertThat(bean).as("Bean of type <%s> from <%s>", type, getApplicationContext()). }
false;private;2;15;;private String getPrimary(String[] names, Scope scope) {     if (names.length == 1) {         return names[0].     }     String primary = null.     for (String name : names) {         if (isPrimary(name, scope)) {             if (primary != null) {                 return null.             }             primary = name.         }     }     return primary. }
false;private;2;15;;private boolean isPrimary(String name, Scope scope) {     ApplicationContext context = getApplicationContext().     while (context != null) {         if (context instanceof ConfigurableApplicationContext) {             ConfigurableListableBeanFactory factory = ((ConfigurableApplicationContext) context).getBeanFactory().             if (factory.containsBean(name) && factory.getMergedBeanDefinition(name).isPrimary()) {                 return true.             }         }         context = (scope != Scope.NO_ANCESTORS) ? context.getParent() : null.     }     return false. }
true;public;1;9;/**  * Obtain a single bean of the given name from the application context, the bean  * becoming the object under test. If no bean of the specified name can be found an  * assert on {@code null} is returned.  * <p>  * Example: <pre class="code">  * assertThat(context).getBean("foo").isInstanceOf(Foo.class).  * assertThat(context).getBean("foo").isNull().</pre>  * @param name the name of the bean  * @return bean assertions for the bean, or an assert on {@code null} if the no bean  * is found  * @throws AssertionError if the application context did not start  */ ;/**  * Obtain a single bean of the given name from the application context, the bean  * becoming the object under test. If no bean of the specified name can be found an  * assert on {@code null} is returned.  * <p>  * Example: <pre class="code">  * assertThat(context).getBean("foo").isInstanceOf(Foo.class).  * assertThat(context).getBean("foo").isNull().</pre>  * @param name the name of the bean  * @return bean assertions for the bean, or an assert on {@code null} if the no bean  * is found  * @throws AssertionError if the application context did not start  */ public AbstractObjectAssert<?, Object> getBean(String name) {     if (this.startupFailure != null) {         throwAssertionError(contextFailedToStartWhenExpecting("to contain a bean of name:%n <%s>", name)).     }     Object bean = findBean(name).     return Assertions.assertThat(bean).as("Bean of name <%s> from <%s>", name, getApplicationContext()). }
true;public;2;16;/**  * Obtain a single bean of the given name and type from the application context, the  * bean becoming the object under test. If no bean of the specified name can be found  * an assert on {@code null} is returned.  * <p>  * Example: <pre class="code">  * assertThat(context).getBean("foo", Foo.class).isInstanceOf(DefaultFoo.class).  * assertThat(context).getBean("foo", Foo.class).isNull().</pre>  * @param <T> the bean type  * @param name the name of the bean  * @param type the bean type  * @return bean assertions for the bean, or an assert on {@code null} if the no bean  * is found  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context contains a bean with the given  * name but a different type  */ ;/**  * Obtain a single bean of the given name and type from the application context, the  * bean becoming the object under test. If no bean of the specified name can be found  * an assert on {@code null} is returned.  * <p>  * Example: <pre class="code">  * assertThat(context).getBean("foo", Foo.class).isInstanceOf(DefaultFoo.class).  * assertThat(context).getBean("foo", Foo.class).isNull().</pre>  * @param <T> the bean type  * @param name the name of the bean  * @param type the bean type  * @return bean assertions for the bean, or an assert on {@code null} if the no bean  * is found  * @throws AssertionError if the application context did not start  * @throws AssertionError if the application context contains a bean with the given  * name but a different type  */ @SuppressWarnings("unchecked") public <T> AbstractObjectAssert<?, T> getBean(String name, Class<T> type) {     if (this.startupFailure != null) {         throwAssertionError(contextFailedToStartWhenExpecting("to contain a bean of name:%n <%s> (%s)", name, type)).     }     Object bean = findBean(name).     if (bean != null && type != null && !type.isInstance(bean)) {         throwAssertionError(new BasicErrorMessageFactory("%nExpecting:%n <%s>%nto contain a bean of name:%n <%s> (%s)%nbut found:%n <%s> of type <%s>", getApplicationContext(), name, type, bean, bean.getClass())).     }     return Assertions.assertThat((T) bean).as("Bean of name <%s> and type <%s> from <%s>", name, type, getApplicationContext()). }
false;private;1;8;;private Object findBean(String name) {     try {         return getApplicationContext().getBean(name).     } catch (NoSuchBeanDefinitionException ex) {         return null.     } }
true;public;1;3;/**  * Obtain a map bean names and instances of the given type from the application  * context (or ancestors), the map becoming the object under test. If no bean of the  * specified type can be found an assert on an empty {@code map} is returned.  * <p>  * Example: <pre class="code">  * assertThat(context).getBeans(Foo.class).containsKey("foo").  * </pre>  * @param <T> the bean type  * @param type the bean type  * @return bean assertions for the beans, or an assert on an empty {@code map} if the  * no beans are found  * @throws AssertionError if the application context did not start  */ ;/**  * Obtain a map bean names and instances of the given type from the application  * context (or ancestors), the map becoming the object under test. If no bean of the  * specified type can be found an assert on an empty {@code map} is returned.  * <p>  * Example: <pre class="code">  * assertThat(context).getBeans(Foo.class).containsKey("foo").  * </pre>  * @param <T> the bean type  * @param type the bean type  * @return bean assertions for the beans, or an assert on an empty {@code map} if the  * no beans are found  * @throws AssertionError if the application context did not start  */ public <T> MapAssert<String, T> getBeans(Class<T> type) {     return getBeans(type, Scope.INCLUDE_ANCESTORS). }
true;public;2;9;/**  * Obtain a map bean names and instances of the given type from the application  * context, the map becoming the object under test. If no bean of the specified type  * can be found an assert on an empty {@code map} is returned.  * <p>  * Example: <pre class="code">  * assertThat(context).getBeans(Foo.class, Scope.NO_ANCESTORS).containsKey("foo").  * </pre>  * @param <T> the bean type  * @param type the bean type  * @param scope the scope of the assertion  * @return bean assertions for the beans, or an assert on an empty {@code map} if the  * no beans are found  * @throws AssertionError if the application context did not start  */ ;/**  * Obtain a map bean names and instances of the given type from the application  * context, the map becoming the object under test. If no bean of the specified type  * can be found an assert on an empty {@code map} is returned.  * <p>  * Example: <pre class="code">  * assertThat(context).getBeans(Foo.class, Scope.NO_ANCESTORS).containsKey("foo").  * </pre>  * @param <T> the bean type  * @param type the bean type  * @param scope the scope of the assertion  * @return bean assertions for the beans, or an assert on an empty {@code map} if the  * no beans are found  * @throws AssertionError if the application context did not start  */ public <T> MapAssert<String, T> getBeans(Class<T> type, Scope scope) {     Assert.notNull(scope, "Scope must not be null").     if (this.startupFailure != null) {         throwAssertionError(contextFailedToStartWhenExpecting("to get beans of type:%n <%s>", type)).     }     return Assertions.assertThat(scope.getBeansOfType(getApplicationContext(), type)).as("Beans of type <%s> from <%s>", type, getApplicationContext()). }
true;public;0;4;/**  * Obtain the failure that stopped the application context from running, the failure  * becoming the object under test.  * <p>  * Example: <pre class="code">  * assertThat(context).getFailure().containsMessage("missing bean").  * </pre>  * @return assertions on the cause of the failure  * @throws AssertionError if the application context started without a failure  */ ;/**  * Obtain the failure that stopped the application context from running, the failure  * becoming the object under test.  * <p>  * Example: <pre class="code">  * assertThat(context).getFailure().containsMessage("missing bean").  * </pre>  * @return assertions on the cause of the failure  * @throws AssertionError if the application context started without a failure  */ public AbstractThrowableAssert<?, ? extends Throwable> getFailure() {     hasFailed().     return assertThat(this.startupFailure). }
true;public;0;8;/**  * Verifies that the application has failed to start.  * <p>  * Example: <pre class="code"> assertThat(context).hasFailed().  * </pre>  * @return {@code this} assertion object.  * @throws AssertionError if the application context started without a failure  */ ;/**  * Verifies that the application has failed to start.  * <p>  * Example: <pre class="code"> assertThat(context).hasFailed().  * </pre>  * @return {@code this} assertion object.  * @throws AssertionError if the application context started without a failure  */ public ApplicationContextAssert<C> hasFailed() {     if (this.startupFailure == null) {         throwAssertionError(new BasicErrorMessageFactory("%nExpecting:%n <%s>%nto have failed%nbut context started successfully", getApplicationContext())).     }     return this. }
true;public;0;6;/**  * Verifies that the application has not failed to start.  * <p>  * Example: <pre class="code"> assertThat(context).hasNotFailed().  * </pre>  * @return {@code this} assertion object.  * @throws AssertionError if the application context failed to start  */ ;/**  * Verifies that the application has not failed to start.  * <p>  * Example: <pre class="code"> assertThat(context).hasNotFailed().  * </pre>  * @return {@code this} assertion object.  * @throws AssertionError if the application context failed to start  */ public ApplicationContextAssert<C> hasNotFailed() {     if (this.startupFailure != null) {         throwAssertionError(contextFailedToStartWhenExpecting("to have not failed")).     }     return this. }
false;protected,final;0;3;;protected final C getApplicationContext() {     return this.actual. }
false;protected,final;0;3;;protected final Throwable getStartupFailure() {     return this.startupFailure. }
false;private;2;5;;private ContextFailedToStart<C> contextFailedToStartWhenExpecting(String expectationFormat, Object... arguments) {     return new ContextFailedToStart<>(getApplicationContext(), this.startupFailure, expectationFormat, arguments). }
false;;2;5;;@Override String[] getBeanNamesForType(ApplicationContext applicationContext, Class<?> type) {     return applicationContext.getBeanNamesForType(type). }
false;;2;5;;@Override <T> Map<String, T> getBeansOfType(ApplicationContext applicationContext, Class<T> type) {     return applicationContext.getBeansOfType(type). }
false;;2;6;;@Override String[] getBeanNamesForType(ApplicationContext applicationContext, Class<?> type) {     return BeanFactoryUtils.beanNamesForTypeIncludingAncestors(applicationContext, type). }
false;;2;6;;@Override <T> Map<String, T> getBeansOfType(ApplicationContext applicationContext, Class<T> type) {     return BeanFactoryUtils.beansOfTypeIncludingAncestors(applicationContext, type). }
false;abstract;2;2;;abstract String[] getBeanNamesForType(ApplicationContext applicationContext, Class<?> type).
false;abstract;2;2;;abstract <T> Map<String, T> getBeansOfType(ApplicationContext applicationContext, Class<T> type).
false;private,static;3;9;;private static Object[] combineArguments(String context, Throwable ex, Object[] arguments) {     Object[] combinedArguments = new Object[arguments.length + 2].     combinedArguments[0] = unquotedString(context).     System.arraycopy(arguments, 0, combinedArguments, 1, arguments.length).     combinedArguments[combinedArguments.length - 1] = unquotedString(getIndentedStackTraceAsString(ex)).     return combinedArguments. }
false;private,static;1;4;;private static String getIndentedStackTraceAsString(Throwable ex) {     String stackTrace = getStackTraceAsString(ex).     return indent(stackTrace). }
false;private,static;1;6;;private static String getStackTraceAsString(Throwable ex) {     StringWriter writer = new StringWriter().     PrintWriter printer = new PrintWriter(writer).     ex.printStackTrace(printer).     return writer.toString(). }
false;private,static;1;10;;private static String indent(String input) {     BufferedReader reader = new BufferedReader(new StringReader(input)).     StringWriter writer = new StringWriter().     PrintWriter printer = new PrintWriter(writer).     reader.lines().forEach((line) -> {         printer.print(" ").         printer.println(line).     }).     return writer.toString(). }
