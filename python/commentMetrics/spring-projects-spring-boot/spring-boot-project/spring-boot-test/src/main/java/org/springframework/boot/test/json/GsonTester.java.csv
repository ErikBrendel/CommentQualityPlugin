commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected String writeObject(T value, ResolvableType type) throws IOException {     return this.gson.toJson(value, type.getType()). }
false;protected;2;4;;@Override protected T readObject(Reader reader, ResolvableType type) throws IOException {     return this.gson.fromJson(reader, type.getType()). }
true;public,static;2;3;/**  * Utility method to initialize {@link GsonTester} fields. See {@link GsonTester  * class-level documentation} for example usage.  * @param testInstance the test instance  * @param gson the Gson instance  */ ;/**  * Utility method to initialize {@link GsonTester} fields. See {@link GsonTester  * class-level documentation} for example usage.  * @param testInstance the test instance  * @param gson the Gson instance  */ public static void initFields(Object testInstance, Gson gson) {     new GsonFieldInitializer().initFields(testInstance, gson). }
true;public,static;2;3;/**  * Utility method to initialize {@link GsonTester} fields. See {@link GsonTester  * class-level documentation} for example usage.  * @param testInstance the test instance  * @param gson an object factory to create the Gson instance  */ ;/**  * Utility method to initialize {@link GsonTester} fields. See {@link GsonTester  * class-level documentation} for example usage.  * @param testInstance the test instance  * @param gson an object factory to create the Gson instance  */ public static void initFields(Object testInstance, ObjectFactory<Gson> gson) {     new GsonFieldInitializer().initFields(testInstance, gson). }
false;protected;3;5;;@Override protected AbstractJsonMarshalTester<Object> createTester(Class<?> resourceLoadClass, ResolvableType type, Gson marshaller) {     return new GsonTester<>(resourceLoadClass, type, marshaller). }
