commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Create {@link MockSettings settings} to be used with mocks where reset should occur  * before each test method runs.  * @return mock settings  */ ;/**  * Create {@link MockSettings settings} to be used with mocks where reset should occur  * before each test method runs.  * @return mock settings  */ public static MockSettings before() {     return withSettings(BEFORE). }
true;public,static;0;3;/**  * Create {@link MockSettings settings} to be used with mocks where reset should occur  * after each test method runs.  * @return mock settings  */ ;/**  * Create {@link MockSettings settings} to be used with mocks where reset should occur  * after each test method runs.  * @return mock settings  */ public static MockSettings after() {     return withSettings(AFTER). }
true;public,static;1;3;/**  * Create {@link MockSettings settings} to be used with mocks where a specific reset  * should occur.  * @param reset the reset type  * @return mock settings  */ ;/**  * Create {@link MockSettings settings} to be used with mocks where a specific reset  * should occur.  * @param reset the reset type  * @return mock settings  */ public static MockSettings withSettings(MockReset reset) {     return apply(reset, Mockito.withSettings()). }
true;public,static;2;7;/**  * Apply {@link MockReset} to existing {@link MockSettings settings}.  * @param reset the reset type  * @param settings the settings  * @return the configured settings  */ ;/**  * Apply {@link MockReset} to existing {@link MockSettings settings}.  * @param reset the reset type  * @param settings the settings  * @return the configured settings  */ public static MockSettings apply(MockReset reset, MockSettings settings) {     Assert.notNull(settings, "Settings must not be null").     if (reset != null && reset != NONE) {         settings.invocationListeners(new ResetInvocationListener(reset)).     }     return settings. }
true;static;1;14;/**  * Get the {@link MockReset} associated with the given mock.  * @param mock the source mock  * @return the reset type (never {@code null})  */ ;/**  * Get the {@link MockReset} associated with the given mock.  * @param mock the source mock  * @return the reset type (never {@code null})  */ static MockReset get(Object mock) {     MockReset reset = MockReset.NONE.     MockingDetails mockingDetails = Mockito.mockingDetails(mock).     if (mockingDetails.isMock()) {         MockCreationSettings<?> settings = mockingDetails.getMockCreationSettings().         List<InvocationListener> listeners = settings.getInvocationListeners().         for (Object listener : listeners) {             if (listener instanceof ResetInvocationListener) {                 reset = ((ResetInvocationListener) listener).getReset().             }         }     }     return reset. }
false;public;0;3;;public MockReset getReset() {     return this.reset. }
false;public;1;3;;@Override public void reportInvocation(MethodInvocationReport methodInvocationReport) { }
