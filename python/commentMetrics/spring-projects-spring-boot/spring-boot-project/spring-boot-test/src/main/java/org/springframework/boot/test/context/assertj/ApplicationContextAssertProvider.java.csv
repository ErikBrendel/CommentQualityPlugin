# id;timestamp;commentText;codeText;commentWords;codeWords
ApplicationContextAssertProvider -> @Deprecated 	@Override 	ApplicationContextAssert<C> assertThat()_;1507173536;Return an assert for AspectJ._@return an AspectJ assert_@deprecated use standard AssertJ {@code assertThat(context)...} calls instead.;@Deprecated_	@Override_	ApplicationContextAssert<C> assertThat()_;return,an,assert,for,aspect,j,return,an,aspect,j,assert,deprecated,use,standard,assert,j,code,assert,that,context,calls,instead;deprecated,override,application,context,assert,c,assert,that
ApplicationContextAssertProvider -> @Deprecated 	@Override 	ApplicationContextAssert<C> assertThat()_;1509547763;Return an assert for AspectJ._@return an AspectJ assert_@deprecated use standard AssertJ {@code assertThat(context)...} calls instead.;@Deprecated_	@Override_	ApplicationContextAssert<C> assertThat()_;return,an,assert,for,aspect,j,return,an,aspect,j,assert,deprecated,use,standard,assert,j,code,assert,that,context,calls,instead;deprecated,override,application,context,assert,c,assert,that
ApplicationContextAssertProvider -> @Deprecated 	@Override 	ApplicationContextAssert<C> assertThat()_;1532738143;Return an assert for AspectJ._@return an AspectJ assert_@deprecated use standard AssertJ {@code assertThat(context)...} calls instead.;@Deprecated_	@Override_	ApplicationContextAssert<C> assertThat()_;return,an,assert,for,aspect,j,return,an,aspect,j,assert,deprecated,use,standard,assert,j,code,assert,that,context,calls,instead;deprecated,override,application,context,assert,c,assert,that
ApplicationContextAssertProvider -> C getSourceApplicationContext()_;1507173536;Return the original source {@link ApplicationContext}._@return the source application context_@throws IllegalStateException if the source context failed to start;C getSourceApplicationContext()_;return,the,original,source,link,application,context,return,the,source,application,context,throws,illegal,state,exception,if,the,source,context,failed,to,start;c,get,source,application,context
ApplicationContextAssertProvider -> C getSourceApplicationContext()_;1509547763;Return the original source {@link ApplicationContext}._@return the source application context_@throws IllegalStateException if the source context failed to start;C getSourceApplicationContext()_;return,the,original,source,link,application,context,return,the,source,application,context,throws,illegal,state,exception,if,the,source,context,failed,to,start;c,get,source,application,context
ApplicationContextAssertProvider -> C getSourceApplicationContext()_;1532738143;Return the original source {@link ApplicationContext}._@return the source application context_@throws IllegalStateException if the source context failed to start;C getSourceApplicationContext()_;return,the,original,source,link,application,context,return,the,source,application,context,throws,illegal,state,exception,if,the,source,context,failed,to,start;c,get,source,application,context
ApplicationContextAssertProvider -> Throwable getStartupFailure()_;1507173536;Return the failure that caused application context to fail or {@code null} if the_context started without issue._@return the startup failure or {@code null};Throwable getStartupFailure()_;return,the,failure,that,caused,application,context,to,fail,or,code,null,if,the,context,started,without,issue,return,the,startup,failure,or,code,null;throwable,get,startup,failure
ApplicationContextAssertProvider -> Throwable getStartupFailure()_;1509547763;Return the failure that caused application context to fail or {@code null} if the_context started without issue._@return the startup failure or {@code null};Throwable getStartupFailure()_;return,the,failure,that,caused,application,context,to,fail,or,code,null,if,the,context,started,without,issue,return,the,startup,failure,or,code,null;throwable,get,startup,failure
ApplicationContextAssertProvider -> Throwable getStartupFailure()_;1532738143;Return the failure that caused application context to fail or {@code null} if the_context started without issue._@return the startup failure or {@code null};Throwable getStartupFailure()_;return,the,failure,that,caused,application,context,to,fail,or,code,null,if,the,context,started,without,issue,return,the,startup,failure,or,code,null;throwable,get,startup,failure
ApplicationContextAssertProvider -> <T extends C> T getSourceApplicationContext(Class<T> requiredType)_;1507173536;Return the original source {@link ApplicationContext}, casting it to the requested_type._@param <T> the context type_@param requiredType the required context type_@return the source application context_@throws IllegalStateException if the source context failed to start;<T extends C> T getSourceApplicationContext(Class<T> requiredType)_;return,the,original,source,link,application,context,casting,it,to,the,requested,type,param,t,the,context,type,param,required,type,the,required,context,type,return,the,source,application,context,throws,illegal,state,exception,if,the,source,context,failed,to,start;t,extends,c,t,get,source,application,context,class,t,required,type
ApplicationContextAssertProvider -> <T extends C> T getSourceApplicationContext(Class<T> requiredType)_;1509547763;Return the original source {@link ApplicationContext}, casting it to the requested_type._@param <T> the context type_@param requiredType the required context type_@return the source application context_@throws IllegalStateException if the source context failed to start;<T extends C> T getSourceApplicationContext(Class<T> requiredType)_;return,the,original,source,link,application,context,casting,it,to,the,requested,type,param,t,the,context,type,param,required,type,the,required,context,type,return,the,source,application,context,throws,illegal,state,exception,if,the,source,context,failed,to,start;t,extends,c,t,get,source,application,context,class,t,required,type
ApplicationContextAssertProvider -> <T extends C> T getSourceApplicationContext(Class<T> requiredType)_;1532738143;Return the original source {@link ApplicationContext}, casting it to the requested_type._@param <T> the context type_@param requiredType the required context type_@return the source application context_@throws IllegalStateException if the source context failed to start;<T extends C> T getSourceApplicationContext(Class<T> requiredType)_;return,the,original,source,link,application,context,casting,it,to,the,requested,type,param,t,the,context,type,param,required,type,the,required,context,type,return,the,source,application,context,throws,illegal,state,exception,if,the,source,context,failed,to,start;t,extends,c,t,get,source,application,context,class,t,required,type
ApplicationContextAssertProvider -> @SuppressWarnings("unchecked") 	static <T extends ApplicationContextAssertProvider<C>, C extends ApplicationContext> T get( 			Class<T> type, Class<? extends C> contextType, 			Supplier<? extends C> contextSupplier);1507173536;Factory method to create a new {@link ApplicationContextAssertProvider} instance._@param <T> the assert provider type_@param <C> the context type_@param type the type of {@link ApplicationContextAssertProvider} required (must be_an interface)_@param contextType the type of {@link ApplicationContext} being managed (must be an_interface)_@param contextSupplier a supplier that will either return a fully configured_{@link ApplicationContext} or throw an exception if the context fails to start._@return a {@link ApplicationContextAssertProvider} instance;@SuppressWarnings("unchecked")_	static <T extends ApplicationContextAssertProvider<C>, C extends ApplicationContext> T get(_			Class<T> type, Class<? extends C> contextType,_			Supplier<? extends C> contextSupplier) {_		Assert.notNull(type, "Type must not be null")__		Assert.isTrue(type.isInterface(), "Type must be an interface")__		Assert.notNull(contextType, "ContextType must not be null")__		Assert.isTrue(contextType.isInterface(), "ContextType must be an interface")__		Class<?>[] interfaces = { type, contextType }__		return (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),_				interfaces, new AssertProviderApplicationContextInvocationHandler(_						contextType, contextSupplier))__	};factory,method,to,create,a,new,link,application,context,assert,provider,instance,param,t,the,assert,provider,type,param,c,the,context,type,param,type,the,type,of,link,application,context,assert,provider,required,must,be,an,interface,param,context,type,the,type,of,link,application,context,being,managed,must,be,an,interface,param,context,supplier,a,supplier,that,will,either,return,a,fully,configured,link,application,context,or,throw,an,exception,if,the,context,fails,to,start,return,a,link,application,context,assert,provider,instance;suppress,warnings,unchecked,static,t,extends,application,context,assert,provider,c,c,extends,application,context,t,get,class,t,type,class,extends,c,context,type,supplier,extends,c,context,supplier,assert,not,null,type,type,must,not,be,null,assert,is,true,type,is,interface,type,must,be,an,interface,assert,not,null,context,type,context,type,must,not,be,null,assert,is,true,context,type,is,interface,context,type,must,be,an,interface,class,interfaces,type,context,type,return,t,proxy,new,proxy,instance,thread,current,thread,get,context,class,loader,interfaces,new,assert,provider,application,context,invocation,handler,context,type,context,supplier
ApplicationContextAssertProvider -> @SuppressWarnings("unchecked") 	static <T extends ApplicationContextAssertProvider<C>, C extends ApplicationContext> T get( 			Class<T> type, Class<? extends C> contextType, 			Supplier<? extends C> contextSupplier);1509547763;Factory method to create a new {@link ApplicationContextAssertProvider} instance._@param <T> the assert provider type_@param <C> the context type_@param type the type of {@link ApplicationContextAssertProvider} required (must be_an interface)_@param contextType the type of {@link ApplicationContext} being managed (must be an_interface)_@param contextSupplier a supplier that will either return a fully configured_{@link ApplicationContext} or throw an exception if the context fails to start._@return a {@link ApplicationContextAssertProvider} instance;@SuppressWarnings("unchecked")_	static <T extends ApplicationContextAssertProvider<C>, C extends ApplicationContext> T get(_			Class<T> type, Class<? extends C> contextType,_			Supplier<? extends C> contextSupplier) {_		Assert.notNull(type, "Type must not be null")__		Assert.isTrue(type.isInterface(), "Type must be an interface")__		Assert.notNull(contextType, "ContextType must not be null")__		Assert.isTrue(contextType.isInterface(), "ContextType must be an interface")__		Class<?>[] interfaces = { type, contextType }__		return (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),_				interfaces, new AssertProviderApplicationContextInvocationHandler(_						contextType, contextSupplier))__	};factory,method,to,create,a,new,link,application,context,assert,provider,instance,param,t,the,assert,provider,type,param,c,the,context,type,param,type,the,type,of,link,application,context,assert,provider,required,must,be,an,interface,param,context,type,the,type,of,link,application,context,being,managed,must,be,an,interface,param,context,supplier,a,supplier,that,will,either,return,a,fully,configured,link,application,context,or,throw,an,exception,if,the,context,fails,to,start,return,a,link,application,context,assert,provider,instance;suppress,warnings,unchecked,static,t,extends,application,context,assert,provider,c,c,extends,application,context,t,get,class,t,type,class,extends,c,context,type,supplier,extends,c,context,supplier,assert,not,null,type,type,must,not,be,null,assert,is,true,type,is,interface,type,must,be,an,interface,assert,not,null,context,type,context,type,must,not,be,null,assert,is,true,context,type,is,interface,context,type,must,be,an,interface,class,interfaces,type,context,type,return,t,proxy,new,proxy,instance,thread,current,thread,get,context,class,loader,interfaces,new,assert,provider,application,context,invocation,handler,context,type,context,supplier
ApplicationContextAssertProvider -> @SuppressWarnings("unchecked") 	static <T extends ApplicationContextAssertProvider<C>, C extends ApplicationContext> T get( 			Class<T> type, Class<? extends C> contextType, 			Supplier<? extends C> contextSupplier);1532738143;Factory method to create a new {@link ApplicationContextAssertProvider} instance._@param <T> the assert provider type_@param <C> the context type_@param type the type of {@link ApplicationContextAssertProvider} required (must be_an interface)_@param contextType the type of {@link ApplicationContext} being managed (must be an_interface)_@param contextSupplier a supplier that will either return a fully configured_{@link ApplicationContext} or throw an exception if the context fails to start._@return a {@link ApplicationContextAssertProvider} instance;@SuppressWarnings("unchecked")_	static <T extends ApplicationContextAssertProvider<C>, C extends ApplicationContext> T get(_			Class<T> type, Class<? extends C> contextType,_			Supplier<? extends C> contextSupplier) {_		Assert.notNull(type, "Type must not be null")__		Assert.isTrue(type.isInterface(), "Type must be an interface")__		Assert.notNull(contextType, "ContextType must not be null")__		Assert.isTrue(contextType.isInterface(), "ContextType must be an interface")__		Class<?>[] interfaces = { type, contextType }__		return (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),_				interfaces, new AssertProviderApplicationContextInvocationHandler(_						contextType, contextSupplier))__	};factory,method,to,create,a,new,link,application,context,assert,provider,instance,param,t,the,assert,provider,type,param,c,the,context,type,param,type,the,type,of,link,application,context,assert,provider,required,must,be,an,interface,param,context,type,the,type,of,link,application,context,being,managed,must,be,an,interface,param,context,supplier,a,supplier,that,will,either,return,a,fully,configured,link,application,context,or,throw,an,exception,if,the,context,fails,to,start,return,a,link,application,context,assert,provider,instance;suppress,warnings,unchecked,static,t,extends,application,context,assert,provider,c,c,extends,application,context,t,get,class,t,type,class,extends,c,context,type,supplier,extends,c,context,supplier,assert,not,null,type,type,must,not,be,null,assert,is,true,type,is,interface,type,must,be,an,interface,assert,not,null,context,type,context,type,must,not,be,null,assert,is,true,context,type,is,interface,context,type,must,be,an,interface,class,interfaces,type,context,type,return,t,proxy,new,proxy,instance,thread,current,thread,get,context,class,loader,interfaces,new,assert,provider,application,context,invocation,handler,context,type,context,supplier
