commented;modifiers;parameterAmount;loc;comment;code
true;;0;3;/**  * Return an assert for AspectJ.  * @return an AspectJ assert  * @deprecated use standard AssertJ {@code assertThat(context)...} calls instead.  */ ;/**  * Return an assert for AspectJ.  * @return an AspectJ assert  * @deprecated use standard AssertJ {@code assertThat(context)...} calls instead.  */ @Deprecated @Override ApplicationContextAssert<C> assertThat().
true;;0;1;/**  * Return the original source {@link ApplicationContext}.  * @return the source application context  * @throws IllegalStateException if the source context failed to start  */ ;/**  * Return the original source {@link ApplicationContext}.  * @return the source application context  * @throws IllegalStateException if the source context failed to start  */ C getSourceApplicationContext().
true;;1;1;/**  * Return the original source {@link ApplicationContext}, casting it to the requested  * type.  * @param <T> the context type  * @param requiredType the required context type  * @return the source application context  * @throws IllegalStateException if the source context failed to start  */ ;/**  * Return the original source {@link ApplicationContext}, casting it to the requested  * type.  * @param <T> the context type  * @param requiredType the required context type  * @return the source application context  * @throws IllegalStateException if the source context failed to start  */ <T extends C> T getSourceApplicationContext(Class<T> requiredType).
true;;0;1;/**  * Return the failure that caused application context to fail or {@code null} if the  * context started without issue.  * @return the startup failure or {@code null}  */ ;/**  * Return the failure that caused application context to fail or {@code null} if the  * context started without issue.  * @return the startup failure or {@code null}  */ Throwable getStartupFailure().
false;;0;2;;@Override void close().
true;static;3;13;/**  * Factory method to create a new {@link ApplicationContextAssertProvider} instance.  * @param <T> the assert provider type  * @param <C> the context type  * @param type the type of {@link ApplicationContextAssertProvider} required (must be  * an interface)  * @param contextType the type of {@link ApplicationContext} being managed (must be an  * interface)  * @param contextSupplier a supplier that will either return a fully configured  * {@link ApplicationContext} or throw an exception if the context fails to start.  * @return a {@link ApplicationContextAssertProvider} instance  */ ;/**  * Factory method to create a new {@link ApplicationContextAssertProvider} instance.  * @param <T> the assert provider type  * @param <C> the context type  * @param type the type of {@link ApplicationContextAssertProvider} required (must be  * an interface)  * @param contextType the type of {@link ApplicationContext} being managed (must be an  * interface)  * @param contextSupplier a supplier that will either return a fully configured  * {@link ApplicationContext} or throw an exception if the context fails to start.  * @return a {@link ApplicationContextAssertProvider} instance  */ @SuppressWarnings("unchecked") static <T extends ApplicationContextAssertProvider<C>, C extends ApplicationContext> T get(Class<T> type, Class<? extends C> contextType, Supplier<? extends C> contextSupplier) {     Assert.notNull(type, "Type must not be null").     Assert.isTrue(type.isInterface(), "Type must be an interface").     Assert.notNull(contextType, "ContextType must not be null").     Assert.isTrue(contextType.isInterface(), "ContextType must be an interface").     Class<?>[] interfaces = { type, contextType }.     return (T) Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), interfaces, new AssertProviderApplicationContextInvocationHandler(contextType, contextSupplier)). }
