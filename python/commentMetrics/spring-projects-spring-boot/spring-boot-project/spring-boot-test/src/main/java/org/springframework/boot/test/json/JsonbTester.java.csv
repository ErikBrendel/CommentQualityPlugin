commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;4;;@Override protected String writeObject(T value, ResolvableType type) throws IOException {     return this.jsonb.toJson(value, type.getType()). }
false;protected;2;4;;@Override protected T readObject(Reader reader, ResolvableType type) throws IOException {     return this.jsonb.fromJson(reader, type.getType()). }
true;public,static;2;3;/**  * Utility method to initialize {@link JsonbTester} fields. See {@link JsonbTester  * class-level documentation} for example usage.  * @param testInstance the test instance  * @param jsonb the Jsonb instance  */ ;/**  * Utility method to initialize {@link JsonbTester} fields. See {@link JsonbTester  * class-level documentation} for example usage.  * @param testInstance the test instance  * @param jsonb the Jsonb instance  */ public static void initFields(Object testInstance, Jsonb jsonb) {     new JsonbFieldInitializer().initFields(testInstance, jsonb). }
true;public,static;2;3;/**  * Utility method to initialize {@link JsonbTester} fields. See {@link JsonbTester  * class-level documentation} for example usage.  * @param testInstance the test instance  * @param jsonb an object factory to create the Jsonb instance  */ ;/**  * Utility method to initialize {@link JsonbTester} fields. See {@link JsonbTester  * class-level documentation} for example usage.  * @param testInstance the test instance  * @param jsonb an object factory to create the Jsonb instance  */ public static void initFields(Object testInstance, ObjectFactory<Jsonb> jsonb) {     new JsonbTester.JsonbFieldInitializer().initFields(testInstance, jsonb). }
false;protected;3;5;;@Override protected AbstractJsonMarshalTester<Object> createTester(Class<?> resourceLoadClass, ResolvableType type, Jsonb marshaller) {     return new JsonbTester<>(resourceLoadClass, type, marshaller). }
