commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set if root URIs from {@link RootUriRequestExpectationManager} should be detected  * and applied to the {@link MockRestServiceServer}.  * @param detectRootUri if root URIs should be detected  */ ;/**  * Set if root URIs from {@link RootUriRequestExpectationManager} should be detected  * and applied to the {@link MockRestServiceServer}.  * @param detectRootUri if root URIs should be detected  */ public void setDetectRootUri(boolean detectRootUri) {     this.detectRootUri = detectRootUri. }
false;public;1;12;;@Override public void customize(RestTemplate restTemplate) {     RequestExpectationManager expectationManager = createExpectationManager().     if (this.detectRootUri) {         expectationManager = RootUriRequestExpectationManager.forRestTemplate(restTemplate, expectationManager).     }     MockRestServiceServer server = MockRestServiceServer.bindTo(restTemplate).build(expectationManager).     this.expectationManagers.put(restTemplate, expectationManager).     this.servers.put(restTemplate, server). }
false;protected;0;3;;protected RequestExpectationManager createExpectationManager() {     return BeanUtils.instantiateClass(this.expectationManager). }
false;public;0;11;;public MockRestServiceServer getServer() {     Assert.state(!this.servers.isEmpty(), "Unable to return a single MockRestServiceServer since " + "MockServerRestTemplateCustomizer has not been bound to " + "a RestTemplate").     Assert.state(this.servers.size() == 1, "Unable to return a single MockRestServiceServer since " + "MockServerRestTemplateCustomizer has been bound to " + "more than one RestTemplate").     return this.servers.values().iterator().next(). }
false;public;0;3;;public Map<RestTemplate, RequestExpectationManager> getExpectationManagers() {     return this.expectationManagers. }
false;public;1;3;;public MockRestServiceServer getServer(RestTemplate restTemplate) {     return this.servers.get(restTemplate). }
false;public;0;3;;public Map<RestTemplate, MockRestServiceServer> getServers() {     return Collections.unmodifiableMap(this.servers). }
