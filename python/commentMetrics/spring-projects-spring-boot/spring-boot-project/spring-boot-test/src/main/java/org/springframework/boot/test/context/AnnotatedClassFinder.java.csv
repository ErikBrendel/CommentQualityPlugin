# id;timestamp;commentText;codeText;commentWords;codeWords
AnnotatedClassFinder -> public AnnotatedClassFinder(Class<? extends Annotation> annotationType);1532618598;Create a new instance with the {@code annotationType} to find._@param annotationType the annotation to find;public AnnotatedClassFinder(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "AnnotationType must not be null")__		this.scanner = new ClassPathScanningCandidateComponentProvider(false)__		this.scanner.addIncludeFilter(new AnnotationTypeFilter(annotationType))__		this.scanner.setResourcePattern("*.class")__	};create,a,new,instance,with,the,code,annotation,type,to,find,param,annotation,type,the,annotation,to,find;public,annotated,class,finder,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,scanner,new,class,path,scanning,candidate,component,provider,false,this,scanner,add,include,filter,new,annotation,type,filter,annotation,type,this,scanner,set,resource,pattern,class
AnnotatedClassFinder -> public AnnotatedClassFinder(Class<? extends Annotation> annotationType);1532738143;Create a new instance with the {@code annotationType} to find._@param annotationType the annotation to find;public AnnotatedClassFinder(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "AnnotationType must not be null")__		this.scanner = new ClassPathScanningCandidateComponentProvider(false)__		this.scanner.addIncludeFilter(new AnnotationTypeFilter(annotationType))__		this.scanner.setResourcePattern("*.class")__	};create,a,new,instance,with,the,code,annotation,type,to,find,param,annotation,type,the,annotation,to,find;public,annotated,class,finder,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,scanner,new,class,path,scanning,candidate,component,provider,false,this,scanner,add,include,filter,new,annotation,type,filter,annotation,type,this,scanner,set,resource,pattern,class
AnnotatedClassFinder -> public AnnotatedClassFinder(Class<? extends Annotation> annotationType);1533280014;Create a new instance with the {@code annotationType} to find._@param annotationType the annotation to find;public AnnotatedClassFinder(Class<? extends Annotation> annotationType) {_		Assert.notNull(annotationType, "AnnotationType must not be null")__		this.annotationType = annotationType__		this.scanner = new ClassPathScanningCandidateComponentProvider(false)__		this.scanner.addIncludeFilter(new AnnotationTypeFilter(annotationType))__		this.scanner.setResourcePattern("*.class")__	};create,a,new,instance,with,the,code,annotation,type,to,find,param,annotation,type,the,annotation,to,find;public,annotated,class,finder,class,extends,annotation,annotation,type,assert,not,null,annotation,type,annotation,type,must,not,be,null,this,annotation,type,annotation,type,this,scanner,new,class,path,scanning,candidate,component,provider,false,this,scanner,add,include,filter,new,annotation,type,filter,annotation,type,this,scanner,set,resource,pattern,class
AnnotatedClassFinder -> public Class<?> findFromPackage(String source);1532618598;Find the first {@link Class} that is annotated with the target annotation, starting_from the package defined by the given {@code source} up to the root._@param source the source package to use to initiate the search_@return the first {@link Class} annotated with the target annotation within the_hierarchy defined by the given {@code source} or {@code null} if none is found.;public Class<?> findFromPackage(String source) {_		Assert.notNull(source, "Source must not be null")__		Class<?> configuration = cache.get(source)__		if (configuration == null) {_			configuration = scanPackage(source)__			cache.put(source, configuration)__		}_		return configuration__	};find,the,first,link,class,that,is,annotated,with,the,target,annotation,starting,from,the,package,defined,by,the,given,code,source,up,to,the,root,param,source,the,source,package,to,use,to,initiate,the,search,return,the,first,link,class,annotated,with,the,target,annotation,within,the,hierarchy,defined,by,the,given,code,source,or,code,null,if,none,is,found;public,class,find,from,package,string,source,assert,not,null,source,source,must,not,be,null,class,configuration,cache,get,source,if,configuration,null,configuration,scan,package,source,cache,put,source,configuration,return,configuration
AnnotatedClassFinder -> public Class<?> findFromPackage(String source);1532738143;Find the first {@link Class} that is annotated with the target annotation, starting_from the package defined by the given {@code source} up to the root._@param source the source package to use to initiate the search_@return the first {@link Class} annotated with the target annotation within the_hierarchy defined by the given {@code source} or {@code null} if none is found.;public Class<?> findFromPackage(String source) {_		Assert.notNull(source, "Source must not be null")__		Class<?> configuration = cache.get(source)__		if (configuration == null) {_			configuration = scanPackage(source)__			cache.put(source, configuration)__		}_		return configuration__	};find,the,first,link,class,that,is,annotated,with,the,target,annotation,starting,from,the,package,defined,by,the,given,code,source,up,to,the,root,param,source,the,source,package,to,use,to,initiate,the,search,return,the,first,link,class,annotated,with,the,target,annotation,within,the,hierarchy,defined,by,the,given,code,source,or,code,null,if,none,is,found;public,class,find,from,package,string,source,assert,not,null,source,source,must,not,be,null,class,configuration,cache,get,source,if,configuration,null,configuration,scan,package,source,cache,put,source,configuration,return,configuration
AnnotatedClassFinder -> public Class<?> findFromPackage(String source);1533280014;Find the first {@link Class} that is annotated with the target annotation, starting_from the package defined by the given {@code source} up to the root._@param source the source package to use to initiate the search_@return the first {@link Class} annotated with the target annotation within the_hierarchy defined by the given {@code source} or {@code null} if none is found.;public Class<?> findFromPackage(String source) {_		Assert.notNull(source, "Source must not be null")__		Class<?> configuration = cache.get(source)__		if (configuration == null) {_			configuration = scanPackage(source)__			cache.put(source, configuration)__		}_		return configuration__	};find,the,first,link,class,that,is,annotated,with,the,target,annotation,starting,from,the,package,defined,by,the,given,code,source,up,to,the,root,param,source,the,source,package,to,use,to,initiate,the,search,return,the,first,link,class,annotated,with,the,target,annotation,within,the,hierarchy,defined,by,the,given,code,source,or,code,null,if,none,is,found;public,class,find,from,package,string,source,assert,not,null,source,source,must,not,be,null,class,configuration,cache,get,source,if,configuration,null,configuration,scan,package,source,cache,put,source,configuration,return,configuration
AnnotatedClassFinder -> public Class<?> findFromClass(Class<?> source);1532618598;Find the first {@link Class} that is annotated with the target annotation, starting_from the package defined by the given {@code source} up to the root._@param source the source class to use to initiate the search_@return the first {@link Class} annotated with the target annotation within the_hierarchy defined by the given {@code source} or {@code null} if none is found.;public Class<?> findFromClass(Class<?> source) {_		Assert.notNull(source, "Source must not be null")__		return findFromPackage(ClassUtils.getPackageName(source))__	};find,the,first,link,class,that,is,annotated,with,the,target,annotation,starting,from,the,package,defined,by,the,given,code,source,up,to,the,root,param,source,the,source,class,to,use,to,initiate,the,search,return,the,first,link,class,annotated,with,the,target,annotation,within,the,hierarchy,defined,by,the,given,code,source,or,code,null,if,none,is,found;public,class,find,from,class,class,source,assert,not,null,source,source,must,not,be,null,return,find,from,package,class,utils,get,package,name,source
AnnotatedClassFinder -> public Class<?> findFromClass(Class<?> source);1532738143;Find the first {@link Class} that is annotated with the target annotation, starting_from the package defined by the given {@code source} up to the root._@param source the source class to use to initiate the search_@return the first {@link Class} annotated with the target annotation within the_hierarchy defined by the given {@code source} or {@code null} if none is found.;public Class<?> findFromClass(Class<?> source) {_		Assert.notNull(source, "Source must not be null")__		return findFromPackage(ClassUtils.getPackageName(source))__	};find,the,first,link,class,that,is,annotated,with,the,target,annotation,starting,from,the,package,defined,by,the,given,code,source,up,to,the,root,param,source,the,source,class,to,use,to,initiate,the,search,return,the,first,link,class,annotated,with,the,target,annotation,within,the,hierarchy,defined,by,the,given,code,source,or,code,null,if,none,is,found;public,class,find,from,class,class,source,assert,not,null,source,source,must,not,be,null,return,find,from,package,class,utils,get,package,name,source
AnnotatedClassFinder -> public Class<?> findFromClass(Class<?> source);1533280014;Find the first {@link Class} that is annotated with the target annotation, starting_from the package defined by the given {@code source} up to the root._@param source the source class to use to initiate the search_@return the first {@link Class} annotated with the target annotation within the_hierarchy defined by the given {@code source} or {@code null} if none is found.;public Class<?> findFromClass(Class<?> source) {_		Assert.notNull(source, "Source must not be null")__		return findFromPackage(ClassUtils.getPackageName(source))__	};find,the,first,link,class,that,is,annotated,with,the,target,annotation,starting,from,the,package,defined,by,the,given,code,source,up,to,the,root,param,source,the,source,class,to,use,to,initiate,the,search,return,the,first,link,class,annotated,with,the,target,annotation,within,the,hierarchy,defined,by,the,given,code,source,or,code,null,if,none,is,found;public,class,find,from,class,class,source,assert,not,null,source,source,must,not,be,null,return,find,from,package,class,utils,get,package,name,source
