commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Find the first {@link Class} that is annotated with the target annotation, starting  * from the package defined by the given {@code source} up to the root.  * @param source the source class to use to initiate the search  * @return the first {@link Class} annotated with the target annotation within the  * hierarchy defined by the given {@code source} or {@code null} if none is found.  */ ;/**  * Find the first {@link Class} that is annotated with the target annotation, starting  * from the package defined by the given {@code source} up to the root.  * @param source the source class to use to initiate the search  * @return the first {@link Class} annotated with the target annotation within the  * hierarchy defined by the given {@code source} or {@code null} if none is found.  */ public Class<?> findFromClass(Class<?> source) {     Assert.notNull(source, "Source must not be null").     return findFromPackage(ClassUtils.getPackageName(source)). }
true;public;1;9;/**  * Find the first {@link Class} that is annotated with the target annotation, starting  * from the package defined by the given {@code source} up to the root.  * @param source the source package to use to initiate the search  * @return the first {@link Class} annotated with the target annotation within the  * hierarchy defined by the given {@code source} or {@code null} if none is found.  */ ;/**  * Find the first {@link Class} that is annotated with the target annotation, starting  * from the package defined by the given {@code source} up to the root.  * @param source the source package to use to initiate the search  * @return the first {@link Class} annotated with the target annotation within the  * hierarchy defined by the given {@code source} or {@code null} if none is found.  */ public Class<?> findFromPackage(String source) {     Assert.notNull(source, "Source must not be null").     Class<?> configuration = cache.get(source).     if (configuration == null) {         configuration = scanPackage(source).         cache.put(source, configuration).     }     return configuration. }
false;private;1;14;;private Class<?> scanPackage(String source) {     while (!source.isEmpty()) {         Set<BeanDefinition> components = this.scanner.findCandidateComponents(source).         if (!components.isEmpty()) {             Assert.state(components.size() == 1, () -> "Found multiple @" + this.annotationType.getSimpleName() + " annotated classes " + components).             return ClassUtils.resolveClassName(components.iterator().next().getBeanClassName(), null).         }         source = getParentPackage(source).     }     return null. }
false;private;1;4;;private String getParentPackage(String sourcePackage) {     int lastDot = sourcePackage.lastIndexOf('.').     return (lastDot != -1) ? sourcePackage.substring(0, lastDot) : "". }
false;protected;1;4;;@Override protected boolean removeEldestEntry(Map.Entry<String, Class<?>> eldest) {     return size() > this.maxSize. }
