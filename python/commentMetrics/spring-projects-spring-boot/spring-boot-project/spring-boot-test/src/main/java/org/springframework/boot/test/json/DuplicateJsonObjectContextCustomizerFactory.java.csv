commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public ContextCustomizer createContextCustomizer(Class<?> testClass, List<ContextConfigurationAttributes> configAttributes) {     return new DuplicateJsonObjectContextCustomizer(). }
false;public;2;8;;@Override public void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {     List<URL> jsonObjects = findJsonObjects().     if (jsonObjects.size() > 1) {         logDuplicateJsonObjectsWarning(jsonObjects).     } }
false;private;0;14;;private List<URL> findJsonObjects() {     List<URL> jsonObjects = new ArrayList<>().     try {         Enumeration<URL> resources = getClass().getClassLoader().getResources("org/json/JSONObject.class").         while (resources.hasMoreElements()) {             jsonObjects.add(resources.nextElement()).         }     } catch (Exception ex) {     // Continue     }     return jsonObjects. }
false;private;1;11;;private void logDuplicateJsonObjectsWarning(List<URL> jsonObjects) {     StringBuilder message = new StringBuilder(String.format("%n%nFound multiple occurrences of" + " org.json.JSONObject on the class path:%n%n")).     for (URL jsonObject : jsonObjects) {         message.append(String.format("\t%s%n", jsonObject)).     }     message.append(String.format("%nYou may wish to exclude one of them to ensure" + " predictable runtime behavior%n")).     this.logger.warn(message). }
false;public;1;7;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     return true. }
false;public;0;4;;@Override public int hashCode() {     return getClass().hashCode(). }
