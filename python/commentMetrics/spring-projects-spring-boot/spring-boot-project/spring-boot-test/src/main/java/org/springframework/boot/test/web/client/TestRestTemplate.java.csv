# id;timestamp;commentText;codeText;commentWords;codeWords
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(URI url, Object request, 			Class<T> responseType) throws RestClientException;1507173536;Create a new resource by POSTing the given object to the URL, and returns the_response as {@link ResponseEntity}._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.net.URI, java.lang.Object, java.lang.Class);public <T> ResponseEntity<T> postForEntity(URI url, Object request,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.postForEntity(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,response,as,link,response,entity,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,net,uri,java,lang,object,java,lang,class;public,t,response,entity,t,post,for,entity,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,entity,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(URI url, Object request, 			Class<T> responseType) throws RestClientException;1510488910;Create a new resource by POSTing the given object to the URL, and returns the_response as {@link ResponseEntity}._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.net.URI, java.lang.Object, java.lang.Class);public <T> ResponseEntity<T> postForEntity(URI url, Object request,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.postForEntity(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,response,as,link,response,entity,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,net,uri,java,lang,object,java,lang,class;public,t,response,entity,t,post,for,entity,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,entity,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(URI url, Object request, 			Class<T> responseType) throws RestClientException;1516867699;Create a new resource by POSTing the given object to the URL, and returns the_response as {@link ResponseEntity}._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.net.URI, java.lang.Object, java.lang.Class);public <T> ResponseEntity<T> postForEntity(URI url, Object request,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.postForEntity(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,response,as,link,response,entity,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,net,uri,java,lang,object,java,lang,class;public,t,response,entity,t,post,for,entity,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,entity,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(URI url, Object request, 			Class<T> responseType) throws RestClientException;1518087233;Create a new resource by POSTing the given object to the URL, and returns the_response as {@link ResponseEntity}._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.net.URI, java.lang.Object, java.lang.Class);public <T> ResponseEntity<T> postForEntity(URI url, Object request,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.postForEntity(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,response,as,link,response,entity,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,net,uri,java,lang,object,java,lang,class;public,t,response,entity,t,post,for,entity,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,entity,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(URI url, Object request, 			Class<T> responseType) throws RestClientException;1518451035;Create a new resource by POSTing the given object to the URL, and returns the_response as {@link ResponseEntity}._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.net.URI, java.lang.Object, java.lang.Class);public <T> ResponseEntity<T> postForEntity(URI url, Object request,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.postForEntity(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,response,as,link,response,entity,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,net,uri,java,lang,object,java,lang,class;public,t,response,entity,t,post,for,entity,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,entity,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(URI url, Object request, 			Class<T> responseType) throws RestClientException;1518458586;Create a new resource by POSTing the given object to the URL, and returns the_response as {@link ResponseEntity}._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.net.URI, java.lang.Object, java.lang.Class);public <T> ResponseEntity<T> postForEntity(URI url, Object request,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.postForEntity(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,response,as,link,response,entity,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,net,uri,java,lang,object,java,lang,class;public,t,response,entity,t,post,for,entity,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,entity,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(URI url, Object request, 			Class<T> responseType) throws RestClientException;1518780587;Create a new resource by POSTing the given object to the URL, and returns the_response as {@link ResponseEntity}._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.net.URI, java.lang.Object, java.lang.Class);public <T> ResponseEntity<T> postForEntity(URI url, Object request,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.postForEntity(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,response,as,link,response,entity,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,net,uri,java,lang,object,java,lang,class;public,t,response,entity,t,post,for,entity,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,entity,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(URI url, Object request, 			Class<T> responseType) throws RestClientException;1518816980;Create a new resource by POSTing the given object to the URL, and returns the_response as {@link ResponseEntity}._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.net.URI, java.lang.Object, java.lang.Class);public <T> ResponseEntity<T> postForEntity(URI url, Object request,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.postForEntity(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,response,as,link,response,entity,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,net,uri,java,lang,object,java,lang,class;public,t,response,entity,t,post,for,entity,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,entity,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(URI url, Object request, 			Class<T> responseType) throws RestClientException;1518833514;Create a new resource by POSTing the given object to the URL, and returns the_response as {@link ResponseEntity}._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.net.URI, java.lang.Object, java.lang.Class);public <T> ResponseEntity<T> postForEntity(URI url, Object request,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.postForEntity(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,response,as,link,response,entity,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,net,uri,java,lang,object,java,lang,class;public,t,response,entity,t,post,for,entity,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,entity,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(URI url, Object request, 			Class<T> responseType) throws RestClientException;1521068433;Create a new resource by POSTing the given object to the URL, and returns the_response as {@link ResponseEntity}._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.net.URI, java.lang.Object, java.lang.Class);public <T> ResponseEntity<T> postForEntity(URI url, Object request,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.postForEntity(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,response,as,link,response,entity,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,net,uri,java,lang,object,java,lang,class;public,t,response,entity,t,post,for,entity,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,entity,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(URI url, Object request, 			Class<T> responseType) throws RestClientException;1525416882;Create a new resource by POSTing the given object to the URL, and returns the_response as {@link ResponseEntity}._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.net.URI, java.lang.Object, java.lang.Class);public <T> ResponseEntity<T> postForEntity(URI url, Object request,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.postForEntity(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,response,as,link,response,entity,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,net,uri,java,lang,object,java,lang,class;public,t,response,entity,t,post,for,entity,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,entity,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(URI url, Object request, 			Class<T> responseType) throws RestClientException;1532738143;Create a new resource by POSTing the given object to the URL, and returns the_response as {@link ResponseEntity}._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.net.URI, java.lang.Object, java.lang.Class);public <T> ResponseEntity<T> postForEntity(URI url, Object request,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.postForEntity(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,response,as,link,response,entity,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,net,uri,java,lang,object,java,lang,class;public,t,response,entity,t,post,for,entity,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,entity,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(URI url, Object request, 			Class<T> responseType) throws RestClientException;1539678128;Create a new resource by POSTing the given object to the URL, and returns the_response as {@link ResponseEntity}._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.net.URI, java.lang.Object, java.lang.Class);public <T> ResponseEntity<T> postForEntity(URI url, Object request,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.postForEntity(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,response,as,link,response,entity,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,net,uri,java,lang,object,java,lang,class;public,t,response,entity,t,post,for,entity,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,entity,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public HttpHeaders headForHeaders(URI url) throws RestClientException;1507173536;Retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.net.URI);public HttpHeaders headForHeaders(URI url) throws RestClientException {_		return this.restTemplate.headForHeaders(applyRootUriIfNecessary(url))__	};retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,net,uri;public,http,headers,head,for,headers,uri,url,throws,rest,client,exception,return,this,rest,template,head,for,headers,apply,root,uri,if,necessary,url
TestRestTemplate -> public HttpHeaders headForHeaders(URI url) throws RestClientException;1510488910;Retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.net.URI);public HttpHeaders headForHeaders(URI url) throws RestClientException {_		return this.restTemplate.headForHeaders(applyRootUriIfNecessary(url))__	};retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,net,uri;public,http,headers,head,for,headers,uri,url,throws,rest,client,exception,return,this,rest,template,head,for,headers,apply,root,uri,if,necessary,url
TestRestTemplate -> public HttpHeaders headForHeaders(URI url) throws RestClientException;1516867699;Retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.net.URI);public HttpHeaders headForHeaders(URI url) throws RestClientException {_		return this.restTemplate.headForHeaders(applyRootUriIfNecessary(url))__	};retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,net,uri;public,http,headers,head,for,headers,uri,url,throws,rest,client,exception,return,this,rest,template,head,for,headers,apply,root,uri,if,necessary,url
TestRestTemplate -> public HttpHeaders headForHeaders(URI url) throws RestClientException;1518087233;Retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.net.URI);public HttpHeaders headForHeaders(URI url) throws RestClientException {_		return this.restTemplate.headForHeaders(applyRootUriIfNecessary(url))__	};retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,net,uri;public,http,headers,head,for,headers,uri,url,throws,rest,client,exception,return,this,rest,template,head,for,headers,apply,root,uri,if,necessary,url
TestRestTemplate -> public HttpHeaders headForHeaders(URI url) throws RestClientException;1518451035;Retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.net.URI);public HttpHeaders headForHeaders(URI url) throws RestClientException {_		return this.restTemplate.headForHeaders(applyRootUriIfNecessary(url))__	};retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,net,uri;public,http,headers,head,for,headers,uri,url,throws,rest,client,exception,return,this,rest,template,head,for,headers,apply,root,uri,if,necessary,url
TestRestTemplate -> public HttpHeaders headForHeaders(URI url) throws RestClientException;1518458586;Retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.net.URI);public HttpHeaders headForHeaders(URI url) throws RestClientException {_		return this.restTemplate.headForHeaders(applyRootUriIfNecessary(url))__	};retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,net,uri;public,http,headers,head,for,headers,uri,url,throws,rest,client,exception,return,this,rest,template,head,for,headers,apply,root,uri,if,necessary,url
TestRestTemplate -> public HttpHeaders headForHeaders(URI url) throws RestClientException;1518780587;Retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.net.URI);public HttpHeaders headForHeaders(URI url) throws RestClientException {_		return this.restTemplate.headForHeaders(applyRootUriIfNecessary(url))__	};retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,net,uri;public,http,headers,head,for,headers,uri,url,throws,rest,client,exception,return,this,rest,template,head,for,headers,apply,root,uri,if,necessary,url
TestRestTemplate -> public HttpHeaders headForHeaders(URI url) throws RestClientException;1518816980;Retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.net.URI);public HttpHeaders headForHeaders(URI url) throws RestClientException {_		return this.restTemplate.headForHeaders(applyRootUriIfNecessary(url))__	};retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,net,uri;public,http,headers,head,for,headers,uri,url,throws,rest,client,exception,return,this,rest,template,head,for,headers,apply,root,uri,if,necessary,url
TestRestTemplate -> public HttpHeaders headForHeaders(URI url) throws RestClientException;1518833514;Retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.net.URI);public HttpHeaders headForHeaders(URI url) throws RestClientException {_		return this.restTemplate.headForHeaders(applyRootUriIfNecessary(url))__	};retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,net,uri;public,http,headers,head,for,headers,uri,url,throws,rest,client,exception,return,this,rest,template,head,for,headers,apply,root,uri,if,necessary,url
TestRestTemplate -> public HttpHeaders headForHeaders(URI url) throws RestClientException;1521068433;Retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.net.URI);public HttpHeaders headForHeaders(URI url) throws RestClientException {_		return this.restTemplate.headForHeaders(applyRootUriIfNecessary(url))__	};retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,net,uri;public,http,headers,head,for,headers,uri,url,throws,rest,client,exception,return,this,rest,template,head,for,headers,apply,root,uri,if,necessary,url
TestRestTemplate -> public HttpHeaders headForHeaders(URI url) throws RestClientException;1525416882;Retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.net.URI);public HttpHeaders headForHeaders(URI url) throws RestClientException {_		return this.restTemplate.headForHeaders(applyRootUriIfNecessary(url))__	};retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,net,uri;public,http,headers,head,for,headers,uri,url,throws,rest,client,exception,return,this,rest,template,head,for,headers,apply,root,uri,if,necessary,url
TestRestTemplate -> public HttpHeaders headForHeaders(URI url) throws RestClientException;1532738143;Retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.net.URI);public HttpHeaders headForHeaders(URI url) throws RestClientException {_		return this.restTemplate.headForHeaders(applyRootUriIfNecessary(url))__	};retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,net,uri;public,http,headers,head,for,headers,uri,url,throws,rest,client,exception,return,this,rest,template,head,for,headers,apply,root,uri,if,necessary,url
TestRestTemplate -> public HttpHeaders headForHeaders(URI url) throws RestClientException;1539678128;Retrieve all headers of the resource specified by the URL._@param url the URL_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.net.URI);public HttpHeaders headForHeaders(URI url) throws RestClientException {_		return this.restTemplate.headForHeaders(applyRootUriIfNecessary(url))__	};retrieve,all,headers,of,the,resource,specified,by,the,url,param,url,the,url,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,net,uri;public,http,headers,head,for,headers,uri,url,throws,rest,client,exception,return,this,rest,template,head,for,headers,apply,root,uri,if,necessary,url
TestRestTemplate -> public URI postForLocation(String url, Object request, Object... urlVariables) 			throws RestClientException;1507173536;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.lang.Object[]);public URI postForLocation(String url, Object request, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,lang,object;public,uri,post,for,location,string,url,object,request,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Object... urlVariables) 			throws RestClientException;1510488910;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.lang.Object[]);public URI postForLocation(String url, Object request, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,lang,object;public,uri,post,for,location,string,url,object,request,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Object... urlVariables) 			throws RestClientException;1516867699;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.lang.Object[]);public URI postForLocation(String url, Object request, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,lang,object;public,uri,post,for,location,string,url,object,request,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Object... urlVariables) 			throws RestClientException;1518087233;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.lang.Object[]);public URI postForLocation(String url, Object request, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,lang,object;public,uri,post,for,location,string,url,object,request,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Object... urlVariables) 			throws RestClientException;1518451035;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.lang.Object[]);public URI postForLocation(String url, Object request, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,lang,object;public,uri,post,for,location,string,url,object,request,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Object... urlVariables) 			throws RestClientException;1518458586;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.lang.Object[]);public URI postForLocation(String url, Object request, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,lang,object;public,uri,post,for,location,string,url,object,request,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Object... urlVariables) 			throws RestClientException;1518780587;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.lang.Object[]);public URI postForLocation(String url, Object request, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,lang,object;public,uri,post,for,location,string,url,object,request,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Object... urlVariables) 			throws RestClientException;1518816980;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.lang.Object[]);public URI postForLocation(String url, Object request, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,lang,object;public,uri,post,for,location,string,url,object,request,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Object... urlVariables) 			throws RestClientException;1518833514;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.lang.Object[]);public URI postForLocation(String url, Object request, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,lang,object;public,uri,post,for,location,string,url,object,request,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Object... urlVariables) 			throws RestClientException;1521068433;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.lang.Object[]);public URI postForLocation(String url, Object request, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,lang,object;public,uri,post,for,location,string,url,object,request,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Object... urlVariables) 			throws RestClientException;1525416882;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.lang.Object[]);public URI postForLocation(String url, Object request, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,lang,object;public,uri,post,for,location,string,url,object,request,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Object... urlVariables) 			throws RestClientException;1532738143;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.lang.Object[]);public URI postForLocation(String url, Object request, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,lang,object;public,uri,post,for,location,string,url,object,request,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Object... urlVariables) 			throws RestClientException;1539678128;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.lang.Object[]);public URI postForLocation(String url, Object request, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,lang,object;public,uri,post,for,location,string,url,object,request,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Object... uriVariables) throws RestClientException;1507173536;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Object... uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,object,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Object... uriVariables) throws RestClientException;1510488910;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Object... uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,object,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Object... uriVariables) throws RestClientException;1516867699;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Object... uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,object,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Object... uriVariables) throws RestClientException;1518087233;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Object... uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,object,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Object... uriVariables) throws RestClientException;1518451035;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Object... uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,object,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Object... uriVariables) throws RestClientException;1518458586;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Object... uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,object,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Object... uriVariables) throws RestClientException;1518780587;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Object... uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,object,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Object... uriVariables) throws RestClientException;1518816980;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Object... uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,object,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Object... uriVariables) throws RestClientException;1518833514;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Object... uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,object,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Object... uriVariables) throws RestClientException;1521068433;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Object... uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,object,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Object... uriVariables) throws RestClientException;1525416882;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Object... uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,object,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Object... uriVariables) throws RestClientException;1532738143;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Object... uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,object,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Object... uriVariables) throws RestClientException;1539678128;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Object... uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,object,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder);1507173536;Create a new {@link TestRestTemplate} instance._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@since 1.4.1;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {_		this(buildRestTemplate(restTemplateBuilder))__	};create,a,new,link,test,rest,template,instance,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,since,1,4,1;public,test,rest,template,rest,template,builder,rest,template,builder,this,build,rest,template,rest,template,builder
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder);1510488910;Create a new {@link TestRestTemplate} instance._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@since 1.4.1;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {_		this(buildRestTemplate(restTemplateBuilder))__	};create,a,new,link,test,rest,template,instance,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,since,1,4,1;public,test,rest,template,rest,template,builder,rest,template,builder,this,build,rest,template,rest,template,builder
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder);1516867699;Create a new {@link TestRestTemplate} instance._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@since 1.4.1;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {_		this(buildRestTemplate(restTemplateBuilder))__	};create,a,new,link,test,rest,template,instance,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,since,1,4,1;public,test,rest,template,rest,template,builder,rest,template,builder,this,build,rest,template,rest,template,builder
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder);1518087233;Create a new {@link TestRestTemplate} instance._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@since 1.4.1;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {_		this(buildRestTemplate(restTemplateBuilder))__	};create,a,new,link,test,rest,template,instance,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,since,1,4,1;public,test,rest,template,rest,template,builder,rest,template,builder,this,build,rest,template,rest,template,builder
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder);1518451035;Create a new {@link TestRestTemplate} instance._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@since 1.4.1;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {_		this(restTemplateBuilder, null, null)__	};create,a,new,link,test,rest,template,instance,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,since,1,4,1;public,test,rest,template,rest,template,builder,rest,template,builder,this,rest,template,builder,null,null
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder);1518458586;Create a new {@link TestRestTemplate} instance._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@since 1.4.1;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {_		this(restTemplateBuilder, null, null)__	};create,a,new,link,test,rest,template,instance,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,since,1,4,1;public,test,rest,template,rest,template,builder,rest,template,builder,this,rest,template,builder,null,null
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder);1518780587;Create a new {@link TestRestTemplate} instance._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@since 1.4.1;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {_		this(restTemplateBuilder, null, null)__	};create,a,new,link,test,rest,template,instance,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,since,1,4,1;public,test,rest,template,rest,template,builder,rest,template,builder,this,rest,template,builder,null,null
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder);1518816980;Create a new {@link TestRestTemplate} instance._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@since 1.4.1;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {_		this(restTemplateBuilder, null, null)__	};create,a,new,link,test,rest,template,instance,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,since,1,4,1;public,test,rest,template,rest,template,builder,rest,template,builder,this,rest,template,builder,null,null
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder);1518833514;Create a new {@link TestRestTemplate} instance._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@since 1.4.1;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {_		this(restTemplateBuilder, null, null)__	};create,a,new,link,test,rest,template,instance,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,since,1,4,1;public,test,rest,template,rest,template,builder,rest,template,builder,this,rest,template,builder,null,null
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder);1521068433;Create a new {@link TestRestTemplate} instance._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@since 1.4.1;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {_		this(restTemplateBuilder, null, null)__	};create,a,new,link,test,rest,template,instance,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,since,1,4,1;public,test,rest,template,rest,template,builder,rest,template,builder,this,rest,template,builder,null,null
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder);1525416882;Create a new {@link TestRestTemplate} instance._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@since 1.4.1;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {_		this(restTemplateBuilder, null, null)__	};create,a,new,link,test,rest,template,instance,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,since,1,4,1;public,test,rest,template,rest,template,builder,rest,template,builder,this,rest,template,builder,null,null
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder);1532738143;Create a new {@link TestRestTemplate} instance._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@since 1.4.1;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {_		this(restTemplateBuilder, null, null)__	};create,a,new,link,test,rest,template,instance,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,since,1,4,1;public,test,rest,template,rest,template,builder,rest,template,builder,this,rest,template,builder,null,null
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder);1539678128;Create a new {@link TestRestTemplate} instance._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@since 1.4.1;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder) {_		this(restTemplateBuilder, null, null)__	};create,a,new,link,test,rest,template,instance,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,since,1,4,1;public,test,rest,template,rest,template,builder,rest,template,builder,this,rest,template,builder,null,null
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			Class<T> responseType) throws RestClientException;1507173536;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. Typically used in combination with the static_builder methods on {@code RequestEntity}, for instance: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ResponseEntity&lt_MyResponse&gt_ response = template.exchange(request, MyResponse.class)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,typically,used,in,combination,with,the,static,builder,methods,on,code,request,entity,for,instance,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,response,entity,lt,my,response,gt,response,template,exchange,request,my,response,class,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,java,lang,class;public,t,response,entity,t,exchange,request,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			Class<T> responseType) throws RestClientException;1510488910;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. Typically used in combination with the static_builder methods on {@code RequestEntity}, for instance: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ResponseEntity&lt_MyResponse&gt_ response = template.exchange(request, MyResponse.class)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,typically,used,in,combination,with,the,static,builder,methods,on,code,request,entity,for,instance,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,response,entity,lt,my,response,gt,response,template,exchange,request,my,response,class,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,java,lang,class;public,t,response,entity,t,exchange,request,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			Class<T> responseType) throws RestClientException;1516867699;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. Typically used in combination with the static_builder methods on {@code RequestEntity}, for instance: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ResponseEntity&lt_MyResponse&gt_ response = template.exchange(request, MyResponse.class)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,typically,used,in,combination,with,the,static,builder,methods,on,code,request,entity,for,instance,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,response,entity,lt,my,response,gt,response,template,exchange,request,my,response,class,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,java,lang,class;public,t,response,entity,t,exchange,request,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			Class<T> responseType) throws RestClientException;1518087233;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. Typically used in combination with the static_builder methods on {@code RequestEntity}, for instance: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ResponseEntity&lt_MyResponse&gt_ response = template.exchange(request, MyResponse.class)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,typically,used,in,combination,with,the,static,builder,methods,on,code,request,entity,for,instance,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,response,entity,lt,my,response,gt,response,template,exchange,request,my,response,class,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,java,lang,class;public,t,response,entity,t,exchange,request,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			Class<T> responseType) throws RestClientException;1518451035;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. Typically used in combination with the static_builder methods on {@code RequestEntity}, for instance: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ResponseEntity&lt_MyResponse&gt_ response = template.exchange(request, MyResponse.class)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,typically,used,in,combination,with,the,static,builder,methods,on,code,request,entity,for,instance,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,response,entity,lt,my,response,gt,response,template,exchange,request,my,response,class,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,java,lang,class;public,t,response,entity,t,exchange,request,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			Class<T> responseType) throws RestClientException;1518458586;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. Typically used in combination with the static_builder methods on {@code RequestEntity}, for instance: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ResponseEntity&lt_MyResponse&gt_ response = template.exchange(request, MyResponse.class)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,typically,used,in,combination,with,the,static,builder,methods,on,code,request,entity,for,instance,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,response,entity,lt,my,response,gt,response,template,exchange,request,my,response,class,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,java,lang,class;public,t,response,entity,t,exchange,request,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			Class<T> responseType) throws RestClientException;1518780587;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. Typically used in combination with the static_builder methods on {@code RequestEntity}, for instance: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ResponseEntity&lt_MyResponse&gt_ response = template.exchange(request, MyResponse.class)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,typically,used,in,combination,with,the,static,builder,methods,on,code,request,entity,for,instance,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,response,entity,lt,my,response,gt,response,template,exchange,request,my,response,class,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,java,lang,class;public,t,response,entity,t,exchange,request,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			Class<T> responseType) throws RestClientException;1518816980;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. Typically used in combination with the static_builder methods on {@code RequestEntity}, for instance: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ResponseEntity&lt_MyResponse&gt_ response = template.exchange(request, MyResponse.class)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,typically,used,in,combination,with,the,static,builder,methods,on,code,request,entity,for,instance,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,response,entity,lt,my,response,gt,response,template,exchange,request,my,response,class,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,java,lang,class;public,t,response,entity,t,exchange,request,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			Class<T> responseType) throws RestClientException;1518833514;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. Typically used in combination with the static_builder methods on {@code RequestEntity}, for instance: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ResponseEntity&lt_MyResponse&gt_ response = template.exchange(request, MyResponse.class)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,typically,used,in,combination,with,the,static,builder,methods,on,code,request,entity,for,instance,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,response,entity,lt,my,response,gt,response,template,exchange,request,my,response,class,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,java,lang,class;public,t,response,entity,t,exchange,request,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			Class<T> responseType) throws RestClientException;1521068433;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. Typically used in combination with the static_builder methods on {@code RequestEntity}, for instance: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ResponseEntity&lt_MyResponse&gt_ response = template.exchange(request, MyResponse.class)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,typically,used,in,combination,with,the,static,builder,methods,on,code,request,entity,for,instance,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,response,entity,lt,my,response,gt,response,template,exchange,request,my,response,class,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,java,lang,class;public,t,response,entity,t,exchange,request,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			Class<T> responseType) throws RestClientException;1525416882;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. Typically used in combination with the static_builder methods on {@code RequestEntity}, for instance: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ResponseEntity&lt_MyResponse&gt_ response = template.exchange(request, MyResponse.class)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,typically,used,in,combination,with,the,static,builder,methods,on,code,request,entity,for,instance,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,response,entity,lt,my,response,gt,response,template,exchange,request,my,response,class,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,java,lang,class;public,t,response,entity,t,exchange,request,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			Class<T> responseType) throws RestClientException;1532738143;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. Typically used in combination with the static_builder methods on {@code RequestEntity}, for instance: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ResponseEntity&lt_MyResponse&gt_ response = template.exchange(request, MyResponse.class)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,typically,used,in,combination,with,the,static,builder,methods,on,code,request,entity,for,instance,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,response,entity,lt,my,response,gt,response,template,exchange,request,my,response,class,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,java,lang,class;public,t,response,entity,t,exchange,request,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			Class<T> responseType) throws RestClientException;1539678128;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. Typically used in combination with the static_builder methods on {@code RequestEntity}, for instance: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ResponseEntity&lt_MyResponse&gt_ response = template.exchange(request, MyResponse.class)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			Class<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,typically,used,in,combination,with,the,static,builder,methods,on,code,request,entity,for,instance,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,response,entity,lt,my,response,gt,response,template,exchange,request,my,response,class,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,java,lang,class;public,t,response,entity,t,exchange,request,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) 			throws RestClientException;1507173536;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.lang.Object[]);public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,lang,object;public,set,http,method,options,for,allow,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) 			throws RestClientException;1510488910;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.lang.Object[]);public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,lang,object;public,set,http,method,options,for,allow,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) 			throws RestClientException;1516867699;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.lang.Object[]);public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,lang,object;public,set,http,method,options,for,allow,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) 			throws RestClientException;1518087233;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.lang.Object[]);public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,lang,object;public,set,http,method,options,for,allow,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) 			throws RestClientException;1518451035;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.lang.Object[]);public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,lang,object;public,set,http,method,options,for,allow,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) 			throws RestClientException;1518458586;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.lang.Object[]);public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,lang,object;public,set,http,method,options,for,allow,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) 			throws RestClientException;1518780587;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.lang.Object[]);public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,lang,object;public,set,http,method,options,for,allow,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) 			throws RestClientException;1518816980;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.lang.Object[]);public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,lang,object;public,set,http,method,options,for,allow,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) 			throws RestClientException;1518833514;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.lang.Object[]);public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,lang,object;public,set,http,method,options,for,allow,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) 			throws RestClientException;1521068433;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.lang.Object[]);public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,lang,object;public,set,http,method,options,for,allow,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) 			throws RestClientException;1525416882;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.lang.Object[]);public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,lang,object;public,set,http,method,options,for,allow,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) 			throws RestClientException;1532738143;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.lang.Object[]);public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,lang,object;public,set,http,method,options,for,allow,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) 			throws RestClientException;1539678128;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.lang.Object[]);public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,lang,object;public,set,http,method,options,for,allow,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1507173536;Retrieve an entity by doing a GET on the specified URL. The response is converted_and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class,_java.lang.Object[]);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,lang,object;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1510488910;Retrieve an entity by doing a GET on the specified URL. The response is converted_and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class,_java.lang.Object[]);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,lang,object;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1516867699;Retrieve an entity by doing a GET on the specified URL. The response is converted_and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class,_java.lang.Object[]);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,lang,object;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1518087233;Retrieve an entity by doing a GET on the specified URL. The response is converted_and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class,_java.lang.Object[]);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,lang,object;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1518451035;Retrieve an entity by doing a GET on the specified URL. The response is converted_and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class,_java.lang.Object[]);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,lang,object;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1518458586;Retrieve an entity by doing a GET on the specified URL. The response is converted_and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class,_java.lang.Object[]);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,lang,object;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1518780587;Retrieve an entity by doing a GET on the specified URL. The response is converted_and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class,_java.lang.Object[]);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,lang,object;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1518816980;Retrieve an entity by doing a GET on the specified URL. The response is converted_and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class,_java.lang.Object[]);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,lang,object;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1518833514;Retrieve an entity by doing a GET on the specified URL. The response is converted_and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class,_java.lang.Object[]);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,lang,object;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1521068433;Retrieve an entity by doing a GET on the specified URL. The response is converted_and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class,_java.lang.Object[]);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,lang,object;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1525416882;Retrieve an entity by doing a GET on the specified URL. The response is converted_and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class,_java.lang.Object[]);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,lang,object;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1532738143;Retrieve an entity by doing a GET on the specified URL. The response is converted_and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class,_java.lang.Object[]);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,lang,object;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1539678128;Retrieve an entity by doing a GET on the specified URL. The response is converted_and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class,_java.lang.Object[]);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,an,entity,by,doing,a,get,on,the,specified,url,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,lang,object;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1507173536;Create a new resource by POSTing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.net.URI, java.lang.Object, java.lang.Class);public <T> T postForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.postForObject(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,net,uri,java,lang,object,java,lang,class;public,t,t,post,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T postForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1510488910;Create a new resource by POSTing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.net.URI, java.lang.Object, java.lang.Class);public <T> T postForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.postForObject(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,net,uri,java,lang,object,java,lang,class;public,t,t,post,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T postForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1516867699;Create a new resource by POSTing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.net.URI, java.lang.Object, java.lang.Class);public <T> T postForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.postForObject(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,net,uri,java,lang,object,java,lang,class;public,t,t,post,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T postForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1518087233;Create a new resource by POSTing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.net.URI, java.lang.Object, java.lang.Class);public <T> T postForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.postForObject(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,net,uri,java,lang,object,java,lang,class;public,t,t,post,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T postForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1518451035;Create a new resource by POSTing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.net.URI, java.lang.Object, java.lang.Class);public <T> T postForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.postForObject(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,net,uri,java,lang,object,java,lang,class;public,t,t,post,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T postForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1518458586;Create a new resource by POSTing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.net.URI, java.lang.Object, java.lang.Class);public <T> T postForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.postForObject(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,net,uri,java,lang,object,java,lang,class;public,t,t,post,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T postForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1518780587;Create a new resource by POSTing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.net.URI, java.lang.Object, java.lang.Class);public <T> T postForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.postForObject(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,net,uri,java,lang,object,java,lang,class;public,t,t,post,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T postForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1518816980;Create a new resource by POSTing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.net.URI, java.lang.Object, java.lang.Class);public <T> T postForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.postForObject(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,net,uri,java,lang,object,java,lang,class;public,t,t,post,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T postForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1518833514;Create a new resource by POSTing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.net.URI, java.lang.Object, java.lang.Class);public <T> T postForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.postForObject(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,net,uri,java,lang,object,java,lang,class;public,t,t,post,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T postForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1521068433;Create a new resource by POSTing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.net.URI, java.lang.Object, java.lang.Class);public <T> T postForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.postForObject(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,net,uri,java,lang,object,java,lang,class;public,t,t,post,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T postForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1525416882;Create a new resource by POSTing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.net.URI, java.lang.Object, java.lang.Class);public <T> T postForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.postForObject(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,net,uri,java,lang,object,java,lang,class;public,t,t,post,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T postForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1532738143;Create a new resource by POSTing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.net.URI, java.lang.Object, java.lang.Class);public <T> T postForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.postForObject(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,net,uri,java,lang,object,java,lang,class;public,t,t,post,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T postForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1539678128;Create a new resource by POSTing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.net.URI, java.lang.Object, java.lang.Class);public <T> T postForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.postForObject(applyRootUriIfNecessary(url), request,_				responseType)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,net,uri,java,lang,object,java,lang,class;public,t,t,post,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,post,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public void put(URI url, Object request) throws RestClientException;1507173536;Creates a new resource by PUTting the given object to URL._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.net.URI, java.lang.Object);public void put(URI url, Object request) throws RestClientException {_		this.restTemplate.put(applyRootUriIfNecessary(url), request)__	};creates,a,new,resource,by,putting,the,given,object,to,url,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,net,uri,java,lang,object;public,void,put,uri,url,object,request,throws,rest,client,exception,this,rest,template,put,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public void put(URI url, Object request) throws RestClientException;1510488910;Creates a new resource by PUTting the given object to URL._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.net.URI, java.lang.Object);public void put(URI url, Object request) throws RestClientException {_		this.restTemplate.put(applyRootUriIfNecessary(url), request)__	};creates,a,new,resource,by,putting,the,given,object,to,url,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,net,uri,java,lang,object;public,void,put,uri,url,object,request,throws,rest,client,exception,this,rest,template,put,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public void put(URI url, Object request) throws RestClientException;1516867699;Creates a new resource by PUTting the given object to URL._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.net.URI, java.lang.Object);public void put(URI url, Object request) throws RestClientException {_		this.restTemplate.put(applyRootUriIfNecessary(url), request)__	};creates,a,new,resource,by,putting,the,given,object,to,url,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,net,uri,java,lang,object;public,void,put,uri,url,object,request,throws,rest,client,exception,this,rest,template,put,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public void put(URI url, Object request) throws RestClientException;1518087233;Creates a new resource by PUTting the given object to URL._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.net.URI, java.lang.Object);public void put(URI url, Object request) throws RestClientException {_		this.restTemplate.put(applyRootUriIfNecessary(url), request)__	};creates,a,new,resource,by,putting,the,given,object,to,url,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,net,uri,java,lang,object;public,void,put,uri,url,object,request,throws,rest,client,exception,this,rest,template,put,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public void put(URI url, Object request) throws RestClientException;1518451035;Creates a new resource by PUTting the given object to URL._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.net.URI, java.lang.Object);public void put(URI url, Object request) throws RestClientException {_		this.restTemplate.put(applyRootUriIfNecessary(url), request)__	};creates,a,new,resource,by,putting,the,given,object,to,url,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,net,uri,java,lang,object;public,void,put,uri,url,object,request,throws,rest,client,exception,this,rest,template,put,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public void put(URI url, Object request) throws RestClientException;1518458586;Creates a new resource by PUTting the given object to URL._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.net.URI, java.lang.Object);public void put(URI url, Object request) throws RestClientException {_		this.restTemplate.put(applyRootUriIfNecessary(url), request)__	};creates,a,new,resource,by,putting,the,given,object,to,url,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,net,uri,java,lang,object;public,void,put,uri,url,object,request,throws,rest,client,exception,this,rest,template,put,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public void put(URI url, Object request) throws RestClientException;1518780587;Creates a new resource by PUTting the given object to URL._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.net.URI, java.lang.Object);public void put(URI url, Object request) throws RestClientException {_		this.restTemplate.put(applyRootUriIfNecessary(url), request)__	};creates,a,new,resource,by,putting,the,given,object,to,url,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,net,uri,java,lang,object;public,void,put,uri,url,object,request,throws,rest,client,exception,this,rest,template,put,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public void put(URI url, Object request) throws RestClientException;1518816980;Creates a new resource by PUTting the given object to URL._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.net.URI, java.lang.Object);public void put(URI url, Object request) throws RestClientException {_		this.restTemplate.put(applyRootUriIfNecessary(url), request)__	};creates,a,new,resource,by,putting,the,given,object,to,url,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,net,uri,java,lang,object;public,void,put,uri,url,object,request,throws,rest,client,exception,this,rest,template,put,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public void put(URI url, Object request) throws RestClientException;1518833514;Creates a new resource by PUTting the given object to URL._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.net.URI, java.lang.Object);public void put(URI url, Object request) throws RestClientException {_		this.restTemplate.put(applyRootUriIfNecessary(url), request)__	};creates,a,new,resource,by,putting,the,given,object,to,url,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,net,uri,java,lang,object;public,void,put,uri,url,object,request,throws,rest,client,exception,this,rest,template,put,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public void put(URI url, Object request) throws RestClientException;1521068433;Creates a new resource by PUTting the given object to URL._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.net.URI, java.lang.Object);public void put(URI url, Object request) throws RestClientException {_		this.restTemplate.put(applyRootUriIfNecessary(url), request)__	};creates,a,new,resource,by,putting,the,given,object,to,url,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,net,uri,java,lang,object;public,void,put,uri,url,object,request,throws,rest,client,exception,this,rest,template,put,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public void put(URI url, Object request) throws RestClientException;1525416882;Creates a new resource by PUTting the given object to URL._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.net.URI, java.lang.Object);public void put(URI url, Object request) throws RestClientException {_		this.restTemplate.put(applyRootUriIfNecessary(url), request)__	};creates,a,new,resource,by,putting,the,given,object,to,url,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,net,uri,java,lang,object;public,void,put,uri,url,object,request,throws,rest,client,exception,this,rest,template,put,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public void put(URI url, Object request) throws RestClientException;1532738143;Creates a new resource by PUTting the given object to URL._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.net.URI, java.lang.Object);public void put(URI url, Object request) throws RestClientException {_		this.restTemplate.put(applyRootUriIfNecessary(url), request)__	};creates,a,new,resource,by,putting,the,given,object,to,url,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,net,uri,java,lang,object;public,void,put,uri,url,object,request,throws,rest,client,exception,this,rest,template,put,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public void put(URI url, Object request) throws RestClientException;1539678128;Creates a new resource by PUTting the given object to URL._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.net.URI, java.lang.Object);public void put(URI url, Object request) throws RestClientException {_		this.restTemplate.put(applyRootUriIfNecessary(url), request)__	};creates,a,new,resource,by,putting,the,given,object,to,url,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,net,uri,java,lang,object;public,void,put,uri,url,object,request,throws,rest,client,exception,this,rest,template,put,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public void delete(URI url) throws RestClientException;1507173536;Delete the resources at the specified URL._@param url the URL_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.net.URI);public void delete(URI url) throws RestClientException {_		this.restTemplate.delete(applyRootUriIfNecessary(url))__	};delete,the,resources,at,the,specified,url,param,url,the,url,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,net,uri;public,void,delete,uri,url,throws,rest,client,exception,this,rest,template,delete,apply,root,uri,if,necessary,url
TestRestTemplate -> public void delete(URI url) throws RestClientException;1510488910;Delete the resources at the specified URL._@param url the URL_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.net.URI);public void delete(URI url) throws RestClientException {_		this.restTemplate.delete(applyRootUriIfNecessary(url))__	};delete,the,resources,at,the,specified,url,param,url,the,url,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,net,uri;public,void,delete,uri,url,throws,rest,client,exception,this,rest,template,delete,apply,root,uri,if,necessary,url
TestRestTemplate -> public void delete(URI url) throws RestClientException;1516867699;Delete the resources at the specified URL._@param url the URL_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.net.URI);public void delete(URI url) throws RestClientException {_		this.restTemplate.delete(applyRootUriIfNecessary(url))__	};delete,the,resources,at,the,specified,url,param,url,the,url,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,net,uri;public,void,delete,uri,url,throws,rest,client,exception,this,rest,template,delete,apply,root,uri,if,necessary,url
TestRestTemplate -> public void delete(URI url) throws RestClientException;1518087233;Delete the resources at the specified URL._@param url the URL_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.net.URI);public void delete(URI url) throws RestClientException {_		this.restTemplate.delete(applyRootUriIfNecessary(url))__	};delete,the,resources,at,the,specified,url,param,url,the,url,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,net,uri;public,void,delete,uri,url,throws,rest,client,exception,this,rest,template,delete,apply,root,uri,if,necessary,url
TestRestTemplate -> public void delete(URI url) throws RestClientException;1518451035;Delete the resources at the specified URL._@param url the URL_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.net.URI);public void delete(URI url) throws RestClientException {_		this.restTemplate.delete(applyRootUriIfNecessary(url))__	};delete,the,resources,at,the,specified,url,param,url,the,url,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,net,uri;public,void,delete,uri,url,throws,rest,client,exception,this,rest,template,delete,apply,root,uri,if,necessary,url
TestRestTemplate -> public void delete(URI url) throws RestClientException;1518458586;Delete the resources at the specified URL._@param url the URL_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.net.URI);public void delete(URI url) throws RestClientException {_		this.restTemplate.delete(applyRootUriIfNecessary(url))__	};delete,the,resources,at,the,specified,url,param,url,the,url,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,net,uri;public,void,delete,uri,url,throws,rest,client,exception,this,rest,template,delete,apply,root,uri,if,necessary,url
TestRestTemplate -> public void delete(URI url) throws RestClientException;1518780587;Delete the resources at the specified URL._@param url the URL_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.net.URI);public void delete(URI url) throws RestClientException {_		this.restTemplate.delete(applyRootUriIfNecessary(url))__	};delete,the,resources,at,the,specified,url,param,url,the,url,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,net,uri;public,void,delete,uri,url,throws,rest,client,exception,this,rest,template,delete,apply,root,uri,if,necessary,url
TestRestTemplate -> public void delete(URI url) throws RestClientException;1518816980;Delete the resources at the specified URL._@param url the URL_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.net.URI);public void delete(URI url) throws RestClientException {_		this.restTemplate.delete(applyRootUriIfNecessary(url))__	};delete,the,resources,at,the,specified,url,param,url,the,url,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,net,uri;public,void,delete,uri,url,throws,rest,client,exception,this,rest,template,delete,apply,root,uri,if,necessary,url
TestRestTemplate -> public void delete(URI url) throws RestClientException;1518833514;Delete the resources at the specified URL._@param url the URL_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.net.URI);public void delete(URI url) throws RestClientException {_		this.restTemplate.delete(applyRootUriIfNecessary(url))__	};delete,the,resources,at,the,specified,url,param,url,the,url,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,net,uri;public,void,delete,uri,url,throws,rest,client,exception,this,rest,template,delete,apply,root,uri,if,necessary,url
TestRestTemplate -> public void delete(URI url) throws RestClientException;1521068433;Delete the resources at the specified URL._@param url the URL_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.net.URI);public void delete(URI url) throws RestClientException {_		this.restTemplate.delete(applyRootUriIfNecessary(url))__	};delete,the,resources,at,the,specified,url,param,url,the,url,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,net,uri;public,void,delete,uri,url,throws,rest,client,exception,this,rest,template,delete,apply,root,uri,if,necessary,url
TestRestTemplate -> public void delete(URI url) throws RestClientException;1525416882;Delete the resources at the specified URL._@param url the URL_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.net.URI);public void delete(URI url) throws RestClientException {_		this.restTemplate.delete(applyRootUriIfNecessary(url))__	};delete,the,resources,at,the,specified,url,param,url,the,url,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,net,uri;public,void,delete,uri,url,throws,rest,client,exception,this,rest,template,delete,apply,root,uri,if,necessary,url
TestRestTemplate -> public void delete(URI url) throws RestClientException;1532738143;Delete the resources at the specified URL._@param url the URL_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.net.URI);public void delete(URI url) throws RestClientException {_		this.restTemplate.delete(applyRootUriIfNecessary(url))__	};delete,the,resources,at,the,specified,url,param,url,the,url,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,net,uri;public,void,delete,uri,url,throws,rest,client,exception,this,rest,template,delete,apply,root,uri,if,necessary,url
TestRestTemplate -> public void delete(URI url) throws RestClientException;1539678128;Delete the resources at the specified URL._@param url the URL_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.net.URI);public void delete(URI url) throws RestClientException {_		this.restTemplate.delete(applyRootUriIfNecessary(url))__	};delete,the,resources,at,the,specified,url,param,url,the,url,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,net,uri;public,void,delete,uri,url,throws,rest,client,exception,this,rest,template,delete,apply,root,uri,if,necessary,url
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Object... urlVariables) 			throws RestClientException;1518087233;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.lang.Object[]);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,lang,object;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,object,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Object... urlVariables) 			throws RestClientException;1518451035;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.lang.Object[]);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,lang,object;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,object,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Object... urlVariables) 			throws RestClientException;1518458586;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.lang.Object[]);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,lang,object;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,object,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Object... urlVariables) 			throws RestClientException;1518780587;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.lang.Object[]);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,lang,object;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,object,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Object... urlVariables) 			throws RestClientException;1518816980;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.lang.Object[]);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,lang,object;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,object,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Object... urlVariables) 			throws RestClientException;1518833514;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.lang.Object[]);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,lang,object;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,object,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Object... urlVariables) 			throws RestClientException;1521068433;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.lang.Object[]);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,lang,object;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,object,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Object... urlVariables) 			throws RestClientException;1525416882;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.lang.Object[]);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,lang,object;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,object,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Object... urlVariables) 			throws RestClientException;1532738143;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.lang.Object[]);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,lang,object;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,object,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Object... urlVariables) 			throws RestClientException;1539678128;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.lang.Object[]);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,lang,object;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,object,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1507173536;Retrieve a representation by doing a GET on the specified URL. The response (if_any) is converted and returned._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,specified,url,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1510488910;Retrieve a representation by doing a GET on the specified URL. The response (if_any) is converted and returned._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,specified,url,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1516867699;Retrieve a representation by doing a GET on the specified URL. The response (if_any) is converted and returned._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,specified,url,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1518087233;Retrieve a representation by doing a GET on the specified URL. The response (if_any) is converted and returned._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,specified,url,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1518451035;Retrieve a representation by doing a GET on the specified URL. The response (if_any) is converted and returned._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,specified,url,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1518458586;Retrieve a representation by doing a GET on the specified URL. The response (if_any) is converted and returned._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,specified,url,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1518780587;Retrieve a representation by doing a GET on the specified URL. The response (if_any) is converted and returned._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,specified,url,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1518816980;Retrieve a representation by doing a GET on the specified URL. The response (if_any) is converted and returned._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,specified,url,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1518833514;Retrieve a representation by doing a GET on the specified URL. The response (if_any) is converted and returned._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,specified,url,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1521068433;Retrieve a representation by doing a GET on the specified URL. The response (if_any) is converted and returned._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,specified,url,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1525416882;Retrieve a representation by doing a GET on the specified URL. The response (if_any) is converted and returned._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,specified,url,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1532738143;Retrieve a representation by doing a GET on the specified URL. The response (if_any) is converted and returned._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,specified,url,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1539678128;Retrieve a representation by doing a GET on the specified URL. The response (if_any) is converted and returned._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,specified,url,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1507173536;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.util.Map);public URI postForLocation(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,util,map;public,uri,post,for,location,string,url,object,request,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1510488910;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.util.Map);public URI postForLocation(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,util,map;public,uri,post,for,location,string,url,object,request,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1516867699;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.util.Map);public URI postForLocation(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,util,map;public,uri,post,for,location,string,url,object,request,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1518087233;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.util.Map);public URI postForLocation(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,util,map;public,uri,post,for,location,string,url,object,request,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1518451035;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.util.Map);public URI postForLocation(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,util,map;public,uri,post,for,location,string,url,object,request,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1518458586;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.util.Map);public URI postForLocation(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,util,map;public,uri,post,for,location,string,url,object,request,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1518780587;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.util.Map);public URI postForLocation(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,util,map;public,uri,post,for,location,string,url,object,request,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1518816980;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.util.Map);public URI postForLocation(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,util,map;public,uri,post,for,location,string,url,object,request,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1518833514;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.util.Map);public URI postForLocation(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,util,map;public,uri,post,for,location,string,url,object,request,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1521068433;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.util.Map);public URI postForLocation(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,util,map;public,uri,post,for,location,string,url,object,request,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1525416882;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.util.Map);public URI postForLocation(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,util,map;public,uri,post,for,location,string,url,object,request,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1532738143;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.util.Map);public URI postForLocation(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,util,map;public,uri,post,for,location,string,url,object,request,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public URI postForLocation(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1539678128;Create a new resource by POSTing the given object to the URI template, and returns_the value of the {@code Location} header. This header typically indicates where the_new resource is stored._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param urlVariables the variables to expand the template_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.lang.String, java.lang.Object,_java.util.Map);public URI postForLocation(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForLocation(url, request, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,lang,string,java,lang,object,java,util,map;public,uri,post,for,location,string,url,object,request,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,location,url,request,url,variables
TestRestTemplate -> public RestTemplate getRestTemplate();1507173536;Returns the underlying {@link RestTemplate} that is actually used to perform the_REST operations._@return the restTemplate;public RestTemplate getRestTemplate() {_		return this.restTemplate__	};returns,the,underlying,link,rest,template,that,is,actually,used,to,perform,the,rest,operations,return,the,rest,template;public,rest,template,get,rest,template,return,this,rest,template
TestRestTemplate -> public RestTemplate getRestTemplate();1510488910;Returns the underlying {@link RestTemplate} that is actually used to perform the_REST operations._@return the restTemplate;public RestTemplate getRestTemplate() {_		return this.restTemplate__	};returns,the,underlying,link,rest,template,that,is,actually,used,to,perform,the,rest,operations,return,the,rest,template;public,rest,template,get,rest,template,return,this,rest,template
TestRestTemplate -> public RestTemplate getRestTemplate();1516867699;Returns the underlying {@link RestTemplate} that is actually used to perform the_REST operations._@return the restTemplate;public RestTemplate getRestTemplate() {_		return this.restTemplate__	};returns,the,underlying,link,rest,template,that,is,actually,used,to,perform,the,rest,operations,return,the,rest,template;public,rest,template,get,rest,template,return,this,rest,template
TestRestTemplate -> public RestTemplate getRestTemplate();1518087233;Returns the underlying {@link RestTemplate} that is actually used to perform the_REST operations._@return the restTemplate;public RestTemplate getRestTemplate() {_		return this.restTemplate__	};returns,the,underlying,link,rest,template,that,is,actually,used,to,perform,the,rest,operations,return,the,rest,template;public,rest,template,get,rest,template,return,this,rest,template
TestRestTemplate -> public RestTemplate getRestTemplate();1518451035;Returns the underlying {@link RestTemplate} that is actually used to perform the_REST operations._@return the restTemplate;public RestTemplate getRestTemplate() {_		return this.restTemplate__	};returns,the,underlying,link,rest,template,that,is,actually,used,to,perform,the,rest,operations,return,the,rest,template;public,rest,template,get,rest,template,return,this,rest,template
TestRestTemplate -> public RestTemplate getRestTemplate();1518458586;Returns the underlying {@link RestTemplate} that is actually used to perform the_REST operations._@return the restTemplate;public RestTemplate getRestTemplate() {_		return this.restTemplate__	};returns,the,underlying,link,rest,template,that,is,actually,used,to,perform,the,rest,operations,return,the,rest,template;public,rest,template,get,rest,template,return,this,rest,template
TestRestTemplate -> public RestTemplate getRestTemplate();1518780587;Returns the underlying {@link RestTemplate} that is actually used to perform the_REST operations._@return the restTemplate;public RestTemplate getRestTemplate() {_		return this.restTemplate__	};returns,the,underlying,link,rest,template,that,is,actually,used,to,perform,the,rest,operations,return,the,rest,template;public,rest,template,get,rest,template,return,this,rest,template
TestRestTemplate -> public RestTemplate getRestTemplate();1518816980;Returns the underlying {@link RestTemplate} that is actually used to perform the_REST operations._@return the restTemplate;public RestTemplate getRestTemplate() {_		return this.restTemplate__	};returns,the,underlying,link,rest,template,that,is,actually,used,to,perform,the,rest,operations,return,the,rest,template;public,rest,template,get,rest,template,return,this,rest,template
TestRestTemplate -> public RestTemplate getRestTemplate();1518833514;Returns the underlying {@link RestTemplate} that is actually used to perform the_REST operations._@return the restTemplate;public RestTemplate getRestTemplate() {_		return this.restTemplate__	};returns,the,underlying,link,rest,template,that,is,actually,used,to,perform,the,rest,operations,return,the,rest,template;public,rest,template,get,rest,template,return,this,rest,template
TestRestTemplate -> public RestTemplate getRestTemplate();1521068433;Returns the underlying {@link RestTemplate} that is actually used to perform the_REST operations._@return the restTemplate;public RestTemplate getRestTemplate() {_		return this.restTemplate__	};returns,the,underlying,link,rest,template,that,is,actually,used,to,perform,the,rest,operations,return,the,rest,template;public,rest,template,get,rest,template,return,this,rest,template
TestRestTemplate -> public RestTemplate getRestTemplate();1525416882;Returns the underlying {@link RestTemplate} that is actually used to perform the_REST operations._@return the restTemplate;public RestTemplate getRestTemplate() {_		return this.restTemplate__	};returns,the,underlying,link,rest,template,that,is,actually,used,to,perform,the,rest,operations,return,the,rest,template;public,rest,template,get,rest,template,return,this,rest,template
TestRestTemplate -> public RestTemplate getRestTemplate();1532738143;Returns the underlying {@link RestTemplate} that is actually used to perform the_REST operations._@return the restTemplate;public RestTemplate getRestTemplate() {_		return this.restTemplate__	};returns,the,underlying,link,rest,template,that,is,actually,used,to,perform,the,rest,operations,return,the,rest,template;public,rest,template,get,rest,template,return,this,rest,template
TestRestTemplate -> public RestTemplate getRestTemplate();1539678128;Returns the underlying {@link RestTemplate} that is actually used to perform the_REST operations._@return the restTemplate;public RestTemplate getRestTemplate() {_		return this.restTemplate__	};returns,the,underlying,link,rest,template,that,is,actually,used,to,perform,the,rest,operations,return,the,rest,template;public,rest,template,get,rest,template,return,this,rest,template
TestRestTemplate -> public String getRootUri();1510488910;Returns the root URI applied by a {@link RootUriTemplateHandler} or {@code ""} if_the root URI is not available._@return the root URI;public String getRootUri() {_		UriTemplateHandler uriTemplateHandler = this.restTemplate.getUriTemplateHandler()__		if (uriTemplateHandler instanceof RootUriTemplateHandler) {_			return ((RootUriTemplateHandler) uriTemplateHandler).getRootUri()__		}_		return ""__	};returns,the,root,uri,applied,by,a,link,root,uri,template,handler,or,code,if,the,root,uri,is,not,available,return,the,root,uri;public,string,get,root,uri,uri,template,handler,uri,template,handler,this,rest,template,get,uri,template,handler,if,uri,template,handler,instanceof,root,uri,template,handler,return,root,uri,template,handler,uri,template,handler,get,root,uri,return
TestRestTemplate -> public String getRootUri();1516867699;Returns the root URI applied by a {@link RootUriTemplateHandler} or {@code ""} if_the root URI is not available._@return the root URI;public String getRootUri() {_		UriTemplateHandler uriTemplateHandler = this.restTemplate.getUriTemplateHandler()__		if (uriTemplateHandler instanceof RootUriTemplateHandler) {_			return ((RootUriTemplateHandler) uriTemplateHandler).getRootUri()__		}_		return ""__	};returns,the,root,uri,applied,by,a,link,root,uri,template,handler,or,code,if,the,root,uri,is,not,available,return,the,root,uri;public,string,get,root,uri,uri,template,handler,uri,template,handler,this,rest,template,get,uri,template,handler,if,uri,template,handler,instanceof,root,uri,template,handler,return,root,uri,template,handler,uri,template,handler,get,root,uri,return
TestRestTemplate -> public String getRootUri();1518087233;Returns the root URI applied by a {@link RootUriTemplateHandler} or {@code ""} if_the root URI is not available._@return the root URI;public String getRootUri() {_		UriTemplateHandler uriTemplateHandler = this.restTemplate.getUriTemplateHandler()__		if (uriTemplateHandler instanceof RootUriTemplateHandler) {_			return ((RootUriTemplateHandler) uriTemplateHandler).getRootUri()__		}_		return ""__	};returns,the,root,uri,applied,by,a,link,root,uri,template,handler,or,code,if,the,root,uri,is,not,available,return,the,root,uri;public,string,get,root,uri,uri,template,handler,uri,template,handler,this,rest,template,get,uri,template,handler,if,uri,template,handler,instanceof,root,uri,template,handler,return,root,uri,template,handler,uri,template,handler,get,root,uri,return
TestRestTemplate -> public String getRootUri();1518451035;Returns the root URI applied by a {@link RootUriTemplateHandler} or {@code ""} if_the root URI is not available._@return the root URI;public String getRootUri() {_		UriTemplateHandler uriTemplateHandler = this.restTemplate.getUriTemplateHandler()__		if (uriTemplateHandler instanceof RootUriTemplateHandler) {_			return ((RootUriTemplateHandler) uriTemplateHandler).getRootUri()__		}_		return ""__	};returns,the,root,uri,applied,by,a,link,root,uri,template,handler,or,code,if,the,root,uri,is,not,available,return,the,root,uri;public,string,get,root,uri,uri,template,handler,uri,template,handler,this,rest,template,get,uri,template,handler,if,uri,template,handler,instanceof,root,uri,template,handler,return,root,uri,template,handler,uri,template,handler,get,root,uri,return
TestRestTemplate -> public String getRootUri();1518458586;Returns the root URI applied by a {@link RootUriTemplateHandler} or {@code ""} if_the root URI is not available._@return the root URI;public String getRootUri() {_		UriTemplateHandler uriTemplateHandler = this.restTemplate.getUriTemplateHandler()__		if (uriTemplateHandler instanceof RootUriTemplateHandler) {_			return ((RootUriTemplateHandler) uriTemplateHandler).getRootUri()__		}_		return ""__	};returns,the,root,uri,applied,by,a,link,root,uri,template,handler,or,code,if,the,root,uri,is,not,available,return,the,root,uri;public,string,get,root,uri,uri,template,handler,uri,template,handler,this,rest,template,get,uri,template,handler,if,uri,template,handler,instanceof,root,uri,template,handler,return,root,uri,template,handler,uri,template,handler,get,root,uri,return
TestRestTemplate -> public String getRootUri();1518780587;Returns the root URI applied by a {@link RootUriTemplateHandler} or {@code ""} if_the root URI is not available._@return the root URI;public String getRootUri() {_		UriTemplateHandler uriTemplateHandler = this.restTemplate.getUriTemplateHandler()__		if (uriTemplateHandler instanceof RootUriTemplateHandler) {_			return ((RootUriTemplateHandler) uriTemplateHandler).getRootUri()__		}_		return ""__	};returns,the,root,uri,applied,by,a,link,root,uri,template,handler,or,code,if,the,root,uri,is,not,available,return,the,root,uri;public,string,get,root,uri,uri,template,handler,uri,template,handler,this,rest,template,get,uri,template,handler,if,uri,template,handler,instanceof,root,uri,template,handler,return,root,uri,template,handler,uri,template,handler,get,root,uri,return
TestRestTemplate -> public String getRootUri();1518816980;Returns the root URI applied by a {@link RootUriTemplateHandler} or {@code ""} if_the root URI is not available._@return the root URI;public String getRootUri() {_		UriTemplateHandler uriTemplateHandler = this.restTemplate.getUriTemplateHandler()__		if (uriTemplateHandler instanceof RootUriTemplateHandler) {_			return ((RootUriTemplateHandler) uriTemplateHandler).getRootUri()__		}_		return ""__	};returns,the,root,uri,applied,by,a,link,root,uri,template,handler,or,code,if,the,root,uri,is,not,available,return,the,root,uri;public,string,get,root,uri,uri,template,handler,uri,template,handler,this,rest,template,get,uri,template,handler,if,uri,template,handler,instanceof,root,uri,template,handler,return,root,uri,template,handler,uri,template,handler,get,root,uri,return
TestRestTemplate -> public String getRootUri();1518833514;Returns the root URI applied by a {@link RootUriTemplateHandler} or {@code ""} if_the root URI is not available._@return the root URI;public String getRootUri() {_		UriTemplateHandler uriTemplateHandler = this.restTemplate.getUriTemplateHandler()__		if (uriTemplateHandler instanceof RootUriTemplateHandler) {_			return ((RootUriTemplateHandler) uriTemplateHandler).getRootUri()__		}_		return ""__	};returns,the,root,uri,applied,by,a,link,root,uri,template,handler,or,code,if,the,root,uri,is,not,available,return,the,root,uri;public,string,get,root,uri,uri,template,handler,uri,template,handler,this,rest,template,get,uri,template,handler,if,uri,template,handler,instanceof,root,uri,template,handler,return,root,uri,template,handler,uri,template,handler,get,root,uri,return
TestRestTemplate -> public String getRootUri();1521068433;Returns the root URI applied by a {@link RootUriTemplateHandler} or {@code ""} if_the root URI is not available._@return the root URI;public String getRootUri() {_		UriTemplateHandler uriTemplateHandler = this.restTemplate.getUriTemplateHandler()__		if (uriTemplateHandler instanceof RootUriTemplateHandler) {_			return ((RootUriTemplateHandler) uriTemplateHandler).getRootUri()__		}_		return ""__	};returns,the,root,uri,applied,by,a,link,root,uri,template,handler,or,code,if,the,root,uri,is,not,available,return,the,root,uri;public,string,get,root,uri,uri,template,handler,uri,template,handler,this,rest,template,get,uri,template,handler,if,uri,template,handler,instanceof,root,uri,template,handler,return,root,uri,template,handler,uri,template,handler,get,root,uri,return
TestRestTemplate -> public String getRootUri();1525416882;Returns the root URI applied by a {@link RootUriTemplateHandler} or {@code ""} if_the root URI is not available._@return the root URI;public String getRootUri() {_		UriTemplateHandler uriTemplateHandler = this.restTemplate.getUriTemplateHandler()__		if (uriTemplateHandler instanceof RootUriTemplateHandler) {_			return ((RootUriTemplateHandler) uriTemplateHandler).getRootUri()__		}_		return ""__	};returns,the,root,uri,applied,by,a,link,root,uri,template,handler,or,code,if,the,root,uri,is,not,available,return,the,root,uri;public,string,get,root,uri,uri,template,handler,uri,template,handler,this,rest,template,get,uri,template,handler,if,uri,template,handler,instanceof,root,uri,template,handler,return,root,uri,template,handler,uri,template,handler,get,root,uri,return
TestRestTemplate -> public String getRootUri();1532738143;Returns the root URI applied by a {@link RootUriTemplateHandler} or {@code ""} if_the root URI is not available._@return the root URI;public String getRootUri() {_		UriTemplateHandler uriTemplateHandler = this.restTemplate.getUriTemplateHandler()__		if (uriTemplateHandler instanceof RootUriTemplateHandler) {_			return ((RootUriTemplateHandler) uriTemplateHandler).getRootUri()__		}_		return ""__	};returns,the,root,uri,applied,by,a,link,root,uri,template,handler,or,code,if,the,root,uri,is,not,available,return,the,root,uri;public,string,get,root,uri,uri,template,handler,uri,template,handler,this,rest,template,get,uri,template,handler,if,uri,template,handler,instanceof,root,uri,template,handler,return,root,uri,template,handler,uri,template,handler,get,root,uri,return
TestRestTemplate -> public String getRootUri();1539678128;Returns the root URI applied by a {@link RootUriTemplateHandler} or {@code ""} if_the root URI is not available._@return the root URI;public String getRootUri() {_		UriTemplateHandler uriTemplateHandler = this.restTemplate.getUriTemplateHandler()__		if (uriTemplateHandler instanceof RootUriTemplateHandler) {_			return ((RootUriTemplateHandler) uriTemplateHandler).getRootUri()__		}_		return ""__	};returns,the,root,uri,applied,by,a,link,root,uri,template,handler,or,code,if,the,root,uri,is,not,available,return,the,root,uri;public,string,get,root,uri,uri,template,handler,uri,template,handler,this,rest,template,get,uri,template,handler,if,uri,template,handler,instanceof,root,uri,template,handler,return,root,uri,template,handler,uri,template,handler,get,root,uri,return
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1507173536;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,t,post,for,object,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1510488910;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,t,post,for,object,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1516867699;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,t,post,for,object,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1518087233;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,t,post,for,object,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1518451035;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,t,post,for,object,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1518458586;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,t,post,for,object,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1518780587;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,t,post,for,object,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1518816980;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,t,post,for,object,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1518833514;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,t,post,for,object,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1521068433;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,t,post,for,object,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1525416882;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,t,post,for,object,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1532738143;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,t,post,for,object,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Object... urlVariables) throws RestClientException;1539678128;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,t,post,for,object,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Map<String, ?> urlVariables) 					throws RestClientException;1507173536;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link HttpEntity}._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Map<String, ?> urlVariables)_					throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,http,entity,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Map<String, ?> urlVariables) 					throws RestClientException;1510488910;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link HttpEntity}._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Map<String, ?> urlVariables)_					throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,http,entity,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Map<String, ?> urlVariables) 					throws RestClientException;1516867699;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link HttpEntity}._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Map<String, ?> urlVariables)_					throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,http,entity,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException;1518087233;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException;1518451035;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException;1518458586;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException;1518780587;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException;1518816980;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException;1518833514;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException;1521068433;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException;1525416882;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException;1532738143;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 			throws RestClientException;1539678128;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			ParameterizedTypeReference<T> responseType) throws RestClientException;1507173536;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. The given {@link ParameterizedTypeReference} is_used to pass generic type information: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyResponse&gt_&gt_ response = template.exchange(request, myBean)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			ParameterizedTypeReference<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,parameterized,type,reference,lt,list,lt,my,response,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,response,gt,gt,response,entity,lt,list,lt,my,response,gt,gt,response,template,exchange,request,my,bean,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,request,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			ParameterizedTypeReference<T> responseType) throws RestClientException;1510488910;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. The given {@link ParameterizedTypeReference} is_used to pass generic type information: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyResponse&gt_&gt_ response = template.exchange(request, myBean)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			ParameterizedTypeReference<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,parameterized,type,reference,lt,list,lt,my,response,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,response,gt,gt,response,entity,lt,list,lt,my,response,gt,gt,response,template,exchange,request,my,bean,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,request,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			ParameterizedTypeReference<T> responseType) throws RestClientException;1516867699;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. The given {@link ParameterizedTypeReference} is_used to pass generic type information: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyResponse&gt_&gt_ response = template.exchange(request, myBean)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			ParameterizedTypeReference<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,parameterized,type,reference,lt,list,lt,my,response,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,response,gt,gt,response,entity,lt,list,lt,my,response,gt,gt,response,template,exchange,request,my,bean,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,request,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			ParameterizedTypeReference<T> responseType) throws RestClientException;1518087233;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. The given {@link ParameterizedTypeReference} is_used to pass generic type information: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyResponse&gt_&gt_ response = template.exchange(request, myBean)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			ParameterizedTypeReference<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,parameterized,type,reference,lt,list,lt,my,response,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,response,gt,gt,response,entity,lt,list,lt,my,response,gt,gt,response,template,exchange,request,my,bean,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,request,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			ParameterizedTypeReference<T> responseType) throws RestClientException;1518451035;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. The given {@link ParameterizedTypeReference} is_used to pass generic type information: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyResponse&gt_&gt_ response = template.exchange(request, myBean)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			ParameterizedTypeReference<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,parameterized,type,reference,lt,list,lt,my,response,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,response,gt,gt,response,entity,lt,list,lt,my,response,gt,gt,response,template,exchange,request,my,bean,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,request,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			ParameterizedTypeReference<T> responseType) throws RestClientException;1518458586;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. The given {@link ParameterizedTypeReference} is_used to pass generic type information: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyResponse&gt_&gt_ response = template.exchange(request, myBean)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			ParameterizedTypeReference<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,parameterized,type,reference,lt,list,lt,my,response,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,response,gt,gt,response,entity,lt,list,lt,my,response,gt,gt,response,template,exchange,request,my,bean,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,request,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			ParameterizedTypeReference<T> responseType) throws RestClientException;1518780587;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. The given {@link ParameterizedTypeReference} is_used to pass generic type information: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyResponse&gt_&gt_ response = template.exchange(request, myBean)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			ParameterizedTypeReference<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,parameterized,type,reference,lt,list,lt,my,response,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,response,gt,gt,response,entity,lt,list,lt,my,response,gt,gt,response,template,exchange,request,my,bean,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,request,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			ParameterizedTypeReference<T> responseType) throws RestClientException;1518816980;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. The given {@link ParameterizedTypeReference} is_used to pass generic type information: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyResponse&gt_&gt_ response = template.exchange(request, myBean)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			ParameterizedTypeReference<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,parameterized,type,reference,lt,list,lt,my,response,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,response,gt,gt,response,entity,lt,list,lt,my,response,gt,gt,response,template,exchange,request,my,bean,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,request,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			ParameterizedTypeReference<T> responseType) throws RestClientException;1518833514;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. The given {@link ParameterizedTypeReference} is_used to pass generic type information: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyResponse&gt_&gt_ response = template.exchange(request, myBean)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			ParameterizedTypeReference<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,parameterized,type,reference,lt,list,lt,my,response,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,response,gt,gt,response,entity,lt,list,lt,my,response,gt,gt,response,template,exchange,request,my,bean,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,request,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			ParameterizedTypeReference<T> responseType) throws RestClientException;1521068433;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. The given {@link ParameterizedTypeReference} is_used to pass generic type information: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyResponse&gt_&gt_ response = template.exchange(request, myBean)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			ParameterizedTypeReference<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,parameterized,type,reference,lt,list,lt,my,response,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,response,gt,gt,response,entity,lt,list,lt,my,response,gt,gt,response,template,exchange,request,my,bean,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,request,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			ParameterizedTypeReference<T> responseType) throws RestClientException;1525416882;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. The given {@link ParameterizedTypeReference} is_used to pass generic type information: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyResponse&gt_&gt_ response = template.exchange(request, myBean)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			ParameterizedTypeReference<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,parameterized,type,reference,lt,list,lt,my,response,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,response,gt,gt,response,entity,lt,list,lt,my,response,gt,gt,response,template,exchange,request,my,bean,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,request,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			ParameterizedTypeReference<T> responseType) throws RestClientException;1532738143;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. The given {@link ParameterizedTypeReference} is_used to pass generic type information: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyResponse&gt_&gt_ response = template.exchange(request, myBean)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			ParameterizedTypeReference<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,parameterized,type,reference,lt,list,lt,my,response,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,response,gt,gt,response,entity,lt,list,lt,my,response,gt,gt,response,template,exchange,request,my,bean,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,request,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, 			ParameterizedTypeReference<T> responseType) throws RestClientException;1539678128;Execute the request specified in the given {@link RequestEntity} and return the_response as {@link ResponseEntity}. The given {@link ParameterizedTypeReference} is_used to pass generic type information: <pre class="code">_MyRequest body = ..._RequestEntity request = RequestEntity.post(new URI(&quot_http://example.com/foo&quot_)).accept(MediaType.APPLICATION_JSON).body(body)__ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyResponse&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyResponse&gt_&gt_ response = template.exchange(request, myBean)__</pre>_@param requestEntity the entity to write to the request_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(org.springframework.http.RequestEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,_			ParameterizedTypeReference<T> responseType) throws RestClientException {_		return this.restTemplate.exchange(_				createRequestEntityWithRootAppliedUri(requestEntity), responseType)__	};execute,the,request,specified,in,the,given,link,request,entity,and,return,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,my,request,body,request,entity,request,request,entity,post,new,uri,quot,http,example,com,foo,quot,accept,media,type,body,body,parameterized,type,reference,lt,list,lt,my,response,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,response,gt,gt,response,entity,lt,list,lt,my,response,gt,gt,response,template,exchange,request,my,bean,pre,param,request,entity,the,entity,to,write,to,the,request,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,org,springframework,http,request,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,request,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,create,request,entity,with,root,applied,uri,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1507173536;Retrieve a representation by doing a GET on the URI template. The response is_converted and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,util,map;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1510488910;Retrieve a representation by doing a GET on the URI template. The response is_converted and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,util,map;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1516867699;Retrieve a representation by doing a GET on the URI template. The response is_converted and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,util,map;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518087233;Retrieve a representation by doing a GET on the URI template. The response is_converted and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,util,map;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518451035;Retrieve a representation by doing a GET on the URI template. The response is_converted and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,util,map;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518458586;Retrieve a representation by doing a GET on the URI template. The response is_converted and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,util,map;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518780587;Retrieve a representation by doing a GET on the URI template. The response is_converted and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,util,map;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518816980;Retrieve a representation by doing a GET on the URI template. The response is_converted and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,util,map;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518833514;Retrieve a representation by doing a GET on the URI template. The response is_converted and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,util,map;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1521068433;Retrieve a representation by doing a GET on the URI template. The response is_converted and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,util,map;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1525416882;Retrieve a representation by doing a GET on the URI template. The response is_converted and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,util,map;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1532738143;Retrieve a representation by doing a GET on the URI template. The response is_converted and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,util,map;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1539678128;Retrieve a representation by doing a GET on the URI template. The response is_converted and stored in an {@link ResponseEntity}._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.lang.String, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForEntity(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,is,converted,and,stored,in,an,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,lang,string,java,lang,class,java,util,map;public,t,response,entity,t,get,for,entity,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,entity,url,response,type,url,variables
TestRestTemplate -> public void put(String url, Object request, Object... urlVariables) 			throws RestClientException;1507173536;Create or update a resource by PUTting the given object to the URI._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.lang.Object[]);public void put(String url, Object request, Object... urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,lang,object;public,void,put,string,url,object,request,object,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Object... urlVariables) 			throws RestClientException;1510488910;Create or update a resource by PUTting the given object to the URI._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.lang.Object[]);public void put(String url, Object request, Object... urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,lang,object;public,void,put,string,url,object,request,object,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Object... urlVariables) 			throws RestClientException;1516867699;Create or update a resource by PUTting the given object to the URI._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.lang.Object[]);public void put(String url, Object request, Object... urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,lang,object;public,void,put,string,url,object,request,object,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Object... urlVariables) 			throws RestClientException;1518087233;Create or update a resource by PUTting the given object to the URI._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.lang.Object[]);public void put(String url, Object request, Object... urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,lang,object;public,void,put,string,url,object,request,object,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Object... urlVariables) 			throws RestClientException;1518451035;Create or update a resource by PUTting the given object to the URI._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.lang.Object[]);public void put(String url, Object request, Object... urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,lang,object;public,void,put,string,url,object,request,object,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Object... urlVariables) 			throws RestClientException;1518458586;Create or update a resource by PUTting the given object to the URI._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.lang.Object[]);public void put(String url, Object request, Object... urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,lang,object;public,void,put,string,url,object,request,object,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Object... urlVariables) 			throws RestClientException;1518780587;Create or update a resource by PUTting the given object to the URI._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.lang.Object[]);public void put(String url, Object request, Object... urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,lang,object;public,void,put,string,url,object,request,object,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Object... urlVariables) 			throws RestClientException;1518816980;Create or update a resource by PUTting the given object to the URI._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.lang.Object[]);public void put(String url, Object request, Object... urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,lang,object;public,void,put,string,url,object,request,object,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Object... urlVariables) 			throws RestClientException;1518833514;Create or update a resource by PUTting the given object to the URI._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.lang.Object[]);public void put(String url, Object request, Object... urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,lang,object;public,void,put,string,url,object,request,object,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Object... urlVariables) 			throws RestClientException;1521068433;Create or update a resource by PUTting the given object to the URI._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.lang.Object[]);public void put(String url, Object request, Object... urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,lang,object;public,void,put,string,url,object,request,object,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Object... urlVariables) 			throws RestClientException;1525416882;Create or update a resource by PUTting the given object to the URI._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.lang.Object[]);public void put(String url, Object request, Object... urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,lang,object;public,void,put,string,url,object,request,object,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Object... urlVariables) 			throws RestClientException;1532738143;Create or update a resource by PUTting the given object to the URI._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.lang.Object[]);public void put(String url, Object request, Object... urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,lang,object;public,void,put,string,url,object,request,object,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Object... urlVariables) 			throws RestClientException;1539678128;Create or update a resource by PUTting the given object to the URI._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.lang.Object[]);public void put(String url, Object request, Object... urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};create,or,update,a,resource,by,putting,the,given,object,to,the,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,lang,object;public,void,put,string,url,object,request,object,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) 					throws RestClientException;1507173536;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.util.Map);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables)_					throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,util,map;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) 					throws RestClientException;1510488910;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.util.Map);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables)_					throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,util,map;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) 					throws RestClientException;1516867699;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.util.Map);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables)_					throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,util,map;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1507173536;Retrieve a representation by doing a GET on the URI template. The response (if any)_is converted and returned._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1510488910;Retrieve a representation by doing a GET on the URI template. The response (if any)_is converted and returned._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1516867699;Retrieve a representation by doing a GET on the URI template. The response (if any)_is converted and returned._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518087233;Retrieve a representation by doing a GET on the URI template. The response (if any)_is converted and returned._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518451035;Retrieve a representation by doing a GET on the URI template. The response (if any)_is converted and returned._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518458586;Retrieve a representation by doing a GET on the URI template. The response (if any)_is converted and returned._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518780587;Retrieve a representation by doing a GET on the URI template. The response (if any)_is converted and returned._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518816980;Retrieve a representation by doing a GET on the URI template. The response (if any)_is converted and returned._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518833514;Retrieve a representation by doing a GET on the URI template. The response (if any)_is converted and returned._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1521068433;Retrieve a representation by doing a GET on the URI template. The response (if any)_is converted and returned._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1525416882;Retrieve a representation by doing a GET on the URI template. The response (if any)_is converted and returned._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1532738143;Retrieve a representation by doing a GET on the URI template. The response (if any)_is converted and returned._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(String url, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1539678128;Retrieve a representation by doing a GET on the URI template. The response (if any)_is converted and returned._<p>_URI Template variables are expanded using the given map._@param url the URL_@param responseType the type of the return value_@param urlVariables the map containing variables for the URI template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(String, Class, Object...);public <T> T getForObject(String url, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.getForObject(url, responseType, urlVariables)__	};retrieve,a,representation,by,doing,a,get,on,the,uri,template,the,response,if,any,is,converted,and,returned,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,response,type,the,type,of,the,return,value,param,url,variables,the,map,containing,variables,for,the,uri,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,string,class,object;public,t,t,get,for,object,string,url,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,get,for,object,url,response,type,url,variables
TestRestTemplate -> public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;1507173536;Retrieve a representation by doing a GET on the URL . The response (if any) is_converted and returned._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(java.net.URI, java.lang.Class);public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {_		return this.restTemplate.getForObject(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,if,any,is,converted,and,returned,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,java,net,uri,java,lang,class;public,t,t,get,for,object,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,object,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;1510488910;Retrieve a representation by doing a GET on the URL . The response (if any) is_converted and returned._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(java.net.URI, java.lang.Class);public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {_		return this.restTemplate.getForObject(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,if,any,is,converted,and,returned,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,java,net,uri,java,lang,class;public,t,t,get,for,object,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,object,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;1516867699;Retrieve a representation by doing a GET on the URL . The response (if any) is_converted and returned._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(java.net.URI, java.lang.Class);public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {_		return this.restTemplate.getForObject(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,if,any,is,converted,and,returned,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,java,net,uri,java,lang,class;public,t,t,get,for,object,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,object,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;1518087233;Retrieve a representation by doing a GET on the URL . The response (if any) is_converted and returned._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(java.net.URI, java.lang.Class);public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {_		return this.restTemplate.getForObject(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,if,any,is,converted,and,returned,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,java,net,uri,java,lang,class;public,t,t,get,for,object,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,object,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;1518451035;Retrieve a representation by doing a GET on the URL . The response (if any) is_converted and returned._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(java.net.URI, java.lang.Class);public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {_		return this.restTemplate.getForObject(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,if,any,is,converted,and,returned,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,java,net,uri,java,lang,class;public,t,t,get,for,object,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,object,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;1518458586;Retrieve a representation by doing a GET on the URL . The response (if any) is_converted and returned._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(java.net.URI, java.lang.Class);public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {_		return this.restTemplate.getForObject(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,if,any,is,converted,and,returned,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,java,net,uri,java,lang,class;public,t,t,get,for,object,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,object,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;1518780587;Retrieve a representation by doing a GET on the URL . The response (if any) is_converted and returned._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(java.net.URI, java.lang.Class);public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {_		return this.restTemplate.getForObject(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,if,any,is,converted,and,returned,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,java,net,uri,java,lang,class;public,t,t,get,for,object,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,object,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;1518816980;Retrieve a representation by doing a GET on the URL . The response (if any) is_converted and returned._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(java.net.URI, java.lang.Class);public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {_		return this.restTemplate.getForObject(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,if,any,is,converted,and,returned,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,java,net,uri,java,lang,class;public,t,t,get,for,object,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,object,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;1518833514;Retrieve a representation by doing a GET on the URL . The response (if any) is_converted and returned._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(java.net.URI, java.lang.Class);public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {_		return this.restTemplate.getForObject(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,if,any,is,converted,and,returned,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,java,net,uri,java,lang,class;public,t,t,get,for,object,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,object,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;1521068433;Retrieve a representation by doing a GET on the URL . The response (if any) is_converted and returned._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(java.net.URI, java.lang.Class);public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {_		return this.restTemplate.getForObject(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,if,any,is,converted,and,returned,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,java,net,uri,java,lang,class;public,t,t,get,for,object,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,object,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;1525416882;Retrieve a representation by doing a GET on the URL . The response (if any) is_converted and returned._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(java.net.URI, java.lang.Class);public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {_		return this.restTemplate.getForObject(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,if,any,is,converted,and,returned,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,java,net,uri,java,lang,class;public,t,t,get,for,object,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,object,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;1532738143;Retrieve a representation by doing a GET on the URL . The response (if any) is_converted and returned._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(java.net.URI, java.lang.Class);public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {_		return this.restTemplate.getForObject(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,if,any,is,converted,and,returned,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,java,net,uri,java,lang,class;public,t,t,get,for,object,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,object,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;1539678128;Retrieve a representation by doing a GET on the URL . The response (if any) is_converted and returned._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForObject(java.net.URI, java.lang.Class);public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException {_		return this.restTemplate.getForObject(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,if,any,is,converted,and,returned,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,object,java,net,uri,java,lang,class;public,t,t,get,for,object,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,object,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Object... urlVariables) 					throws RestClientException;1507173536;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.lang.Object[]);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Object... urlVariables)_					throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,lang,object;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,object,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Object... urlVariables) 					throws RestClientException;1510488910;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.lang.Object[]);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Object... urlVariables)_					throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,lang,object;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,object,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Object... urlVariables) 					throws RestClientException;1516867699;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.lang.Object[]);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Object... urlVariables)_					throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,lang,object;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,object,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public void delete(String url, Object... urlVariables) throws RestClientException;1507173536;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.lang.Object[]);public void delete(String url, Object... urlVariables) throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,lang,object;public,void,delete,string,url,object,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Object... urlVariables) throws RestClientException;1510488910;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.lang.Object[]);public void delete(String url, Object... urlVariables) throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,lang,object;public,void,delete,string,url,object,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Object... urlVariables) throws RestClientException;1516867699;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.lang.Object[]);public void delete(String url, Object... urlVariables) throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,lang,object;public,void,delete,string,url,object,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Object... urlVariables) throws RestClientException;1518087233;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.lang.Object[]);public void delete(String url, Object... urlVariables) throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,lang,object;public,void,delete,string,url,object,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Object... urlVariables) throws RestClientException;1518451035;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.lang.Object[]);public void delete(String url, Object... urlVariables) throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,lang,object;public,void,delete,string,url,object,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Object... urlVariables) throws RestClientException;1518458586;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.lang.Object[]);public void delete(String url, Object... urlVariables) throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,lang,object;public,void,delete,string,url,object,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Object... urlVariables) throws RestClientException;1518780587;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.lang.Object[]);public void delete(String url, Object... urlVariables) throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,lang,object;public,void,delete,string,url,object,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Object... urlVariables) throws RestClientException;1518816980;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.lang.Object[]);public void delete(String url, Object... urlVariables) throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,lang,object;public,void,delete,string,url,object,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Object... urlVariables) throws RestClientException;1518833514;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.lang.Object[]);public void delete(String url, Object... urlVariables) throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,lang,object;public,void,delete,string,url,object,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Object... urlVariables) throws RestClientException;1521068433;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.lang.Object[]);public void delete(String url, Object... urlVariables) throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,lang,object;public,void,delete,string,url,object,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Object... urlVariables) throws RestClientException;1525416882;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.lang.Object[]);public void delete(String url, Object... urlVariables) throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,lang,object;public,void,delete,string,url,object,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Object... urlVariables) throws RestClientException;1532738143;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.lang.Object[]);public void delete(String url, Object... urlVariables) throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,lang,object;public,void,delete,string,url,object,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Object... urlVariables) throws RestClientException;1539678128;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand in the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.lang.Object[]);public void delete(String url, Object... urlVariables) throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,lang,object;public,void,delete,string,url,object,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public TestRestTemplate(HttpClientOption... httpClientOptions);1507173536;Create a new {@link TestRestTemplate} instance._@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(HttpClientOption... httpClientOptions) {_		this(null, null, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,http,client,option,http,client,options,this,null,null,http,client,options
TestRestTemplate -> public TestRestTemplate(HttpClientOption... httpClientOptions);1510488910;Create a new {@link TestRestTemplate} instance._@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(HttpClientOption... httpClientOptions) {_		this(null, null, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,http,client,option,http,client,options,this,null,null,http,client,options
TestRestTemplate -> public TestRestTemplate(HttpClientOption... httpClientOptions);1516867699;Create a new {@link TestRestTemplate} instance._@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(HttpClientOption... httpClientOptions) {_		this(null, null, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,http,client,option,http,client,options,this,null,null,http,client,options
TestRestTemplate -> public TestRestTemplate(HttpClientOption... httpClientOptions);1518087233;Create a new {@link TestRestTemplate} instance._@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(HttpClientOption... httpClientOptions) {_		this(null, null, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,http,client,option,http,client,options,this,null,null,http,client,options
TestRestTemplate -> public TestRestTemplate(HttpClientOption... httpClientOptions);1518451035;Create a new {@link TestRestTemplate} instance._@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(HttpClientOption... httpClientOptions) {_		this(null, null, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,http,client,option,http,client,options,this,null,null,http,client,options
TestRestTemplate -> public TestRestTemplate(HttpClientOption... httpClientOptions);1518458586;Create a new {@link TestRestTemplate} instance._@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(HttpClientOption... httpClientOptions) {_		this(null, null, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,http,client,option,http,client,options,this,null,null,http,client,options
TestRestTemplate -> public TestRestTemplate(HttpClientOption... httpClientOptions);1518780587;Create a new {@link TestRestTemplate} instance._@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(HttpClientOption... httpClientOptions) {_		this(null, null, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,http,client,option,http,client,options,this,null,null,http,client,options
TestRestTemplate -> public TestRestTemplate(HttpClientOption... httpClientOptions);1518816980;Create a new {@link TestRestTemplate} instance._@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(HttpClientOption... httpClientOptions) {_		this(null, null, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,http,client,option,http,client,options,this,null,null,http,client,options
TestRestTemplate -> public TestRestTemplate(HttpClientOption... httpClientOptions);1518833514;Create a new {@link TestRestTemplate} instance._@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(HttpClientOption... httpClientOptions) {_		this(null, null, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,http,client,option,http,client,options,this,null,null,http,client,options
TestRestTemplate -> public TestRestTemplate(HttpClientOption... httpClientOptions);1521068433;Create a new {@link TestRestTemplate} instance._@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(HttpClientOption... httpClientOptions) {_		this(null, null, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,http,client,option,http,client,options,this,null,null,http,client,options
TestRestTemplate -> public TestRestTemplate(HttpClientOption... httpClientOptions);1525416882;Create a new {@link TestRestTemplate} instance._@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(HttpClientOption... httpClientOptions) {_		this(null, null, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,http,client,option,http,client,options,this,null,null,http,client,options
TestRestTemplate -> public TestRestTemplate(HttpClientOption... httpClientOptions);1532738143;Create a new {@link TestRestTemplate} instance._@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(HttpClientOption... httpClientOptions) {_		this(null, null, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,http,client,option,http,client,options,this,null,null,http,client,options
TestRestTemplate -> public TestRestTemplate(HttpClientOption... httpClientOptions);1539678128;Create a new {@link TestRestTemplate} instance._@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(HttpClientOption... httpClientOptions) {_		this(null, null, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,http,client,option,http,client,options,this,null,null,http,client,options
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;1507173536;Return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.net.URI);public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException {_		return this.restTemplate.optionsForAllow(applyRootUriIfNecessary(url))__	};return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,net,uri;public,set,http,method,options,for,allow,uri,url,throws,rest,client,exception,return,this,rest,template,options,for,allow,apply,root,uri,if,necessary,url
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;1510488910;Return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.net.URI);public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException {_		return this.restTemplate.optionsForAllow(applyRootUriIfNecessary(url))__	};return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,net,uri;public,set,http,method,options,for,allow,uri,url,throws,rest,client,exception,return,this,rest,template,options,for,allow,apply,root,uri,if,necessary,url
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;1516867699;Return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.net.URI);public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException {_		return this.restTemplate.optionsForAllow(applyRootUriIfNecessary(url))__	};return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,net,uri;public,set,http,method,options,for,allow,uri,url,throws,rest,client,exception,return,this,rest,template,options,for,allow,apply,root,uri,if,necessary,url
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;1518087233;Return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.net.URI);public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException {_		return this.restTemplate.optionsForAllow(applyRootUriIfNecessary(url))__	};return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,net,uri;public,set,http,method,options,for,allow,uri,url,throws,rest,client,exception,return,this,rest,template,options,for,allow,apply,root,uri,if,necessary,url
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;1518451035;Return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.net.URI);public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException {_		return this.restTemplate.optionsForAllow(applyRootUriIfNecessary(url))__	};return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,net,uri;public,set,http,method,options,for,allow,uri,url,throws,rest,client,exception,return,this,rest,template,options,for,allow,apply,root,uri,if,necessary,url
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;1518458586;Return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.net.URI);public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException {_		return this.restTemplate.optionsForAllow(applyRootUriIfNecessary(url))__	};return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,net,uri;public,set,http,method,options,for,allow,uri,url,throws,rest,client,exception,return,this,rest,template,options,for,allow,apply,root,uri,if,necessary,url
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;1518780587;Return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.net.URI);public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException {_		return this.restTemplate.optionsForAllow(applyRootUriIfNecessary(url))__	};return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,net,uri;public,set,http,method,options,for,allow,uri,url,throws,rest,client,exception,return,this,rest,template,options,for,allow,apply,root,uri,if,necessary,url
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;1518816980;Return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.net.URI);public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException {_		return this.restTemplate.optionsForAllow(applyRootUriIfNecessary(url))__	};return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,net,uri;public,set,http,method,options,for,allow,uri,url,throws,rest,client,exception,return,this,rest,template,options,for,allow,apply,root,uri,if,necessary,url
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;1518833514;Return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.net.URI);public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException {_		return this.restTemplate.optionsForAllow(applyRootUriIfNecessary(url))__	};return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,net,uri;public,set,http,method,options,for,allow,uri,url,throws,rest,client,exception,return,this,rest,template,options,for,allow,apply,root,uri,if,necessary,url
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;1521068433;Return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.net.URI);public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException {_		return this.restTemplate.optionsForAllow(applyRootUriIfNecessary(url))__	};return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,net,uri;public,set,http,method,options,for,allow,uri,url,throws,rest,client,exception,return,this,rest,template,options,for,allow,apply,root,uri,if,necessary,url
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;1525416882;Return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.net.URI);public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException {_		return this.restTemplate.optionsForAllow(applyRootUriIfNecessary(url))__	};return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,net,uri;public,set,http,method,options,for,allow,uri,url,throws,rest,client,exception,return,this,rest,template,options,for,allow,apply,root,uri,if,necessary,url
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;1532738143;Return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.net.URI);public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException {_		return this.restTemplate.optionsForAllow(applyRootUriIfNecessary(url))__	};return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,net,uri;public,set,http,method,options,for,allow,uri,url,throws,rest,client,exception,return,this,rest,template,options,for,allow,apply,root,uri,if,necessary,url
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;1539678128;Return the value of the Allow header for the given URL._@param url the URL_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.net.URI);public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException {_		return this.restTemplate.optionsForAllow(applyRootUriIfNecessary(url))__	};return,the,value,of,the,allow,header,for,the,given,url,param,url,the,url,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,net,uri;public,set,http,method,options,for,allow,uri,url,throws,rest,client,exception,return,this,rest,template,options,for,allow,apply,root,uri,if,necessary,url
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 					throws RestClientException;1507173536;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_					throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 					throws RestClientException;1510488910;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_					throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 					throws RestClientException;1516867699;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_					throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) 			throws RestClientException;1507173536;Retrieve a representation by doing a GET on the URL . The response is converted and_stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.net.URI, java.lang.Class);public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.getForEntity(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,net,uri,java,lang,class;public,t,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,entity,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) 			throws RestClientException;1510488910;Retrieve a representation by doing a GET on the URL . The response is converted and_stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.net.URI, java.lang.Class);public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.getForEntity(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,net,uri,java,lang,class;public,t,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,entity,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) 			throws RestClientException;1516867699;Retrieve a representation by doing a GET on the URL . The response is converted and_stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.net.URI, java.lang.Class);public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.getForEntity(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,net,uri,java,lang,class;public,t,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,entity,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) 			throws RestClientException;1518087233;Retrieve a representation by doing a GET on the URL . The response is converted and_stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.net.URI, java.lang.Class);public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.getForEntity(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,net,uri,java,lang,class;public,t,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,entity,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) 			throws RestClientException;1518451035;Retrieve a representation by doing a GET on the URL . The response is converted and_stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.net.URI, java.lang.Class);public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.getForEntity(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,net,uri,java,lang,class;public,t,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,entity,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) 			throws RestClientException;1518458586;Retrieve a representation by doing a GET on the URL . The response is converted and_stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.net.URI, java.lang.Class);public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.getForEntity(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,net,uri,java,lang,class;public,t,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,entity,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) 			throws RestClientException;1518780587;Retrieve a representation by doing a GET on the URL . The response is converted and_stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.net.URI, java.lang.Class);public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.getForEntity(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,net,uri,java,lang,class;public,t,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,entity,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) 			throws RestClientException;1518816980;Retrieve a representation by doing a GET on the URL . The response is converted and_stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.net.URI, java.lang.Class);public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.getForEntity(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,net,uri,java,lang,class;public,t,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,entity,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) 			throws RestClientException;1518833514;Retrieve a representation by doing a GET on the URL . The response is converted and_stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.net.URI, java.lang.Class);public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.getForEntity(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,net,uri,java,lang,class;public,t,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,entity,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) 			throws RestClientException;1521068433;Retrieve a representation by doing a GET on the URL . The response is converted and_stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.net.URI, java.lang.Class);public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.getForEntity(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,net,uri,java,lang,class;public,t,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,entity,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) 			throws RestClientException;1525416882;Retrieve a representation by doing a GET on the URL . The response is converted and_stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.net.URI, java.lang.Class);public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.getForEntity(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,net,uri,java,lang,class;public,t,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,entity,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) 			throws RestClientException;1532738143;Retrieve a representation by doing a GET on the URL . The response is converted and_stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.net.URI, java.lang.Class);public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.getForEntity(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,net,uri,java,lang,class;public,t,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,entity,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) 			throws RestClientException;1539678128;Retrieve a representation by doing a GET on the URL . The response is converted and_stored in an {@link ResponseEntity}._@param url the URL_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see RestTemplate#getForEntity(java.net.URI, java.lang.Class);public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.getForEntity(applyRootUriIfNecessary(url), responseType)__	};retrieve,a,representation,by,doing,a,get,on,the,url,the,response,is,converted,and,stored,in,an,link,response,entity,param,url,the,url,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,rest,template,get,for,entity,java,net,uri,java,lang,class;public,t,response,entity,t,get,for,entity,uri,url,class,t,response,type,throws,rest,client,exception,return,this,rest,template,get,for,entity,apply,root,uri,if,necessary,url,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables) 					throws RestClientException;1507173536;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables)_					throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables) 					throws RestClientException;1510488910;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables)_					throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables) 					throws RestClientException;1516867699;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables)_					throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor) throws RestClientException;1507173536;Execute the HTTP method to the given URL, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor);public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor) throws RestClientException {_		return this.restTemplate.execute(applyRootUriIfNecessary(url), method,_				requestCallback, responseExtractor)__	};execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,net,uri,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor;public,t,t,execute,uri,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception,return,this,rest,template,execute,apply,root,uri,if,necessary,url,method,request,callback,response,extractor
TestRestTemplate -> public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor) throws RestClientException;1510488910;Execute the HTTP method to the given URL, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor);public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor) throws RestClientException {_		return this.restTemplate.execute(applyRootUriIfNecessary(url), method,_				requestCallback, responseExtractor)__	};execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,net,uri,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor;public,t,t,execute,uri,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception,return,this,rest,template,execute,apply,root,uri,if,necessary,url,method,request,callback,response,extractor
TestRestTemplate -> public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor) throws RestClientException;1516867699;Execute the HTTP method to the given URL, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor);public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor) throws RestClientException {_		return this.restTemplate.execute(applyRootUriIfNecessary(url), method,_				requestCallback, responseExtractor)__	};execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,net,uri,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor;public,t,t,execute,uri,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception,return,this,rest,template,execute,apply,root,uri,if,necessary,url,method,request,callback,response,extractor
TestRestTemplate -> public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor) throws RestClientException;1518087233;Execute the HTTP method to the given URL, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor);public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor) throws RestClientException {_		return this.restTemplate.execute(applyRootUriIfNecessary(url), method,_				requestCallback, responseExtractor)__	};execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,net,uri,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor;public,t,t,execute,uri,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception,return,this,rest,template,execute,apply,root,uri,if,necessary,url,method,request,callback,response,extractor
TestRestTemplate -> public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor) throws RestClientException;1518451035;Execute the HTTP method to the given URL, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor);public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor) throws RestClientException {_		return this.restTemplate.execute(applyRootUriIfNecessary(url), method,_				requestCallback, responseExtractor)__	};execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,net,uri,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor;public,t,t,execute,uri,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception,return,this,rest,template,execute,apply,root,uri,if,necessary,url,method,request,callback,response,extractor
TestRestTemplate -> public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor) throws RestClientException;1518458586;Execute the HTTP method to the given URL, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor);public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor) throws RestClientException {_		return this.restTemplate.execute(applyRootUriIfNecessary(url), method,_				requestCallback, responseExtractor)__	};execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,net,uri,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor;public,t,t,execute,uri,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception,return,this,rest,template,execute,apply,root,uri,if,necessary,url,method,request,callback,response,extractor
TestRestTemplate -> public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor) throws RestClientException;1518780587;Execute the HTTP method to the given URL, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor);public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor) throws RestClientException {_		return this.restTemplate.execute(applyRootUriIfNecessary(url), method,_				requestCallback, responseExtractor)__	};execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,net,uri,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor;public,t,t,execute,uri,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception,return,this,rest,template,execute,apply,root,uri,if,necessary,url,method,request,callback,response,extractor
TestRestTemplate -> public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor) throws RestClientException;1518816980;Execute the HTTP method to the given URL, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor);public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor) throws RestClientException {_		return this.restTemplate.execute(applyRootUriIfNecessary(url), method,_				requestCallback, responseExtractor)__	};execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,net,uri,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor;public,t,t,execute,uri,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception,return,this,rest,template,execute,apply,root,uri,if,necessary,url,method,request,callback,response,extractor
TestRestTemplate -> public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor) throws RestClientException;1518833514;Execute the HTTP method to the given URL, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor);public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor) throws RestClientException {_		return this.restTemplate.execute(applyRootUriIfNecessary(url), method,_				requestCallback, responseExtractor)__	};execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,net,uri,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor;public,t,t,execute,uri,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception,return,this,rest,template,execute,apply,root,uri,if,necessary,url,method,request,callback,response,extractor
TestRestTemplate -> public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor) throws RestClientException;1521068433;Execute the HTTP method to the given URL, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor);public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor) throws RestClientException {_		return this.restTemplate.execute(applyRootUriIfNecessary(url), method,_				requestCallback, responseExtractor)__	};execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,net,uri,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor;public,t,t,execute,uri,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception,return,this,rest,template,execute,apply,root,uri,if,necessary,url,method,request,callback,response,extractor
TestRestTemplate -> public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor) throws RestClientException;1525416882;Execute the HTTP method to the given URL, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor);public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor) throws RestClientException {_		return this.restTemplate.execute(applyRootUriIfNecessary(url), method,_				requestCallback, responseExtractor)__	};execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,net,uri,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor;public,t,t,execute,uri,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception,return,this,rest,template,execute,apply,root,uri,if,necessary,url,method,request,callback,response,extractor
TestRestTemplate -> public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor) throws RestClientException;1532738143;Execute the HTTP method to the given URL, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor);public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor) throws RestClientException {_		return this.restTemplate.execute(applyRootUriIfNecessary(url), method,_				requestCallback, responseExtractor)__	};execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,net,uri,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor;public,t,t,execute,uri,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception,return,this,rest,template,execute,apply,root,uri,if,necessary,url,method,request,callback,response,extractor
TestRestTemplate -> public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor) throws RestClientException;1539678128;Execute the HTTP method to the given URL, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor);public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor) throws RestClientException {_		return this.restTemplate.execute(applyRootUriIfNecessary(url), method,_				requestCallback, responseExtractor)__	};execute,the,http,method,to,the,given,url,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,net,uri,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor;public,t,t,execute,uri,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,throws,rest,client,exception,return,this,rest,template,execute,apply,root,uri,if,necessary,url,method,request,callback,response,extractor
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Object... urlVariables) throws RestClientException;1507173536;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Object... urlVariables) throws RestClientException;1510488910;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Object... urlVariables) throws RestClientException;1516867699;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Object... urlVariables) throws RestClientException;1518087233;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Object... urlVariables) throws RestClientException;1518451035;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Object... urlVariables) throws RestClientException;1518458586;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Object... urlVariables) throws RestClientException;1518780587;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Object... urlVariables) throws RestClientException;1518816980;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Object... urlVariables) throws RestClientException;1518833514;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Object... urlVariables) throws RestClientException;1521068433;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Object... urlVariables) throws RestClientException;1525416882;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Object... urlVariables) throws RestClientException;1532738143;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Object... urlVariables) throws RestClientException;1539678128;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Object... urlVariables) throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,lang,object;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public TestRestTemplate(String username, String password, 			HttpClientOption... httpClientOptions);1507173536;Create a new {@link TestRestTemplate} instance with the specified credentials._@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(String username, String password,_			HttpClientOption... httpClientOptions) {_		this(new RestTemplate(), username, password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,string,username,string,password,http,client,option,http,client,options,this,new,rest,template,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(String username, String password, 			HttpClientOption... httpClientOptions);1510488910;Create a new {@link TestRestTemplate} instance with the specified credentials._@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(String username, String password,_			HttpClientOption... httpClientOptions) {_		this(new RestTemplate(), username, password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,string,username,string,password,http,client,option,http,client,options,this,new,rest,template,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(String username, String password, 			HttpClientOption... httpClientOptions);1516867699;Create a new {@link TestRestTemplate} instance with the specified credentials._@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(String username, String password,_			HttpClientOption... httpClientOptions) {_		this(new RestTemplate(), username, password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,string,username,string,password,http,client,option,http,client,options,this,new,rest,template,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(String username, String password, 			HttpClientOption... httpClientOptions);1518087233;Create a new {@link TestRestTemplate} instance with the specified credentials._@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(String username, String password,_			HttpClientOption... httpClientOptions) {_		this(new RestTemplate(), username, password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,string,username,string,password,http,client,option,http,client,options,this,new,rest,template,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(String username, String password, 			HttpClientOption... httpClientOptions);1518451035;Create a new {@link TestRestTemplate} instance with the specified credentials._@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(String username, String password,_			HttpClientOption... httpClientOptions) {_		this(new RestTemplateBuilder(), username, password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,string,username,string,password,http,client,option,http,client,options,this,new,rest,template,builder,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(String username, String password, 			HttpClientOption... httpClientOptions);1518458586;Create a new {@link TestRestTemplate} instance with the specified credentials._@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(String username, String password,_			HttpClientOption... httpClientOptions) {_		this(new RestTemplateBuilder(), username, password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,string,username,string,password,http,client,option,http,client,options,this,new,rest,template,builder,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(String username, String password, 			HttpClientOption... httpClientOptions);1518780587;Create a new {@link TestRestTemplate} instance with the specified credentials._@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(String username, String password,_			HttpClientOption... httpClientOptions) {_		this(new RestTemplateBuilder(), username, password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,string,username,string,password,http,client,option,http,client,options,this,new,rest,template,builder,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(String username, String password, 			HttpClientOption... httpClientOptions);1518816980;Create a new {@link TestRestTemplate} instance with the specified credentials._@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(String username, String password,_			HttpClientOption... httpClientOptions) {_		this(new RestTemplateBuilder(), username, password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,string,username,string,password,http,client,option,http,client,options,this,new,rest,template,builder,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(String username, String password, 			HttpClientOption... httpClientOptions);1518833514;Create a new {@link TestRestTemplate} instance with the specified credentials._@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(String username, String password,_			HttpClientOption... httpClientOptions) {_		this(new RestTemplateBuilder(), username, password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,string,username,string,password,http,client,option,http,client,options,this,new,rest,template,builder,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(String username, String password, 			HttpClientOption... httpClientOptions);1521068433;Create a new {@link TestRestTemplate} instance with the specified credentials._@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(String username, String password,_			HttpClientOption... httpClientOptions) {_		this(new RestTemplateBuilder(), username, password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,string,username,string,password,http,client,option,http,client,options,this,new,rest,template,builder,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(String username, String password, 			HttpClientOption... httpClientOptions);1525416882;Create a new {@link TestRestTemplate} instance with the specified credentials._@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(String username, String password,_			HttpClientOption... httpClientOptions) {_		this(new RestTemplateBuilder(), username, password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,string,username,string,password,http,client,option,http,client,options,this,new,rest,template,builder,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(String username, String password, 			HttpClientOption... httpClientOptions);1532738143;Create a new {@link TestRestTemplate} instance with the specified credentials._@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(String username, String password,_			HttpClientOption... httpClientOptions) {_		this(new RestTemplateBuilder(), username, password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,string,username,string,password,http,client,option,http,client,options,this,new,rest,template,builder,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(String username, String password, 			HttpClientOption... httpClientOptions);1539678128;Create a new {@link TestRestTemplate} instance with the specified credentials._@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used;public TestRestTemplate(String username, String password,_			HttpClientOption... httpClientOptions) {_		this(new RestTemplateBuilder(), username, password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used;public,test,rest,template,string,username,string,password,http,client,option,http,client,options,this,new,rest,template,builder,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate withBasicAuth(String username, String password);1507173536;Creates a new {@code TestRestTemplate} with the same configuration as this one,_except that it will send basic authorization headers using the given_{@code username} and {@code password}._@param username the username_@param password the password_@return the new template_@since 1.4.1;public TestRestTemplate withBasicAuth(String username, String password) {_		RestTemplate restTemplate = new RestTemplate()__		restTemplate.setMessageConverters(getRestTemplate().getMessageConverters())__		restTemplate.setInterceptors(getRestTemplate().getInterceptors())__		restTemplate.setRequestFactory(getRestTemplate().getRequestFactory())__		restTemplate.setUriTemplateHandler(getRestTemplate().getUriTemplateHandler())__		TestRestTemplate testRestTemplate = new TestRestTemplate(restTemplate, username,_				password, this.httpClientOptions)__		testRestTemplate.getRestTemplate()_				.setErrorHandler(getRestTemplate().getErrorHandler())__		return testRestTemplate__	};creates,a,new,code,test,rest,template,with,the,same,configuration,as,this,one,except,that,it,will,send,basic,authorization,headers,using,the,given,code,username,and,code,password,param,username,the,username,param,password,the,password,return,the,new,template,since,1,4,1;public,test,rest,template,with,basic,auth,string,username,string,password,rest,template,rest,template,new,rest,template,rest,template,set,message,converters,get,rest,template,get,message,converters,rest,template,set,interceptors,get,rest,template,get,interceptors,rest,template,set,request,factory,get,rest,template,get,request,factory,rest,template,set,uri,template,handler,get,rest,template,get,uri,template,handler,test,rest,template,test,rest,template,new,test,rest,template,rest,template,username,password,this,http,client,options,test,rest,template,get,rest,template,set,error,handler,get,rest,template,get,error,handler,return,test,rest,template
TestRestTemplate -> public TestRestTemplate withBasicAuth(String username, String password);1510488910;Creates a new {@code TestRestTemplate} with the same configuration as this one,_except that it will send basic authorization headers using the given_{@code username} and {@code password}._@param username the username_@param password the password_@return the new template_@since 1.4.1;public TestRestTemplate withBasicAuth(String username, String password) {_		RestTemplate restTemplate = new RestTemplate()__		restTemplate.setMessageConverters(getRestTemplate().getMessageConverters())__		restTemplate.setInterceptors(getRestTemplate().getInterceptors())__		restTemplate.setRequestFactory(getRestTemplate().getRequestFactory())__		restTemplate.setUriTemplateHandler(getRestTemplate().getUriTemplateHandler())__		TestRestTemplate testRestTemplate = new TestRestTemplate(restTemplate, username,_				password, this.httpClientOptions)__		testRestTemplate.getRestTemplate()_				.setErrorHandler(getRestTemplate().getErrorHandler())__		return testRestTemplate__	};creates,a,new,code,test,rest,template,with,the,same,configuration,as,this,one,except,that,it,will,send,basic,authorization,headers,using,the,given,code,username,and,code,password,param,username,the,username,param,password,the,password,return,the,new,template,since,1,4,1;public,test,rest,template,with,basic,auth,string,username,string,password,rest,template,rest,template,new,rest,template,rest,template,set,message,converters,get,rest,template,get,message,converters,rest,template,set,interceptors,get,rest,template,get,interceptors,rest,template,set,request,factory,get,rest,template,get,request,factory,rest,template,set,uri,template,handler,get,rest,template,get,uri,template,handler,test,rest,template,test,rest,template,new,test,rest,template,rest,template,username,password,this,http,client,options,test,rest,template,get,rest,template,set,error,handler,get,rest,template,get,error,handler,return,test,rest,template
TestRestTemplate -> public TestRestTemplate withBasicAuth(String username, String password);1516867699;Creates a new {@code TestRestTemplate} with the same configuration as this one,_except that it will send basic authorization headers using the given_{@code username} and {@code password}._@param username the username_@param password the password_@return the new template_@since 1.4.1;public TestRestTemplate withBasicAuth(String username, String password) {_		RestTemplate restTemplate = new RestTemplate()__		restTemplate.setMessageConverters(getRestTemplate().getMessageConverters())__		restTemplate.setInterceptors(getRestTemplate().getInterceptors())__		restTemplate.setRequestFactory(getRestTemplate().getRequestFactory())__		restTemplate.setUriTemplateHandler(getRestTemplate().getUriTemplateHandler())__		TestRestTemplate testRestTemplate = new TestRestTemplate(restTemplate, username,_				password, this.httpClientOptions)__		testRestTemplate.getRestTemplate()_				.setErrorHandler(getRestTemplate().getErrorHandler())__		return testRestTemplate__	};creates,a,new,code,test,rest,template,with,the,same,configuration,as,this,one,except,that,it,will,send,basic,authorization,headers,using,the,given,code,username,and,code,password,param,username,the,username,param,password,the,password,return,the,new,template,since,1,4,1;public,test,rest,template,with,basic,auth,string,username,string,password,rest,template,rest,template,new,rest,template,rest,template,set,message,converters,get,rest,template,get,message,converters,rest,template,set,interceptors,get,rest,template,get,interceptors,rest,template,set,request,factory,get,rest,template,get,request,factory,rest,template,set,uri,template,handler,get,rest,template,get,uri,template,handler,test,rest,template,test,rest,template,new,test,rest,template,rest,template,username,password,this,http,client,options,test,rest,template,get,rest,template,set,error,handler,get,rest,template,get,error,handler,return,test,rest,template
TestRestTemplate -> public TestRestTemplate withBasicAuth(String username, String password);1518087233;Creates a new {@code TestRestTemplate} with the same configuration as this one,_except that it will send basic authorization headers using the given_{@code username} and {@code password}._@param username the username_@param password the password_@return the new template_@since 1.4.1;public TestRestTemplate withBasicAuth(String username, String password) {_		RestTemplate restTemplate = new RestTemplate()__		restTemplate.setMessageConverters(getRestTemplate().getMessageConverters())__		restTemplate.setInterceptors(getRestTemplate().getInterceptors())__		restTemplate.setRequestFactory(getRestTemplate().getRequestFactory())__		restTemplate.setUriTemplateHandler(getRestTemplate().getUriTemplateHandler())__		TestRestTemplate testRestTemplate = new TestRestTemplate(restTemplate, username,_				password, this.httpClientOptions)__		testRestTemplate.getRestTemplate()_				.setErrorHandler(getRestTemplate().getErrorHandler())__		return testRestTemplate__	};creates,a,new,code,test,rest,template,with,the,same,configuration,as,this,one,except,that,it,will,send,basic,authorization,headers,using,the,given,code,username,and,code,password,param,username,the,username,param,password,the,password,return,the,new,template,since,1,4,1;public,test,rest,template,with,basic,auth,string,username,string,password,rest,template,rest,template,new,rest,template,rest,template,set,message,converters,get,rest,template,get,message,converters,rest,template,set,interceptors,get,rest,template,get,interceptors,rest,template,set,request,factory,get,rest,template,get,request,factory,rest,template,set,uri,template,handler,get,rest,template,get,uri,template,handler,test,rest,template,test,rest,template,new,test,rest,template,rest,template,username,password,this,http,client,options,test,rest,template,get,rest,template,set,error,handler,get,rest,template,get,error,handler,return,test,rest,template
TestRestTemplate -> public TestRestTemplate withBasicAuth(String username, String password);1518451035;Creates a new {@code TestRestTemplate} with the same configuration as this one,_except that it will send basic authorization headers using the given_{@code username} and {@code password}._@param username the username_@param password the password_@return the new template_@since 1.4.1;public TestRestTemplate withBasicAuth(String username, String password) {_		RestTemplate restTemplate = new RestTemplate()__		restTemplate.setMessageConverters(getRestTemplate().getMessageConverters())__		restTemplate.setInterceptors(getRestTemplate().getInterceptors())__		restTemplate.setRequestFactory(getRestTemplate().getRequestFactory())__		restTemplate.setUriTemplateHandler(getRestTemplate().getUriTemplateHandler())__		TestRestTemplate testRestTemplate = new TestRestTemplate(restTemplate, username,_				password, this.httpClientOptions)__		testRestTemplate.getRestTemplate()_				.setErrorHandler(getRestTemplate().getErrorHandler())__		return testRestTemplate__	};creates,a,new,code,test,rest,template,with,the,same,configuration,as,this,one,except,that,it,will,send,basic,authorization,headers,using,the,given,code,username,and,code,password,param,username,the,username,param,password,the,password,return,the,new,template,since,1,4,1;public,test,rest,template,with,basic,auth,string,username,string,password,rest,template,rest,template,new,rest,template,rest,template,set,message,converters,get,rest,template,get,message,converters,rest,template,set,interceptors,get,rest,template,get,interceptors,rest,template,set,request,factory,get,rest,template,get,request,factory,rest,template,set,uri,template,handler,get,rest,template,get,uri,template,handler,test,rest,template,test,rest,template,new,test,rest,template,rest,template,username,password,this,http,client,options,test,rest,template,get,rest,template,set,error,handler,get,rest,template,get,error,handler,return,test,rest,template
TestRestTemplate -> public TestRestTemplate withBasicAuth(String username, String password);1518458586;Creates a new {@code TestRestTemplate} with the same configuration as this one,_except that it will send basic authorization headers using the given_{@code username} and {@code password}._@param username the username_@param password the password_@return the new template_@since 1.4.1;public TestRestTemplate withBasicAuth(String username, String password) {_		RestTemplate restTemplate = new RestTemplate()__		restTemplate.setMessageConverters(getRestTemplate().getMessageConverters())__		restTemplate.setInterceptors(getRestTemplate().getInterceptors())__		restTemplate.setRequestFactory(getRestTemplate().getRequestFactory())__		restTemplate.setUriTemplateHandler(getRestTemplate().getUriTemplateHandler())__		TestRestTemplate testRestTemplate = new TestRestTemplate(restTemplate, username,_				password, this.httpClientOptions)__		testRestTemplate.getRestTemplate()_				.setErrorHandler(getRestTemplate().getErrorHandler())__		return testRestTemplate__	};creates,a,new,code,test,rest,template,with,the,same,configuration,as,this,one,except,that,it,will,send,basic,authorization,headers,using,the,given,code,username,and,code,password,param,username,the,username,param,password,the,password,return,the,new,template,since,1,4,1;public,test,rest,template,with,basic,auth,string,username,string,password,rest,template,rest,template,new,rest,template,rest,template,set,message,converters,get,rest,template,get,message,converters,rest,template,set,interceptors,get,rest,template,get,interceptors,rest,template,set,request,factory,get,rest,template,get,request,factory,rest,template,set,uri,template,handler,get,rest,template,get,uri,template,handler,test,rest,template,test,rest,template,new,test,rest,template,rest,template,username,password,this,http,client,options,test,rest,template,get,rest,template,set,error,handler,get,rest,template,get,error,handler,return,test,rest,template
TestRestTemplate -> public TestRestTemplate withBasicAuth(String username, String password);1518780587;Creates a new {@code TestRestTemplate} with the same configuration as this one,_except that it will send basic authorization headers using the given_{@code username} and {@code password}._@param username the username_@param password the password_@return the new template_@since 1.4.1;public TestRestTemplate withBasicAuth(String username, String password) {_		RestTemplate restTemplate = new RestTemplate()__		restTemplate.setMessageConverters(getRestTemplate().getMessageConverters())__		restTemplate.setInterceptors(getRestTemplate().getInterceptors())__		restTemplate.setRequestFactory(getRequestFactory(getRestTemplate()))__		restTemplate.setUriTemplateHandler(getRestTemplate().getUriTemplateHandler())__		TestRestTemplate testRestTemplate = new TestRestTemplate(restTemplate, username,_				password, this.httpClientOptions)__		testRestTemplate.getRestTemplate()_				.setErrorHandler(getRestTemplate().getErrorHandler())__		return testRestTemplate__	};creates,a,new,code,test,rest,template,with,the,same,configuration,as,this,one,except,that,it,will,send,basic,authorization,headers,using,the,given,code,username,and,code,password,param,username,the,username,param,password,the,password,return,the,new,template,since,1,4,1;public,test,rest,template,with,basic,auth,string,username,string,password,rest,template,rest,template,new,rest,template,rest,template,set,message,converters,get,rest,template,get,message,converters,rest,template,set,interceptors,get,rest,template,get,interceptors,rest,template,set,request,factory,get,request,factory,get,rest,template,rest,template,set,uri,template,handler,get,rest,template,get,uri,template,handler,test,rest,template,test,rest,template,new,test,rest,template,rest,template,username,password,this,http,client,options,test,rest,template,get,rest,template,set,error,handler,get,rest,template,get,error,handler,return,test,rest,template
TestRestTemplate -> public TestRestTemplate withBasicAuth(String username, String password);1518816980;Creates a new {@code TestRestTemplate} with the same configuration as this one,_except that it will send basic authorization headers using the given_{@code username} and {@code password}._@param username the username_@param password the password_@return the new template_@since 1.4.1;public TestRestTemplate withBasicAuth(String username, String password) {_		RestTemplate restTemplate = new RestTemplateBuilder()_				.messageConverters(getRestTemplate().getMessageConverters())_				.interceptors(getRestTemplate().getInterceptors())_				.uriTemplateHandler(getRestTemplate().getUriTemplateHandler())_				.build()__		TestRestTemplate testRestTemplate = new TestRestTemplate(restTemplate, username,_				password, this.httpClientOptions)__		testRestTemplate.getRestTemplate()_				.setErrorHandler(getRestTemplate().getErrorHandler())__		return testRestTemplate__	};creates,a,new,code,test,rest,template,with,the,same,configuration,as,this,one,except,that,it,will,send,basic,authorization,headers,using,the,given,code,username,and,code,password,param,username,the,username,param,password,the,password,return,the,new,template,since,1,4,1;public,test,rest,template,with,basic,auth,string,username,string,password,rest,template,rest,template,new,rest,template,builder,message,converters,get,rest,template,get,message,converters,interceptors,get,rest,template,get,interceptors,uri,template,handler,get,rest,template,get,uri,template,handler,build,test,rest,template,test,rest,template,new,test,rest,template,rest,template,username,password,this,http,client,options,test,rest,template,get,rest,template,set,error,handler,get,rest,template,get,error,handler,return,test,rest,template
TestRestTemplate -> public TestRestTemplate withBasicAuth(String username, String password);1518833514;Creates a new {@code TestRestTemplate} with the same configuration as this one,_except that it will send basic authorization headers using the given_{@code username} and {@code password}._@param username the username_@param password the password_@return the new template_@since 1.4.1;public TestRestTemplate withBasicAuth(String username, String password) {_		RestTemplate restTemplate = new RestTemplateBuilder()_				.messageConverters(getRestTemplate().getMessageConverters())_				.interceptors(getRestTemplate().getInterceptors())_				.uriTemplateHandler(getRestTemplate().getUriTemplateHandler()).build()__		TestRestTemplate testRestTemplate = new TestRestTemplate(restTemplate, username,_				password, this.httpClientOptions)__		testRestTemplate.getRestTemplate()_				.setErrorHandler(getRestTemplate().getErrorHandler())__		return testRestTemplate__	};creates,a,new,code,test,rest,template,with,the,same,configuration,as,this,one,except,that,it,will,send,basic,authorization,headers,using,the,given,code,username,and,code,password,param,username,the,username,param,password,the,password,return,the,new,template,since,1,4,1;public,test,rest,template,with,basic,auth,string,username,string,password,rest,template,rest,template,new,rest,template,builder,message,converters,get,rest,template,get,message,converters,interceptors,get,rest,template,get,interceptors,uri,template,handler,get,rest,template,get,uri,template,handler,build,test,rest,template,test,rest,template,new,test,rest,template,rest,template,username,password,this,http,client,options,test,rest,template,get,rest,template,set,error,handler,get,rest,template,get,error,handler,return,test,rest,template
TestRestTemplate -> public TestRestTemplate withBasicAuth(String username, String password);1521068433;Creates a new {@code TestRestTemplate} with the same configuration as this one,_except that it will send basic authorization headers using the given_{@code username} and {@code password}._@param username the username_@param password the password_@return the new template_@since 1.4.1;public TestRestTemplate withBasicAuth(String username, String password) {_		RestTemplate restTemplate = new RestTemplateBuilder()_				.messageConverters(getRestTemplate().getMessageConverters())_				.interceptors(getRestTemplate().getInterceptors())_				.uriTemplateHandler(getRestTemplate().getUriTemplateHandler()).build()__		TestRestTemplate testRestTemplate = new TestRestTemplate(restTemplate, username,_				password, this.httpClientOptions)__		testRestTemplate.getRestTemplate()_				.setErrorHandler(getRestTemplate().getErrorHandler())__		return testRestTemplate__	};creates,a,new,code,test,rest,template,with,the,same,configuration,as,this,one,except,that,it,will,send,basic,authorization,headers,using,the,given,code,username,and,code,password,param,username,the,username,param,password,the,password,return,the,new,template,since,1,4,1;public,test,rest,template,with,basic,auth,string,username,string,password,rest,template,rest,template,new,rest,template,builder,message,converters,get,rest,template,get,message,converters,interceptors,get,rest,template,get,interceptors,uri,template,handler,get,rest,template,get,uri,template,handler,build,test,rest,template,test,rest,template,new,test,rest,template,rest,template,username,password,this,http,client,options,test,rest,template,get,rest,template,set,error,handler,get,rest,template,get,error,handler,return,test,rest,template
TestRestTemplate -> public TestRestTemplate withBasicAuth(String username, String password);1525416882;Creates a new {@code TestRestTemplate} with the same configuration as this one,_except that it will send basic authorization headers using the given_{@code username} and {@code password}._@param username the username_@param password the password_@return the new template_@since 1.4.1;public TestRestTemplate withBasicAuth(String username, String password) {_		RestTemplate restTemplate = new RestTemplateBuilder()_				.messageConverters(getRestTemplate().getMessageConverters())_				.interceptors(getRestTemplate().getInterceptors())_				.uriTemplateHandler(getRestTemplate().getUriTemplateHandler()).build()__		TestRestTemplate testRestTemplate = new TestRestTemplate(restTemplate, username,_				password, this.httpClientOptions)__		testRestTemplate.getRestTemplate()_				.setErrorHandler(getRestTemplate().getErrorHandler())__		return testRestTemplate__	};creates,a,new,code,test,rest,template,with,the,same,configuration,as,this,one,except,that,it,will,send,basic,authorization,headers,using,the,given,code,username,and,code,password,param,username,the,username,param,password,the,password,return,the,new,template,since,1,4,1;public,test,rest,template,with,basic,auth,string,username,string,password,rest,template,rest,template,new,rest,template,builder,message,converters,get,rest,template,get,message,converters,interceptors,get,rest,template,get,interceptors,uri,template,handler,get,rest,template,get,uri,template,handler,build,test,rest,template,test,rest,template,new,test,rest,template,rest,template,username,password,this,http,client,options,test,rest,template,get,rest,template,set,error,handler,get,rest,template,get,error,handler,return,test,rest,template
TestRestTemplate -> public TestRestTemplate withBasicAuth(String username, String password);1532738143;Creates a new {@code TestRestTemplate} with the same configuration as this one,_except that it will send basic authorization headers using the given_{@code username} and {@code password}._@param username the username_@param password the password_@return the new template_@since 1.4.1;public TestRestTemplate withBasicAuth(String username, String password) {_		RestTemplate restTemplate = new RestTemplateBuilder()_				.messageConverters(getRestTemplate().getMessageConverters())_				.interceptors(getRestTemplate().getInterceptors())_				.uriTemplateHandler(getRestTemplate().getUriTemplateHandler()).build()__		TestRestTemplate testRestTemplate = new TestRestTemplate(restTemplate, username,_				password, this.httpClientOptions)__		testRestTemplate.getRestTemplate()_				.setErrorHandler(getRestTemplate().getErrorHandler())__		return testRestTemplate__	};creates,a,new,code,test,rest,template,with,the,same,configuration,as,this,one,except,that,it,will,send,basic,authorization,headers,using,the,given,code,username,and,code,password,param,username,the,username,param,password,the,password,return,the,new,template,since,1,4,1;public,test,rest,template,with,basic,auth,string,username,string,password,rest,template,rest,template,new,rest,template,builder,message,converters,get,rest,template,get,message,converters,interceptors,get,rest,template,get,interceptors,uri,template,handler,get,rest,template,get,uri,template,handler,build,test,rest,template,test,rest,template,new,test,rest,template,rest,template,username,password,this,http,client,options,test,rest,template,get,rest,template,set,error,handler,get,rest,template,get,error,handler,return,test,rest,template
TestRestTemplate -> public TestRestTemplate withBasicAuth(String username, String password);1539678128;Creates a new {@code TestRestTemplate} with the same configuration as this one,_except that it will send basic authorization headers using the given_{@code username} and {@code password}._@param username the username_@param password the password_@return the new template_@since 1.4.1;public TestRestTemplate withBasicAuth(String username, String password) {_		RestTemplate restTemplate = new RestTemplateBuilder()_				.messageConverters(getRestTemplate().getMessageConverters())_				.interceptors(getRestTemplate().getInterceptors())_				.uriTemplateHandler(getRestTemplate().getUriTemplateHandler()).build()__		TestRestTemplate testRestTemplate = new TestRestTemplate(restTemplate, username,_				password, this.httpClientOptions)__		testRestTemplate.getRestTemplate()_				.setErrorHandler(getRestTemplate().getErrorHandler())__		return testRestTemplate__	};creates,a,new,code,test,rest,template,with,the,same,configuration,as,this,one,except,that,it,will,send,basic,authorization,headers,using,the,given,code,username,and,code,password,param,username,the,username,param,password,the,password,return,the,new,template,since,1,4,1;public,test,rest,template,with,basic,auth,string,username,string,password,rest,template,rest,template,new,rest,template,builder,message,converters,get,rest,template,get,message,converters,interceptors,get,rest,template,get,interceptors,uri,template,handler,get,rest,template,get,uri,template,handler,build,test,rest,template,test,rest,template,new,test,rest,template,rest,template,username,password,this,http,client,options,test,rest,template,get,rest,template,set,error,handler,get,rest,template,get,error,handler,return,test,rest,template
TestRestTemplate -> public void delete(String url, Map<String, ?> urlVariables) 			throws RestClientException;1507173536;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.util.Map);public void delete(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,util,map;public,void,delete,string,url,map,string,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Map<String, ?> urlVariables) 			throws RestClientException;1510488910;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.util.Map);public void delete(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,util,map;public,void,delete,string,url,map,string,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Map<String, ?> urlVariables) 			throws RestClientException;1516867699;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.util.Map);public void delete(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,util,map;public,void,delete,string,url,map,string,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518087233;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.util.Map);public void delete(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,util,map;public,void,delete,string,url,map,string,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518451035;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.util.Map);public void delete(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,util,map;public,void,delete,string,url,map,string,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518458586;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.util.Map);public void delete(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,util,map;public,void,delete,string,url,map,string,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518780587;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.util.Map);public void delete(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,util,map;public,void,delete,string,url,map,string,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518816980;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.util.Map);public void delete(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,util,map;public,void,delete,string,url,map,string,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518833514;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.util.Map);public void delete(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,util,map;public,void,delete,string,url,map,string,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Map<String, ?> urlVariables) 			throws RestClientException;1521068433;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.util.Map);public void delete(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,util,map;public,void,delete,string,url,map,string,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Map<String, ?> urlVariables) 			throws RestClientException;1525416882;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.util.Map);public void delete(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,util,map;public,void,delete,string,url,map,string,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Map<String, ?> urlVariables) 			throws RestClientException;1532738143;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.util.Map);public void delete(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,util,map;public,void,delete,string,url,map,string,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public void delete(String url, Map<String, ?> urlVariables) 			throws RestClientException;1539678128;Delete the resources at the specified URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see RestTemplate#delete(java.lang.String, java.util.Map);public void delete(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.delete(url, urlVariables)__	};delete,the,resources,at,the,specified,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,rest,template,delete,java,lang,string,java,util,map;public,void,delete,string,url,map,string,url,variables,throws,rest,client,exception,this,rest,template,delete,url,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Map<String, ?> urlVariables) 			throws RestClientException;1518087233;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link HttpEntity}._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,http,entity,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Map<String, ?> urlVariables) 			throws RestClientException;1518451035;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link HttpEntity}._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,http,entity,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Map<String, ?> urlVariables) 			throws RestClientException;1518458586;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link HttpEntity}._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,http,entity,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Map<String, ?> urlVariables) 			throws RestClientException;1518780587;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link HttpEntity}._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,http,entity,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Map<String, ?> urlVariables) 			throws RestClientException;1518816980;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link HttpEntity}._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,http,entity,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Map<String, ?> urlVariables) 			throws RestClientException;1518833514;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link HttpEntity}._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,http,entity,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Map<String, ?> urlVariables) 			throws RestClientException;1521068433;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link HttpEntity}._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,http,entity,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Map<String, ?> urlVariables) 			throws RestClientException;1525416882;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link HttpEntity}._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,http,entity,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Map<String, ?> urlVariables) 			throws RestClientException;1532738143;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link HttpEntity}._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,http,entity,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> postForEntity(String url, Object request, 			Class<T> responseType, Map<String, ?> urlVariables) 			throws RestClientException;1539678128;Create a new resource by POSTing the given object to the URI template, and returns_the response as {@link HttpEntity}._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the response type to return_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForEntity(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> ResponseEntity<T> postForEntity(String url, Object request,_			Class<T> responseType, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.postForEntity(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,response,as,link,http,entity,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,response,type,to,return,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,entity,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,response,entity,t,post,for,entity,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,entity,url,request,response,type,url,variables
TestRestTemplate -> public <T> T patchForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1507173536;Update a resource by PATCHing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.patchForObject(applyRootUriIfNecessary(url), request,_				responseType)___	};update,a,resource,by,patching,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,patch,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T patchForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1510488910;Update a resource by PATCHing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.patchForObject(applyRootUriIfNecessary(url), request,_				responseType)___	};update,a,resource,by,patching,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,patch,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T patchForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1516867699;Update a resource by PATCHing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.patchForObject(applyRootUriIfNecessary(url), request,_				responseType)___	};update,a,resource,by,patching,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,patch,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T patchForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1518087233;Update a resource by PATCHing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.patchForObject(applyRootUriIfNecessary(url), request,_				responseType)___	};update,a,resource,by,patching,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,patch,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T patchForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1518451035;Update a resource by PATCHing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.patchForObject(applyRootUriIfNecessary(url), request,_				responseType)___	};update,a,resource,by,patching,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,patch,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T patchForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1518458586;Update a resource by PATCHing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.patchForObject(applyRootUriIfNecessary(url), request,_				responseType)___	};update,a,resource,by,patching,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,patch,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T patchForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1518780587;Update a resource by PATCHing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.patchForObject(applyRootUriIfNecessary(url), request,_				responseType)___	};update,a,resource,by,patching,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,patch,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T patchForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1518816980;Update a resource by PATCHing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.patchForObject(applyRootUriIfNecessary(url), request,_				responseType)___	};update,a,resource,by,patching,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,patch,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T patchForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1518833514;Update a resource by PATCHing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.patchForObject(applyRootUriIfNecessary(url), request,_				responseType)___	};update,a,resource,by,patching,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,patch,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T patchForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1521068433;Update a resource by PATCHing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.patchForObject(applyRootUriIfNecessary(url), request,_				responseType)___	};update,a,resource,by,patching,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,patch,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T patchForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1525416882;Update a resource by PATCHing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.patchForObject(applyRootUriIfNecessary(url), request,_				responseType)___	};update,a,resource,by,patching,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,patch,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T patchForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1532738143;Update a resource by PATCHing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.patchForObject(applyRootUriIfNecessary(url), request,_				responseType)___	};update,a,resource,by,patching,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,patch,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> T patchForObject(URI url, Object request, Class<T> responseType) 			throws RestClientException;1539678128;Update a resource by PATCHing the given object to the URL, and returns the_representation found in the response._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(URI url, Object request, Class<T> responseType)_			throws RestClientException {_		return this.restTemplate.patchForObject(applyRootUriIfNecessary(url), request,_				responseType)___	};update,a,resource,by,patching,the,given,object,to,the,url,and,returns,the,representation,found,in,the,response,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,uri,url,object,request,class,t,response,type,throws,rest,client,exception,return,this,rest,template,patch,for,object,apply,root,uri,if,necessary,url,request,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... urlVariables) throws RestClientException;1507173536;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... urlVariables) throws RestClientException;1510488910;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... urlVariables) throws RestClientException;1516867699;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... urlVariables) throws RestClientException;1518087233;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... urlVariables) throws RestClientException;1518451035;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... urlVariables) throws RestClientException;1518458586;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... urlVariables) throws RestClientException;1518780587;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... urlVariables) throws RestClientException;1518816980;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... urlVariables) throws RestClientException;1518833514;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... urlVariables) throws RestClientException;1521068433;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... urlVariables) throws RestClientException;1525416882;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... urlVariables) throws RestClientException;1532738143;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Object... urlVariables) throws RestClientException;1539678128;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Object... urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1507173536;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1510488910;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1516867699;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518087233;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518451035;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518458586;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518780587;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518816980;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518833514;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1521068433;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1525416882;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1532738143;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1539678128;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 					throws RestClientException;1507173536;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_					throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 					throws RestClientException;1510488910;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_					throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType) 					throws RestClientException;1516867699;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType)_					throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,class,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) 			throws RestClientException;1518087233;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.util.Map);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,util,map;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) 			throws RestClientException;1518451035;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.util.Map);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,util,map;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) 			throws RestClientException;1518458586;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.util.Map);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,util,map;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) 			throws RestClientException;1518780587;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.util.Map);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,util,map;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) 			throws RestClientException;1518816980;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.util.Map);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,util,map;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) 			throws RestClientException;1518833514;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.util.Map);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,util,map;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) 			throws RestClientException;1521068433;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.util.Map);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,util,map;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) 			throws RestClientException;1525416882;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.util.Map);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,util,map;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) 			throws RestClientException;1532738143;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.util.Map);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,util,map;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, 			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) 			throws RestClientException;1539678128;Execute the HTTP method to the given URI template, preparing the request with the_{@link RequestCallback}, and reading the response with a {@link ResponseExtractor}._<p>_URI Template variables are expanded using the given URI variables map._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestCallback object that prepares the request_@param responseExtractor object that extracts the return value from the response_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return an arbitrary object, as returned by the {@link ResponseExtractor}_@throws RestClientException on client-side HTTP error_@see RestTemplate#execute(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.web.client.RequestCallback,_org.springframework.web.client.ResponseExtractor, java.util.Map);public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,_			ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.execute(url, method, requestCallback, responseExtractor,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,preparing,the,request,with,the,link,request,callback,and,reading,the,response,with,a,link,response,extractor,p,uri,template,variables,are,expanded,using,the,given,uri,variables,map,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,callback,object,that,prepares,the,request,param,response,extractor,object,that,extracts,the,return,value,from,the,response,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,an,arbitrary,object,as,returned,by,the,link,response,extractor,throws,rest,client,exception,on,client,side,http,error,see,rest,template,execute,java,lang,string,org,springframework,http,http,method,org,springframework,web,client,request,callback,org,springframework,web,client,response,extractor,java,util,map;public,t,t,execute,string,url,http,method,method,request,callback,request,callback,response,extractor,t,response,extractor,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,execute,url,method,request,callback,response,extractor,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Object... urlVariables) 			throws RestClientException;1507173536;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand the template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.lang.Object[]);public HttpHeaders headForHeaders(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,lang,object;public,http,headers,head,for,headers,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Object... urlVariables) 			throws RestClientException;1510488910;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand the template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.lang.Object[]);public HttpHeaders headForHeaders(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,lang,object;public,http,headers,head,for,headers,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Object... urlVariables) 			throws RestClientException;1516867699;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand the template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.lang.Object[]);public HttpHeaders headForHeaders(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,lang,object;public,http,headers,head,for,headers,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Object... urlVariables) 			throws RestClientException;1518087233;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand the template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.lang.Object[]);public HttpHeaders headForHeaders(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,lang,object;public,http,headers,head,for,headers,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Object... urlVariables) 			throws RestClientException;1518451035;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand the template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.lang.Object[]);public HttpHeaders headForHeaders(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,lang,object;public,http,headers,head,for,headers,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Object... urlVariables) 			throws RestClientException;1518458586;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand the template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.lang.Object[]);public HttpHeaders headForHeaders(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,lang,object;public,http,headers,head,for,headers,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Object... urlVariables) 			throws RestClientException;1518780587;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand the template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.lang.Object[]);public HttpHeaders headForHeaders(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,lang,object;public,http,headers,head,for,headers,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Object... urlVariables) 			throws RestClientException;1518816980;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand the template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.lang.Object[]);public HttpHeaders headForHeaders(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,lang,object;public,http,headers,head,for,headers,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Object... urlVariables) 			throws RestClientException;1518833514;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand the template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.lang.Object[]);public HttpHeaders headForHeaders(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,lang,object;public,http,headers,head,for,headers,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Object... urlVariables) 			throws RestClientException;1521068433;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand the template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.lang.Object[]);public HttpHeaders headForHeaders(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,lang,object;public,http,headers,head,for,headers,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Object... urlVariables) 			throws RestClientException;1525416882;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand the template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.lang.Object[]);public HttpHeaders headForHeaders(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,lang,object;public,http,headers,head,for,headers,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Object... urlVariables) 			throws RestClientException;1532738143;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand the template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.lang.Object[]);public HttpHeaders headForHeaders(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,lang,object;public,http,headers,head,for,headers,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Object... urlVariables) 			throws RestClientException;1539678128;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param urlVariables the variables to expand the template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.lang.Object[]);public HttpHeaders headForHeaders(String url, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,url,variables,the,variables,to,expand,the,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,lang,object;public,http,headers,head,for,headers,string,url,object,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public void put(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1507173536;Creates a new resource by PUTting the given object to URI template._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.util.Map);public void put(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,util,map;public,void,put,string,url,object,request,map,string,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1510488910;Creates a new resource by PUTting the given object to URI template._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.util.Map);public void put(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,util,map;public,void,put,string,url,object,request,map,string,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1516867699;Creates a new resource by PUTting the given object to URI template._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.util.Map);public void put(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,util,map;public,void,put,string,url,object,request,map,string,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1518087233;Creates a new resource by PUTting the given object to URI template._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.util.Map);public void put(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,util,map;public,void,put,string,url,object,request,map,string,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1518451035;Creates a new resource by PUTting the given object to URI template._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.util.Map);public void put(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,util,map;public,void,put,string,url,object,request,map,string,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1518458586;Creates a new resource by PUTting the given object to URI template._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.util.Map);public void put(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,util,map;public,void,put,string,url,object,request,map,string,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1518780587;Creates a new resource by PUTting the given object to URI template._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.util.Map);public void put(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,util,map;public,void,put,string,url,object,request,map,string,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1518816980;Creates a new resource by PUTting the given object to URI template._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.util.Map);public void put(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,util,map;public,void,put,string,url,object,request,map,string,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1518833514;Creates a new resource by PUTting the given object to URI template._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.util.Map);public void put(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,util,map;public,void,put,string,url,object,request,map,string,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1521068433;Creates a new resource by PUTting the given object to URI template._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.util.Map);public void put(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,util,map;public,void,put,string,url,object,request,map,string,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1525416882;Creates a new resource by PUTting the given object to URI template._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.util.Map);public void put(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,util,map;public,void,put,string,url,object,request,map,string,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1532738143;Creates a new resource by PUTting the given object to URI template._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.util.Map);public void put(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,util,map;public,void,put,string,url,object,request,map,string,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public void put(String url, Object request, Map<String, ?> urlVariables) 			throws RestClientException;1539678128;Creates a new resource by PUTting the given object to URI template._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PUT, may be {@code null}_@param urlVariables the variables to expand the template_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#put(java.lang.String, java.lang.Object, java.util.Map);public void put(String url, Object request, Map<String, ?> urlVariables)_			throws RestClientException {_		this.restTemplate.put(url, request, urlVariables)__	};creates,a,new,resource,by,putting,the,given,object,to,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,put,may,be,code,null,param,url,variables,the,variables,to,expand,the,template,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,put,java,lang,string,java,lang,object,java,util,map;public,void,put,string,url,object,request,map,string,url,variables,throws,rest,client,exception,this,rest,template,put,url,request,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) 			throws RestClientException;1507173536;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.util.Map);public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,util,map;public,set,http,method,options,for,allow,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) 			throws RestClientException;1510488910;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.util.Map);public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,util,map;public,set,http,method,options,for,allow,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) 			throws RestClientException;1516867699;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.util.Map);public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,util,map;public,set,http,method,options,for,allow,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518087233;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.util.Map);public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,util,map;public,set,http,method,options,for,allow,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518451035;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.util.Map);public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,util,map;public,set,http,method,options,for,allow,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518458586;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.util.Map);public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,util,map;public,set,http,method,options,for,allow,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518780587;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.util.Map);public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,util,map;public,set,http,method,options,for,allow,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518816980;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.util.Map);public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,util,map;public,set,http,method,options,for,allow,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518833514;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.util.Map);public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,util,map;public,set,http,method,options,for,allow,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) 			throws RestClientException;1521068433;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.util.Map);public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,util,map;public,set,http,method,options,for,allow,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) 			throws RestClientException;1525416882;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.util.Map);public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,util,map;public,set,http,method,options,for,allow,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) 			throws RestClientException;1532738143;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.util.Map);public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,util,map;public,set,http,method,options,for,allow,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) 			throws RestClientException;1539678128;Return the value of the Allow header for the given URI._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the variables to expand in the template_@return the value of the allow header_@throws RestClientException on client-side HTTP error_@see RestTemplate#optionsForAllow(java.lang.String, java.util.Map);public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.optionsForAllow(url, urlVariables)__	};return,the,value,of,the,allow,header,for,the,given,uri,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,variables,to,expand,in,the,template,return,the,value,of,the,allow,header,throws,rest,client,exception,on,client,side,http,error,see,rest,template,options,for,allow,java,lang,string,java,util,map;public,set,http,method,options,for,allow,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,options,for,allow,url,url,variables
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username, 			String password, HttpClientOption... httpClientOptions);1518458586;Create a new {@link TestRestTemplate} instance with the specified credentials._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used_@since 2.0.0;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username,_			String password, HttpClientOption... httpClientOptions) {_		this(buildRestTemplate(restTemplateBuilder), username, password,_				httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used,since,2,0,0;public,test,rest,template,rest,template,builder,rest,template,builder,string,username,string,password,http,client,option,http,client,options,this,build,rest,template,rest,template,builder,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username, 			String password, HttpClientOption... httpClientOptions);1518780587;Create a new {@link TestRestTemplate} instance with the specified credentials._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used_@since 2.0.0;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username,_			String password, HttpClientOption... httpClientOptions) {_		this(buildRestTemplate(restTemplateBuilder), username, password,_				httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used,since,2,0,0;public,test,rest,template,rest,template,builder,rest,template,builder,string,username,string,password,http,client,option,http,client,options,this,build,rest,template,rest,template,builder,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username, 			String password, HttpClientOption... httpClientOptions);1518816980;Create a new {@link TestRestTemplate} instance with the specified credentials._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used_@since 2.0.0;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username,_			String password, HttpClientOption... httpClientOptions) {_		this(buildRestTemplate(restTemplateBuilder), username, password,_				httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used,since,2,0,0;public,test,rest,template,rest,template,builder,rest,template,builder,string,username,string,password,http,client,option,http,client,options,this,build,rest,template,rest,template,builder,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username, 			String password, HttpClientOption... httpClientOptions);1518833514;Create a new {@link TestRestTemplate} instance with the specified credentials._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used_@since 2.0.0;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username,_			String password, HttpClientOption... httpClientOptions) {_		this(restTemplateBuilder == null ? null : restTemplateBuilder.build(), username,_				password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used,since,2,0,0;public,test,rest,template,rest,template,builder,rest,template,builder,string,username,string,password,http,client,option,http,client,options,this,rest,template,builder,null,null,rest,template,builder,build,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username, 			String password, HttpClientOption... httpClientOptions);1521068433;Create a new {@link TestRestTemplate} instance with the specified credentials._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used_@since 2.0.0;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username,_			String password, HttpClientOption... httpClientOptions) {_		this(restTemplateBuilder == null ? null : restTemplateBuilder.build(), username,_				password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used,since,2,0,0;public,test,rest,template,rest,template,builder,rest,template,builder,string,username,string,password,http,client,option,http,client,options,this,rest,template,builder,null,null,rest,template,builder,build,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username, 			String password, HttpClientOption... httpClientOptions);1525416882;Create a new {@link TestRestTemplate} instance with the specified credentials._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used_@since 2.0.0;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username,_			String password, HttpClientOption... httpClientOptions) {_		this(restTemplateBuilder != null ? restTemplateBuilder.build() : null, username,_				password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used,since,2,0,0;public,test,rest,template,rest,template,builder,rest,template,builder,string,username,string,password,http,client,option,http,client,options,this,rest,template,builder,null,rest,template,builder,build,null,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username, 			String password, HttpClientOption... httpClientOptions);1532738143;Create a new {@link TestRestTemplate} instance with the specified credentials._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used_@since 2.0.0;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username,_			String password, HttpClientOption... httpClientOptions) {_		this((restTemplateBuilder != null) ? restTemplateBuilder.build() : null, username,_				password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used,since,2,0,0;public,test,rest,template,rest,template,builder,rest,template,builder,string,username,string,password,http,client,option,http,client,options,this,rest,template,builder,null,rest,template,builder,build,null,username,password,http,client,options
TestRestTemplate -> public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username, 			String password, HttpClientOption... httpClientOptions);1539678128;Create a new {@link TestRestTemplate} instance with the specified credentials._@param restTemplateBuilder builder used to configure underlying_{@link RestTemplate}_@param username the username to use (or {@code null})_@param password the password (or {@code null})_@param httpClientOptions client options to use if the Apache HTTP Client is used_@since 2.0.0;public TestRestTemplate(RestTemplateBuilder restTemplateBuilder, String username,_			String password, HttpClientOption... httpClientOptions) {_		this((restTemplateBuilder != null) ? restTemplateBuilder.build() : null, username,_				password, httpClientOptions)__	};create,a,new,link,test,rest,template,instance,with,the,specified,credentials,param,rest,template,builder,builder,used,to,configure,underlying,link,rest,template,param,username,the,username,to,use,or,code,null,param,password,the,password,or,code,null,param,http,client,options,client,options,to,use,if,the,apache,http,client,is,used,since,2,0,0;public,test,rest,template,rest,template,builder,rest,template,builder,string,username,string,password,http,client,option,http,client,options,this,rest,template,builder,null,rest,template,builder,build,null,username,password,http,client,options
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException;1507173536;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException;1510488910;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException;1516867699;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException;1518087233;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException;1518451035;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException;1518458586;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException;1518780587;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException;1518816980;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException;1518833514;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException;1521068433;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException;1525416882;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException;1532738143;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public <T> T patchForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> uriVariables) throws RestClientException;1539678128;Update a resource by PATCHing the given object to the URI template, and returns the_representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be PATCHed, may be {@code null}_@param responseType the type of the return value_@param uriVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@since 1.4.4_@see HttpEntity;public <T> T patchForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> uriVariables) throws RestClientException {_		return this.restTemplate.patchForObject(url, request, responseType, uriVariables)__	};update,a,resource,by,patching,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,patched,may,be,code,null,param,response,type,the,type,of,the,return,value,param,uri,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,since,1,4,4,see,http,entity;public,t,t,patch,for,object,string,url,object,request,class,t,response,type,map,string,uri,variables,throws,rest,client,exception,return,this,rest,template,patch,for,object,url,request,response,type,uri,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) 			throws RestClientException;1507173536;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the map containing variables for the URI template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.util.Map);public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,util,map;public,http,headers,head,for,headers,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) 			throws RestClientException;1510488910;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the map containing variables for the URI template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.util.Map);public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,util,map;public,http,headers,head,for,headers,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) 			throws RestClientException;1516867699;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the map containing variables for the URI template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.util.Map);public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,util,map;public,http,headers,head,for,headers,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518087233;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the map containing variables for the URI template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.util.Map);public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,util,map;public,http,headers,head,for,headers,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518451035;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the map containing variables for the URI template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.util.Map);public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,util,map;public,http,headers,head,for,headers,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518458586;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the map containing variables for the URI template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.util.Map);public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,util,map;public,http,headers,head,for,headers,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518780587;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the map containing variables for the URI template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.util.Map);public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,util,map;public,http,headers,head,for,headers,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518816980;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the map containing variables for the URI template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.util.Map);public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,util,map;public,http,headers,head,for,headers,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) 			throws RestClientException;1518833514;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the map containing variables for the URI template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.util.Map);public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,util,map;public,http,headers,head,for,headers,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) 			throws RestClientException;1521068433;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the map containing variables for the URI template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.util.Map);public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,util,map;public,http,headers,head,for,headers,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) 			throws RestClientException;1525416882;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the map containing variables for the URI template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.util.Map);public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,util,map;public,http,headers,head,for,headers,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) 			throws RestClientException;1532738143;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the map containing variables for the URI template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.util.Map);public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,util,map;public,http,headers,head,for,headers,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) 			throws RestClientException;1539678128;Retrieve all headers of the resource specified by the URI template._<p>_URI Template variables are expanded using the given map._@param url the URL_@param urlVariables the map containing variables for the URI template_@return all HTTP headers of that resource_@throws RestClientException on client-side HTTP error_@see RestTemplate#headForHeaders(java.lang.String, java.util.Map);public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables)_			throws RestClientException {_		return this.restTemplate.headForHeaders(url, urlVariables)__	};retrieve,all,headers,of,the,resource,specified,by,the,uri,template,p,uri,template,variables,are,expanded,using,the,given,map,param,url,the,url,param,url,variables,the,map,containing,variables,for,the,uri,template,return,all,http,headers,of,that,resource,throws,rest,client,exception,on,client,side,http,error,see,rest,template,head,for,headers,java,lang,string,java,util,map;public,http,headers,head,for,headers,string,url,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,head,for,headers,url,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1518087233;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1518451035;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1518458586;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1518780587;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1518816980;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1518833514;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1521068433;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1525416882;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1532738143;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables) 			throws RestClientException;1539678128;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}._<p>_URI Template variables are expanded using the given URI variables, if any._@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity, java.lang.Class, java.lang.Object[]);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, Class<T> responseType, Object... urlVariables)_			throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,p,uri,template,variables,are,expanded,using,the,given,uri,variables,if,any,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,java,lang,class,java,lang,object;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,class,t,response,type,object,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public void setUriTemplateHandler(UriTemplateHandler handler);1507173536;Configure the {@link UriTemplateHandler} to use to expand URI templates. By default_the {@link DefaultUriBuilderFactory} is used which relies on Spring's URI template_support and exposes several useful properties that customize its behavior for_encoding and for prepending a common base URL. An alternative implementation may be_used to plug an external URI template library._@param handler the URI template handler to use;public void setUriTemplateHandler(UriTemplateHandler handler) {_		this.restTemplate.setUriTemplateHandler(handler)__	};configure,the,link,uri,template,handler,to,use,to,expand,uri,templates,by,default,the,link,default,uri,builder,factory,is,used,which,relies,on,spring,s,uri,template,support,and,exposes,several,useful,properties,that,customize,its,behavior,for,encoding,and,for,prepending,a,common,base,url,an,alternative,implementation,may,be,used,to,plug,an,external,uri,template,library,param,handler,the,uri,template,handler,to,use;public,void,set,uri,template,handler,uri,template,handler,handler,this,rest,template,set,uri,template,handler,handler
TestRestTemplate -> public void setUriTemplateHandler(UriTemplateHandler handler);1510488910;Configure the {@link UriTemplateHandler} to use to expand URI templates. By default_the {@link DefaultUriBuilderFactory} is used which relies on Spring's URI template_support and exposes several useful properties that customize its behavior for_encoding and for prepending a common base URL. An alternative implementation may be_used to plug an external URI template library._@param handler the URI template handler to use;public void setUriTemplateHandler(UriTemplateHandler handler) {_		this.restTemplate.setUriTemplateHandler(handler)__	};configure,the,link,uri,template,handler,to,use,to,expand,uri,templates,by,default,the,link,default,uri,builder,factory,is,used,which,relies,on,spring,s,uri,template,support,and,exposes,several,useful,properties,that,customize,its,behavior,for,encoding,and,for,prepending,a,common,base,url,an,alternative,implementation,may,be,used,to,plug,an,external,uri,template,library,param,handler,the,uri,template,handler,to,use;public,void,set,uri,template,handler,uri,template,handler,handler,this,rest,template,set,uri,template,handler,handler
TestRestTemplate -> public void setUriTemplateHandler(UriTemplateHandler handler);1516867699;Configure the {@link UriTemplateHandler} to use to expand URI templates. By default_the {@link DefaultUriBuilderFactory} is used which relies on Spring's URI template_support and exposes several useful properties that customize its behavior for_encoding and for prepending a common base URL. An alternative implementation may be_used to plug an external URI template library._@param handler the URI template handler to use;public void setUriTemplateHandler(UriTemplateHandler handler) {_		this.restTemplate.setUriTemplateHandler(handler)__	};configure,the,link,uri,template,handler,to,use,to,expand,uri,templates,by,default,the,link,default,uri,builder,factory,is,used,which,relies,on,spring,s,uri,template,support,and,exposes,several,useful,properties,that,customize,its,behavior,for,encoding,and,for,prepending,a,common,base,url,an,alternative,implementation,may,be,used,to,plug,an,external,uri,template,library,param,handler,the,uri,template,handler,to,use;public,void,set,uri,template,handler,uri,template,handler,handler,this,rest,template,set,uri,template,handler,handler
TestRestTemplate -> public void setUriTemplateHandler(UriTemplateHandler handler);1518087233;Configure the {@link UriTemplateHandler} to use to expand URI templates. By default_the {@link DefaultUriBuilderFactory} is used which relies on Spring's URI template_support and exposes several useful properties that customize its behavior for_encoding and for prepending a common base URL. An alternative implementation may be_used to plug an external URI template library._@param handler the URI template handler to use;public void setUriTemplateHandler(UriTemplateHandler handler) {_		this.restTemplate.setUriTemplateHandler(handler)__	};configure,the,link,uri,template,handler,to,use,to,expand,uri,templates,by,default,the,link,default,uri,builder,factory,is,used,which,relies,on,spring,s,uri,template,support,and,exposes,several,useful,properties,that,customize,its,behavior,for,encoding,and,for,prepending,a,common,base,url,an,alternative,implementation,may,be,used,to,plug,an,external,uri,template,library,param,handler,the,uri,template,handler,to,use;public,void,set,uri,template,handler,uri,template,handler,handler,this,rest,template,set,uri,template,handler,handler
TestRestTemplate -> public void setUriTemplateHandler(UriTemplateHandler handler);1518451035;Configure the {@link UriTemplateHandler} to use to expand URI templates. By default_the {@link DefaultUriBuilderFactory} is used which relies on Spring's URI template_support and exposes several useful properties that customize its behavior for_encoding and for prepending a common base URL. An alternative implementation may be_used to plug an external URI template library._@param handler the URI template handler to use;public void setUriTemplateHandler(UriTemplateHandler handler) {_		this.restTemplate.setUriTemplateHandler(handler)__	};configure,the,link,uri,template,handler,to,use,to,expand,uri,templates,by,default,the,link,default,uri,builder,factory,is,used,which,relies,on,spring,s,uri,template,support,and,exposes,several,useful,properties,that,customize,its,behavior,for,encoding,and,for,prepending,a,common,base,url,an,alternative,implementation,may,be,used,to,plug,an,external,uri,template,library,param,handler,the,uri,template,handler,to,use;public,void,set,uri,template,handler,uri,template,handler,handler,this,rest,template,set,uri,template,handler,handler
TestRestTemplate -> public void setUriTemplateHandler(UriTemplateHandler handler);1518458586;Configure the {@link UriTemplateHandler} to use to expand URI templates. By default_the {@link DefaultUriBuilderFactory} is used which relies on Spring's URI template_support and exposes several useful properties that customize its behavior for_encoding and for prepending a common base URL. An alternative implementation may be_used to plug an external URI template library._@param handler the URI template handler to use;public void setUriTemplateHandler(UriTemplateHandler handler) {_		this.restTemplate.setUriTemplateHandler(handler)__	};configure,the,link,uri,template,handler,to,use,to,expand,uri,templates,by,default,the,link,default,uri,builder,factory,is,used,which,relies,on,spring,s,uri,template,support,and,exposes,several,useful,properties,that,customize,its,behavior,for,encoding,and,for,prepending,a,common,base,url,an,alternative,implementation,may,be,used,to,plug,an,external,uri,template,library,param,handler,the,uri,template,handler,to,use;public,void,set,uri,template,handler,uri,template,handler,handler,this,rest,template,set,uri,template,handler,handler
TestRestTemplate -> public void setUriTemplateHandler(UriTemplateHandler handler);1518780587;Configure the {@link UriTemplateHandler} to use to expand URI templates. By default_the {@link DefaultUriBuilderFactory} is used which relies on Spring's URI template_support and exposes several useful properties that customize its behavior for_encoding and for prepending a common base URL. An alternative implementation may be_used to plug an external URI template library._@param handler the URI template handler to use;public void setUriTemplateHandler(UriTemplateHandler handler) {_		this.restTemplate.setUriTemplateHandler(handler)__	};configure,the,link,uri,template,handler,to,use,to,expand,uri,templates,by,default,the,link,default,uri,builder,factory,is,used,which,relies,on,spring,s,uri,template,support,and,exposes,several,useful,properties,that,customize,its,behavior,for,encoding,and,for,prepending,a,common,base,url,an,alternative,implementation,may,be,used,to,plug,an,external,uri,template,library,param,handler,the,uri,template,handler,to,use;public,void,set,uri,template,handler,uri,template,handler,handler,this,rest,template,set,uri,template,handler,handler
TestRestTemplate -> public void setUriTemplateHandler(UriTemplateHandler handler);1518816980;Configure the {@link UriTemplateHandler} to use to expand URI templates. By default_the {@link DefaultUriBuilderFactory} is used which relies on Spring's URI template_support and exposes several useful properties that customize its behavior for_encoding and for prepending a common base URL. An alternative implementation may be_used to plug an external URI template library._@param handler the URI template handler to use;public void setUriTemplateHandler(UriTemplateHandler handler) {_		this.restTemplate.setUriTemplateHandler(handler)__	};configure,the,link,uri,template,handler,to,use,to,expand,uri,templates,by,default,the,link,default,uri,builder,factory,is,used,which,relies,on,spring,s,uri,template,support,and,exposes,several,useful,properties,that,customize,its,behavior,for,encoding,and,for,prepending,a,common,base,url,an,alternative,implementation,may,be,used,to,plug,an,external,uri,template,library,param,handler,the,uri,template,handler,to,use;public,void,set,uri,template,handler,uri,template,handler,handler,this,rest,template,set,uri,template,handler,handler
TestRestTemplate -> public void setUriTemplateHandler(UriTemplateHandler handler);1518833514;Configure the {@link UriTemplateHandler} to use to expand URI templates. By default_the {@link DefaultUriBuilderFactory} is used which relies on Spring's URI template_support and exposes several useful properties that customize its behavior for_encoding and for prepending a common base URL. An alternative implementation may be_used to plug an external URI template library._@param handler the URI template handler to use;public void setUriTemplateHandler(UriTemplateHandler handler) {_		this.restTemplate.setUriTemplateHandler(handler)__	};configure,the,link,uri,template,handler,to,use,to,expand,uri,templates,by,default,the,link,default,uri,builder,factory,is,used,which,relies,on,spring,s,uri,template,support,and,exposes,several,useful,properties,that,customize,its,behavior,for,encoding,and,for,prepending,a,common,base,url,an,alternative,implementation,may,be,used,to,plug,an,external,uri,template,library,param,handler,the,uri,template,handler,to,use;public,void,set,uri,template,handler,uri,template,handler,handler,this,rest,template,set,uri,template,handler,handler
TestRestTemplate -> public void setUriTemplateHandler(UriTemplateHandler handler);1521068433;Configure the {@link UriTemplateHandler} to use to expand URI templates. By default_the {@link DefaultUriBuilderFactory} is used which relies on Spring's URI template_support and exposes several useful properties that customize its behavior for_encoding and for prepending a common base URL. An alternative implementation may be_used to plug an external URI template library._@param handler the URI template handler to use;public void setUriTemplateHandler(UriTemplateHandler handler) {_		this.restTemplate.setUriTemplateHandler(handler)__	};configure,the,link,uri,template,handler,to,use,to,expand,uri,templates,by,default,the,link,default,uri,builder,factory,is,used,which,relies,on,spring,s,uri,template,support,and,exposes,several,useful,properties,that,customize,its,behavior,for,encoding,and,for,prepending,a,common,base,url,an,alternative,implementation,may,be,used,to,plug,an,external,uri,template,library,param,handler,the,uri,template,handler,to,use;public,void,set,uri,template,handler,uri,template,handler,handler,this,rest,template,set,uri,template,handler,handler
TestRestTemplate -> public void setUriTemplateHandler(UriTemplateHandler handler);1525416882;Configure the {@link UriTemplateHandler} to use to expand URI templates. By default_the {@link DefaultUriBuilderFactory} is used which relies on Spring's URI template_support and exposes several useful properties that customize its behavior for_encoding and for prepending a common base URL. An alternative implementation may be_used to plug an external URI template library._@param handler the URI template handler to use;public void setUriTemplateHandler(UriTemplateHandler handler) {_		this.restTemplate.setUriTemplateHandler(handler)__	};configure,the,link,uri,template,handler,to,use,to,expand,uri,templates,by,default,the,link,default,uri,builder,factory,is,used,which,relies,on,spring,s,uri,template,support,and,exposes,several,useful,properties,that,customize,its,behavior,for,encoding,and,for,prepending,a,common,base,url,an,alternative,implementation,may,be,used,to,plug,an,external,uri,template,library,param,handler,the,uri,template,handler,to,use;public,void,set,uri,template,handler,uri,template,handler,handler,this,rest,template,set,uri,template,handler,handler
TestRestTemplate -> public void setUriTemplateHandler(UriTemplateHandler handler);1532738143;Configure the {@link UriTemplateHandler} to use to expand URI templates. By default_the {@link DefaultUriBuilderFactory} is used which relies on Spring's URI template_support and exposes several useful properties that customize its behavior for_encoding and for prepending a common base URL. An alternative implementation may be_used to plug an external URI template library._@param handler the URI template handler to use;public void setUriTemplateHandler(UriTemplateHandler handler) {_		this.restTemplate.setUriTemplateHandler(handler)__	};configure,the,link,uri,template,handler,to,use,to,expand,uri,templates,by,default,the,link,default,uri,builder,factory,is,used,which,relies,on,spring,s,uri,template,support,and,exposes,several,useful,properties,that,customize,its,behavior,for,encoding,and,for,prepending,a,common,base,url,an,alternative,implementation,may,be,used,to,plug,an,external,uri,template,library,param,handler,the,uri,template,handler,to,use;public,void,set,uri,template,handler,uri,template,handler,handler,this,rest,template,set,uri,template,handler,handler
TestRestTemplate -> public void setUriTemplateHandler(UriTemplateHandler handler);1539678128;Configure the {@link UriTemplateHandler} to use to expand URI templates. By default_the {@link DefaultUriBuilderFactory} is used which relies on Spring's URI template_support and exposes several useful properties that customize its behavior for_encoding and for prepending a common base URL. An alternative implementation may be_used to plug an external URI template library._@param handler the URI template handler to use;public void setUriTemplateHandler(UriTemplateHandler handler) {_		this.restTemplate.setUriTemplateHandler(handler)__	};configure,the,link,uri,template,handler,to,use,to,expand,uri,templates,by,default,the,link,default,uri,builder,factory,is,used,which,relies,on,spring,s,uri,template,support,and,exposes,several,useful,properties,that,customize,its,behavior,for,encoding,and,for,prepending,a,common,base,url,an,alternative,implementation,may,be,used,to,plug,an,external,uri,template,library,param,handler,the,uri,template,handler,to,use;public,void,set,uri,template,handler,uri,template,handler,handler,this,rest,template,set,uri,template,handler,handler
TestRestTemplate -> public URI postForLocation(URI url, Object request) throws RestClientException;1507173536;Create a new resource by POSTing the given object to the URL, and returns the value_of the {@code Location} header. This header typically indicates where the new_resource is stored._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.net.URI, java.lang.Object);public URI postForLocation(URI url, Object request) throws RestClientException {_		return this.restTemplate.postForLocation(applyRootUriIfNecessary(url), request)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,net,uri,java,lang,object;public,uri,post,for,location,uri,url,object,request,throws,rest,client,exception,return,this,rest,template,post,for,location,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public URI postForLocation(URI url, Object request) throws RestClientException;1510488910;Create a new resource by POSTing the given object to the URL, and returns the value_of the {@code Location} header. This header typically indicates where the new_resource is stored._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.net.URI, java.lang.Object);public URI postForLocation(URI url, Object request) throws RestClientException {_		return this.restTemplate.postForLocation(applyRootUriIfNecessary(url), request)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,net,uri,java,lang,object;public,uri,post,for,location,uri,url,object,request,throws,rest,client,exception,return,this,rest,template,post,for,location,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public URI postForLocation(URI url, Object request) throws RestClientException;1516867699;Create a new resource by POSTing the given object to the URL, and returns the value_of the {@code Location} header. This header typically indicates where the new_resource is stored._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.net.URI, java.lang.Object);public URI postForLocation(URI url, Object request) throws RestClientException {_		return this.restTemplate.postForLocation(applyRootUriIfNecessary(url), request)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,net,uri,java,lang,object;public,uri,post,for,location,uri,url,object,request,throws,rest,client,exception,return,this,rest,template,post,for,location,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public URI postForLocation(URI url, Object request) throws RestClientException;1518087233;Create a new resource by POSTing the given object to the URL, and returns the value_of the {@code Location} header. This header typically indicates where the new_resource is stored._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.net.URI, java.lang.Object);public URI postForLocation(URI url, Object request) throws RestClientException {_		return this.restTemplate.postForLocation(applyRootUriIfNecessary(url), request)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,net,uri,java,lang,object;public,uri,post,for,location,uri,url,object,request,throws,rest,client,exception,return,this,rest,template,post,for,location,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public URI postForLocation(URI url, Object request) throws RestClientException;1518451035;Create a new resource by POSTing the given object to the URL, and returns the value_of the {@code Location} header. This header typically indicates where the new_resource is stored._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.net.URI, java.lang.Object);public URI postForLocation(URI url, Object request) throws RestClientException {_		return this.restTemplate.postForLocation(applyRootUriIfNecessary(url), request)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,net,uri,java,lang,object;public,uri,post,for,location,uri,url,object,request,throws,rest,client,exception,return,this,rest,template,post,for,location,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public URI postForLocation(URI url, Object request) throws RestClientException;1518458586;Create a new resource by POSTing the given object to the URL, and returns the value_of the {@code Location} header. This header typically indicates where the new_resource is stored._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.net.URI, java.lang.Object);public URI postForLocation(URI url, Object request) throws RestClientException {_		return this.restTemplate.postForLocation(applyRootUriIfNecessary(url), request)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,net,uri,java,lang,object;public,uri,post,for,location,uri,url,object,request,throws,rest,client,exception,return,this,rest,template,post,for,location,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public URI postForLocation(URI url, Object request) throws RestClientException;1518780587;Create a new resource by POSTing the given object to the URL, and returns the value_of the {@code Location} header. This header typically indicates where the new_resource is stored._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.net.URI, java.lang.Object);public URI postForLocation(URI url, Object request) throws RestClientException {_		return this.restTemplate.postForLocation(applyRootUriIfNecessary(url), request)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,net,uri,java,lang,object;public,uri,post,for,location,uri,url,object,request,throws,rest,client,exception,return,this,rest,template,post,for,location,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public URI postForLocation(URI url, Object request) throws RestClientException;1518816980;Create a new resource by POSTing the given object to the URL, and returns the value_of the {@code Location} header. This header typically indicates where the new_resource is stored._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.net.URI, java.lang.Object);public URI postForLocation(URI url, Object request) throws RestClientException {_		return this.restTemplate.postForLocation(applyRootUriIfNecessary(url), request)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,net,uri,java,lang,object;public,uri,post,for,location,uri,url,object,request,throws,rest,client,exception,return,this,rest,template,post,for,location,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public URI postForLocation(URI url, Object request) throws RestClientException;1518833514;Create a new resource by POSTing the given object to the URL, and returns the value_of the {@code Location} header. This header typically indicates where the new_resource is stored._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.net.URI, java.lang.Object);public URI postForLocation(URI url, Object request) throws RestClientException {_		return this.restTemplate.postForLocation(applyRootUriIfNecessary(url), request)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,net,uri,java,lang,object;public,uri,post,for,location,uri,url,object,request,throws,rest,client,exception,return,this,rest,template,post,for,location,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public URI postForLocation(URI url, Object request) throws RestClientException;1521068433;Create a new resource by POSTing the given object to the URL, and returns the value_of the {@code Location} header. This header typically indicates where the new_resource is stored._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.net.URI, java.lang.Object);public URI postForLocation(URI url, Object request) throws RestClientException {_		return this.restTemplate.postForLocation(applyRootUriIfNecessary(url), request)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,net,uri,java,lang,object;public,uri,post,for,location,uri,url,object,request,throws,rest,client,exception,return,this,rest,template,post,for,location,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public URI postForLocation(URI url, Object request) throws RestClientException;1525416882;Create a new resource by POSTing the given object to the URL, and returns the value_of the {@code Location} header. This header typically indicates where the new_resource is stored._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.net.URI, java.lang.Object);public URI postForLocation(URI url, Object request) throws RestClientException {_		return this.restTemplate.postForLocation(applyRootUriIfNecessary(url), request)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,net,uri,java,lang,object;public,uri,post,for,location,uri,url,object,request,throws,rest,client,exception,return,this,rest,template,post,for,location,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public URI postForLocation(URI url, Object request) throws RestClientException;1532738143;Create a new resource by POSTing the given object to the URL, and returns the value_of the {@code Location} header. This header typically indicates where the new_resource is stored._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.net.URI, java.lang.Object);public URI postForLocation(URI url, Object request) throws RestClientException {_		return this.restTemplate.postForLocation(applyRootUriIfNecessary(url), request)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,net,uri,java,lang,object;public,uri,post,for,location,uri,url,object,request,throws,rest,client,exception,return,this,rest,template,post,for,location,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public URI postForLocation(URI url, Object request) throws RestClientException;1539678128;Create a new resource by POSTing the given object to the URL, and returns the value_of the {@code Location} header. This header typically indicates where the new_resource is stored._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@return the value for the {@code Location} header_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForLocation(java.net.URI, java.lang.Object);public URI postForLocation(URI url, Object request) throws RestClientException {_		return this.restTemplate.postForLocation(applyRootUriIfNecessary(url), request)__	};create,a,new,resource,by,posting,the,given,object,to,the,url,and,returns,the,value,of,the,code,location,header,this,header,typically,indicates,where,the,new,resource,is,stored,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,return,the,value,for,the,code,location,header,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,location,java,net,uri,java,lang,object;public,uri,post,for,location,uri,url,object,request,throws,rest,client,exception,return,this,rest,template,post,for,location,apply,root,uri,if,necessary,url,request
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1507173536;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1510488910;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1516867699;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518087233;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518451035;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518458586;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518780587;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518816980;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518833514;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1521068433;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1525416882;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1532738143;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(String url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1539678128;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand in the template_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.lang.String, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference, java.util.Map);public <T> ResponseEntity<T> exchange(String url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.exchange(url, method, requestEntity, responseType,_				urlVariables)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,in,the,template,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,lang,string,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference,java,util,map;public,t,response,entity,t,exchange,string,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,exchange,url,method,request,entity,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1507173536;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,t,post,for,object,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1510488910;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,t,post,for,object,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1516867699;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,t,post,for,object,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518087233;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,t,post,for,object,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518451035;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,t,post,for,object,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518458586;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,t,post,for,object,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518780587;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,t,post,for,object,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518816980;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,t,post,for,object,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1518833514;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,t,post,for,object,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1521068433;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,t,post,for,object,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1525416882;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,t,post,for,object,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1532738143;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,t,post,for,object,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> T postForObject(String url, Object request, Class<T> responseType, 			Map<String, ?> urlVariables) throws RestClientException;1539678128;Create a new resource by POSTing the given object to the URI template, and returns_the representation found in the response._<p>_URI Template variables are expanded using the given map._<p>_The {@code request} parameter can be a {@link HttpEntity} in order to add_additional HTTP headers to the request._@param url the URL_@param request the Object to be POSTed, may be {@code null}_@param responseType the type of the return value_@param urlVariables the variables to expand the template_@param <T> the type of the return value_@return the converted object_@throws RestClientException on client-side HTTP error_@see HttpEntity_@see RestTemplate#postForObject(java.lang.String, java.lang.Object,_java.lang.Class, java.util.Map);public <T> T postForObject(String url, Object request, Class<T> responseType,_			Map<String, ?> urlVariables) throws RestClientException {_		return this.restTemplate.postForObject(url, request, responseType, urlVariables)__	};create,a,new,resource,by,posting,the,given,object,to,the,uri,template,and,returns,the,representation,found,in,the,response,p,uri,template,variables,are,expanded,using,the,given,map,p,the,code,request,parameter,can,be,a,link,http,entity,in,order,to,add,additional,http,headers,to,the,request,param,url,the,url,param,request,the,object,to,be,posted,may,be,code,null,param,response,type,the,type,of,the,return,value,param,url,variables,the,variables,to,expand,the,template,param,t,the,type,of,the,return,value,return,the,converted,object,throws,rest,client,exception,on,client,side,http,error,see,http,entity,see,rest,template,post,for,object,java,lang,string,java,lang,object,java,lang,class,java,util,map;public,t,t,post,for,object,string,url,object,request,class,t,response,type,map,string,url,variables,throws,rest,client,exception,return,this,rest,template,post,for,object,url,request,response,type,url,variables
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException;1518087233;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException;1518451035;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException;1518458586;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException;1518780587;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException;1518816980;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException;1518833514;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException;1521068433;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException;1525416882;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException;1532738143;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
TestRestTemplate -> public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, 			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) 			throws RestClientException;1539678128;Execute the HTTP method to the given URI template, writing the given request entity_to the request, and returns the response as {@link ResponseEntity}. The given_{@link ParameterizedTypeReference} is used to pass generic type information:_<pre class="code">_ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_ myBean = new ParameterizedTypeReference&lt_List&lt_MyBean&gt_&gt_() {}__ResponseEntity&lt_List&lt_MyBean&gt_&gt_ response = template.exchange(&quot_http://example.com&quot_,HttpMethod.GET, null, myBean)__</pre>_@param url the URL_@param method the HTTP method (GET, POST, etc)_@param requestEntity the entity (headers and/or body) to write to the request, may_be {@code null}_@param responseType the type of the return value_@param <T> the type of the return value_@return the response as entity_@throws RestClientException on client-side HTTP error_@see RestTemplate#exchange(java.net.URI, org.springframework.http.HttpMethod,_org.springframework.http.HttpEntity,_org.springframework.core.ParameterizedTypeReference);public <T> ResponseEntity<T> exchange(URI url, HttpMethod method,_			HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType)_			throws RestClientException {_		return this.restTemplate.exchange(applyRootUriIfNecessary(url), method,_				requestEntity, responseType)__	};execute,the,http,method,to,the,given,uri,template,writing,the,given,request,entity,to,the,request,and,returns,the,response,as,link,response,entity,the,given,link,parameterized,type,reference,is,used,to,pass,generic,type,information,pre,class,code,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,my,bean,new,parameterized,type,reference,lt,list,lt,my,bean,gt,gt,response,entity,lt,list,lt,my,bean,gt,gt,response,template,exchange,quot,http,example,com,quot,http,method,get,null,my,bean,pre,param,url,the,url,param,method,the,http,method,get,post,etc,param,request,entity,the,entity,headers,and,or,body,to,write,to,the,request,may,be,code,null,param,response,type,the,type,of,the,return,value,param,t,the,type,of,the,return,value,return,the,response,as,entity,throws,rest,client,exception,on,client,side,http,error,see,rest,template,exchange,java,net,uri,org,springframework,http,http,method,org,springframework,http,http,entity,org,springframework,core,parameterized,type,reference;public,t,response,entity,t,exchange,uri,url,http,method,method,http,entity,request,entity,parameterized,type,reference,t,response,type,throws,rest,client,exception,return,this,rest,template,exchange,apply,root,uri,if,necessary,url,method,request,entity,response,type
