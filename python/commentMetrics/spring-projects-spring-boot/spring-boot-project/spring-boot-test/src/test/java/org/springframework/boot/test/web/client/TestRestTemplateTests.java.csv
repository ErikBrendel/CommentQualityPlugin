commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void fromRestTemplateBuilder() {     RestTemplateBuilder builder = mock(RestTemplateBuilder.class).     RestTemplate delegate = new RestTemplate().     given(builder.build()).willReturn(delegate).     assertThat(new TestRestTemplate(builder).getRestTemplate()).isEqualTo(delegate). }
false;public;0;6;;@Test public void simple() {     // The Apache client is on the classpath so we get the fully-fledged factory     assertThat(new TestRestTemplate().getRestTemplate().getRequestFactory()).isInstanceOf(HttpComponentsClientHttpRequestFactory.class). }
false;public;0;8;;@Test public void doNotReplaceCustomRequestFactory() {     RestTemplateBuilder builder = new RestTemplateBuilder().requestFactory(OkHttp3ClientHttpRequestFactory.class).     TestRestTemplate testRestTemplate = new TestRestTemplate(builder).     assertThat(testRestTemplate.getRestTemplate().getRequestFactory()).isInstanceOf(OkHttp3ClientHttpRequestFactory.class). }
false;public;0;6;;@Test public void getRootUriRootUriSetViaRestTemplateBuilder() {     String rootUri = "http://example.com".     RestTemplateBuilder delegate = new RestTemplateBuilder().rootUri(rootUri).     assertThat(new TestRestTemplate(delegate).getRootUri()).isEqualTo(rootUri). }
false;public;0;10;;@Test public void getRootUriRootUriSetViaLocalHostUriTemplateHandler() {     String rootUri = "http://example.com".     TestRestTemplate template = new TestRestTemplate().     LocalHostUriTemplateHandler templateHandler = mock(LocalHostUriTemplateHandler.class).     given(templateHandler.getRootUri()).willReturn(rootUri).     template.setUriTemplateHandler(templateHandler).     assertThat(template.getRootUri()).isEqualTo(rootUri). }
false;public;0;4;;@Test public void getRootUriRootUriNotSet() {     assertThat(new TestRestTemplate().getRootUri()).isEqualTo(""). }
false;public;0;6;;@Test public void authenticated() {     assertThat(new TestRestTemplate("user", "password").getRestTemplate().getRequestFactory()).isInstanceOf(InterceptingClientHttpRequestFactory.class). }
false;public;0;9;;@Test public void options() {     TestRestTemplate template = new TestRestTemplate(HttpClientOption.ENABLE_REDIRECTS).     CustomHttpComponentsClientHttpRequestFactory factory = (CustomHttpComponentsClientHttpRequestFactory) template.getRestTemplate().getRequestFactory().     RequestConfig config = factory.getRequestConfig().     assertThat(config.isRedirectsEnabled()).isTrue(). }
false;public;1;15;;@Override public void doWith(Method method) throws IllegalArgumentException {     Method equivalent = ReflectionUtils.findMethod(TestRestTemplate.class, method.getName(), method.getParameterTypes()).     assertThat(equivalent).as("Method %s not found", method).isNotNull().     assertThat(Modifier.isPublic(equivalent.getModifiers())).as("Method %s should have been public", equivalent).isTrue().     try {         equivalent.invoke(restTemplate, mockArguments(method.getParameterTypes())).     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
false;private;1;7;;private Object[] mockArguments(Class<?>[] parameterTypes) throws Exception {     Object[] arguments = new Object[parameterTypes.length].     for (int i = 0. i < parameterTypes.length. i++) {         arguments[i] = mockArgument(parameterTypes[i]).     }     return arguments. }
false;private;1;22;;@SuppressWarnings("rawtypes") private Object mockArgument(Class<?> type) throws Exception {     if (String.class.equals(type)) {         return "String".     }     if (Object[].class.equals(type)) {         return new Object[0].     }     if (URI.class.equals(type)) {         return new URI("http://localhost").     }     if (HttpMethod.class.equals(type)) {         return HttpMethod.GET.     }     if (Class.class.equals(type)) {         return Object.class.     }     if (RequestEntity.class.equals(type)) {         return new RequestEntity(HttpMethod.GET, new URI("http://localhost")).     }     return mock(type). }
false;public;0;62;;@Test public void restOperationsAreAvailable() {     RestTemplate delegate = mock(RestTemplate.class).     given(delegate.getRequestFactory()).willReturn(new SimpleClientHttpRequestFactory()).     given(delegate.getUriTemplateHandler()).willReturn(new DefaultUriBuilderFactory()).     RestTemplateBuilder builder = mock(RestTemplateBuilder.class).     given(builder.build()).willReturn(delegate).     TestRestTemplate restTemplate = new TestRestTemplate(builder).     ReflectionUtils.doWithMethods(RestOperations.class, new MethodCallback() {          @Override         public void doWith(Method method) throws IllegalArgumentException {             Method equivalent = ReflectionUtils.findMethod(TestRestTemplate.class, method.getName(), method.getParameterTypes()).             assertThat(equivalent).as("Method %s not found", method).isNotNull().             assertThat(Modifier.isPublic(equivalent.getModifiers())).as("Method %s should have been public", equivalent).isTrue().             try {                 equivalent.invoke(restTemplate, mockArguments(method.getParameterTypes())).             } catch (Exception ex) {                 throw new IllegalStateException(ex).             }         }          private Object[] mockArguments(Class<?>[] parameterTypes) throws Exception {             Object[] arguments = new Object[parameterTypes.length].             for (int i = 0. i < parameterTypes.length. i++) {                 arguments[i] = mockArgument(parameterTypes[i]).             }             return arguments.         }          @SuppressWarnings("rawtypes")         private Object mockArgument(Class<?> type) throws Exception {             if (String.class.equals(type)) {                 return "String".             }             if (Object[].class.equals(type)) {                 return new Object[0].             }             if (URI.class.equals(type)) {                 return new URI("http://localhost").             }             if (HttpMethod.class.equals(type)) {                 return HttpMethod.GET.             }             if (Class.class.equals(type)) {                 return Object.class.             }             if (RequestEntity.class.equals(type)) {                 return new RequestEntity(HttpMethod.GET, new URI("http://localhost")).             }             return mock(type).         }     }, (method) -> Modifier.isPublic(method.getModifiers())). }
false;public;0;20;;@Test public void withBasicAuthAddsBasicAuthInterceptorWhenNotAlreadyPresent() {     TestRestTemplate originalTemplate = new TestRestTemplate().     TestRestTemplate basicAuthTemplate = originalTemplate.withBasicAuth("user", "password").     assertThat(basicAuthTemplate.getRestTemplate().getMessageConverters()).containsExactlyElementsOf(originalTemplate.getRestTemplate().getMessageConverters()).     assertThat(basicAuthTemplate.getRestTemplate().getRequestFactory()).isInstanceOf(InterceptingClientHttpRequestFactory.class).     assertThat(ReflectionTestUtils.getField(basicAuthTemplate.getRestTemplate().getRequestFactory(), "requestFactory")).isInstanceOf(CustomHttpComponentsClientHttpRequestFactory.class).     assertThat(basicAuthTemplate.getRestTemplate().getUriTemplateHandler()).isSameAs(originalTemplate.getRestTemplate().getUriTemplateHandler()).     assertThat(basicAuthTemplate.getRestTemplate().getInterceptors()).hasSize(1).     assertBasicAuthorizationInterceptorCredentials(basicAuthTemplate, "user", "password"). }
false;public;0;18;;@Test public void withBasicAuthReplacesBasicAuthInterceptorWhenAlreadyPresent() {     TestRestTemplate original = new TestRestTemplate("foo", "bar").withBasicAuth("replace", "replace").     TestRestTemplate basicAuth = original.withBasicAuth("user", "password").     assertThat(basicAuth.getRestTemplate().getMessageConverters()).containsExactlyElementsOf(original.getRestTemplate().getMessageConverters()).     assertThat(basicAuth.getRestTemplate().getRequestFactory()).isInstanceOf(InterceptingClientHttpRequestFactory.class).     assertThat(ReflectionTestUtils.getField(basicAuth.getRestTemplate().getRequestFactory(), "requestFactory")).isInstanceOf(CustomHttpComponentsClientHttpRequestFactory.class).     assertThat(basicAuth.getRestTemplate().getUriTemplateHandler()).isSameAs(original.getRestTemplate().getUriTemplateHandler()).     assertThat(basicAuth.getRestTemplate().getInterceptors()).hasSize(1).     assertBasicAuthorizationInterceptorCredentials(basicAuth, "user", "password"). }
false;public;0;10;;@Test public void withBasicAuthDoesNotResetErrorHandler() {     TestRestTemplate originalTemplate = new TestRestTemplate("foo", "bar").     ResponseErrorHandler errorHandler = mock(ResponseErrorHandler.class).     originalTemplate.getRestTemplate().setErrorHandler(errorHandler).     TestRestTemplate basicAuthTemplate = originalTemplate.withBasicAuth("user", "password").     assertThat(basicAuthTemplate.getRestTemplate().getErrorHandler()).isSameAs(errorHandler). }
false;public;0;4;;@Test public void deleteHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling(TestRestTemplate::delete). }
false;public;0;7;;@Test public void exchangeWithRequestEntityAndClassHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling((testRestTemplate, relativeUri) -> testRestTemplate.exchange(new RequestEntity<String>(HttpMethod.GET, relativeUri), String.class)). }
false;public;0;8;;@Test public void exchangeWithRequestEntityAndParameterizedTypeReferenceHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling((testRestTemplate, relativeUri) -> testRestTemplate.exchange(new RequestEntity<String>(HttpMethod.GET, relativeUri), new ParameterizedTypeReference<String>() {     })). }
false;public;0;6;;@Test public void exchangeHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling((testRestTemplate, relativeUri) -> testRestTemplate.exchange(relativeUri, HttpMethod.GET, new HttpEntity<>(new byte[0]), String.class)). }
false;public;0;9;;@Test public void exchangeWithParameterizedTypeReferenceHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling((testRestTemplate, relativeUri) -> testRestTemplate.exchange(relativeUri, HttpMethod.GET, new HttpEntity<>(new byte[0]), new ParameterizedTypeReference<String>() {     })). }
false;public;0;5;;@Test public void executeHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling((testRestTemplate, relativeUri) -> testRestTemplate.execute(relativeUri, HttpMethod.GET, null, null)). }
false;public;0;5;;@Test public void getForEntityHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling((testRestTemplate, relativeUri) -> testRestTemplate.getForEntity(relativeUri, String.class)). }
false;public;0;5;;@Test public void getForObjectHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling((testRestTemplate, relativeUri) -> testRestTemplate.getForObject(relativeUri, String.class)). }
false;public;0;4;;@Test public void headForHeadersHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling(TestRestTemplate::headForHeaders). }
false;public;0;4;;@Test public void optionsForAllowHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling(TestRestTemplate::optionsForAllow). }
false;public;0;5;;@Test public void patchForObjectHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling((testRestTemplate, relativeUri) -> testRestTemplate.patchForObject(relativeUri, "hello", String.class)). }
false;public;0;5;;@Test public void postForEntityHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling((testRestTemplate, relativeUri) -> testRestTemplate.postForEntity(relativeUri, "hello", String.class)). }
false;public;0;5;;@Test public void postForLocationHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling((testRestTemplate, relativeUri) -> testRestTemplate.postForLocation(relativeUri, "hello")). }
false;public;0;5;;@Test public void postForObjectHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling((testRestTemplate, relativeUri) -> testRestTemplate.postForObject(relativeUri, "hello", String.class)). }
false;public;0;5;;@Test public void putHandlesRelativeUris() throws IOException {     verifyRelativeUriHandling((testRestTemplate, relativeUri) -> testRestTemplate.put(relativeUri, "hello")). }
false;private;1;18;;private void verifyRelativeUriHandling(TestRestTemplateCallback callback) throws IOException {     ClientHttpRequestFactory requestFactory = mock(ClientHttpRequestFactory.class).     MockClientHttpRequest request = new MockClientHttpRequest().     request.setResponse(new MockClientHttpResponse(new byte[0], HttpStatus.OK)).     URI absoluteUri = URI.create("http://localhost:8080/a/b/c.txt?param=%7Bsomething%7D").     given(requestFactory.createRequest(eq(absoluteUri), any(HttpMethod.class))).willReturn(request).     TestRestTemplate template = new TestRestTemplate().     template.getRestTemplate().setRequestFactory(requestFactory).     LocalHostUriTemplateHandler uriTemplateHandler = new LocalHostUriTemplateHandler(new MockEnvironment()).     template.setUriTemplateHandler(uriTemplateHandler).     callback.doWithTestRestTemplate(template, URI.create("/a/b/c.txt?param=%7Bsomething%7D")).     verify(requestFactory).createRequest(eq(absoluteUri), any(HttpMethod.class)). }
false;private;3;13;;private void assertBasicAuthorizationInterceptorCredentials(TestRestTemplate testRestTemplate, String username, String password) {     @SuppressWarnings("unchecked")     List<ClientHttpRequestInterceptor> requestFactoryInterceptors = (List<ClientHttpRequestInterceptor>) ReflectionTestUtils.getField(testRestTemplate.getRestTemplate().getRequestFactory(), "interceptors").     assertThat(requestFactoryInterceptors).hasSize(1).     ClientHttpRequestInterceptor interceptor = requestFactoryInterceptors.get(0).     assertThat(interceptor).isInstanceOf(BasicAuthenticationInterceptor.class).     assertThat(interceptor).hasFieldOrPropertyWithValue("username", username).     assertThat(interceptor).hasFieldOrPropertyWithValue("password", password). }
false;;2;1;;void doWithTestRestTemplate(TestRestTemplate testRestTemplate, URI relativeUri).
