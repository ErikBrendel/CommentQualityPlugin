commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void getContextCustomizerWhenHasNoImportAnnotationShouldReturnNull() {     ContextCustomizer customizer = this.factory.createContextCustomizer(TestWithNoImport.class, null).     assertThat(customizer).isNull(). }
false;public;0;6;;@Test public void getContextCustomizerWhenHasImportAnnotationShouldReturnCustomizer() {     ContextCustomizer customizer = this.factory.createContextCustomizer(TestWithImport.class, null).     assertThat(customizer).isNotNull(). }
false;public;0;6;;@Test public void getContextCustomizerWhenHasMetaImportAnnotationShouldReturnCustomizer() {     ContextCustomizer customizer = this.factory.createContextCustomizer(TestWithMetaImport.class, null).     assertThat(customizer).isNotNull(). }
false;public;0;16;;@Test public void contextCustomizerEqualsAndHashCode() {     ContextCustomizer customizer1 = this.factory.createContextCustomizer(TestWithImport.class, null).     ContextCustomizer customizer2 = this.factory.createContextCustomizer(TestWithImport.class, null).     ContextCustomizer customizer3 = this.factory.createContextCustomizer(TestWithImportAndMetaImport.class, null).     ContextCustomizer customizer4 = this.factory.createContextCustomizer(TestWithSameImportAndMetaImport.class, null).     assertThat(customizer1.hashCode()).isEqualTo(customizer1.hashCode()).     assertThat(customizer1.hashCode()).isEqualTo(customizer2.hashCode()).     assertThat(customizer1).isEqualTo(customizer1).isEqualTo(customizer2).isNotEqualTo(customizer3).     assertThat(customizer3).isEqualTo(customizer4). }
false;public;0;7;;@Test public void getContextCustomizerWhenClassHasBeanMethodsShouldThrowException() {     assertThatIllegalStateException().isThrownBy(() -> this.factory.createContextCustomizer(TestWithImportAndBeanMethod.class, null)).withMessageContaining("Test classes cannot include @Bean methods"). }
false;public;0;9;;@Test public void contextCustomizerImportsBeans() {     ContextCustomizer customizer = this.factory.createContextCustomizer(TestWithImport.class, null).     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     customizer.customizeContext(context, mock(MergedContextConfiguration.class)).     context.refresh().     assertThat(context.getBean(ImportedBean.class)).isNotNull(). }
false;public;0;5;;@Test public void selfAnnotatingAnnotationDoesNotCauseStackOverflow() {     assertThat(this.factory.createContextCustomizer(TestWithImportAndSelfAnnotatingAnnotation.class, null)).isNotNull(). }
false;public;0;4;;@Bean public String bean() {     return "bean". }
