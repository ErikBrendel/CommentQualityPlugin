commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     MockitoAnnotations.initMocks(this). }
false;public;0;4;;@Test public void forElementFieldIsNullShouldReturnNull() {     assertThat(QualifierDefinition.forElement((Field) null)).isNull(). }
false;public;0;4;;@Test public void forElementWhenElementIsNotFieldShouldReturnNull() {     assertThat(QualifierDefinition.forElement(getClass())).isNull(). }
false;public;0;6;;@Test public void forElementWhenElementIsFieldWithNoQualifiersShouldReturnNull() {     QualifierDefinition definition = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigA.class, "noQualifier")).     assertThat(definition).isNull(). }
false;public;0;6;;@Test public void forElementWhenElementIsFieldWithQualifierShouldReturnDefinition() {     QualifierDefinition definition = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigA.class, "directQualifier")).     assertThat(definition).isNotNull(). }
false;public;0;10;;@Test public void matchesShouldCallBeanFactory() {     Field field = ReflectionUtils.findField(ConfigA.class, "directQualifier").     QualifierDefinition qualifierDefinition = QualifierDefinition.forElement(field).     qualifierDefinition.matches(this.beanFactory, "bean").     verify(this.beanFactory).isAutowireCandidate(eq("bean"), this.descriptorCaptor.capture()).     assertThat(this.descriptorCaptor.getValue().getAnnotatedElement()).isEqualTo(field). }
false;public;0;8;;@Test public void applyToShouldSetQualifierElement() {     Field field = ReflectionUtils.findField(ConfigA.class, "directQualifier").     QualifierDefinition qualifierDefinition = QualifierDefinition.forElement(field).     RootBeanDefinition definition = new RootBeanDefinition().     qualifierDefinition.applyTo(definition).     assertThat(definition.getQualifiedElement()).isEqualTo(field). }
false;public;0;25;;@Test public void hashCodeAndEqualsShouldWorkOnDifferentClasses() {     QualifierDefinition directQualifier1 = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigA.class, "directQualifier")).     QualifierDefinition directQualifier2 = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigB.class, "directQualifier")).     QualifierDefinition differentDirectQualifier1 = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigA.class, "differentDirectQualifier")).     QualifierDefinition differentDirectQualifier2 = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigB.class, "differentDirectQualifier")).     QualifierDefinition customQualifier1 = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigA.class, "customQualifier")).     QualifierDefinition customQualifier2 = QualifierDefinition.forElement(ReflectionUtils.findField(ConfigB.class, "customQualifier")).     assertThat(directQualifier1.hashCode()).isEqualTo(directQualifier2.hashCode()).     assertThat(differentDirectQualifier1.hashCode()).isEqualTo(differentDirectQualifier2.hashCode()).     assertThat(customQualifier1.hashCode()).isEqualTo(customQualifier2.hashCode()).     assertThat(differentDirectQualifier1).isEqualTo(differentDirectQualifier1).isEqualTo(differentDirectQualifier2).isNotEqualTo(directQualifier2).     assertThat(directQualifier1).isEqualTo(directQualifier1).isEqualTo(directQualifier2).isNotEqualTo(differentDirectQualifier1).     assertThat(customQualifier1).isEqualTo(customQualifier1).isEqualTo(customQualifier2).isNotEqualTo(differentDirectQualifier1). }
