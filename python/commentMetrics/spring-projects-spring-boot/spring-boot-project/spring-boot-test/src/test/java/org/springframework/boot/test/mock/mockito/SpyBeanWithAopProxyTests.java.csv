commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void verifyShouldUseProxyTarget() throws Exception {     Long d1 = this.dateService.getDate(false).     Thread.sleep(200).     Long d2 = this.dateService.getDate(false).     assertThat(d1).isEqualTo(d2).     verify(this.dateService, times(1)).getDate(false).     verify(this.dateService, times(1)).getDate(eq(false)).     verify(this.dateService, times(1)).getDate(anyBoolean()). }
false;public;1;6;;@Bean public CacheResolver cacheResolver(CacheManager cacheManager) {     SimpleCacheResolver resolver = new SimpleCacheResolver().     resolver.setCacheManager(cacheManager).     return resolver. }
false;public;0;6;;@Bean public ConcurrentMapCacheManager cacheManager() {     ConcurrentMapCacheManager cacheManager = new ConcurrentMapCacheManager().     cacheManager.setCacheNames(Arrays.asList("test")).     return cacheManager. }
false;public;1;4;;@Cacheable(cacheNames = "test") public Long getDate(boolean arg) {     return System.nanoTime(). }
