commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void environmentPropertiesSimple() {     Map<String, Object> config = getEnvironmentProperties(SimpleConfig.class).     assertKey(config, "key", "myValue").     assertKey(config, "anotherKey", "anotherValue"). }
false;public;0;6;;@Test public void environmentPropertiesSimpleNonAlias() {     Map<String, Object> config = getEnvironmentProperties(SimpleConfigNonAlias.class).     assertKey(config, "key", "myValue").     assertKey(config, "anotherKey", "anotherValue"). }
false;public;0;5;;@Test public void environmentPropertiesOverrideDefaults() {     Map<String, Object> config = getEnvironmentProperties(OverrideConfig.class).     assertKey(config, "server.port", "2345"). }
false;public;0;6;;@Test public void environmentPropertiesAppend() {     Map<String, Object> config = getEnvironmentProperties(AppendConfig.class).     assertKey(config, "key", "myValue").     assertKey(config, "otherKey", "otherValue"). }
false;public;0;6;;@Test public void environmentPropertiesSeparatorInValue() {     Map<String, Object> config = getEnvironmentProperties(SameSeparatorInValue.class).     assertKey(config, "key", "my=Value").     assertKey(config, "anotherKey", "another:Value"). }
false;public;0;7;;@Test public void environmentPropertiesAnotherSeparatorInValue() {     Map<String, Object> config = getEnvironmentProperties(AnotherSeparatorInValue.class).     assertKey(config, "key", "my:Value").     assertKey(config, "anotherKey", "another=Value"). }
false;public;0;8;;@Test @Ignore public void environmentPropertiesNewLineInValue() {     // gh-4384     Map<String, Object> config = getEnvironmentProperties(NewLineInValue.class).     assertKey(config, "key", "myValue").     assertKey(config, "variables", "foo=FOO\n bar=BAR"). }
false;private;1;8;;private Map<String, Object> getEnvironmentProperties(Class<?> testClass) {     TestContext context = new ExposedTestContextManager(testClass).getExposedTestContext().     MergedContextConfiguration config = (MergedContextConfiguration) ReflectionTestUtils.getField(context, "mergedContextConfiguration").     return TestPropertySourceUtils.convertInlinedPropertiesToMap(config.getPropertySourceProperties()). }
false;private;3;4;;private void assertKey(Map<String, Object> actual, String key, Object value) {     assertThat(actual.containsKey(key)).as("Key '" + key + "' not found").isTrue().     assertThat(actual.get(key)).isEqualTo(value). }
false;public,final;0;3;;public final TestContext getExposedTestContext() {     return super.getTestContext(). }
