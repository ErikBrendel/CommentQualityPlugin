commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void writeShouldReturnJsonContent() throws Exception {     JsonContent<Object> content = createTester(TYPE).write(OBJECT).     assertThat(content).isEqualToJson(JSON). }
false;public;0;7;;@Test public void writeListShouldReturnJsonContent() throws Exception {     ResolvableType type = ResolvableTypes.get("listOfExampleObject").     List<ExampleObject> value = Collections.singletonList(OBJECT).     JsonContent<Object> content = createTester(type).write(value).     assertThat(content).isEqualToJson(ARRAY_JSON). }
false;public;0;7;;@Test public void writeArrayShouldReturnJsonContent() throws Exception {     ResolvableType type = ResolvableTypes.get("arrayOfExampleObject").     ExampleObject[] value = new ExampleObject[] { OBJECT }.     JsonContent<Object> content = createTester(type).write(value).     assertThat(content).isEqualToJson(ARRAY_JSON). }
false;public;0;8;;@Test public void writeMapShouldReturnJsonContent() throws Exception {     ResolvableType type = ResolvableTypes.get("mapOfExampleObject").     Map<String, Object> value = new LinkedHashMap<>().     value.put("a", OBJECT).     JsonContent<Object> content = createTester(type).write(value).     assertThat(content).isEqualToJson(MAP_JSON). }
false;public;0;6;;@Test public void createWhenResourceLoadClassIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> createTester(null, ResolvableType.forClass(ExampleObject.class))).withMessageContaining("ResourceLoadClass must not be null"). }
false;public;0;6;;@Test public void createWhenTypeIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> createTester(getClass(), null)).withMessageContaining("Type must not be null"). }
false;public;0;5;;@Test public void parseBytesShouldReturnObject() throws Exception {     AbstractJsonMarshalTester<Object> tester = createTester(TYPE).     assertThat(tester.parse(JSON.getBytes())).isEqualTo(OBJECT). }
false;public;0;5;;@Test public void parseStringShouldReturnObject() throws Exception {     AbstractJsonMarshalTester<Object> tester = createTester(TYPE).     assertThat(tester.parse(JSON)).isEqualTo(OBJECT). }
false;public;0;5;;@Test public void readResourcePathShouldReturnObject() throws Exception {     AbstractJsonMarshalTester<Object> tester = createTester(TYPE).     assertThat(tester.read("example.json")).isEqualTo(OBJECT). }
false;public;0;7;;@Test public void readFileShouldReturnObject() throws Exception {     File file = this.temp.newFile("example.json").     FileCopyUtils.copy(JSON.getBytes(), file).     AbstractJsonMarshalTester<Object> tester = createTester(TYPE).     assertThat(tester.read(file)).isEqualTo(OBJECT). }
false;public;0;6;;@Test public void readInputStreamShouldReturnObject() throws Exception {     InputStream stream = new ByteArrayInputStream(JSON.getBytes()).     AbstractJsonMarshalTester<Object> tester = createTester(TYPE).     assertThat(tester.read(stream)).isEqualTo(OBJECT). }
false;public;0;6;;@Test public void readResourceShouldReturnObject() throws Exception {     Resource resource = new ByteArrayResource(JSON.getBytes()).     AbstractJsonMarshalTester<Object> tester = createTester(TYPE).     assertThat(tester.read(resource)).isEqualTo(OBJECT). }
false;public;0;6;;@Test public void readReaderShouldReturnObject() throws Exception {     Reader reader = new StringReader(JSON).     AbstractJsonMarshalTester<Object> tester = createTester(TYPE).     assertThat(tester.read(reader)).isEqualTo(OBJECT). }
false;public;0;6;;@Test public void parseListShouldReturnContent() throws Exception {     ResolvableType type = ResolvableTypes.get("listOfExampleObject").     AbstractJsonMarshalTester<Object> tester = createTester(type).     assertThat(tester.parse(ARRAY_JSON)).asList().containsOnly(OBJECT). }
false;public;0;6;;@Test public void parseArrayShouldReturnContent() throws Exception {     ResolvableType type = ResolvableTypes.get("arrayOfExampleObject").     AbstractJsonMarshalTester<Object> tester = createTester(type).     assertThat(tester.parse(ARRAY_JSON)).asArray().containsOnly(OBJECT). }
false;public;0;6;;@Test public void parseMapShouldReturnContent() throws Exception {     ResolvableType type = ResolvableTypes.get("mapOfExampleObject").     AbstractJsonMarshalTester<Object> tester = createTester(type).     assertThat(tester.parse(MAP_JSON)).asMap().containsEntry("a", OBJECT). }
false;protected,static,final;2;6;;protected static final ExampleObject createExampleObject(String name, int age) {     ExampleObject exampleObject = new ExampleObject().     exampleObject.setName(name).     exampleObject.setAge(age).     return exampleObject. }
false;protected,final;1;3;;protected final AbstractJsonMarshalTester<Object> createTester(ResolvableType type) {     return createTester(AbstractJsonMarshalTesterTests.class, type). }
false;protected,abstract;2;2;;protected abstract AbstractJsonMarshalTester<Object> createTester(Class<?> resourceLoadClass, ResolvableType type).
false;public,static;1;4;;public static ResolvableType get(String name) {     Field field = ReflectionUtils.findField(ResolvableTypes.class, name).     return ResolvableType.forField(field). }
