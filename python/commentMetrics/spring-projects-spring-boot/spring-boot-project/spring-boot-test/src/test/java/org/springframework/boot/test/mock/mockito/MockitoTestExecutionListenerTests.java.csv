commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     given(this.applicationContext.getBean(MockitoPostProcessor.class)).willReturn(this.postProcessor). }
false;public;0;7;;@Test public void prepareTestInstanceShouldInitMockitoAnnotations() throws Exception {     WithMockitoAnnotations instance = new WithMockitoAnnotations().     this.listener.prepareTestInstance(mockTestContext(instance)).     assertThat(instance.mock).isNotNull().     assertThat(instance.captor).isNotNull(). }
false;public;0;8;;@Test public void prepareTestInstanceShouldInjectMockBean() throws Exception {     WithMockBean instance = new WithMockBean().     this.listener.prepareTestInstance(mockTestContext(instance)).     verify(this.postProcessor).inject(this.fieldCaptor.capture(), eq(instance), any(MockDefinition.class)).     assertThat(this.fieldCaptor.getValue().getName()).isEqualTo("mockBean"). }
false;public;0;7;;@Test public void beforeTestMethodShouldDoNothingWhenDirtiesContextAttributeIsNotSet() throws Exception {     WithMockBean instance = new WithMockBean().     this.listener.beforeTestMethod(mockTestContext(instance)).     verifyNoMoreInteractions(this.postProcessor). }
false;public;0;13;;@Test public void beforeTestMethodShouldInjectMockBeanWhenDirtiesContextAttributeIsSet() throws Exception {     WithMockBean instance = new WithMockBean().     TestContext mockTestContext = mockTestContext(instance).     given(mockTestContext.getAttribute(DependencyInjectionTestExecutionListener.REINJECT_DEPENDENCIES_ATTRIBUTE)).willReturn(Boolean.TRUE).     this.listener.beforeTestMethod(mockTestContext).     verify(this.postProcessor).inject(this.fieldCaptor.capture(), eq(instance), (MockDefinition) any()).     assertThat(this.fieldCaptor.getValue().getName()).isEqualTo("mockBean"). }
false;private;1;8;;@SuppressWarnings({ "unchecked", "rawtypes" }) private TestContext mockTestContext(Object instance) {     TestContext testContext = mock(TestContext.class).     given(testContext.getTestInstance()).willReturn(instance).     given(testContext.getTestClass()).willReturn((Class) instance.getClass()).     given(testContext.getApplicationContext()).willReturn(this.applicationContext).     return testContext. }
