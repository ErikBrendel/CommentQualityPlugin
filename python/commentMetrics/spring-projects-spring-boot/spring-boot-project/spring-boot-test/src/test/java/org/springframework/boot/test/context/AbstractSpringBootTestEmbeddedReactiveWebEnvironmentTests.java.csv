commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ReactiveWebApplicationContext getContext() {     return this.context. }
false;public;0;7;;@Test public void runAndTestHttpEndpoint() {     assertThat(this.port).isNotEqualTo(8080).isNotEqualTo(0).     WebTestClient.bindToServer().baseUrl("http://localhost:" + this.port).build().get().uri("/").exchange().expectBody(String.class).isEqualTo("Hello World"). }
false;public;0;5;;@Test public void injectWebTestClient() {     this.webClient.get().uri("/").exchange().expectBody(String.class).isEqualTo("Hello World"). }
false;public;0;5;;@Test public void injectTestRestTemplate() {     String body = this.restTemplate.getForObject("/", String.class).     assertThat(body).isEqualTo("Hello World"). }
false;public;0;4;;@Test public void annotationAttributesOverridePropertiesFile() {     assertThat(this.value).isEqualTo(123). }
false;public;1;4;;@Bean public HttpHandler httpHandler(ApplicationContext applicationContext) {     return WebHttpHandlerBuilder.applicationContext(applicationContext).build(). }
false;public;0;6;;@Bean public ReactiveWebServerFactory webServerFactory() {     TomcatReactiveWebServerFactory factory = new TomcatReactiveWebServerFactory().     factory.setPort(this.port).     return factory. }
false;public,static;0;4;;@Bean public static PropertySourcesPlaceholderConfigurer propertyPlaceholder() {     return new PropertySourcesPlaceholderConfigurer(). }
false;public;0;4;;@RequestMapping("/") public Mono<String> home() {     return Mono.just("Hello World"). }
