commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setServletContext(ServletContext servletContext) {     this.servletContext = servletContext. }
false;public;0;8;;@Test public void getResourceLocation() throws Exception {     testResource("/inwebapp", "src/test/webapp").     testResource("/inmetainfresources", "/META-INF/resources").     testResource("/inresources", "/resources").     testResource("/instatic", "/static").     testResource("/inpublic", "/public"). }
false;private;2;6;;private void testResource(String path, String expectedLocation) throws MalformedURLException {     URL resource = this.servletContext.getResource(path).     assertThat(resource).isNotNull().     assertThat(resource.getPath()).contains(expectedLocation). }
false;protected;1;5;;@Override protected String getResourceLocation(String path) {     // Don't include the Spring Boot defaults for this test     return getResourceBasePathLocation(path). }
true;public;0;19;// gh-2654 ;// gh-2654 @Test public void getRootUrlExistsAndIsEmpty() throws Exception {     SpringBootMockServletContext context = new SpringBootMockServletContext("src/test/doesntexist") {          @Override         protected String getResourceLocation(String path) {             // Don't include the Spring Boot defaults for this test             return getResourceBasePathLocation(path).         }     }.     URL resource = context.getResource("/").     assertThat(resource).isNotEqualTo(nullValue()).     File file = new File(URLDecoder.decode(resource.getPath(), "UTF-8")).     assertThat(file).exists().isDirectory().     String[] contents = file.list((dir, name) -> !(".".equals(name) || "..".equals(name))).     assertThat(contents).isNotEqualTo(nullValue()).     assertThat(contents.length).isEqualTo(0). }
