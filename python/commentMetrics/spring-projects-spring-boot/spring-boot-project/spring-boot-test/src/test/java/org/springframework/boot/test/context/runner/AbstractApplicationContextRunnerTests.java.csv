commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void runWithInitializerShouldInitialize() {     AtomicBoolean called = new AtomicBoolean().     get().withInitializer((context) -> called.set(true)).run((context) -> {     }).     assertThat(called).isTrue(). }
false;public;0;9;;@Test public void runWithSystemPropertiesShouldSetAndRemoveProperties() {     String key = "test." + UUID.randomUUID().     assertThat(System.getProperties().containsKey(key)).isFalse().     get().withSystemProperties(key + "=value").run((context) -> assertThat(System.getProperties()).containsEntry(key, "value")).     assertThat(System.getProperties().containsKey(key)).isFalse(). }
false;public;0;9;;@Test public void runWithSystemPropertiesWhenContextFailsShouldRemoveProperties() {     String key = "test." + UUID.randomUUID().     assertThat(System.getProperties().containsKey(key)).isFalse().     get().withSystemProperties(key + "=value").withUserConfiguration(FailingConfig.class).run((context) -> assertThat(context).hasFailed()).     assertThat(System.getProperties().containsKey(key)).isFalse(). }
false;public;0;15;;@Test public void runWithSystemPropertiesShouldRestoreOriginalProperties() {     String key = "test." + UUID.randomUUID().     System.setProperty(key, "value").     try {         assertThat(System.getProperties().getProperty(key)).isEqualTo("value").         get().withSystemProperties(key + "=newValue").run((context) -> assertThat(System.getProperties()).containsEntry(key, "newValue")).         assertThat(System.getProperties().getProperty(key)).isEqualTo("value").     } finally {         System.clearProperty(key).     } }
false;public;0;15;;@Test public void runWithSystemPropertiesWhenValueIsNullShouldRemoveProperty() {     String key = "test." + UUID.randomUUID().     System.setProperty(key, "value").     try {         assertThat(System.getProperties().getProperty(key)).isEqualTo("value").         get().withSystemProperties(key + "=").run((context) -> assertThat(System.getProperties()).doesNotContainKey(key)).         assertThat(System.getProperties().getProperty(key)).isEqualTo("value").     } finally {         System.clearProperty(key).     } }
false;public;0;9;;@Test public void runWithMultiplePropertyValuesShouldAllAllValues() {     get().withPropertyValues("test.foo=1").withPropertyValues("test.bar=2").run((context) -> {         Environment environment = context.getEnvironment().         assertThat(environment.getProperty("test.foo")).isEqualTo("1").         assertThat(environment.getProperty("test.bar")).isEqualTo("2").     }). }
false;public;0;8;;@Test public void runWithPropertyValuesWhenHasExistingShouldReplaceValue() {     get().withPropertyValues("test.foo=1").withPropertyValues("test.foo=2").run((context) -> {         Environment environment = context.getEnvironment().         assertThat(environment.getProperty("test.foo")).isEqualTo("2").     }). }
false;public;0;5;;@Test public void runWithConfigurationsShouldRegisterConfigurations() {     get().withUserConfiguration(FooConfig.class).run((context) -> assertThat(context).hasBean("foo")). }
false;public;0;6;;@Test public void runWithMultipleConfigurationsShouldRegisterAllConfigurations() {     get().withUserConfiguration(FooConfig.class).withConfiguration(UserConfigurations.of(BarConfig.class)).run((context) -> assertThat(context).hasBean("foo").hasBean("bar")). }
false;public;0;5;;@Test public void runWithFailedContextShouldReturnFailedAssertableContext() {     get().withUserConfiguration(FailingConfig.class).run((context) -> assertThat(context).hasFailed()). }
false;public;0;7;;@Test public void runWithClassLoaderShouldSetClassLoaderOnContext() {     get().withClassLoader(new FilteredClassLoader(Gson.class.getPackage().getName())).run((context) -> assertThatExceptionOfType(ClassNotFoundException.class).isThrownBy(() -> ClassUtils.forName(Gson.class.getName(), context.getClassLoader()))). }
false;public;0;7;;@Test public void runWithClassLoaderShouldSetClassLoaderOnConditionContext() {     get().withClassLoader(new FilteredClassLoader(Gson.class.getPackage().getName())).withUserConfiguration(ConditionalConfig.class).run((context) -> assertThat(context).hasSingleBean(ConditionalConfig.class)). }
false;public;0;6;;@Test public void thrownRuleWorksWithCheckedException() {     get().run((context) -> assertThatIOException().isThrownBy(() -> throwCheckedException("Expected message")).withMessageContaining("Expected message")). }
false;protected,abstract;0;1;;protected abstract T get().
false;private,static;1;3;;private static void throwCheckedException(String message) throws IOException {     throw new IOException(message). }
false;public;0;4;;@Bean public String foo() {     throw new IllegalStateException("Failed"). }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String bar() {     return "bar". }
false;public;2;4;;@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {     return context.getClassLoader() instanceof FilteredClassLoader. }
