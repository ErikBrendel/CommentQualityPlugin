commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void loadClassWhenFilteredOnPackageShouldThrowClassNotFound() throws Exception {     try (FilteredClassLoader classLoader = new FilteredClassLoader(FilteredClassLoaderTests.class.getPackage().getName())) {         assertThatExceptionOfType(ClassNotFoundException.class).isThrownBy(() -> classLoader.loadClass(getClass().getName())).     } }
false;public;0;8;;@Test public void loadClassWhenFilteredOnClassShouldThrowClassNotFound() throws Exception {     try (FilteredClassLoader classLoader = new FilteredClassLoader(FilteredClassLoaderTests.class)) {         assertThatExceptionOfType(ClassNotFoundException.class).isThrownBy(() -> classLoader.loadClass(getClass().getName())).     } }
false;public;0;7;;@Test public void loadClassWhenNotFilteredShouldLoadClass() throws Exception {     FilteredClassLoader classLoader = new FilteredClassLoader((className) -> false).     Class<?> loaded = classLoader.loadClass(getClass().getName()).     assertThat(loaded.getName()).isEqualTo(getClass().getName()).     classLoader.close(). }
false;public;0;8;;@Test public void loadResourceWhenFilteredOnResourceShouldReturnNotFound() throws Exception {     try (FilteredClassLoader classLoader = new FilteredClassLoader(TEST_RESOURCE)) {         final URL loaded = classLoader.getResource(TEST_RESOURCE.getPath()).         assertThat(loaded).isNull().     } }
false;public;0;8;;@Test public void loadResourceWhenNotFilteredShouldLoadResource() throws Exception {     try (FilteredClassLoader classLoader = new FilteredClassLoader((resourceName) -> false)) {         final URL loaded = classLoader.getResource(TEST_RESOURCE.getPath()).         assertThat(loaded).isNotNull().     } }
