commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.startupFailure = new RuntimeException().     this.mockContextSupplier = () -> this.mockContext.     this.startupFailureSupplier = () -> {         throw this.startupFailure.     }. }
false;public;0;7;;@Test public void getWhenTypeIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> ApplicationContextAssertProvider.get(null, ApplicationContext.class, this.mockContextSupplier)).withMessageContaining("Type must not be null"). }
false;public;0;7;;@Test public void getWhenTypeIsClassShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> ApplicationContextAssertProvider.get(null, ApplicationContext.class, this.mockContextSupplier)).withMessageContaining("Type must not be null"). }
false;public;0;8;;@Test public void getWhenContextTypeIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> ApplicationContextAssertProvider.get(TestAssertProviderApplicationContextClass.class, ApplicationContext.class, this.mockContextSupplier)).withMessageContaining("Type must be an interface"). }
false;public;0;8;;@Test public void getWhenContextTypeIsClassShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> ApplicationContextAssertProvider.get(TestAssertProviderApplicationContext.class, null, this.mockContextSupplier)).withMessageContaining("ContextType must not be null"). }
false;public;0;8;;@Test public void getWhenSupplierIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> ApplicationContextAssertProvider.get(TestAssertProviderApplicationContext.class, StaticApplicationContext.class, this.mockContextSupplier)).withMessageContaining("ContextType must be an interface"). }
false;public;0;8;;@Test public void getWhenContextStartsShouldReturnProxyThatCallsRealMethods() {     ApplicationContextAssertProvider<ApplicationContext> context = get(this.mockContextSupplier).     assertThat((Object) context).isNotNull().     context.getBean("foo").     verify(this.mockContext).getBean("foo"). }
false;public;0;8;;@Test public void getWhenContextFailsShouldReturnProxyThatThrowsExceptions() {     ApplicationContextAssertProvider<ApplicationContext> context = get(this.startupFailureSupplier).     assertThat((Object) context).isNotNull().     assertThatIllegalStateException().isThrownBy(() -> context.getBean("foo")).withCause(this.startupFailure).withMessageContaining("failed to start"). }
false;public;0;6;;@Test public void getSourceContextWhenContextStartsShouldReturnSourceContext() {     ApplicationContextAssertProvider<ApplicationContext> context = get(this.mockContextSupplier).     assertThat(context.getSourceApplicationContext()).isSameAs(this.mockContext). }
false;public;0;7;;@Test public void getSourceContextWhenContextFailsShouldThrowException() {     ApplicationContextAssertProvider<ApplicationContext> context = get(this.startupFailureSupplier).     assertThatIllegalStateException().isThrownBy(context::getSourceApplicationContext).withCause(this.startupFailure).withMessageContaining("failed to start"). }
false;public;0;7;;@Test public void getSourceContextOfTypeWhenContextStartsShouldReturnSourceContext() {     ApplicationContextAssertProvider<ApplicationContext> context = get(this.mockContextSupplier).     assertThat(context.getSourceApplicationContext(ApplicationContext.class)).isSameAs(this.mockContext). }
false;public;0;8;;@Test public void getSourceContextOfTypeWhenContextFailsToStartShouldThrowException() {     ApplicationContextAssertProvider<ApplicationContext> context = get(this.startupFailureSupplier).     assertThatIllegalStateException().isThrownBy(() -> context.getSourceApplicationContext(ApplicationContext.class)).withCause(this.startupFailure).withMessageContaining("failed to start"). }
false;public;0;6;;@Test public void getStartupFailureWhenContextStartsShouldReturnNull() {     ApplicationContextAssertProvider<ApplicationContext> context = get(this.mockContextSupplier).     assertThat(context.getStartupFailure()).isNull(). }
false;public;0;6;;@Test public void getStartupFailureWhenContextFailsToStartShouldReturnException() {     ApplicationContextAssertProvider<ApplicationContext> context = get(this.startupFailureSupplier).     assertThat(context.getStartupFailure()).isEqualTo(this.startupFailure). }
false;public;0;8;;@Test public void assertThatWhenContextStartsShouldReturnAssertions() {     ApplicationContextAssertProvider<ApplicationContext> context = get(this.mockContextSupplier).     ApplicationContextAssert<ApplicationContext> contextAssert = assertThat(context).     assertThat(contextAssert.getApplicationContext()).isSameAs(context).     assertThat(contextAssert.getStartupFailure()).isNull(). }
false;public;0;8;;@Test public void assertThatWhenContextFailsShouldReturnAssertions() {     ApplicationContextAssertProvider<ApplicationContext> context = get(this.startupFailureSupplier).     ApplicationContextAssert<ApplicationContext> contextAssert = assertThat(context).     assertThat(contextAssert.getApplicationContext()).isSameAs(context).     assertThat(contextAssert.getStartupFailure()).isSameAs(this.startupFailure). }
false;public;0;10;;@Test public void toStringWhenContextStartsShouldReturnSimpleString() {     ApplicationContextAssertProvider<ApplicationContext> context = get(this.mockContextSupplier).     assertThat(context.toString()).startsWith("Started application [ConfigurableApplicationContext.MockitoMock").endsWith("id = [null], applicationName = [null], beanDefinitionCount = 0]"). }
false;public;0;8;;@Test public void toStringWhenContextFailsToStartShouldReturnSimpleString() {     ApplicationContextAssertProvider<ApplicationContext> context = get(this.startupFailureSupplier).     assertThat(context.toString()).isEqualTo("Unstarted application context " + "org.springframework.context.ApplicationContext" + "[startupFailure=java.lang.RuntimeException]"). }
false;public;0;7;;@Test public void closeShouldCloseContext() {     ApplicationContextAssertProvider<ApplicationContext> context = get(this.mockContextSupplier).     context.close().     verify(this.mockContext).close(). }
false;private;1;6;;private ApplicationContextAssertProvider<ApplicationContext> get(Supplier<ApplicationContext> contextSupplier) {     return ApplicationContextAssertProvider.get(TestAssertProviderApplicationContext.class, ApplicationContext.class, contextSupplier). }
