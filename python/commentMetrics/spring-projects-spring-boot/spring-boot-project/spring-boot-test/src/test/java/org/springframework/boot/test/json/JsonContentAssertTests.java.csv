commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void isEqualToWhenStringIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isEqualTo(LENIENT_SAME). }
false;public;0;5;;@Test public void isEqualToWhenNullActualShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(null)).isEqualTo(SOURCE)). }
false;public;0;5;;@Test public void isEqualToWhenStringIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualTo(DIFFERENT)). }
false;public;0;4;;@Test public void isEqualToWhenResourcePathIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isEqualTo("lenient-same.json"). }
false;public;0;5;;@Test public void isEqualToWhenResourcePathIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualTo("different.json")). }
false;public;0;4;;@Test public void isEqualToWhenBytesAreMatchingShouldPass() {     assertThat(forJson(SOURCE)).isEqualTo(LENIENT_SAME.getBytes()). }
false;public;0;5;;@Test public void isEqualToWhenBytesAreNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualTo(DIFFERENT.getBytes())). }
false;public;0;4;;@Test public void isEqualToWhenFileIsMatchingShouldPass() throws Exception {     assertThat(forJson(SOURCE)).isEqualTo(createFile(LENIENT_SAME)). }
false;public;0;5;;@Test public void isEqualToWhenFileIsNotMatchingShouldFail() throws Exception {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualTo(createFile(DIFFERENT))). }
false;public;0;4;;@Test public void isEqualToWhenInputStreamIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isEqualTo(createInputStream(LENIENT_SAME)). }
false;public;0;6;;@Test public void isEqualToWhenInputStreamIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualTo(createInputStream(DIFFERENT))). }
false;public;0;4;;@Test public void isEqualToWhenResourceIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isEqualTo(createResource(LENIENT_SAME)). }
false;public;0;5;;@Test public void isEqualToWhenResourceIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualTo(createResource(DIFFERENT))). }
false;public;0;4;;@Test public void isEqualToJsonWhenStringIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson(LENIENT_SAME). }
false;public;0;5;;@Test public void isEqualToJsonWhenNullActualShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(null)).isEqualToJson(SOURCE)). }
false;public;0;5;;@Test public void isEqualToJsonWhenStringIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(DIFFERENT)). }
false;public;0;4;;@Test public void isEqualToJsonWhenResourcePathIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson("lenient-same.json"). }
false;public;0;5;;@Test public void isEqualToJsonWhenResourcePathIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson("different.json")). }
false;public;0;4;;@Test public void isEqualToJsonWhenResourcePathAndClassIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson("lenient-same.json", getClass()). }
false;public;0;6;;@Test public void isEqualToJsonWhenResourcePathAndClassIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson("different.json", getClass())). }
false;public;0;4;;@Test public void isEqualToJsonWhenBytesAreMatchingShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson(LENIENT_SAME.getBytes()). }
false;public;0;5;;@Test public void isEqualToJsonWhenBytesAreNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(DIFFERENT.getBytes())). }
false;public;0;4;;@Test public void isEqualToJsonWhenFileIsMatchingShouldPass() throws Exception {     assertThat(forJson(SOURCE)).isEqualToJson(createFile(LENIENT_SAME)). }
false;public;0;5;;@Test public void isEqualToJsonWhenFileIsNotMatchingShouldFail() throws Exception {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(createFile(DIFFERENT))). }
false;public;0;4;;@Test public void isEqualToJsonWhenInputStreamIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson(createInputStream(LENIENT_SAME)). }
false;public;0;6;;@Test public void isEqualToJsonWhenInputStreamIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(createInputStream(DIFFERENT))). }
false;public;0;4;;@Test public void isEqualToJsonWhenResourceIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson(createResource(LENIENT_SAME)). }
false;public;0;6;;@Test public void isEqualToJsonWhenResourceIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(createResource(DIFFERENT))). }
false;public;0;4;;@Test public void isStrictlyEqualToJsonWhenStringIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isStrictlyEqualToJson(SOURCE). }
false;public;0;5;;@Test public void isStrictlyEqualToJsonWhenStringIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isStrictlyEqualToJson(LENIENT_SAME)). }
false;public;0;4;;@Test public void isStrictlyEqualToJsonWhenResourcePathIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isStrictlyEqualToJson("source.json"). }
false;public;0;6;;@Test public void isStrictlyEqualToJsonWhenResourcePathIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isStrictlyEqualToJson("lenient-same.json")). }
false;public;0;4;;@Test public void isStrictlyEqualToJsonWhenResourcePathAndClassIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isStrictlyEqualToJson("source.json", getClass()). }
false;public;0;6;;@Test public void isStrictlyEqualToJsonWhenResourcePathAndClassIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isStrictlyEqualToJson("lenient-same.json", getClass())). }
false;public;0;4;;@Test public void isStrictlyEqualToJsonWhenBytesAreMatchingShouldPass() {     assertThat(forJson(SOURCE)).isStrictlyEqualToJson(SOURCE.getBytes()). }
false;public;0;6;;@Test public void isStrictlyEqualToJsonWhenBytesAreNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isStrictlyEqualToJson(LENIENT_SAME.getBytes())). }
false;public;0;4;;@Test public void isStrictlyEqualToJsonWhenFileIsMatchingShouldPass() throws Exception {     assertThat(forJson(SOURCE)).isStrictlyEqualToJson(createFile(SOURCE)). }
false;public;0;6;;@Test public void isStrictlyEqualToJsonWhenFileIsNotMatchingShouldFail() throws Exception {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isStrictlyEqualToJson(createFile(LENIENT_SAME))). }
false;public;0;4;;@Test public void isStrictlyEqualToJsonWhenInputStreamIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isStrictlyEqualToJson(createInputStream(SOURCE)). }
false;public;0;6;;@Test public void isStrictlyEqualToJsonWhenInputStreamIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isStrictlyEqualToJson(createInputStream(LENIENT_SAME))). }
false;public;0;4;;@Test public void isStrictlyEqualToJsonWhenResourceIsMatchingShouldPass() {     assertThat(forJson(SOURCE)).isStrictlyEqualToJson(createResource(SOURCE)). }
false;public;0;6;;@Test public void isStrictlyEqualToJsonWhenResourceIsNotMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isStrictlyEqualToJson(createResource(LENIENT_SAME))). }
false;public;0;4;;@Test public void isEqualToJsonWhenStringIsMatchingAndLenientShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson(LENIENT_SAME, JSONCompareMode.LENIENT). }
false;public;0;6;;@Test public void isEqualToJsonWhenStringIsNotMatchingAndLenientShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(DIFFERENT, JSONCompareMode.LENIENT)). }
false;public;0;5;;@Test public void isEqualToJsonWhenResourcePathIsMatchingAndLenientShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson("lenient-same.json", JSONCompareMode.LENIENT). }
false;public;0;6;;@Test public void isEqualToJsonWhenResourcePathIsNotMatchingAndLenientShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson("different.json", JSONCompareMode.LENIENT)). }
false;public;0;5;;@Test public void isEqualToJsonWhenResourcePathAndClassIsMatchingAndLenientShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson("lenient-same.json", getClass(), JSONCompareMode.LENIENT). }
false;public;0;6;;@Test public void isEqualToJsonWhenResourcePathAndClassIsNotMatchingAndLenientShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson("different.json", getClass(), JSONCompareMode.LENIENT)). }
false;public;0;5;;@Test public void isEqualToJsonWhenBytesAreMatchingAndLenientShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson(LENIENT_SAME.getBytes(), JSONCompareMode.LENIENT). }
false;public;0;6;;@Test public void isEqualToJsonWhenBytesAreNotMatchingAndLenientShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(DIFFERENT.getBytes(), JSONCompareMode.LENIENT)). }
false;public;0;5;;@Test public void isEqualToJsonWhenFileIsMatchingAndLenientShouldPass() throws Exception {     assertThat(forJson(SOURCE)).isEqualToJson(createFile(LENIENT_SAME), JSONCompareMode.LENIENT). }
false;public;0;6;;@Test public void isEqualToJsonWhenFileIsNotMatchingAndLenientShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(createFile(DIFFERENT), JSONCompareMode.LENIENT)). }
false;public;0;5;;@Test public void isEqualToJsonWhenInputStreamIsMatchingAndLenientShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson(createInputStream(LENIENT_SAME), JSONCompareMode.LENIENT). }
false;public;0;6;;@Test public void isEqualToJsonWhenInputStreamIsNotMatchingAndLenientShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(createInputStream(DIFFERENT), JSONCompareMode.LENIENT)). }
false;public;0;5;;@Test public void isEqualToJsonWhenResourceIsMatchingAndLenientShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson(createResource(LENIENT_SAME), JSONCompareMode.LENIENT). }
false;public;0;6;;@Test public void isEqualToJsonWhenResourceIsNotMatchingAndLenientShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(createResource(DIFFERENT), JSONCompareMode.LENIENT)). }
false;public;0;4;;@Test public void isEqualToJsonWhenStringIsMatchingAndComparatorShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson(LENIENT_SAME, COMPARATOR). }
false;public;0;5;;@Test public void isEqualToJsonWhenStringIsNotMatchingAndComparatorShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(DIFFERENT, COMPARATOR)). }
false;public;0;4;;@Test public void isEqualToJsonWhenResourcePathIsMatchingAndComparatorShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson("lenient-same.json", COMPARATOR). }
false;public;0;6;;@Test public void isEqualToJsonWhenResourcePathIsNotMatchingAndComparatorShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson("different.json", COMPARATOR)). }
false;public;0;5;;@Test public void isEqualToJsonWhenResourcePathAndClassAreMatchingAndComparatorShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson("lenient-same.json", getClass(), COMPARATOR). }
false;public;0;6;;@Test public void isEqualToJsonWhenResourcePathAndClassAreNotMatchingAndComparatorShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson("different.json", getClass(), COMPARATOR)). }
false;public;0;4;;@Test public void isEqualToJsonWhenBytesAreMatchingAndComparatorShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson(LENIENT_SAME.getBytes(), COMPARATOR). }
false;public;0;6;;@Test public void isEqualToJsonWhenBytesAreNotMatchingAndComparatorShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(DIFFERENT.getBytes(), COMPARATOR)). }
false;public;0;5;;@Test public void isEqualToJsonWhenFileIsMatchingAndComparatorShouldPass() throws Exception {     assertThat(forJson(SOURCE)).isEqualToJson(createFile(LENIENT_SAME), COMPARATOR). }
false;public;0;7;;@Test public void isEqualToJsonWhenFileIsNotMatchingAndComparatorShouldFail() throws Exception {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(createFile(DIFFERENT), COMPARATOR)). }
false;public;0;5;;@Test public void isEqualToJsonWhenInputStreamIsMatchingAndComparatorShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson(createInputStream(LENIENT_SAME), COMPARATOR). }
false;public;0;6;;@Test public void isEqualToJsonWhenInputStreamIsNotMatchingAndComparatorShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(createInputStream(DIFFERENT), COMPARATOR)). }
false;public;0;5;;@Test public void isEqualToJsonWhenResourceIsMatchingAndComparatorShouldPass() {     assertThat(forJson(SOURCE)).isEqualToJson(createResource(LENIENT_SAME), COMPARATOR). }
false;public;0;6;;@Test public void isEqualToJsonWhenResourceIsNotMatchingAndComparatorShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isEqualToJson(createResource(DIFFERENT), COMPARATOR)). }
false;public;0;5;;@Test public void isNotEqualToWhenStringIsMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualTo(LENIENT_SAME)). }
false;public;0;4;;@Test public void isNotEqualToWhenNullActualShouldPass() {     assertThat(forJson(null)).isNotEqualTo(SOURCE). }
false;public;0;4;;@Test public void isNotEqualToWhenStringIsNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualTo(DIFFERENT). }
false;public;0;5;;@Test public void isNotEqualToWhenResourcePathIsMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualTo("lenient-same.json")). }
false;public;0;4;;@Test public void isNotEqualToWhenResourcePathIsNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualTo("different.json"). }
false;public;0;5;;@Test public void isNotEqualToWhenBytesAreMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualTo(LENIENT_SAME.getBytes())). }
false;public;0;4;;@Test public void isNotEqualToWhenBytesAreNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualTo(DIFFERENT.getBytes()). }
false;public;0;5;;@Test public void isNotEqualToWhenFileIsMatchingShouldFail() throws Exception {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualTo(createFile(LENIENT_SAME))). }
false;public;0;4;;@Test public void isNotEqualToWhenFileIsNotMatchingShouldPass() throws Exception {     assertThat(forJson(SOURCE)).isNotEqualTo(createFile(DIFFERENT)). }
false;public;0;6;;@Test public void isNotEqualToWhenInputStreamIsMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualTo(createInputStream(LENIENT_SAME))). }
false;public;0;4;;@Test public void isNotEqualToWhenInputStreamIsNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualTo(createInputStream(DIFFERENT)). }
false;public;0;6;;@Test public void isNotEqualToWhenResourceIsMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualTo(createResource(LENIENT_SAME))). }
false;public;0;4;;@Test public void isNotEqualToWhenResourceIsNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualTo(createResource(DIFFERENT)). }
false;public;0;5;;@Test public void isNotEqualToJsonWhenStringIsMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(LENIENT_SAME)). }
false;public;0;4;;@Test public void isNotEqualToJsonWhenNullActualShouldPass() {     assertThat(forJson(null)).isNotEqualToJson(SOURCE). }
false;public;0;4;;@Test public void isNotEqualToJsonWhenStringIsNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson(DIFFERENT). }
false;public;0;5;;@Test public void isNotEqualToJsonWhenResourcePathIsMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson("lenient-same.json")). }
false;public;0;4;;@Test public void isNotEqualToJsonWhenResourcePathIsNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson("different.json"). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenResourcePathAndClassAreMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson("lenient-same.json", getClass())). }
false;public;0;4;;@Test public void isNotEqualToJsonWhenResourcePathAndClassAreNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson("different.json", getClass()). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenBytesAreMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(LENIENT_SAME.getBytes())). }
false;public;0;4;;@Test public void isNotEqualToJsonWhenBytesAreNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson(DIFFERENT.getBytes()). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenFileIsMatchingShouldFail() throws Exception {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(createFile(LENIENT_SAME))). }
false;public;0;4;;@Test public void isNotEqualToJsonWhenFileIsNotMatchingShouldPass() throws Exception {     assertThat(forJson(SOURCE)).isNotEqualToJson(createFile(DIFFERENT)). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenInputStreamIsMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(createInputStream(LENIENT_SAME))). }
false;public;0;4;;@Test public void isNotEqualToJsonWhenInputStreamIsNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson(createInputStream(DIFFERENT)). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenResourceIsMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(createResource(LENIENT_SAME))). }
false;public;0;4;;@Test public void isNotEqualToJsonWhenResourceIsNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson(createResource(DIFFERENT)). }
false;public;0;5;;@Test public void isNotStrictlyEqualToJsonWhenStringIsMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson(SOURCE)). }
false;public;0;4;;@Test public void isNotStrictlyEqualToJsonWhenStringIsNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson(LENIENT_SAME). }
false;public;0;6;;@Test public void isNotStrictlyEqualToJsonWhenResourcePathIsMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson("source.json")). }
false;public;0;4;;@Test public void isNotStrictlyEqualToJsonWhenResourcePathIsNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson("lenient-same.json"). }
false;public;0;6;;@Test public void isNotStrictlyEqualToJsonWhenResourcePathAndClassAreMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson("source.json", getClass())). }
false;public;0;5;;@Test public void isNotStrictlyEqualToJsonWhenResourcePathAndClassAreNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson("lenient-same.json", getClass()). }
false;public;0;6;;@Test public void isNotStrictlyEqualToJsonWhenBytesAreMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson(SOURCE.getBytes())). }
false;public;0;4;;@Test public void isNotStrictlyEqualToJsonWhenBytesAreNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson(LENIENT_SAME.getBytes()). }
false;public;0;6;;@Test public void isNotStrictlyEqualToJsonWhenFileIsMatchingShouldFail() throws Exception {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson(createFile(SOURCE))). }
false;public;0;5;;@Test public void isNotStrictlyEqualToJsonWhenFileIsNotMatchingShouldPass() throws Exception {     assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson(createFile(LENIENT_SAME)). }
false;public;0;6;;@Test public void isNotStrictlyEqualToJsonWhenInputStreamIsMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson(createInputStream(SOURCE))). }
false;public;0;5;;@Test public void isNotStrictlyEqualToJsonWhenInputStreamIsNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson(createInputStream(LENIENT_SAME)). }
false;public;0;6;;@Test public void isNotStrictlyEqualToJsonWhenResourceIsMatchingShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson(createResource(SOURCE))). }
false;public;0;5;;@Test public void isNotStrictlyEqualToJsonWhenResourceIsNotMatchingShouldPass() {     assertThat(forJson(SOURCE)).isNotStrictlyEqualToJson(createResource(LENIENT_SAME)). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenStringIsMatchingAndLenientShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(LENIENT_SAME, JSONCompareMode.LENIENT)). }
false;public;0;4;;@Test public void isNotEqualToJsonWhenStringIsNotMatchingAndLenientShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson(DIFFERENT, JSONCompareMode.LENIENT). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenResourcePathIsMatchingAndLenientShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson("lenient-same.json", JSONCompareMode.LENIENT)). }
false;public;0;5;;@Test public void isNotEqualToJsonWhenResourcePathIsNotMatchingAndLenientShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson("different.json", JSONCompareMode.LENIENT). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenResourcePathAndClassAreMatchingAndLenientShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson("lenient-same.json", getClass(), JSONCompareMode.LENIENT)). }
false;public;0;5;;@Test public void isNotEqualToJsonWhenResourcePathAndClassAreNotMatchingAndLenientShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson("different.json", getClass(), JSONCompareMode.LENIENT). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenBytesAreMatchingAndLenientShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(LENIENT_SAME.getBytes(), JSONCompareMode.LENIENT)). }
false;public;0;5;;@Test public void isNotEqualToJsonWhenBytesAreNotMatchingAndLenientShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson(DIFFERENT.getBytes(), JSONCompareMode.LENIENT). }
false;public;0;7;;@Test public void isNotEqualToJsonWhenFileIsMatchingAndLenientShouldFail() throws Exception {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(createFile(LENIENT_SAME), JSONCompareMode.LENIENT)). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenFileIsNotMatchingAndLenientShouldPass() throws Exception {     assertThat(forJson(SOURCE)).isNotEqualToJson(createFile(DIFFERENT), JSONCompareMode.LENIENT). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenInputStreamIsMatchingAndLenientShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(createInputStream(LENIENT_SAME), JSONCompareMode.LENIENT)). }
false;public;0;5;;@Test public void isNotEqualToJsonWhenInputStreamIsNotMatchingAndLenientShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson(createInputStream(DIFFERENT), JSONCompareMode.LENIENT). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenResourceIsMatchingAndLenientShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(createResource(LENIENT_SAME), JSONCompareMode.LENIENT)). }
false;public;0;5;;@Test public void isNotEqualToJsonWhenResourceIsNotMatchingAndLenientShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson(createResource(DIFFERENT), JSONCompareMode.LENIENT). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenStringIsMatchingAndComparatorShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(LENIENT_SAME, COMPARATOR)). }
false;public;0;4;;@Test public void isNotEqualToJsonWhenStringIsNotMatchingAndComparatorShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson(DIFFERENT, COMPARATOR). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenResourcePathIsMatchingAndComparatorShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson("lenient-same.json", COMPARATOR)). }
false;public;0;4;;@Test public void isNotEqualToJsonWhenResourcePathIsNotMatchingAndComparatorShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson("different.json", COMPARATOR). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenResourcePathAndClassAreMatchingAndComparatorShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson("lenient-same.json", getClass(), COMPARATOR)). }
false;public;0;5;;@Test public void isNotEqualToJsonWhenResourcePathAndClassAreNotMatchingAndComparatorShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson("different.json", getClass(), COMPARATOR). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenBytesAreMatchingAndComparatorShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(LENIENT_SAME.getBytes(), COMPARATOR)). }
false;public;0;4;;@Test public void isNotEqualToJsonWhenBytesAreNotMatchingAndComparatorShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson(DIFFERENT.getBytes(), COMPARATOR). }
false;public;0;7;;@Test public void isNotEqualToJsonWhenFileIsMatchingAndComparatorShouldFail() throws Exception {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(createFile(LENIENT_SAME), COMPARATOR)). }
false;public;0;5;;@Test public void isNotEqualToJsonWhenFileIsNotMatchingAndComparatorShouldPass() throws Exception {     assertThat(forJson(SOURCE)).isNotEqualToJson(createFile(DIFFERENT), COMPARATOR). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenInputStreamIsMatchingAndComparatorShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(createInputStream(LENIENT_SAME), COMPARATOR)). }
false;public;0;5;;@Test public void isNotEqualToJsonWhenInputStreamIsNotMatchingAndComparatorShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson(createInputStream(DIFFERENT), COMPARATOR). }
false;public;0;6;;@Test public void isNotEqualToJsonWhenResourceIsMatchingAndComparatorShouldFail() {     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SOURCE)).isNotEqualToJson(createResource(LENIENT_SAME), COMPARATOR)). }
false;public;0;5;;@Test public void isNotEqualToJsonWhenResourceIsNotMatchingAndComparatorShouldPass() {     assertThat(forJson(SOURCE)).isNotEqualToJson(createResource(DIFFERENT), COMPARATOR). }
false;public;0;4;;@Test public void hasJsonPathValue() {     assertThat(forJson(TYPES)).hasJsonPathValue("$.str"). }
false;public;0;4;;@Test public void hasJsonPathValueForAnEmptyArray() {     assertThat(forJson(TYPES)).hasJsonPathValue("$.emptyArray"). }
false;public;0;4;;@Test public void hasJsonPathValueForAnEmptyMap() {     assertThat(forJson(TYPES)).hasJsonPathValue("$.emptyMap"). }
false;public;0;5;;@Test public void hasJsonPathValueForIndefinitePathWithResults() {     assertThat(forJson(SIMPSONS)).hasJsonPathValue("$.familyMembers[?(@.name == 'Bart')]"). }
false;public;0;8;;@Test public void hasJsonPathValueForIndefinitePathWithEmptyResults() {     String expression = "$.familyMembers[?(@.name == 'Dilbert')]".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SIMPSONS)).hasJsonPathValue(expression)).withMessageContaining("No value at JSON path \"" + expression + "\""). }
false;public;0;4;;@Test public void doesNotHaveJsonPathValue() {     assertThat(forJson(TYPES)).doesNotHaveJsonPathValue("$.bogus"). }
false;public;0;8;;@Test public void doesNotHaveJsonPathValueForAnEmptyArray() {     String expression = "$.emptyArray".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).doesNotHaveJsonPathValue(expression)).withMessageContaining("Expected no value at JSON path \"" + expression + "\" but found: []"). }
false;public;0;8;;@Test public void doesNotHaveJsonPathValueForAnEmptyMap() {     String expression = "$.emptyMap".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).doesNotHaveJsonPathValue(expression)).withMessageContaining("Expected no value at JSON path \"" + expression + "\" but found: {}"). }
false;public;0;8;;@Test public void doesNotHaveJsonPathValueForIndefinitePathWithResults() {     String expression = "$.familyMembers[?(@.name == 'Bart')]".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SIMPSONS)).doesNotHaveJsonPathValue(expression)).withMessageContaining("Expected no value at JSON path \"" + expression + "\" but found: [{\"name\":\"Bart\"}]"). }
false;public;0;5;;@Test public void doesNotHaveJsonPathValueForIndefinitePathWithEmptyResults() {     assertThat(forJson(SIMPSONS)).doesNotHaveJsonPathValue("$.familyMembers[?(@.name == 'Dilbert')]"). }
false;public;0;4;;@Test public void hasEmptyJsonPathValueForAnEmptyString() {     assertThat(forJson(TYPES)).hasEmptyJsonPathValue("$.emptyString"). }
false;public;0;4;;@Test public void hasEmptyJsonPathValueForAnEmptyArray() {     assertThat(forJson(TYPES)).hasEmptyJsonPathValue("$.emptyArray"). }
false;public;0;4;;@Test public void hasEmptyJsonPathValueForAnEmptyMap() {     assertThat(forJson(TYPES)).hasEmptyJsonPathValue("$.emptyMap"). }
false;public;0;5;;@Test public void hasEmptyJsonPathValueForIndefinitePathWithEmptyResults() {     assertThat(forJson(SIMPSONS)).hasEmptyJsonPathValue("$.familyMembers[?(@.name == 'Dilbert')]"). }
false;public;0;8;;@Test public void hasEmptyJsonPathValueForIndefinitePathWithResults() {     String expression = "$.familyMembers[?(@.name == 'Bart')]".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SIMPSONS)).hasEmptyJsonPathValue(expression)).withMessageContaining("Expected an empty value at JSON path \"" + expression + "\" but found: [{\"name\":\"Bart\"}]"). }
false;public;0;8;;@Test public void hasEmptyJsonPathValueForWhitespace() {     String expression = "$.whitespace".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).hasEmptyJsonPathValue(expression)).withMessageContaining("Expected an empty value at JSON path \"" + expression + "\" but found: '    '"). }
false;public;0;4;;@Test public void doesNotHaveEmptyJsonPathValueForString() {     assertThat(forJson(TYPES)).doesNotHaveEmptyJsonPathValue("$.str"). }
false;public;0;4;;@Test public void doesNotHaveEmptyJsonPathValueForNumber() {     assertThat(forJson(TYPES)).doesNotHaveEmptyJsonPathValue("$.num"). }
false;public;0;4;;@Test public void doesNotHaveEmptyJsonPathValueForBoolean() {     assertThat(forJson(TYPES)).doesNotHaveEmptyJsonPathValue("$.bool"). }
false;public;0;4;;@Test public void doesNotHaveEmptyJsonPathValueForArray() {     assertThat(forJson(TYPES)).doesNotHaveEmptyJsonPathValue("$.arr"). }
false;public;0;4;;@Test public void doesNotHaveEmptyJsonPathValueForMap() {     assertThat(forJson(TYPES)).doesNotHaveEmptyJsonPathValue("$.colorMap"). }
false;public;0;5;;@Test public void doesNotHaveEmptyJsonPathValueForIndefinitePathWithResults() {     assertThat(forJson(SIMPSONS)).doesNotHaveEmptyJsonPathValue("$.familyMembers[?(@.name == 'Bart')]"). }
false;public;0;9;;@Test public void doesNotHaveEmptyJsonPathValueForIndefinitePathWithEmptyResults() {     String expression = "$.familyMembers[?(@.name == 'Dilbert')]".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(SIMPSONS)).doesNotHaveEmptyJsonPathValue(expression)).withMessageContaining("Expected a non-empty value at JSON path \"" + expression + "\" but found: []"). }
false;public;0;9;;@Test public void doesNotHaveEmptyJsonPathValueForAnEmptyString() {     String expression = "$.emptyString".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).doesNotHaveEmptyJsonPathValue(expression)).withMessageContaining("Expected a non-empty value at JSON path \"" + expression + "\" but found: ''"). }
false;public;0;9;;@Test public void doesNotHaveEmptyJsonPathValueForForAnEmptyArray() {     String expression = "$.emptyArray".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).doesNotHaveEmptyJsonPathValue(expression)).withMessageContaining("Expected a non-empty value at JSON path \"" + expression + "\" but found: []"). }
false;public;0;9;;@Test public void doesNotHaveEmptyJsonPathValueForAnEmptyMap() {     String expression = "$.emptyMap".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).doesNotHaveEmptyJsonPathValue(expression)).withMessageContaining("Expected a non-empty value at JSON path \"" + expression + "\" but found: {}"). }
false;public;0;4;;@Test public void hasJsonPathStringValue() {     assertThat(forJson(TYPES)).hasJsonPathStringValue("$.str"). }
false;public;0;4;;@Test public void hasJsonPathStringValueForAnEmptyString() {     assertThat(forJson(TYPES)).hasJsonPathStringValue("$.emptyString"). }
false;public;0;8;;@Test public void hasJsonPathStringValueForNonString() {     String expression = "$.bool".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).hasJsonPathStringValue(expression)).withMessageContaining("Expected a string at JSON path \"" + expression + "\" but found: true"). }
false;public;0;4;;@Test public void hasJsonPathNumberValue() {     assertThat(forJson(TYPES)).hasJsonPathNumberValue("$.num"). }
false;public;0;8;;@Test public void hasJsonPathNumberValueForNonNumber() {     String expression = "$.bool".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).hasJsonPathNumberValue(expression)).withMessageContaining("Expected a number at JSON path \"" + expression + "\" but found: true"). }
false;public;0;4;;@Test public void hasJsonPathBooleanValue() {     assertThat(forJson(TYPES)).hasJsonPathBooleanValue("$.bool"). }
false;public;0;8;;@Test public void hasJsonPathBooleanValueForNonBoolean() {     String expression = "$.num".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).hasJsonPathBooleanValue(expression)).withMessageContaining("Expected a boolean at JSON path \"" + expression + "\" but found: 5"). }
false;public;0;4;;@Test public void hasJsonPathArrayValue() {     assertThat(forJson(TYPES)).hasJsonPathArrayValue("$.arr"). }
false;public;0;4;;@Test public void hasJsonPathArrayValueForAnEmptyArray() {     assertThat(forJson(TYPES)).hasJsonPathArrayValue("$.emptyArray"). }
false;public;0;8;;@Test public void hasJsonPathArrayValueForNonArray() {     String expression = "$.str".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).hasJsonPathArrayValue(expression)).withMessageContaining("Expected an array at JSON path \"" + expression + "\" but found: 'foo'"). }
false;public;0;4;;@Test public void hasJsonPathMapValue() {     assertThat(forJson(TYPES)).hasJsonPathMapValue("$.colorMap"). }
false;public;0;4;;@Test public void hasJsonPathMapValueForAnEmptyMap() {     assertThat(forJson(TYPES)).hasJsonPathMapValue("$.emptyMap"). }
false;public;0;9;;@Test public void hasJsonPathMapValueForNonMap() {     String expression = "$.str".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).hasJsonPathMapValue(expression)).withMessageContaining("Expected a map at JSON path \"" + expression + "\" but found: 'foo'"). }
false;public;0;4;;@Test public void extractingJsonPathValue() {     assertThat(forJson(TYPES)).extractingJsonPathValue("@.str").isEqualTo("foo"). }
false;public;0;4;;@Test public void extractingJsonPathValueForMissing() {     assertThat(forJson(TYPES)).extractingJsonPathValue("@.bogus").isNull(). }
false;public;0;5;;@Test public void extractingJsonPathStringValue() {     assertThat(forJson(TYPES)).extractingJsonPathStringValue("@.str").isEqualTo("foo"). }
false;public;0;4;;@Test public void extractingJsonPathStringValueForMissing() {     assertThat(forJson(TYPES)).extractingJsonPathStringValue("@.bogus").isNull(). }
false;public;0;5;;@Test public void extractingJsonPathStringValueForEmptyString() {     assertThat(forJson(TYPES)).extractingJsonPathStringValue("@.emptyString").isEmpty(). }
false;public;0;9;;@Test public void extractingJsonPathStringValueForWrongType() {     String expression = "$.num".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).extractingJsonPathStringValue(expression)).withMessageContaining("Expected a string at JSON path \"" + expression + "\" but found: 5"). }
false;public;0;4;;@Test public void extractingJsonPathNumberValue() {     assertThat(forJson(TYPES)).extractingJsonPathNumberValue("@.num").isEqualTo(5). }
false;public;0;4;;@Test public void extractingJsonPathNumberValueForMissing() {     assertThat(forJson(TYPES)).extractingJsonPathNumberValue("@.bogus").isNull(). }
false;public;0;9;;@Test public void extractingJsonPathNumberValueForWrongType() {     String expression = "$.str".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).extractingJsonPathNumberValue(expression)).withMessageContaining("Expected a number at JSON path \"" + expression + "\" but found: 'foo'"). }
false;public;0;4;;@Test public void extractingJsonPathBooleanValue() {     assertThat(forJson(TYPES)).extractingJsonPathBooleanValue("@.bool").isTrue(). }
false;public;0;4;;@Test public void extractingJsonPathBooleanValueForMissing() {     assertThat(forJson(TYPES)).extractingJsonPathBooleanValue("@.bogus").isNull(). }
false;public;0;9;;@Test public void extractingJsonPathBooleanValueForWrongType() {     String expression = "$.str".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).extractingJsonPathBooleanValue(expression)).withMessageContaining("Expected a boolean at JSON path \"" + expression + "\" but found: 'foo'"). }
false;public;0;5;;@Test public void extractingJsonPathArrayValue() {     assertThat(forJson(TYPES)).extractingJsonPathArrayValue("@.arr").containsExactly(42). }
false;public;0;4;;@Test public void extractingJsonPathArrayValueForMissing() {     assertThat(forJson(TYPES)).extractingJsonPathArrayValue("@.bogus").isNull(). }
false;public;0;4;;@Test public void extractingJsonPathArrayValueForEmpty() {     assertThat(forJson(TYPES)).extractingJsonPathArrayValue("@.emptyArray").isEmpty(). }
false;public;0;8;;@Test public void extractingJsonPathArrayValueForWrongType() {     String expression = "$.str".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).extractingJsonPathArrayValue(expression)).withMessageContaining("Expected an array at JSON path \"" + expression + "\" but found: 'foo'"). }
false;public;0;5;;@Test public void extractingJsonPathMapValue() {     assertThat(forJson(TYPES)).extractingJsonPathMapValue("@.colorMap").contains(entry("red", "rojo")). }
false;public;0;4;;@Test public void extractingJsonPathMapValueForMissing() {     assertThat(forJson(TYPES)).extractingJsonPathMapValue("@.bogus").isNull(). }
false;public;0;4;;@Test public void extractingJsonPathMapValueForEmpty() {     assertThat(forJson(TYPES)).extractingJsonPathMapValue("@.emptyMap").isEmpty(). }
false;public;0;8;;@Test public void extractingJsonPathMapValueForWrongType() {     String expression = "$.str".     assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> assertThat(forJson(TYPES)).extractingJsonPathMapValue(expression)).withMessageContaining("Expected a map at JSON path \"" + expression + "\" but found: 'foo'"). }
false;public;0;4;;@Test public void isNullWhenActualIsNullShouldPass() {     assertThat(forJson(null)).isNull(). }
false;private;1;5;;private File createFile(String content) throws IOException {     File file = this.temp.newFile("example.json").     FileCopyUtils.copy(content.getBytes(), file).     return file. }
false;private;1;3;;private InputStream createInputStream(String content) {     return new ByteArrayInputStream(content.getBytes()). }
false;private;1;3;;private Resource createResource(String content) {     return new ByteArrayResource(content.getBytes()). }
false;private,static;1;11;;private static String loadJson(String path) {     try {         ClassPathResource resource = new ClassPathResource(path, JsonContentAssertTests.class).         return new String(FileCopyUtils.copyToByteArray(resource.getInputStream())).     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
false;private;1;3;;private AssertProvider<JsonContentAssert> forJson(String json) {     return () -> new JsonContentAssert(JsonContentAssertTests.class, json). }
