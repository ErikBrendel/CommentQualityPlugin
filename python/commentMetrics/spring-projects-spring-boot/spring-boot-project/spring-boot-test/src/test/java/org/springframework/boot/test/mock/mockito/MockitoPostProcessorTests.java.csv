commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void cannotMockMultipleBeans() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     MockitoPostProcessor.register(context).     context.register(MultipleBeans.class).     assertThatIllegalStateException().isThrownBy(context::refresh).withMessageContaining("Unable to register mock bean " + ExampleService.class.getName() + " expected a single matching bean to replace " + "but found [example1, example2]"). }
false;public;0;11;;@Test public void cannotMockMultipleQualifiedBeans() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     MockitoPostProcessor.register(context).     context.register(MultipleQualifiedBeans.class).     assertThatIllegalStateException().isThrownBy(context::refresh).withMessageContaining("Unable to register mock bean " + ExampleService.class.getName() + " expected a single matching bean to replace " + "but found [example1, example3]"). }
false;public;0;14;;@Test public void canMockBeanProducedByFactoryBeanWithObjectTypeAttribute() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     MockitoPostProcessor.register(context).     RootBeanDefinition factoryBeanDefinition = new RootBeanDefinition(TestFactoryBean.class).     factoryBeanDefinition.setAttribute("factoryBeanObjectType", SomeInterface.class.getName()).     context.registerBeanDefinition("beanToBeMocked", factoryBeanDefinition).     context.register(MockedFactoryBean.class).     context.refresh().     assertThat(Mockito.mockingDetails(context.getBean("beanToBeMocked")).isMock()).isTrue(). }
false;public;0;17;;@Test public void canMockPrimaryBean() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     MockitoPostProcessor.register(context).     context.register(MockPrimaryBean.class).     context.refresh().     assertThat(Mockito.mockingDetails(context.getBean(MockPrimaryBean.class).mock).isMock()).isTrue().     assertThat(Mockito.mockingDetails(context.getBean(ExampleService.class)).isMock()).isTrue().     assertThat(Mockito.mockingDetails(context.getBean("examplePrimary", ExampleService.class)).isMock()).isTrue().     assertThat(Mockito.mockingDetails(context.getBean("exampleQualified", ExampleService.class)).isMock()).isFalse(). }
false;public;0;17;;@Test public void canMockQualifiedBeanWithPrimaryBeanPresent() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     MockitoPostProcessor.register(context).     context.register(MockQualifiedBean.class).     context.refresh().     assertThat(Mockito.mockingDetails(context.getBean(MockQualifiedBean.class).mock).isMock()).isTrue().     assertThat(Mockito.mockingDetails(context.getBean(ExampleService.class)).isMock()).isFalse().     assertThat(Mockito.mockingDetails(context.getBean("examplePrimary", ExampleService.class)).isMock()).isFalse().     assertThat(Mockito.mockingDetails(context.getBean("exampleQualified", ExampleService.class)).isMock()).isTrue(). }
false;public;0;18;;@Test public void canSpyPrimaryBean() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     MockitoPostProcessor.register(context).     context.register(SpyPrimaryBean.class).     context.refresh().     assertThat(Mockito.mockingDetails(context.getBean(SpyPrimaryBean.class).spy).isSpy()).isTrue().     assertThat(Mockito.mockingDetails(context.getBean(ExampleService.class)).isSpy()).isTrue().     assertThat(Mockito.mockingDetails(context.getBean("examplePrimary", ExampleService.class)).isSpy()).isTrue().     assertThat(Mockito.mockingDetails(context.getBean("exampleQualified", ExampleService.class)).isSpy()).isFalse(). }
false;public;0;17;;@Test public void canSpyQualifiedBeanWithPrimaryBeanPresent() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     MockitoPostProcessor.register(context).     context.register(SpyQualifiedBean.class).     context.refresh().     assertThat(Mockito.mockingDetails(context.getBean(SpyQualifiedBean.class).spy).isSpy()).isTrue().     assertThat(Mockito.mockingDetails(context.getBean(ExampleService.class)).isSpy()).isFalse().     assertThat(Mockito.mockingDetails(context.getBean("examplePrimary", ExampleService.class)).isSpy()).isFalse().     assertThat(Mockito.mockingDetails(context.getBean("exampleQualified", ExampleService.class)).isSpy()).isTrue(). }
false;public;0;4;;@Bean public TestFactoryBean testFactoryBean() {     return new TestFactoryBean(). }
false;public;0;4;;@Bean public ExampleService example1() {     return new FailingExampleService(). }
false;public;0;4;;@Bean public ExampleService example2() {     return new FailingExampleService(). }
false;public;0;5;;@Bean @Qualifier("test") public ExampleService example1() {     return new FailingExampleService(). }
false;public;0;4;;@Bean public ExampleService example2() {     return new FailingExampleService(). }
false;public;0;5;;@Bean @Qualifier("test") public ExampleService example3() {     return new FailingExampleService(). }
false;public;0;5;;@Bean @Qualifier("test") public ExampleService exampleQualified() {     return new RealExampleService("qualified"). }
false;public;0;5;;@Bean @Primary public ExampleService examplePrimary() {     return new RealExampleService("primary"). }
false;public;0;5;;@Bean @Qualifier("test") public ExampleService exampleQualified() {     return new RealExampleService("qualified"). }
false;public;0;5;;@Bean @Primary public ExampleService examplePrimary() {     return new RealExampleService("primary"). }
false;public;0;5;;@Bean @Qualifier("test") public ExampleService exampleQualified() {     return new RealExampleService("qualified"). }
false;public;0;5;;@Bean @Primary public ExampleService examplePrimary() {     return new RealExampleService("primary"). }
false;public;0;5;;@Bean @Qualifier("test") public ExampleService exampleQualified() {     return new RealExampleService("qualified"). }
false;public;0;5;;@Bean @Primary public ExampleService examplePrimary() {     return new RealExampleService("primary"). }
false;public;0;4;;@Override public Object getObject() {     return new TestBean(). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return null. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
