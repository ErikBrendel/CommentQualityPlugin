commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void parseSingleMockBean() {     this.parser.parse(SingleMockBean.class).     assertThat(getDefinitions()).hasSize(1).     assertThat(getMockDefinition(0).getTypeToMock().resolve()).isEqualTo(ExampleService.class). }
false;public;0;9;;@Test public void parseRepeatMockBean() {     this.parser.parse(RepeatMockBean.class).     assertThat(getDefinitions()).hasSize(2).     assertThat(getMockDefinition(0).getTypeToMock().resolve()).isEqualTo(ExampleService.class).     assertThat(getMockDefinition(1).getTypeToMock().resolve()).isEqualTo(ExampleServiceCaller.class). }
false;public;0;14;;@Test public void parseMockBeanAttributes() {     this.parser.parse(MockBeanAttributes.class).     assertThat(getDefinitions()).hasSize(1).     MockDefinition definition = getMockDefinition(0).     assertThat(definition.getName()).isEqualTo("Name").     assertThat(definition.getTypeToMock().resolve()).isEqualTo(ExampleService.class).     assertThat(definition.getExtraInterfaces()).containsExactly(ExampleExtraInterface.class).     assertThat(definition.getAnswer()).isEqualTo(Answers.RETURNS_SMART_NULLS).     assertThat(definition.isSerializable()).isTrue().     assertThat(definition.getReset()).isEqualTo(MockReset.NONE).     assertThat(definition.getQualifier()).isNull(). }
false;public;0;15;;@Test public void parseMockBeanOnClassAndField() {     this.parser.parse(MockBeanOnClassAndField.class).     assertThat(getDefinitions()).hasSize(2).     MockDefinition classDefinition = getMockDefinition(0).     assertThat(classDefinition.getTypeToMock().resolve()).isEqualTo(ExampleService.class).     assertThat(classDefinition.getQualifier()).isNull().     MockDefinition fieldDefinition = getMockDefinition(1).     assertThat(fieldDefinition.getTypeToMock().resolve()).isEqualTo(ExampleServiceCaller.class).     QualifierDefinition qualifier = QualifierDefinition.forElement(ReflectionUtils.findField(MockBeanOnClassAndField.class, "caller")).     assertThat(fieldDefinition.getQualifier()).isNotNull().isEqualTo(qualifier). }
false;public;0;7;;@Test public void parseMockBeanInferClassToMock() {     this.parser.parse(MockBeanInferClassToMock.class).     assertThat(getDefinitions()).hasSize(1).     assertThat(getMockDefinition(0).getTypeToMock().resolve()).isEqualTo(ExampleService.class). }
false;public;0;6;;@Test public void parseMockBeanMissingClassToMock() {     assertThatIllegalStateException().isThrownBy(() -> this.parser.parse(MockBeanMissingClassToMock.class)).withMessageContaining("Unable to deduce type to mock"). }
false;public;0;9;;@Test public void parseMockBeanMultipleClasses() {     this.parser.parse(MockBeanMultipleClasses.class).     assertThat(getDefinitions()).hasSize(2).     assertThat(getMockDefinition(0).getTypeToMock().resolve()).isEqualTo(ExampleService.class).     assertThat(getMockDefinition(1).getTypeToMock().resolve()).isEqualTo(ExampleServiceCaller.class). }
false;public;0;8;;@Test public void parseMockBeanMultipleClassesWithName() {     assertThatIllegalStateException().isThrownBy(() -> this.parser.parse(MockBeanMultipleClassesWithName.class)).withMessageContaining("The name attribute can only be used when mocking a single class"). }
false;public;0;7;;@Test public void parseSingleSpyBean() {     this.parser.parse(SingleSpyBean.class).     assertThat(getDefinitions()).hasSize(1).     assertThat(getSpyDefinition(0).getTypeToSpy().resolve()).isEqualTo(RealExampleService.class). }
false;public;0;9;;@Test public void parseRepeatSpyBean() {     this.parser.parse(RepeatSpyBean.class).     assertThat(getDefinitions()).hasSize(2).     assertThat(getSpyDefinition(0).getTypeToSpy().resolve()).isEqualTo(RealExampleService.class).     assertThat(getSpyDefinition(1).getTypeToSpy().resolve()).isEqualTo(ExampleServiceCaller.class). }
false;public;0;11;;@Test public void parseSpyBeanAttributes() {     this.parser.parse(SpyBeanAttributes.class).     assertThat(getDefinitions()).hasSize(1).     SpyDefinition definition = getSpyDefinition(0).     assertThat(definition.getName()).isEqualTo("Name").     assertThat(definition.getTypeToSpy().resolve()).isEqualTo(RealExampleService.class).     assertThat(definition.getReset()).isEqualTo(MockReset.NONE).     assertThat(definition.getQualifier()).isNull(). }
false;public;0;15;;@Test public void parseSpyBeanOnClassAndField() {     this.parser.parse(SpyBeanOnClassAndField.class).     assertThat(getDefinitions()).hasSize(2).     SpyDefinition classDefinition = getSpyDefinition(0).     assertThat(classDefinition.getQualifier()).isNull().     assertThat(classDefinition.getTypeToSpy().resolve()).isEqualTo(RealExampleService.class).     SpyDefinition fieldDefinition = getSpyDefinition(1).     QualifierDefinition qualifier = QualifierDefinition.forElement(ReflectionUtils.findField(SpyBeanOnClassAndField.class, "caller")).     assertThat(fieldDefinition.getQualifier()).isNotNull().isEqualTo(qualifier).     assertThat(fieldDefinition.getTypeToSpy().resolve()).isEqualTo(ExampleServiceCaller.class). }
false;public;0;7;;@Test public void parseSpyBeanInferClassToMock() {     this.parser.parse(SpyBeanInferClassToMock.class).     assertThat(getDefinitions()).hasSize(1).     assertThat(getSpyDefinition(0).getTypeToSpy().resolve()).isEqualTo(RealExampleService.class). }
false;public;0;6;;@Test public void parseSpyBeanMissingClassToMock() {     assertThatIllegalStateException().isThrownBy(() -> this.parser.parse(SpyBeanMissingClassToMock.class)).withMessageContaining("Unable to deduce type to spy"). }
false;public;0;9;;@Test public void parseSpyBeanMultipleClasses() {     this.parser.parse(SpyBeanMultipleClasses.class).     assertThat(getDefinitions()).hasSize(2).     assertThat(getSpyDefinition(0).getTypeToSpy().resolve()).isEqualTo(RealExampleService.class).     assertThat(getSpyDefinition(1).getTypeToSpy().resolve()).isEqualTo(ExampleServiceCaller.class). }
false;public;0;7;;@Test public void parseSpyBeanMultipleClassesWithName() {     assertThatIllegalStateException().isThrownBy(() -> this.parser.parse(SpyBeanMultipleClassesWithName.class)).withMessageContaining("The name attribute can only be used when spying a single class"). }
false;private;1;3;;private MockDefinition getMockDefinition(int index) {     return (MockDefinition) getDefinitions().get(index). }
false;private;1;3;;private SpyDefinition getSpyDefinition(int index) {     return (SpyDefinition) getDefinitions().get(index). }
false;private;0;3;;private List<Definition> getDefinitions() {     return new ArrayList<>(this.parser.getDefinitions()). }
