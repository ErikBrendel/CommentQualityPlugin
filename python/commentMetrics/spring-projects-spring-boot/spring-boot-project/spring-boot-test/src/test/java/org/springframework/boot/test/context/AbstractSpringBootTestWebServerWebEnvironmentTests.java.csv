commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public WebApplicationContext getContext() {     return this.context. }
false;public;0;3;;public TestRestTemplate getRestTemplate() {     return this.restTemplate. }
false;public;0;7;;@Test public void runAndTestHttpEndpoint() {     assertThat(this.port).isNotEqualTo(8080).isNotEqualTo(0).     String body = new RestTemplate().getForObject("http://localhost:" + this.port + "/", String.class).     assertThat(body).isEqualTo("Hello World"). }
false;public;0;5;;@Test public void injectTestRestTemplate() {     String body = this.restTemplate.getForObject("/", String.class).     assertThat(body).isEqualTo("Hello World"). }
false;public;0;4;;@Test public void annotationAttributesOverridePropertiesFile() {     assertThat(this.value).isEqualTo(123). }
false;public;0;5;;@Test public void validateWebApplicationContextIsSet() {     assertThat(this.context).isSameAs(WebApplicationContextUtils.getWebApplicationContext(this.servletContext)). }
false;public;0;4;;@Bean public DispatcherServlet dispatcherServlet() {     return new DispatcherServlet(). }
false;public;0;6;;@Bean public ServletWebServerFactory webServerFactory() {     TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory().     factory.setPort(this.port).     return factory. }
false;public,static;0;4;;@Bean public static PropertySourcesPlaceholderConfigurer propertyPlaceholder() {     return new PropertySourcesPlaceholderConfigurer(). }
false;public;0;4;;@RequestMapping("/") public String home() {     return "Hello World". }
