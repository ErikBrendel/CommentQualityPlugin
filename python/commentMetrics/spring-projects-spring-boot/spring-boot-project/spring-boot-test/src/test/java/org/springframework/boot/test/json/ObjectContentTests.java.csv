commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void createWhenObjectIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new ObjectContent<ExampleObject>(TYPE, null)).withMessageContaining("Object must not be null"). }
false;public;0;5;;@Test public void createWhenTypeIsNullShouldCreateContent() {     ObjectContent<ExampleObject> content = new ObjectContent<>(null, OBJECT).     assertThat(content).isNotNull(). }
false;public;0;5;;@Test public void assertThatShouldReturnObjectContentAssert() {     ObjectContent<ExampleObject> content = new ObjectContent<>(TYPE, OBJECT).     assertThat(content.assertThat()).isInstanceOf(ObjectContentAssert.class). }
false;public;0;5;;@Test public void getObjectShouldReturnObject() {     ObjectContent<ExampleObject> content = new ObjectContent<>(TYPE, OBJECT).     assertThat(content.getObject()).isEqualTo(OBJECT). }
false;public;0;6;;@Test public void toStringWhenHasTypeShouldReturnString() {     ObjectContent<ExampleObject> content = new ObjectContent<>(TYPE, OBJECT).     assertThat(content.toString()).isEqualTo("ObjectContent " + OBJECT + " created from " + TYPE). }
false;public;0;5;;@Test public void toStringWhenHasNoTypeShouldReturnString() {     ObjectContent<ExampleObject> content = new ObjectContent<>(null, OBJECT).     assertThat(content.toString()).isEqualTo("ObjectContent " + OBJECT). }
