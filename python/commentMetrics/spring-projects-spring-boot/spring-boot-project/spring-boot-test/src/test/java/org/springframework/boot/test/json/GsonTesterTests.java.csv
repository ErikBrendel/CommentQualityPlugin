commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void initFieldsWhenTestIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> GsonTester.initFields(null, new GsonBuilder().create())).withMessageContaining("TestInstance must not be null"). }
false;public;0;6;;@Test public void initFieldsWhenMarshallerIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> GsonTester.initFields(new InitFieldsTestClass(), (Gson) null)).withMessageContaining("Marshaller must not be null"). }
false;public;0;11;;@Test public void initFieldsShouldSetNullFields() {     InitFieldsTestClass test = new InitFieldsTestClass().     assertThat(test.test).isNull().     assertThat(test.base).isNull().     GsonTester.initFields(test, new GsonBuilder().create()).     assertThat(test.test).isNotNull().     assertThat(test.base).isNotNull().     assertThat(test.test.getType().resolve()).isEqualTo(List.class).     assertThat(test.test.getType().resolveGeneric()).isEqualTo(ExampleObject.class). }
false;protected;2;5;;@Override protected AbstractJsonMarshalTester<Object> createTester(Class<?> resourceLoadClass, ResolvableType type) {     return new GsonTester<>(resourceLoadClass, type, new GsonBuilder().create()). }
