commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void test001() {     given(getMock("none").greeting()).willReturn("none").     given(getMock("before").greeting()).willReturn("before").     given(getMock("after").greeting()).willReturn("after"). }
false;public;0;6;;@Test public void test002() {     assertThat(getMock("none").greeting()).isEqualTo("none").     assertThat(getMock("before").greeting()).isNull().     assertThat(getMock("after").greeting()).isNull(). }
false;public;1;3;;public ExampleService getMock(String name) {     return this.context.getBean(name, ExampleService.class). }
false;public;1;6;;@Bean public ExampleService before(MockitoBeans mockedBeans) {     ExampleService mock = mock(ExampleService.class, MockReset.before()).     mockedBeans.add(mock).     return mock. }
false;public;1;6;;@Bean public ExampleService after(MockitoBeans mockedBeans) {     ExampleService mock = mock(ExampleService.class, MockReset.after()).     mockedBeans.add(mock).     return mock. }
false;public;1;6;;@Bean public ExampleService none(MockitoBeans mockedBeans) {     ExampleService mock = mock(ExampleService.class).     mockedBeans.add(mock).     return mock. }
false;public;0;6;;@Bean @Lazy public ExampleService fail() {     // gh-5870     throw new RuntimeException(). }
false;public;0;5;;@Bean public BrokenFactoryBean brokenFactoryBean() {     // gh-7270     return new BrokenFactoryBean(). }
false;public;0;4;;@Override public String getObject() {     throw new IllegalStateException(). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return String.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
