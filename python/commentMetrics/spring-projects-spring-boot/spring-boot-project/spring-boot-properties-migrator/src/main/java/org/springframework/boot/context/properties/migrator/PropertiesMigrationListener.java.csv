commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public void onApplicationEvent(SpringApplicationEvent event) {     if (event instanceof ApplicationPreparedEvent) {         onApplicationPreparedEvent((ApplicationPreparedEvent) event).     }     if (event instanceof ApplicationReadyEvent || event instanceof ApplicationFailedEvent) {         logLegacyPropertiesReport().     } }
false;private;1;6;;private void onApplicationPreparedEvent(ApplicationPreparedEvent event) {     ConfigurationMetadataRepository repository = loadRepository().     PropertiesMigrationReporter reporter = new PropertiesMigrationReporter(repository, event.getApplicationContext().getEnvironment()).     this.report = reporter.getReport(). }
false;private;0;8;;private ConfigurationMetadataRepository loadRepository() {     try {         return loadRepository(ConfigurationMetadataRepositoryJsonBuilder.create()).     } catch (IOException ex) {         throw new IllegalStateException("Failed to load metadata", ex).     } }
false;private;1;11;;private ConfigurationMetadataRepository loadRepository(ConfigurationMetadataRepositoryJsonBuilder builder) throws IOException {     Resource[] resources = new PathMatchingResourcePatternResolver().getResources("classpath*:/META-INF/spring-configuration-metadata.json").     for (Resource resource : resources) {         try (InputStream inputStream = resource.getInputStream()) {             builder.withJsonResource(inputStream).         }     }     return builder.build(). }
false;private;0;14;;private void logLegacyPropertiesReport() {     if (this.report == null || this.reported) {         return.     }     String warningReport = this.report.getWarningReport().     if (warningReport != null) {         logger.warn(warningReport).     }     String errorReport = this.report.getErrorReport().     if (errorReport != null) {         logger.error(errorReport).     }     this.reported = true. }
