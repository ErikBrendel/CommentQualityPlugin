commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;10;;private static Integer determineLineNumber(ConfigurationProperty property) {     Origin origin = property.getOrigin().     if (origin instanceof TextResourceOrigin) {         TextResourceOrigin textOrigin = (TextResourceOrigin) origin.         if (textOrigin.getLocation() != null) {             return textOrigin.getLocation().getLine() + 1.         }     }     return null. }
false;private,static;2;17;;private static boolean determineCompatibleType(ConfigurationMetadataProperty metadata, ConfigurationMetadataProperty replacementMetadata) {     String currentType = metadata.getType().     String replacementType = determineReplacementType(replacementMetadata).     if (replacementType == null || currentType == null) {         return false.     }     if (replacementType.equals(currentType)) {         return true.     }     if (replacementType.equals(Duration.class.getName()) && (currentType.equals(Long.class.getName()) || currentType.equals(Integer.class.getName()))) {         return true.     }     return false. }
false;private,static;1;14;;private static String determineReplacementType(ConfigurationMetadataProperty replacementMetadata) {     if (replacementMetadata == null || replacementMetadata.getType() == null) {         return null.     }     String candidate = replacementMetadata.getType().     if (candidate.startsWith(Map.class.getName())) {         int lastComma = candidate.lastIndexOf(',').         if (lastComma != -1) {             return candidate.substring(lastComma + 1, candidate.length() - 1).trim().         }     }     return candidate. }
false;public;0;3;;public ConfigurationProperty getProperty() {     return this.property. }
false;public;0;3;;public Integer getLineNumber() {     return this.lineNumber. }
false;public;0;3;;public ConfigurationMetadataProperty getMetadata() {     return this.metadata. }
false;public;0;3;;public boolean isCompatibleType() {     return this.compatibleType. }
false;public;0;21;;public String determineReason() {     if (this.compatibleType) {         return "Replacement: " + this.metadata.getDeprecation().getReplacement().     }     Deprecation deprecation = this.metadata.getDeprecation().     if (StringUtils.hasText(deprecation.getShortReason())) {         return "Reason: " + deprecation.getShortReason().     }     if (StringUtils.hasText(deprecation.getReplacement())) {         if (this.replacementMetadata != null) {             return String.format("Reason: Replacement key '%s' uses an incompatible target type", deprecation.getReplacement()).         } else {             return String.format("Reason: No metadata found for replacement key '%s'", deprecation.getReplacement()).         }     }     return "Reason: none". }
