commented;modifiers;parameterAmount;loc;comment;code
false;public;2;27;;@Override public void visit(ASTNode[] nodes, SourceUnit source) {     this.sourceUnit = source.     List<AnnotationNode> annotationNodes = new ArrayList<>().     ClassVisitor classVisitor = new ClassVisitor(source, annotationNodes).     for (ASTNode node : nodes) {         if (node instanceof ModuleNode) {             ModuleNode module = (ModuleNode) node.             visitAnnotatedNode(module.getPackage(), annotationNodes).             for (ImportNode importNode : module.getImports()) {                 visitAnnotatedNode(importNode, annotationNodes).             }             for (ImportNode importNode : module.getStarImports()) {                 visitAnnotatedNode(importNode, annotationNodes).             }             module.getStaticImports().forEach((name, importNode) -> visitAnnotatedNode(importNode, annotationNodes)).             module.getStaticStarImports().forEach((name, importNode) -> visitAnnotatedNode(importNode, annotationNodes)).             for (ClassNode classNode : module.getClasses()) {                 visitAnnotatedNode(classNode, annotationNodes).                 classNode.visitContents(classVisitor).             }         }     }     processAnnotationNodes(annotationNodes). }
false;protected;0;3;;protected SourceUnit getSourceUnit() {     return this.sourceUnit. }
false;protected,abstract;1;1;;protected abstract void processAnnotationNodes(List<AnnotationNode> annotationNodes).
false;private;2;17;;private void visitAnnotatedNode(AnnotatedNode annotatedNode, List<AnnotationNode> annotatedNodes) {     if (annotatedNode != null) {         Iterator<AnnotationNode> annotationNodes = annotatedNode.getAnnotations().iterator().         while (annotationNodes.hasNext()) {             AnnotationNode annotationNode = annotationNodes.next().             if (this.interestingAnnotationNames.contains(annotationNode.getClassNode().getName())) {                 annotatedNodes.add(annotationNode).                 if (this.removeAnnotations) {                     annotationNodes.remove().                 }             }         }     } }
false;protected;0;4;;@Override protected SourceUnit getSourceUnit() {     return this.source. }
false;public;1;4;;@Override public void visitAnnotations(AnnotatedNode node) {     visitAnnotatedNode(node, this.annotationNodes). }
