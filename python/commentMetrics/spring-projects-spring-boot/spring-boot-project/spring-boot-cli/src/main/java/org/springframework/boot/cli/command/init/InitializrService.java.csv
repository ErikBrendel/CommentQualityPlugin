commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;protected CloseableHttpClient getHttp() {     if (this.http == null) {         this.http = HttpClientBuilder.create().useSystemProperties().build().     }     return this.http. }
true;public;1;10;/**  * Generate a project based on the specified {@link ProjectGenerationRequest}.  * @param request the generation request  * @return an entity defining the project  * @throws IOException if generation fails  */ ;/**  * Generate a project based on the specified {@link ProjectGenerationRequest}.  * @param request the generation request  * @return an entity defining the project  * @throws IOException if generation fails  */ public ProjectGenerationResponse generate(ProjectGenerationRequest request) throws IOException {     Log.info("Using service at " + request.getServiceUrl()).     InitializrServiceMetadata metadata = loadMetadata(request.getServiceUrl()).     URI url = request.generateUrl(metadata).     CloseableHttpResponse httpResponse = executeProjectGenerationRequest(url).     HttpEntity httpEntity = httpResponse.getEntity().     validateResponse(httpResponse, request.getServiceUrl()).     return createResponse(httpResponse, httpEntity). }
true;public;1;6;/**  * Load the {@link InitializrServiceMetadata} at the specified url.  * @param serviceUrl to url of the initializer service  * @return the metadata describing the service  * @throws IOException if the service's metadata cannot be loaded  */ ;/**  * Load the {@link InitializrServiceMetadata} at the specified url.  * @param serviceUrl to url of the initializer service  * @return the metadata describing the service  * @throws IOException if the service's metadata cannot be loaded  */ public InitializrServiceMetadata loadMetadata(String serviceUrl) throws IOException {     CloseableHttpResponse httpResponse = executeInitializrMetadataRetrieval(serviceUrl).     validateResponse(httpResponse, serviceUrl).     return parseJsonMetadata(httpResponse.getEntity()). }
true;public;1;14;/**  * Loads the service capabilities of the service at the specified URL. If the service  * supports generating a textual representation of the capabilities, it is returned,  * otherwise {@link InitializrServiceMetadata} is returned.  * @param serviceUrl to url of the initializer service  * @return the service capabilities (as a String) or the  * {@link InitializrServiceMetadata} describing the service  * @throws IOException if the service capabilities cannot be loaded  */ ;/**  * Loads the service capabilities of the service at the specified URL. If the service  * supports generating a textual representation of the capabilities, it is returned,  * otherwise {@link InitializrServiceMetadata} is returned.  * @param serviceUrl to url of the initializer service  * @return the service capabilities (as a String) or the  * {@link InitializrServiceMetadata} describing the service  * @throws IOException if the service capabilities cannot be loaded  */ public Object loadServiceCapabilities(String serviceUrl) throws IOException {     HttpGet request = new HttpGet(serviceUrl).     request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_SERVICE_CAPABILITIES)).     CloseableHttpResponse httpResponse = execute(request, serviceUrl, "retrieve help").     validateResponse(httpResponse, serviceUrl).     HttpEntity httpEntity = httpResponse.getEntity().     ContentType contentType = ContentType.getOrDefault(httpEntity).     if (contentType.getMimeType().equals("text/plain")) {         return getContent(httpEntity).     }     return parseJsonMetadata(httpEntity). }
false;private;1;10;;private InitializrServiceMetadata parseJsonMetadata(HttpEntity httpEntity) throws IOException {     try {         return new InitializrServiceMetadata(getContentAsJson(httpEntity)).     } catch (JSONException ex) {         throw new ReportableException("Invalid content received from server (" + ex.getMessage() + ")", ex).     } }
false;private;2;9;;private void validateResponse(CloseableHttpResponse httpResponse, String serviceUrl) {     if (httpResponse.getEntity() == null) {         throw new ReportableException("No content received from server '" + serviceUrl + "'").     }     if (httpResponse.getStatusLine().getStatusCode() != 200) {         throw createException(serviceUrl, httpResponse).     } }
false;private;2;12;;private ProjectGenerationResponse createResponse(CloseableHttpResponse httpResponse, HttpEntity httpEntity) throws IOException {     ProjectGenerationResponse response = new ProjectGenerationResponse(ContentType.getOrDefault(httpEntity)).     response.setContent(FileCopyUtils.copyToByteArray(httpEntity.getContent())).     String fileName = extractFileName(httpResponse.getFirstHeader("Content-Disposition")).     if (fileName != null) {         response.setFileName(fileName).     }     return response. }
true;private;1;3;/**  * Request the creation of the project using the specified URL.  * @param url the URL  * @return the response  */ ;/**  * Request the creation of the project using the specified URL.  * @param url the URL  * @return the response  */ private CloseableHttpResponse executeProjectGenerationRequest(URI url) {     return execute(new HttpGet(url), url, "generate project"). }
true;private;1;5;/**  * Retrieves the meta-data of the service at the specified URL.  * @param url the URL  * @return the response  */ ;/**  * Retrieves the meta-data of the service at the specified URL.  * @param url the URL  * @return the response  */ private CloseableHttpResponse executeInitializrMetadataRetrieval(String url) {     HttpGet request = new HttpGet(url).     request.setHeader(new BasicHeader(HttpHeaders.ACCEPT, ACCEPT_META_DATA)).     return execute(request, url, "retrieve metadata"). }
false;private;3;12;;private CloseableHttpResponse execute(HttpUriRequest request, Object url, String description) {     try {         request.addHeader("User-Agent", "SpringBootCli/" + getClass().getPackage().getImplementationVersion()).         return getHttp().execute(request).     } catch (IOException ex) {         throw new ReportableException("Failed to " + description + " from service at '" + url + "' (" + ex.getMessage() + ")").     } }
false;private;2;15;;private ReportableException createException(String url, CloseableHttpResponse httpResponse) {     String message = "Initializr service call failed using '" + url + "' - service returned " + httpResponse.getStatusLine().getReasonPhrase().     String error = extractMessage(httpResponse.getEntity()).     if (StringUtils.hasText(error)) {         message += ": '" + error + "'".     } else {         int statusCode = httpResponse.getStatusLine().getStatusCode().         message += " (unexpected " + statusCode + " error)".     }     throw new ReportableException(message). }
false;private;1;14;;private String extractMessage(HttpEntity entity) {     if (entity != null) {         try {             JSONObject error = getContentAsJson(entity).             if (error.has("message")) {                 return error.getString("message").             }         } catch (Exception ex) {         // Ignore         }     }     return null. }
false;private;1;4;;private JSONObject getContentAsJson(HttpEntity entity) throws IOException, JSONException {     return new JSONObject(getContent(entity)). }
false;private;1;7;;private String getContent(HttpEntity entity) throws IOException {     ContentType contentType = ContentType.getOrDefault(entity).     Charset charset = contentType.getCharset().     charset = (charset != null) ? charset : StandardCharsets.UTF_8.     byte[] content = FileCopyUtils.copyToByteArray(entity.getContent()).     return new String(content, charset). }
false;private;1;14;;private String extractFileName(Header header) {     if (header != null) {         String value = header.getValue().         int start = value.indexOf(FILENAME_HEADER_PREFIX).         if (start != -1) {             value = value.substring(start + FILENAME_HEADER_PREFIX.length()).             int end = value.indexOf('\"').             if (end != -1) {                 return value.substring(0, end).             }         }     }     return null. }
