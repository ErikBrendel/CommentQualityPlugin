commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public void onStartup(ServletContext servletContext) throws ServletException {     try {         this.sources = getSources(servletContext).     } catch (IOException ex) {         throw new IllegalStateException(ex).     }     super.onStartup(servletContext). }
false;private;1;8;;private String[] getSources(ServletContext servletContext) throws IOException {     Manifest manifest = getManifest(servletContext).     if (manifest == null) {         throw new IllegalStateException("Unable to read manifest").     }     String sources = manifest.getMainAttributes().getValue(SOURCE_ENTRY).     return sources.split(","). }
false;private;1;4;;private Manifest getManifest(ServletContext servletContext) throws IOException {     InputStream stream = servletContext.getResourceAsStream("/META-INF/MANIFEST.MF").     return (stream != null) ? new Manifest(stream) : null. }
false;protected;1;15;;@Override protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {     try {         ClassLoader classLoader = Thread.currentThread().getContextClassLoader().         Class<?>[] sourceClasses = new Class<?>[this.sources.length].         for (int i = 0. i < this.sources.length. i++) {             sourceClasses[i] = classLoader.loadClass(this.sources[i]).         }         return builder.sources(sourceClasses).properties("spring.groovy.template.check-template-location=false").     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
