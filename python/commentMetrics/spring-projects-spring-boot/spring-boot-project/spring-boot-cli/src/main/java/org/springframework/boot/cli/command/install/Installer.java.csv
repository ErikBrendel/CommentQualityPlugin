commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isAutoconfigure() {     return false. }
false;private,static;2;12;;private static GroovyCompilerConfiguration createCompilerConfiguration(OptionSet options, CompilerOptionHandler compilerOptionHandler) {     List<RepositoryConfiguration> repositoryConfiguration = RepositoryConfigurationFactory.createDefaultRepositoryConfiguration().     return new OptionSetGroovyCompilerConfiguration(options, compilerOptionHandler, repositoryConfiguration) {          @Override         public boolean isAutoconfigure() {             return false.         }     }. }
false;private;0;10;;private Properties loadInstallCounts() throws IOException {     Properties properties = new Properties().     File installed = getInstalled().     if (installed.exists()) {         FileReader reader = new FileReader(installed).         properties.load(reader).         reader.close().     }     return properties. }
false;private;0;5;;private void saveInstallCounts() throws IOException {     try (FileWriter writer = new FileWriter(getInstalled())) {         this.installCounts.store(writer, null).     } }
false;public;1;15;;public void install(List<String> artifactIdentifiers) throws Exception {     File extDirectory = getDefaultExtDirectory().     extDirectory.mkdirs().     Log.info("Installing into: " + extDirectory).     List<File> artifactFiles = this.dependencyResolver.resolve(artifactIdentifiers).     for (File artifactFile : artifactFiles) {         int installCount = getInstallCount(artifactFile).         if (installCount == 0) {             FileCopyUtils.copy(artifactFile, new File(extDirectory, artifactFile.getName())).         }         setInstallCount(artifactFile, installCount + 1).     }     saveInstallCounts(). }
false;private;1;7;;private int getInstallCount(File file) {     String countString = this.installCounts.getProperty(file.getName()).     if (countString == null) {         return 0.     }     return Integer.valueOf(countString). }
false;private;2;8;;private void setInstallCount(File file, int count) {     if (count == 0) {         this.installCounts.remove(file.getName()).     } else {         this.installCounts.setProperty(file.getName(), Integer.toString(count)).     } }
false;public;1;13;;public void uninstall(List<String> artifactIdentifiers) throws Exception {     File extDirectory = getDefaultExtDirectory().     Log.info("Uninstalling from: " + extDirectory).     List<File> artifactFiles = this.dependencyResolver.resolve(artifactIdentifiers).     for (File artifactFile : artifactFiles) {         int installCount = getInstallCount(artifactFile).         if (installCount <= 1) {             new File(extDirectory, artifactFile.getName()).delete().         }         setInstallCount(artifactFile, installCount - 1).     }     saveInstallCounts(). }
false;public;0;9;;public void uninstallAll() throws Exception {     File extDirectory = getDefaultExtDirectory().     Log.info("Uninstalling from: " + extDirectory).     for (String name : this.installCounts.stringPropertyNames()) {         new File(extDirectory, name).delete().     }     this.installCounts.clear().     saveInstallCounts(). }
false;private;0;10;;private File getDefaultExtDirectory() {     String home = SystemPropertyUtils.resolvePlaceholders("${spring.home:${SPRING_HOME:.}}").     File extDirectory = new File(new File(home, "lib"), "ext").     if (!extDirectory.isDirectory() && !extDirectory.mkdirs()) {         throw new IllegalStateException("Failed to create ext directory " + extDirectory).     }     return extDirectory. }
false;private;0;3;;private File getInstalled() {     return new File(getDefaultExtDirectory(), ".installed"). }
