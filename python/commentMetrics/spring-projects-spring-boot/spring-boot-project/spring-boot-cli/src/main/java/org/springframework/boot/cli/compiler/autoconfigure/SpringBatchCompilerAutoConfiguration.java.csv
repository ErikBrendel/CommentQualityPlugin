commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean matches(ClassNode classNode) {     return AstUtils.hasAtLeastOneAnnotation(classNode, "EnableBatchProcessing"). }
false;public;1;7;;@Override public void applyDependencies(DependencyCustomizer dependencies) {     dependencies.ifAnyMissingClasses("org.springframework.batch.core.Job").add("spring-boot-starter-batch").     dependencies.ifAnyMissingClasses("org.springframework.jdbc.core.JdbcTemplate").add("spring-jdbc"). }
false;public;1;20;;@Override public void applyImports(ImportCustomizer imports) {     imports.addImports("org.springframework.batch.repeat.RepeatStatus", "org.springframework.batch.core.scope.context.ChunkContext", "org.springframework.batch.core.step.tasklet.Tasklet", "org.springframework.batch.core.configuration.annotation.StepScope", "org.springframework.batch.core.configuration.annotation.JobBuilderFactory", "org.springframework.batch.core.configuration.annotation.StepBuilderFactory", "org.springframework.batch.core.configuration.annotation.EnableBatchProcessing", "org.springframework.batch.core.Step", "org.springframework.batch.core.StepExecution", "org.springframework.batch.core.StepContribution", "org.springframework.batch.core.Job", "org.springframework.batch.core.JobExecution", "org.springframework.batch.core.JobParameter", "org.springframework.batch.core.JobParameters", "org.springframework.batch.core.launch.JobLauncher", "org.springframework.batch.core.converter.JobParametersConverter", "org.springframework.batch.core.converter.DefaultJobParametersConverter"). }
