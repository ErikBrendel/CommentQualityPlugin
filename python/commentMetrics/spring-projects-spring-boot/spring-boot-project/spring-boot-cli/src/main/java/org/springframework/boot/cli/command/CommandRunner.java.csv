# id;timestamp;commentText;codeText;commentWords;codeWords
CommandRunner -> public void addCommands(Iterable<Command> commands);1507173536;Add the specified commands._@param commands the commands to add;public void addCommands(Iterable<Command> commands) {_		Assert.notNull(commands, "Commands must not be null")__		for (Command command : commands) {_			addCommand(command)__		}_	};add,the,specified,commands,param,commands,the,commands,to,add;public,void,add,commands,iterable,command,commands,assert,not,null,commands,commands,must,not,be,null,for,command,command,commands,add,command,command
CommandRunner -> public void addCommands(Iterable<Command> commands);1519362690;Add the specified commands._@param commands the commands to add;public void addCommands(Iterable<Command> commands) {_		Assert.notNull(commands, "Commands must not be null")__		for (Command command : commands) {_			addCommand(command)__		}_	};add,the,specified,commands,param,commands,the,commands,to,add;public,void,add,commands,iterable,command,commands,assert,not,null,commands,commands,must,not,be,null,for,command,command,commands,add,command,command
CommandRunner -> public void addCommands(Iterable<Command> commands);1525376698;Add the specified commands._@param commands the commands to add;public void addCommands(Iterable<Command> commands) {_		Assert.notNull(commands, "Commands must not be null")__		for (Command command : commands) {_			addCommand(command)__		}_	};add,the,specified,commands,param,commands,the,commands,to,add;public,void,add,commands,iterable,command,commands,assert,not,null,commands,commands,must,not,be,null,for,command,command,commands,add,command,command
CommandRunner -> public void addCommands(Iterable<Command> commands);1532738143;Add the specified commands._@param commands the commands to add;public void addCommands(Iterable<Command> commands) {_		Assert.notNull(commands, "Commands must not be null")__		for (Command command : commands) {_			addCommand(command)__		}_	};add,the,specified,commands,param,commands,the,commands,to,add;public,void,add,commands,iterable,command,commands,assert,not,null,commands,commands,must,not,be,null,for,command,command,commands,add,command,command
CommandRunner -> public void addCommands(Iterable<Command> commands);1532852936;Add the specified commands._@param commands the commands to add;public void addCommands(Iterable<Command> commands) {_		Assert.notNull(commands, "Commands must not be null")__		for (Command command : commands) {_			addCommand(command)__		}_	};add,the,specified,commands,param,commands,the,commands,to,add;public,void,add,commands,iterable,command,commands,assert,not,null,commands,commands,must,not,be,null,for,command,command,commands,add,command,command
CommandRunner -> public void addCommand(Command command);1507173536;Add the specified command._@param command the command to add.;public void addCommand(Command command) {_		Assert.notNull(command, "Command must not be null")__		this.commands.add(command)__	};add,the,specified,command,param,command,the,command,to,add;public,void,add,command,command,command,assert,not,null,command,command,must,not,be,null,this,commands,add,command
CommandRunner -> public void addCommand(Command command);1519362690;Add the specified command._@param command the command to add.;public void addCommand(Command command) {_		Assert.notNull(command, "Command must not be null")__		this.commands.add(command)__	};add,the,specified,command,param,command,the,command,to,add;public,void,add,command,command,command,assert,not,null,command,command,must,not,be,null,this,commands,add,command
CommandRunner -> public void addCommand(Command command);1525376698;Add the specified command._@param command the command to add.;public void addCommand(Command command) {_		Assert.notNull(command, "Command must not be null")__		this.commands.add(command)__	};add,the,specified,command,param,command,the,command,to,add;public,void,add,command,command,command,assert,not,null,command,command,must,not,be,null,this,commands,add,command
CommandRunner -> public void addCommand(Command command);1532738143;Add the specified command._@param command the command to add.;public void addCommand(Command command) {_		Assert.notNull(command, "Command must not be null")__		this.commands.add(command)__	};add,the,specified,command,param,command,the,command,to,add;public,void,add,command,command,command,assert,not,null,command,command,must,not,be,null,this,commands,add,command
CommandRunner -> public void addCommand(Command command);1532852936;Add the specified command._@param command the command to add.;public void addCommand(Command command) {_		Assert.notNull(command, "Command must not be null")__		this.commands.add(command)__	};add,the,specified,command,param,command,the,command,to,add;public,void,add,command,command,command,assert,not,null,command,command,must,not,be,null,this,commands,add,command
CommandRunner -> public void setOptionCommands(Class<?>... commandClasses);1507173536;Set the command classes which should be considered option commands. An option_command is a special type of command that usually makes more sense to present as if_it is an option. For example '--version'._@param commandClasses the classes of option commands._@see #isOptionCommand(Command);public void setOptionCommands(Class<?>... commandClasses) {_		Assert.notNull(commandClasses, "CommandClasses must not be null")__		this.optionCommandClasses = commandClasses__	};set,the,command,classes,which,should,be,considered,option,commands,an,option,command,is,a,special,type,of,command,that,usually,makes,more,sense,to,present,as,if,it,is,an,option,for,example,version,param,command,classes,the,classes,of,option,commands,see,is,option,command,command;public,void,set,option,commands,class,command,classes,assert,not,null,command,classes,command,classes,must,not,be,null,this,option,command,classes,command,classes
CommandRunner -> public void setOptionCommands(Class<?>... commandClasses);1519362690;Set the command classes which should be considered option commands. An option_command is a special type of command that usually makes more sense to present as if_it is an option. For example '--version'._@param commandClasses the classes of option commands._@see #isOptionCommand(Command);public void setOptionCommands(Class<?>... commandClasses) {_		Assert.notNull(commandClasses, "CommandClasses must not be null")__		this.optionCommandClasses = commandClasses__	};set,the,command,classes,which,should,be,considered,option,commands,an,option,command,is,a,special,type,of,command,that,usually,makes,more,sense,to,present,as,if,it,is,an,option,for,example,version,param,command,classes,the,classes,of,option,commands,see,is,option,command,command;public,void,set,option,commands,class,command,classes,assert,not,null,command,classes,command,classes,must,not,be,null,this,option,command,classes,command,classes
CommandRunner -> public void setOptionCommands(Class<?>... commandClasses);1525376698;Set the command classes which should be considered option commands. An option_command is a special type of command that usually makes more sense to present as if_it is an option. For example '--version'._@param commandClasses the classes of option commands._@see #isOptionCommand(Command);public void setOptionCommands(Class<?>... commandClasses) {_		Assert.notNull(commandClasses, "CommandClasses must not be null")__		this.optionCommandClasses = commandClasses__	};set,the,command,classes,which,should,be,considered,option,commands,an,option,command,is,a,special,type,of,command,that,usually,makes,more,sense,to,present,as,if,it,is,an,option,for,example,version,param,command,classes,the,classes,of,option,commands,see,is,option,command,command;public,void,set,option,commands,class,command,classes,assert,not,null,command,classes,command,classes,must,not,be,null,this,option,command,classes,command,classes
CommandRunner -> public void setOptionCommands(Class<?>... commandClasses);1532738143;Set the command classes which should be considered option commands. An option_command is a special type of command that usually makes more sense to present as if_it is an option. For example '--version'._@param commandClasses the classes of option commands._@see #isOptionCommand(Command);public void setOptionCommands(Class<?>... commandClasses) {_		Assert.notNull(commandClasses, "CommandClasses must not be null")__		this.optionCommandClasses = commandClasses__	};set,the,command,classes,which,should,be,considered,option,commands,an,option,command,is,a,special,type,of,command,that,usually,makes,more,sense,to,present,as,if,it,is,an,option,for,example,version,param,command,classes,the,classes,of,option,commands,see,is,option,command,command;public,void,set,option,commands,class,command,classes,assert,not,null,command,classes,command,classes,must,not,be,null,this,option,command,classes,command,classes
CommandRunner -> public void setOptionCommands(Class<?>... commandClasses);1532852936;Set the command classes which should be considered option commands. An option_command is a special type of command that usually makes more sense to present as if_it is an option. For example '--version'._@param commandClasses the classes of option commands._@see #isOptionCommand(Command);public void setOptionCommands(Class<?>... commandClasses) {_		Assert.notNull(commandClasses, "CommandClasses must not be null")__		this.optionCommandClasses = commandClasses__	};set,the,command,classes,which,should,be,considered,option,commands,an,option,command,is,a,special,type,of,command,that,usually,makes,more,sense,to,present,as,if,it,is,an,option,for,example,version,param,command,classes,the,classes,of,option,commands,see,is,option,command,command;public,void,set,option,commands,class,command,classes,assert,not,null,command,classes,command,classes,must,not,be,null,this,option,command,classes,command,classes
CommandRunner -> protected ExitStatus run(String... args) throws Exception;1507173536;Parse the arguments and run a suitable command._@param args the arguments_@return the outcome of the command_@throws Exception if the command fails;protected ExitStatus run(String... args) throws Exception {_		if (args.length == 0) {_			throw new NoArgumentsException()__		}_		String commandName = args[0]__		String[] commandArguments = Arrays.copyOfRange(args, 1, args.length)__		Command command = findCommand(commandName)__		if (command == null) {_			throw new NoSuchCommandException(commandName)__		}_		beforeRun(command)__		try {_			return command.run(commandArguments)__		}_		finally {_			afterRun(command)__		}_	};parse,the,arguments,and,run,a,suitable,command,param,args,the,arguments,return,the,outcome,of,the,command,throws,exception,if,the,command,fails;protected,exit,status,run,string,args,throws,exception,if,args,length,0,throw,new,no,arguments,exception,string,command,name,args,0,string,command,arguments,arrays,copy,of,range,args,1,args,length,command,command,find,command,command,name,if,command,null,throw,new,no,such,command,exception,command,name,before,run,command,try,return,command,run,command,arguments,finally,after,run,command
CommandRunner -> protected ExitStatus run(String... args) throws Exception;1519362690;Parse the arguments and run a suitable command._@param args the arguments_@return the outcome of the command_@throws Exception if the command fails;protected ExitStatus run(String... args) throws Exception {_		if (args.length == 0) {_			throw new NoArgumentsException()__		}_		String commandName = args[0]__		String[] commandArguments = Arrays.copyOfRange(args, 1, args.length)__		Command command = findCommand(commandName)__		if (command == null) {_			throw new NoSuchCommandException(commandName)__		}_		beforeRun(command)__		try {_			return command.run(commandArguments)__		}_		finally {_			afterRun(command)__		}_	};parse,the,arguments,and,run,a,suitable,command,param,args,the,arguments,return,the,outcome,of,the,command,throws,exception,if,the,command,fails;protected,exit,status,run,string,args,throws,exception,if,args,length,0,throw,new,no,arguments,exception,string,command,name,args,0,string,command,arguments,arrays,copy,of,range,args,1,args,length,command,command,find,command,command,name,if,command,null,throw,new,no,such,command,exception,command,name,before,run,command,try,return,command,run,command,arguments,finally,after,run,command
CommandRunner -> protected ExitStatus run(String... args) throws Exception;1525376698;Parse the arguments and run a suitable command._@param args the arguments_@return the outcome of the command_@throws Exception if the command fails;protected ExitStatus run(String... args) throws Exception {_		if (args.length == 0) {_			throw new NoArgumentsException()__		}_		String commandName = args[0]__		String[] commandArguments = Arrays.copyOfRange(args, 1, args.length)__		Command command = findCommand(commandName)__		if (command == null) {_			throw new NoSuchCommandException(commandName)__		}_		beforeRun(command)__		try {_			return command.run(commandArguments)__		}_		finally {_			afterRun(command)__		}_	};parse,the,arguments,and,run,a,suitable,command,param,args,the,arguments,return,the,outcome,of,the,command,throws,exception,if,the,command,fails;protected,exit,status,run,string,args,throws,exception,if,args,length,0,throw,new,no,arguments,exception,string,command,name,args,0,string,command,arguments,arrays,copy,of,range,args,1,args,length,command,command,find,command,command,name,if,command,null,throw,new,no,such,command,exception,command,name,before,run,command,try,return,command,run,command,arguments,finally,after,run,command
CommandRunner -> protected ExitStatus run(String... args) throws Exception;1532738143;Parse the arguments and run a suitable command._@param args the arguments_@return the outcome of the command_@throws Exception if the command fails;protected ExitStatus run(String... args) throws Exception {_		if (args.length == 0) {_			throw new NoArgumentsException()__		}_		String commandName = args[0]__		String[] commandArguments = Arrays.copyOfRange(args, 1, args.length)__		Command command = findCommand(commandName)__		if (command == null) {_			throw new NoSuchCommandException(commandName)__		}_		beforeRun(command)__		try {_			return command.run(commandArguments)__		}_		finally {_			afterRun(command)__		}_	};parse,the,arguments,and,run,a,suitable,command,param,args,the,arguments,return,the,outcome,of,the,command,throws,exception,if,the,command,fails;protected,exit,status,run,string,args,throws,exception,if,args,length,0,throw,new,no,arguments,exception,string,command,name,args,0,string,command,arguments,arrays,copy,of,range,args,1,args,length,command,command,find,command,command,name,if,command,null,throw,new,no,such,command,exception,command,name,before,run,command,try,return,command,run,command,arguments,finally,after,run,command
CommandRunner -> protected ExitStatus run(String... args) throws Exception;1532852936;Parse the arguments and run a suitable command._@param args the arguments_@return the outcome of the command_@throws Exception if the command fails;protected ExitStatus run(String... args) throws Exception {_		if (args.length == 0) {_			throw new NoArgumentsException()__		}_		String commandName = args[0]__		String[] commandArguments = Arrays.copyOfRange(args, 1, args.length)__		Command command = findCommand(commandName)__		if (command == null) {_			throw new NoSuchCommandException(commandName)__		}_		beforeRun(command)__		try {_			return command.run(commandArguments)__		}_		finally {_			afterRun(command)__		}_	};parse,the,arguments,and,run,a,suitable,command,param,args,the,arguments,return,the,outcome,of,the,command,throws,exception,if,the,command,fails;protected,exit,status,run,string,args,throws,exception,if,args,length,0,throw,new,no,arguments,exception,string,command,name,args,0,string,command,arguments,arrays,copy,of,range,args,1,args,length,command,command,find,command,command,name,if,command,null,throw,new,no,such,command,exception,command,name,before,run,command,try,return,command,run,command,arguments,finally,after,run,command
CommandRunner -> protected void beforeRun(Command command);1507173536;Subclass hook called before a command is run._@param command the command about to run;protected void beforeRun(Command command) {_	};subclass,hook,called,before,a,command,is,run,param,command,the,command,about,to,run;protected,void,before,run,command,command
CommandRunner -> protected void beforeRun(Command command);1519362690;Subclass hook called before a command is run._@param command the command about to run;protected void beforeRun(Command command) {_	};subclass,hook,called,before,a,command,is,run,param,command,the,command,about,to,run;protected,void,before,run,command,command
CommandRunner -> protected void beforeRun(Command command);1525376698;Subclass hook called before a command is run._@param command the command about to run;protected void beforeRun(Command command) {_	};subclass,hook,called,before,a,command,is,run,param,command,the,command,about,to,run;protected,void,before,run,command,command
CommandRunner -> protected void beforeRun(Command command);1532738143;Subclass hook called before a command is run._@param command the command about to run;protected void beforeRun(Command command) {_	};subclass,hook,called,before,a,command,is,run,param,command,the,command,about,to,run;protected,void,before,run,command,command
CommandRunner -> protected void beforeRun(Command command);1532852936;Subclass hook called before a command is run._@param command the command about to run;protected void beforeRun(Command command) {_	};subclass,hook,called,before,a,command,is,run,param,command,the,command,about,to,run;protected,void,before,run,command,command
CommandRunner -> protected void afterRun(Command command);1507173536;Subclass hook called after a command has run._@param command the command that has run;protected void afterRun(Command command) {_	};subclass,hook,called,after,a,command,has,run,param,command,the,command,that,has,run;protected,void,after,run,command,command
CommandRunner -> protected void afterRun(Command command);1519362690;Subclass hook called after a command has run._@param command the command that has run;protected void afterRun(Command command) {_	};subclass,hook,called,after,a,command,has,run,param,command,the,command,that,has,run;protected,void,after,run,command,command
CommandRunner -> protected void afterRun(Command command);1525376698;Subclass hook called after a command has run._@param command the command that has run;protected void afterRun(Command command) {_	};subclass,hook,called,after,a,command,has,run,param,command,the,command,that,has,run;protected,void,after,run,command,command
CommandRunner -> protected void afterRun(Command command);1532738143;Subclass hook called after a command has run._@param command the command that has run;protected void afterRun(Command command) {_	};subclass,hook,called,after,a,command,has,run,param,command,the,command,that,has,run;protected,void,after,run,command,command
CommandRunner -> protected void afterRun(Command command);1532852936;Subclass hook called after a command has run._@param command the command that has run;protected void afterRun(Command command) {_	};subclass,hook,called,after,a,command,has,run,param,command,the,command,that,has,run;protected,void,after,run,command,command
CommandRunner -> public CommandRunner(String name);1507173536;Create a new {@link CommandRunner} instance._@param name the name of the runner or {@code null};public CommandRunner(String name) {_		this.name = (StringUtils.hasLength(name) ? name + " " : "")__	};create,a,new,link,command,runner,instance,param,name,the,name,of,the,runner,or,code,null;public,command,runner,string,name,this,name,string,utils,has,length,name,name
CommandRunner -> public CommandRunner(String name);1519362690;Create a new {@link CommandRunner} instance._@param name the name of the runner or {@code null};public CommandRunner(String name) {_		this.name = (StringUtils.hasLength(name) ? name + " " : "")__	};create,a,new,link,command,runner,instance,param,name,the,name,of,the,runner,or,code,null;public,command,runner,string,name,this,name,string,utils,has,length,name,name
CommandRunner -> public CommandRunner(String name);1525376698;Create a new {@link CommandRunner} instance._@param name the name of the runner or {@code null};public CommandRunner(String name) {_		this.name = (StringUtils.hasLength(name) ? name + " " : "")__	};create,a,new,link,command,runner,instance,param,name,the,name,of,the,runner,or,code,null;public,command,runner,string,name,this,name,string,utils,has,length,name,name
CommandRunner -> public CommandRunner(String name);1532738143;Create a new {@link CommandRunner} instance._@param name the name of the runner or {@code null};public CommandRunner(String name) {_		this.name = (StringUtils.hasLength(name) ? name + " " : "")__	};create,a,new,link,command,runner,instance,param,name,the,name,of,the,runner,or,code,null;public,command,runner,string,name,this,name,string,utils,has,length,name,name
CommandRunner -> public CommandRunner(String name);1532852936;Create a new {@link CommandRunner} instance._@param name the name of the runner or {@code null};public CommandRunner(String name) {_		this.name = StringUtils.hasLength(name) ? name + " " : ""__	};create,a,new,link,command,runner,instance,param,name,the,name,of,the,runner,or,code,null;public,command,runner,string,name,this,name,string,utils,has,length,name,name
CommandRunner -> public Command findCommand(String name);1507173536;Find a command by name._@param name the name of the command_@return the command or {@code null} if not found;public Command findCommand(String name) {_		for (Command candidate : this.commands) {_			String candidateName = candidate.getName()__			if (candidateName.equals(name) || (isOptionCommand(candidate)_					&& ("--" + candidateName).equals(name))) {_				return candidate__			}_		}_		return null__	};find,a,command,by,name,param,name,the,name,of,the,command,return,the,command,or,code,null,if,not,found;public,command,find,command,string,name,for,command,candidate,this,commands,string,candidate,name,candidate,get,name,if,candidate,name,equals,name,is,option,command,candidate,candidate,name,equals,name,return,candidate,return,null
CommandRunner -> public Command findCommand(String name);1519362690;Find a command by name._@param name the name of the command_@return the command or {@code null} if not found;public Command findCommand(String name) {_		for (Command candidate : this.commands) {_			String candidateName = candidate.getName()__			if (candidateName.equals(name) || (isOptionCommand(candidate)_					&& ("--" + candidateName).equals(name))) {_				return candidate__			}_		}_		return null__	};find,a,command,by,name,param,name,the,name,of,the,command,return,the,command,or,code,null,if,not,found;public,command,find,command,string,name,for,command,candidate,this,commands,string,candidate,name,candidate,get,name,if,candidate,name,equals,name,is,option,command,candidate,candidate,name,equals,name,return,candidate,return,null
CommandRunner -> public Command findCommand(String name);1525376698;Find a command by name._@param name the name of the command_@return the command or {@code null} if not found;public Command findCommand(String name) {_		for (Command candidate : this.commands) {_			String candidateName = candidate.getName()__			if (candidateName.equals(name) || (isOptionCommand(candidate)_					&& ("--" + candidateName).equals(name))) {_				return candidate__			}_		}_		return null__	};find,a,command,by,name,param,name,the,name,of,the,command,return,the,command,or,code,null,if,not,found;public,command,find,command,string,name,for,command,candidate,this,commands,string,candidate,name,candidate,get,name,if,candidate,name,equals,name,is,option,command,candidate,candidate,name,equals,name,return,candidate,return,null
CommandRunner -> public Command findCommand(String name);1532738143;Find a command by name._@param name the name of the command_@return the command or {@code null} if not found;public Command findCommand(String name) {_		for (Command candidate : this.commands) {_			String candidateName = candidate.getName()__			if (candidateName.equals(name) || (isOptionCommand(candidate)_					&& ("--" + candidateName).equals(name))) {_				return candidate__			}_		}_		return null__	};find,a,command,by,name,param,name,the,name,of,the,command,return,the,command,or,code,null,if,not,found;public,command,find,command,string,name,for,command,candidate,this,commands,string,candidate,name,candidate,get,name,if,candidate,name,equals,name,is,option,command,candidate,candidate,name,equals,name,return,candidate,return,null
CommandRunner -> public Command findCommand(String name);1532852936;Find a command by name._@param name the name of the command_@return the command or {@code null} if not found;public Command findCommand(String name) {_		for (Command candidate : this.commands) {_			String candidateName = candidate.getName()__			if (candidateName.equals(name) || (isOptionCommand(candidate)_					&& ("--" + candidateName).equals(name))) {_				return candidate__			}_		}_		return null__	};find,a,command,by,name,param,name,the,name,of,the,command,return,the,command,or,code,null,if,not,found;public,command,find,command,string,name,for,command,candidate,this,commands,string,candidate,name,candidate,get,name,if,candidate,name,equals,name,is,option,command,candidate,candidate,name,equals,name,return,candidate,return,null
CommandRunner -> public void setHiddenCommands(Class<?>... commandClasses);1507173536;Set the command classes which should be hidden (i.e. executed but not displayed in_the available commands list)._@param commandClasses the classes of hidden commands;public void setHiddenCommands(Class<?>... commandClasses) {_		Assert.notNull(commandClasses, "CommandClasses must not be null")__		this.hiddenCommandClasses = commandClasses__	};set,the,command,classes,which,should,be,hidden,i,e,executed,but,not,displayed,in,the,available,commands,list,param,command,classes,the,classes,of,hidden,commands;public,void,set,hidden,commands,class,command,classes,assert,not,null,command,classes,command,classes,must,not,be,null,this,hidden,command,classes,command,classes
CommandRunner -> public void setHiddenCommands(Class<?>... commandClasses);1519362690;Set the command classes which should be hidden (i.e. executed but not displayed in_the available commands list)._@param commandClasses the classes of hidden commands;public void setHiddenCommands(Class<?>... commandClasses) {_		Assert.notNull(commandClasses, "CommandClasses must not be null")__		this.hiddenCommandClasses = commandClasses__	};set,the,command,classes,which,should,be,hidden,i,e,executed,but,not,displayed,in,the,available,commands,list,param,command,classes,the,classes,of,hidden,commands;public,void,set,hidden,commands,class,command,classes,assert,not,null,command,classes,command,classes,must,not,be,null,this,hidden,command,classes,command,classes
CommandRunner -> public void setHiddenCommands(Class<?>... commandClasses);1525376698;Set the command classes which should be hidden (i.e. executed but not displayed in_the available commands list)._@param commandClasses the classes of hidden commands;public void setHiddenCommands(Class<?>... commandClasses) {_		Assert.notNull(commandClasses, "CommandClasses must not be null")__		this.hiddenCommandClasses = commandClasses__	};set,the,command,classes,which,should,be,hidden,i,e,executed,but,not,displayed,in,the,available,commands,list,param,command,classes,the,classes,of,hidden,commands;public,void,set,hidden,commands,class,command,classes,assert,not,null,command,classes,command,classes,must,not,be,null,this,hidden,command,classes,command,classes
CommandRunner -> public void setHiddenCommands(Class<?>... commandClasses);1532738143;Set the command classes which should be hidden (i.e. executed but not displayed in_the available commands list)._@param commandClasses the classes of hidden commands;public void setHiddenCommands(Class<?>... commandClasses) {_		Assert.notNull(commandClasses, "CommandClasses must not be null")__		this.hiddenCommandClasses = commandClasses__	};set,the,command,classes,which,should,be,hidden,i,e,executed,but,not,displayed,in,the,available,commands,list,param,command,classes,the,classes,of,hidden,commands;public,void,set,hidden,commands,class,command,classes,assert,not,null,command,classes,command,classes,must,not,be,null,this,hidden,command,classes,command,classes
CommandRunner -> public void setHiddenCommands(Class<?>... commandClasses);1532852936;Set the command classes which should be hidden (i.e. executed but not displayed in_the available commands list)._@param commandClasses the classes of hidden commands;public void setHiddenCommands(Class<?>... commandClasses) {_		Assert.notNull(commandClasses, "CommandClasses must not be null")__		this.hiddenCommandClasses = commandClasses__	};set,the,command,classes,which,should,be,hidden,i,e,executed,but,not,displayed,in,the,available,commands,list,param,command,classes,the,classes,of,hidden,commands;public,void,set,hidden,commands,class,command,classes,assert,not,null,command,classes,command,classes,must,not,be,null,this,hidden,command,classes,command,classes
CommandRunner -> public boolean isOptionCommand(Command command);1507173536;Returns if the specified command is an option command._@param command the command to test_@return {@code true} if the command is an option command_@see #setOptionCommands(Class...);public boolean isOptionCommand(Command command) {_		return isCommandInstanceOf(command, this.optionCommandClasses)__	};returns,if,the,specified,command,is,an,option,command,param,command,the,command,to,test,return,code,true,if,the,command,is,an,option,command,see,set,option,commands,class;public,boolean,is,option,command,command,command,return,is,command,instance,of,command,this,option,command,classes
CommandRunner -> public boolean isOptionCommand(Command command);1519362690;Returns if the specified command is an option command._@param command the command to test_@return {@code true} if the command is an option command_@see #setOptionCommands(Class...);public boolean isOptionCommand(Command command) {_		return isCommandInstanceOf(command, this.optionCommandClasses)__	};returns,if,the,specified,command,is,an,option,command,param,command,the,command,to,test,return,code,true,if,the,command,is,an,option,command,see,set,option,commands,class;public,boolean,is,option,command,command,command,return,is,command,instance,of,command,this,option,command,classes
CommandRunner -> public boolean isOptionCommand(Command command);1525376698;Returns if the specified command is an option command._@param command the command to test_@return {@code true} if the command is an option command_@see #setOptionCommands(Class...);public boolean isOptionCommand(Command command) {_		return isCommandInstanceOf(command, this.optionCommandClasses)__	};returns,if,the,specified,command,is,an,option,command,param,command,the,command,to,test,return,code,true,if,the,command,is,an,option,command,see,set,option,commands,class;public,boolean,is,option,command,command,command,return,is,command,instance,of,command,this,option,command,classes
CommandRunner -> public boolean isOptionCommand(Command command);1532738143;Returns if the specified command is an option command._@param command the command to test_@return {@code true} if the command is an option command_@see #setOptionCommands(Class...);public boolean isOptionCommand(Command command) {_		return isCommandInstanceOf(command, this.optionCommandClasses)__	};returns,if,the,specified,command,is,an,option,command,param,command,the,command,to,test,return,code,true,if,the,command,is,an,option,command,see,set,option,commands,class;public,boolean,is,option,command,command,command,return,is,command,instance,of,command,this,option,command,classes
CommandRunner -> public boolean isOptionCommand(Command command);1532852936;Returns if the specified command is an option command._@param command the command to test_@return {@code true} if the command is an option command_@see #setOptionCommands(Class...);public boolean isOptionCommand(Command command) {_		return isCommandInstanceOf(command, this.optionCommandClasses)__	};returns,if,the,specified,command,is,an,option,command,param,command,the,command,to,test,return,code,true,if,the,command,is,an,option,command,see,set,option,commands,class;public,boolean,is,option,command,command,command,return,is,command,instance,of,command,this,option,command,classes
CommandRunner -> public String getName();1507173536;Return the name of the runner or an empty string. Non-empty names will include a_trailing space character so that they can be used as a prefix._@return the name of the runner;public String getName() {_		return this.name__	};return,the,name,of,the,runner,or,an,empty,string,non,empty,names,will,include,a,trailing,space,character,so,that,they,can,be,used,as,a,prefix,return,the,name,of,the,runner;public,string,get,name,return,this,name
CommandRunner -> public String getName();1519362690;Return the name of the runner or an empty string. Non-empty names will include a_trailing space character so that they can be used as a prefix._@return the name of the runner;public String getName() {_		return this.name__	};return,the,name,of,the,runner,or,an,empty,string,non,empty,names,will,include,a,trailing,space,character,so,that,they,can,be,used,as,a,prefix,return,the,name,of,the,runner;public,string,get,name,return,this,name
CommandRunner -> public String getName();1525376698;Return the name of the runner or an empty string. Non-empty names will include a_trailing space character so that they can be used as a prefix._@return the name of the runner;public String getName() {_		return this.name__	};return,the,name,of,the,runner,or,an,empty,string,non,empty,names,will,include,a,trailing,space,character,so,that,they,can,be,used,as,a,prefix,return,the,name,of,the,runner;public,string,get,name,return,this,name
CommandRunner -> public String getName();1532738143;Return the name of the runner or an empty string. Non-empty names will include a_trailing space character so that they can be used as a prefix._@return the name of the runner;public String getName() {_		return this.name__	};return,the,name,of,the,runner,or,an,empty,string,non,empty,names,will,include,a,trailing,space,character,so,that,they,can,be,used,as,a,prefix,return,the,name,of,the,runner;public,string,get,name,return,this,name
CommandRunner -> public String getName();1532852936;Return the name of the runner or an empty string. Non-empty names will include a_trailing space character so that they can be used as a prefix._@return the name of the runner;public String getName() {_		return this.name__	};return,the,name,of,the,runner,or,an,empty,string,non,empty,names,will,include,a,trailing,space,character,so,that,they,can,be,used,as,a,prefix,return,the,name,of,the,runner;public,string,get,name,return,this,name
CommandRunner -> public int runAndHandleErrors(String... args);1507173536;Run the appropriate and handle and errors._@param args the input arguments_@return a return status code (non boot is used to indicate an error);public int runAndHandleErrors(String... args) {_		String[] argsWithoutDebugFlags = removeDebugFlags(args)__		boolean debug = argsWithoutDebugFlags.length != args.length__		if (debug) {_			System.setProperty("debug", "true")__		}_		try {_			ExitStatus result = run(argsWithoutDebugFlags)__			_			if (result != null && result.isHangup()) {_				return (result.getCode() > 0 ? result.getCode() : 0)__			}_			return 0__		}_		catch (NoArgumentsException ex) {_			showUsage()__			return 1__		}_		catch (Exception ex) {_			return handleError(debug, ex)__		}_	};run,the,appropriate,and,handle,and,errors,param,args,the,input,arguments,return,a,return,status,code,non,boot,is,used,to,indicate,an,error;public,int,run,and,handle,errors,string,args,string,args,without,debug,flags,remove,debug,flags,args,boolean,debug,args,without,debug,flags,length,args,length,if,debug,system,set,property,debug,true,try,exit,status,result,run,args,without,debug,flags,if,result,null,result,is,hangup,return,result,get,code,0,result,get,code,0,return,0,catch,no,arguments,exception,ex,show,usage,return,1,catch,exception,ex,return,handle,error,debug,ex
CommandRunner -> public int runAndHandleErrors(String... args);1519362690;Run the appropriate and handle and errors._@param args the input arguments_@return a return status code (non boot is used to indicate an error);public int runAndHandleErrors(String... args) {_		String[] argsWithoutDebugFlags = removeDebugFlags(args)__		boolean debug = argsWithoutDebugFlags.length != args.length__		if (debug) {_			System.setProperty("debug", "true")__		}_		try {_			ExitStatus result = run(argsWithoutDebugFlags)__			_			if (result != null && result.isHangup()) {_				return (result.getCode() > 0 ? result.getCode() : 0)__			}_			return 0__		}_		catch (NoArgumentsException ex) {_			showUsage()__			return 1__		}_		catch (Exception ex) {_			return handleError(debug, ex)__		}_	};run,the,appropriate,and,handle,and,errors,param,args,the,input,arguments,return,a,return,status,code,non,boot,is,used,to,indicate,an,error;public,int,run,and,handle,errors,string,args,string,args,without,debug,flags,remove,debug,flags,args,boolean,debug,args,without,debug,flags,length,args,length,if,debug,system,set,property,debug,true,try,exit,status,result,run,args,without,debug,flags,if,result,null,result,is,hangup,return,result,get,code,0,result,get,code,0,return,0,catch,no,arguments,exception,ex,show,usage,return,1,catch,exception,ex,return,handle,error,debug,ex
CommandRunner -> public int runAndHandleErrors(String... args);1525376698;Run the appropriate and handle and errors._@param args the input arguments_@return a return status code (non boot is used to indicate an error);public int runAndHandleErrors(String... args) {_		String[] argsWithoutDebugFlags = removeDebugFlags(args)__		boolean debug = argsWithoutDebugFlags.length != args.length__		if (debug) {_			System.setProperty("debug", "true")__		}_		try {_			ExitStatus result = run(argsWithoutDebugFlags)__			_			if (result != null && result.isHangup()) {_				return (result.getCode() > 0 ? result.getCode() : 0)__			}_			return 0__		}_		catch (NoArgumentsException ex) {_			showUsage()__			return 1__		}_		catch (Exception ex) {_			return handleError(debug, ex)__		}_	};run,the,appropriate,and,handle,and,errors,param,args,the,input,arguments,return,a,return,status,code,non,boot,is,used,to,indicate,an,error;public,int,run,and,handle,errors,string,args,string,args,without,debug,flags,remove,debug,flags,args,boolean,debug,args,without,debug,flags,length,args,length,if,debug,system,set,property,debug,true,try,exit,status,result,run,args,without,debug,flags,if,result,null,result,is,hangup,return,result,get,code,0,result,get,code,0,return,0,catch,no,arguments,exception,ex,show,usage,return,1,catch,exception,ex,return,handle,error,debug,ex
CommandRunner -> public int runAndHandleErrors(String... args);1532738143;Run the appropriate and handle and errors._@param args the input arguments_@return a return status code (non boot is used to indicate an error);public int runAndHandleErrors(String... args) {_		String[] argsWithoutDebugFlags = removeDebugFlags(args)__		boolean debug = argsWithoutDebugFlags.length != args.length__		if (debug) {_			System.setProperty("debug", "true")__		}_		try {_			ExitStatus result = run(argsWithoutDebugFlags)__			_			if (result != null && result.isHangup()) {_				return (result.getCode() > 0) ? result.getCode() : 0__			}_			return 0__		}_		catch (NoArgumentsException ex) {_			showUsage()__			return 1__		}_		catch (Exception ex) {_			return handleError(debug, ex)__		}_	};run,the,appropriate,and,handle,and,errors,param,args,the,input,arguments,return,a,return,status,code,non,boot,is,used,to,indicate,an,error;public,int,run,and,handle,errors,string,args,string,args,without,debug,flags,remove,debug,flags,args,boolean,debug,args,without,debug,flags,length,args,length,if,debug,system,set,property,debug,true,try,exit,status,result,run,args,without,debug,flags,if,result,null,result,is,hangup,return,result,get,code,0,result,get,code,0,return,0,catch,no,arguments,exception,ex,show,usage,return,1,catch,exception,ex,return,handle,error,debug,ex
CommandRunner -> public int runAndHandleErrors(String... args);1532852936;Run the appropriate and handle and errors._@param args the input arguments_@return a return status code (non boot is used to indicate an error);public int runAndHandleErrors(String... args) {_		String[] argsWithoutDebugFlags = removeDebugFlags(args)__		boolean debug = argsWithoutDebugFlags.length != args.length__		if (debug) {_			System.setProperty("debug", "true")__		}_		try {_			ExitStatus result = run(argsWithoutDebugFlags)__			_			if (result != null && result.isHangup()) {_				return (result.getCode() > 0) ? result.getCode() : 0__			}_			return 0__		}_		catch (NoArgumentsException ex) {_			showUsage()__			return 1__		}_		catch (Exception ex) {_			return handleError(debug, ex)__		}_	};run,the,appropriate,and,handle,and,errors,param,args,the,input,arguments,return,a,return,status,code,non,boot,is,used,to,indicate,an,error;public,int,run,and,handle,errors,string,args,string,args,without,debug,flags,remove,debug,flags,args,boolean,debug,args,without,debug,flags,length,args,length,if,debug,system,set,property,debug,true,try,exit,status,result,run,args,without,debug,flags,if,result,null,result,is,hangup,return,result,get,code,0,result,get,code,0,return,0,catch,no,arguments,exception,ex,show,usage,return,1,catch,exception,ex,return,handle,error,debug,ex
