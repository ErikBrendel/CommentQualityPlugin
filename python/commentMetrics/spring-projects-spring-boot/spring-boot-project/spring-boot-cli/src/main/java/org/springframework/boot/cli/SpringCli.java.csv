commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;19;;public static void main(String... args) {     System.setProperty("java.awt.headless", Boolean.toString(true)).     LogbackInitializer.initialize().     CommandRunner runner = new CommandRunner("spring").     ClassUtils.overrideThreadContextClassLoader(createExtendedClassLoader(runner)).     runner.addCommand(new HelpCommand(runner)).     addServiceLoaderCommands(runner).     runner.addCommand(new ShellCommand()).     runner.addCommand(new HintCommand(runner)).     runner.setOptionCommands(HelpCommand.class, VersionCommand.class).     runner.setHiddenCommands(HintCommand.class).     int exitCode = runner.runAndHandleErrors(args).     if (exitCode != 0) {         // If successful, leave it to run in case it's a server app         System.exit(exitCode).     } }
false;private,static;1;7;;private static void addServiceLoaderCommands(CommandRunner runner) {     ServiceLoader<CommandFactory> factories = ServiceLoader.load(CommandFactory.class).     for (CommandFactory factory : factories) {         runner.addCommands(factory.getCommands()).     } }
false;private,static;1;3;;private static URLClassLoader createExtendedClassLoader(CommandRunner runner) {     return new URLClassLoader(getExtensionURLs(), runner.getClass().getClassLoader()). }
false;private,static;0;19;;private static URL[] getExtensionURLs() {     List<URL> urls = new ArrayList<>().     String home = SystemPropertyUtils.resolvePlaceholders("${spring.home:${SPRING_HOME:.}}").     File extDirectory = new File(new File(home, "lib"), "ext").     if (extDirectory.isDirectory()) {         for (File file : extDirectory.listFiles()) {             if (file.getName().endsWith(".jar")) {                 try {                     urls.add(file.toURI().toURL()).                 } catch (MalformedURLException ex) {                     throw new IllegalStateException(ex).                 }             }         }     }     return urls.toArray(new URL[0]). }
