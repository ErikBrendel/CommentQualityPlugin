commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Generate a report for the specified service. The report contains the available  * capabilities as advertised by the root endpoint.  * @param url the url of the service  * @return the report that describes the service  * @throws IOException if the report cannot be generated  */ ;/**  * Generate a report for the specified service. The report contains the available  * capabilities as advertised by the root endpoint.  * @param url the url of the service  * @return the report that describes the service  * @throws IOException if the report cannot be generated  */ public String generate(String url) throws IOException {     Object content = this.initializrService.loadServiceCapabilities(url).     if (content instanceof InitializrServiceMetadata) {         return generateHelp(url, (InitializrServiceMetadata) content).     }     return content.toString(). }
false;private;2;14;;private String generateHelp(String url, InitializrServiceMetadata metadata) {     String header = "Capabilities of " + url.     StringBuilder report = new StringBuilder().     report.append(repeat("=", header.length())).append(NEW_LINE).     report.append(header).append(NEW_LINE).     report.append(repeat("=", header.length())).append(NEW_LINE).     report.append(NEW_LINE).     reportAvailableDependencies(metadata, report).     report.append(NEW_LINE).     reportAvailableProjectTypes(metadata, report).     report.append(NEW_LINE).     reportDefaults(report, metadata).     return report.toString(). }
false;private;2;13;;private void reportAvailableDependencies(InitializrServiceMetadata metadata, StringBuilder report) {     report.append("Available dependencies:").append(NEW_LINE).     report.append("-----------------------").append(NEW_LINE).     List<Dependency> dependencies = getSortedDependencies(metadata).     for (Dependency dependency : dependencies) {         report.append(dependency.getId()).append(" - ").append(dependency.getName()).         if (dependency.getDescription() != null) {             report.append(": ").append(dependency.getDescription()).         }         report.append(NEW_LINE).     } }
false;private;1;5;;private List<Dependency> getSortedDependencies(InitializrServiceMetadata metadata) {     List<Dependency> dependencies = new ArrayList<>(metadata.getDependencies()).     dependencies.sort(Comparator.comparing(Dependency::getId)).     return dependencies. }
false;private;2;19;;private void reportAvailableProjectTypes(InitializrServiceMetadata metadata, StringBuilder report) {     report.append("Available project types:").append(NEW_LINE).     report.append("------------------------").append(NEW_LINE).     SortedSet<Entry<String, ProjectType>> entries = new TreeSet<>(Comparator.comparing(Entry::getKey)).     entries.addAll(metadata.getProjectTypes().entrySet()).     for (Entry<String, ProjectType> entry : entries) {         ProjectType type = entry.getValue().         report.append(entry.getKey()).append(" -  ").append(type.getName()).         if (!type.getTags().isEmpty()) {             reportTags(report, type).         }         if (type.isDefaultType()) {             report.append(" (default)").         }         report.append(NEW_LINE).     } }
false;private;2;13;;private void reportTags(StringBuilder report, ProjectType type) {     Map<String, String> tags = type.getTags().     Iterator<Map.Entry<String, String>> iterator = tags.entrySet().iterator().     report.append(" [").     while (iterator.hasNext()) {         Map.Entry<String, String> entry = iterator.next().         report.append(entry.getKey()).append(":").append(entry.getValue()).         if (iterator.hasNext()) {             report.append(", ").         }     }     report.append("]"). }
false;private;2;12;;private void reportDefaults(StringBuilder report, InitializrServiceMetadata metadata) {     report.append("Defaults:").append(NEW_LINE).     report.append("---------").append(NEW_LINE).     List<String> defaultsKeys = new ArrayList<>(metadata.getDefaults().keySet()).     Collections.sort(defaultsKeys).     for (String defaultsKey : defaultsKeys) {         String defaultsValue = metadata.getDefaults().get(defaultsKey).         report.append(defaultsKey).append(": ").append(defaultsValue).append(NEW_LINE).     } }
false;private,static;2;7;;private static String repeat(String s, int count) {     StringBuilder sb = new StringBuilder().     for (int i = 0. i < count. i++) {         sb.append(s).     }     return sb.toString(). }
