commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;14;/**  * Create a new default repository configuration.  * @return the newly-created default repository configuration  */ ;/**  * Create a new default repository configuration.  * @return the newly-created default repository configuration  */ public static List<RepositoryConfiguration> createDefaultRepositoryConfiguration() {     MavenSettings mavenSettings = new MavenSettingsReader().readSettings().     List<RepositoryConfiguration> repositoryConfiguration = new ArrayList<>().     repositoryConfiguration.add(MAVEN_CENTRAL).     if (!Boolean.getBoolean("disableSpringSnapshotRepos")) {         repositoryConfiguration.add(SPRING_MILESTONE).         repositoryConfiguration.add(SPRING_SNAPSHOT).     }     addDefaultCacheAsRepository(mavenSettings.getLocalRepository(), repositoryConfiguration).     addActiveProfileRepositories(mavenSettings.getActiveProfiles(), repositoryConfiguration).     return repositoryConfiguration. }
false;private,static;2;8;;private static void addDefaultCacheAsRepository(String localRepository, List<RepositoryConfiguration> repositoryConfiguration) {     RepositoryConfiguration repository = new RepositoryConfiguration("local", getLocalRepositoryDirectory(localRepository).toURI(), true).     if (!repositoryConfiguration.contains(repository)) {         repositoryConfiguration.add(0, repository).     } }
false;private,static;2;11;;private static void addActiveProfileRepositories(List<Profile> activeProfiles, List<RepositoryConfiguration> configurations) {     for (Profile activeProfile : activeProfiles) {         Interpolator interpolator = new RegexBasedInterpolator().         interpolator.addValueSource(new PropertiesBasedValueSource(activeProfile.getProperties())).         for (Repository repository : activeProfile.getRepositories()) {             configurations.add(getRepositoryConfiguration(interpolator, repository)).         }     } }
false;private,static;2;10;;private static RepositoryConfiguration getRepositoryConfiguration(Interpolator interpolator, Repository repository) {     String name = interpolate(interpolator, repository.getId()).     String url = interpolate(interpolator, repository.getUrl()).     boolean snapshotsEnabled = false.     if (repository.getSnapshots() != null) {         snapshotsEnabled = repository.getSnapshots().isEnabled().     }     return new RepositoryConfiguration(name, URI.create(url), snapshotsEnabled). }
false;private,static;2;8;;private static String interpolate(Interpolator interpolator, String value) {     try {         return interpolator.interpolate(value).     } catch (InterpolationException ex) {         return value.     } }
false;private,static;1;6;;private static File getLocalRepositoryDirectory(String localRepository) {     if (StringUtils.hasText(localRepository)) {         return new File(localRepository).     }     return new File(getM2HomeDirectory(), "repository"). }
false;private,static;0;7;;private static File getM2HomeDirectory() {     String mavenRoot = System.getProperty("maven.home").     if (StringUtils.hasLength(mavenRoot)) {         return new File(mavenRoot).     }     return new File(System.getProperty("user.home"), ".m2"). }
