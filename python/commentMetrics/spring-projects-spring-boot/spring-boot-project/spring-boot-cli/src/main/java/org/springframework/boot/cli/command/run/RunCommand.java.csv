commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getUsageHelp() {     return "[options] <files> [--] [args]". }
false;public;0;5;;public void stop() {     if (this.getHandler() != null) {         ((RunOptionHandler) this.getHandler()).stop().     } }
false;protected;0;7;;@Override protected void doOptions() {     this.watchOption = option("watch", "Watch the specified file for changes").     this.verboseOption = option(Arrays.asList("verbose", "v"), "Verbose logging of dependency resolution").     this.quietOption = option(Arrays.asList("quiet", "q"), "Quiet logging"). }
false;public;0;8;;public void stop() {     synchronized (this.monitor) {         if (this.runner != null) {             this.runner.stop().         }         this.runner = null.     } }
false;protected,synchronized;1;25;;@Override protected synchronized ExitStatus run(OptionSet options) throws Exception {     synchronized (this.monitor) {         if (this.runner != null) {             throw new RuntimeException("Already running. Please stop the current application before running another (use the 'stop' command).").         }         SourceOptions sourceOptions = new SourceOptions(options).         List<RepositoryConfiguration> repositoryConfiguration = RepositoryConfigurationFactory.createDefaultRepositoryConfiguration().         repositoryConfiguration.add(0, new RepositoryConfiguration("local", new File("repository").toURI(), true)).         SpringApplicationRunnerConfiguration configuration = new SpringApplicationRunnerConfigurationAdapter(options, this, repositoryConfiguration).         this.runner = new SpringApplicationRunner(configuration, sourceOptions.getSourcesArray(), sourceOptions.getArgsArray()).         this.runner.compileAndRun().         return ExitStatus.OK.     } }
false;public;0;4;;@Override public GroovyCompilerScope getScope() {     return GroovyCompilerScope.DEFAULT. }
false;public;0;4;;@Override public boolean isWatchForFileChanges() {     return getOptions().has(RunOptionHandler.this.watchOption). }
false;public;0;10;;@Override public Level getLogLevel() {     if (isQuiet()) {         return Level.OFF.     }     if (getOptions().has(RunOptionHandler.this.verboseOption)) {         return Level.FINEST.     }     return Level.INFO. }
false;public;0;4;;@Override public boolean isQuiet() {     return getOptions().has(RunOptionHandler.this.quietOption). }
