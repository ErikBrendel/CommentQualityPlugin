commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;public List<MatchedResource> find(List<File> roots) throws IOException {     List<MatchedResource> matchedResources = new ArrayList<>().     for (File root : roots) {         if (root.isFile()) {             matchedResources.add(new MatchedResource(root)).         } else {             matchedResources.addAll(findInFolder(root)).         }     }     return matchedResources. }
false;private;1;20;;private List<MatchedResource> findInFolder(File folder) throws IOException {     List<MatchedResource> matchedResources = new ArrayList<>().     PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(new FolderResourceLoader(folder)).     for (String include : this.includes) {         for (Resource candidate : resolver.getResources(include)) {             File file = candidate.getFile().             if (file.isFile()) {                 MatchedResource matchedResource = new MatchedResource(folder, file).                 if (!isExcluded(matchedResource)) {                     matchedResources.add(matchedResource).                 }             }         }     }     return matchedResources. }
false;private;1;8;;private boolean isExcluded(MatchedResource matchedResource) {     for (String exclude : this.excludes) {         if (this.pathMatcher.match(exclude, matchedResource.getName())) {             return true.         }     }     return false. }
false;private;2;26;;private List<String> getOptions(List<String> values, String[] defaults) {     Set<String> result = new LinkedHashSet<>().     Set<String> minus = new LinkedHashSet<>().     boolean deltasFound = false.     for (String value : values) {         if (value.startsWith("+")) {             deltasFound = true.             value = value.substring(1).             result.add(value).         } else if (value.startsWith("-")) {             deltasFound = true.             value = value.substring(1).             minus.add(value).         } else if (!value.trim().isEmpty()) {             result.add(value).         }     }     for (String value : defaults) {         if (!minus.contains(value) || !deltasFound) {             result.add(value).         }     }     return new ArrayList<>(result). }
false;protected;1;4;;@Override protected Resource getResourceByPath(String path) {     return new FileSystemResource(new File(this.rootFolder, path)). }
false;public;1;4;;@Override public Enumeration<URL> getResources(String name) throws IOException {     return findResources(name). }
false;public;1;4;;@Override public URL getResource(String name) {     return findResource(name). }
false;public;0;3;;public String getName() {     return this.name. }
false;public;0;3;;public File getFile() {     return this.file. }
false;public;0;3;;public boolean isRoot() {     return this.root. }
false;public;0;4;;@Override public String toString() {     return this.file.getAbsolutePath(). }
