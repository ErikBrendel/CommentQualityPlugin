commented;modifiers;parameterAmount;loc;comment;code
false;private;1;5;;private void run(String[] args) throws Exception {     URLClassLoader classLoader = (URLClassLoader) Thread.currentThread().getContextClassLoader().     new SpringApplicationLauncher(classLoader).launch(getSources(classLoader), args). }
false;private;1;13;;private Class<?>[] getSources(URLClassLoader classLoader) throws Exception {     Enumeration<URL> urls = classLoader.getResources("META-INF/MANIFEST.MF").     while (urls.hasMoreElements()) {         URL url = urls.nextElement().         Manifest manifest = new Manifest(url.openStream()).         if (isCliPackaged(manifest)) {             String sources = manifest.getMainAttributes().getValue(SOURCE_ENTRY).             return loadClasses(classLoader, sources.split(",")).         }     }     throw new IllegalStateException("Cannot locate " + SOURCE_ENTRY + " in MANIFEST.MF"). }
false;private;1;5;;private boolean isCliPackaged(Manifest manifest) {     Attributes attributes = manifest.getMainAttributes().     String startClass = attributes.getValue(START_CLASS_ENTRY).     return getClass().getName().equals(startClass). }
false;private;2;8;;private Class<?>[] loadClasses(ClassLoader classLoader, String[] names) throws ClassNotFoundException {     Class<?>[] classes = new Class<?>[names.length].     for (int i = 0. i < names.length. i++) {         classes[i] = classLoader.loadClass(names[i]).     }     return classes. }
false;public,static;1;3;;public static void main(String[] args) throws Exception {     new PackagedSpringApplicationLauncher().run(args). }
