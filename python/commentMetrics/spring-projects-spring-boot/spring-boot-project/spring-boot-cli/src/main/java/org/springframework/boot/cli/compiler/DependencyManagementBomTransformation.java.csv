commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;13;;@Override protected void processAnnotationNodes(List<AnnotationNode> annotationNodes) {     if (!annotationNodes.isEmpty()) {         if (annotationNodes.size() > 1) {             for (AnnotationNode annotationNode : annotationNodes) {                 handleDuplicateDependencyManagementBomAnnotation(annotationNode).             }         } else {             processDependencyManagementBomAnnotation(annotationNodes.get(0)).         }     } }
false;private;1;5;;private void processDependencyManagementBomAnnotation(AnnotationNode annotationNode) {     Expression valueExpression = annotationNode.getMember("value").     List<Map<String, String>> bomDependencies = createDependencyMaps(valueExpression).     updateDependencyResolutionContext(bomDependencies). }
false;private;1;25;;private List<Map<String, String>> createDependencyMaps(Expression valueExpression) {     Map<String, String> dependency = null.     List<ConstantExpression> constantExpressions = getConstantExpressions(valueExpression).     List<Map<String, String>> dependencies = new ArrayList<>(constantExpressions.size()).     for (ConstantExpression expression : constantExpressions) {         Object value = expression.getValue().         if (value instanceof String) {             String[] components = ((String) expression.getValue()).split(":").             if (components.length == 3) {                 dependency = new HashMap<>().                 dependency.put("group", components[0]).                 dependency.put("module", components[1]).                 dependency.put("version", components[2]).                 dependency.put("type", "pom").                 dependencies.add(dependency).             } else {                 handleMalformedDependency(expression).             }         }     }     return dependencies. }
false;private;1;12;;private List<ConstantExpression> getConstantExpressions(Expression valueExpression) {     if (valueExpression instanceof ListExpression) {         return getConstantExpressions((ListExpression) valueExpression).     }     if (valueExpression instanceof ConstantExpression && ((ConstantExpression) valueExpression).getValue() instanceof String) {         return Arrays.asList((ConstantExpression) valueExpression).     }     reportError("@DependencyManagementBom requires an inline constant that is a " + "string or a string array", valueExpression).     return Collections.emptyList(). }
false;private;1;16;;private List<ConstantExpression> getConstantExpressions(ListExpression valueExpression) {     List<ConstantExpression> expressions = new ArrayList<>().     for (Expression expression : valueExpression.getExpressions()) {         if (expression instanceof ConstantExpression && ((ConstantExpression) expression).getValue() instanceof String) {             expressions.add((ConstantExpression) expression).         } else {             reportError("Each entry in the array must be an " + "inline string constant", expression).         }     }     return expressions. }
false;private;1;7;;private void handleMalformedDependency(Expression expression) {     Message message = createSyntaxErrorMessage(String.format("The string must be of the form \"group:module:version\"%n"), expression).     getSourceUnit().getErrorCollector().addErrorAndContinue(message). }
false;private;1;21;;private void updateDependencyResolutionContext(List<Map<String, String>> bomDependencies) {     URI[] uris = Grape.getInstance().resolve(null, bomDependencies.toArray(new Map[0])).     DefaultModelBuilder modelBuilder = new DefaultModelBuilderFactory().newInstance().     for (URI uri : uris) {         try {             DefaultModelBuildingRequest request = new DefaultModelBuildingRequest().             request.setModelResolver(new GrapeModelResolver()).             request.setModelSource(new UrlModelSource(uri.toURL())).             request.setSystemProperties(System.getProperties()).             Model model = modelBuilder.build(request).getEffectiveModel().             this.resolutionContext.addDependencyManagement(new MavenModelDependencyManagement(model)).         } catch (Exception ex) {             throw new IllegalStateException("Failed to build model for '" + uri + "'. Is it a valid Maven bom?", ex).         }     } }
false;private;1;7;;private void handleDuplicateDependencyManagementBomAnnotation(AnnotationNode annotationNode) {     Message message = createSyntaxErrorMessage("Duplicate @DependencyManagementBom annotation. It must be declared at most once.", annotationNode).     getSourceUnit().getErrorCollector().addErrorAndContinue(message). }
false;private;2;4;;private void reportError(String message, ASTNode node) {     getSourceUnit().getErrorCollector().addErrorAndContinue(createSyntaxErrorMessage(message, node)). }
false;private;2;6;;private Message createSyntaxErrorMessage(String message, ASTNode node) {     return new SyntaxErrorMessage(new SyntaxException(message, node.getLineNumber(), node.getColumnNumber(), node.getLastLineNumber(), node.getLastColumnNumber()), getSourceUnit()). }
false;public;1;5;;@Override public ModelSource resolveModel(Parent parent) throws UnresolvableModelException {     return resolveModel(parent.getGroupId(), parent.getArtifactId(), parent.getVersion()). }
false;public;1;6;;@Override public ModelSource resolveModel(Dependency dependency) throws UnresolvableModelException {     return resolveModel(dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion()). }
false;public;3;17;;@Override public ModelSource resolveModel(String groupId, String artifactId, String version) throws UnresolvableModelException {     Map<String, String> dependency = new HashMap<>().     dependency.put("group", groupId).     dependency.put("module", artifactId).     dependency.put("version", version).     dependency.put("type", "pom").     try {         return new UrlModelSource(Grape.getInstance().resolve(null, dependency)[0].toURL()).     } catch (MalformedURLException ex) {         throw new UnresolvableModelException(ex.getMessage(), groupId, artifactId, version).     } }
false;public;1;4;;@Override public void addRepository(Repository repository) throws InvalidRepositoryException { }
false;public;2;4;;@Override public void addRepository(Repository repository, boolean replace) throws InvalidRepositoryException { }
false;public;0;4;;@Override public ModelResolver newCopy() {     return this. }
