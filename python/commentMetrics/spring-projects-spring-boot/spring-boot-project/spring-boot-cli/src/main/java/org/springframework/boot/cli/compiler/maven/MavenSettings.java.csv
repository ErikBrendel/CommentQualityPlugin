commented;modifiers;parameterAmount;loc;comment;code
false;private;1;8;;private MirrorSelector createMirrorSelector(Settings settings) {     DefaultMirrorSelector selector = new DefaultMirrorSelector().     for (Mirror mirror : settings.getMirrors()) {         selector.add(mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(), mirror.getMirrorOfLayouts()).     }     return selector. }
false;private;1;11;;private AuthenticationSelector createAuthenticationSelector(SettingsDecryptionResult decryptedSettings) {     DefaultAuthenticationSelector selector = new DefaultAuthenticationSelector().     for (Server server : decryptedSettings.getServers()) {         AuthenticationBuilder auth = new AuthenticationBuilder().         auth.addUsername(server.getUsername()).addPassword(server.getPassword()).         auth.addPrivateKey(server.getPrivateKey(), server.getPassphrase()).         selector.add(server.getId(), auth.build()).     }     return new ConservativeAuthenticationSelector(selector). }
false;private;1;14;;private ProxySelector createProxySelector(SettingsDecryptionResult decryptedSettings) {     DefaultProxySelector selector = new DefaultProxySelector().     for (Proxy proxy : decryptedSettings.getProxies()) {         Authentication authentication = new AuthenticationBuilder().addUsername(proxy.getUsername()).addPassword(proxy.getPassword()).build().         selector.add(new org.eclipse.aether.repository.Proxy(proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authentication), proxy.getNonProxyHosts()).     }     return selector. }
false;private;1;17;;private List<Profile> determineActiveProfiles(Settings settings) {     SpringBootCliModelProblemCollector problemCollector = new SpringBootCliModelProblemCollector().     List<org.apache.maven.model.Profile> activeModelProfiles = createProfileSelector().getActiveProfiles(createModelProfiles(settings.getProfiles()), new SpringBootCliProfileActivationContext(settings.getActiveProfiles()), problemCollector).     if (!problemCollector.getProblems().isEmpty()) {         throw new IllegalStateException(createFailureMessage(problemCollector)).     }     List<Profile> activeProfiles = new ArrayList<>().     Map<String, Profile> profiles = settings.getProfilesAsMap().     for (org.apache.maven.model.Profile modelProfile : activeModelProfiles) {         activeProfiles.add(profiles.get(modelProfile.getId())).     }     return activeProfiles. }
false;private;1;15;;private String createFailureMessage(SpringBootCliModelProblemCollector problemCollector) {     StringWriter message = new StringWriter().     PrintWriter printer = new PrintWriter(message).     printer.println("Failed to determine active profiles:").     for (ModelProblemCollectorRequest problem : problemCollector.getProblems()) {         String location = (problem.getLocation() != null) ? " at " + problem.getLocation() : "".         printer.println("    " + problem.getMessage() + location).         if (problem.getException() != null) {             printer.println(indentStackTrace(problem.getException(), "        ")).         }     }     return message.toString(). }
false;private;2;3;;private String indentStackTrace(Exception ex, String indent) {     return indentLines(printStackTrace(ex), indent). }
false;private;1;6;;private String printStackTrace(Exception ex) {     StringWriter stackTrace = new StringWriter().     PrintWriter printer = new PrintWriter(stackTrace).     ex.printStackTrace(printer).     return stackTrace.toString(). }
false;private;2;7;;private String indentLines(String input, String indent) {     StringWriter indented = new StringWriter().     PrintWriter writer = new PrintWriter(indented).     BufferedReader reader = new BufferedReader(new StringReader(input)).     reader.lines().forEach((line) -> writer.println(indent + line)).     return indented.toString(). }
false;private;0;10;;private DefaultProfileSelector createProfileSelector() {     DefaultProfileSelector selector = new DefaultProfileSelector().     selector.addProfileActivator(new FileProfileActivator().setPathTranslator(new DefaultPathTranslator())).     selector.addProfileActivator(new JdkVersionProfileActivator()).     selector.addProfileActivator(new PropertyProfileActivator()).     selector.addProfileActivator(new OperatingSystemProfileActivator()).     return selector. }
false;private;1;14;;private List<org.apache.maven.model.Profile> createModelProfiles(List<Profile> profiles) {     List<org.apache.maven.model.Profile> modelProfiles = new ArrayList<>().     for (Profile profile : profiles) {         org.apache.maven.model.Profile modelProfile = new org.apache.maven.model.Profile().         modelProfile.setId(profile.getId()).         if (profile.getActivation() != null) {             modelProfile.setActivation(createModelActivation(profile.getActivation())).         }         modelProfiles.add(modelProfile).     }     return modelProfiles. }
false;private;1;27;;private org.apache.maven.model.Activation createModelActivation(Activation activation) {     org.apache.maven.model.Activation modelActivation = new org.apache.maven.model.Activation().     modelActivation.setActiveByDefault(activation.isActiveByDefault()).     if (activation.getFile() != null) {         ActivationFile activationFile = new ActivationFile().         activationFile.setExists(activation.getFile().getExists()).         activationFile.setMissing(activation.getFile().getMissing()).         modelActivation.setFile(activationFile).     }     modelActivation.setJdk(activation.getJdk()).     if (activation.getOs() != null) {         ActivationOS os = new ActivationOS().         os.setArch(activation.getOs().getArch()).         os.setFamily(activation.getOs().getFamily()).         os.setName(activation.getOs().getName()).         os.setVersion(activation.getOs().getVersion()).         modelActivation.setOs(os).     }     if (activation.getProperty() != null) {         ActivationProperty property = new ActivationProperty().         property.setName(activation.getProperty().getName()).         property.setValue(activation.getProperty().getValue()).         modelActivation.setProperty(property).     }     return modelActivation. }
false;public;0;3;;public boolean getOffline() {     return this.offline. }
false;public;0;3;;public MirrorSelector getMirrorSelector() {     return this.mirrorSelector. }
false;public;0;3;;public AuthenticationSelector getAuthenticationSelector() {     return this.authenticationSelector. }
false;public;0;3;;public ProxySelector getProxySelector() {     return this.proxySelector. }
false;public;0;3;;public String getLocalRepository() {     return this.localRepository. }
false;public;0;3;;public List<Profile> getActiveProfiles() {     return this.activeProfiles. }
false;public;0;4;;@Override public List<String> getActiveProfileIds() {     return this.activeProfiles. }
false;public;0;4;;@Override public List<String> getInactiveProfileIds() {     return Collections.emptyList(). }
false;public;0;5;;@SuppressWarnings({ "unchecked", "rawtypes" }) @Override public Map<String, String> getSystemProperties() {     return (Map) System.getProperties(). }
false;public;0;4;;@Override public Map<String, String> getUserProperties() {     return Collections.emptyMap(). }
false;public;0;4;;@Override public File getProjectDirectory() {     return new File("."). }
false;public;0;4;;@Override public Map<String, String> getProjectProperties() {     return Collections.emptyMap(). }
false;public;1;4;;@Override public void add(ModelProblemCollectorRequest req) {     this.problems.add(req). }
false;;0;3;;List<ModelProblemCollectorRequest> getProblems() {     return this.problems. }
