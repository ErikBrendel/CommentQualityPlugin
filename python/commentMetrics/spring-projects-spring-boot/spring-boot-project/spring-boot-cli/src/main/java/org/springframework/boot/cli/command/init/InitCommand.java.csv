commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getUsageHelp() {     return "[options] [location]". }
false;public;0;12;;@Override public Collection<HelpExample> getExamples() {     List<HelpExample> examples = new ArrayList<>().     examples.add(new HelpExample("To list all the capabilities of the service", "spring init --list")).     examples.add(new HelpExample("To creates a default project", "spring init")).     examples.add(new HelpExample("To create a web my-app.zip", "spring init -d=web my-app.zip")).     examples.add(new HelpExample("To create a web/data-jpa gradle project unpacked", "spring init -d=web,jpa --build=gradle my-dir")).     return examples. }
false;protected;0;11;;@Override protected void options() {     this.target = option(Arrays.asList("target"), "URL of the service to use").withRequiredArg().defaultsTo(ProjectGenerationRequest.DEFAULT_SERVICE_URL).     this.listCapabilities = option(Arrays.asList("list"), "List the capabilities of the service. Use it to discover the " + "dependencies and the types that are available").     projectGenerationOptions().     otherOptions(). }
false;private;0;37;;private void projectGenerationOptions() {     this.groupId = option(Arrays.asList("groupId", "g"), "Project coordinates (for example 'org.test')").withRequiredArg().     this.artifactId = option(Arrays.asList("artifactId", "a"), "Project coordinates. infer archive name (for example 'test')").withRequiredArg().     this.version = option(Arrays.asList("version", "v"), "Project version (for example '0.0.1-SNAPSHOT')").withRequiredArg().     this.name = option(Arrays.asList("name", "n"), "Project name. infer application name").withRequiredArg().     this.description = option("description", "Project description").withRequiredArg().     this.packageName = option("package-name", "Package name").withRequiredArg().     this.type = option(Arrays.asList("type", "t"), "Project type. Not normally needed if you use --build " + "and/or --format. Check the capabilities of the service " + "(--list) for more details").withRequiredArg().     this.packaging = option(Arrays.asList("packaging", "p"), "Project packaging (for example 'jar')").withRequiredArg().     this.build = option("build", "Build system to use (for example 'maven' or 'gradle')").withRequiredArg().defaultsTo("maven").     this.format = option("format", "Format of the generated content (for example 'build' for a build file, " + "'project' for a project archive)").withRequiredArg().defaultsTo("project").     this.javaVersion = option(Arrays.asList("java-version", "j"), "Language level (for example '1.8')").withRequiredArg().     this.language = option(Arrays.asList("language", "l"), "Programming language  (for example 'java')").withRequiredArg().     this.bootVersion = option(Arrays.asList("boot-version", "b"), "Spring Boot version (for example '1.2.0.RELEASE')").withRequiredArg().     this.dependencies = option(Arrays.asList("dependencies", "d"), "Comma-separated list of dependency identifiers to include in the " + "generated project").withRequiredArg(). }
false;private;0;6;;private void otherOptions() {     this.extract = option(Arrays.asList("extract", "x"), "Extract the project archive. Inferred if a location is specified without an extension").     this.force = option(Arrays.asList("force", "f"), "Force overwrite of existing files"). }
false;protected;1;20;;@Override protected ExitStatus run(OptionSet options) throws Exception {     try {         if (options.has(this.listCapabilities)) {             generateReport(options).         } else {             generateProject(options).         }         return ExitStatus.OK.     } catch (ReportableException ex) {         Log.error(ex.getMessage()).         return ExitStatus.ERROR.     } catch (Exception ex) {         Log.error(ex).         return ExitStatus.ERROR.     } }
false;private;1;4;;private void generateReport(OptionSet options) throws IOException {     Log.info(this.serviceCapabilitiesReport.generate(options.valueOf(this.target))). }
false;protected;1;4;;protected void generateProject(OptionSet options) throws IOException {     ProjectGenerationRequest request = createProjectGenerationRequest(options).     this.projectGenerator.generateProject(request, options.has(this.force)). }
false;protected;1;58;;protected ProjectGenerationRequest createProjectGenerationRequest(OptionSet options) {     List<?> nonOptionArguments = new ArrayList<Object>(options.nonOptionArguments()).     Assert.isTrue(nonOptionArguments.size() <= 1, "Only the target location may be specified").     ProjectGenerationRequest request = new ProjectGenerationRequest().     request.setServiceUrl(options.valueOf(this.target)).     if (options.has(this.bootVersion)) {         request.setBootVersion(options.valueOf(this.bootVersion)).     }     if (options.has(this.dependencies)) {         for (String dep : options.valueOf(this.dependencies).split(",")) {             request.getDependencies().add(dep.trim()).         }     }     if (options.has(this.javaVersion)) {         request.setJavaVersion(options.valueOf(this.javaVersion)).     }     if (options.has(this.packageName)) {         request.setPackageName(options.valueOf(this.packageName)).     }     request.setBuild(options.valueOf(this.build)).     request.setFormat(options.valueOf(this.format)).     request.setDetectType(options.has(this.build) || options.has(this.format)).     if (options.has(this.type)) {         request.setType(options.valueOf(this.type)).     }     if (options.has(this.packaging)) {         request.setPackaging(options.valueOf(this.packaging)).     }     if (options.has(this.language)) {         request.setLanguage(options.valueOf(this.language)).     }     if (options.has(this.groupId)) {         request.setGroupId(options.valueOf(this.groupId)).     }     if (options.has(this.artifactId)) {         request.setArtifactId(options.valueOf(this.artifactId)).     }     if (options.has(this.name)) {         request.setName(options.valueOf(this.name)).     }     if (options.has(this.version)) {         request.setVersion(options.valueOf(this.version)).     }     if (options.has(this.description)) {         request.setDescription(options.valueOf(this.description)).     }     request.setExtract(options.has(this.extract)).     if (nonOptionArguments.size() == 1) {         String output = (String) nonOptionArguments.get(0).         request.setOutput(output).     }     return request. }
