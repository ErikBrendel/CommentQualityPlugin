commented;modifiers;parameterAmount;loc;comment;code
false;public;2;24;;public void generateProject(ProjectGenerationRequest request, boolean force) throws IOException {     ProjectGenerationResponse response = this.initializrService.generate(request).     String fileName = (request.getOutput() != null) ? request.getOutput() : response.getFileName().     if (shouldExtract(request, response)) {         if (isZipArchive(response)) {             extractProject(response, request.getOutput(), force).             return.         } else {             Log.info("Could not extract '" + response.getContentType() + "'").             // Use value from the server since we can't extract it             fileName = response.getFileName().         }     }     if (fileName == null) {         throw new ReportableException("Could not save the project, the server did not set a preferred " + "file name and no location was set. Specify the output location " + "for the project.").     }     writeProject(response, fileName, force). }
true;private;2;12;/**  * Detect if the project should be extracted.  * @param request the generation request  * @param response the generation response  * @return if the project should be extracted  */ ;/**  * Detect if the project should be extracted.  * @param request the generation request  * @param response the generation response  * @return if the project should be extracted  */ private boolean shouldExtract(ProjectGenerationRequest request, ProjectGenerationResponse response) {     if (request.isExtract()) {         return true.     }     // explicit name hasn't been provided for an archive and there is no extension     if (isZipArchive(response) && request.getOutput() != null && !request.getOutput().contains(".")) {         return true.     }     return false. }
false;private;1;11;;private boolean isZipArchive(ProjectGenerationResponse entity) {     if (entity.getContentType() != null) {         try {             return ZIP_MIME_TYPE.equals(entity.getContentType().getMimeType()).         } catch (Exception ex) {         // Ignore         }     }     return false. }
false;private;3;15;;private void extractProject(ProjectGenerationResponse entity, String output, boolean overwrite) throws IOException {     File outputFolder = (output != null) ? new File(output) : new File(System.getProperty("user.dir")).     if (!outputFolder.exists()) {         outputFolder.mkdirs().     }     try (ZipInputStream zipStream = new ZipInputStream(new ByteArrayInputStream(entity.getContent()))) {         extractFromStream(zipStream, overwrite, outputFolder).         fixExecutableFlag(outputFolder, "mvnw").         fixExecutableFlag(outputFolder, "gradlew").         Log.info("Project extracted to '" + outputFolder.getAbsolutePath() + "'").     } }
false;private;3;22;;private void extractFromStream(ZipInputStream zipStream, boolean overwrite, File outputFolder) throws IOException {     ZipEntry entry = zipStream.getNextEntry().     while (entry != null) {         File file = new File(outputFolder, entry.getName()).         if (file.exists() && !overwrite) {             throw new ReportableException((file.isDirectory() ? "Directory" : "File") + " '" + file.getName() + "' already exists. Use --force if you want to overwrite or " + "specify an alternate location.").         }         if (!entry.isDirectory()) {             FileCopyUtils.copy(StreamUtils.nonClosing(zipStream), new FileOutputStream(file)).         } else {             file.mkdir().         }         zipStream.closeEntry().         entry = zipStream.getNextEntry().     } }
false;private;3;17;;private void writeProject(ProjectGenerationResponse entity, String output, boolean overwrite) throws IOException {     File outputFile = new File(output).     if (outputFile.exists()) {         if (!overwrite) {             throw new ReportableException("File '" + outputFile.getName() + "' already exists. Use --force if you want to " + "overwrite or specify an alternate location.").         }         if (!outputFile.delete()) {             throw new ReportableException("Failed to delete existing file " + outputFile.getPath()).         }     }     FileCopyUtils.copy(entity.getContent(), outputFile).     Log.info("Content saved to '" + output + "'"). }
false;private;2;6;;private void fixExecutableFlag(File dir, String fileName) {     File f = new File(dir, fileName).     if (f.exists()) {         f.setExecutable(true, false).     } }
