commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;@Override public List<File> resolve(List<String> artifactIdentifiers) throws CompilationFailedException, IOException {     GroovyCompiler groovyCompiler = new GroovyCompiler(this.configuration).     List<File> artifactFiles = new ArrayList<>().     if (!artifactIdentifiers.isEmpty()) {         List<URL> initialUrls = getClassPathUrls(groovyCompiler).         groovyCompiler.compile(createSources(artifactIdentifiers)).         List<URL> artifactUrls = getClassPathUrls(groovyCompiler).         artifactUrls.removeAll(initialUrls).         for (URL artifactUrl : artifactUrls) {             artifactFiles.add(toFile(artifactUrl)).         }     }     return artifactFiles. }
false;private;1;3;;private List<URL> getClassPathUrls(GroovyCompiler compiler) {     return new ArrayList<>(Arrays.asList(compiler.getLoader().getURLs())). }
false;private;1;14;;private String createSources(List<String> artifactIdentifiers) throws IOException {     File file = File.createTempFile("SpringCLIDependency", ".groovy").     file.deleteOnExit().     try (OutputStreamWriter stream = new OutputStreamWriter(new FileOutputStream(file), StandardCharsets.UTF_8)) {         for (String artifactIdentifier : artifactIdentifiers) {             stream.write("@Grab('" + artifactIdentifier + "')").         }         // Dummy class to force compiler to do grab         stream.write("class Installer {}").     }     // Windows paths get tricky unless you work with URI     return file.getAbsoluteFile().toURI().toString(). }
false;private;1;8;;private File toFile(URL url) {     try {         return new File(url.toURI()).     } catch (URISyntaxException ex) {         return new File(url.getPath()).     } }
