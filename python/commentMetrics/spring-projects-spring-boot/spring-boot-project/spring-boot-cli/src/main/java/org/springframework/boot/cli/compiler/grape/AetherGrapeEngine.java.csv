commented;modifiers;parameterAmount;loc;comment;code
false;private;2;14;;private ProgressReporter getProgressReporter(DefaultRepositorySystemSession session, boolean quiet) {     String progressReporter = (quiet ? "none" : System.getProperty("org.springframework.boot.cli.compiler.grape.ProgressReporter")).     if ("detail".equals(progressReporter) || Boolean.getBoolean("groovy.grape.report.downloads")) {         return new DetailedProgressReporter(session, System.out).     }     if ("none".equals(progressReporter)) {         return () -> {         }.     }     return new SummaryProgressReporter(session, System.out). }
false;public;1;4;;@Override public Object grab(Map args) {     return grab(args, args). }
false;public;2;16;;@Override public Object grab(Map args, Map... dependencyMaps) {     List<Exclusion> exclusions = createExclusions(args).     List<Dependency> dependencies = createDependencies(dependencyMaps, exclusions).     try {         List<File> files = resolve(dependencies).         GroovyClassLoader classLoader = getClassLoader(args).         for (File file : files) {             classLoader.addURL(file.toURI().toURL()).         }     } catch (ArtifactResolutionException | MalformedURLException ex) {         throw new DependencyResolutionFailedException(ex).     }     return null. }
false;private;1;14;;@SuppressWarnings("unchecked") private List<Exclusion> createExclusions(Map<?, ?> args) {     List<Exclusion> exclusions = new ArrayList<>().     if (args != null) {         List<Map<String, Object>> exclusionMaps = (List<Map<String, Object>>) args.get("excludes").         if (exclusionMaps != null) {             for (Map<String, Object> exclusionMap : exclusionMaps) {                 exclusions.add(createExclusion(exclusionMap)).             }         }     }     return exclusions. }
false;private;1;5;;private Exclusion createExclusion(Map<String, Object> exclusionMap) {     String group = (String) exclusionMap.get("group").     String module = (String) exclusionMap.get("module").     return new Exclusion(group, module, "*", "*"). }
false;private;2;8;;private List<Dependency> createDependencies(Map<?, ?>[] dependencyMaps, List<Exclusion> exclusions) {     List<Dependency> dependencies = new ArrayList<>(dependencyMaps.length).     for (Map<?, ?> dependencyMap : dependencyMaps) {         dependencies.add(createDependency(dependencyMap, exclusions)).     }     return dependencies. }
false;private;2;8;;private Dependency createDependency(Map<?, ?> dependencyMap, List<Exclusion> exclusions) {     Artifact artifact = createArtifact(dependencyMap).     if (isTransitive(dependencyMap)) {         return new Dependency(artifact, JavaScopes.COMPILE, false, exclusions).     }     return new Dependency(artifact, JavaScopes.COMPILE, null, WILDCARD_EXCLUSION). }
false;private;1;11;;private Artifact createArtifact(Map<?, ?> dependencyMap) {     String group = (String) dependencyMap.get("group").     String module = (String) dependencyMap.get("module").     String version = (String) dependencyMap.get("version").     if (version == null) {         version = this.resolutionContext.getManagedVersion(group, module).     }     String classifier = (String) dependencyMap.get("classifier").     String type = determineType(dependencyMap).     return new DefaultArtifact(group, module, classifier, type, version). }
false;private;1;15;;private String determineType(Map<?, ?> dependencyMap) {     String type = (String) dependencyMap.get("type").     String ext = (String) dependencyMap.get("ext").     if (type == null) {         type = ext.         if (type == null) {             type = "jar".         }     } else if (ext != null && !type.equals(ext)) {         throw new IllegalArgumentException("If both type and ext are specified they must have the same value").     }     return type. }
false;private;1;4;;private boolean isTransitive(Map<?, ?> dependencyMap) {     Boolean transitive = (Boolean) dependencyMap.get("transitive").     return (transitive != null) ? transitive : true. }
false;private;1;8;;private List<Dependency> getDependencies(DependencyResult dependencyResult) {     List<Dependency> dependencies = new ArrayList<>().     for (ArtifactResult artifactResult : dependencyResult.getArtifactResults()) {         dependencies.add(new Dependency(artifactResult.getArtifact(), JavaScopes.COMPILE)).     }     return dependencies. }
false;private;1;7;;private List<File> getFiles(DependencyResult dependencyResult) {     List<File> files = new ArrayList<>().     for (ArtifactResult result : dependencyResult.getArtifactResults()) {         files.add(result.getArtifact().getFile()).     }     return files. }
false;private;1;4;;private GroovyClassLoader getClassLoader(Map args) {     GroovyClassLoader classLoader = (GroovyClassLoader) args.get("classLoader").     return (classLoader != null) ? classLoader : this.classLoader. }
false;public;1;9;;@Override public void addResolver(Map<String, Object> args) {     String name = (String) args.get("name").     String root = (String) args.get("root").     RemoteRepository.Builder builder = new RemoteRepository.Builder(name, "default", root).     RemoteRepository repository = builder.build().     addRepository(repository). }
false;protected;1;9;;protected void addRepository(RemoteRepository repository) {     if (this.repositories.contains(repository)) {         return.     }     repository = getPossibleMirror(repository).     repository = applyProxy(repository).     repository = applyAuthentication(repository).     this.repositories.add(0, repository). }
false;private;1;8;;private RemoteRepository getPossibleMirror(RemoteRepository remoteRepository) {     RemoteRepository mirror = this.session.getMirrorSelector().getMirror(remoteRepository).     if (mirror != null) {         return mirror.     }     return remoteRepository. }
false;private;1;8;;private RemoteRepository applyProxy(RemoteRepository repository) {     if (repository.getProxy() == null) {         RemoteRepository.Builder builder = new RemoteRepository.Builder(repository).         builder.setProxy(this.session.getProxySelector().getProxy(repository)).         repository = builder.build().     }     return repository. }
false;private;1;9;;private RemoteRepository applyAuthentication(RemoteRepository repository) {     if (repository.getAuthentication() == null) {         RemoteRepository.Builder builder = new RemoteRepository.Builder(repository).         builder.setAuthentication(this.session.getAuthenticationSelector().getAuthentication(repository)).         repository = builder.build().     }     return repository. }
false;public;0;4;;@Override public Map<String, Map<String, List<String>>> enumerateGrapes() {     throw new UnsupportedOperationException("Grape enumeration is not supported"). }
false;public;2;4;;@Override public URI[] resolve(Map args, Map... dependencyMaps) {     return this.resolve(args, null, dependencyMaps). }
false;public;3;16;;@Override public URI[] resolve(Map args, List depsInfo, Map... dependencyMaps) {     List<Exclusion> exclusions = createExclusions(args).     List<Dependency> dependencies = createDependencies(dependencyMaps, exclusions).     try {         List<File> files = resolve(dependencies).         List<URI> uris = new ArrayList<>(files.size()).         for (File file : files) {             uris.add(file.toURI()).         }         return uris.toArray(new URI[0]).     } catch (Exception ex) {         throw new DependencyResolutionFailedException(ex).     } }
false;private;1;17;;private List<File> resolve(List<Dependency> dependencies) throws ArtifactResolutionException {     try {         CollectRequest collectRequest = getCollectRequest(dependencies).         DependencyRequest dependencyRequest = getDependencyRequest(collectRequest).         DependencyResult result = this.repositorySystem.resolveDependencies(this.session, dependencyRequest).         addManagedDependencies(result).         return getFiles(result).     } catch (Exception ex) {         throw new DependencyResolutionFailedException(ex).     } finally {         this.progressReporter.finished().     } }
false;private;1;7;;private CollectRequest getCollectRequest(List<Dependency> dependencies) {     CollectRequest collectRequest = new CollectRequest((Dependency) null, dependencies, new ArrayList<>(this.repositories)).     collectRequest.setManagedDependencies(this.resolutionContext.getManagedDependencies()).     return collectRequest. }
false;private;1;4;;private DependencyRequest getDependencyRequest(CollectRequest collectRequest) {     return new DependencyRequest(collectRequest, DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE, JavaScopes.RUNTIME)). }
false;private;1;3;;private void addManagedDependencies(DependencyResult result) {     this.resolutionContext.addManagedDependencies(getDependencies(result)). }
false;public;1;4;;@Override public Map[] listDependencies(ClassLoader classLoader) {     throw new UnsupportedOperationException("Listing dependencies is not supported"). }
false;public;1;5;;@Override public Object grab(String endorsedModule) {     throw new UnsupportedOperationException("Grabbing an endorsed module is not supported"). }
