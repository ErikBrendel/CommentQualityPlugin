commented;modifiers;parameterAmount;loc;comment;code
true;public;2;12;/**  * Launches the application created using the given {@code sources}. The application  * is launched with the given {@code args}.  * @param sources the sources for the application  * @param args the args for the application  * @return the application's {@code ApplicationContext}  * @throws Exception if the launch fails  */ ;/**  * Launches the application created using the given {@code sources}. The application  * is launched with the given {@code args}.  * @param sources the sources for the application  * @param args the args for the application  * @return the application's {@code ApplicationContext}  * @throws Exception if the launch fails  */ public Object launch(Class<?>[] sources, String[] args) throws Exception {     Map<String, Object> defaultProperties = new HashMap<>().     defaultProperties.put("spring.groovy.template.check-template-location", "false").     Class<?> applicationClass = this.classLoader.loadClass(getSpringApplicationClassName()).     Constructor<?> constructor = applicationClass.getConstructor(Class[].class).     Object application = constructor.newInstance((Object) sources).     applicationClass.getMethod("setDefaultProperties", Map.class).invoke(application, defaultProperties).     Method method = applicationClass.getMethod("run", String[].class).     return method.invoke(application, (Object) args). }
false;private;0;10;;private String getSpringApplicationClassName() {     String className = System.getProperty("spring.application.class.name").     if (className == null) {         className = getEnvironmentVariable("SPRING_APPLICATION_CLASS_NAME").     }     if (className == null) {         className = DEFAULT_SPRING_APPLICATION_CLASS.     }     return className. }
false;protected;1;3;;protected String getEnvironmentVariable(String name) {     return System.getenv(name). }
