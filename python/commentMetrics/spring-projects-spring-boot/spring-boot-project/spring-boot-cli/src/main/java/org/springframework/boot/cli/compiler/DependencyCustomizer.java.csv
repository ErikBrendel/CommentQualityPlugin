# id;timestamp;commentText;codeText;commentWords;codeWords
DependencyCustomizer -> protected DependencyCustomizer(DependencyCustomizer parent);1507173536;Create a new nested {@link DependencyCustomizer}._@param parent the parent customizer;protected DependencyCustomizer(DependencyCustomizer parent) {_		this.loader = parent.loader__		this.classNode = parent.classNode__		this.dependencyResolutionContext = parent.dependencyResolutionContext__	};create,a,new,nested,link,dependency,customizer,param,parent,the,parent,customizer;protected,dependency,customizer,dependency,customizer,parent,this,loader,parent,loader,this,class,node,parent,class,node,this,dependency,resolution,context,parent,dependency,resolution,context
DependencyCustomizer -> protected DependencyCustomizer(DependencyCustomizer parent);1507661773;Create a new nested {@link DependencyCustomizer}._@param parent the parent customizer;protected DependencyCustomizer(DependencyCustomizer parent) {_		this.loader = parent.loader__		this.classNode = parent.classNode__		this.dependencyResolutionContext = parent.dependencyResolutionContext__	};create,a,new,nested,link,dependency,customizer,param,parent,the,parent,customizer;protected,dependency,customizer,dependency,customizer,parent,this,loader,parent,loader,this,class,node,parent,class,node,this,dependency,resolution,context,parent,dependency,resolution,context
DependencyCustomizer -> protected DependencyCustomizer(DependencyCustomizer parent);1512760426;Create a new nested {@link DependencyCustomizer}._@param parent the parent customizer;protected DependencyCustomizer(DependencyCustomizer parent) {_		this.loader = parent.loader__		this.classNode = parent.classNode__		this.dependencyResolutionContext = parent.dependencyResolutionContext__	};create,a,new,nested,link,dependency,customizer,param,parent,the,parent,customizer;protected,dependency,customizer,dependency,customizer,parent,this,loader,parent,loader,this,class,node,parent,class,node,this,dependency,resolution,context,parent,dependency,resolution,context
DependencyCustomizer -> protected DependencyCustomizer(DependencyCustomizer parent);1532738143;Create a new nested {@link DependencyCustomizer}._@param parent the parent customizer;protected DependencyCustomizer(DependencyCustomizer parent) {_		this.loader = parent.loader__		this.classNode = parent.classNode__		this.dependencyResolutionContext = parent.dependencyResolutionContext__	};create,a,new,nested,link,dependency,customizer,param,parent,the,parent,customizer;protected,dependency,customizer,dependency,customizer,parent,this,loader,parent,loader,this,class,node,parent,class,node,this,dependency,resolution,context,parent,dependency,resolution,context
DependencyCustomizer -> protected boolean canAdd();1507173536;Strategy called to test if dependencies can be added. Subclasses override as_required. Returns {@code true} by default._@return {@code true} if dependencies can be added, otherwise {@code false};protected boolean canAdd() {_		return true__	};strategy,called,to,test,if,dependencies,can,be,added,subclasses,override,as,required,returns,code,true,by,default,return,code,true,if,dependencies,can,be,added,otherwise,code,false;protected,boolean,can,add,return,true
DependencyCustomizer -> protected boolean canAdd();1507661773;Strategy called to test if dependencies can be added. Subclasses override as_required. Returns {@code true} by default._@return {@code true} if dependencies can be added, otherwise {@code false};protected boolean canAdd() {_		return true__	};strategy,called,to,test,if,dependencies,can,be,added,subclasses,override,as,required,returns,code,true,by,default,return,code,true,if,dependencies,can,be,added,otherwise,code,false;protected,boolean,can,add,return,true
DependencyCustomizer -> protected boolean canAdd();1512760426;Strategy called to test if dependencies can be added. Subclasses override as_required. Returns {@code true} by default._@return {@code true} if dependencies can be added, otherwise {@code false};protected boolean canAdd() {_		return true__	};strategy,called,to,test,if,dependencies,can,be,added,subclasses,override,as,required,returns,code,true,by,default,return,code,true,if,dependencies,can,be,added,otherwise,code,false;protected,boolean,can,add,return,true
DependencyCustomizer -> protected boolean canAdd();1532738143;Strategy called to test if dependencies can be added. Subclasses override as_required. Returns {@code true} by default._@return {@code true} if dependencies can be added, otherwise {@code false};protected boolean canAdd() {_		return true__	};strategy,called,to,test,if,dependencies,can,be,added,subclasses,override,as,required,returns,code,true,by,default,return,code,true,if,dependencies,can,be,added,otherwise,code,false;protected,boolean,can,add,return,true
DependencyCustomizer -> public DependencyCustomizer ifAllResourcesPresent(String... paths);1512760426;Create a nested {@link DependencyCustomizer} that only applies if the specified_paths are on the class path._@param paths the paths to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAllResourcesPresent(String... paths) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String path : paths) {_					try {_						if (DependencyCustomizer.this.loader.getResource(path) == null) {_							return false__						}_						return true__					}_					catch (Exception ex) {_						_					}_				}_				return DependencyCustomizer.this.canAdd()__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,if,the,specified,paths,are,on,the,class,path,param,paths,the,paths,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,all,resources,present,string,paths,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,path,paths,try,if,dependency,customizer,this,loader,get,resource,path,null,return,false,return,true,catch,exception,ex,return,dependency,customizer,this,can,add
DependencyCustomizer -> public DependencyCustomizer ifAllResourcesPresent(String... paths);1532738143;Create a nested {@link DependencyCustomizer} that only applies if the specified_paths are on the class path._@param paths the paths to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAllResourcesPresent(String... paths) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String path : paths) {_					try {_						if (DependencyCustomizer.this.loader.getResource(path) == null) {_							return false__						}_						return true__					}_					catch (Exception ex) {_						_					}_				}_				return DependencyCustomizer.this.canAdd()__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,if,the,specified,paths,are,on,the,class,path,param,paths,the,paths,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,all,resources,present,string,paths,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,path,paths,try,if,dependency,customizer,this,loader,get,resource,path,null,return,false,return,true,catch,exception,ex,return,dependency,customizer,this,can,add
DependencyCustomizer -> public DependencyCustomizer ifAllMissingClasses(final String... classNames);1507173536;Create a nested {@link DependencyCustomizer} that only applies if all of the_specified class names are not on the class path._@param classNames the class names to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAllMissingClasses(final String... classNames) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String className : classNames) {_					try {_						DependencyCustomizer.this.loader.loadClass(className)__						return false__					}_					catch (Exception ex) {_						_					}_				}_				return DependencyCustomizer.this.canAdd()__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,if,all,of,the,specified,class,names,are,not,on,the,class,path,param,class,names,the,class,names,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,all,missing,classes,final,string,class,names,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,class,name,class,names,try,dependency,customizer,this,loader,load,class,class,name,return,false,catch,exception,ex,return,dependency,customizer,this,can,add
DependencyCustomizer -> public DependencyCustomizer ifAllMissingClasses(final String... classNames);1507661773;Create a nested {@link DependencyCustomizer} that only applies if all of the_specified class names are not on the class path._@param classNames the class names to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAllMissingClasses(final String... classNames) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String className : classNames) {_					try {_						DependencyCustomizer.this.loader.loadClass(className)__						return false__					}_					catch (Exception ex) {_						_					}_				}_				return DependencyCustomizer.this.canAdd()__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,if,all,of,the,specified,class,names,are,not,on,the,class,path,param,class,names,the,class,names,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,all,missing,classes,final,string,class,names,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,class,name,class,names,try,dependency,customizer,this,loader,load,class,class,name,return,false,catch,exception,ex,return,dependency,customizer,this,can,add
DependencyCustomizer -> public DependencyCustomizer ifAnyResourcesPresent(final String... paths);1507173536;Create a nested {@link DependencyCustomizer} that only applies at least one of the_specified paths is on the class path._@param paths the paths to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAnyResourcesPresent(final String... paths) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String path : paths) {_					try {_						if (DependencyCustomizer.this.loader.getResource(path) != null) {_							return true__						}_						return false__					}_					catch (Exception ex) {_						_					}_				}_				return DependencyCustomizer.this.canAdd()__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,at,least,one,of,the,specified,paths,is,on,the,class,path,param,paths,the,paths,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,any,resources,present,final,string,paths,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,path,paths,try,if,dependency,customizer,this,loader,get,resource,path,null,return,true,return,false,catch,exception,ex,return,dependency,customizer,this,can,add
DependencyCustomizer -> public DependencyCustomizer ifAnyResourcesPresent(final String... paths);1507661773;Create a nested {@link DependencyCustomizer} that only applies at least one of the_specified paths is on the class path._@param paths the paths to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAnyResourcesPresent(final String... paths) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String path : paths) {_					try {_						if (DependencyCustomizer.this.loader.getResource(path) != null) {_							return true__						}_						return false__					}_					catch (Exception ex) {_						_					}_				}_				return DependencyCustomizer.this.canAdd()__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,at,least,one,of,the,specified,paths,is,on,the,class,path,param,paths,the,paths,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,any,resources,present,final,string,paths,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,path,paths,try,if,dependency,customizer,this,loader,get,resource,path,null,return,true,return,false,catch,exception,ex,return,dependency,customizer,this,can,add
DependencyCustomizer -> public DependencyCustomizer add(String module, boolean transitive);1507173536;Add a single dependency and, optionally, all of its dependencies. The group ID and_version of the dependency are resolved from the module using the customizer's_{@link ArtifactCoordinatesResolver}._@param module The module ID_@param transitive {@code true} if the transitive dependencies should also be added,_otherwise {@code false}._@return this {@link DependencyCustomizer} for continued use;public DependencyCustomizer add(String module, boolean transitive) {_		return add(module, null, null, transitive)__	};add,a,single,dependency,and,optionally,all,of,its,dependencies,the,group,id,and,version,of,the,dependency,are,resolved,from,the,module,using,the,customizer,s,link,artifact,coordinates,resolver,param,module,the,module,id,param,transitive,code,true,if,the,transitive,dependencies,should,also,be,added,otherwise,code,false,return,this,link,dependency,customizer,for,continued,use;public,dependency,customizer,add,string,module,boolean,transitive,return,add,module,null,null,transitive
DependencyCustomizer -> public DependencyCustomizer add(String module, boolean transitive);1507661773;Add a single dependency and, optionally, all of its dependencies. The group ID and_version of the dependency are resolved from the module using the customizer's_{@link ArtifactCoordinatesResolver}._@param module The module ID_@param transitive {@code true} if the transitive dependencies should also be added,_otherwise {@code false}._@return this {@link DependencyCustomizer} for continued use;public DependencyCustomizer add(String module, boolean transitive) {_		return add(module, null, null, transitive)__	};add,a,single,dependency,and,optionally,all,of,its,dependencies,the,group,id,and,version,of,the,dependency,are,resolved,from,the,module,using,the,customizer,s,link,artifact,coordinates,resolver,param,module,the,module,id,param,transitive,code,true,if,the,transitive,dependencies,should,also,be,added,otherwise,code,false,return,this,link,dependency,customizer,for,continued,use;public,dependency,customizer,add,string,module,boolean,transitive,return,add,module,null,null,transitive
DependencyCustomizer -> public DependencyCustomizer add(String module, boolean transitive);1512760426;Add a single dependency and, optionally, all of its dependencies. The group ID and_version of the dependency are resolved from the module using the customizer's_{@link ArtifactCoordinatesResolver}._@param module The module ID_@param transitive {@code true} if the transitive dependencies should also be added,_otherwise {@code false}._@return this {@link DependencyCustomizer} for continued use;public DependencyCustomizer add(String module, boolean transitive) {_		return add(module, null, null, transitive)__	};add,a,single,dependency,and,optionally,all,of,its,dependencies,the,group,id,and,version,of,the,dependency,are,resolved,from,the,module,using,the,customizer,s,link,artifact,coordinates,resolver,param,module,the,module,id,param,transitive,code,true,if,the,transitive,dependencies,should,also,be,added,otherwise,code,false,return,this,link,dependency,customizer,for,continued,use;public,dependency,customizer,add,string,module,boolean,transitive,return,add,module,null,null,transitive
DependencyCustomizer -> public DependencyCustomizer add(String module, boolean transitive);1532738143;Add a single dependency and, optionally, all of its dependencies. The group ID and_version of the dependency are resolved from the module using the customizer's_{@link ArtifactCoordinatesResolver}._@param module the module ID_@param transitive {@code true} if the transitive dependencies should also be added,_otherwise {@code false}_@return this {@link DependencyCustomizer} for continued use;public DependencyCustomizer add(String module, boolean transitive) {_		return add(module, null, null, transitive)__	};add,a,single,dependency,and,optionally,all,of,its,dependencies,the,group,id,and,version,of,the,dependency,are,resolved,from,the,module,using,the,customizer,s,link,artifact,coordinates,resolver,param,module,the,module,id,param,transitive,code,true,if,the,transitive,dependencies,should,also,be,added,otherwise,code,false,return,this,link,dependency,customizer,for,continued,use;public,dependency,customizer,add,string,module,boolean,transitive,return,add,module,null,null,transitive
DependencyCustomizer -> public DependencyCustomizer ifAnyResourcesPresent(String... paths);1512760426;Create a nested {@link DependencyCustomizer} that only applies at least one of the_specified paths is on the class path._@param paths the paths to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAnyResourcesPresent(String... paths) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String path : paths) {_					try {_						if (DependencyCustomizer.this.loader.getResource(path) != null) {_							return true__						}_						return false__					}_					catch (Exception ex) {_						_					}_				}_				return DependencyCustomizer.this.canAdd()__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,at,least,one,of,the,specified,paths,is,on,the,class,path,param,paths,the,paths,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,any,resources,present,string,paths,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,path,paths,try,if,dependency,customizer,this,loader,get,resource,path,null,return,true,return,false,catch,exception,ex,return,dependency,customizer,this,can,add
DependencyCustomizer -> public DependencyCustomizer ifAnyResourcesPresent(String... paths);1532738143;Create a nested {@link DependencyCustomizer} that only applies at least one of the_specified paths is on the class path._@param paths the paths to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAnyResourcesPresent(String... paths) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String path : paths) {_					try {_						if (DependencyCustomizer.this.loader.getResource(path) != null) {_							return true__						}_						return false__					}_					catch (Exception ex) {_						_					}_				}_				return DependencyCustomizer.this.canAdd()__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,at,least,one,of,the,specified,paths,is,on,the,class,path,param,paths,the,paths,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,any,resources,present,string,paths,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,path,paths,try,if,dependency,customizer,this,loader,get,resource,path,null,return,true,return,false,catch,exception,ex,return,dependency,customizer,this,can,add
DependencyCustomizer -> public DependencyCustomizer ifAllResourcesPresent(final String... paths);1507173536;Create a nested {@link DependencyCustomizer} that only applies if the specified_paths are on the class path._@param paths the paths to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAllResourcesPresent(final String... paths) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String path : paths) {_					try {_						if (DependencyCustomizer.this.loader.getResource(path) == null) {_							return false__						}_						return true__					}_					catch (Exception ex) {_						_					}_				}_				return DependencyCustomizer.this.canAdd()__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,if,the,specified,paths,are,on,the,class,path,param,paths,the,paths,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,all,resources,present,final,string,paths,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,path,paths,try,if,dependency,customizer,this,loader,get,resource,path,null,return,false,return,true,catch,exception,ex,return,dependency,customizer,this,can,add
DependencyCustomizer -> public DependencyCustomizer ifAllResourcesPresent(final String... paths);1507661773;Create a nested {@link DependencyCustomizer} that only applies if the specified_paths are on the class path._@param paths the paths to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAllResourcesPresent(final String... paths) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String path : paths) {_					try {_						if (DependencyCustomizer.this.loader.getResource(path) == null) {_							return false__						}_						return true__					}_					catch (Exception ex) {_						_					}_				}_				return DependencyCustomizer.this.canAdd()__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,if,the,specified,paths,are,on,the,class,path,param,paths,the,paths,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,all,resources,present,final,string,paths,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,path,paths,try,if,dependency,customizer,this,loader,get,resource,path,null,return,false,return,true,catch,exception,ex,return,dependency,customizer,this,can,add
DependencyCustomizer -> public DependencyResolutionContext getDependencyResolutionContext();1507173536;Returns the {@link DependencyResolutionContext}._@return the dependency resolution context;public DependencyResolutionContext getDependencyResolutionContext() {_		return this.dependencyResolutionContext__	};returns,the,link,dependency,resolution,context,return,the,dependency,resolution,context;public,dependency,resolution,context,get,dependency,resolution,context,return,this,dependency,resolution,context
DependencyCustomizer -> public DependencyResolutionContext getDependencyResolutionContext();1507661773;Returns the {@link DependencyResolutionContext}._@return the dependency resolution context;public DependencyResolutionContext getDependencyResolutionContext() {_		return this.dependencyResolutionContext__	};returns,the,link,dependency,resolution,context,return,the,dependency,resolution,context;public,dependency,resolution,context,get,dependency,resolution,context,return,this,dependency,resolution,context
DependencyCustomizer -> public DependencyResolutionContext getDependencyResolutionContext();1512760426;Returns the {@link DependencyResolutionContext}._@return the dependency resolution context;public DependencyResolutionContext getDependencyResolutionContext() {_		return this.dependencyResolutionContext__	};returns,the,link,dependency,resolution,context,return,the,dependency,resolution,context;public,dependency,resolution,context,get,dependency,resolution,context,return,this,dependency,resolution,context
DependencyCustomizer -> public DependencyResolutionContext getDependencyResolutionContext();1532738143;Returns the {@link DependencyResolutionContext}._@return the dependency resolution context;public DependencyResolutionContext getDependencyResolutionContext() {_		return this.dependencyResolutionContext__	};returns,the,link,dependency,resolution,context,return,the,dependency,resolution,context;public,dependency,resolution,context,get,dependency,resolution,context,return,this,dependency,resolution,context
DependencyCustomizer -> public DependencyCustomizer ifAnyMissingClasses(String... classNames);1512760426;Create a nested {@link DependencyCustomizer} that only applies if any of the_specified class names are not on the class path._@param classNames the class names to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAnyMissingClasses(String... classNames) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String className : classNames) {_					try {_						DependencyCustomizer.this.loader.loadClass(className)__					}_					catch (Exception ex) {_						return true__					}_				}_				return false__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,if,any,of,the,specified,class,names,are,not,on,the,class,path,param,class,names,the,class,names,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,any,missing,classes,string,class,names,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,class,name,class,names,try,dependency,customizer,this,loader,load,class,class,name,catch,exception,ex,return,true,return,false
DependencyCustomizer -> public DependencyCustomizer ifAnyMissingClasses(String... classNames);1532738143;Create a nested {@link DependencyCustomizer} that only applies if any of the_specified class names are not on the class path._@param classNames the class names to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAnyMissingClasses(String... classNames) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String className : classNames) {_					try {_						DependencyCustomizer.this.loader.loadClass(className)__					}_					catch (Exception ex) {_						return true__					}_				}_				return false__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,if,any,of,the,specified,class,names,are,not,on,the,class,path,param,class,names,the,class,names,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,any,missing,classes,string,class,names,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,class,name,class,names,try,dependency,customizer,this,loader,load,class,class,name,catch,exception,ex,return,true,return,false
DependencyCustomizer -> public DependencyCustomizer add(String module, String classifier, String type, 			boolean transitive);1507173536;Add a single dependency with the specified classifier and type and, optionally, all_of its dependencies. The group ID and version of the dependency are resolved from_the module by using the customizer's {@link ArtifactCoordinatesResolver}._@param module The module ID_@param classifier The classifier, may be {@code null}_@param type The type, may be {@code null}_@param transitive {@code true} if the transitive dependencies should also be added,_otherwise {@code false}._@return this {@link DependencyCustomizer} for continued use;public DependencyCustomizer add(String module, String classifier, String type,_			boolean transitive) {_		if (canAdd()) {_			ArtifactCoordinatesResolver artifactCoordinatesResolver = this.dependencyResolutionContext_					.getArtifactCoordinatesResolver()__			this.classNode.addAnnotation(_					createGrabAnnotation(artifactCoordinatesResolver.getGroupId(module),_							artifactCoordinatesResolver.getArtifactId(module),_							artifactCoordinatesResolver.getVersion(module), classifier,_							type, transitive))__		}_		return this__	};add,a,single,dependency,with,the,specified,classifier,and,type,and,optionally,all,of,its,dependencies,the,group,id,and,version,of,the,dependency,are,resolved,from,the,module,by,using,the,customizer,s,link,artifact,coordinates,resolver,param,module,the,module,id,param,classifier,the,classifier,may,be,code,null,param,type,the,type,may,be,code,null,param,transitive,code,true,if,the,transitive,dependencies,should,also,be,added,otherwise,code,false,return,this,link,dependency,customizer,for,continued,use;public,dependency,customizer,add,string,module,string,classifier,string,type,boolean,transitive,if,can,add,artifact,coordinates,resolver,artifact,coordinates,resolver,this,dependency,resolution,context,get,artifact,coordinates,resolver,this,class,node,add,annotation,create,grab,annotation,artifact,coordinates,resolver,get,group,id,module,artifact,coordinates,resolver,get,artifact,id,module,artifact,coordinates,resolver,get,version,module,classifier,type,transitive,return,this
DependencyCustomizer -> public DependencyCustomizer add(String module, String classifier, String type, 			boolean transitive);1507661773;Add a single dependency with the specified classifier and type and, optionally, all_of its dependencies. The group ID and version of the dependency are resolved from_the module by using the customizer's {@link ArtifactCoordinatesResolver}._@param module The module ID_@param classifier The classifier, may be {@code null}_@param type The type, may be {@code null}_@param transitive {@code true} if the transitive dependencies should also be added,_otherwise {@code false}._@return this {@link DependencyCustomizer} for continued use;public DependencyCustomizer add(String module, String classifier, String type,_			boolean transitive) {_		if (canAdd()) {_			ArtifactCoordinatesResolver artifactCoordinatesResolver = this.dependencyResolutionContext_					.getArtifactCoordinatesResolver()__			this.classNode.addAnnotation(_					createGrabAnnotation(artifactCoordinatesResolver.getGroupId(module),_							artifactCoordinatesResolver.getArtifactId(module),_							artifactCoordinatesResolver.getVersion(module), classifier,_							type, transitive))__		}_		return this__	};add,a,single,dependency,with,the,specified,classifier,and,type,and,optionally,all,of,its,dependencies,the,group,id,and,version,of,the,dependency,are,resolved,from,the,module,by,using,the,customizer,s,link,artifact,coordinates,resolver,param,module,the,module,id,param,classifier,the,classifier,may,be,code,null,param,type,the,type,may,be,code,null,param,transitive,code,true,if,the,transitive,dependencies,should,also,be,added,otherwise,code,false,return,this,link,dependency,customizer,for,continued,use;public,dependency,customizer,add,string,module,string,classifier,string,type,boolean,transitive,if,can,add,artifact,coordinates,resolver,artifact,coordinates,resolver,this,dependency,resolution,context,get,artifact,coordinates,resolver,this,class,node,add,annotation,create,grab,annotation,artifact,coordinates,resolver,get,group,id,module,artifact,coordinates,resolver,get,artifact,id,module,artifact,coordinates,resolver,get,version,module,classifier,type,transitive,return,this
DependencyCustomizer -> public DependencyCustomizer add(String module, String classifier, String type, 			boolean transitive);1512760426;Add a single dependency with the specified classifier and type and, optionally, all_of its dependencies. The group ID and version of the dependency are resolved from_the module by using the customizer's {@link ArtifactCoordinatesResolver}._@param module The module ID_@param classifier The classifier, may be {@code null}_@param type The type, may be {@code null}_@param transitive {@code true} if the transitive dependencies should also be added,_otherwise {@code false}._@return this {@link DependencyCustomizer} for continued use;public DependencyCustomizer add(String module, String classifier, String type,_			boolean transitive) {_		if (canAdd()) {_			ArtifactCoordinatesResolver artifactCoordinatesResolver = this.dependencyResolutionContext_					.getArtifactCoordinatesResolver()__			this.classNode.addAnnotation(_					createGrabAnnotation(artifactCoordinatesResolver.getGroupId(module),_							artifactCoordinatesResolver.getArtifactId(module),_							artifactCoordinatesResolver.getVersion(module), classifier,_							type, transitive))__		}_		return this__	};add,a,single,dependency,with,the,specified,classifier,and,type,and,optionally,all,of,its,dependencies,the,group,id,and,version,of,the,dependency,are,resolved,from,the,module,by,using,the,customizer,s,link,artifact,coordinates,resolver,param,module,the,module,id,param,classifier,the,classifier,may,be,code,null,param,type,the,type,may,be,code,null,param,transitive,code,true,if,the,transitive,dependencies,should,also,be,added,otherwise,code,false,return,this,link,dependency,customizer,for,continued,use;public,dependency,customizer,add,string,module,string,classifier,string,type,boolean,transitive,if,can,add,artifact,coordinates,resolver,artifact,coordinates,resolver,this,dependency,resolution,context,get,artifact,coordinates,resolver,this,class,node,add,annotation,create,grab,annotation,artifact,coordinates,resolver,get,group,id,module,artifact,coordinates,resolver,get,artifact,id,module,artifact,coordinates,resolver,get,version,module,classifier,type,transitive,return,this
DependencyCustomizer -> public DependencyCustomizer add(String module, String classifier, String type, 			boolean transitive);1532738143;Add a single dependency with the specified classifier and type and, optionally, all_of its dependencies. The group ID and version of the dependency are resolved from_the module by using the customizer's {@link ArtifactCoordinatesResolver}._@param module the module ID_@param classifier the classifier, may be {@code null}_@param type the type, may be {@code null}_@param transitive {@code true} if the transitive dependencies should also be added,_otherwise {@code false}_@return this {@link DependencyCustomizer} for continued use;public DependencyCustomizer add(String module, String classifier, String type,_			boolean transitive) {_		if (canAdd()) {_			ArtifactCoordinatesResolver artifactCoordinatesResolver = this.dependencyResolutionContext_					.getArtifactCoordinatesResolver()__			this.classNode.addAnnotation(_					createGrabAnnotation(artifactCoordinatesResolver.getGroupId(module),_							artifactCoordinatesResolver.getArtifactId(module),_							artifactCoordinatesResolver.getVersion(module), classifier,_							type, transitive))__		}_		return this__	};add,a,single,dependency,with,the,specified,classifier,and,type,and,optionally,all,of,its,dependencies,the,group,id,and,version,of,the,dependency,are,resolved,from,the,module,by,using,the,customizer,s,link,artifact,coordinates,resolver,param,module,the,module,id,param,classifier,the,classifier,may,be,code,null,param,type,the,type,may,be,code,null,param,transitive,code,true,if,the,transitive,dependencies,should,also,be,added,otherwise,code,false,return,this,link,dependency,customizer,for,continued,use;public,dependency,customizer,add,string,module,string,classifier,string,type,boolean,transitive,if,can,add,artifact,coordinates,resolver,artifact,coordinates,resolver,this,dependency,resolution,context,get,artifact,coordinates,resolver,this,class,node,add,annotation,create,grab,annotation,artifact,coordinates,resolver,get,group,id,module,artifact,coordinates,resolver,get,artifact,id,module,artifact,coordinates,resolver,get,version,module,classifier,type,transitive,return,this
DependencyCustomizer -> public DependencyCustomizer(GroovyClassLoader loader, ModuleNode moduleNode, 			DependencyResolutionContext dependencyResolutionContext);1507173536;Create a new {@link DependencyCustomizer} instance._@param loader the current classloader_@param moduleNode the current module_@param dependencyResolutionContext the context for dependency resolution;public DependencyCustomizer(GroovyClassLoader loader, ModuleNode moduleNode,_			DependencyResolutionContext dependencyResolutionContext) {_		this.loader = loader__		this.classNode = moduleNode.getClasses().get(0)__		this.dependencyResolutionContext = dependencyResolutionContext__	};create,a,new,link,dependency,customizer,instance,param,loader,the,current,classloader,param,module,node,the,current,module,param,dependency,resolution,context,the,context,for,dependency,resolution;public,dependency,customizer,groovy,class,loader,loader,module,node,module,node,dependency,resolution,context,dependency,resolution,context,this,loader,loader,this,class,node,module,node,get,classes,get,0,this,dependency,resolution,context,dependency,resolution,context
DependencyCustomizer -> public DependencyCustomizer(GroovyClassLoader loader, ModuleNode moduleNode, 			DependencyResolutionContext dependencyResolutionContext);1507661773;Create a new {@link DependencyCustomizer} instance._@param loader the current classloader_@param moduleNode the current module_@param dependencyResolutionContext the context for dependency resolution;public DependencyCustomizer(GroovyClassLoader loader, ModuleNode moduleNode,_			DependencyResolutionContext dependencyResolutionContext) {_		this.loader = loader__		this.classNode = moduleNode.getClasses().get(0)__		this.dependencyResolutionContext = dependencyResolutionContext__	};create,a,new,link,dependency,customizer,instance,param,loader,the,current,classloader,param,module,node,the,current,module,param,dependency,resolution,context,the,context,for,dependency,resolution;public,dependency,customizer,groovy,class,loader,loader,module,node,module,node,dependency,resolution,context,dependency,resolution,context,this,loader,loader,this,class,node,module,node,get,classes,get,0,this,dependency,resolution,context,dependency,resolution,context
DependencyCustomizer -> public DependencyCustomizer(GroovyClassLoader loader, ModuleNode moduleNode, 			DependencyResolutionContext dependencyResolutionContext);1512760426;Create a new {@link DependencyCustomizer} instance._@param loader the current classloader_@param moduleNode the current module_@param dependencyResolutionContext the context for dependency resolution;public DependencyCustomizer(GroovyClassLoader loader, ModuleNode moduleNode,_			DependencyResolutionContext dependencyResolutionContext) {_		this.loader = loader__		this.classNode = moduleNode.getClasses().get(0)__		this.dependencyResolutionContext = dependencyResolutionContext__	};create,a,new,link,dependency,customizer,instance,param,loader,the,current,classloader,param,module,node,the,current,module,param,dependency,resolution,context,the,context,for,dependency,resolution;public,dependency,customizer,groovy,class,loader,loader,module,node,module,node,dependency,resolution,context,dependency,resolution,context,this,loader,loader,this,class,node,module,node,get,classes,get,0,this,dependency,resolution,context,dependency,resolution,context
DependencyCustomizer -> public DependencyCustomizer(GroovyClassLoader loader, ModuleNode moduleNode, 			DependencyResolutionContext dependencyResolutionContext);1532738143;Create a new {@link DependencyCustomizer} instance._@param loader the current classloader_@param moduleNode the current module_@param dependencyResolutionContext the context for dependency resolution;public DependencyCustomizer(GroovyClassLoader loader, ModuleNode moduleNode,_			DependencyResolutionContext dependencyResolutionContext) {_		this.loader = loader__		this.classNode = moduleNode.getClasses().get(0)__		this.dependencyResolutionContext = dependencyResolutionContext__	};create,a,new,link,dependency,customizer,instance,param,loader,the,current,classloader,param,module,node,the,current,module,param,dependency,resolution,context,the,context,for,dependency,resolution;public,dependency,customizer,groovy,class,loader,loader,module,node,module,node,dependency,resolution,context,dependency,resolution,context,this,loader,loader,this,class,node,module,node,get,classes,get,0,this,dependency,resolution,context,dependency,resolution,context
DependencyCustomizer -> public DependencyCustomizer ifAllMissingClasses(String... classNames);1512760426;Create a nested {@link DependencyCustomizer} that only applies if all of the_specified class names are not on the class path._@param classNames the class names to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAllMissingClasses(String... classNames) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String className : classNames) {_					try {_						DependencyCustomizer.this.loader.loadClass(className)__						return false__					}_					catch (Exception ex) {_						_					}_				}_				return DependencyCustomizer.this.canAdd()__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,if,all,of,the,specified,class,names,are,not,on,the,class,path,param,class,names,the,class,names,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,all,missing,classes,string,class,names,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,class,name,class,names,try,dependency,customizer,this,loader,load,class,class,name,return,false,catch,exception,ex,return,dependency,customizer,this,can,add
DependencyCustomizer -> public DependencyCustomizer ifAllMissingClasses(String... classNames);1532738143;Create a nested {@link DependencyCustomizer} that only applies if all of the_specified class names are not on the class path._@param classNames the class names to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAllMissingClasses(String... classNames) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String className : classNames) {_					try {_						DependencyCustomizer.this.loader.loadClass(className)__						return false__					}_					catch (Exception ex) {_						_					}_				}_				return DependencyCustomizer.this.canAdd()__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,if,all,of,the,specified,class,names,are,not,on,the,class,path,param,class,names,the,class,names,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,all,missing,classes,string,class,names,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,class,name,class,names,try,dependency,customizer,this,loader,load,class,class,name,return,false,catch,exception,ex,return,dependency,customizer,this,can,add
DependencyCustomizer -> public DependencyCustomizer add(String... modules);1507173536;Add dependencies and all of their dependencies. The group ID and version of the_dependencies are resolved from the modules using the customizer's_{@link ArtifactCoordinatesResolver}._@param modules The module IDs_@return this {@link DependencyCustomizer} for continued use;public DependencyCustomizer add(String... modules) {_		for (String module : modules) {_			add(module, null, null, true)__		}_		return this__	};add,dependencies,and,all,of,their,dependencies,the,group,id,and,version,of,the,dependencies,are,resolved,from,the,modules,using,the,customizer,s,link,artifact,coordinates,resolver,param,modules,the,module,ids,return,this,link,dependency,customizer,for,continued,use;public,dependency,customizer,add,string,modules,for,string,module,modules,add,module,null,null,true,return,this
DependencyCustomizer -> public DependencyCustomizer add(String... modules);1507661773;Add dependencies and all of their dependencies. The group ID and version of the_dependencies are resolved from the modules using the customizer's_{@link ArtifactCoordinatesResolver}._@param modules The module IDs_@return this {@link DependencyCustomizer} for continued use;public DependencyCustomizer add(String... modules) {_		for (String module : modules) {_			add(module, null, null, true)__		}_		return this__	};add,dependencies,and,all,of,their,dependencies,the,group,id,and,version,of,the,dependencies,are,resolved,from,the,modules,using,the,customizer,s,link,artifact,coordinates,resolver,param,modules,the,module,ids,return,this,link,dependency,customizer,for,continued,use;public,dependency,customizer,add,string,modules,for,string,module,modules,add,module,null,null,true,return,this
DependencyCustomizer -> public DependencyCustomizer add(String... modules);1512760426;Add dependencies and all of their dependencies. The group ID and version of the_dependencies are resolved from the modules using the customizer's_{@link ArtifactCoordinatesResolver}._@param modules The module IDs_@return this {@link DependencyCustomizer} for continued use;public DependencyCustomizer add(String... modules) {_		for (String module : modules) {_			add(module, null, null, true)__		}_		return this__	};add,dependencies,and,all,of,their,dependencies,the,group,id,and,version,of,the,dependencies,are,resolved,from,the,modules,using,the,customizer,s,link,artifact,coordinates,resolver,param,modules,the,module,ids,return,this,link,dependency,customizer,for,continued,use;public,dependency,customizer,add,string,modules,for,string,module,modules,add,module,null,null,true,return,this
DependencyCustomizer -> public DependencyCustomizer add(String... modules);1532738143;Add dependencies and all of their dependencies. The group ID and version of the_dependencies are resolved from the modules using the customizer's_{@link ArtifactCoordinatesResolver}._@param modules the module IDs_@return this {@link DependencyCustomizer} for continued use;public DependencyCustomizer add(String... modules) {_		for (String module : modules) {_			add(module, null, null, true)__		}_		return this__	};add,dependencies,and,all,of,their,dependencies,the,group,id,and,version,of,the,dependencies,are,resolved,from,the,modules,using,the,customizer,s,link,artifact,coordinates,resolver,param,modules,the,module,ids,return,this,link,dependency,customizer,for,continued,use;public,dependency,customizer,add,string,modules,for,string,module,modules,add,module,null,null,true,return,this
DependencyCustomizer -> public DependencyCustomizer ifAnyMissingClasses(final String... classNames);1507173536;Create a nested {@link DependencyCustomizer} that only applies if any of the_specified class names are not on the class path._@param classNames the class names to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAnyMissingClasses(final String... classNames) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String className : classNames) {_					try {_						DependencyCustomizer.this.loader.loadClass(className)__					}_					catch (Exception ex) {_						return true__					}_				}_				return false__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,if,any,of,the,specified,class,names,are,not,on,the,class,path,param,class,names,the,class,names,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,any,missing,classes,final,string,class,names,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,class,name,class,names,try,dependency,customizer,this,loader,load,class,class,name,catch,exception,ex,return,true,return,false
DependencyCustomizer -> public DependencyCustomizer ifAnyMissingClasses(final String... classNames);1507661773;Create a nested {@link DependencyCustomizer} that only applies if any of the_specified class names are not on the class path._@param classNames the class names to test_@return a nested {@link DependencyCustomizer};public DependencyCustomizer ifAnyMissingClasses(final String... classNames) {_		return new DependencyCustomizer(this) {_			@Override_			protected boolean canAdd() {_				for (String className : classNames) {_					try {_						DependencyCustomizer.this.loader.loadClass(className)__					}_					catch (Exception ex) {_						return true__					}_				}_				return false__			}_		}__	};create,a,nested,link,dependency,customizer,that,only,applies,if,any,of,the,specified,class,names,are,not,on,the,class,path,param,class,names,the,class,names,to,test,return,a,nested,link,dependency,customizer;public,dependency,customizer,if,any,missing,classes,final,string,class,names,return,new,dependency,customizer,this,override,protected,boolean,can,add,for,string,class,name,class,names,try,dependency,customizer,this,loader,load,class,class,name,catch,exception,ex,return,true,return,false
