commented;modifiers;parameterAmount;loc;comment;code
false;public;1;27;;@Override public ExitStatus run(String... args) throws Exception {     try {         int index = (args.length != 0) ? Integer.valueOf(args[0]) - 1 : 0.         List<String> arguments = new ArrayList<>(args.length).         for (int i = 2. i < args.length. i++) {             arguments.add(args[i]).         }         String starting = "".         if (index < arguments.size()) {             starting = arguments.remove(index).         }         if (index == 0) {             showCommandHints(starting).         } else if (!arguments.isEmpty() && !starting.isEmpty()) {             String command = arguments.remove(0).             showCommandOptionHints(command, Collections.unmodifiableList(arguments), starting).         }     } catch (Exception ex) {         // Swallow and provide no hints         return ExitStatus.ERROR.     }     return ExitStatus.OK. }
false;private;1;7;;private void showCommandHints(String starting) {     for (Command command : this.commandRunner) {         if (isHintMatch(command, starting)) {             Log.info(command.getName() + " " + command.getDescription()).         }     } }
false;private;2;8;;private boolean isHintMatch(Command command, String starting) {     if (command instanceof HintCommand) {         return false.     }     return command.getName().startsWith(starting) || (this.commandRunner.isOptionCommand(command) && ("--" + command.getName()).startsWith(starting)). }
false;private;3;15;;private void showCommandOptionHints(String commandName, List<String> specifiedArguments, String starting) {     Command command = this.commandRunner.findCommand(commandName).     if (command != null) {         for (OptionHelp help : command.getOptionsHelp()) {             if (!alreadyUsed(help, specifiedArguments)) {                 for (String option : help.getOptions()) {                     if (option.startsWith(starting)) {                         Log.info(option + " " + help.getUsageHelp()).                     }                 }             }         }     } }
false;private;2;8;;private boolean alreadyUsed(OptionHelp help, List<String> specifiedArguments) {     for (String argument : specifiedArguments) {         if (help.getOptions().contains(argument)) {             return true.         }     }     return false. }
