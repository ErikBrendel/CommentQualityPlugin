# id;timestamp;commentText;codeText;commentWords;codeWords
AstUtils -> public static boolean hasAtLeastOneAnnotation(AnnotatedNode node, 			String... annotations);1507173536;Determine if an {@link AnnotatedNode} has one or more of the specified annotations._N.B. the annotation type names are not normally fully qualified._@param node the node to examine_@param annotations the annotations to look for_@return {@code true} if at least one of the annotations is found, otherwise_{@code false};public static boolean hasAtLeastOneAnnotation(AnnotatedNode node,_			String... annotations) {_		for (AnnotationNode annotationNode : node.getAnnotations()) {_			for (String annotation : annotations) {_				if (PatternMatchUtils.simpleMatch(annotation,_						annotationNode.getClassNode().getName())) {_					return true__				}_			}_		}_		return false__	};determine,if,an,link,annotated,node,has,one,or,more,of,the,specified,annotations,n,b,the,annotation,type,names,are,not,normally,fully,qualified,param,node,the,node,to,examine,param,annotations,the,annotations,to,look,for,return,code,true,if,at,least,one,of,the,annotations,is,found,otherwise,code,false;public,static,boolean,has,at,least,one,annotation,annotated,node,node,string,annotations,for,annotation,node,annotation,node,node,get,annotations,for,string,annotation,annotations,if,pattern,match,utils,simple,match,annotation,annotation,node,get,class,node,get,name,return,true,return,false
AstUtils -> public static boolean hasAtLeastOneAnnotation(AnnotatedNode node, 			String... annotations);1517273683;Determine if an {@link AnnotatedNode} has one or more of the specified annotations._N.B. the annotation type names are not normally fully qualified._@param node the node to examine_@param annotations the annotations to look for_@return {@code true} if at least one of the annotations is found, otherwise_{@code false};public static boolean hasAtLeastOneAnnotation(AnnotatedNode node,_			String... annotations) {_		for (AnnotationNode annotationNode : node.getAnnotations()) {_			for (String annotation : annotations) {_				if (PatternMatchUtils.simpleMatch(annotation,_						annotationNode.getClassNode().getName())) {_					return true__				}_			}_		}_		return false__	};determine,if,an,link,annotated,node,has,one,or,more,of,the,specified,annotations,n,b,the,annotation,type,names,are,not,normally,fully,qualified,param,node,the,node,to,examine,param,annotations,the,annotations,to,look,for,return,code,true,if,at,least,one,of,the,annotations,is,found,otherwise,code,false;public,static,boolean,has,at,least,one,annotation,annotated,node,node,string,annotations,for,annotation,node,annotation,node,node,get,annotations,for,string,annotation,annotations,if,pattern,match,utils,simple,match,annotation,annotation,node,get,class,node,get,name,return,true,return,false
AstUtils -> public static boolean hasAtLeastOneAnnotation(AnnotatedNode node, 			String... annotations);1517290556;Determine if an {@link AnnotatedNode} has one or more of the specified annotations._N.B. the annotation type names are not normally fully qualified._@param node the node to examine_@param annotations the annotations to look for_@return {@code true} if at least one of the annotations is found, otherwise_{@code false};public static boolean hasAtLeastOneAnnotation(AnnotatedNode node,_			String... annotations) {_		for (AnnotationNode annotationNode : node.getAnnotations()) {_			for (String annotation : annotations) {_				if (PatternMatchUtils.simpleMatch(annotation,_						annotationNode.getClassNode().getName())) {_					return true__				}_			}_		}_		return false__	};determine,if,an,link,annotated,node,has,one,or,more,of,the,specified,annotations,n,b,the,annotation,type,names,are,not,normally,fully,qualified,param,node,the,node,to,examine,param,annotations,the,annotations,to,look,for,return,code,true,if,at,least,one,of,the,annotations,is,found,otherwise,code,false;public,static,boolean,has,at,least,one,annotation,annotated,node,node,string,annotations,for,annotation,node,annotation,node,node,get,annotations,for,string,annotation,annotations,if,pattern,match,utils,simple,match,annotation,annotation,node,get,class,node,get,name,return,true,return,false
AstUtils -> public static boolean hasAtLeastOneAnnotation(AnnotatedNode node, 			String... annotations);1519804936;Determine if an {@link AnnotatedNode} has one or more of the specified annotations._N.B. the annotation type names are not normally fully qualified._@param node the node to examine_@param annotations the annotations to look for_@return {@code true} if at least one of the annotations is found, otherwise_{@code false};public static boolean hasAtLeastOneAnnotation(AnnotatedNode node,_			String... annotations) {_		for (AnnotationNode annotationNode : node.getAnnotations()) {_			for (String annotation : annotations) {_				if (PatternMatchUtils.simpleMatch(annotation,_						annotationNode.getClassNode().getName())) {_					return true__				}_			}_		}_		return false__	};determine,if,an,link,annotated,node,has,one,or,more,of,the,specified,annotations,n,b,the,annotation,type,names,are,not,normally,fully,qualified,param,node,the,node,to,examine,param,annotations,the,annotations,to,look,for,return,code,true,if,at,least,one,of,the,annotations,is,found,otherwise,code,false;public,static,boolean,has,at,least,one,annotation,annotated,node,node,string,annotations,for,annotation,node,annotation,node,node,get,annotations,for,string,annotation,annotations,if,pattern,match,utils,simple,match,annotation,annotation,node,get,class,node,get,name,return,true,return,false
AstUtils -> public static boolean subclasses(ClassNode node, String... types);1507173536;Determine if a {@link ClassNode} subclasses any of the specified types N.B. the_type names are not normally fully qualified._@param node the class to examine_@param types the types that may have been sub-classed_@return {@code true} if the class subclasses any of the specified types, otherwise_{@code false};public static boolean subclasses(ClassNode node, String... types) {_		for (String type : types) {_			if (node.getSuperClass().getName().equals(type)) {_				return true__			}_		}_		return false__	};determine,if,a,link,class,node,subclasses,any,of,the,specified,types,n,b,the,type,names,are,not,normally,fully,qualified,param,node,the,class,to,examine,param,types,the,types,that,may,have,been,sub,classed,return,code,true,if,the,class,subclasses,any,of,the,specified,types,otherwise,code,false;public,static,boolean,subclasses,class,node,node,string,types,for,string,type,types,if,node,get,super,class,get,name,equals,type,return,true,return,false
AstUtils -> public static boolean subclasses(ClassNode node, String... types);1517273683;Determine if a {@link ClassNode} subclasses any of the specified types N.B. the_type names are not normally fully qualified._@param node the class to examine_@param types the types that may have been sub-classed_@return {@code true} if the class subclasses any of the specified types, otherwise_{@code false};public static boolean subclasses(ClassNode node, String... types) {_		for (String type : types) {_			if (node.getSuperClass().getName().equals(type)) {_				return true__			}_		}_		return false__	};determine,if,a,link,class,node,subclasses,any,of,the,specified,types,n,b,the,type,names,are,not,normally,fully,qualified,param,node,the,class,to,examine,param,types,the,types,that,may,have,been,sub,classed,return,code,true,if,the,class,subclasses,any,of,the,specified,types,otherwise,code,false;public,static,boolean,subclasses,class,node,node,string,types,for,string,type,types,if,node,get,super,class,get,name,equals,type,return,true,return,false
AstUtils -> public static boolean subclasses(ClassNode node, String... types);1517290556;Determine if a {@link ClassNode} subclasses any of the specified types N.B. the_type names are not normally fully qualified._@param node the class to examine_@param types the types that may have been sub-classed_@return {@code true} if the class subclasses any of the specified types, otherwise_{@code false};public static boolean subclasses(ClassNode node, String... types) {_		for (String type : types) {_			if (node.getSuperClass().getName().equals(type)) {_				return true__			}_		}_		return false__	};determine,if,a,link,class,node,subclasses,any,of,the,specified,types,n,b,the,type,names,are,not,normally,fully,qualified,param,node,the,class,to,examine,param,types,the,types,that,may,have,been,sub,classed,return,code,true,if,the,class,subclasses,any,of,the,specified,types,otherwise,code,false;public,static,boolean,subclasses,class,node,node,string,types,for,string,type,types,if,node,get,super,class,get,name,equals,type,return,true,return,false
AstUtils -> public static boolean subclasses(ClassNode node, String... types);1519804936;Determine if a {@link ClassNode} subclasses any of the specified types N.B. the_type names are not normally fully qualified._@param node the class to examine_@param types the types that may have been sub-classed_@return {@code true} if the class subclasses any of the specified types, otherwise_{@code false};public static boolean subclasses(ClassNode node, String... types) {_		for (String type : types) {_			if (node.getSuperClass().getName().equals(type)) {_				return true__			}_		}_		return false__	};determine,if,a,link,class,node,subclasses,any,of,the,specified,types,n,b,the,type,names,are,not,normally,fully,qualified,param,node,the,class,to,examine,param,types,the,types,that,may,have,been,sub,classed,return,code,true,if,the,class,subclasses,any,of,the,specified,types,otherwise,code,false;public,static,boolean,subclasses,class,node,node,string,types,for,string,type,types,if,node,get,super,class,get,name,equals,type,return,true,return,false
AstUtils -> public static boolean hasAtLeastOneFieldOrMethod(ClassNode node, String... types);1507173536;Determine if a {@link ClassNode} has one or more fields of the specified types or_method returning one or more of the specified types. N.B. the type names are not_normally fully qualified._@param node the class to examine_@param types the types to look for_@return {@code true} if at least one of the types is found, otherwise {@code false};public static boolean hasAtLeastOneFieldOrMethod(ClassNode node, String... types) {_		Set<String> typesSet = new HashSet<>(Arrays.asList(types))__		for (FieldNode field : node.getFields()) {_			if (typesSet.contains(field.getType().getName())) {_				return true__			}_		}_		for (MethodNode method : node.getMethods()) {_			if (typesSet.contains(method.getReturnType().getName())) {_				return true__			}_		}_		return false__	};determine,if,a,link,class,node,has,one,or,more,fields,of,the,specified,types,or,method,returning,one,or,more,of,the,specified,types,n,b,the,type,names,are,not,normally,fully,qualified,param,node,the,class,to,examine,param,types,the,types,to,look,for,return,code,true,if,at,least,one,of,the,types,is,found,otherwise,code,false;public,static,boolean,has,at,least,one,field,or,method,class,node,node,string,types,set,string,types,set,new,hash,set,arrays,as,list,types,for,field,node,field,node,get,fields,if,types,set,contains,field,get,type,get,name,return,true,for,method,node,method,node,get,methods,if,types,set,contains,method,get,return,type,get,name,return,true,return,false
AstUtils -> public static boolean hasAtLeastOneFieldOrMethod(ClassNode node, String... types);1517273683;Determine if a {@link ClassNode} has one or more fields of the specified types or_method returning one or more of the specified types. N.B. the type names are not_normally fully qualified._@param node the class to examine_@param types the types to look for_@return {@code true} if at least one of the types is found, otherwise {@code false};public static boolean hasAtLeastOneFieldOrMethod(ClassNode node, String... types) {_		Set<String> typesSet = new HashSet<>(Arrays.asList(types))__		for (FieldNode field : node.getFields()) {_			if (typesSet.contains(field.getType().getName())) {_				return true__			}_		}_		for (MethodNode method : node.getMethods()) {_			if (typesSet.contains(method.getReturnType().getName())) {_				return true__			}_		}_		return false__	};determine,if,a,link,class,node,has,one,or,more,fields,of,the,specified,types,or,method,returning,one,or,more,of,the,specified,types,n,b,the,type,names,are,not,normally,fully,qualified,param,node,the,class,to,examine,param,types,the,types,to,look,for,return,code,true,if,at,least,one,of,the,types,is,found,otherwise,code,false;public,static,boolean,has,at,least,one,field,or,method,class,node,node,string,types,set,string,types,set,new,hash,set,arrays,as,list,types,for,field,node,field,node,get,fields,if,types,set,contains,field,get,type,get,name,return,true,for,method,node,method,node,get,methods,if,types,set,contains,method,get,return,type,get,name,return,true,return,false
AstUtils -> public static boolean hasAtLeastOneFieldOrMethod(ClassNode node, String... types);1517290556;Determine if a {@link ClassNode} has one or more fields of the specified types or_method returning one or more of the specified types. N.B. the type names are not_normally fully qualified._@param node the class to examine_@param types the types to look for_@return {@code true} if at least one of the types is found, otherwise {@code false};public static boolean hasAtLeastOneFieldOrMethod(ClassNode node, String... types) {_		Set<String> typesSet = new HashSet<>(Arrays.asList(types))__		for (FieldNode field : node.getFields()) {_			if (typesSet.contains(field.getType().getName())) {_				return true__			}_		}_		for (MethodNode method : node.getMethods()) {_			if (typesSet.contains(method.getReturnType().getName())) {_				return true__			}_		}_		return false__	};determine,if,a,link,class,node,has,one,or,more,fields,of,the,specified,types,or,method,returning,one,or,more,of,the,specified,types,n,b,the,type,names,are,not,normally,fully,qualified,param,node,the,class,to,examine,param,types,the,types,to,look,for,return,code,true,if,at,least,one,of,the,types,is,found,otherwise,code,false;public,static,boolean,has,at,least,one,field,or,method,class,node,node,string,types,set,string,types,set,new,hash,set,arrays,as,list,types,for,field,node,field,node,get,fields,if,types,set,contains,field,get,type,get,name,return,true,for,method,node,method,node,get,methods,if,types,set,contains,method,get,return,type,get,name,return,true,return,false
AstUtils -> public static boolean hasAtLeastOneFieldOrMethod(ClassNode node, String... types);1519804936;Determine if a {@link ClassNode} has one or more fields of the specified types or_method returning one or more of the specified types. N.B. the type names are not_normally fully qualified._@param node the class to examine_@param types the types to look for_@return {@code true} if at least one of the types is found, otherwise {@code false};public static boolean hasAtLeastOneFieldOrMethod(ClassNode node, String... types) {_		Set<String> typesSet = new HashSet<>(Arrays.asList(types))__		for (FieldNode field : node.getFields()) {_			if (typesSet.contains(field.getType().getName())) {_				return true__			}_		}_		for (MethodNode method : node.getMethods()) {_			if (typesSet.contains(method.getReturnType().getName())) {_				return true__			}_		}_		return false__	};determine,if,a,link,class,node,has,one,or,more,fields,of,the,specified,types,or,method,returning,one,or,more,of,the,specified,types,n,b,the,type,names,are,not,normally,fully,qualified,param,node,the,class,to,examine,param,types,the,types,to,look,for,return,code,true,if,at,least,one,of,the,types,is,found,otherwise,code,false;public,static,boolean,has,at,least,one,field,or,method,class,node,node,string,types,set,string,types,set,new,hash,set,arrays,as,list,types,for,field,node,field,node,get,fields,if,types,set,contains,field,get,type,get,name,return,true,for,method,node,method,node,get,methods,if,types,set,contains,method,get,return,type,get,name,return,true,return,false
AstUtils -> public static boolean hasAtLeastOneAnnotation(ClassNode node, String... annotations);1507173536;Determine if a {@link ClassNode} has one or more of the specified annotations on_the class or any of its methods. N.B. the type names are not normally fully_qualified._@param node the class to examine_@param annotations the annotations to look for_@return {@code true} if at least one of the annotations is found, otherwise_{@code false};public static boolean hasAtLeastOneAnnotation(ClassNode node, String... annotations) {_		if (hasAtLeastOneAnnotation((AnnotatedNode) node, annotations)) {_			return true__		}_		for (MethodNode method : node.getMethods()) {_			if (hasAtLeastOneAnnotation(method, annotations)) {_				return true__			}_		}_		return false__	};determine,if,a,link,class,node,has,one,or,more,of,the,specified,annotations,on,the,class,or,any,of,its,methods,n,b,the,type,names,are,not,normally,fully,qualified,param,node,the,class,to,examine,param,annotations,the,annotations,to,look,for,return,code,true,if,at,least,one,of,the,annotations,is,found,otherwise,code,false;public,static,boolean,has,at,least,one,annotation,class,node,node,string,annotations,if,has,at,least,one,annotation,annotated,node,node,annotations,return,true,for,method,node,method,node,get,methods,if,has,at,least,one,annotation,method,annotations,return,true,return,false
AstUtils -> public static boolean hasAtLeastOneAnnotation(ClassNode node, String... annotations);1517273683;Determine if a {@link ClassNode} has one or more of the specified annotations on_the class or any of its methods. N.B. the type names are not normally fully_qualified._@param node the class to examine_@param annotations the annotations to look for_@return {@code true} if at least one of the annotations is found, otherwise_{@code false};public static boolean hasAtLeastOneAnnotation(ClassNode node, String... annotations) {_		if (hasAtLeastOneAnnotation((AnnotatedNode) node, annotations)) {_			return true__		}_		for (MethodNode method : node.getMethods()) {_			if (hasAtLeastOneAnnotation(method, annotations)) {_				return true__			}_		}_		return false__	};determine,if,a,link,class,node,has,one,or,more,of,the,specified,annotations,on,the,class,or,any,of,its,methods,n,b,the,type,names,are,not,normally,fully,qualified,param,node,the,class,to,examine,param,annotations,the,annotations,to,look,for,return,code,true,if,at,least,one,of,the,annotations,is,found,otherwise,code,false;public,static,boolean,has,at,least,one,annotation,class,node,node,string,annotations,if,has,at,least,one,annotation,annotated,node,node,annotations,return,true,for,method,node,method,node,get,methods,if,has,at,least,one,annotation,method,annotations,return,true,return,false
AstUtils -> public static boolean hasAtLeastOneAnnotation(ClassNode node, String... annotations);1517290556;Determine if a {@link ClassNode} has one or more of the specified annotations on_the class or any of its methods. N.B. the type names are not normally fully_qualified._@param node the class to examine_@param annotations the annotations to look for_@return {@code true} if at least one of the annotations is found, otherwise_{@code false};public static boolean hasAtLeastOneAnnotation(ClassNode node, String... annotations) {_		if (hasAtLeastOneAnnotation((AnnotatedNode) node, annotations)) {_			return true__		}_		for (MethodNode method : node.getMethods()) {_			if (hasAtLeastOneAnnotation(method, annotations)) {_				return true__			}_		}_		return false__	};determine,if,a,link,class,node,has,one,or,more,of,the,specified,annotations,on,the,class,or,any,of,its,methods,n,b,the,type,names,are,not,normally,fully,qualified,param,node,the,class,to,examine,param,annotations,the,annotations,to,look,for,return,code,true,if,at,least,one,of,the,annotations,is,found,otherwise,code,false;public,static,boolean,has,at,least,one,annotation,class,node,node,string,annotations,if,has,at,least,one,annotation,annotated,node,node,annotations,return,true,for,method,node,method,node,get,methods,if,has,at,least,one,annotation,method,annotations,return,true,return,false
AstUtils -> public static boolean hasAtLeastOneAnnotation(ClassNode node, String... annotations);1519804936;Determine if a {@link ClassNode} has one or more of the specified annotations on_the class or any of its methods. N.B. the type names are not normally fully_qualified._@param node the class to examine_@param annotations the annotations to look for_@return {@code true} if at least one of the annotations is found, otherwise_{@code false};public static boolean hasAtLeastOneAnnotation(ClassNode node, String... annotations) {_		if (hasAtLeastOneAnnotation((AnnotatedNode) node, annotations)) {_			return true__		}_		for (MethodNode method : node.getMethods()) {_			if (hasAtLeastOneAnnotation(method, annotations)) {_				return true__			}_		}_		return false__	};determine,if,a,link,class,node,has,one,or,more,of,the,specified,annotations,on,the,class,or,any,of,its,methods,n,b,the,type,names,are,not,normally,fully,qualified,param,node,the,class,to,examine,param,annotations,the,annotations,to,look,for,return,code,true,if,at,least,one,of,the,annotations,is,found,otherwise,code,false;public,static,boolean,has,at,least,one,annotation,class,node,node,string,annotations,if,has,at,least,one,annotation,annotated,node,node,annotations,return,true,for,method,node,method,node,get,methods,if,has,at,least,one,annotation,method,annotations,return,true,return,false
AstUtils -> public static ClosureExpression getClosure(BlockStatement block, String name, 			boolean remove);1507173536;Extract a top-level {@code name} closure from inside this block if there is one,_optionally removing it from the block at the same time._@param block a block statement (class definition)_@param name the name to look for_@param remove whether or not the extracted closure should be removed_@return a beans Closure if one can be found, null otherwise;public static ClosureExpression getClosure(BlockStatement block, String name,_			boolean remove) {_		for (ExpressionStatement statement : getExpressionStatements(block)) {_			Expression expression = statement.getExpression()__			if (expression instanceof MethodCallExpression) {_				ClosureExpression closure = getClosure(name,_						(MethodCallExpression) expression)__				if (closure != null) {_					if (remove) {_						block.getStatements().remove(statement)__					}_					return closure__				}_			}_		}_		return null__	};extract,a,top,level,code,name,closure,from,inside,this,block,if,there,is,one,optionally,removing,it,from,the,block,at,the,same,time,param,block,a,block,statement,class,definition,param,name,the,name,to,look,for,param,remove,whether,or,not,the,extracted,closure,should,be,removed,return,a,beans,closure,if,one,can,be,found,null,otherwise;public,static,closure,expression,get,closure,block,statement,block,string,name,boolean,remove,for,expression,statement,statement,get,expression,statements,block,expression,expression,statement,get,expression,if,expression,instanceof,method,call,expression,closure,expression,closure,get,closure,name,method,call,expression,expression,if,closure,null,if,remove,block,get,statements,remove,statement,return,closure,return,null
AstUtils -> public static ClosureExpression getClosure(BlockStatement block, String name, 			boolean remove);1517273683;Extract a top-level {@code name} closure from inside this block if there is one,_optionally removing it from the block at the same time._@param block a block statement (class definition)_@param name the name to look for_@param remove whether or not the extracted closure should be removed_@return a beans Closure if one can be found, null otherwise;public static ClosureExpression getClosure(BlockStatement block, String name,_			boolean remove) {_		for (ExpressionStatement statement : getExpressionStatements(block)) {_			Expression expression = statement.getExpression()__			if (expression instanceof MethodCallExpression) {_				ClosureExpression closure = getClosure(name,_						(MethodCallExpression) expression)__				if (closure != null) {_					if (remove) {_						block.getStatements().remove(statement)__					}_					return closure__				}_			}_		}_		return null__	};extract,a,top,level,code,name,closure,from,inside,this,block,if,there,is,one,optionally,removing,it,from,the,block,at,the,same,time,param,block,a,block,statement,class,definition,param,name,the,name,to,look,for,param,remove,whether,or,not,the,extracted,closure,should,be,removed,return,a,beans,closure,if,one,can,be,found,null,otherwise;public,static,closure,expression,get,closure,block,statement,block,string,name,boolean,remove,for,expression,statement,statement,get,expression,statements,block,expression,expression,statement,get,expression,if,expression,instanceof,method,call,expression,closure,expression,closure,get,closure,name,method,call,expression,expression,if,closure,null,if,remove,block,get,statements,remove,statement,return,closure,return,null
AstUtils -> public static ClosureExpression getClosure(BlockStatement block, String name, 			boolean remove);1517290556;Extract a top-level {@code name} closure from inside this block if there is one,_optionally removing it from the block at the same time._@param block a block statement (class definition)_@param name the name to look for_@param remove whether or not the extracted closure should be removed_@return a beans Closure if one can be found, null otherwise;public static ClosureExpression getClosure(BlockStatement block, String name,_			boolean remove) {_		for (ExpressionStatement statement : getExpressionStatements(block)) {_			Expression expression = statement.getExpression()__			if (expression instanceof MethodCallExpression) {_				ClosureExpression closure = getClosure(name,_						(MethodCallExpression) expression)__				if (closure != null) {_					if (remove) {_						block.getStatements().remove(statement)__					}_					return closure__				}_			}_		}_		return null__	};extract,a,top,level,code,name,closure,from,inside,this,block,if,there,is,one,optionally,removing,it,from,the,block,at,the,same,time,param,block,a,block,statement,class,definition,param,name,the,name,to,look,for,param,remove,whether,or,not,the,extracted,closure,should,be,removed,return,a,beans,closure,if,one,can,be,found,null,otherwise;public,static,closure,expression,get,closure,block,statement,block,string,name,boolean,remove,for,expression,statement,statement,get,expression,statements,block,expression,expression,statement,get,expression,if,expression,instanceof,method,call,expression,closure,expression,closure,get,closure,name,method,call,expression,expression,if,closure,null,if,remove,block,get,statements,remove,statement,return,closure,return,null
AstUtils -> public static ClosureExpression getClosure(BlockStatement block, String name, 			boolean remove);1519804936;Extract a top-level {@code name} closure from inside this block if there is one,_optionally removing it from the block at the same time._@param block a block statement (class definition)_@param name the name to look for_@param remove whether or not the extracted closure should be removed_@return a beans Closure if one can be found, null otherwise;public static ClosureExpression getClosure(BlockStatement block, String name,_			boolean remove) {_		for (ExpressionStatement statement : getExpressionStatements(block)) {_			Expression expression = statement.getExpression()__			if (expression instanceof MethodCallExpression) {_				ClosureExpression closure = getClosure(name,_						(MethodCallExpression) expression)__				if (closure != null) {_					if (remove) {_						block.getStatements().remove(statement)__					}_					return closure__				}_			}_		}_		return null__	};extract,a,top,level,code,name,closure,from,inside,this,block,if,there,is,one,optionally,removing,it,from,the,block,at,the,same,time,param,block,a,block,statement,class,definition,param,name,the,name,to,look,for,param,remove,whether,or,not,the,extracted,closure,should,be,removed,return,a,beans,closure,if,one,can,be,found,null,otherwise;public,static,closure,expression,get,closure,block,statement,block,string,name,boolean,remove,for,expression,statement,statement,get,expression,statements,block,expression,expression,statement,get,expression,if,expression,instanceof,method,call,expression,closure,expression,closure,get,closure,name,method,call,expression,expression,if,closure,null,if,remove,block,get,statements,remove,statement,return,closure,return,null
