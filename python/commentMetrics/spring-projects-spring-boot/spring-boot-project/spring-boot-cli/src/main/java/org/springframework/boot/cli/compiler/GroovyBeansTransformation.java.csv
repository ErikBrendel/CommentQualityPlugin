commented;modifiers;parameterAmount;loc;comment;code
false;public;2;13;;@Override public void visit(ASTNode[] nodes, SourceUnit source) {     for (ASTNode node : nodes) {         if (node instanceof ModuleNode) {             ModuleNode module = (ModuleNode) node.             for (ClassNode classNode : new ArrayList<>(module.getClasses())) {                 if (classNode.isScript()) {                     classNode.visitContents(new ClassVisitor(source, classNode)).                 }             }         }     } }
false;protected;0;4;;@Override protected SourceUnit getSourceUnit() {     return this.source. }
false;public;1;20;;@Override public void visitBlockStatement(BlockStatement block) {     if (block.isEmpty() || this.xformed) {         return.     }     ClosureExpression closure = beans(block).     if (closure != null) {         // Add a marker interface to the current script         this.classNode.addInterface(ClassHelper.make(SOURCE_INTERFACE)).         // Implement the interface by adding a public read-only property with the         // same name as the method in the interface (getBeans). Make it return the         // closure.         this.classNode.addProperty(new PropertyNode(BEANS, Modifier.PUBLIC | Modifier.FINAL, ClassHelper.CLOSURE_TYPE.getPlainNodeReference(), this.classNode, closure, null, null)).         // Only do this once per class         this.xformed = true.     } }
true;private;1;3;/**  * Extract a top-level <code>beans{}</code> closure from inside this block if  * there is one. Removes it from the block at the same time.  * @param block a block statement (class definition)  * @return a beans Closure if one can be found, null otherwise  */ ;/**  * Extract a top-level <code>beans{}</code> closure from inside this block if  * there is one. Removes it from the block at the same time.  * @param block a block statement (class definition)  * @return a beans Closure if one can be found, null otherwise  */ private ClosureExpression beans(BlockStatement block) {     return AstUtils.getClosure(block, BEANS, true). }
