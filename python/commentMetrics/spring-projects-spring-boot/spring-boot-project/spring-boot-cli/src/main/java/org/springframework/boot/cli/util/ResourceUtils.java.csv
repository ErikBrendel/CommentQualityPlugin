commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;13;/**  * Return URLs from a given source path. Source paths can be simple file locations  * (/some/file.java) or wildcard patterns (/some/**). Additionally the prefixes  * "file:", "classpath:" and "classpath*:" can be used for specific path types.  * @param path the source path  * @param classLoader the class loader or {@code null} to use the default  * @return a list of URLs  */ ;/**  * Return URLs from a given source path. Source paths can be simple file locations  * (/some/file.java) or wildcard patterns (/some/**). Additionally the prefixes  * "file:", "classpath:" and "classpath*:" can be used for specific path types.  * @param path the source path  * @param classLoader the class loader or {@code null} to use the default  * @return a list of URLs  */ public static List<String> getUrls(String path, ClassLoader classLoader) {     if (classLoader == null) {         classLoader = ClassUtils.getDefaultClassLoader().     }     path = StringUtils.cleanPath(path).     try {         return getUrlsFromWildcardPath(path, classLoader).     } catch (Exception ex) {         throw new IllegalArgumentException("Cannot create URL from path [" + path + "]", ex).     } }
false;private,static;2;16;;private static List<String> getUrlsFromWildcardPath(String path, ClassLoader classLoader) throws IOException {     if (path.contains(":")) {         return getUrlsFromPrefixedWildcardPath(path, classLoader).     }     Set<String> result = new LinkedHashSet<>().     try {         result.addAll(getUrls(FILE_URL_PREFIX + path, classLoader)).     } catch (IllegalArgumentException ex) {     // ignore     }     path = stripLeadingSlashes(path).     result.addAll(getUrls(ALL_CLASSPATH_URL_PREFIX + path, classLoader)).     return new ArrayList<>(result). }
false;private,static;2;17;;private static List<String> getUrlsFromPrefixedWildcardPath(String path, ClassLoader classLoader) throws IOException {     Resource[] resources = new PathMatchingResourcePatternResolver(new FileSearchResourceLoader(classLoader)).getResources(path).     List<String> result = new ArrayList<>().     for (Resource resource : resources) {         if (resource.exists()) {             if (resource.getURI().getScheme().equals("file") && resource.getFile().isDirectory()) {                 result.addAll(getChildFiles(resource)).                 continue.             }             result.add(absolutePath(resource)).         }     }     return result. }
false;private,static;1;11;;private static List<String> getChildFiles(Resource resource) throws IOException {     Resource[] children = new PathMatchingResourcePatternResolver().getResources(resource.getURL() + "/**").     List<String> childFiles = new ArrayList<>().     for (Resource child : children) {         if (!child.getFile().isDirectory()) {             childFiles.add(absolutePath(child)).         }     }     return childFiles. }
false;private,static;1;6;;private static String absolutePath(Resource resource) throws IOException {     if (!resource.getURI().getScheme().equals("file")) {         return resource.getURL().toExternalForm().     }     return resource.getFile().getAbsoluteFile().toURI().toString(). }
false;private,static;1;6;;private static String stripLeadingSlashes(String path) {     while (path.startsWith("/")) {         path = path.substring(1).     }     return path. }
false;public;1;23;;@Override public Resource getResource(String location) {     Assert.notNull(location, "Location must not be null").     if (location.startsWith(CLASSPATH_URL_PREFIX)) {         return new ClassPathResource(location.substring(CLASSPATH_URL_PREFIX.length()), getClassLoader()).     } else {         if (location.startsWith(FILE_URL_PREFIX)) {             return this.files.getResource(location).         }         try {             // Try to parse the location as a URL...             URL url = new URL(location).             return new UrlResource(url).         } catch (MalformedURLException ex) {             // No URL -> resolve as resource path.             return getResourceByPath(location).         }     } }
