# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceUtils -> public static List<String> getUrls(String path, ClassLoader classLoader);1507173536;Return URLs from a given source path. Source paths can be simple file locations_(/some/file.java) or wildcard patterns (/some/**). Additionally the prefixes_"file:", "classpath:" and "classpath*:" can be used for specific path types._@param path the source path_@param classLoader the class loader or {@code null} to use the default_@return a list of URLs;public static List<String> getUrls(String path, ClassLoader classLoader) {_		if (classLoader == null) {_			classLoader = ClassUtils.getDefaultClassLoader()__		}_		path = StringUtils.cleanPath(path)__		try {_			return getUrlsFromWildcardPath(path, classLoader)__		}_		catch (Exception ex) {_			throw new IllegalArgumentException(_					"Cannot create URL from path [" + path + "]", ex)__		}_	};return,urls,from,a,given,source,path,source,paths,can,be,simple,file,locations,some,file,java,or,wildcard,patterns,some,additionally,the,prefixes,file,classpath,and,classpath,can,be,used,for,specific,path,types,param,path,the,source,path,param,class,loader,the,class,loader,or,code,null,to,use,the,default,return,a,list,of,urls;public,static,list,string,get,urls,string,path,class,loader,class,loader,if,class,loader,null,class,loader,class,utils,get,default,class,loader,path,string,utils,clean,path,path,try,return,get,urls,from,wildcard,path,path,class,loader,catch,exception,ex,throw,new,illegal,argument,exception,cannot,create,url,from,path,path,ex
ResourceUtils -> public static List<String> getUrls(String path, ClassLoader classLoader);1519552808;Return URLs from a given source path. Source paths can be simple file locations_(/some/file.java) or wildcard patterns (/some/**). Additionally the prefixes_"file:", "classpath:" and "classpath*:" can be used for specific path types._@param path the source path_@param classLoader the class loader or {@code null} to use the default_@return a list of URLs;public static List<String> getUrls(String path, ClassLoader classLoader) {_		if (classLoader == null) {_			classLoader = ClassUtils.getDefaultClassLoader()__		}_		path = StringUtils.cleanPath(path)__		try {_			return getUrlsFromWildcardPath(path, classLoader)__		}_		catch (Exception ex) {_			throw new IllegalArgumentException(_					"Cannot create URL from path [" + path + "]", ex)__		}_	};return,urls,from,a,given,source,path,source,paths,can,be,simple,file,locations,some,file,java,or,wildcard,patterns,some,additionally,the,prefixes,file,classpath,and,classpath,can,be,used,for,specific,path,types,param,path,the,source,path,param,class,loader,the,class,loader,or,code,null,to,use,the,default,return,a,list,of,urls;public,static,list,string,get,urls,string,path,class,loader,class,loader,if,class,loader,null,class,loader,class,utils,get,default,class,loader,path,string,utils,clean,path,path,try,return,get,urls,from,wildcard,path,path,class,loader,catch,exception,ex,throw,new,illegal,argument,exception,cannot,create,url,from,path,path,ex
ResourceUtils -> public static List<String> getUrls(String path, ClassLoader classLoader);1519669562;Return URLs from a given source path. Source paths can be simple file locations_(/some/file.java) or wildcard patterns (/some/**). Additionally the prefixes_"file:", "classpath:" and "classpath*:" can be used for specific path types._@param path the source path_@param classLoader the class loader or {@code null} to use the default_@return a list of URLs;public static List<String> getUrls(String path, ClassLoader classLoader) {_		if (classLoader == null) {_			classLoader = ClassUtils.getDefaultClassLoader()__		}_		path = StringUtils.cleanPath(path)__		try {_			return getUrlsFromWildcardPath(path, classLoader)__		}_		catch (Exception ex) {_			throw new IllegalArgumentException(_					"Cannot create URL from path [" + path + "]", ex)__		}_	};return,urls,from,a,given,source,path,source,paths,can,be,simple,file,locations,some,file,java,or,wildcard,patterns,some,additionally,the,prefixes,file,classpath,and,classpath,can,be,used,for,specific,path,types,param,path,the,source,path,param,class,loader,the,class,loader,or,code,null,to,use,the,default,return,a,list,of,urls;public,static,list,string,get,urls,string,path,class,loader,class,loader,if,class,loader,null,class,loader,class,utils,get,default,class,loader,path,string,utils,clean,path,path,try,return,get,urls,from,wildcard,path,path,class,loader,catch,exception,ex,throw,new,illegal,argument,exception,cannot,create,url,from,path,path,ex
ResourceUtils -> public static List<String> getUrls(String path, ClassLoader classLoader);1519804936;Return URLs from a given source path. Source paths can be simple file locations_(/some/file.java) or wildcard patterns (/some/**). Additionally the prefixes_"file:", "classpath:" and "classpath*:" can be used for specific path types._@param path the source path_@param classLoader the class loader or {@code null} to use the default_@return a list of URLs;public static List<String> getUrls(String path, ClassLoader classLoader) {_		if (classLoader == null) {_			classLoader = ClassUtils.getDefaultClassLoader()__		}_		path = StringUtils.cleanPath(path)__		try {_			return getUrlsFromWildcardPath(path, classLoader)__		}_		catch (Exception ex) {_			throw new IllegalArgumentException(_					"Cannot create URL from path [" + path + "]", ex)__		}_	};return,urls,from,a,given,source,path,source,paths,can,be,simple,file,locations,some,file,java,or,wildcard,patterns,some,additionally,the,prefixes,file,classpath,and,classpath,can,be,used,for,specific,path,types,param,path,the,source,path,param,class,loader,the,class,loader,or,code,null,to,use,the,default,return,a,list,of,urls;public,static,list,string,get,urls,string,path,class,loader,class,loader,if,class,loader,null,class,loader,class,utils,get,default,class,loader,path,string,utils,clean,path,path,try,return,get,urls,from,wildcard,path,path,class,loader,catch,exception,ex,throw,new,illegal,argument,exception,cannot,create,url,from,path,path,ex
