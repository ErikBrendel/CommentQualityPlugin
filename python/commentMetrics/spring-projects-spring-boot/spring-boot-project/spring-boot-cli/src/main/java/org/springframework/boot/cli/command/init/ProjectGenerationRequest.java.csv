commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The URL of the service to use.  * @return the service URL  * @see #DEFAULT_SERVICE_URL  */ ;/**  * The URL of the service to use.  * @return the service URL  * @see #DEFAULT_SERVICE_URL  */ public String getServiceUrl() {     return this.serviceUrl. }
false;public;1;3;;public void setServiceUrl(String serviceUrl) {     this.serviceUrl = serviceUrl. }
true;public;0;3;/**  * The location of the generated project.  * @return the location of the generated project  */ ;/**  * The location of the generated project.  * @return the location of the generated project  */ public String getOutput() {     return this.output. }
false;public;1;9;;public void setOutput(String output) {     if (output != null && output.endsWith("/")) {         this.output = output.substring(0, output.length() - 1).         this.extract = true.     } else {         this.output = output.     } }
true;public;0;3;/**  * Whether or not the project archive should be extracted in the output location. If  * the {@link #getOutput() output} ends with "/", the project is extracted  * automatically.  * @return {@code true} if the archive should be extracted, otherwise {@code false}  */ ;/**  * Whether or not the project archive should be extracted in the output location. If  * the {@link #getOutput() output} ends with "/", the project is extracted  * automatically.  * @return {@code true} if the archive should be extracted, otherwise {@code false}  */ public boolean isExtract() {     return this.extract. }
false;public;1;3;;public void setExtract(boolean extract) {     this.extract = extract. }
true;public;0;3;/**  * The groupId to use or {@code null} if it should not be customized.  * @return the groupId or {@code null}  */ ;/**  * The groupId to use or {@code null} if it should not be customized.  * @return the groupId or {@code null}  */ public String getGroupId() {     return this.groupId. }
false;public;1;3;;public void setGroupId(String groupId) {     this.groupId = groupId. }
true;public;0;3;/**  * The artifactId to use or {@code null} if it should not be customized.  * @return the artifactId or {@code null}  */ ;/**  * The artifactId to use or {@code null} if it should not be customized.  * @return the artifactId or {@code null}  */ public String getArtifactId() {     return this.artifactId. }
false;public;1;3;;public void setArtifactId(String artifactId) {     this.artifactId = artifactId. }
true;public;0;3;/**  * The artifact version to use or {@code null} if it should not be customized.  * @return the artifact version or {@code null}  */ ;/**  * The artifact version to use or {@code null} if it should not be customized.  * @return the artifact version or {@code null}  */ public String getVersion() {     return this.version. }
false;public;1;3;;public void setVersion(String version) {     this.version = version. }
true;public;0;3;/**  * The name to use or {@code null} if it should not be customized.  * @return the name or {@code null}  */ ;/**  * The name to use or {@code null} if it should not be customized.  * @return the name or {@code null}  */ public String getName() {     return this.name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
true;public;0;3;/**  * The description to use or {@code null} if it should not be customized.  * @return the description or {@code null}  */ ;/**  * The description to use or {@code null} if it should not be customized.  * @return the description or {@code null}  */ public String getDescription() {     return this.description. }
false;public;1;3;;public void setDescription(String description) {     this.description = description. }
true;public;0;3;/**  * Return the package name or {@code null} if it should not be customized.  * @return the package name or {@code null}  */ ;/**  * Return the package name or {@code null} if it should not be customized.  * @return the package name or {@code null}  */ public String getPackageName() {     return this.packageName. }
false;public;1;3;;public void setPackageName(String packageName) {     this.packageName = packageName. }
true;public;0;3;/**  * The type of project to generate. Should match one of the advertized type that the  * service supports. If not set, the default is retrieved from the service metadata.  * @return the project type  */ ;/**  * The type of project to generate. Should match one of the advertized type that the  * service supports. If not set, the default is retrieved from the service metadata.  * @return the project type  */ public String getType() {     return this.type. }
false;public;1;3;;public void setType(String type) {     this.type = type. }
true;public;0;3;/**  * The packaging type or {@code null} if it should not be customized.  * @return the packaging type or {@code null}  */ ;/**  * The packaging type or {@code null} if it should not be customized.  * @return the packaging type or {@code null}  */ public String getPackaging() {     return this.packaging. }
false;public;1;3;;public void setPackaging(String packaging) {     this.packaging = packaging. }
true;public;0;3;/**  * The build type to use. Ignored if a type is set. Can be used alongside the  * {@link #getFormat() format} to identify the type to use.  * @return the build type  */ ;/**  * The build type to use. Ignored if a type is set. Can be used alongside the  * {@link #getFormat() format} to identify the type to use.  * @return the build type  */ public String getBuild() {     return this.build. }
false;public;1;3;;public void setBuild(String build) {     this.build = build. }
true;public;0;3;/**  * The project format to use. Ignored if a type is set. Can be used alongside the  * {@link #getBuild() build} to identify the type to use.  * @return the project format  */ ;/**  * The project format to use. Ignored if a type is set. Can be used alongside the  * {@link #getBuild() build} to identify the type to use.  * @return the project format  */ public String getFormat() {     return this.format. }
false;public;1;3;;public void setFormat(String format) {     this.format = format. }
true;public;0;3;/**  * Whether or not the type should be detected based on the build and format value.  * @return {@code true} if type detection will be performed, otherwise {@code false}  */ ;/**  * Whether or not the type should be detected based on the build and format value.  * @return {@code true} if type detection will be performed, otherwise {@code false}  */ public boolean isDetectType() {     return this.detectType. }
false;public;1;3;;public void setDetectType(boolean detectType) {     this.detectType = detectType. }
true;public;0;3;/**  * The Java version to use or {@code null} if it should not be customized.  * @return the Java version or {@code null}  */ ;/**  * The Java version to use or {@code null} if it should not be customized.  * @return the Java version or {@code null}  */ public String getJavaVersion() {     return this.javaVersion. }
false;public;1;3;;public void setJavaVersion(String javaVersion) {     this.javaVersion = javaVersion. }
true;public;0;3;/**  * The programming language to use or {@code null} if it should not be customized.  * @return the programming language or {@code null}  */ ;/**  * The programming language to use or {@code null} if it should not be customized.  * @return the programming language or {@code null}  */ public String getLanguage() {     return this.language. }
false;public;1;3;;public void setLanguage(String language) {     this.language = language. }
true;public;0;3;/**  * The Spring Boot version to use or {@code null} if it should not be customized.  * @return the Spring Boot version or {@code null}  */ ;/**  * The Spring Boot version to use or {@code null} if it should not be customized.  * @return the Spring Boot version or {@code null}  */ public String getBootVersion() {     return this.bootVersion. }
false;public;1;3;;public void setBootVersion(String bootVersion) {     this.bootVersion = bootVersion. }
true;public;0;3;/**  * The identifiers of the dependencies to include in the project.  * @return the dependency identifiers  */ ;/**  * The identifiers of the dependencies to include in the project.  * @return the dependency identifiers  */ public List<String> getDependencies() {     return this.dependencies. }
true;;1;60;/**  * Generates the URI to use to generate a project represented by this request.  * @param metadata the metadata that describes the service  * @return the project generation URI  */ ;/**  * Generates the URI to use to generate a project represented by this request.  * @param metadata the metadata that describes the service  * @return the project generation URI  */ URI generateUrl(InitializrServiceMetadata metadata) {     try {         URIBuilder builder = new URIBuilder(this.serviceUrl).         StringBuilder sb = new StringBuilder().         if (builder.getPath() != null) {             sb.append(builder.getPath()).         }         ProjectType projectType = determineProjectType(metadata).         this.type = projectType.getId().         sb.append(projectType.getAction()).         builder.setPath(sb.toString()).         if (!this.dependencies.isEmpty()) {             builder.setParameter("dependencies", StringUtils.collectionToCommaDelimitedString(this.dependencies)).         }         if (this.groupId != null) {             builder.setParameter("groupId", this.groupId).         }         String resolvedArtifactId = resolveArtifactId().         if (resolvedArtifactId != null) {             builder.setParameter("artifactId", resolvedArtifactId).         }         if (this.version != null) {             builder.setParameter("version", this.version).         }         if (this.name != null) {             builder.setParameter("name", this.name).         }         if (this.description != null) {             builder.setParameter("description", this.description).         }         if (this.packageName != null) {             builder.setParameter("packageName", this.packageName).         }         if (this.type != null) {             builder.setParameter("type", projectType.getId()).         }         if (this.packaging != null) {             builder.setParameter("packaging", this.packaging).         }         if (this.javaVersion != null) {             builder.setParameter("javaVersion", this.javaVersion).         }         if (this.language != null) {             builder.setParameter("language", this.language).         }         if (this.bootVersion != null) {             builder.setParameter("bootVersion", this.bootVersion).         }         return builder.build().     } catch (URISyntaxException ex) {         throw new ReportableException("Invalid service URL (" + ex.getMessage() + ")").     } }
false;protected;1;41;;protected ProjectType determineProjectType(InitializrServiceMetadata metadata) {     if (this.type != null) {         ProjectType result = metadata.getProjectTypes().get(this.type).         if (result == null) {             throw new ReportableException(("No project type with id '" + this.type + "' - check the service capabilities (--list)")).         }         return result.     } else if (isDetectType()) {         Map<String, ProjectType> types = new HashMap<>(metadata.getProjectTypes()).         if (this.build != null) {             filter(types, "build", this.build).         }         if (this.format != null) {             filter(types, "format", this.format).         }         if (types.size() == 1) {             return types.values().iterator().next().         } else if (types.isEmpty()) {             throw new ReportableException("No type found with build '" + this.build + "' and format '" + this.format + "' check the service capabilities (--list)").         } else {             throw new ReportableException("Multiple types found with build '" + this.build + "' and format '" + this.format + "' use --type with a more specific value " + types.keySet()).         }     } else {         ProjectType defaultType = metadata.getDefaultType().         if (defaultType == null) {             throw new ReportableException(("No project type is set and no default is defined. " + "Check the service capabilities (--list)")).         }         return defaultType.     } }
true;protected;0;10;/**  * Resolve the artifactId to use or {@code null} if it should not be customized.  * @return the artifactId  */ ;/**  * Resolve the artifactId to use or {@code null} if it should not be customized.  * @return the artifactId  */ protected String resolveArtifactId() {     if (this.artifactId != null) {         return this.artifactId.     }     if (this.output != null) {         int i = this.output.lastIndexOf('.').         return (i != -1) ? this.output.substring(0, i) : this.output.     }     return null. }
false;private,static;3;5;;private static void filter(Map<String, ProjectType> projects, String tag, String tagValue) {     projects.entrySet().removeIf((entry) -> !tagValue.equals(entry.getValue().getTags().get(tag))). }
