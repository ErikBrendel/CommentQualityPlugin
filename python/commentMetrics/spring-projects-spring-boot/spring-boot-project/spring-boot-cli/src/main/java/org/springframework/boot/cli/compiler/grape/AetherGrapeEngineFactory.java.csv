commented;modifiers;parameterAmount;loc;comment;code
false;public,static;4;18;;public static AetherGrapeEngine create(GroovyClassLoader classLoader, List<RepositoryConfiguration> repositoryConfigurations, DependencyResolutionContext dependencyResolutionContext, boolean quiet) {     RepositorySystem repositorySystem = createServiceLocator().getService(RepositorySystem.class).     DefaultRepositorySystemSession repositorySystemSession = MavenRepositorySystemUtils.newSession().     ServiceLoader<RepositorySystemSessionAutoConfiguration> autoConfigurations = ServiceLoader.load(RepositorySystemSessionAutoConfiguration.class).     for (RepositorySystemSessionAutoConfiguration autoConfiguration : autoConfigurations) {         autoConfiguration.apply(repositorySystemSession, repositorySystem).     }     new DefaultRepositorySystemSessionAutoConfiguration().apply(repositorySystemSession, repositorySystem).     return new AetherGrapeEngine(classLoader, repositorySystem, repositorySystemSession, createRepositories(repositoryConfigurations), dependencyResolutionContext, quiet). }
false;private,static;0;9;;private static ServiceLocator createServiceLocator() {     DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator().     locator.addService(RepositorySystem.class, DefaultRepositorySystem.class).     locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class).     locator.addService(TransporterFactory.class, HttpTransporterFactory.class).     locator.addService(TransporterFactory.class, FileTransporterFactory.class).     return locator. }
false;private,static;1;17;;private static List<RemoteRepository> createRepositories(List<RepositoryConfiguration> repositoryConfigurations) {     List<RemoteRepository> repositories = new ArrayList<>(repositoryConfigurations.size()).     for (RepositoryConfiguration repositoryConfiguration : repositoryConfigurations) {         RemoteRepository.Builder builder = new RemoteRepository.Builder(repositoryConfiguration.getName(), "default", repositoryConfiguration.getUri().toASCIIString()).         if (!repositoryConfiguration.getSnapshotsEnabled()) {             builder.setSnapshotPolicy(new RepositoryPolicy(false, RepositoryPolicy.UPDATE_POLICY_NEVER, RepositoryPolicy.CHECKSUM_POLICY_IGNORE)).         }         repositories.add(builder.build()).     }     return repositories. }
