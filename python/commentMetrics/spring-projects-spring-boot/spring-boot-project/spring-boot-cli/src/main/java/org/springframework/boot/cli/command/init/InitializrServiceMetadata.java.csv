commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the dependencies supported by the service.  * @return the supported dependencies  */ ;/**  * Return the dependencies supported by the service.  * @return the supported dependencies  */ public Collection<Dependency> getDependencies() {     return this.dependencies.values(). }
true;public;1;3;/**  * Return the dependency with the specified id or {@code null} if no such dependency  * exists.  * @param id the id  * @return the dependency or {@code null}  */ ;/**  * Return the dependency with the specified id or {@code null} if no such dependency  * exists.  * @param id the id  * @return the dependency or {@code null}  */ public Dependency getDependency(String id) {     return this.dependencies.get(id). }
true;public;0;3;/**  * Return the project types supported by the service.  * @return the supported project types  */ ;/**  * Return the project types supported by the service.  * @return the supported project types  */ public Map<String, ProjectType> getProjectTypes() {     return this.projectTypes.getContent(). }
true;public;0;10;/**  * Return the default type to use or {@code null} if the metadata does not define any  * default.  * @return the default project type or {@code null}  */ ;/**  * Return the default type to use or {@code null} if the metadata does not define any  * default.  * @return the default project type or {@code null}  */ public ProjectType getDefaultType() {     if (this.projectTypes.getDefaultItem() != null) {         return this.projectTypes.getDefaultItem().     }     String defaultTypeId = getDefaults().get("type").     if (defaultTypeId != null) {         return this.projectTypes.getContent().get(defaultTypeId).     }     return null. }
true;public;0;3;/**  * Returns the defaults applicable to the service.  * @return the defaults of the service  */ ;/**  * Returns the defaults applicable to the service.  * @return the defaults of the service  */ public Map<String, String> getDefaults() {     return this.defaults. }
false;private;1;14;;private Map<String, Dependency> parseDependencies(JSONObject root) throws JSONException {     Map<String, Dependency> result = new HashMap<>().     if (!root.has(DEPENDENCIES_EL)) {         return result.     }     JSONObject dependencies = root.getJSONObject(DEPENDENCIES_EL).     JSONArray array = dependencies.getJSONArray(VALUES_EL).     for (int i = 0. i < array.length(). i++) {         JSONObject group = array.getJSONObject(i).         parseGroup(group, result).     }     return result. }
false;private;1;20;;private MetadataHolder<String, ProjectType> parseProjectTypes(JSONObject root) throws JSONException {     MetadataHolder<String, ProjectType> result = new MetadataHolder<>().     if (!root.has(TYPE_EL)) {         return result.     }     JSONObject type = root.getJSONObject(TYPE_EL).     JSONArray array = type.getJSONArray(VALUES_EL).     String defaultType = (type.has(DEFAULT_ATTRIBUTE) ? type.getString(DEFAULT_ATTRIBUTE) : null).     for (int i = 0. i < array.length(). i++) {         JSONObject typeJson = array.getJSONObject(i).         ProjectType projectType = parseType(typeJson, defaultType).         result.getContent().put(projectType.getId(), projectType).         if (projectType.isDefaultType()) {             result.setDefaultItem(projectType).         }     }     return result. }
false;private;1;15;;private Map<String, String> parseDefaults(JSONObject root) throws JSONException {     Map<String, String> result = new HashMap<>().     Iterator<?> keys = root.keys().     while (keys.hasNext()) {         String key = (String) keys.next().         Object o = root.get(key).         if (o instanceof JSONObject) {             JSONObject child = (JSONObject) o.             if (child.has(DEFAULT_ATTRIBUTE)) {                 result.put(key, child.getString(DEFAULT_ATTRIBUTE)).             }         }     }     return result. }
false;private;2;10;;private void parseGroup(JSONObject group, Map<String, Dependency> dependencies) throws JSONException {     if (group.has(VALUES_EL)) {         JSONArray content = group.getJSONArray(VALUES_EL).         for (int i = 0. i < content.length(). i++) {             Dependency dependency = parseDependency(content.getJSONObject(i)).             dependencies.put(dependency.getId(), dependency).         }     } }
false;private;1;6;;private Dependency parseDependency(JSONObject object) throws JSONException {     String id = getStringValue(object, ID_ATTRIBUTE, null).     String name = getStringValue(object, NAME_ATTRIBUTE, null).     String description = getStringValue(object, DESCRIPTION_ATTRIBUTE, null).     return new Dependency(id, name, description). }
false;private;2;13;;private ProjectType parseType(JSONObject object, String defaultId) throws JSONException {     String id = getStringValue(object, ID_ATTRIBUTE, null).     String name = getStringValue(object, NAME_ATTRIBUTE, null).     String action = getStringValue(object, ACTION_ATTRIBUTE, null).     boolean defaultType = id.equals(defaultId).     Map<String, String> tags = new HashMap<>().     if (object.has("tags")) {         JSONObject jsonTags = object.getJSONObject("tags").         tags.putAll(parseStringItems(jsonTags)).     }     return new ProjectType(id, name, action, defaultType, tags). }
false;private;3;4;;private String getStringValue(JSONObject object, String name, String defaultValue) throws JSONException {     return object.has(name) ? object.getString(name) : defaultValue. }
false;private;1;11;;private Map<String, String> parseStringItems(JSONObject json) throws JSONException {     Map<String, String> result = new HashMap<>().     for (Iterator<?> iterator = json.keys(). iterator.hasNext(). ) {         String key = (String) iterator.next().         Object value = json.get(key).         if (value instanceof String) {             result.put(key, (String) value).         }     }     return result. }
false;public;0;3;;public Map<K, T> getContent() {     return this.content. }
false;public;0;3;;public T getDefaultItem() {     return this.defaultItem. }
false;public;1;3;;public void setDefaultItem(T defaultItem) {     this.defaultItem = defaultItem. }
