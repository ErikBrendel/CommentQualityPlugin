commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;@Override protected void processAnnotationNodes(List<AnnotationNode> annotationNodes) {     for (AnnotationNode annotationNode : annotationNodes) {         transformGrabAnnotation(annotationNode).     } }
false;private;1;7;;private void transformGrabAnnotation(AnnotationNode grabAnnotation) {     grabAnnotation.setMember("initClass", new ConstantExpression(false)).     String value = getValue(grabAnnotation).     if (value != null && !isConvenienceForm(value)) {         applyGroupAndVersion(grabAnnotation, value).     } }
false;private;1;8;;private String getValue(AnnotationNode annotation) {     Expression expression = annotation.getMember("value").     if (expression instanceof ConstantExpression) {         Object value = ((ConstantExpression) expression).getValue().         return (value instanceof String) ? (String) value : null.     }     return null. }
false;private;1;3;;private boolean isConvenienceForm(String value) {     return value.contains(":") || value.contains("#"). }
false;private;2;17;;private void applyGroupAndVersion(AnnotationNode annotation, String module) {     if (module != null) {         setMember(annotation, "module", module).     } else {         Expression expression = annotation.getMembers().get("module").         module = (String) ((ConstantExpression) expression).getValue().     }     if (annotation.getMember("group") == null) {         setMember(annotation, "group", this.resolutionContext.getArtifactCoordinatesResolver().getGroupId(module)).     }     if (annotation.getMember("version") == null) {         setMember(annotation, "version", this.resolutionContext.getArtifactCoordinatesResolver().getVersion(module)).     } }
false;private;3;4;;private void setMember(AnnotationNode annotation, String name, String value) {     ConstantExpression expression = new ConstantExpression(value).     annotation.setMember(name, expression). }
