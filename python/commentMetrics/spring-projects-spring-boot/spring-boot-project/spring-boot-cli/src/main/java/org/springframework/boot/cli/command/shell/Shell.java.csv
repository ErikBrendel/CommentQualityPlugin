commented;modifiers;parameterAmount;loc;comment;code
false;private;0;9;;private ShellCommandRunner createCommandRunner() {     ShellCommandRunner runner = new ShellCommandRunner().     runner.addCommand(new HelpCommand(runner)).     runner.addCommands(getCommands()).     runner.addAliases("exit", "quit").     runner.addAliases("help", "?").     runner.addAliases("clear", "cls").     return runner. }
false;private;0;14;;private Iterable<Command> getCommands() {     List<Command> commands = new ArrayList<>().     ServiceLoader<CommandFactory> factories = ServiceLoader.load(CommandFactory.class, getClass().getClassLoader()).     for (CommandFactory factory : factories) {         for (Command command : factory.getCommands()) {             commands.add(convertToForkCommand(command)).         }     }     commands.add(new PromptCommand(this.prompts)).     commands.add(new ClearCommand(this.consoleReader)).     commands.add(new ExitCommand()).     return commands. }
false;private;1;8;;private Command convertToForkCommand(Command command) {     for (Class<?> nonForked : NON_FORKED_COMMANDS) {         if (nonForked.isInstance(command)) {             return command.         }     }     return new ForkProcessCommand(command). }
false;private;0;8;;private void initializeConsoleReader() {     this.consoleReader.setHistoryEnabled(true).     this.consoleReader.setBellEnabled(false).     this.consoleReader.setExpandEvents(false).     this.consoleReader.addCompleter(new CommandCompleter(this.consoleReader, this.argumentDelimiter, this.commandRunner)).     this.consoleReader.setCompletionHandler(new CandidateListCompletionHandler()). }
false;private;0;3;;private void attachSignalHandler() {     SignalUtils.attachSignalHandler(this::handleSigInt). }
true;public;0;11;/**  * Run the shell until the user exists.  * @throws Exception on error  */ ;/**  * Run the shell until the user exists.  * @throws Exception on error  */ public void run() throws Exception {     printBanner().     try {         runInputLoop().     } catch (Exception ex) {         if (!(ex instanceof ShellExitException)) {             throw ex.         }     } }
false;private;0;7;;private void printBanner() {     String version = getClass().getPackage().getImplementationVersion().     version = (version != null) ? " (v" + version + ")" : "".     System.out.println(ansi("Spring Boot", Code.BOLD).append(version, Code.FAINT)).     System.out.println(ansi("Hit TAB to complete. Type 'help' and hit " + "RETURN for help, and 'exit' to quit.")). }
false;private;0;13;;private void runInputLoop() throws Exception {     String line.     while ((line = this.consoleReader.readLine(getPrompt())) != null) {         while (line.endsWith("\\")) {             line = line.substring(0, line.length() - 1).             line += this.consoleReader.readLine("> ").         }         if (StringUtils.hasLength(line)) {             String[] args = this.argumentDelimiter.parseArguments(line).             this.commandRunner.runAndHandleErrors(args).         }     } }
false;private;0;4;;private String getPrompt() {     String prompt = this.prompts.getPrompt().     return ansi(prompt, Code.FG_BLUE).toString(). }
false;private;2;3;;private AnsiString ansi(String text, Code... codes) {     return new AnsiString(this.consoleReader.getTerminal()).append(text, codes). }
true;protected;0;7;/**  * Final handle an interrupt signal (CTRL-C).  */ ;/**  * Final handle an interrupt signal (CTRL-C).  */ protected void handleSigInt() {     if (this.commandRunner.handleSigInt()) {         return.     }     System.out.println(String.format("%nThanks for using Spring Boot")).     System.exit(1). }
false;public;2;5;;public void addAliases(String command, String... aliases) {     for (String alias : aliases) {         this.aliases.put(alias, command).     } }
false;public;1;10;;@Override public Command findCommand(String name) {     if (name.startsWith("!")) {         return new RunProcessCommand(name.substring(1)).     }     if (this.aliases.containsKey(name)) {         name = this.aliases.get(name).     }     return super.findCommand(name). }
false;protected;1;4;;@Override protected void beforeRun(Command command) {     this.lastCommand = command. }
false;protected;1;3;;@Override protected void afterRun(Command command) { }
false;public;0;7;;public boolean handleSigInt() {     Command command = this.lastCommand.     if (command != null && command instanceof RunProcessCommand) {         return ((RunProcessCommand) command).handleSigInt().     }     return false. }
