commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public MavenSettings readSettings() {     Settings settings = loadSettings().     SettingsDecryptionResult decrypted = decryptSettings(settings).     if (!decrypted.getProblems().isEmpty()) {         Log.error("Maven settings decryption failed. Some Maven repositories may be inaccessible").     // Continue - the encrypted credentials may not be used     }     return new MavenSettings(settings, decrypted). }
false;private;0;14;;private Settings loadSettings() {     File settingsFile = new File(this.homeDir, ".m2/settings.xml").     SettingsBuildingRequest request = new DefaultSettingsBuildingRequest().     request.setUserSettingsFile(settingsFile).     request.setSystemProperties(System.getProperties()).     try {         return new DefaultSettingsBuilderFactory().newInstance().build(request).getEffectiveSettings().     } catch (SettingsBuildingException ex) {         throw new IllegalStateException("Failed to build settings from " + settingsFile, ex).     } }
false;private;1;6;;private SettingsDecryptionResult decryptSettings(Settings settings) {     DefaultSettingsDecryptionRequest request = new DefaultSettingsDecryptionRequest(settings).     return createSettingsDecrypter().decrypt(request). }
false;private;0;6;;private SettingsDecrypter createSettingsDecrypter() {     SettingsDecrypter settingsDecrypter = new DefaultSettingsDecrypter().     setField(DefaultSettingsDecrypter.class, "securityDispatcher", settingsDecrypter, new SpringBootSecDispatcher()).     return settingsDecrypter. }
false;private;4;12;;private void setField(Class<?> sourceClass, String fieldName, Object target, Object value) {     try {         Field field = sourceClass.getDeclaredField(fieldName).         field.setAccessible(true).         field.set(target, value).     } catch (Exception ex) {         throw new IllegalStateException("Failed to set field '" + fieldName + "' on '" + target + "'", ex).     } }
