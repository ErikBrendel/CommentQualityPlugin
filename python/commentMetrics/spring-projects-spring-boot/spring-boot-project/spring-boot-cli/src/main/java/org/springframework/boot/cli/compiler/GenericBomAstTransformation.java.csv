commented;modifiers;parameterAmount;loc;comment;code
false;public;2;8;;@Override public void visit(ASTNode[] nodes, SourceUnit source) {     for (ASTNode astNode : nodes) {         if (astNode instanceof ModuleNode) {             visitModule((ModuleNode) astNode, getBomModule()).         }     } }
true;protected,abstract;0;1;/**  * The bom to be added to dependency management in compact form:  * {@code "<groupId>:<artifactId>:<version>"} (like in a {@code @Grab}).  * @return the maven co-ordinates of the BOM to add  */ ;/**  * The bom to be added to dependency management in compact form:  * {@code "<groupId>:<artifactId>:<version>"} (like in a {@code @Grab}).  * @return the maven co-ordinates of the BOM to add  */ protected abstract String getBomModule().
false;private;2;3;;private void visitModule(ModuleNode node, String module) {     addDependencyManagementBom(node, module). }
false;private;2;10;;private void addDependencyManagementBom(ModuleNode node, String module) {     AnnotatedNode annotated = getAnnotatedNode(node).     if (annotated != null) {         AnnotationNode bom = getAnnotation(annotated).         List<Expression> expressions = new ArrayList<>(getConstantExpressions(bom.getMember("value"))).         expressions.add(new ConstantExpression(module)).         bom.setMember("value", new ListExpression(expressions)).     } }
false;private;1;9;;private AnnotationNode getAnnotation(AnnotatedNode annotated) {     List<AnnotationNode> annotations = annotated.getAnnotations(BOM).     if (!annotations.isEmpty()) {         return annotations.get(0).     }     AnnotationNode annotation = new AnnotationNode(BOM).     annotated.addAnnotation(annotation).     return annotation. }
false;private;1;10;;private AnnotatedNode getAnnotatedNode(ModuleNode node) {     PackageNode packageNode = node.getPackage().     if (packageNode != null && !packageNode.getAnnotations(BOM).isEmpty()) {         return packageNode.     }     if (!node.getClasses().isEmpty()) {         return node.getClasses().get(0).     }     return packageNode. }
false;private;1;10;;private List<ConstantExpression> getConstantExpressions(Expression valueExpression) {     if (valueExpression instanceof ListExpression) {         return getConstantExpressions((ListExpression) valueExpression).     }     if (valueExpression instanceof ConstantExpression && ((ConstantExpression) valueExpression).getValue() instanceof String) {         return Arrays.asList((ConstantExpression) valueExpression).     }     return Collections.emptyList(). }
false;private;1;11;;private List<ConstantExpression> getConstantExpressions(ListExpression valueExpression) {     List<ConstantExpression> expressions = new ArrayList<>().     for (Expression expression : valueExpression.getExpressions()) {         if (expression instanceof ConstantExpression && ((ConstantExpression) expression).getValue() instanceof String) {             expressions.add((ConstantExpression) expression).         }     }     return expressions. }
