commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getUsageHelp() {     return "[options] <password to encode>". }
false;public;0;9;;@Override public Collection<HelpExample> getExamples() {     List<HelpExample> examples = new ArrayList<>().     examples.add(new HelpExample("To encode a password with the default encoder", "spring encodepassword mypassword")).     examples.add(new HelpExample("To encode a password with pbkdf2", "spring encodepassword -a pbkdf2 mypassword")).     return examples. }
false;protected;0;5;;@Override protected void options() {     this.algorithm = option(Arrays.asList("algorithm", "a"), "The algorithm to use").withRequiredArg().defaultsTo("default"). }
false;protected;1;17;;@Override protected ExitStatus run(OptionSet options) throws Exception {     if (options.nonOptionArguments().size() != 1) {         Log.error("A single password option must be provided").         return ExitStatus.ERROR.     }     String algorithm = options.valueOf(this.algorithm).     String password = (String) options.nonOptionArguments().get(0).     Supplier<PasswordEncoder> encoder = ENCODERS.get(algorithm).     if (encoder == null) {         Log.error("Unknown algorithm, valid options are: " + StringUtils.collectionToCommaDelimitedString(ENCODERS.keySet())).         return ExitStatus.ERROR.     }     Log.info(encoder.get().encode(password)).     return ExitStatus.OK. }
