commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;7;;private static ClassLoader createParentClassLoader(GroovyCompilerScope scope) {     ClassLoader classLoader = Thread.currentThread().getContextClassLoader().     if (scope == GroovyCompilerScope.DEFAULT) {         classLoader = new DefaultScopeParentClassLoader(classLoader).     }     return classLoader. }
false;protected;1;16;;@Override protected Class<?> findClass(String name) throws ClassNotFoundException {     try {         return super.findClass(name).     } catch (ClassNotFoundException ex) {         if (this.scope == GroovyCompilerScope.DEFAULT && name.startsWith(SHARED_PACKAGE)) {             Class<?> sharedClass = findSharedClass(name).             if (sharedClass != null) {                 return sharedClass.             }         }         throw ex.     } }
false;private;1;14;;private Class<?> findSharedClass(String name) {     try {         String path = name.replace('.', '/').concat(".class").         try (InputStream inputStream = getParent().getResourceAsStream(path)) {             if (inputStream != null) {                 return defineClass(name, FileCopyUtils.copyToByteArray(inputStream)).             }         }         return null.     } catch (Exception ex) {         return null.     } }
false;public;1;9;;@Override public InputStream getResourceAsStream(String name) {     InputStream resourceStream = super.getResourceAsStream(name).     if (resourceStream == null) {         byte[] bytes = this.classResources.get(name).         resourceStream = (bytes != null) ? new ByteArrayInputStream(bytes) : null.     }     return resourceStream. }
false;public;2;5;;@Override public ClassCollector createCollector(CompilationUnit unit, SourceUnit su) {     InnerLoader loader = AccessController.doPrivileged(getInnerLoader()).     return new ExtendedClassCollector(loader, unit, su). }
true;public;0;4;// searches the parent. Fixes 'TLD skipped' issues ;// Don't return URLs from the inner loader so that Tomcat only // searches the parent. Fixes 'TLD skipped' issues @Override public URL[] getURLs() {     return NO_URLS. }
false;private;0;12;;private PrivilegedAction<InnerLoader> getInnerLoader() {     return () -> new InnerLoader(ExtendedGroovyClassLoader.this) {          // Don't return URLs from the inner loader so that Tomcat only         // searches the parent. Fixes 'TLD skipped' issues         @Override         public URL[] getURLs() {             return NO_URLS.         }     }. }
false;public;0;3;;public CompilerConfiguration getConfiguration() {     return this.configuration. }
false;protected;2;7;;@Override protected Class<?> createClass(byte[] code, ClassNode classNode) {     Class<?> createdClass = super.createClass(code, classNode).     ExtendedGroovyClassLoader.this.classResources.put(classNode.getName().replace('.', '/') + ".class", code).     return createdClass. }
false;private;1;9;;private URL[] getGroovyJars(ClassLoader parent) {     Set<URL> urls = new HashSet<>().     findGroovyJarsDirectly(parent, urls).     if (urls.isEmpty()) {         findGroovyJarsFromClassPath(urls).     }     Assert.state(!urls.isEmpty(), "Unable to find groovy JAR").     return new ArrayList<>(urls).toArray(new URL[0]). }
false;private;2;12;;private void findGroovyJarsDirectly(ClassLoader classLoader, Set<URL> urls) {     while (classLoader != null) {         if (classLoader instanceof URLClassLoader) {             for (URL url : ((URLClassLoader) classLoader).getURLs()) {                 if (isGroovyJar(url.toString())) {                     urls.add(url).                 }             }         }         classLoader = classLoader.getParent().     } }
false;private;1;17;;private void findGroovyJarsFromClassPath(Set<URL> urls) {     String classpath = System.getProperty("java.class.path").     String[] entries = classpath.split(System.getProperty("path.separator")).     for (String entry : entries) {         if (isGroovyJar(entry)) {             File file = new File(entry).             if (file.canRead()) {                 try {                     urls.add(file.toURI().toURL()).                 } catch (MalformedURLException ex) {                 // Swallow and continue                 }             }         }     } }
false;private;1;9;;private boolean isGroovyJar(String entry) {     entry = StringUtils.cleanPath(entry).     for (String jarPrefix : GROOVY_JARS_PREFIXES) {         if (entry.contains("/" + jarPrefix + "-")) {             return true.         }     }     return false. }
false;public;1;4;;@Override public Enumeration<URL> getResources(String name) throws IOException {     return this.groovyOnlyClassLoader.getResources(name). }
false;protected;2;8;;@Override protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {     if (!name.startsWith("java.")) {         this.groovyOnlyClassLoader.loadClass(name).     }     return super.loadClass(name, resolve). }
