commented;modifiers;parameterAmount;loc;comment;code
false;private;1;12;;private AetherGrapeEngine createGrapeEngine(RepositoryConfiguration... additionalRepositories) {     List<RepositoryConfiguration> repositoryConfigurations = new ArrayList<>().     repositoryConfigurations.add(new RepositoryConfiguration("central", URI.create("https://repo.maven.apache.org/maven2"), false)).     repositoryConfigurations.addAll(Arrays.asList(additionalRepositories)).     DependencyResolutionContext dependencyResolutionContext = new DependencyResolutionContext().     dependencyResolutionContext.addDependencyManagement(new SpringBootDependenciesDependencyManagement()).     return AetherGrapeEngineFactory.create(this.groovyClassLoader, repositoryConfigurations, dependencyResolutionContext, false). }
false;public;0;7;;@Test public void dependencyResolution() {     Map<String, Object> args = new HashMap<>().     createGrapeEngine(this.springMilestones).grab(args, createDependency("org.springframework", "spring-jdbc", null)).     assertThat(this.groovyClassLoader.getURLs()).hasSize(5). }
false;public;0;11;;@Test public void proxySelector() {     doWithCustomUserHome(() -> {         AetherGrapeEngine grapeEngine = createGrapeEngine().         DefaultRepositorySystemSession session = (DefaultRepositorySystemSession) ReflectionTestUtils.getField(grapeEngine, "session").         assertThat(session.getProxySelector() instanceof CompositeProxySelector).isTrue().     }). }
false;public;0;8;;@Test public void repositoryMirrors() {     doWithCustomUserHome(() -> {         List<RemoteRepository> repositories = getRepositories().         assertThat(repositories).hasSize(1).         assertThat(repositories.get(0).getId()).isEqualTo("central-mirror").     }). }
false;public;0;9;;@Test public void repositoryAuthentication() {     doWithCustomUserHome(() -> {         List<RemoteRepository> repositories = getRepositories().         assertThat(repositories).hasSize(1).         Authentication authentication = repositories.get(0).getAuthentication().         assertThat(authentication).isNotNull().     }). }
false;public;0;12;;@Test public void dependencyResolutionWithExclusions() {     Map<String, Object> args = new HashMap<>().     args.put("excludes", Arrays.asList(createExclusion("org.springframework", "spring-core"))).     createGrapeEngine(this.springMilestones).grab(args, createDependency("org.springframework", "spring-jdbc", "3.2.4.RELEASE"), createDependency("org.springframework", "spring-beans", "3.2.4.RELEASE")).     assertThat(this.groovyClassLoader.getURLs().length).isEqualTo(3). }
false;public;0;9;;@Test public void nonTransitiveDependencyResolution() {     Map<String, Object> args = new HashMap<>().     createGrapeEngine().grab(args, createDependency("org.springframework", "spring-jdbc", "3.2.4.RELEASE", false)).     assertThat(this.groovyClassLoader.getURLs().length).isEqualTo(1). }
false;public;0;12;;@Test public void dependencyResolutionWithCustomClassLoader() {     Map<String, Object> args = new HashMap<>().     GroovyClassLoader customClassLoader = new GroovyClassLoader().     args.put("classLoader", customClassLoader).     createGrapeEngine(this.springMilestones).grab(args, createDependency("org.springframework", "spring-jdbc", null)).     assertThat(this.groovyClassLoader.getURLs().length).isEqualTo(0).     assertThat(customClassLoader.getURLs().length).isEqualTo(5). }
false;public;0;9;;@Test public void resolutionWithCustomResolver() {     Map<String, Object> args = new HashMap<>().     AetherGrapeEngine grapeEngine = this.createGrapeEngine().     grapeEngine.addResolver(createResolver("restlet.org", "http://maven.restlet.org")).     grapeEngine.grab(args, createDependency("org.restlet", "org.restlet", "1.1.6")).     assertThat(this.groovyClassLoader.getURLs().length).isEqualTo(1). }
false;public;0;8;;@Test(expected = IllegalArgumentException.class) public void differingTypeAndExt() {     Map<String, Object> dependency = createDependency("org.grails", "grails-dependencies", "2.4.0").     dependency.put("type", "foo").     dependency.put("ext", "bar").     createGrapeEngine().grab(Collections.emptyMap(), dependency). }
false;public;0;11;;@Test public void pomDependencyResolutionViaType() {     Map<String, Object> args = new HashMap<>().     Map<String, Object> dependency = createDependency("org.springframework", "spring-framework-bom", "4.0.5.RELEASE").     dependency.put("type", "pom").     createGrapeEngine().grab(args, dependency).     URL[] urls = this.groovyClassLoader.getURLs().     assertThat(urls.length).isEqualTo(1).     assertThat(urls[0].toExternalForm().endsWith(".pom")).isTrue(). }
false;public;0;11;;@Test public void pomDependencyResolutionViaExt() {     Map<String, Object> args = new HashMap<>().     Map<String, Object> dependency = createDependency("org.springframework", "spring-framework-bom", "4.0.5.RELEASE").     dependency.put("ext", "pom").     createGrapeEngine().grab(args, dependency).     URL[] urls = this.groovyClassLoader.getURLs().     assertThat(urls.length).isEqualTo(1).     assertThat(urls[0].toExternalForm().endsWith(".pom")).isTrue(). }
false;public;0;13;;@Test public void resolutionWithClassifier() {     Map<String, Object> args = new HashMap<>().     Map<String, Object> dependency = createDependency("org.springframework", "spring-jdbc", "3.2.4.RELEASE", false).     dependency.put("classifier", "sources").     createGrapeEngine().grab(args, dependency).     URL[] urls = this.groovyClassLoader.getURLs().     assertThat(urls.length).isEqualTo(1).     assertThat(urls[0].toExternalForm().endsWith("-sources.jar")).isTrue(). }
false;private;0;6;;@SuppressWarnings("unchecked") private List<RemoteRepository> getRepositories() {     AetherGrapeEngine grapeEngine = createGrapeEngine().     return (List<RemoteRepository>) ReflectionTestUtils.getField(grapeEngine, "repositories"). }
false;private;3;8;;private Map<String, Object> createDependency(String group, String module, String version) {     Map<String, Object> dependency = new HashMap<>().     dependency.put("group", group).     dependency.put("module", module).     dependency.put("version", version).     return dependency. }
false;private;4;6;;private Map<String, Object> createDependency(String group, String module, String version, boolean transitive) {     Map<String, Object> dependency = createDependency(group, module, version).     dependency.put("transitive", transitive).     return dependency. }
false;private;2;6;;private Map<String, Object> createResolver(String name, String url) {     Map<String, Object> resolver = new HashMap<>().     resolver.put("name", name).     resolver.put("root", url).     return resolver. }
false;private;2;6;;private Map<String, Object> createExclusion(String group, String module) {     Map<String, Object> exclusion = new HashMap<>().     exclusion.put("group", group).     exclusion.put("module", module).     return exclusion. }
false;private;1;4;;private void doWithCustomUserHome(Runnable action) {     doWithSystemProperty("user.home", new File("src/test/resources").getAbsolutePath(), action). }
false;private;3;9;;private void doWithSystemProperty(String key, String value, Runnable action) {     String previousValue = setOrClearSystemProperty(key, value).     try {         action.run().     } finally {         setOrClearSystemProperty(key, previousValue).     } }
false;private;2;6;;private String setOrClearSystemProperty(String key, String value) {     if (value != null) {         return System.setProperty(key, value).     }     return System.clearProperty(key). }
