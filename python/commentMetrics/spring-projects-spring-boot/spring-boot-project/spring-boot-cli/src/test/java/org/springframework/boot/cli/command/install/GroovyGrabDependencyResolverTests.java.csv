commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isGuessImports() {     return true. }
false;public;0;4;;@Override public boolean isGuessDependencies() {     return true. }
false;public;0;4;;@Override public boolean isAutoconfigure() {     return false. }
false;public;0;4;;@Override public GroovyCompilerScope getScope() {     return GroovyCompilerScope.DEFAULT. }
false;public;0;5;;@Override public List<RepositoryConfiguration> getRepositoryConfiguration() {     return RepositoryConfigurationFactory.createDefaultRepositoryConfiguration(). }
false;public;0;4;;@Override public String[] getClasspath() {     return new String[] { "." }. }
false;public;0;4;;@Override public boolean isQuiet() {     return false. }
false;public;0;43;;@Before public void setupResolver() {     GroovyCompilerConfiguration configuration = new GroovyCompilerConfiguration() {          @Override         public boolean isGuessImports() {             return true.         }          @Override         public boolean isGuessDependencies() {             return true.         }          @Override         public boolean isAutoconfigure() {             return false.         }          @Override         public GroovyCompilerScope getScope() {             return GroovyCompilerScope.DEFAULT.         }          @Override         public List<RepositoryConfiguration> getRepositoryConfiguration() {             return RepositoryConfigurationFactory.createDefaultRepositoryConfiguration().         }          @Override         public String[] getClasspath() {             return new String[] { "." }.         }          @Override         public boolean isQuiet() {             return false.         }     }.     this.resolver = new GroovyGrabDependencyResolver(configuration). }
false;public;0;7;;@Test public void resolveArtifactWithNoDependencies() throws Exception {     List<File> resolved = this.resolver.resolve(Arrays.asList("commons-logging:commons-logging:1.1.3")).     assertThat(resolved).hasSize(1).     assertThat(getNames(resolved)).containsOnly("commons-logging-1.1.3.jar"). }
false;public;0;8;;@Test public void resolveArtifactWithDependencies() throws Exception {     List<File> resolved = this.resolver.resolve(Arrays.asList("org.springframework:spring-core:4.1.1.RELEASE")).     assertThat(resolved).hasSize(2).     assertThat(getNames(resolved)).containsOnly("commons-logging-1.1.3.jar", "spring-core-4.1.1.RELEASE.jar"). }
false;public;0;9;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void resolveShorthandArtifactWithDependencies() throws Exception {     List<File> resolved = this.resolver.resolve(Arrays.asList("spring-beans")).     assertThat(resolved).hasSize(3).     assertThat(getNames(resolved)).has((Condition) Matched.by(hasItems(startsWith("spring-core-"), startsWith("spring-beans-"), startsWith("spring-jcl-")))). }
false;public;0;8;;@Test public void resolveMultipleArtifacts() throws Exception {     List<File> resolved = this.resolver.resolve(Arrays.asList("junit:junit:4.11", "commons-logging:commons-logging:1.1.3")).     assertThat(resolved).hasSize(3).     assertThat(getNames(resolved)).containsOnly("junit-4.11.jar", "commons-logging-1.1.3.jar", "hamcrest-core-1.3.jar"). }
false;public;1;7;;public Set<String> getNames(Collection<File> files) {     Set<String> names = new HashSet<>(files.size()).     for (File file : files) {         names.add(file.getName()).     }     return names. }
