commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void cleanUp() {     System.clearProperty("spring.application.class.name"). }
false;public;0;4;;@Test public void defaultLaunch() {     assertThat(launch()).contains("org.springframework.boot.SpringApplication"). }
false;public;0;6;;@Test public void launchWithClassConfiguredBySystemProperty() {     System.setProperty("spring.application.class.name", "system.property.SpringApplication").     assertThat(launch()).contains("system.property.SpringApplication"). }
false;public;0;6;;@Test public void launchWithClassConfiguredByEnvironmentVariable() {     this.env.put("SPRING_APPLICATION_CLASS_NAME", "environment.variable.SpringApplication").     assertThat(launch()).contains("environment.variable.SpringApplication"). }
false;public;0;9;;@Test public void systemPropertyOverridesEnvironmentVariable() {     System.setProperty("spring.application.class.name", "system.property.SpringApplication").     this.env.put("SPRING_APPLICATION_CLASS_NAME", "environment.variable.SpringApplication").     assertThat(launch()).contains("system.property.SpringApplication"). }
false;public;0;15;;@Test public void sourcesDefaultPropertiesAndArgsAreUsedToLaunch() throws Exception {     System.setProperty("spring.application.class.name", TestSpringApplication.class.getName()).     Class<?>[] sources = new Class<?>[0].     String[] args = new String[0].     new SpringApplicationLauncher(getClass().getClassLoader()).launch(sources, args).     assertThat(sources == TestSpringApplication.sources).isTrue().     assertThat(args == TestSpringApplication.args).isTrue().     Map<String, String> defaultProperties = TestSpringApplication.defaultProperties.     assertThat(defaultProperties).hasSize(1).containsEntry("spring.groovy.template.check-template-location", "false"). }
false;private;0;12;;private Set<String> launch() {     TestClassLoader classLoader = new TestClassLoader(getClass().getClassLoader()).     try {         new TestSpringApplicationLauncher(classLoader).launch(new Class<?>[0], new String[0]).     } catch (Exception ex) {     // Launch will fail, but we can still check that the launcher tried to use     // the right class     }     return classLoader.classes. }
false;protected;2;6;;@Override protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {     this.classes.add(name).     return super.loadClass(name, resolve). }
false;protected;1;5;;@Override protected Class<?> findClass(String name) throws ClassNotFoundException {     this.classes.add(name).     return super.findClass(name). }
false;public;1;3;;public void setDefaultProperties(Map<String, String> defaultProperties) {     TestSpringApplication.defaultProperties = defaultProperties. }
false;public;1;3;;public void run(String[] args) {     TestSpringApplication.args = args. }
false;protected;1;8;;@Override protected String getEnvironmentVariable(String name) {     String variable = SpringApplicationLauncherTests.this.env.get(name).     if (variable == null) {         variable = super.getEnvironmentVariable(name).     }     return variable. }
