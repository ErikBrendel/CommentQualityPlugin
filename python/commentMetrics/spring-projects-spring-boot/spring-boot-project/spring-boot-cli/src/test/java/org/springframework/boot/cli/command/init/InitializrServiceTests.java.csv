commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void loadMetadata() throws Exception {     mockSuccessfulMetadataGet(false).     InitializrServiceMetadata metadata = this.invoker.loadMetadata("http://foo/bar").     assertThat(metadata).isNotNull(). }
false;public;0;9;;@Test public void generateSimpleProject() throws Exception {     ProjectGenerationRequest request = new ProjectGenerationRequest().     MockHttpProjectGenerationRequest mockHttpRequest = new MockHttpProjectGenerationRequest("application/xml", "foo.zip").     ProjectGenerationResponse entity = generateProject(request, mockHttpRequest).     assertProjectEntity(entity, mockHttpRequest.contentType, mockHttpRequest.fileName). }
false;public;0;9;;@Test public void generateProjectCustomTargetFilename() throws Exception {     ProjectGenerationRequest request = new ProjectGenerationRequest().     request.setOutput("bar.zip").     MockHttpProjectGenerationRequest mockHttpRequest = new MockHttpProjectGenerationRequest("application/xml", null).     ProjectGenerationResponse entity = generateProject(request, mockHttpRequest).     assertProjectEntity(entity, mockHttpRequest.contentType, null). }
false;public;0;8;;@Test public void generateProjectNoDefaultFileName() throws Exception {     ProjectGenerationRequest request = new ProjectGenerationRequest().     MockHttpProjectGenerationRequest mockHttpRequest = new MockHttpProjectGenerationRequest("application/xml", null).     ProjectGenerationResponse entity = generateProject(request, mockHttpRequest).     assertProjectEntity(entity, mockHttpRequest.contentType, null). }
false;public;0;10;;@Test public void generateProjectBadRequest() throws Exception {     String jsonMessage = "Unknown dependency foo:bar".     mockProjectGenerationError(400, jsonMessage).     ProjectGenerationRequest request = new ProjectGenerationRequest().     request.getDependencies().add("foo:bar").     assertThatExceptionOfType(ReportableException.class).isThrownBy(() -> this.invoker.generate(request)).withMessageContaining(jsonMessage). }
false;public;0;8;;@Test public void generateProjectBadRequestNoExtraMessage() throws Exception {     mockProjectGenerationError(400, null).     ProjectGenerationRequest request = new ProjectGenerationRequest().     assertThatExceptionOfType(ReportableException.class).isThrownBy(() -> this.invoker.generate(request)).withMessageContaining("unexpected 400 error"). }
false;public;0;11;;@Test public void generateProjectNoContent() throws Exception {     mockSuccessfulMetadataGet(false).     CloseableHttpResponse response = mock(CloseableHttpResponse.class).     mockStatus(response, 500).     given(this.http.execute(isA(HttpGet.class))).willReturn(response).     ProjectGenerationRequest request = new ProjectGenerationRequest().     assertThatExceptionOfType(ReportableException.class).isThrownBy(() -> this.invoker.generate(request)).withMessageContaining("No content received from server"). }
false;public;0;9;;@Test public void loadMetadataBadRequest() throws Exception {     String jsonMessage = "whatever error on the server".     mockMetadataGetError(500, jsonMessage).     ProjectGenerationRequest request = new ProjectGenerationRequest().     assertThatExceptionOfType(ReportableException.class).isThrownBy(() -> this.invoker.generate(request)).withMessageContaining(jsonMessage). }
false;public;0;11;;@Test public void loadMetadataInvalidJson() throws Exception {     CloseableHttpResponse response = mock(CloseableHttpResponse.class).     mockHttpEntity(response, "Foo-Bar-Not-JSON".getBytes(), "application/json").     mockStatus(response, 200).     given(this.http.execute(isA(HttpGet.class))).willReturn(response).     ProjectGenerationRequest request = new ProjectGenerationRequest().     assertThatExceptionOfType(ReportableException.class).isThrownBy(() -> this.invoker.generate(request)).withMessageContaining("Invalid content received from server"). }
false;public;0;10;;@Test public void loadMetadataNoContent() throws Exception {     CloseableHttpResponse response = mock(CloseableHttpResponse.class).     mockStatus(response, 500).     given(this.http.execute(isA(HttpGet.class))).willReturn(response).     ProjectGenerationRequest request = new ProjectGenerationRequest().     assertThatExceptionOfType(ReportableException.class).isThrownBy(() -> this.invoker.generate(request)).withMessageContaining("No content received from server"). }
false;private;2;8;;private ProjectGenerationResponse generateProject(ProjectGenerationRequest request, MockHttpProjectGenerationRequest mockRequest) throws Exception {     mockSuccessfulProjectGeneration(mockRequest).     ProjectGenerationResponse entity = this.invoker.generate(request).     assertThat(entity.getContent()).as("wrong body content").isEqualTo(mockRequest.content).     return entity. }
false;private,static;3;10;;private static void assertProjectEntity(ProjectGenerationResponse entity, String mimeType, String fileName) {     if (mimeType == null) {         assertThat(entity.getContentType()).isNull().     } else {         assertThat(entity.getContentType().getMimeType()).isEqualTo(mimeType).     }     assertThat(entity.getFileName()).isEqualTo(fileName). }
