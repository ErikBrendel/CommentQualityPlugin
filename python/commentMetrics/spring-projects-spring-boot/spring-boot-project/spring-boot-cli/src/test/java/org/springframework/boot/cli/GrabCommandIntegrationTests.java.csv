commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before @After public void deleteLocalRepository() {     System.clearProperty("grape.root").     System.clearProperty("groovy.grape.report.downloads"). }
false;public;0;13;;@Test public void grab() throws Exception {     System.setProperty("grape.root", this.temp.getRoot().getAbsolutePath()).     System.setProperty("groovy.grape.report.downloads", "true").     // Use --autoconfigure=false to limit the amount of downloaded dependencies     String output = this.cli.grab("grab.groovy", "--autoconfigure=false").     assertThat(new File(this.temp.getRoot(), "repository/joda-time/joda-time")).isDirectory().     // Should be resolved from local repository cache     assertThat(output.contains("Downloading: file:")).isTrue(). }
false;public;0;7;;@Test public void duplicateDependencyManagementBomAnnotationsProducesAnError() {     assertThatExceptionOfType(Exception.class).isThrownBy(() -> this.cli.grab("duplicateDependencyManagementBom.groovy")).withMessageContaining("Duplicate @DependencyManagementBom annotation"). }
false;public;0;9;;@Test public void customMetadata() throws Exception {     System.setProperty("grape.root", this.temp.getRoot().getAbsolutePath()).     File repository = new File(this.temp.getRoot().getAbsolutePath(), "repository").     FileSystemUtils.copyRecursively(new File("src/test/resources/grab-samples/repository"), repository).     this.cli.grab("customDependencyManagement.groovy", "--autoconfigure=false").     assertThat(new File(repository, "javax/ejb/ejb-api/3.0")).isDirectory(). }
