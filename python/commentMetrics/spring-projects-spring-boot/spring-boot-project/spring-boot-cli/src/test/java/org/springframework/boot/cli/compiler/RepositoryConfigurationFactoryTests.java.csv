commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void defaultRepositories() {     TestPropertyValues.of("user.home:src/test/resources/maven-settings/basic").applyToSystemProperties(() -> {         List<RepositoryConfiguration> repositoryConfiguration = RepositoryConfigurationFactory.createDefaultRepositoryConfiguration().         assertRepositoryConfiguration(repositoryConfiguration, "central", "local", "spring-snapshot", "spring-milestone").         return null.     }). }
false;public;0;11;;@Test public void snapshotRepositoriesDisabled() {     TestPropertyValues.of("user.home:src/test/resources/maven-settings/basic", "disableSpringSnapshotRepos:true").applyToSystemProperties(() -> {         List<RepositoryConfiguration> repositoryConfiguration = RepositoryConfigurationFactory.createDefaultRepositoryConfiguration().         assertRepositoryConfiguration(repositoryConfiguration, "central", "local").         return null.     }). }
false;public;0;13;;@Test public void activeByDefaultProfileRepositories() {     TestPropertyValues.of("user.home:src/test/resources/maven-settings/active-profile-repositories").applyToSystemProperties(() -> {         List<RepositoryConfiguration> repositoryConfiguration = RepositoryConfigurationFactory.createDefaultRepositoryConfiguration().         assertRepositoryConfiguration(repositoryConfiguration, "central", "local", "spring-snapshot", "spring-milestone", "active-by-default").         return null.     }). }
false;public;0;13;;@Test public void activeByPropertyProfileRepositories() {     TestPropertyValues.of("user.home:src/test/resources/maven-settings/active-profile-repositories", "foo:bar").applyToSystemProperties(() -> {         List<RepositoryConfiguration> repositoryConfiguration = RepositoryConfigurationFactory.createDefaultRepositoryConfiguration().         assertRepositoryConfiguration(repositoryConfiguration, "central", "local", "spring-snapshot", "spring-milestone", "active-by-property").         return null.     }). }
false;public;0;13;;@Test public void interpolationProfileRepositories() {     TestPropertyValues.of("user.home:src/test/resources/maven-settings/active-profile-repositories", "interpolate:true").applyToSystemProperties(() -> {         List<RepositoryConfiguration> repositoryConfiguration = RepositoryConfigurationFactory.createDefaultRepositoryConfiguration().         assertRepositoryConfiguration(repositoryConfiguration, "central", "local", "spring-snapshot", "spring-milestone", "interpolate-releases", "interpolate-snapshots").         return null.     }). }
false;private;2;9;;private void assertRepositoryConfiguration(List<RepositoryConfiguration> configurations, String... expectedNames) {     assertThat(configurations).hasSize(expectedNames.length).     Set<String> actualNames = new HashSet<>().     for (RepositoryConfiguration configuration : configurations) {         actualNames.add(configuration.getName()).     }     assertThat(actualNames).containsOnly(expectedNames). }
