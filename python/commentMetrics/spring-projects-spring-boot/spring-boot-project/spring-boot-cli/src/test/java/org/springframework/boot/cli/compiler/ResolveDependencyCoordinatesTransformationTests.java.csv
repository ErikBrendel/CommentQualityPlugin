commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ArtifactCoordinatesResolver getArtifactCoordinatesResolver() {     return ResolveDependencyCoordinatesTransformationTests.this.coordinatesResolver. }
false;public;0;5;;@Before public void setupExpectations() {     given(this.coordinatesResolver.getGroupId("spring-core")).willReturn("org.springframework"). }
false;public;0;5;;@Test public void transformationOfAnnotationOnImport() {     this.moduleNode.addImport(null, null, Arrays.asList(this.grabAnnotation)).     assertGrabAnnotationHasBeenTransformed(). }
false;public;0;7;;@Test public void transformationOfAnnotationOnStarImport() {     this.moduleNode.addStarImport("org.springframework.util", Arrays.asList(this.grabAnnotation)).     assertGrabAnnotationHasBeenTransformed(). }
false;public;0;7;;@Test public void transformationOfAnnotationOnStaticImport() {     this.moduleNode.addStaticImport(null, null, null, Arrays.asList(this.grabAnnotation)).     assertGrabAnnotationHasBeenTransformed(). }
false;public;0;7;;@Test public void transformationOfAnnotationOnStaticStarImport() {     this.moduleNode.addStaticStarImport(null, null, Arrays.asList(this.grabAnnotation)).     assertGrabAnnotationHasBeenTransformed(). }
false;public;0;8;;@Test public void transformationOfAnnotationOnPackage() {     PackageNode packageNode = new PackageNode("test").     packageNode.addAnnotation(this.grabAnnotation).     this.moduleNode.setPackage(packageNode).     assertGrabAnnotationHasBeenTransformed(). }
false;public;0;8;;@Test public void transformationOfAnnotationOnClass() {     ClassNode classNode = new ClassNode("Test", 0, new ClassNode(Object.class)).     classNode.addAnnotation(this.grabAnnotation).     this.moduleNode.addClass(classNode).     assertGrabAnnotationHasBeenTransformed(). }
false;public;0;3;;@Test public void transformationOfAnnotationOnAnnotation() { }
false;public;0;13;;@Test public void transformationOfAnnotationOnField() {     ClassNode classNode = new ClassNode("Test", 0, new ClassNode(Object.class)).     this.moduleNode.addClass(classNode).     FieldNode fieldNode = new FieldNode("test", 0, new ClassNode(Object.class), classNode, null).     classNode.addField(fieldNode).     fieldNode.addAnnotation(this.grabAnnotation).     assertGrabAnnotationHasBeenTransformed(). }
false;public;0;11;;@Test public void transformationOfAnnotationOnConstructor() {     ClassNode classNode = new ClassNode("Test", 0, new ClassNode(Object.class)).     this.moduleNode.addClass(classNode).     ConstructorNode constructorNode = new ConstructorNode(0, null).     constructorNode.addAnnotation(this.grabAnnotation).     classNode.addMethod(constructorNode).     assertGrabAnnotationHasBeenTransformed(). }
false;public;0;12;;@Test public void transformationOfAnnotationOnMethod() {     ClassNode classNode = new ClassNode("Test", 0, new ClassNode(Object.class)).     this.moduleNode.addClass(classNode).     MethodNode methodNode = new MethodNode("test", 0, new ClassNode(Void.class), new Parameter[0], new ClassNode[0], null).     methodNode.addAnnotation(this.grabAnnotation).     classNode.addMethod(methodNode).     assertGrabAnnotationHasBeenTransformed(). }
false;public;0;14;;@Test public void transformationOfAnnotationOnMethodParameter() {     ClassNode classNode = new ClassNode("Test", 0, new ClassNode(Object.class)).     this.moduleNode.addClass(classNode).     Parameter parameter = new Parameter(new ClassNode(Object.class), "test").     parameter.addAnnotation(this.grabAnnotation).     MethodNode methodNode = new MethodNode("test", 0, new ClassNode(Void.class), new Parameter[] { parameter }, new ClassNode[0], null).     classNode.addMethod(methodNode).     assertGrabAnnotationHasBeenTransformed(). }
false;public;0;20;;@Test public void transformationOfAnnotationOnLocalVariable() {     ClassNode classNode = new ClassNode("Test", 0, new ClassNode(Object.class)).     this.moduleNode.addClass(classNode).     DeclarationExpression declarationExpression = new DeclarationExpression(new VariableExpression("test"), null, new ConstantExpression("test")).     declarationExpression.addAnnotation(this.grabAnnotation).     BlockStatement code = new BlockStatement(Arrays.asList((Statement) new ExpressionStatement(declarationExpression)), new VariableScope()).     MethodNode methodNode = new MethodNode("test", 0, new ClassNode(Void.class), new Parameter[0], new ClassNode[0], code).     classNode.addMethod(methodNode).     assertGrabAnnotationHasBeenTransformed(). }
false;private;0;6;;private AnnotationNode createGrabAnnotation() {     ClassNode classNode = new ClassNode(Grab.class).     AnnotationNode annotationNode = new AnnotationNode(classNode).     annotationNode.addMember("value", new ConstantExpression("spring-core")).     return annotationNode. }
false;private;0;6;;private void assertGrabAnnotationHasBeenTransformed() {     this.transformation.visit(new ASTNode[] { this.moduleNode }, this.sourceUnit).     assertThat(getGrabAnnotationMemberAsString("group")).isEqualTo("org.springframework").     assertThat(getGrabAnnotationMemberAsString("module")).isEqualTo("spring-core"). }
false;private;1;13;;private Object getGrabAnnotationMemberAsString(String memberName) {     Expression expression = this.grabAnnotation.getMember(memberName).     if (expression instanceof ConstantExpression) {         return ((ConstantExpression) expression).getValue().     } else if (expression == null) {         return null.     } else {         throw new IllegalStateException("Member '" + memberName + "' is not a ConstantExpression").     } }
