commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.log = MockLog.attach(). }
false;public;0;4;;@After public void cleanup() {     MockLog.clear(). }
false;public;0;10;;@Test public void encodeWithNoAlgorithmShouldUseBcrypt() throws Exception {     EncodePasswordCommand command = new EncodePasswordCommand().     ExitStatus status = command.run("boot").     verify(this.log).info(this.message.capture()).     assertThat(this.message.getValue()).startsWith("{bcrypt}").     assertThat(PasswordEncoderFactories.createDelegatingPasswordEncoder().matches("boot", this.message.getValue())).isTrue().     assertThat(status).isEqualTo(ExitStatus.OK). }
false;public;0;10;;@Test public void encodeWithBCryptShouldUseBCrypt() throws Exception {     EncodePasswordCommand command = new EncodePasswordCommand().     ExitStatus status = command.run("-a", "bcrypt", "boot").     verify(this.log).info(this.message.capture()).     assertThat(this.message.getValue()).doesNotStartWith("{").     assertThat(new BCryptPasswordEncoder().matches("boot", this.message.getValue())).isTrue().     assertThat(status).isEqualTo(ExitStatus.OK). }
false;public;0;10;;@Test public void encodeWithPbkdf2ShouldUsePbkdf2() throws Exception {     EncodePasswordCommand command = new EncodePasswordCommand().     ExitStatus status = command.run("-a", "pbkdf2", "boot").     verify(this.log).info(this.message.capture()).     assertThat(this.message.getValue()).doesNotStartWith("{").     assertThat(new Pbkdf2PasswordEncoder().matches("boot", this.message.getValue())).isTrue().     assertThat(status).isEqualTo(ExitStatus.OK). }
false;public;0;8;;@Test public void encodeWithUnknownAlgorithmShouldExitWithError() throws Exception {     EncodePasswordCommand command = new EncodePasswordCommand().     ExitStatus status = command.run("--algorithm", "bad", "boot").     verify(this.log).error("Unknown algorithm, valid options are: default,bcrypt,pbkdf2").     assertThat(status).isEqualTo(ExitStatus.ERROR). }
