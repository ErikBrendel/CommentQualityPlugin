commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;protected void mockSuccessfulMetadataTextGet() throws IOException {     mockSuccessfulMetadataGet("metadata/service-metadata-2.1.0.txt", "text/plain", true). }
false;protected;1;5;;protected void mockSuccessfulMetadataGet(boolean serviceCapabilities) throws IOException {     mockSuccessfulMetadataGet("metadata/service-metadata-2.1.0.json", "application/vnd.initializr.v2.1+json", serviceCapabilities). }
false;protected;1;5;;protected void mockSuccessfulMetadataGetV2(boolean serviceCapabilities) throws IOException {     mockSuccessfulMetadataGet("metadata/service-metadata-2.0.0.json", "application/vnd.initializr.v2+json", serviceCapabilities). }
false;protected;3;9;;protected void mockSuccessfulMetadataGet(String contentPath, String contentType, boolean serviceCapabilities) throws IOException {     CloseableHttpResponse response = mock(CloseableHttpResponse.class).     byte[] content = readClasspathResource(contentPath).     mockHttpEntity(response, content, contentType).     mockStatus(response, 200).     given(this.http.execute(argThat(getForMetadata(serviceCapabilities)))).willReturn(response). }
false;protected;1;4;;protected byte[] readClasspathResource(String contentPath) throws IOException {     Resource resource = new ClassPathResource(contentPath).     return StreamUtils.copyToByteArray(resource.getInputStream()). }
false;protected;1;12;;protected void mockSuccessfulProjectGeneration(MockHttpProjectGenerationRequest request) throws IOException {     // Required for project generation as the metadata is read first     mockSuccessfulMetadataGet(false).     CloseableHttpResponse response = mock(CloseableHttpResponse.class).     mockHttpEntity(response, request.content, request.contentType).     mockStatus(response, 200).     String header = (request.fileName != null) ? contentDispositionValue(request.fileName) : null.     mockHttpHeader(response, "Content-Disposition", header).     given(this.http.execute(argThat(getForNonMetadata()))).willReturn(response). }
false;protected;2;10;;protected void mockProjectGenerationError(int status, String message) throws IOException, JSONException {     // Required for project generation as the metadata is read first     mockSuccessfulMetadataGet(false).     CloseableHttpResponse response = mock(CloseableHttpResponse.class).     mockHttpEntity(response, createJsonError(status, message).getBytes(), "application/json").     mockStatus(response, status).     given(this.http.execute(isA(HttpGet.class))).willReturn(response). }
false;protected;2;8;;protected void mockMetadataGetError(int status, String message) throws IOException, JSONException {     CloseableHttpResponse response = mock(CloseableHttpResponse.class).     mockHttpEntity(response, createJsonError(status, message).getBytes(), "application/json").     mockStatus(response, status).     given(this.http.execute(isA(HttpGet.class))).willReturn(response). }
false;protected;3;15;;protected HttpEntity mockHttpEntity(CloseableHttpResponse response, byte[] content, String contentType) {     try {         HttpEntity entity = mock(HttpEntity.class).         given(entity.getContent()).willReturn(new ByteArrayInputStream(content)).         Header contentTypeHeader = (contentType != null) ? new BasicHeader("Content-Type", contentType) : null.         given(entity.getContentType()).willReturn(contentTypeHeader).         given(response.getEntity()).willReturn(entity).         return entity.     } catch (IOException ex) {         throw new IllegalStateException("Should not happen", ex).     } }
false;protected;2;5;;protected void mockStatus(CloseableHttpResponse response, int status) {     StatusLine statusLine = mock(StatusLine.class).     given(statusLine.getStatusCode()).willReturn(status).     given(response.getStatusLine()).willReturn(statusLine). }
false;protected;3;5;;protected void mockHttpHeader(CloseableHttpResponse response, String headerName, String value) {     Header header = (value != null) ? new BasicHeader(headerName, value) : null.     given(response.getFirstHeader(headerName)).willReturn(header). }
false;private;1;6;;private ArgumentMatcher<HttpGet> getForMetadata(boolean serviceCapabilities) {     if (!serviceCapabilities) {         return new HasAcceptHeader(InitializrService.ACCEPT_META_DATA, true).     }     return new HasAcceptHeader(InitializrService.ACCEPT_SERVICE_CAPABILITIES, true). }
false;private;0;3;;private ArgumentMatcher<HttpGet> getForNonMetadata() {     return new HasAcceptHeader(InitializrService.ACCEPT_META_DATA, false). }
false;private;1;3;;private String contentDispositionValue(String fileName) {     return "attachment. filename=\"" + fileName + "\"". }
false;private;2;8;;private String createJsonError(int status, String message) throws JSONException {     JSONObject json = new JSONObject().     json.put("status", status).     if (message != null) {         json.put("message", message).     }     return json.toString(). }
false;public;1;11;;@Override public boolean matches(HttpGet get) {     if (get == null) {         return false.     }     Header acceptHeader = get.getFirstHeader(HttpHeaders.ACCEPT).     if (this.shouldMatch) {         return acceptHeader != null && this.value.equals(acceptHeader.getValue()).     }     return acceptHeader == null || !this.value.equals(acceptHeader.getValue()). }
