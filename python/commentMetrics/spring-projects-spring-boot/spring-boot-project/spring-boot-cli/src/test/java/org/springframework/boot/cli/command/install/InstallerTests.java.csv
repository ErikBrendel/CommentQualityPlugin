commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() throws IOException {     System.setProperty("spring.home", this.tempFolder.getRoot().getAbsolutePath()).     this.installer = new Installer(this.resolver). }
false;public;0;4;;@After public void cleanUp() {     System.clearProperty("spring.home"). }
false;public;0;7;;@Test public void installNewDependency() throws Exception {     File foo = createTemporaryFile("foo.jar").     given(this.resolver.resolve(Arrays.asList("foo"))).willReturn(Arrays.asList(foo)).     this.installer.install(Arrays.asList("foo")).     assertThat(getNamesOfFilesInLibExt()).containsOnly("foo.jar", ".installed"). }
false;public;0;8;;@Test public void installAndUninstall() throws Exception {     File foo = createTemporaryFile("foo.jar").     given(this.resolver.resolve(Arrays.asList("foo"))).willReturn(Arrays.asList(foo)).     this.installer.install(Arrays.asList("foo")).     this.installer.uninstall(Arrays.asList("foo")).     assertThat(getNamesOfFilesInLibExt()).contains(".installed"). }
false;public;0;21;;@Test public void installAndUninstallWithCommonDependencies() throws Exception {     File alpha = createTemporaryFile("alpha.jar").     File bravo = createTemporaryFile("bravo.jar").     File charlie = createTemporaryFile("charlie.jar").     given(this.resolver.resolve(Arrays.asList("bravo"))).willReturn(Arrays.asList(bravo, alpha)).     given(this.resolver.resolve(Arrays.asList("charlie"))).willReturn(Arrays.asList(charlie, alpha)).     this.installer.install(Arrays.asList("bravo")).     assertThat(getNamesOfFilesInLibExt()).containsOnly("alpha.jar", "bravo.jar", ".installed").     this.installer.install(Arrays.asList("charlie")).     assertThat(getNamesOfFilesInLibExt()).containsOnly("alpha.jar", "bravo.jar", "charlie.jar", ".installed").     this.installer.uninstall(Arrays.asList("bravo")).     assertThat(getNamesOfFilesInLibExt()).containsOnly("alpha.jar", "charlie.jar", ".installed").     this.installer.uninstall(Arrays.asList("charlie")).     assertThat(getNamesOfFilesInLibExt()).containsOnly(".installed"). }
false;public;0;16;;@Test public void uninstallAll() throws Exception {     File alpha = createTemporaryFile("alpha.jar").     File bravo = createTemporaryFile("bravo.jar").     File charlie = createTemporaryFile("charlie.jar").     given(this.resolver.resolve(Arrays.asList("bravo"))).willReturn(Arrays.asList(bravo, alpha)).     given(this.resolver.resolve(Arrays.asList("charlie"))).willReturn(Arrays.asList(charlie, alpha)).     this.installer.install(Arrays.asList("bravo")).     this.installer.install(Arrays.asList("charlie")).     assertThat(getNamesOfFilesInLibExt()).containsOnly("alpha.jar", "bravo.jar", "charlie.jar", ".installed").     this.installer.uninstallAll().     assertThat(getNamesOfFilesInLibExt()).containsOnly(".installed"). }
false;private;0;7;;private Set<String> getNamesOfFilesInLibExt() {     Set<String> names = new HashSet<>().     for (File file : new File(this.tempFolder.getRoot(), "lib/ext").listFiles()) {         names.add(file.getName()).     }     return names. }
false;private;1;5;;private File createTemporaryFile(String name) throws IOException {     File temporaryFile = this.tempFolder.newFile(name).     temporaryFile.deleteOnExit().     return temporaryFile. }
