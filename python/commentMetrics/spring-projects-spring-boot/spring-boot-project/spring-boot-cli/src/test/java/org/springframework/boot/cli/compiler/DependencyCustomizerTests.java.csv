commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ArtifactCoordinatesResolver getArtifactCoordinatesResolver() {     return DependencyCustomizerTests.this.resolver. }
false;public;0;19;;@Before public void setUp() {     MockitoAnnotations.initMocks(this).     given(this.resolver.getGroupId("spring-boot-starter-logging")).willReturn("org.springframework.boot").     given(this.resolver.getArtifactId("spring-boot-starter-logging")).willReturn("spring-boot-starter-logging").     this.moduleNode.addClass(this.classNode).     this.dependencyCustomizer = new DependencyCustomizer(new GroovyClassLoader(getClass().getClassLoader()), this.moduleNode, new DependencyResolutionContext() {          @Override         public ArtifactCoordinatesResolver getArtifactCoordinatesResolver() {             return DependencyCustomizerTests.this.resolver.         }     }). }
false;public;0;10;;@Test public void basicAdd() {     this.dependencyCustomizer.add("spring-boot-starter-logging").     List<AnnotationNode> grabAnnotations = this.classNode.getAnnotations(new ClassNode(Grab.class)).     assertThat(grabAnnotations).hasSize(1).     AnnotationNode annotationNode = grabAnnotations.get(0).     assertGrabAnnotation(annotationNode, "org.springframework.boot", "spring-boot-starter-logging", "1.2.3", null, null, true). }
false;public;0;10;;@Test public void nonTransitiveAdd() {     this.dependencyCustomizer.add("spring-boot-starter-logging", false).     List<AnnotationNode> grabAnnotations = this.classNode.getAnnotations(new ClassNode(Grab.class)).     assertThat(grabAnnotations).hasSize(1).     AnnotationNode annotationNode = grabAnnotations.get(0).     assertGrabAnnotation(annotationNode, "org.springframework.boot", "spring-boot-starter-logging", "1.2.3", null, null, false). }
false;public;0;12;;@Test public void fullyCustomized() {     this.dependencyCustomizer.add("spring-boot-starter-logging", "my-classifier", "my-type", false).     List<AnnotationNode> grabAnnotations = this.classNode.getAnnotations(new ClassNode(Grab.class)).     assertThat(grabAnnotations).hasSize(1).     AnnotationNode annotationNode = grabAnnotations.get(0).     assertGrabAnnotation(annotationNode, "org.springframework.boot", "spring-boot-starter-logging", "1.2.3", "my-classifier", "my-type", false). }
false;public;0;6;;@Test public void anyMissingClassesWithMissingClassesPerformsAdd() {     this.dependencyCustomizer.ifAnyMissingClasses("does.not.Exist").add("spring-boot-starter-logging").     assertThat(this.classNode.getAnnotations(new ClassNode(Grab.class))).hasSize(1). }
false;public;0;7;;@Test public void anyMissingClassesWithMixtureOfClassesPerformsAdd() {     this.dependencyCustomizer.ifAnyMissingClasses(getClass().getName(), "does.not.Exist").add("spring-boot-starter-logging").     assertThat(this.classNode.getAnnotations(new ClassNode(Grab.class))).hasSize(1). }
false;public;0;6;;@Test public void anyMissingClassesWithNoMissingClassesDoesNotPerformAdd() {     this.dependencyCustomizer.ifAnyMissingClasses(getClass().getName()).add("spring-boot-starter-logging").     assertThat(this.classNode.getAnnotations(new ClassNode(Grab.class))).isEmpty(). }
false;public;0;6;;@Test public void allMissingClassesWithNoMissingClassesDoesNotPerformAdd() {     this.dependencyCustomizer.ifAllMissingClasses(getClass().getName()).add("spring-boot-starter-logging").     assertThat(this.classNode.getAnnotations(new ClassNode(Grab.class))).isEmpty(). }
false;public;0;7;;@Test public void allMissingClassesWithMixtureOfClassesDoesNotPerformAdd() {     this.dependencyCustomizer.ifAllMissingClasses(getClass().getName(), "does.not.Exist").add("spring-boot-starter-logging").     assertThat(this.classNode.getAnnotations(new ClassNode(Grab.class))).isEmpty(). }
false;public;0;7;;@Test public void allMissingClassesWithAllClassesMissingPerformsAdd() {     this.dependencyCustomizer.ifAllMissingClasses("does.not.Exist", "does.not.exist.Either").add("spring-boot-starter-logging").     assertThat(this.classNode.getAnnotations(new ClassNode(Grab.class))).hasSize(1). }
false;private;7;20;;private void assertGrabAnnotation(AnnotationNode annotationNode, String group, String module, String version, String classifier, String type, boolean transitive) {     assertThat(getMemberValue(annotationNode, "group")).isEqualTo(group).     assertThat(getMemberValue(annotationNode, "module")).isEqualTo(module).     if (type == null) {         assertThat(annotationNode.getMember("type")).isNull().     } else {         assertThat(getMemberValue(annotationNode, "type")).isEqualTo(type).     }     if (classifier == null) {         assertThat(annotationNode.getMember("classifier")).isNull().     } else {         assertThat(getMemberValue(annotationNode, "classifier")).isEqualTo(classifier).     }     assertThat(getMemberValue(annotationNode, "transitive")).isEqualTo(transitive). }
false;private;2;3;;private Object getMemberValue(AnnotationNode annotationNode, String member) {     return ((ConstantExpression) annotationNode.getMember(member)).getValue(). }
