commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     MockitoAnnotations.initMocks(this). }
false;public;0;4;;@Test public void basicSessionCustomization() {     assertSessionCustomization("src/test/resources/maven-settings/basic"). }
false;public;0;4;;@Test public void encryptedSettingsSessionCustomization() {     assertSessionCustomization("src/test/resources/maven-settings/encrypted"). }
false;public;0;22;;@Test public void propertyInterpolation() {     final DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession().     given(this.repositorySystem.newLocalRepositoryManager(eq(session), any(LocalRepository.class))).willAnswer((invocation) -> {         LocalRepository localRepository = invocation.getArgument(1).         return new SimpleLocalRepositoryManagerFactory().newInstance(session, localRepository).     }).     TestPropertyValues.of("user.home:src/test/resources/maven-settings/property-interpolation", "foo:bar").applyToSystemProperties(() -> {         new SettingsXmlRepositorySystemSessionAutoConfiguration().apply(session, SettingsXmlRepositorySystemSessionAutoConfigurationTests.this.repositorySystem).         return null.     }).     assertThat(session.getLocalRepository().getBasedir().getAbsolutePath()).endsWith(File.separatorChar + "bar" + File.separatorChar + "repository"). }
false;private;1;14;;private void assertSessionCustomization(String userHome) {     final DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession().     TestPropertyValues.of("user.home:" + userHome).applyToSystemProperties(() -> {         new SettingsXmlRepositorySystemSessionAutoConfiguration().apply(session, SettingsXmlRepositorySystemSessionAutoConfigurationTests.this.repositorySystem).         return null.     }).     RemoteRepository repository = new RemoteRepository.Builder("my-server", "default", "http://maven.example.com").build().     assertMirrorSelectorConfiguration(session, repository).     assertProxySelectorConfiguration(session, repository).     assertAuthenticationSelectorConfiguration(session, repository). }
false;private;2;12;;private void assertProxySelectorConfiguration(DefaultRepositorySystemSession session, RemoteRepository repository) {     Proxy proxy = session.getProxySelector().getProxy(repository).     repository = new RemoteRepository.Builder(repository).setProxy(proxy).build().     AuthenticationContext authenticationContext = AuthenticationContext.forProxy(session, repository).     assertThat(proxy.getHost()).isEqualTo("proxy.example.com").     assertThat(authenticationContext.get(AuthenticationContext.USERNAME)).isEqualTo("proxyuser").     assertThat(authenticationContext.get(AuthenticationContext.PASSWORD)).isEqualTo("somepassword"). }
false;private;2;7;;private void assertMirrorSelectorConfiguration(DefaultRepositorySystemSession session, RemoteRepository repository) {     RemoteRepository mirror = session.getMirrorSelector().getMirror(repository).     assertThat(mirror).as("Mirror configured for repository " + repository.getId()).isNotNull().     assertThat(mirror.getHost()).isEqualTo("maven.example.com"). }
false;private;2;13;;private void assertAuthenticationSelectorConfiguration(DefaultRepositorySystemSession session, RemoteRepository repository) {     Authentication authentication = session.getAuthenticationSelector().getAuthentication(repository).     repository = new RemoteRepository.Builder(repository).setAuthentication(authentication).build().     AuthenticationContext authenticationContext = AuthenticationContext.forRepository(session, repository).     assertThat(authenticationContext.get(AuthenticationContext.USERNAME)).isEqualTo("tester").     assertThat(authenticationContext.get(AuthenticationContext.PASSWORD)).isEqualTo("secret"). }
