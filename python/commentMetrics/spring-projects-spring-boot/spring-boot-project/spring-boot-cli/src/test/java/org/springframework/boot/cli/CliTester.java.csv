commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setTimeout(long timeout) {     this.timeout = timeout. }
false;public;1;20;;public String run(String... args) throws Exception {     List<String> updatedArgs = new ArrayList<>().     boolean classpathUpdated = false.     for (String arg : args) {         if (arg.startsWith("--classpath=")) {             arg = arg + ":" + this.buildOutput.getTestClassesLocation().getAbsolutePath().             classpathUpdated = true.         }         updatedArgs.add(arg).     }     if (!classpathUpdated) {         updatedArgs.add("--classpath=.:" + this.buildOutput.getTestClassesLocation().getAbsolutePath()).     }     Future<RunCommand> future = submitCommand(new RunCommand(), StringUtils.toStringArray(updatedArgs)).     this.commands.add(future.get(this.timeout, TimeUnit.MILLISECONDS)).     return getOutput(). }
false;public;1;5;;public String grab(String... args) throws Exception {     Future<GrabCommand> future = submitCommand(new GrabCommand(), args).     this.commands.add(future.get(this.timeout, TimeUnit.MILLISECONDS)).     return getOutput(). }
false;public;1;5;;public String jar(String... args) throws Exception {     Future<JarCommand> future = submitCommand(new JarCommand(), args).     this.commands.add(future.get(this.timeout, TimeUnit.MILLISECONDS)).     return getOutput(). }
false;private;2;23;;private <T extends OptionParsingCommand> Future<T> submitCommand(T command, String... args) {     clearUrlHandler().     final String[] sources = getSources(args).     return Executors.newSingleThreadExecutor().submit(() -> {         ClassLoader loader = Thread.currentThread().getContextClassLoader().         System.setProperty("server.port", "0").         System.setProperty("spring.application.class.name", "org.springframework.boot.cli.CliTesterSpringApplication").         this.serverPortFile = new File(this.temp.newFolder(), "server.port").         System.setProperty("portfile", this.serverPortFile.getAbsolutePath()).         try {             command.run(sources).             return command.         } finally {             System.clearProperty("server.port").             System.clearProperty("spring.application.class.name").             System.clearProperty("portfile").             Thread.currentThread().setContextClassLoader(loader).         }     }). }
true;private;0;10;/**  * The TomcatURLStreamHandlerFactory fails if the factory is already set, use  * reflection to reset it.  */ ;/**  * The TomcatURLStreamHandlerFactory fails if the factory is already set, use  * reflection to reset it.  */ private void clearUrlHandler() {     try {         Field field = URL.class.getDeclaredField("factory").         field.setAccessible(true).         field.set(null, null).     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
false;protected;1;18;;protected String[] getSources(String... args) {     final String[] sources = new String[args.length].     for (int i = 0. i < args.length. i++) {         String arg = args[i].         if (!arg.endsWith(".groovy") && !arg.endsWith(".xml")) {             if (new File(this.prefix + arg).isDirectory()) {                 sources[i] = this.prefix + arg.             } else {                 sources[i] = arg.             }         } else {             sources[i] = new File(arg).isAbsolute() ? arg : this.prefix + arg.         }     }     return sources. }
false;private;0;5;;private String getOutput() {     String output = this.outputCapture.toString().     this.outputCapture.reset().     return output. }
false;public;0;8;;@Override public void evaluate() throws Throwable {     Assume.assumeTrue("Not running sample integration tests because integration profile not active", System.getProperty("spring.profiles.active", "integration").contains("integration")).     statement.evaluate(). }
false;public;2;18;;@Override public Statement apply(Statement base, Description description) {     final Statement statement = this.temp.apply(this.outputCapture.apply(new RunLauncherStatement(base), description), description).     return new Statement() {          @Override         public void evaluate() throws Throwable {             Assume.assumeTrue("Not running sample integration tests because integration profile not active", System.getProperty("spring.profiles.active", "integration").contains("integration")).             statement.evaluate().         }     }. }
false;public;0;3;;public String getHttpOutput() {     return getHttpOutput("/"). }
false;public;1;13;;public String getHttpOutput(String uri) {     try {         int port = Integer.parseInt(FileCopyUtils.copyToString(new FileReader(this.serverPortFile))).         InputStream stream = URI.create("http://localhost:" + port + uri).toURL().openStream().         BufferedReader reader = new BufferedReader(new InputStreamReader(stream)).         return reader.lines().collect(Collectors.joining()).     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
false;public;0;20;;@Override public void evaluate() throws Throwable {     System.setProperty("disableSpringSnapshotRepos", "false").     try {         try {             this.base.evaluate().         } finally {             for (AbstractCommand command : CliTester.this.commands) {                 if (command != null && command instanceof RunCommand) {                     ((RunCommand) command).stop().                 }             }             System.clearProperty("disableSpringSnapshotRepos").         }     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
