commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getOrder() {     return DependencyManagementBomTransformation.ORDER - 10. }
false;protected;0;4;;@Override protected String getBomModule() {     return "test:child:1.0.0". }
false;public;0;6;;@Test public void transformationOfEmptyPackage() {     this.moduleNode.setPackage(new PackageNode("foo")).     this.transformation.visit(new ASTNode[] { this.moduleNode }, this.sourceUnit).     assertThat(getValue().toString()).isEqualTo("[test:child:1.0.0]"). }
false;public;0;6;;@Test public void transformationOfClass() {     this.moduleNode.addClass(ClassHelper.make("MyClass")).     this.transformation.visit(new ASTNode[] { this.moduleNode }, this.sourceUnit).     assertThat(getValue().toString()).isEqualTo("[test:child:1.0.0]"). }
false;public;0;13;;@Test public void transformationOfClassWithExistingManagedDependencies() {     this.moduleNode.setPackage(new PackageNode("foo")).     ClassNode cls = ClassHelper.make("MyClass").     this.moduleNode.addClass(cls).     AnnotationNode annotation = new AnnotationNode(ClassHelper.make(DependencyManagementBom.class)).     annotation.addMember("value", new ConstantExpression("test:parent:1.0.0")).     cls.addAnnotation(annotation).     this.transformation.visit(new ASTNode[] { this.moduleNode }, this.sourceUnit).     assertThat(getValue().toString()).isEqualTo("[test:parent:1.0.0, test:child:1.0.0]"). }
false;private;0;16;;private List<String> getValue() {     Expression expression = findAnnotation().getMember("value").     if (expression instanceof ListExpression) {         List<String> list = new ArrayList<>().         for (Expression ex : ((ListExpression) expression).getExpressions()) {             list.add((String) ((ConstantExpression) ex).getValue()).         }         return list.     } else if (expression == null) {         return null.     } else {         throw new IllegalStateException("Member 'value' is not a ListExpression").     } }
false;private;0;13;;private AnnotationNode findAnnotation() {     PackageNode packageNode = this.moduleNode.getPackage().     ClassNode bom = ClassHelper.make(DependencyManagementBom.class).     if (packageNode != null) {         if (!packageNode.getAnnotations(bom).isEmpty()) {             return packageNode.getAnnotations(bom).get(0).         }     }     if (!this.moduleNode.getClasses().isEmpty()) {         return this.moduleNode.getClasses().get(0).getAnnotations(bom).get(0).     }     throw new IllegalStateException("No package or class node found"). }
