commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void noArguments() throws Exception {     Invocation invocation = this.cli.invoke("jar").     invocation.await().     assertThat(invocation.getStandardOutput(), equalTo("")).     assertThat(invocation.getErrorOutput(), containsString("The name of the " + "resulting jar and at least one source file must be specified")). }
false;public;0;8;;@Test public void noSources() throws Exception {     Invocation invocation = this.cli.invoke("jar", "test-app.jar").     invocation.await().     assertThat(invocation.getStandardOutput(), equalTo("")).     assertThat(invocation.getErrorOutput(), containsString("The name of the " + "resulting jar and at least one source file must be specified")). }
false;public;0;26;;@Test public void jarCreationWithGrabResolver() throws Exception {     File jar = new File(this.temp.getRoot(), "test-app.jar").     Invocation invocation = this.cli.invoke("run", jar.getAbsolutePath(), "bad.groovy").     invocation.await().     if (!JAVA_9_OR_LATER) {         assertThat(invocation.getErrorOutput(), equalTo("")).     }     invocation = this.cli.invoke("jar", jar.getAbsolutePath(), "bad.groovy").     invocation.await().     if (!JAVA_9_OR_LATER) {         assertEquals(invocation.getErrorOutput(), 0, invocation.getErrorOutput().length()).     }     assertTrue(jar.exists()).     Process process = new JavaExecutable().processBuilder("-jar", jar.getAbsolutePath()).start().     invocation = new Invocation(process).     invocation.await().     if (!JAVA_9_OR_LATER) {         assertThat(invocation.getErrorOutput(), equalTo("")).     } }
false;public;0;33;;@Test public void jarCreation() throws Exception {     File jar = new File(this.temp.getRoot(), "test-app.jar").     Invocation invocation = this.cli.invoke("jar", jar.getAbsolutePath(), "jar.groovy").     invocation.await().     if (!JAVA_9_OR_LATER) {         assertEquals(invocation.getErrorOutput(), 0, invocation.getErrorOutput().length()).     }     assertTrue(jar.exists()).     Process process = new JavaExecutable().processBuilder("-jar", jar.getAbsolutePath()).start().     invocation = new Invocation(process).     invocation.await().     if (!JAVA_9_OR_LATER) {         assertThat(invocation.getErrorOutput(), equalTo("")).     }     assertThat(invocation.getStandardOutput(), containsString("Hello World!")).     assertThat(invocation.getStandardOutput(), containsString("/BOOT-INF/classes!/public/public.txt")).     assertThat(invocation.getStandardOutput(), containsString("/BOOT-INF/classes!/resources/resource.txt")).     assertThat(invocation.getStandardOutput(), containsString("/BOOT-INF/classes!/static/static.txt")).     assertThat(invocation.getStandardOutput(), containsString("/BOOT-INF/classes!/templates/template.txt")).     assertThat(invocation.getStandardOutput(), containsString("/BOOT-INF/classes!/root.properties")).     assertThat(invocation.getStandardOutput(), containsString("Goodbye Mama")). }
false;public;0;30;;@Test public void jarCreationWithIncludes() throws Exception {     File jar = new File(this.temp.getRoot(), "test-app.jar").     Invocation invocation = this.cli.invoke("jar", jar.getAbsolutePath(), "--include", "-public/**,-resources/**", "jar.groovy").     invocation.await().     if (!JAVA_9_OR_LATER) {         assertEquals(invocation.getErrorOutput(), 0, invocation.getErrorOutput().length()).     }     assertTrue(jar.exists()).     Process process = new JavaExecutable().processBuilder("-jar", jar.getAbsolutePath()).start().     invocation = new Invocation(process).     invocation.await().     if (!JAVA_9_OR_LATER) {         assertThat(invocation.getErrorOutput(), equalTo("")).     }     assertThat(invocation.getStandardOutput(), containsString("Hello World!")).     assertThat(invocation.getStandardOutput(), not(containsString("/public/public.txt"))).     assertThat(invocation.getStandardOutput(), not(containsString("/resources/resource.txt"))).     assertThat(invocation.getStandardOutput(), containsString("/static/static.txt")).     assertThat(invocation.getStandardOutput(), containsString("/templates/template.txt")).     assertThat(invocation.getStandardOutput(), containsString("Goodbye Mama")). }
false;private,static;1;9;;private static boolean isClassPresent(String name) {     try {         Class.forName(name).         return true.     } catch (Exception ex) {         return false.     } }
