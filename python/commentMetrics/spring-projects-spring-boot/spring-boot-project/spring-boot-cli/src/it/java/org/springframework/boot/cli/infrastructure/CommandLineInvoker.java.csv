commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public Invocation invoke(String... args) throws IOException {     return new Invocation(runCliProcess(args)). }
false;private;1;9;;private Process runCliProcess(String... args) throws IOException {     List<String> command = new ArrayList<>().     command.add(findLaunchScript().getAbsolutePath()).     command.addAll(Arrays.asList(args)).     ProcessBuilder processBuilder = new ProcessBuilder(command).directory(this.workingDirectory).     processBuilder.environment().remove("JAVA_OPTS").     return processBuilder.start(). }
false;private;0;31;;private File findLaunchScript() throws IOException {     File unpacked = new File(this.temp.getRoot(), "unpacked-cli").     if (!unpacked.isDirectory()) {         File zip = new BuildOutput(getClass()).getRootLocation().listFiles((pathname) -> pathname.getName().endsWith("-bin.zip"))[0].         try (ZipInputStream input = new ZipInputStream(new FileInputStream(zip))) {             ZipEntry entry.             while ((entry = input.getNextEntry()) != null) {                 File file = new File(unpacked, entry.getName()).                 if (entry.isDirectory()) {                     file.mkdirs().                 } else {                     file.getParentFile().mkdirs().                     try (FileOutputStream output = new FileOutputStream(file)) {                         StreamUtils.copy(input, output).                         if (entry.getName().endsWith("/bin/spring")) {                             file.setExecutable(true).                         }                     }                 }             }         }     }     File bin = new File(unpacked.listFiles()[0], "bin").     File launchScript = new File(bin, isWindows() ? "spring.bat" : "spring").     Assert.state(launchScript.exists() && launchScript.isFile(), () -> "Could not find CLI launch script " + launchScript.getAbsolutePath()).     return launchScript. }
false;private;0;3;;private boolean isWindows() {     return File.separatorChar == '\\'. }
false;public;0;3;;public String getOutput() {     return postProcessLines(getLines(this.combined)). }
false;public;0;3;;public String getErrorOutput() {     return postProcessLines(getLines(this.err)). }
false;public;0;3;;public String getStandardOutput() {     return postProcessLines(getStandardOutputLines()). }
false;public;0;3;;public List<String> getStandardOutputLines() {     return getLines(this.out). }
false;private;1;10;;private String postProcessLines(List<String> lines) {     StringWriter out = new StringWriter().     PrintWriter printOut = new PrintWriter(out).     for (String line : lines) {         if (!line.startsWith("Maven settings decryption failed")) {             printOut.println(line).         }     }     return out.toString(). }
false;private;1;6;;private List<String> getLines(StringBuffer buffer) {     BufferedReader reader = new BufferedReader(new StringReader(buffer.toString())).     return reader.lines().filter((line) -> !line.startsWith("Picked up ")).collect(Collectors.toList()). }
false;public;0;6;;public int await() throws InterruptedException {     for (Thread streamReader : this.streamReaders) {         streamReader.join().     }     return this.process.waitFor(). }
false;public;0;14;;@Override public void run() {     int read.     try {         while ((read = this.stream.read(this.buffer)) > 0) {             for (StringBuffer output : this.outputs) {                 output.append(new String(this.buffer, 0, read)).             }         }     } catch (IOException ex) {     // Allow thread to die     } }
