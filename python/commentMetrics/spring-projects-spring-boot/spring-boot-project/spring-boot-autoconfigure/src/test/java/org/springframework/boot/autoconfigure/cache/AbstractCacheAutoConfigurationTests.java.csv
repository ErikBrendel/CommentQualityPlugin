commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;6;;protected <T extends CacheManager> T getCacheManager(AssertableApplicationContext loaded, Class<T> type) {     CacheManager cacheManager = loaded.getBean(CacheManager.class).     assertThat(cacheManager).as("Wrong cache manager type").isInstanceOf(type).     return type.cast(cacheManager). }
false;protected;1;21;;@SuppressWarnings("rawtypes") protected ContextConsumer<AssertableApplicationContext> verifyCustomizers(String... expectedCustomizerNames) {     return (context) -> {         CacheManager cacheManager = getCacheManager(context, CacheManager.class).         List<String> expected = new ArrayList<>(Arrays.asList(expectedCustomizerNames)).         Map<String, CacheManagerTestCustomizer> customizer = context.getBeansOfType(CacheManagerTestCustomizer.class).         customizer.forEach((key, value) -> {             if (expected.contains(key)) {                 expected.remove(key).                 assertThat(value.cacheManager).isSameAs(cacheManager).             } else {                 assertThat(value.cacheManager).isNull().             }         }).         assertThat(expected).hasSize(0).     }. }
false;public;0;6;;@Bean public CacheManagerCustomizer<CacheManager> allCacheManagerCustomizer() {     return new CacheManagerTestCustomizer<CacheManager>() {     }. }
false;public;0;6;;@Bean public CacheManagerCustomizer<ConcurrentMapCacheManager> simpleCacheManagerCustomizer() {     return new CacheManagerTestCustomizer<ConcurrentMapCacheManager>() {     }. }
false;public;0;6;;@Bean public CacheManagerCustomizer<SimpleCacheManager> genericCacheManagerCustomizer() {     return new CacheManagerTestCustomizer<SimpleCacheManager>() {     }. }
false;public;0;6;;@Bean public CacheManagerCustomizer<CouchbaseCacheManager> couchbaseCacheManagerCustomizer() {     return new CacheManagerTestCustomizer<CouchbaseCacheManager>() {     }. }
false;public;0;6;;@Bean public CacheManagerCustomizer<RedisCacheManager> redisCacheManagerCustomizer() {     return new CacheManagerTestCustomizer<RedisCacheManager>() {     }. }
false;public;0;6;;@Bean public CacheManagerCustomizer<EhCacheCacheManager> ehcacheCacheManagerCustomizer() {     return new CacheManagerTestCustomizer<EhCacheCacheManager>() {     }. }
false;public;0;6;;@Bean public CacheManagerCustomizer<HazelcastCacheManager> hazelcastCacheManagerCustomizer() {     return new CacheManagerTestCustomizer<HazelcastCacheManager>() {     }. }
false;public;0;6;;@Bean public CacheManagerCustomizer<SpringEmbeddedCacheManager> infinispanCacheManagerCustomizer() {     return new CacheManagerTestCustomizer<SpringEmbeddedCacheManager>() {     }. }
false;public;0;6;;@Bean public CacheManagerCustomizer<CaffeineCacheManager> caffeineCacheManagerCustomizer() {     return new CacheManagerTestCustomizer<CaffeineCacheManager>() {     }. }
false;public;1;7;;@Override public void customize(T cacheManager) {     if (this.cacheManager != null) {         throw new IllegalStateException("Customized invoked twice").     }     this.cacheManager = cacheManager. }
