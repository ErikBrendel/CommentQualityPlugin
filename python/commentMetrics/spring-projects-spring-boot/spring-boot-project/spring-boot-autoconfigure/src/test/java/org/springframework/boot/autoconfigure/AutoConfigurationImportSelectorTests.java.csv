commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.importSelector.setBeanFactory(this.beanFactory).     this.importSelector.setEnvironment(this.environment).     this.importSelector.setResourceLoader(new DefaultResourceLoader()). }
false;public;0;7;;@Test public void importsAreSelectedWhenUsingEnableAutoConfiguration() {     String[] imports = selectImports(BasicEnableAutoConfiguration.class).     assertThat(imports).hasSameSizeAs(SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, getClass().getClassLoader())).     assertThat(this.importSelector.getLastEvent().getExclusions()).isEmpty(). }
false;public;0;8;;@Test public void classExclusionsAreApplied() {     String[] imports = selectImports(EnableAutoConfigurationWithClassExclusions.class).     assertThat(imports).hasSize(getAutoConfigurationClassNames().size() - 1).     assertThat(this.importSelector.getLastEvent().getExclusions()).contains(FreeMarkerAutoConfiguration.class.getName()). }
false;public;0;7;;@Test public void classExclusionsAreAppliedWhenUsingSpringBootApplication() {     String[] imports = selectImports(SpringBootApplicationWithClassExclusions.class).     assertThat(imports).hasSize(getAutoConfigurationClassNames().size() - 1).     assertThat(this.importSelector.getLastEvent().getExclusions()).contains(FreeMarkerAutoConfiguration.class.getName()). }
false;public;0;8;;@Test public void classNamesExclusionsAreApplied() {     String[] imports = selectImports(EnableAutoConfigurationWithClassNameExclusions.class).     assertThat(imports).hasSize(getAutoConfigurationClassNames().size() - 1).     assertThat(this.importSelector.getLastEvent().getExclusions()).contains(MustacheAutoConfiguration.class.getName()). }
false;public;0;8;;@Test public void classNamesExclusionsAreAppliedWhenUsingSpringBootApplication() {     String[] imports = selectImports(SpringBootApplicationWithClassNameExclusions.class).     assertThat(imports).hasSize(getAutoConfigurationClassNames().size() - 1).     assertThat(this.importSelector.getLastEvent().getExclusions()).contains(MustacheAutoConfiguration.class.getName()). }
false;public;0;9;;@Test public void propertyExclusionsAreApplied() {     this.environment.setProperty("spring.autoconfigure.exclude", FreeMarkerAutoConfiguration.class.getName()).     String[] imports = selectImports(BasicEnableAutoConfiguration.class).     assertThat(imports).hasSize(getAutoConfigurationClassNames().size() - 1).     assertThat(this.importSelector.getLastEvent().getExclusions()).contains(FreeMarkerAutoConfiguration.class.getName()). }
false;public;0;7;;@Test public void severalPropertyExclusionsAreApplied() {     this.environment.setProperty("spring.autoconfigure.exclude", FreeMarkerAutoConfiguration.class.getName() + "," + MustacheAutoConfiguration.class.getName()).     testSeveralPropertyExclusionsAreApplied(). }
false;public;0;7;;@Test public void severalPropertyExclusionsAreAppliedWithExtraSpaces() {     this.environment.setProperty("spring.autoconfigure.exclude", FreeMarkerAutoConfiguration.class.getName() + " , " + MustacheAutoConfiguration.class.getName() + " ").     testSeveralPropertyExclusionsAreApplied(). }
false;public;0;8;;@Test public void severalPropertyYamlExclusionsAreApplied() {     this.environment.setProperty("spring.autoconfigure.exclude[0]", FreeMarkerAutoConfiguration.class.getName()).     this.environment.setProperty("spring.autoconfigure.exclude[1]", MustacheAutoConfiguration.class.getName()).     testSeveralPropertyExclusionsAreApplied(). }
false;private;0;7;;private void testSeveralPropertyExclusionsAreApplied() {     String[] imports = selectImports(BasicEnableAutoConfiguration.class).     assertThat(imports).hasSize(getAutoConfigurationClassNames().size() - 2).     assertThat(this.importSelector.getLastEvent().getExclusions()).contains(FreeMarkerAutoConfiguration.class.getName(), MustacheAutoConfiguration.class.getName()). }
false;public;0;12;;@Test public void combinedExclusionsAreApplied() {     this.environment.setProperty("spring.autoconfigure.exclude", ThymeleafAutoConfiguration.class.getName()).     String[] imports = selectImports(EnableAutoConfigurationWithClassAndClassNameExclusions.class).     assertThat(imports).hasSize(getAutoConfigurationClassNames().size() - 3).     assertThat(this.importSelector.getLastEvent().getExclusions()).contains(FreeMarkerAutoConfiguration.class.getName(), MustacheAutoConfiguration.class.getName(), ThymeleafAutoConfiguration.class.getName()). }
false;public;0;5;;@Test public void nonAutoConfigurationClassExclusionsShouldThrowException() {     assertThatIllegalStateException().isThrownBy(() -> selectImports(EnableAutoConfigurationWithFaultyClassExclude.class)). }
false;public;0;5;;@Test public void nonAutoConfigurationClassNameExclusionsWhenPresentOnClassPathShouldThrowException() {     assertThatIllegalStateException().isThrownBy(() -> selectImports(EnableAutoConfigurationWithFaultyClassNameExclude.class)). }
false;public;0;8;;@Test public void nonAutoConfigurationPropertyExclusionsWhenPresentOnClassPathShouldThrowException() {     this.environment.setProperty("spring.autoconfigure.exclude", "org.springframework.boot.autoconfigure." + "AutoConfigurationImportSelectorTests.TestConfiguration").     assertThatIllegalStateException().isThrownBy(() -> selectImports(BasicEnableAutoConfiguration.class)). }
false;public;0;10;;@Test public void nameAndPropertyExclusionsWhenNotPresentOnClasspathShouldNotThrowException() {     this.environment.setProperty("spring.autoconfigure.exclude", "org.springframework.boot.autoconfigure.DoesNotExist2").     selectImports(EnableAutoConfigurationWithAbsentClassNameExclude.class).     assertThat(this.importSelector.getLastEvent().getExclusions()).containsExactlyInAnyOrder("org.springframework.boot.autoconfigure.DoesNotExist1", "org.springframework.boot.autoconfigure.DoesNotExist2"). }
false;public;0;10;;@Test public void filterShouldFilterImports() {     String[] defaultImports = selectImports(BasicEnableAutoConfiguration.class).     this.filters.add(new TestAutoConfigurationImportFilter(defaultImports, 1)).     this.filters.add(new TestAutoConfigurationImportFilter(defaultImports, 3, 4)).     String[] filtered = selectImports(BasicEnableAutoConfiguration.class).     assertThat(filtered).hasSize(defaultImports.length - 3).     assertThat(filtered).doesNotContain(defaultImports[1], defaultImports[3], defaultImports[4]). }
false;public;0;8;;@Test public void filterShouldSupportAware() {     TestAutoConfigurationImportFilter filter = new TestAutoConfigurationImportFilter(new String[] {}).     this.filters.add(filter).     selectImports(BasicEnableAutoConfiguration.class).     assertThat(filter.getBeanFactory()).isEqualTo(this.beanFactory). }
false;private;1;3;;private String[] selectImports(Class<?> source) {     return this.importSelector.selectImports(new StandardAnnotationMetadata(source)). }
false;private;0;4;;private List<String> getAutoConfigurationClassNames() {     return SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class, getClass().getClassLoader()). }
false;protected;0;4;;@Override protected List<AutoConfigurationImportFilter> getAutoConfigurationImportFilters() {     return AutoConfigurationImportSelectorTests.this.filters. }
false;protected;0;4;;@Override protected List<AutoConfigurationImportListener> getAutoConfigurationImportListeners() {     return Collections.singletonList((event) -> this.lastEvent = event). }
false;public;0;3;;public AutoConfigurationImportEvent getLastEvent() {     return this.lastEvent. }
false;public;2;9;;@Override public boolean[] match(String[] autoConfigurationClasses, AutoConfigurationMetadata autoConfigurationMetadata) {     boolean[] result = new boolean[autoConfigurationClasses.length].     for (int i = 0. i < result.length. i++) {         result[i] = !this.nonMatching.contains(autoConfigurationClasses[i]).     }     return result. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     this.beanFactory = beanFactory. }
false;public;0;3;;public BeanFactory getBeanFactory() {     return this.beanFactory. }
