commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void dataSourceInitialized() {     this.contextRunner.withPropertyValues("spring.datasource.initialization-mode:always").run((context) -> {         assertThat(context).hasSingleBean(DataSource.class).         DataSource dataSource = context.getBean(DataSource.class).         assertThat(dataSource).isInstanceOf(HikariDataSource.class).         assertDataSourceIsInitialized(dataSource).     }). }
false;public;0;9;;@Test public void initializationAppliesToCustomDataSource() {     this.contextRunner.withUserConfiguration(OneDataSource.class).withPropertyValues("spring.datasource.initialization-mode:always").run((context) -> {         assertThat(context).hasSingleBean(DataSource.class).         assertDataSourceIsInitialized(context.getBean(DataSource.class)).     }). }
false;private;1;5;;private void assertDataSourceIsInitialized(DataSource dataSource) {     JdbcOperations template = new JdbcTemplate(dataSource).     assertThat(template.queryForObject("SELECT COUNT(*) from BAR", Integer.class)).isEqualTo(1). }
false;public;0;16;;@Test public void dataSourceInitializedWithExplicitScript() {     this.contextRunner.withPropertyValues("spring.datasource.initialization-mode:always", "spring.datasource.schema:" + getRelativeLocationFor("schema.sql"), "spring.datasource.data:" + getRelativeLocationFor("data.sql")).run((context) -> {         DataSource dataSource = context.getBean(DataSource.class).         assertThat(dataSource).isInstanceOf(HikariDataSource.class).         assertThat(dataSource).isNotNull().         JdbcOperations template = new JdbcTemplate(dataSource).         assertThat(template.queryForObject("SELECT COUNT(*) from FOO", Integer.class)).isEqualTo(1).     }). }
false;public;0;18;;@Test public void dataSourceInitializedWithMultipleScripts() {     this.contextRunner.withPropertyValues("spring.datasource.initialization-mode:always", "spring.datasource.schema:" + getRelativeLocationFor("schema.sql") + "," + getRelativeLocationFor("another.sql"), "spring.datasource.data:" + getRelativeLocationFor("data.sql")).run((context) -> {         DataSource dataSource = context.getBean(DataSource.class).         assertThat(dataSource).isInstanceOf(HikariDataSource.class).         assertThat(dataSource).isNotNull().         JdbcOperations template = new JdbcTemplate(dataSource).         assertThat(template.queryForObject("SELECT COUNT(*) from FOO", Integer.class)).isEqualTo(1).         assertThat(template.queryForObject("SELECT COUNT(*) from SPAM", Integer.class)).isEqualTo(0).     }). }
false;public;0;22;;@Test public void dataSourceInitializedWithExplicitSqlScriptEncoding() {     this.contextRunner.withPropertyValues("spring.datasource.initialization-mode:always", "spring.datasource.sqlScriptEncoding:UTF-8", "spring.datasource.schema:" + getRelativeLocationFor("encoding-schema.sql"), "spring.datasource.data:" + getRelativeLocationFor("encoding-data.sql")).run((context) -> {         DataSource dataSource = context.getBean(DataSource.class).         assertThat(dataSource).isInstanceOf(HikariDataSource.class).         assertThat(dataSource).isNotNull().         JdbcOperations template = new JdbcTemplate(dataSource).         assertThat(template.queryForObject("SELECT COUNT(*) from BAR", Integer.class)).isEqualTo(2).         assertThat(template.queryForObject("SELECT name from BAR WHERE id=1", String.class)).isEqualTo("bar").         assertThat(template.queryForObject("SELECT name from BAR WHERE id=2", String.class)).isEqualTo("ばー").     }). }
false;public;0;4;;@Test public void initializationDisabled() {     this.contextRunner.run(assertInitializationIsDisabled()). }
false;public;0;12;;@Test public void initializationDoesNotApplyWithSeveralDataSources() {     this.contextRunner.withUserConfiguration(TwoDataSources.class).withPropertyValues("spring.datasource.initialization-mode:always").run((context) -> {         assertThat(context.getBeanNamesForType(DataSource.class)).hasSize(2).         assertDataSourceNotInitialized(context.getBean("oneDataSource", DataSource.class)).         assertDataSourceNotInitialized(context.getBean("twoDataSource", DataSource.class)).     }). }
false;private;0;8;;private ContextConsumer<AssertableApplicationContext> assertInitializationIsDisabled() {     return (context) -> {         assertThat(context).hasSingleBean(DataSource.class).         DataSource dataSource = context.getBean(DataSource.class).         context.publishEvent(new DataSourceSchemaCreatedEvent(dataSource)).         assertDataSourceNotInitialized(dataSource).     }. }
false;private;1;10;;private void assertDataSourceNotInitialized(DataSource dataSource) {     JdbcOperations template = new JdbcTemplate(dataSource).     assertThatExceptionOfType(BadSqlGrammarException.class).isThrownBy(() -> template.queryForObject("SELECT COUNT(*) from BAR", Integer.class)).satisfies((ex) -> {         SQLException sqlException = ex.getSQLException().         // user lacks privilege or object not found         int expectedCode = -5501.         assertThat(sqlException.getErrorCode()).isEqualTo(expectedCode).     }). }
false;public;0;15;;@Test public void dataSourceInitializedWithSchemaCredentials() {     this.contextRunner.withPropertyValues("spring.datasource.initialization-mode:always", "spring.datasource.sqlScriptEncoding:UTF-8", "spring.datasource.schema:" + getRelativeLocationFor("encoding-schema.sql"), "spring.datasource.data:" + getRelativeLocationFor("encoding-data.sql"), "spring.datasource.schema-username:admin", "spring.datasource.schema-password:admin").run((context) -> {         assertThat(context).hasFailed().         assertThat(context.getStartupFailure()).isInstanceOf(BeanCreationException.class).     }). }
false;public;0;15;;@Test public void dataSourceInitializedWithDataCredentials() {     this.contextRunner.withPropertyValues("spring.datasource.initialization-mode:always", "spring.datasource.sqlScriptEncoding:UTF-8", "spring.datasource.schema:" + getRelativeLocationFor("encoding-schema.sql"), "spring.datasource.data:" + getRelativeLocationFor("encoding-data.sql"), "spring.datasource.data-username:admin", "spring.datasource.data-password:admin").run((context) -> {         assertThat(context).hasFailed().         assertThat(context.getStartupFailure()).isInstanceOf(BeanCreationException.class).     }). }
false;public;0;24;;@Test public void multipleScriptsAppliedInLexicalOrder() {     new ApplicationContextRunner(() -> {         AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().         context.setResourceLoader(new ReverseOrderResourceLoader(new DefaultResourceLoader())).         return context.     }).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).withPropertyValues("spring.datasource.initialization-mode=always", "spring.datasource.url:jdbc:hsqldb:mem:testdb-" + new Random().nextInt(), "spring.datasource.schema:classpath*:" + getRelativeLocationFor("lexical-schema-*.sql"), "spring.datasource.data:classpath*:" + getRelativeLocationFor("data.sql")).run((context) -> {         DataSource dataSource = context.getBean(DataSource.class).         assertThat(dataSource).isInstanceOf(HikariDataSource.class).         assertThat(dataSource).isNotNull().         JdbcOperations template = new JdbcTemplate(dataSource).         assertThat(template.queryForObject("SELECT COUNT(*) from FOO", Integer.class)).isEqualTo(1).     }). }
false;public;0;15;;@Test public void testDataSourceInitializedWithInvalidSchemaResource() {     this.contextRunner.withPropertyValues("spring.datasource.initialization-mode:always", "spring.datasource.schema:classpath:does/not/exist.sql").run((context) -> {         assertThat(context).hasFailed().         assertThat(context.getStartupFailure()).isInstanceOf(BeanCreationException.class).         assertThat(context.getStartupFailure()).hasMessageContaining("does/not/exist.sql").         assertThat(context.getStartupFailure()).hasMessageContaining("spring.datasource.schema").     }). }
false;public;0;17;;@Test public void dataSourceInitializedWithInvalidDataResource() {     this.contextRunner.withPropertyValues("spring.datasource.initialization-mode:always", "spring.datasource.schema:" + getRelativeLocationFor("schema.sql"), "spring.datasource.data:classpath:does/not/exist.sql").run((context) -> {         assertThat(context).hasFailed().         assertThat(context.getStartupFailure()).isInstanceOf(BeanCreationException.class).         assertThat(context.getStartupFailure()).hasMessageContaining("does/not/exist.sql").         assertThat(context.getStartupFailure()).hasMessageContaining("spring.datasource.data").     }). }
false;private;1;3;;private String getRelativeLocationFor(String resource) {     return ClassUtils.addResourcePathToPackagePath(getClass(), resource). }
false;public;0;4;;@Bean public DataSource oneDataSource() {     return new TestDataSource(). }
false;public;0;4;;@Bean public DataSource twoDataSource() {     return new TestDataSource(). }
false;public;1;4;;@Override public Resource getResource(String location) {     return this.resolver.getResource(location). }
false;public;0;4;;@Override public ClassLoader getClassLoader() {     return this.resolver.getClassLoader(). }
false;public;1;7;;@Override public Resource[] getResources(String locationPattern) throws IOException {     Resource[] resources = this.resolver.getResources(locationPattern).     Arrays.sort(resources, Comparator.comparing(Resource::getFilename).reversed()).     return resources. }
