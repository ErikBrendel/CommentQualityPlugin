commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;5;;@Test public void testDefaultRepositoryConfiguration() {     load(TestConfiguration.class).     assertThat(this.context.getBean(CountryRepository.class)).isNotNull(). }
false;public;0;6;;@Test public void testMixedRepositoryConfiguration() {     load(MixedConfiguration.class).     assertThat(this.context.getBean(CountryRepository.class)).isNotNull().     assertThat(this.context.getBean(CityRepository.class)).isNotNull(). }
false;public;0;5;;@Test public void testJpaRepositoryConfigurationWithNeo4jTemplate() {     load(JpaConfiguration.class).     assertThat(this.context.getBean(CityRepository.class)).isNotNull(). }
false;public;0;6;;@Test @Ignore public void testJpaRepositoryConfigurationWithNeo4jOverlap() {     load(OverlapConfiguration.class).     assertThat(this.context.getBean(CityRepository.class)).isNotNull(). }
false;public;0;5;;@Test public void testJpaRepositoryConfigurationWithNeo4jOverlapDisabled() {     load(OverlapConfiguration.class, "spring.data.neo4j.repositories.enabled:false").     assertThat(this.context.getBean(CityRepository.class)).isNotNull(). }
false;private;2;13;;private void load(Class<?> config, String... environment) {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.setClassLoader(new FilteredClassLoader(EmbeddedDriver.class)).     TestPropertyValues.of(environment).and("spring.datasource.initialization-mode=never").applyTo(context).     context.register(config).     context.register(DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class, JpaRepositoriesAutoConfiguration.class, Neo4jDataAutoConfiguration.class, Neo4jRepositoriesAutoConfiguration.class).     context.refresh().     this.context = context. }
