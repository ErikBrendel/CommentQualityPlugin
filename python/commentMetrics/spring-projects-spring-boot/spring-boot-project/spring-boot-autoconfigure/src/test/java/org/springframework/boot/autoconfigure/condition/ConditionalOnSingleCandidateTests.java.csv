commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;5;;@Test public void singleCandidateNoCandidate() {     load(OnBeanSingleCandidateConfiguration.class).     assertThat(this.context.containsBean("baz")).isFalse(). }
false;public;0;6;;@Test public void singleCandidateOneCandidate() {     load(FooConfiguration.class, OnBeanSingleCandidateConfiguration.class).     assertThat(this.context.containsBean("baz")).isTrue().     assertThat(this.context.getBean("baz")).isEqualTo("foo"). }
false;public;0;11;;@Test public void singleCandidateInAncestorsOneCandidateInCurrent() {     load().     AnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext().     child.register(FooConfiguration.class, OnBeanSingleCandidateInAncestorsConfiguration.class).     child.setParent(this.context).     child.refresh().     assertThat(child.containsBean("baz")).isFalse().     child.close(). }
false;public;0;11;;@Test public void singleCandidateInAncestorsOneCandidateInParent() {     load(FooConfiguration.class).     AnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext().     child.register(OnBeanSingleCandidateInAncestorsConfiguration.class).     child.setParent(this.context).     child.refresh().     assertThat(child.containsBean("baz")).isTrue().     assertThat(child.getBean("baz")).isEqualTo("foo").     child.close(). }
false;public;0;15;;@Test public void singleCandidateInAncestorsOneCandidateInGrandparent() {     load(FooConfiguration.class).     AnnotationConfigApplicationContext parent = new AnnotationConfigApplicationContext().     parent.setParent(this.context).     parent.refresh().     AnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext().     child.register(OnBeanSingleCandidateInAncestorsConfiguration.class).     child.setParent(parent).     child.refresh().     assertThat(child.containsBean("baz")).isTrue().     assertThat(child.getBean("baz")).isEqualTo("foo").     child.close().     parent.close(). }
false;public;0;6;;@Test public void singleCandidateMultipleCandidates() {     load(FooConfiguration.class, BarConfiguration.class, OnBeanSingleCandidateConfiguration.class).     assertThat(this.context.containsBean("baz")).isFalse(). }
false;public;0;7;;@Test public void singleCandidateMultipleCandidatesOnePrimary() {     load(FooPrimaryConfiguration.class, BarConfiguration.class, OnBeanSingleCandidateConfiguration.class).     assertThat(this.context.containsBean("baz")).isTrue().     assertThat(this.context.getBean("baz")).isEqualTo("foo"). }
false;public;0;6;;@Test public void singleCandidateMultipleCandidatesMultiplePrimary() {     load(FooPrimaryConfiguration.class, BarPrimaryConfiguration.class, OnBeanSingleCandidateConfiguration.class).     assertThat(this.context.containsBean("baz")).isFalse(). }
false;public;0;8;;@Test public void invalidAnnotationTwoTypes() {     assertThatIllegalStateException().isThrownBy(() -> load(OnBeanSingleCandidateTwoTypesConfiguration.class)).withCauseInstanceOf(IllegalArgumentException.class).withMessageContaining(OnBeanSingleCandidateTwoTypesConfiguration.class.getName()). }
false;public;0;8;;@Test public void invalidAnnotationNoType() {     assertThatIllegalStateException().isThrownBy(() -> load(OnBeanSingleCandidateNoTypeConfiguration.class)).withCauseInstanceOf(IllegalArgumentException.class).withMessageContaining(OnBeanSingleCandidateNoTypeConfiguration.class.getName()). }
false;public;0;11;;@Test public void singleCandidateMultipleCandidatesInContextHierarchy() {     load(FooPrimaryConfiguration.class, BarConfiguration.class).     try (AnnotationConfigApplicationContext child = new AnnotationConfigApplicationContext()) {         child.setParent(this.context).         child.register(OnBeanSingleCandidateConfiguration.class).         child.refresh().         assertThat(child.containsBean("baz")).isTrue().         assertThat(child.getBean("baz")).isEqualTo("foo").     } }
false;private;1;6;;private void load(Class<?>... classes) {     if (classes.length > 0) {         this.context.register(classes).     }     this.context.refresh(). }
false;public;1;4;;@Bean public String baz(String s) {     return s. }
false;public;1;4;;@Bean public String baz(String s) {     return s. }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;5;;@Bean @Primary public String foo() {     return "foo". }
false;public;0;4;;@Bean public String bar() {     return "bar". }
false;public;0;5;;@Bean @Primary public String bar() {     return "bar". }
