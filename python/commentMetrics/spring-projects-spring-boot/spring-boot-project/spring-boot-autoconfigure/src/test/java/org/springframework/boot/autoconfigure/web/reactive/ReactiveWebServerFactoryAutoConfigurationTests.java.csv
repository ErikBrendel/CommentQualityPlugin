commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void createFromConfigClass() {     this.contextRunner.withUserConfiguration(MockWebServerConfiguration.class, HttpHandlerConfiguration.class).run((context) -> {         assertThat(context.getBeansOfType(ReactiveWebServerFactory.class)).hasSize(1).         assertThat(context.getBeansOfType(WebServerFactoryCustomizer.class)).hasSize(1).         assertThat(context.getBeansOfType(ReactiveWebServerFactoryCustomizer.class)).hasSize(1).     }). }
false;public;0;7;;@Test public void missingHttpHandler() {     this.contextRunner.withUserConfiguration(MockWebServerConfiguration.class).run((context) -> assertThat(context.getStartupFailure()).isInstanceOf(ApplicationContextException.class).hasMessageContaining("missing HttpHandler bean")). }
false;public;0;10;;@Test public void multipleHttpHandler() {     this.contextRunner.withUserConfiguration(MockWebServerConfiguration.class, HttpHandlerConfiguration.class, TooManyHttpHandlers.class).run((context) -> assertThat(context.getStartupFailure()).isInstanceOf(ApplicationContextException.class).hasMessageContaining("multiple HttpHandler beans : " + "httpHandler,additionalHttpHandler")). }
false;public;0;8;;@Test public void customizeReactiveWebServer() {     this.contextRunner.withUserConfiguration(MockWebServerConfiguration.class, HttpHandlerConfiguration.class, ReactiveWebServerCustomization.class).run((context) -> assertThat(context.getBean(MockReactiveWebServerFactory.class).getPort()).isEqualTo(9000)). }
false;public;0;9;;@Test public void defaultWebServerIsTomcat() {     // Tomcat should be chosen over Netty if the Tomcat library is present.     this.contextRunner.withUserConfiguration(HttpHandlerConfiguration.class).withPropertyValues("server.port=0").run((context) -> assertThat(context.getBean(ReactiveWebServerFactory.class)).isInstanceOf(TomcatReactiveWebServerFactory.class)). }
false;public;0;14;;@Test public void tomcatConnectorCustomizerBeanIsAddedToFactory() {     ReactiveWebApplicationContextRunner runner = new ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebApplicationContext::new).withConfiguration(AutoConfigurations.of(ReactiveWebServerFactoryAutoConfiguration.class)).withUserConfiguration(TomcatConnectorCustomizerConfiguration.class).     runner.run((context) -> {         TomcatReactiveWebServerFactory factory = context.getBean(TomcatReactiveWebServerFactory.class).         assertThat(factory.getTomcatConnectorCustomizers()).hasSize(1).     }). }
false;public;0;14;;@Test public void tomcatContextCustomizerBeanIsAddedToFactory() {     ReactiveWebApplicationContextRunner runner = new ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebApplicationContext::new).withConfiguration(AutoConfigurations.of(ReactiveWebServerFactoryAutoConfiguration.class)).withUserConfiguration(TomcatContextCustomizerConfiguration.class).     runner.run((context) -> {         TomcatReactiveWebServerFactory factory = context.getBean(TomcatReactiveWebServerFactory.class).         assertThat(factory.getTomcatContextCustomizers()).hasSize(1).     }). }
false;public;0;4;;@Bean public HttpHandler httpHandler() {     return Mockito.mock(HttpHandler.class). }
false;public;0;4;;@Bean public HttpHandler additionalHttpHandler() {     return Mockito.mock(HttpHandler.class). }
false;public;0;4;;@Bean public WebServerFactoryCustomizer<ConfigurableReactiveWebServerFactory> reactiveWebServerCustomizer() {     return (factory) -> factory.setPort(9000). }
false;public;0;4;;@Bean public MockReactiveWebServerFactory mockReactiveWebServerFactory() {     return new MockReactiveWebServerFactory(). }
false;public;0;5;;@Bean public TomcatConnectorCustomizer connectorCustomizer() {     return (connector) -> {     }. }
false;public;0;5;;@Bean public TomcatContextCustomizer contextCustomizer() {     return (context) -> {     }. }
