commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void initializeEmbeddedByDefault() {     try (HikariDataSource dataSource = createDataSource()) {         DataSourceInitializer initializer = new DataSourceInitializer(dataSource, new DataSourceProperties()).         JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource).         assertThat(initializer.createSchema()).isTrue().         assertNumberOfRows(jdbcTemplate, 0).         initializer.initSchema().         assertNumberOfRows(jdbcTemplate, 1).     } }
false;public;0;14;;@Test public void initializeWithModeAlways() {     try (HikariDataSource dataSource = createDataSource()) {         DataSourceProperties properties = new DataSourceProperties().         properties.setInitializationMode(DataSourceInitializationMode.ALWAYS).         DataSourceInitializer initializer = new DataSourceInitializer(dataSource, properties).         JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource).         assertThat(initializer.createSchema()).isTrue().         assertNumberOfRows(jdbcTemplate, 0).         initializer.initSchema().         assertNumberOfRows(jdbcTemplate, 1).     } }
false;private;2;4;;private void assertNumberOfRows(JdbcTemplate jdbcTemplate, int count) {     assertThat(jdbcTemplate.queryForObject("SELECT COUNT(*) from BAR", Integer.class)).isEqualTo(count). }
false;public;0;10;;@Test public void initializeWithModeNever() {     try (HikariDataSource dataSource = createDataSource()) {         DataSourceProperties properties = new DataSourceProperties().         properties.setInitializationMode(DataSourceInitializationMode.NEVER).         DataSourceInitializer initializer = new DataSourceInitializer(dataSource, properties).         assertThat(initializer.createSchema()).isFalse().     } }
false;public;0;13;;@Test public void initializeOnlyEmbeddedByDefault() throws SQLException {     DatabaseMetaData metadata = mock(DatabaseMetaData.class).     given(metadata.getDatabaseProductName()).willReturn("MySQL").     Connection connection = mock(Connection.class).     given(connection.getMetaData()).willReturn(metadata).     DataSource dataSource = mock(DataSource.class).     given(dataSource.getConnection()).willReturn(connection).     DataSourceInitializer initializer = new DataSourceInitializer(dataSource, new DataSourceProperties()).     assertThat(initializer.createSchema()).isFalse().     verify(dataSource).getConnection(). }
false;private;0;4;;private HikariDataSource createDataSource() {     return DataSourceBuilder.create().type(HikariDataSource.class).url("jdbc:h2:mem:" + UUID.randomUUID()).build(). }
