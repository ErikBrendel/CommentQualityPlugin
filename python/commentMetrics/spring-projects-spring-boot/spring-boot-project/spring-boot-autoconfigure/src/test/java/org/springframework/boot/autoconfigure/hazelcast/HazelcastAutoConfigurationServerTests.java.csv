commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void defaultConfigFile() {     // hazelcast.xml present in root classpath     this.contextRunner.run((context) -> {         Config config = context.getBean(HazelcastInstance.class).getConfig().         assertThat(config.getConfigurationUrl()).isEqualTo(new ClassPathResource("hazelcast.xml").getURL()).     }). }
false;public;0;10;;@Test public void systemProperty() {     this.contextRunner.withSystemProperties(HazelcastServerConfiguration.CONFIG_SYSTEM_PROPERTY + "=classpath:org/springframework/boot/autoconfigure/hazelcast/hazelcast-specific.xml").run((context) -> {         Config config = context.getBean(HazelcastInstance.class).getConfig().         assertThat(config.getQueueConfigs().keySet()).containsOnly("foobar").     }). }
false;public;0;13;;@Test public void explicitConfigFile() {     this.contextRunner.withPropertyValues("spring.hazelcast.config=org/springframework/boot/autoconfigure/hazelcast/" + "hazelcast-specific.xml").run((context) -> {         Config config = context.getBean(HazelcastInstance.class).getConfig().         assertThat(config.getConfigurationFile()).isEqualTo(new ClassPathResource("org/springframework/boot/autoconfigure/hazelcast" + "/hazelcast-specific.xml").getFile()).     }). }
false;public;0;10;;@Test public void explicitConfigUrl() {     this.contextRunner.withPropertyValues("spring.hazelcast.config=hazelcast-default.xml").run((context) -> {         Config config = context.getBean(HazelcastInstance.class).getConfig().         assertThat(config.getConfigurationUrl()).isEqualTo(new ClassPathResource("hazelcast-default.xml").getURL()).     }). }
false;public;0;8;;@Test public void unknownConfigFile() {     this.contextRunner.withPropertyValues("spring.hazelcast.config=foo/bar/unknown.xml").run((context) -> assertThat(context).getFailure().isInstanceOf(BeanCreationException.class).hasMessageContaining("foo/bar/unknown.xml")). }
false;public;0;20;;@Test public void configInstanceWithName() {     Config config = new Config("my-test-instance").     HazelcastInstance existing = Hazelcast.newHazelcastInstance(config).     try {         this.contextRunner.withUserConfiguration(HazelcastConfigWithName.class).withPropertyValues("spring.hazelcast.config=this-is-ignored.xml").run((context) -> {             HazelcastInstance hazelcast = context.getBean(HazelcastInstance.class).             assertThat(hazelcast.getConfig().getInstanceName()).isEqualTo("my-test-instance").             // Should reuse any existing instance by default.             assertThat(hazelcast).isEqualTo(existing).         }).     } finally {         existing.shutdown().     } }
false;public;0;10;;@Test public void configInstanceWithoutName() {     this.contextRunner.withUserConfiguration(HazelcastConfigNoName.class).withPropertyValues("spring.hazelcast.config=this-is-ignored.xml").run((context) -> {         Config config = context.getBean(HazelcastInstance.class).getConfig().         Map<String, QueueConfig> queueConfigs = config.getQueueConfigs().         assertThat(queueConfigs.keySet()).containsOnly("another-queue").     }). }
false;public;0;4;;@Bean public Config myHazelcastConfig() {     return new Config("my-test-instance"). }
false;public;0;6;;@Bean public Config anotherHazelcastConfig() {     Config config = new Config().     config.addQueueConfig(new QueueConfig("another-queue")).     return config. }
