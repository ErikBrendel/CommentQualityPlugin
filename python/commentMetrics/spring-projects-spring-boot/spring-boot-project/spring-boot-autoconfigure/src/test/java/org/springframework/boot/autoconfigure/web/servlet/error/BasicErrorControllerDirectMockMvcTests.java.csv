commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void close() {     ApplicationContextTestUtils.closeAll(this.wac). }
false;public;1;4;;public void setup(ConfigurableWebApplicationContext context) {     this.wac = context.     this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build(). }
false;public;0;11;;@Test public void errorPageAvailableWithParentContext() throws Exception {     setup((ConfigurableWebApplicationContext) new SpringApplicationBuilder(ParentConfiguration.class).child(ChildConfiguration.class).run("--server.port=0")).     MvcResult response = this.mockMvc.perform(get("/error").accept(MediaType.TEXT_HTML)).andExpect(status().is5xxServerError()).andReturn().     String content = response.getResponse().getContentAsString().     assertThat(content).contains("status=999"). }
false;public;0;10;;@Test public void errorPageAvailableWithMvcIncluded() throws Exception {     setup((ConfigurableWebApplicationContext) new SpringApplication(WebMvcIncludedConfiguration.class).run("--server.port=0")).     MvcResult response = this.mockMvc.perform(get("/error").accept(MediaType.TEXT_HTML)).andExpect(status().is5xxServerError()).andReturn().     String content = response.getResponse().getContentAsString().     assertThat(content).contains("status=999"). }
false;public;0;8;;@Test public void errorPageNotAvailableWithWhitelabelDisabled() throws Exception {     setup((ConfigurableWebApplicationContext) new SpringApplication(WebMvcIncludedConfiguration.class).run("--server.port=0", "--server.error.whitelabel.enabled=false")).     assertThatExceptionOfType(ServletException.class).isThrownBy(() -> this.mockMvc.perform(get("/error").accept(MediaType.TEXT_HTML))). }
false;public;0;10;;@Test public void errorControllerWithAop() throws Exception {     setup((ConfigurableWebApplicationContext) new SpringApplication(WithAopConfiguration.class).run("--server.port=0")).     MvcResult response = this.mockMvc.perform(get("/error").accept(MediaType.TEXT_HTML)).andExpect(status().is5xxServerError()).andReturn().     String content = response.getResponse().getContentAsString().     assertThat(content).contains("status=999"). }
true;public,static;1;3;// For manual testing ;// For manual testing public static void main(String[] args) {     SpringApplication.run(WebMvcIncludedConfiguration.class, args). }
true;public,static;1;3;// For manual testing ;// For manual testing public static void main(String[] args) {     SpringApplication.run(VanillaConfiguration.class, args). }
true;public,static;1;4;// For manual testing ;// For manual testing public static void main(String[] args) {     new SpringApplicationBuilder(ParentConfiguration.class).child(ChildConfiguration.class).run(args). }
false;private;0;3;;@Pointcut("within(@org.springframework.stereotype.Controller *)") private void controllerPointCut() { }
false;public;1;4;;@Around("controllerPointCut()") public Object mvcAdvice(ProceedingJoinPoint pjp) throws Throwable {     return pjp.proceed(). }
