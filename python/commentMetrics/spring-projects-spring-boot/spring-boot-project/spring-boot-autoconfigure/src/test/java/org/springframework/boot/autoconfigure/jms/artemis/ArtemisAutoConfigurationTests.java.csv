commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void connectionFactoryIsCachedByDefault() {     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(ConnectionFactory.class).         assertThat(context).hasSingleBean(CachingConnectionFactory.class).         CachingConnectionFactory connectionFactory = context.getBean(CachingConnectionFactory.class).         assertThat(connectionFactory.getTargetConnectionFactory()).isInstanceOf(ActiveMQConnectionFactory.class).         assertThat(connectionFactory.isCacheConsumers()).isFalse().         assertThat(connectionFactory.isCacheProducers()).isTrue().         assertThat(connectionFactory.getSessionCacheSize()).isEqualTo(1).     }). }
false;public;0;16;;@Test public void connectionFactoryCachingCanBeCustomized() {     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).withPropertyValues("spring.jms.cache.consumers=true", "spring.jms.cache.producers=false", "spring.jms.cache.session-cache-size=10").run((context) -> {         assertThat(context).hasSingleBean(ConnectionFactory.class).         assertThat(context).hasSingleBean(CachingConnectionFactory.class).         CachingConnectionFactory connectionFactory = context.getBean(CachingConnectionFactory.class).         assertThat(connectionFactory.isCacheConsumers()).isTrue().         assertThat(connectionFactory.isCacheProducers()).isFalse().         assertThat(connectionFactory.getSessionCacheSize()).isEqualTo(10).     }). }
false;public;0;10;;@Test public void connectionFactoryCachingCanBeDisabled() {     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).withPropertyValues("spring.jms.cache.enabled=false").run((context) -> {         assertThat(context).hasSingleBean(ConnectionFactory.class).         assertThat(context).doesNotHaveBean(CachingConnectionFactory.class).         assertThat(context.getBean(ConnectionFactory.class)).isInstanceOf(ActiveMQConnectionFactory.class).     }). }
false;public;0;17;;@Test public void nativeConnectionFactory() {     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).withPropertyValues("spring.artemis.mode:native").run((context) -> {         JmsTemplate jmsTemplate = context.getBean(JmsTemplate.class).         ConnectionFactory connectionFactory = context.getBean(ConnectionFactory.class).         assertThat(connectionFactory).isEqualTo(jmsTemplate.getConnectionFactory()).         ActiveMQConnectionFactory activeMQConnectionFactory = getActiveMQConnectionFactory(connectionFactory).         assertNettyConnectionFactory(activeMQConnectionFactory, "localhost", 61616).         assertThat(activeMQConnectionFactory.getUser()).isNull().         assertThat(activeMQConnectionFactory.getPassword()).isNull().     }). }
false;public;0;10;;@Test public void nativeConnectionFactoryCustomHost() {     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).withPropertyValues("spring.artemis.mode:native", "spring.artemis.host:192.168.1.144", "spring.artemis.port:9876").run((context) -> assertNettyConnectionFactory(getActiveMQConnectionFactory(context.getBean(ConnectionFactory.class)), "192.168.1.144", 9876)). }
false;public;0;20;;@Test public void nativeConnectionFactoryCredentials() {     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).withPropertyValues("spring.artemis.mode:native", "spring.artemis.user:user", "spring.artemis.password:secret").run((context) -> {         JmsTemplate jmsTemplate = context.getBean(JmsTemplate.class).         ConnectionFactory connectionFactory = context.getBean(ConnectionFactory.class).         assertThat(connectionFactory).isEqualTo(jmsTemplate.getConnectionFactory()).         ActiveMQConnectionFactory activeMQConnectionFactory = getActiveMQConnectionFactory(connectionFactory).         assertNettyConnectionFactory(activeMQConnectionFactory, "localhost", 61616).         assertThat(activeMQConnectionFactory.getUser()).isEqualTo("user").         assertThat(activeMQConnectionFactory.getPassword()).isEqualTo("secret").     }). }
false;public;0;17;;@Test public void embeddedConnectionFactory() {     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).withPropertyValues("spring.artemis.mode:embedded").run((context) -> {         ArtemisProperties properties = context.getBean(ArtemisProperties.class).         assertThat(properties.getMode()).isEqualTo(ArtemisMode.EMBEDDED).         assertThat(context).hasSingleBean(EmbeddedJMS.class).         org.apache.activemq.artemis.core.config.Configuration configuration = context.getBean(org.apache.activemq.artemis.core.config.Configuration.class).         assertThat(configuration.isPersistenceEnabled()).isFalse().         assertThat(configuration.isSecurityEnabled()).isFalse().         assertInVmConnectionFactory(getActiveMQConnectionFactory(context.getBean(ConnectionFactory.class))).     }). }
false;public;0;15;;@Test public void embeddedConnectionFactoryByDefault() {     // No mode is specified     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(EmbeddedJMS.class).         org.apache.activemq.artemis.core.config.Configuration configuration = context.getBean(org.apache.activemq.artemis.core.config.Configuration.class).         assertThat(configuration.isPersistenceEnabled()).isFalse().         assertThat(configuration.isSecurityEnabled()).isFalse().         assertInVmConnectionFactory(getActiveMQConnectionFactory(context.getBean(ConnectionFactory.class))).     }). }
false;public;0;13;;@Test public void nativeConnectionFactoryIfEmbeddedServiceDisabledExplicitly() {     // No mode is specified     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).withPropertyValues("spring.artemis.embedded.enabled:false").run((context) -> {         assertThat(context).doesNotHaveBean(EmbeddedJMS.class).         assertNettyConnectionFactory(getActiveMQConnectionFactory(context.getBean(ConnectionFactory.class)), "localhost", 61616).     }). }
false;public;0;12;;@Test public void embeddedConnectionFactoryEvenIfEmbeddedServiceDisabled() {     // No mode is specified     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).withPropertyValues("spring.artemis.mode:embedded", "spring.artemis.embedded.enabled:false").run((context) -> {         assertThat(context.getBeansOfType(EmbeddedJMS.class)).isEmpty().         assertInVmConnectionFactory(getActiveMQConnectionFactory(context.getBean(ConnectionFactory.class))).     }). }
false;public;0;14;;@Test public void embeddedServerWithDestinations() {     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).withPropertyValues("spring.artemis.embedded.queues=Queue1,Queue2", "spring.artemis.embedded.topics=Topic1").run((context) -> {         DestinationChecker checker = new DestinationChecker(context).         checker.checkQueue("Queue1", true).         checker.checkQueue("Queue2", true).         checker.checkQueue("QueueWillNotBeAutoCreated", true).         checker.checkTopic("Topic1", true).         checker.checkTopic("TopicWillBeAutoCreated", true).     }). }
false;public;0;9;;@Test public void embeddedServerWithDestinationConfig() {     this.contextRunner.withUserConfiguration(DestinationConfiguration.class).run((context) -> {         DestinationChecker checker = new DestinationChecker(context).         checker.checkQueue("sampleQueue", true).         checker.checkTopic("sampleTopic", true).     }). }
false;public;0;12;;@Test public void embeddedServiceWithCustomJmsConfiguration() {     // Ignored with custom config     this.contextRunner.withUserConfiguration(CustomJmsConfiguration.class).withPropertyValues("spring.artemis.embedded.queues=Queue1,Queue2").run((context) -> {         DestinationChecker checker = new DestinationChecker(context).         // See CustomJmsConfiguration         checker.checkQueue("custom", true).         checker.checkQueue("Queue1", true).         checker.checkQueue("Queue2", true).     }). }
false;public;0;7;;@Test public void embeddedServiceWithCustomArtemisConfiguration() {     this.contextRunner.withUserConfiguration(CustomArtemisConfiguration.class).run((context) -> assertThat(context.getBean(org.apache.activemq.artemis.core.config.Configuration.class).getName()).isEqualTo("customFooBar")). }
false;public;0;21;;@Test public void embeddedWithPersistentMode() throws IOException {     File dataFolder = this.temp.newFolder().     final String messageId = UUID.randomUUID().toString().     // Start the server and post a message to some queue     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).withPropertyValues("spring.artemis.embedded.queues=TestQueue", "spring.artemis.embedded.persistent:true", "spring.artemis.embedded.dataDirectory:" + dataFolder.getAbsolutePath()).run((context) -> context.getBean(JmsTemplate.class).send("TestQueue", (session) -> session.createTextMessage(messageId))).run((context) -> {         // Start the server again and check if our message is still here         JmsTemplate jmsTemplate2 = context.getBean(JmsTemplate.class).         jmsTemplate2.setReceiveTimeout(1000L).         Message message = jmsTemplate2.receive("TestQueue").         assertThat(message).isNotNull().         assertThat(((TextMessage) message).getText()).isEqualTo(messageId).     }). }
false;public;0;26;;@Test public void severalEmbeddedBrokers() {     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).withPropertyValues("spring.artemis.embedded.queues=Queue1").run((first) -> {         this.contextRunner.withPropertyValues("spring.artemis.embedded.queues=Queue2").run((second) -> {             ArtemisProperties firstProperties = first.getBean(ArtemisProperties.class).             ArtemisProperties secondProperties = second.getBean(ArtemisProperties.class).             assertThat(firstProperties.getEmbedded().getServerId()).isLessThan(secondProperties.getEmbedded().getServerId()).             DestinationChecker firstChecker = new DestinationChecker(first).             firstChecker.checkQueue("Queue1", true).             firstChecker.checkQueue("Queue2", true).             DestinationChecker secondChecker = new DestinationChecker(second).             secondChecker.checkQueue("Queue2", true).             secondChecker.checkQueue("Queue1", true).         }).     }). }
false;public;0;22;;@Test public void connectToASpecificEmbeddedBroker() {     this.contextRunner.withUserConfiguration(EmptyConfiguration.class).withPropertyValues("spring.artemis.embedded.serverId=93", "spring.artemis.embedded.queues=Queue1").run((first) -> {         this.contextRunner.withUserConfiguration(EmptyConfiguration.class).withPropertyValues("spring.artemis.mode=embedded", // Connect to the "main" broker         "spring.artemis.embedded.serverId=93", // Do not start a specific one         "spring.artemis.embedded.enabled=false").run((secondContext) -> {             DestinationChecker firstChecker = new DestinationChecker(first).             firstChecker.checkQueue("Queue1", true).             DestinationChecker secondChecker = new DestinationChecker(secondContext).             secondChecker.checkQueue("Queue1", true).         }).     }). }
false;public;0;26;;@Test public void defaultPoolConnectionFactoryIsApplied() {     this.contextRunner.withPropertyValues("spring.artemis.pool.enabled=true").run((context) -> {         assertThat(context.getBeansOfType(JmsPoolConnectionFactory.class)).hasSize(1).         JmsPoolConnectionFactory connectionFactory = context.getBean(JmsPoolConnectionFactory.class).         JmsPoolConnectionFactory defaultFactory = new JmsPoolConnectionFactory().         assertThat(connectionFactory.isBlockIfSessionPoolIsFull()).isEqualTo(defaultFactory.isBlockIfSessionPoolIsFull()).         assertThat(connectionFactory.getBlockIfSessionPoolIsFullTimeout()).isEqualTo(defaultFactory.getBlockIfSessionPoolIsFullTimeout()).         assertThat(connectionFactory.getConnectionIdleTimeout()).isEqualTo(defaultFactory.getConnectionIdleTimeout()).         assertThat(connectionFactory.getMaxConnections()).isEqualTo(defaultFactory.getMaxConnections()).         assertThat(connectionFactory.getMaxSessionsPerConnection()).isEqualTo(defaultFactory.getMaxSessionsPerConnection()).         assertThat(connectionFactory.getConnectionCheckInterval()).isEqualTo(defaultFactory.getConnectionCheckInterval()).         assertThat(connectionFactory.isUseAnonymousProducers()).isEqualTo(defaultFactory.isUseAnonymousProducers()).     }). }
false;public;0;29;;@Test public void customPoolConnectionFactoryIsApplied() {     this.contextRunner.withPropertyValues("spring.artemis.pool.enabled=true", "spring.artemis.pool.blockIfFull=false", "spring.artemis.pool.blockIfFullTimeout=64", "spring.artemis.pool.idleTimeout=512", "spring.artemis.pool.maxConnections=256", "spring.artemis.pool.maxSessionsPerConnection=1024", "spring.artemis.pool.timeBetweenExpirationCheck=2048", "spring.artemis.pool.useAnonymousProducers=false").run((context) -> {         assertThat(context.getBeansOfType(JmsPoolConnectionFactory.class)).hasSize(1).         JmsPoolConnectionFactory connectionFactory = context.getBean(JmsPoolConnectionFactory.class).         assertThat(connectionFactory.isBlockIfSessionPoolIsFull()).isFalse().         assertThat(connectionFactory.getBlockIfSessionPoolIsFullTimeout()).isEqualTo(64).         assertThat(connectionFactory.getConnectionIdleTimeout()).isEqualTo(512).         assertThat(connectionFactory.getMaxConnections()).isEqualTo(256).         assertThat(connectionFactory.getMaxSessionsPerConnection()).isEqualTo(1024).         assertThat(connectionFactory.getConnectionCheckInterval()).isEqualTo(2048).         assertThat(connectionFactory.isUseAnonymousProducers()).isFalse().     }). }
false;public;0;10;;@Test public void poolConnectionFactoryConfiguration() {     this.contextRunner.withPropertyValues("spring.artemis.pool.enabled:true").run((context) -> {         ConnectionFactory factory = context.getBean(ConnectionFactory.class).         assertThat(factory).isInstanceOf(JmsPoolConnectionFactory.class).         context.getSourceApplicationContext().close().         assertThat(factory.createConnection()).isNull().     }). }
false;private;1;6;;private ActiveMQConnectionFactory getActiveMQConnectionFactory(ConnectionFactory connectionFactory) {     assertThat(connectionFactory).isInstanceOf(CachingConnectionFactory.class).     return (ActiveMQConnectionFactory) ((CachingConnectionFactory) connectionFactory).getTargetConnectionFactory(). }
false;private;1;8;;private TransportConfiguration assertInVmConnectionFactory(ActiveMQConnectionFactory connectionFactory) {     TransportConfiguration transportConfig = getSingleTransportConfiguration(connectionFactory).     assertThat(transportConfig.getFactoryClassName()).isEqualTo(InVMConnectorFactory.class.getName()).     return transportConfig. }
false;private;3;10;;private TransportConfiguration assertNettyConnectionFactory(ActiveMQConnectionFactory connectionFactory, String host, int port) {     TransportConfiguration transportConfig = getSingleTransportConfiguration(connectionFactory).     assertThat(transportConfig.getFactoryClassName()).isEqualTo(NettyConnectorFactory.class.getName()).     assertThat(transportConfig.getParams().get("host")).isEqualTo(host).     assertThat(transportConfig.getParams().get("port")).isEqualTo(port).     return transportConfig. }
false;private;1;7;;private TransportConfiguration getSingleTransportConfiguration(ActiveMQConnectionFactory connectionFactory) {     TransportConfiguration[] transportConfigurations = connectionFactory.getServerLocator().getStaticTransportConfigurations().     assertThat(transportConfigurations.length).isEqualTo(1).     return transportConfigurations[0]. }
false;public;2;3;;public void checkQueue(String name, boolean shouldExist) {     checkDestination(name, false, shouldExist). }
false;public;2;3;;public void checkTopic(String name, boolean shouldExist) {     checkDestination(name, true, shouldExist). }
false;public;3;20;;public void checkDestination(String name, final boolean pubSub, final boolean shouldExist) {     this.jmsTemplate.execute((SessionCallback<Void>) (session) -> {         try {             Destination destination = this.destinationResolver.resolveDestinationName(session, name, pubSub).             if (!shouldExist) {                 throw new IllegalStateException("Destination '" + name + "' was not expected but got " + destination).             }         } catch (JMSException ex) {             if (shouldExist) {                 throw new IllegalStateException("Destination '" + name + "' was expected but got " + ex.getMessage()).             }         }         return null.     }). }
false;;0;9;;@Bean JMSQueueConfiguration sampleQueueConfiguration() {     JMSQueueConfigurationImpl jmsQueueConfiguration = new JMSQueueConfigurationImpl().     jmsQueueConfiguration.setName("sampleQueue").     jmsQueueConfiguration.setSelector("foo=bar").     jmsQueueConfiguration.setDurable(false).     jmsQueueConfiguration.setBindings("/queue/1").     return jmsQueueConfiguration. }
false;;0;7;;@Bean TopicConfiguration sampleTopicConfiguration() {     TopicConfigurationImpl topicConfiguration = new TopicConfigurationImpl().     topicConfiguration.setName("sampleTopic").     topicConfiguration.setBindings("/topic/1").     return topicConfiguration. }
false;public;0;9;;@Bean public JMSConfiguration myJmsConfiguration() {     JMSConfiguration config = new JMSConfigurationImpl().     JMSQueueConfiguration jmsQueueConfiguration = new JMSQueueConfigurationImpl().     jmsQueueConfiguration.setName("custom").     jmsQueueConfiguration.setDurable(false).     config.getQueueConfigurations().add(jmsQueueConfiguration).     return config. }
false;public;0;7;;@Bean public ArtemisConfigurationCustomizer myArtemisCustomize() {     return (configuration) -> {         configuration.setClusterPassword("Foobar").         configuration.setName("customFooBar").     }. }
