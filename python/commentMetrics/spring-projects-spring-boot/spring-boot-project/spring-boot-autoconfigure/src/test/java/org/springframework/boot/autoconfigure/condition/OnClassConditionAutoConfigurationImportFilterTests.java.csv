commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     this.filter.setBeanClassLoader(getClass().getClassLoader()).     this.filter.setBeanFactory(this.beanFactory). }
false;public;0;6;;@Test public void shouldBeRegistered() {     assertThat(SpringFactoriesLoader.loadFactories(AutoConfigurationImportFilter.class, null)).hasAtLeastOneElementOfType(OnClassCondition.class). }
false;public;0;7;;@Test public void matchShouldMatchClasses() {     String[] autoConfigurationClasses = new String[] { "test.match", "test.nomatch" }.     boolean[] result = this.filter.match(autoConfigurationClasses, getAutoConfigurationMetadata()).     assertThat(result).containsExactly(true, false). }
false;public;0;9;;@Test public void matchShouldRecordOutcome() {     String[] autoConfigurationClasses = new String[] { "test.match", "test.nomatch" }.     this.filter.match(autoConfigurationClasses, getAutoConfigurationMetadata()).     ConditionEvaluationReport report = ConditionEvaluationReport.get(this.beanFactory).     assertThat(report.getConditionAndOutcomesBySource()).hasSize(1).containsKey("test.nomatch"). }
false;private;0;10;;private AutoConfigurationMetadata getAutoConfigurationMetadata() {     AutoConfigurationMetadata metadata = mock(AutoConfigurationMetadata.class).     given(metadata.wasProcessed("test.match")).willReturn(true).     given(metadata.get("test.match", "ConditionalOnClass")).willReturn("java.io.InputStream").     given(metadata.wasProcessed("test.nomatch")).willReturn(true).     given(metadata.get("test.nomatch", "ConditionalOnClass")).willReturn("java.io.DoesNotExist").     return metadata. }
