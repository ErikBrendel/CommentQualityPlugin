commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testDefaultDataSourceExists() {     this.contextRunner.run((context) -> assertThat(context).hasSingleBean(DataSource.class)). }
false;public;0;8;;@Test public void testDataSourceHasEmbeddedDefault() {     this.contextRunner.run((context) -> {         HikariDataSource dataSource = context.getBean(HikariDataSource.class).         assertThat(dataSource.getJdbcUrl()).isNotNull().         assertThat(dataSource.getDriverClassName()).isNotNull().     }). }
false;public;0;8;;@Test public void testBadUrl() {     this.contextRunner.withPropertyValues("spring.datasource.url:jdbc:not-going-to-work").withClassLoader(new DisableEmbeddedDatabaseClassLoader()).run((context) -> assertThat(context).getFailure().isInstanceOf(BeanCreationException.class)). }
false;public;0;9;;@Test public void testBadDriverClass() {     this.contextRunner.withPropertyValues("spring.datasource.driverClassName:org.none.jdbcDriver").run((context) -> assertThat(context).getFailure().isInstanceOf(BeanCreationException.class).hasMessageContaining("org.none.jdbcDriver")). }
false;public;0;7;;@Test public void hikariValidatesConnectionByDefault() {     assertDataSource(HikariDataSource.class, Collections.singletonList("org.apache.tomcat"), (dataSource) -> assertThat(dataSource.getConnectionTestQuery()).isNull()). }
false;public;0;7;;@Test public void tomcatIsFallback() {     assertDataSource(org.apache.tomcat.jdbc.pool.DataSource.class, Collections.singletonList("com.zaxxer.hikari"), (dataSource) -> assertThat(dataSource.getUrl()).startsWith("jdbc:hsqldb:mem:testdb")). }
false;public;0;9;;@Test public void tomcatValidatesConnectionByDefault() {     assertDataSource(org.apache.tomcat.jdbc.pool.DataSource.class, Collections.singletonList("com.zaxxer.hikari"), (dataSource) -> {         assertThat(dataSource.isTestOnBorrow()).isTrue().         assertThat(dataSource.getValidationQuery()).isEqualTo(DatabaseDriver.HSQLDB.getValidationQuery()).     }). }
false;public;0;7;;@Test public void commonsDbcp2IsFallback() {     assertDataSource(BasicDataSource.class, Arrays.asList("com.zaxxer.hikari", "org.apache.tomcat"), (dataSource) -> assertThat(dataSource.getUrl()).startsWith("jdbc:hsqldb:mem:testdb")). }
false;public;0;9;;@Test public void commonsDbcp2ValidatesConnectionByDefault() {     assertDataSource(org.apache.commons.dbcp2.BasicDataSource.class, Arrays.asList("com.zaxxer.hikari", "org.apache.tomcat"), (dataSource) -> {         assertThat(dataSource.getTestOnBorrow()).isTrue().         // Use         assertThat(dataSource.getValidationQuery()).isNull().     // Connection#isValid()     }). }
false;public;0;13;;@Test @SuppressWarnings("resource") public void testEmbeddedTypeDefaultsUsername() {     this.contextRunner.withPropertyValues("spring.datasource.driverClassName:org.hsqldb.jdbcDriver", "spring.datasource.url:jdbc:hsqldb:mem:testdb").run((context) -> {         DataSource bean = context.getBean(DataSource.class).         HikariDataSource pool = (HikariDataSource) bean.         assertThat(pool.getDriverClassName()).isEqualTo("org.hsqldb.jdbcDriver").         assertThat(pool.getUsername()).isEqualTo("sa").     }). }
true;public;0;13;/**  * This test makes sure that if no supported data source is present, a datasource is  * still created if "spring.datasource.type" is present.  */ ;/**  * This test makes sure that if no supported data source is present, a datasource is  * still created if "spring.datasource.type" is present.  */ @Test public void explicitTypeNoSupportedDataSource() {     this.contextRunner.withClassLoader(new FilteredClassLoader("org.apache.tomcat", "com.zaxxer.hikari", "org.apache.commons.dbcp", "org.apache.commons.dbcp2")).withPropertyValues("spring.datasource.driverClassName:org.hsqldb.jdbcDriver", "spring.datasource.url:jdbc:hsqldb:mem:testdb", "spring.datasource.type:" + SimpleDriverDataSource.class.getName()).run(this::containsOnlySimpleDriverDataSource). }
false;public;0;10;;@Test public void explicitTypeSupportedDataSource() {     this.contextRunner.withPropertyValues("spring.datasource.driverClassName:org.hsqldb.jdbcDriver", "spring.datasource.url:jdbc:hsqldb:mem:testdb", "spring.datasource.type:" + SimpleDriverDataSource.class.getName()).run(this::containsOnlySimpleDriverDataSource). }
false;private;1;6;;private void containsOnlySimpleDriverDataSource(AssertableApplicationContext context) {     assertThat(context).hasSingleBean(DataSource.class).     assertThat(context).getBean(DataSource.class).isExactlyInstanceOf(SimpleDriverDataSource.class). }
false;public;0;12;;@Test public void testExplicitDriverClassClearsUsername() {     this.contextRunner.withPropertyValues("spring.datasource.driverClassName:" + DatabaseTestDriver.class.getName(), "spring.datasource.url:jdbc:foo://localhost").run((context) -> {         assertThat(context).hasSingleBean(DataSource.class).         HikariDataSource dataSource = context.getBean(HikariDataSource.class).         assertThat(dataSource.getDriverClassName()).isEqualTo(DatabaseTestDriver.class.getName()).         assertThat(dataSource.getUsername()).isNull().     }). }
false;public;0;6;;@Test public void testDefaultDataSourceCanBeOverridden() {     this.contextRunner.withUserConfiguration(TestDataSourceConfiguration.class).run((context) -> assertThat(context).getBean(DataSource.class).isInstanceOf(BasicDataSource.class)). }
false;public;0;9;;@Test public void testDataSourceIsInitializedEarly() {     this.contextRunner.withUserConfiguration(TestInitializedDataSourceConfiguration.class).withPropertyValues("spring.datasource.initialization-mode=always").run((context) -> assertThat(context.getBean(TestInitializedDataSourceConfiguration.class).called).isTrue()). }
false;private;3;10;;private <T extends DataSource> void assertDataSource(Class<T> expectedType, List<String> hiddenPackages, Consumer<T> consumer) {     FilteredClassLoader classLoader = new FilteredClassLoader(StringUtils.toStringArray(hiddenPackages)).     this.contextRunner.withClassLoader(classLoader).run((context) -> {         DataSource bean = context.getBean(DataSource.class).         assertThat(bean).isInstanceOf(expectedType).         consumer.accept(expectedType.cast(bean)).     }). }
false;public;0;8;;@Bean public DataSource dataSource() {     this.pool = new BasicDataSource().     this.pool.setDriverClassName("org.hsqldb.jdbcDriver").     this.pool.setUrl("jdbc:hsqldb:mem:overridedb").     this.pool.setUsername("sa").     return this.pool. }
false;public;1;8;;@Autowired public void validateDataSourceIsInitialized(DataSource dataSource) {     // Inject the datasource to validate it is initialized at the injection point     JdbcTemplate template = new JdbcTemplate(dataSource).     assertThat(template.queryForObject("SELECT COUNT(*) from BAR", Integer.class)).isEqualTo(1).     this.called = true. }
false;public;2;4;;@Override public Connection connect(String url, Properties info) {     return mock(Connection.class). }
false;public;1;4;;@Override public boolean acceptsURL(String url) {     return true. }
false;public;2;4;;@Override public DriverPropertyInfo[] getPropertyInfo(String url, Properties info) {     return new DriverPropertyInfo[0]. }
false;public;0;4;;@Override public int getMajorVersion() {     return 1. }
false;public;0;4;;@Override public int getMinorVersion() {     return 0. }
false;public;0;4;;@Override public boolean jdbcCompliant() {     return false. }
false;public;0;4;;@Override public Logger getParentLogger() {     return mock(Logger.class). }
false;protected;2;11;;@Override protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {     for (EmbeddedDatabaseConnection candidate : EmbeddedDatabaseConnection.values()) {         if (name.equals(candidate.getDriverClassName())) {             throw new ClassNotFoundException().         }     }     return super.loadClass(name, resolve). }
