commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void namingStrategyDelegatorTakesPrecedence() {     this.contextRunner.withPropertyValues("spring.jpa.properties.hibernate.ejb.naming_strategy_delegator:" + "org.hibernate.cfg.naming.ImprovedNamingStrategyDelegator").run((context) -> {         JpaProperties jpaProperties = context.getBean(JpaProperties.class).         HibernateProperties hibernateProperties = context.getBean(HibernateProperties.class).         Map<String, Object> properties = hibernateProperties.determineHibernateProperties(jpaProperties.getProperties(), new HibernateSettings()).         assertThat(properties.get("hibernate.ejb.naming_strategy")).isNull().     }). }
false;public;0;18;;@Test public void namingStrategyBeansAreUsed() {     this.contextRunner.withUserConfiguration(NamingStrategyConfiguration.class).withPropertyValues("spring.datasource.url:jdbc:h2:mem:naming-strategy-beans").run((context) -> {         HibernateJpaConfiguration jpaConfiguration = context.getBean(HibernateJpaConfiguration.class).         Map<String, Object> hibernateProperties = jpaConfiguration.getVendorProperties().         assertThat(hibernateProperties.get("hibernate.implicit_naming_strategy")).isEqualTo(NamingStrategyConfiguration.implicitNamingStrategy).         assertThat(hibernateProperties.get("hibernate.physical_naming_strategy")).isEqualTo(NamingStrategyConfiguration.physicalNamingStrategy).     }). }
false;public;0;12;;@Test public void hibernatePropertiesCustomizersAreAppliedInOrder() {     this.contextRunner.withUserConfiguration(HibernatePropertiesCustomizerConfiguration.class).run((context) -> {         HibernateJpaConfiguration jpaConfiguration = context.getBean(HibernateJpaConfiguration.class).         Map<String, Object> hibernateProperties = jpaConfiguration.getVendorProperties().         assertThat(hibernateProperties.get("test.counter")).isEqualTo(2).     }). }
false;public;0;11;;@Test public void defaultDatabaseForH2() {     this.contextRunner.withPropertyValues("spring.datasource.url:jdbc:h2:mem:testdb", "spring.datasource.initialization-mode:never").run((context) -> {         HibernateJpaVendorAdapter bean = context.getBean(HibernateJpaVendorAdapter.class).         Database database = (Database) ReflectionTestUtils.getField(bean, "database").         assertThat(database).isEqualTo(Database.H2).     }). }
false;public;0;13;;@Bean public DataSource dataSource() {     DataSource dataSource = mock(DataSource.class).     try {         given(dataSource.getConnection()).willReturn(mock(Connection.class)).         given(dataSource.getConnection().getMetaData()).willReturn(mock(DatabaseMetaData.class)).     } catch (SQLException ex) {     // Do nothing     }     return dataSource. }
false;public;0;4;;@Bean public ImplicitNamingStrategy implicitNamingStrategy() {     return implicitNamingStrategy. }
false;public;0;4;;@Bean public PhysicalNamingStrategy physicalNamingStrategy() {     return physicalNamingStrategy. }
false;public;0;5;;@Bean @Order(2) public HibernatePropertiesCustomizer sampleCustomizer() {     return ((hibernateProperties) -> hibernateProperties.put("test.counter", 2)). }
false;public;0;5;;@Bean @Order(1) public HibernatePropertiesCustomizer anotherCustomizer() {     return ((hibernateProperties) -> hibernateProperties.put("test.counter", 1)). }
