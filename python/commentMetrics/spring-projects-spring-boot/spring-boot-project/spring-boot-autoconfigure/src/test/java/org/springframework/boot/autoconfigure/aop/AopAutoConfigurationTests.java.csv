commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void aopDisabled() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.aop.auto:false").run((context) -> {         TestAspect aspect = context.getBean(TestAspect.class).         assertThat(aspect.isCalled()).isFalse().         TestBean bean = context.getBean(TestBean.class).         bean.foo().         assertThat(aspect.isCalled()).isFalse().     }). }
false;public;0;5;;@Test public void aopWithDefaultSettings() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).run(proxyTargetClassEnabled()). }
false;public;0;6;;@Test public void aopWithEnabledProxyTargetClass() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.aop.proxy-target-class:true").run(proxyTargetClassEnabled()). }
false;public;0;6;;@Test public void aopWithDisabledProxyTargetClass() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.aop.proxy-target-class:false").run(proxyTargetClassDisabled()). }
false;public;0;5;;@Test public void customConfigurationWithProxyTargetClassDefaultDoesNotDisableProxying() {     this.contextRunner.withUserConfiguration(CustomTestConfiguration.class).run(proxyTargetClassEnabled()). }
false;private;0;9;;private ContextConsumer<AssertableApplicationContext> proxyTargetClassEnabled() {     return (context) -> {         TestAspect aspect = context.getBean(TestAspect.class).         assertThat(aspect.isCalled()).isFalse().         TestBean bean = context.getBean(TestBean.class).         bean.foo().         assertThat(aspect.isCalled()).isTrue().     }. }
false;private;0;10;;private ContextConsumer<AssertableApplicationContext> proxyTargetClassDisabled() {     return (context) -> {         TestAspect aspect = context.getBean(TestAspect.class).         assertThat(aspect.isCalled()).isFalse().         TestInterface bean = context.getBean(TestInterface.class).         bean.foo().         assertThat(aspect.isCalled()).isTrue().         assertThat(context).doesNotHaveBean(TestBean.class).     }. }
false;public;0;4;;@Bean public TestAspect aspect() {     return new TestAspect(). }
false;public;0;4;;@Bean public TestInterface bean() {     return new TestBean(). }
false;public;0;3;;@Override public void foo() { }
false;public;0;3;;public boolean isCalled() {     return this.called. }
false;public;0;4;;@Before("execution(* foo(..))") public void before() {     this.called = true. }
false;;0;1;;void foo().
