commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testJdbcTemplateExists() {     this.contextRunner.run((context) -> {         assertThat(context).hasSingleBean(JdbcOperations.class).         JdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class).         assertThat(jdbcTemplate.getDataSource()).isEqualTo(context.getBean(DataSource.class)).         assertThat(jdbcTemplate.getFetchSize()).isEqualTo(-1).         assertThat(jdbcTemplate.getQueryTimeout()).isEqualTo(-1).         assertThat(jdbcTemplate.getMaxRows()).isEqualTo(-1).     }). }
false;public;0;13;;@Test public void testJdbcTemplateWithCustomProperties() {     this.contextRunner.withPropertyValues("spring.jdbc.template.fetch-size:100", "spring.jdbc.template.query-timeout:60", "spring.jdbc.template.max-rows:1000").run((context) -> {         assertThat(context).hasSingleBean(JdbcOperations.class).         JdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class).         assertThat(jdbcTemplate.getDataSource()).isNotNull().         assertThat(jdbcTemplate.getFetchSize()).isEqualTo(100).         assertThat(jdbcTemplate.getQueryTimeout()).isEqualTo(60).         assertThat(jdbcTemplate.getMaxRows()).isEqualTo(1000).     }). }
false;public;0;10;;@Test public void testJdbcTemplateExistsWithCustomDataSource() {     this.contextRunner.withUserConfiguration(TestDataSourceConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(JdbcOperations.class).         JdbcTemplate jdbcTemplate = context.getBean(JdbcTemplate.class).         assertThat(jdbcTemplate.getDataSource()).isEqualTo(context.getBean("customDataSource")).     }). }
false;public;0;10;;@Test public void testNamedParameterJdbcTemplateExists() {     this.contextRunner.run((context) -> {         assertThat(context).hasSingleBean(NamedParameterJdbcOperations.class).         NamedParameterJdbcTemplate namedParameterJdbcTemplate = context.getBean(NamedParameterJdbcTemplate.class).         assertThat(namedParameterJdbcTemplate.getJdbcOperations()).isEqualTo(context.getBean(JdbcOperations.class)).     }). }
false;public;0;9;;@Test public void testMultiDataSource() {     this.contextRunner.withUserConfiguration(MultiDataSourceConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean(JdbcOperations.class).         assertThat(context).doesNotHaveBean(NamedParameterJdbcOperations.class).     }). }
false;public;0;6;;@Test public void testMultiJdbcTemplate() {     this.contextRunner.withUserConfiguration(MultiJdbcTemplateConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(NamedParameterJdbcOperations.class)). }
false;public;0;11;;@Test public void testMultiDataSourceUsingPrimary() {     this.contextRunner.withUserConfiguration(MultiDataSourceUsingPrimaryConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(JdbcOperations.class).         assertThat(context).hasSingleBean(NamedParameterJdbcOperations.class).         assertThat(context.getBean(JdbcTemplate.class).getDataSource()).isEqualTo(context.getBean("test1DataSource")).     }). }
false;public;0;11;;@Test public void testMultiJdbcTemplateUsingPrimary() {     this.contextRunner.withUserConfiguration(MultiJdbcTemplateUsingPrimaryConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(NamedParameterJdbcOperations.class).         assertThat(context.getBean(NamedParameterJdbcTemplate.class).getJdbcOperations()).isEqualTo(context.getBean("test1Template")).     }). }
false;public;0;9;;@Test public void testExistingCustomJdbcTemplate() {     this.contextRunner.withUserConfiguration(CustomConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(JdbcOperations.class).         assertThat(context.getBean(JdbcOperations.class)).isEqualTo(context.getBean("customJdbcOperations")).     }). }
false;public;0;10;;@Test public void testExistingCustomNamedParameterJdbcTemplate() {     this.contextRunner.withUserConfiguration(CustomConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(NamedParameterJdbcOperations.class).         assertThat(context.getBean(NamedParameterJdbcOperations.class)).isEqualTo(context.getBean("customNamedParameterJdbcOperations")).     }). }
false;public;0;11;;@Test public void testDependencyToDataSourceInitialization() {     this.contextRunner.withUserConfiguration(DataSourceInitializationValidator.class).withPropertyValues("spring.datasource.initialization-mode=always").run((context) -> {         assertThat(context).hasNotFailed().         assertThat(context.getBean(DataSourceInitializationValidator.class).count).isEqualTo(1).     }). }
false;public;0;11;;@Test public void testDependencyToFlyway() {     this.contextRunner.withUserConfiguration(DataSourceMigrationValidator.class).withPropertyValues("spring.flyway.locations:classpath:db/city").withConfiguration(AutoConfigurations.of(FlywayAutoConfiguration.class)).run((context) -> {         assertThat(context).hasNotFailed().         assertThat(context.getBean(DataSourceMigrationValidator.class).count).isEqualTo(0).     }). }
false;public;0;14;;@Test public void testDependencyToFlywayWithJdbcTemplateMixed() {     this.contextRunner.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class).withPropertyValues("spring.flyway.locations:classpath:db/city").withConfiguration(AutoConfigurations.of(FlywayAutoConfiguration.class)).run((context) -> {         assertThat(context).hasNotFailed().         assertThat(context.getBean(JdbcTemplate.class)).isNotNull().         assertThat(context.getBean(NamedParameterDataSourceMigrationValidator.class).count).isEqualTo(0).     }). }
false;public;0;13;;@Test public void testDependencyToLiquibase() {     this.contextRunner.withUserConfiguration(DataSourceMigrationValidator.class).withPropertyValues("spring.liquibase.changeLog:classpath:db/changelog/db.changelog-city.yaml").withConfiguration(AutoConfigurations.of(LiquibaseAutoConfiguration.class)).run((context) -> {         assertThat(context).hasNotFailed().         assertThat(context.getBean(DataSourceMigrationValidator.class).count).isEqualTo(0).     }). }
false;public;0;16;;@Test public void testDependencyToLiquibaseWithJdbcTemplateMixed() {     this.contextRunner.withUserConfiguration(NamedParameterDataSourceMigrationValidator.class).withPropertyValues("spring.liquibase.changeLog:classpath:db/changelog/db.changelog-city.yaml").withConfiguration(AutoConfigurations.of(LiquibaseAutoConfiguration.class)).run((context) -> {         assertThat(context).hasNotFailed().         assertThat(context.getBean(JdbcTemplate.class)).isNotNull().         assertThat(context.getBean(NamedParameterDataSourceMigrationValidator.class).count).isEqualTo(0).     }). }
false;public;1;4;;@Bean public JdbcOperations customJdbcOperations(DataSource dataSource) {     return new JdbcTemplate(dataSource). }
false;public;1;5;;@Bean public NamedParameterJdbcOperations customNamedParameterJdbcOperations(DataSource dataSource) {     return new NamedParameterJdbcTemplate(dataSource). }
false;public;0;4;;@Bean public DataSource customDataSource() {     return new TestDataSource(). }
false;public;0;4;;@Bean public JdbcTemplate test1Template() {     return mock(JdbcTemplate.class). }
false;public;0;4;;@Bean public JdbcTemplate test2Template() {     return mock(JdbcTemplate.class). }
false;public;0;5;;@Bean @Primary public JdbcTemplate test1Template() {     return mock(JdbcTemplate.class). }
false;public;0;4;;@Bean public JdbcTemplate test2Template() {     return mock(JdbcTemplate.class). }
