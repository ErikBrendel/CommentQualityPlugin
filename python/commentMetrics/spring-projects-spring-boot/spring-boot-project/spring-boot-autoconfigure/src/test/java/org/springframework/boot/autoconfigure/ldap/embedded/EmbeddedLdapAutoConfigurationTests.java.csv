commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSetDefaultPort() {     this.contextRunner.withPropertyValues("spring.ldap.embedded.port:1234", "spring.ldap.embedded.base-dn:dc=spring,dc=org").run((context) -> {         InMemoryDirectoryServer server = context.getBean(InMemoryDirectoryServer.class).         assertThat(server.getListenPort()).isEqualTo(1234).     }). }
false;public;0;11;;@Test public void testRandomPortWithEnvironment() {     this.contextRunner.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org").run((context) -> {         InMemoryDirectoryServer server = context.getBean(InMemoryDirectoryServer.class).         assertThat(server.getListenPort()).isEqualTo(context.getEnvironment().getProperty("local.ldap.port", Integer.class)).     }). }
false;public;0;13;;@Test public void testRandomPortWithValueAnnotation() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.ldap.embedded.base-dn:dc=spring,dc=org").applyTo(context).     context.register(EmbeddedLdapAutoConfiguration.class, LdapClientConfiguration.class, PropertyPlaceholderAutoConfiguration.class).     context.refresh().     LDAPConnection connection = context.getBean(LDAPConnection.class).     assertThat(connection.getConnectedPort()).isEqualTo(context.getEnvironment().getProperty("local.ldap.port", Integer.class)). }
false;public;0;13;;@Test public void testSetCredentials() {     this.contextRunner.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org", "spring.ldap.embedded.credential.username:uid=root", "spring.ldap.embedded.credential.password:boot").run((context) -> {         InMemoryDirectoryServer server = context.getBean(InMemoryDirectoryServer.class).         BindResult result = server.bind("uid=root", "boot").         assertThat(result).isNotNull().     }). }
false;public;0;11;;@Test public void testSetPartitionSuffix() {     this.contextRunner.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org").run((context) -> {         InMemoryDirectoryServer server = context.getBean(InMemoryDirectoryServer.class).         assertThat(server.getBaseDNs()).containsExactly(new DN("dc=spring,dc=org")).     }). }
false;public;0;12;;@Test public void testSetLdifFile() {     this.contextRunner.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org").run((context) -> {         InMemoryDirectoryServer server = context.getBean(InMemoryDirectoryServer.class).         assertThat(server.countEntriesBelow("ou=company1,c=Sweden,dc=spring,dc=org")).isEqualTo(5).     }). }
false;public;0;13;;@Test public void testQueryEmbeddedLdap() {     this.contextRunner.withPropertyValues("spring.ldap.embedded.base-dn:dc=spring,dc=org").withConfiguration(AutoConfigurations.of(LdapAutoConfiguration.class)).run((context) -> {         assertThat(context.getBeanNamesForType(LdapTemplate.class).length).isEqualTo(1).         LdapTemplate ldapTemplate = context.getBean(LdapTemplate.class).         assertThat(ldapTemplate.list("ou=company1,c=Sweden,dc=spring,dc=org")).hasSize(4).     }). }
false;public;0;11;;@Test public void testDisableSchemaValidation() {     this.contextRunner.withPropertyValues("spring.ldap.embedded.validation.enabled:false", "spring.ldap.embedded.base-dn:dc=spring,dc=org").run((context) -> {         InMemoryDirectoryServer server = context.getBean(InMemoryDirectoryServer.class).         assertThat(server.getSchema()).isNull().     }). }
false;public;0;16;;@Test public void testCustomSchemaValidation() {     this.contextRunner.withPropertyValues("spring.ldap.embedded.validation.schema:classpath:custom-schema.ldif", "spring.ldap.embedded.ldif:classpath:custom-schema-sample.ldif", "spring.ldap.embedded.base-dn:dc=spring,dc=org").run((context) -> {         InMemoryDirectoryServer server = context.getBean(InMemoryDirectoryServer.class).         assertThat(server.getSchema().getObjectClass("exampleAuxiliaryClass")).isNotNull().         assertThat(server.getSchema().getAttributeType("exampleAttributeName")).isNotNull().     }). }
false;public;0;17;;@Test public void testMultiBaseDn() {     this.contextRunner.withPropertyValues("spring.ldap.embedded.ldif:classpath:schema-multi-basedn.ldif", "spring.ldap.embedded.base-dn[0]:dc=spring,dc=org", "spring.ldap.embedded.base-dn[1]:dc=pivotal,dc=io").run((context) -> {         InMemoryDirectoryServer server = context.getBean(InMemoryDirectoryServer.class).         assertThat(server.countEntriesBelow("ou=company1,c=Sweden,dc=spring,dc=org")).isEqualTo(5).         assertThat(server.countEntriesBelow("c=Sweden,dc=pivotal,dc=io")).isEqualTo(2).     }). }
false;public;1;7;;@Bean public LDAPConnection ldapConnection(@Value("${local.ldap.port}") int port) throws LDAPException {     LDAPConnection con = new LDAPConnection().     con.connect("localhost", port).     return con. }
