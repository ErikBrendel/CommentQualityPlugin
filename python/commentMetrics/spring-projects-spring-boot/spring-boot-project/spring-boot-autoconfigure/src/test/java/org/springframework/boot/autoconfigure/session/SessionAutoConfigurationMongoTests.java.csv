commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void defaultConfig() {     this.contextRunner.withPropertyValues("spring.session.store-type=mongodb").withConfiguration(AutoConfigurations.of(EmbeddedMongoAutoConfiguration.class, MongoAutoConfiguration.class, MongoDataAutoConfiguration.class)).run(validateSpringSessionUsesMongo("sessions")). }
false;public;0;11;;@Test public void defaultConfigWithUniqueStoreImplementation() {     this.contextRunner.withClassLoader(new FilteredClassLoader(HazelcastSessionRepository.class, JdbcOperationsSessionRepository.class, RedisOperationsSessionRepository.class)).withConfiguration(AutoConfigurations.of(EmbeddedMongoAutoConfiguration.class, MongoAutoConfiguration.class, MongoDataAutoConfiguration.class)).run(validateSpringSessionUsesMongo("sessions")). }
false;public;0;10;;@Test public void mongoSessionStoreWithCustomizations() {     this.contextRunner.withConfiguration(AutoConfigurations.of(EmbeddedMongoAutoConfiguration.class, MongoAutoConfiguration.class, MongoDataAutoConfiguration.class)).withPropertyValues("spring.session.store-type=mongodb", "spring.session.mongodb.collection-name=foo").run(validateSpringSessionUsesMongo("foo")). }
false;private;1;9;;private ContextConsumer<AssertableWebApplicationContext> validateSpringSessionUsesMongo(String collectionName) {     return (context) -> {         MongoOperationsSessionRepository repository = validateSessionRepository(context, MongoOperationsSessionRepository.class).         assertThat(repository).hasFieldOrPropertyWithValue("collectionName", collectionName).     }. }
