commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void closeContext() {     if (this.context != null) {         this.context.close().     } }
false;public;0;12;;@Test public void testWebApplicationWithServletContext() {     AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext().     ctx.register(AnyWebApplicationConfiguration.class, ServletWebApplicationConfiguration.class, ReactiveWebApplicationConfiguration.class).     ctx.setServletContext(new MockServletContext()).     ctx.refresh().     this.context = ctx.     assertThat(this.context.getBeansOfType(String.class)).containsExactly(entry("any", "any"), entry("servlet", "servlet")). }
false;public;0;11;;@Test public void testWebApplicationWithReactiveContext() {     AnnotationConfigReactiveWebApplicationContext context = new AnnotationConfigReactiveWebApplicationContext().     context.register(AnyWebApplicationConfiguration.class, ServletWebApplicationConfiguration.class, ReactiveWebApplicationConfiguration.class).     context.refresh().     this.context = context.     assertThat(this.context.getBeansOfType(String.class)).containsExactly(entry("any", "any"), entry("reactive", "reactive")). }
false;public;0;10;;@Test public void testNonWebApplication() {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     ctx.register(AnyWebApplicationConfiguration.class, ServletWebApplicationConfiguration.class, ReactiveWebApplicationConfiguration.class).     ctx.refresh().     this.context = ctx.     assertThat(this.context.getBeansOfType(String.class)).isEmpty(). }
false;public;0;4;;@Bean public String any() {     return "any". }
false;public;0;4;;@Bean public String servlet() {     return "servlet". }
false;public;0;4;;@Bean public String reactive() {     return "reactive". }
false;public;0;4;;@Bean public ReactiveWebServerFactory reactiveWebServerFactory() {     return new MockReactiveWebServerFactory(). }
false;public;0;4;;@Bean public HttpHandler httpHandler() {     return (request, response) -> Mono.empty(). }
