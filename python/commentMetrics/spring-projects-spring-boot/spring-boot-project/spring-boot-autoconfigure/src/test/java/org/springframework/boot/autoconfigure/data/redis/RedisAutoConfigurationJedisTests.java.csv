commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testOverrideRedisConfiguration() {     this.contextRunner.withPropertyValues("spring.redis.host:foo", "spring.redis.database:1").run((context) -> {         JedisConnectionFactory cf = context.getBean(JedisConnectionFactory.class).         assertThat(cf.getHostName()).isEqualTo("foo").         assertThat(cf.getDatabase()).isEqualTo(1).         assertThat(cf.getPassword()).isNull().         assertThat(cf.isUseSsl()).isFalse().     }). }
false;public;0;9;;@Test public void testCustomizeRedisConfiguration() {     this.contextRunner.withUserConfiguration(CustomConfiguration.class).run((context) -> {         JedisConnectionFactory cf = context.getBean(JedisConnectionFactory.class).         assertThat(cf.isUseSsl()).isTrue().     }). }
false;public;0;14;;@Test public void testRedisUrlConfiguration() {     this.contextRunner.withPropertyValues("spring.redis.host:foo", "spring.redis.url:redis://user:password@example:33").run((context) -> {         JedisConnectionFactory cf = context.getBean(JedisConnectionFactory.class).         assertThat(cf.getHostName()).isEqualTo("example").         assertThat(cf.getPort()).isEqualTo(33).         assertThat(cf.getPassword()).isEqualTo("password").         assertThat(cf.isUseSsl()).isFalse().     }). }
false;public;0;15;;@Test public void testOverrideUrlRedisConfiguration() {     this.contextRunner.withPropertyValues("spring.redis.host:foo", "spring.redis.password:xyz", "spring.redis.port:1000", "spring.redis.ssl:false", "spring.redis.url:rediss://user:password@example:33").run((context) -> {         JedisConnectionFactory cf = context.getBean(JedisConnectionFactory.class).         assertThat(cf.getHostName()).isEqualTo("example").         assertThat(cf.getPort()).isEqualTo(33).         assertThat(cf.getPassword()).isEqualTo("password").         assertThat(cf.isUseSsl()).isTrue().     }). }
false;public;0;15;;@Test public void testPasswordInUrlWithColon() {     this.contextRunner.withPropertyValues("spring.redis.url:redis://:pass:word@example:33").run((context) -> {         assertThat(context.getBean(JedisConnectionFactory.class).getHostName()).isEqualTo("example").         assertThat(context.getBean(JedisConnectionFactory.class).getPort()).isEqualTo(33).         assertThat(context.getBean(JedisConnectionFactory.class).getPassword()).isEqualTo("pass:word").     }). }
false;public;0;15;;@Test public void testPasswordInUrlStartsWithColon() {     this.contextRunner.withPropertyValues("spring.redis.url:redis://user::pass:word@example:33").run((context) -> {         assertThat(context.getBean(JedisConnectionFactory.class).getHostName()).isEqualTo("example").         assertThat(context.getBean(JedisConnectionFactory.class).getPort()).isEqualTo(33).         assertThat(context.getBean(JedisConnectionFactory.class).getPassword()).isEqualTo(":pass:word").     }). }
false;public;0;16;;@Test public void testRedisConfigurationWithPool() {     this.contextRunner.withPropertyValues("spring.redis.host:foo", "spring.redis.jedis.pool.min-idle:1", "spring.redis.jedis.pool.max-idle:4", "spring.redis.jedis.pool.max-active:16", "spring.redis.jedis.pool.max-wait:2000").run((context) -> {         JedisConnectionFactory cf = context.getBean(JedisConnectionFactory.class).         assertThat(cf.getHostName()).isEqualTo("foo").         assertThat(cf.getPoolConfig().getMinIdle()).isEqualTo(1).         assertThat(cf.getPoolConfig().getMaxIdle()).isEqualTo(4).         assertThat(cf.getPoolConfig().getMaxTotal()).isEqualTo(16).         assertThat(cf.getPoolConfig().getMaxWaitMillis()).isEqualTo(2000).     }). }
false;public;0;11;;@Test public void testRedisConfigurationWithTimeout() {     this.contextRunner.withPropertyValues("spring.redis.host:foo", "spring.redis.timeout:100").run((context) -> {         JedisConnectionFactory cf = context.getBean(JedisConnectionFactory.class).         assertThat(cf.getHostName()).isEqualTo("foo").         assertThat(cf.getTimeout()).isEqualTo(100).     }). }
false;public;0;12;;@Test public void testRedisConfigurationWithSentinel() {     this.contextRunner.withPropertyValues("spring.redis.sentinel.master:mymaster", "spring.redis.sentinel.nodes:127.0.0.1:26379,127.0.0.1:26380").withUserConfiguration(JedisConnectionFactoryCaptorConfiguration.class).run((context) -> {         assertThat(context).hasFailed().         assertThat(JedisConnectionFactoryCaptor.connectionFactory.isRedisSentinelAware()).isTrue().     }). }
false;public;0;16;;@Test public void testRedisConfigurationWithSentinelAndPassword() {     this.contextRunner.withPropertyValues("spring.redis.password=password", "spring.redis.sentinel.master:mymaster", "spring.redis.sentinel.nodes:127.0.0.1:26379,127.0.0.1:26380").withUserConfiguration(JedisConnectionFactoryCaptorConfiguration.class).run((context) -> {         assertThat(context).hasFailed().         assertThat(JedisConnectionFactoryCaptor.connectionFactory.isRedisSentinelAware()).isTrue().         assertThat(JedisConnectionFactoryCaptor.connectionFactory.getPassword()).isEqualTo("password").     }). }
false;public;0;8;;@Test public void testRedisConfigurationWithCluster() {     this.contextRunner.withPropertyValues("spring.redis.cluster.nodes=127.0.0.1:27379,127.0.0.1:27380").run((context) -> assertThat(context.getBean(JedisConnectionFactory.class).getClusterConnection()).isNotNull()). }
false;;0;4;;@Bean JedisClientConfigurationBuilderCustomizer customizer() {     return JedisClientConfigurationBuilder::useSsl. }
false;;0;4;;@Bean JedisConnectionFactoryCaptor jedisConnectionFactoryCaptor() {     return new JedisConnectionFactoryCaptor(). }
false;public;2;8;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     if (bean instanceof JedisConnectionFactory) {         connectionFactory = (JedisConnectionFactory) bean.     }     return bean. }
