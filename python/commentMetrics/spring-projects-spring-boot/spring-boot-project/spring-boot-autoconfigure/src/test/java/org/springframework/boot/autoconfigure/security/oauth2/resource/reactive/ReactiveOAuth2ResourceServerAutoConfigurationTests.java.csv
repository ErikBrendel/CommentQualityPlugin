commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void cleanup() throws Exception {     if (this.server != null) {         this.server.shutdown().     } }
false;public;0;10;;@Test public void autoConfigurationShouldConfigureResourceServer() {     this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://jwk-set-uri.com").run((context) -> {         assertThat(context.getBean(ReactiveJwtDecoder.class)).isInstanceOf(NimbusReactiveJwtDecoder.class).         assertFilterConfiguredWithJwtAuthenticationManager(context).     }). }
false;public;0;18;;@Test public void autoConfigurationShouldConfigureResourceServerUsingOidcIssuerUri() throws IOException {     this.server = new MockWebServer().     this.server.start().     String issuer = this.server.url("").toString().     String cleanIssuerPath = cleanIssuerPath(issuer).     setupMockResponse(cleanIssuerPath).     this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.issuer-uri=http://" + this.server.getHostName() + ":" + this.server.getPort()).run((context) -> {         assertThat(context.getBean(ReactiveJwtDecoder.class)).isInstanceOf(NimbusReactiveJwtDecoder.class).         assertFilterConfiguredWithJwtAuthenticationManager(context).     }). }
false;public;0;13;;@Test public void autoConfigurationWhenBothSetUriAndIssuerUriPresentShouldUseSetUri() {     this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://jwk-set-uri.com", "spring.security.oauth2.resourceserver.jwt.issuer-uri=http://jwk-oidc-issuer-location.com").run((context) -> {         assertThat(context.getBean(ReactiveJwtDecoder.class)).isInstanceOf(NimbusReactiveJwtDecoder.class).         assertFilterConfiguredWithJwtAuthenticationManager(context).         assertThat(context.containsBean("jwtDecoder")).isTrue().         assertThat(context.containsBean("jwtDecoderByIssuerUri")).isFalse().     }). }
false;public;0;5;;@Test public void autoConfigurationWhenJwkSetUriNullShouldNotFail() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN)). }
false;public;0;7;;@Test public void jwtDecoderBeanIsConditionalOnMissingBean() {     this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://jwk-set-uri.com").withUserConfiguration(JwtDecoderConfig.class).run((this::assertFilterConfiguredWithJwtAuthenticationManager)). }
false;public;0;7;;@Test public void jwtDecoderByIssuerUriBeanIsConditionalOnMissingBean() {     this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.issuer-uri=http://jwk-oidc-issuer-location.com").withUserConfiguration(JwtDecoderConfig.class).run((this::assertFilterConfiguredWithJwtAuthenticationManager)). }
false;public;0;10;;@Test public void autoConfigurationShouldBeConditionalOnBearerTokenAuthenticationTokenClass() {     this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://jwk-set-uri.com").withUserConfiguration(JwtDecoderConfig.class).withClassLoader(new FilteredClassLoader(BearerTokenAuthenticationToken.class)).run((context) -> assertThat(context).doesNotHaveBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN)). }
false;public;0;9;;@Test public void autoConfigurationShouldBeConditionalOnReactiveJwtDecoderClass() {     this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://jwk-set-uri.com").withUserConfiguration(JwtDecoderConfig.class).withClassLoader(new FilteredClassLoader(ReactiveJwtDecoder.class)).run((context) -> assertThat(context).doesNotHaveBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN)). }
false;public;0;10;;@Test public void autoConfigurationWhenSecurityWebFilterChainConfigPresentShouldNotAddOne() {     this.contextRunner.withPropertyValues("spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://jwk-set-uri.com").withUserConfiguration(SecurityWebFilterChainConfig.class).run((context) -> {         assertThat(context).hasSingleBean(SecurityWebFilterChain.class).         assertThat(context).hasBean("testSpringSecurityFilterChain").     }). }
false;private;1;14;;private void assertFilterConfiguredWithJwtAuthenticationManager(AssertableReactiveWebApplicationContext context) {     MatcherSecurityWebFilterChain filterChain = (MatcherSecurityWebFilterChain) context.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN).     Stream<WebFilter> filters = filterChain.getWebFilters().toStream().     AuthenticationWebFilter webFilter = (AuthenticationWebFilter) filters.filter((f) -> f instanceof AuthenticationWebFilter).findFirst().orElse(null).     ReactiveAuthenticationManager authenticationManager = (ReactiveAuthenticationManager) ReflectionTestUtils.getField(webFilter, "authenticationManager").     assertThat(authenticationManager).isInstanceOf(JwtReactiveAuthenticationManager.class). }
false;private;1;6;;private String cleanIssuerPath(String issuer) {     if (issuer.endsWith("/")) {         return issuer.substring(0, issuer.length() - 1).     }     return issuer. }
false;private;1;7;;private void setupMockResponse(String issuer) throws JsonProcessingException {     MockResponse mockResponse = new MockResponse().setResponseCode(HttpStatus.OK.value()).setBody(new ObjectMapper().writeValueAsString(getResponse(issuer))).setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE).     this.server.enqueue(mockResponse). }
false;private;1;20;;private Map<String, Object> getResponse(String issuer) {     Map<String, Object> response = new HashMap<>().     response.put("authorization_endpoint", "https://example.com/o/oauth2/v2/auth").     response.put("claims_supported", Collections.emptyList()).     response.put("code_challenge_methods_supported", Collections.emptyList()).     response.put("id_token_signing_alg_values_supported", Collections.emptyList()).     response.put("issuer", issuer).     response.put("jwks_uri", "https://example.com/oauth2/v3/certs").     response.put("response_types_supported", Collections.emptyList()).     response.put("revocation_endpoint", "https://example.com/o/oauth2/revoke").     response.put("scopes_supported", Collections.singletonList("openid")).     response.put("subject_types_supported", Collections.singletonList("public")).     response.put("grant_types_supported", Collections.singletonList("authorization_code")).     response.put("token_endpoint", "https://example.com/oauth2/v4/token").     response.put("token_endpoint_auth_methods_supported", Collections.singletonList("client_secret_basic")).     response.put("userinfo_endpoint", "https://example.com/oauth2/v3/userinfo").     return response. }
false;public;0;4;;@Bean public MapReactiveUserDetailsService userDetailsService() {     return mock(MapReactiveUserDetailsService.class). }
false;public;0;4;;@Bean public ReactiveJwtDecoder decoder() {     return mock(ReactiveJwtDecoder.class). }
false;;2;8;;@Bean SecurityWebFilterChain testSpringSecurityFilterChain(ServerHttpSecurity http, ReactiveJwtDecoder decoder) {     http.authorizeExchange().pathMatchers("/message/**").hasRole("ADMIN").anyExchange().authenticated().and().oauth2ResourceServer().jwt().jwtDecoder(decoder).     return http.build(). }
