commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void registerBeansForServletApp() {     loadWithServlet(null).     assertThat(this.webContext.getBeansOfType(Mustache.Compiler.class)).hasSize(1).     assertThat(this.webContext.getBeansOfType(MustacheResourceTemplateLoader.class)).hasSize(1).     assertThat(this.webContext.getBeansOfType(MustacheViewResolver.class)).hasSize(1). }
false;public;0;10;;@Test public void registerCompilerForServletApp() {     loadWithServlet(CustomCompilerConfiguration.class).     assertThat(this.webContext.getBeansOfType(MustacheResourceTemplateLoader.class)).hasSize(1).     assertThat(this.webContext.getBeansOfType(MustacheViewResolver.class)).hasSize(1).     assertThat(this.webContext.getBeansOfType(Mustache.Compiler.class)).hasSize(1).     assertThat(this.webContext.getBean(Mustache.Compiler.class).standardsMode).isTrue(). }
false;public;0;13;;@Test public void registerBeansForReactiveApp() {     loadWithReactive(null).     assertThat(this.reactiveWebContext.getBeansOfType(Mustache.Compiler.class)).hasSize(1).     assertThat(this.reactiveWebContext.getBeansOfType(MustacheResourceTemplateLoader.class)).hasSize(1).     assertThat(this.reactiveWebContext.getBeansOfType(MustacheViewResolver.class)).isEmpty().     assertThat(this.reactiveWebContext.getBeansOfType(org.springframework.boot.web.reactive.result.view.MustacheViewResolver.class)).hasSize(1). }
false;public;0;15;;@Test public void registerCompilerForReactiveApp() {     loadWithReactive(CustomCompilerConfiguration.class).     assertThat(this.reactiveWebContext.getBeansOfType(Mustache.Compiler.class)).hasSize(1).     assertThat(this.reactiveWebContext.getBeansOfType(MustacheResourceTemplateLoader.class)).hasSize(1).     assertThat(this.reactiveWebContext.getBeansOfType(MustacheViewResolver.class)).isEmpty().     assertThat(this.reactiveWebContext.getBeansOfType(org.springframework.boot.web.reactive.result.view.MustacheViewResolver.class)).hasSize(1).     assertThat(this.reactiveWebContext.getBean(Mustache.Compiler.class).standardsMode).isTrue(). }
false;private;1;10;;private void loadWithServlet(Class<?> config) {     this.webContext = new AnnotationConfigWebApplicationContext().     TestPropertyValues.of("spring.mustache.prefix=classpath:/mustache-templates/").applyTo(this.webContext).     if (config != null) {         this.webContext.register(config).     }     this.webContext.register(BaseConfiguration.class).     this.webContext.refresh(). }
false;private;1;10;;private void loadWithReactive(Class<?> config) {     this.reactiveWebContext = new AnnotationConfigReactiveWebApplicationContext().     TestPropertyValues.of("spring.mustache.prefix=classpath:/mustache-templates/").applyTo(this.reactiveWebContext).     if (config != null) {         this.reactiveWebContext.register(config).     }     this.reactiveWebContext.register(BaseConfiguration.class).     this.reactiveWebContext.refresh(). }
false;public;1;6;;@Bean public Mustache.Compiler compiler(Mustache.TemplateLoader mustacheTemplateLoader) {     return Mustache.compiler().standardsMode(true).withLoader(mustacheTemplateLoader). }
