commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void restTemplateWhenMessageConvertersDefinedShouldHaveMessageConverters() {     this.contextRunner.withConfiguration(AutoConfigurations.of(HttpMessageConvertersAutoConfiguration.class)).withUserConfiguration(RestTemplateConfig.class).run((context) -> {         assertThat(context).hasSingleBean(RestTemplate.class).         RestTemplate restTemplate = context.getBean(RestTemplate.class).         List<HttpMessageConverter<?>> converters = context.getBean(HttpMessageConverters.class).getConverters().         assertThat(restTemplate.getMessageConverters()).containsExactlyElementsOf(converters).         assertThat(restTemplate.getRequestFactory()).isInstanceOf(HttpComponentsClientHttpRequestFactory.class).     }). }
false;public;0;10;;@Test public void restTemplateWhenNoMessageConvertersDefinedShouldHaveDefaultMessageConverters() {     this.contextRunner.withUserConfiguration(RestTemplateConfig.class).run((context) -> {         assertThat(context).hasSingleBean(RestTemplate.class).         RestTemplate restTemplate = context.getBean(RestTemplate.class).         assertThat(restTemplate.getMessageConverters().size()).isEqualTo(new RestTemplate().getMessageConverters().size()).     }). }
false;public;0;16;;@Test @SuppressWarnings({ "unchecked", "rawtypes" }) public void restTemplateWhenHasCustomMessageConvertersShouldHaveMessageConverters() {     this.contextRunner.withConfiguration(AutoConfigurations.of(HttpMessageConvertersAutoConfiguration.class)).withUserConfiguration(CustomHttpMessageConverter.class, RestTemplateConfig.class).run((context) -> {         assertThat(context).hasSingleBean(RestTemplate.class).         RestTemplate restTemplate = context.getBean(RestTemplate.class).         assertThat(restTemplate.getMessageConverters()).extracting(HttpMessageConverter::getClass).contains((Class) CustomHttpMessageConverter.class).     }). }
false;public;0;11;;@Test public void restTemplateWhenHasCustomBuilderShouldUseCustomBuilder() {     this.contextRunner.withUserConfiguration(RestTemplateConfig.class, CustomRestTemplateBuilderConfig.class).run((context) -> {         assertThat(context).hasSingleBean(RestTemplate.class).         RestTemplate restTemplate = context.getBean(RestTemplate.class).         assertThat(restTemplate.getMessageConverters()).hasSize(1).         assertThat(restTemplate.getMessageConverters().get(0)).isInstanceOf(CustomHttpMessageConverter.class).     }). }
false;public;0;11;;@Test public void restTemplateShouldApplyCustomizer() {     this.contextRunner.withUserConfiguration(RestTemplateConfig.class, RestTemplateCustomizerConfig.class).run((context) -> {         assertThat(context).hasSingleBean(RestTemplate.class).         RestTemplate restTemplate = context.getBean(RestTemplate.class).         RestTemplateCustomizer customizer = context.getBean(RestTemplateCustomizer.class).         verify(customizer).customize(restTemplate).     }). }
false;public;0;5;;@Test public void builderShouldBeFreshForEachUse() {     this.contextRunner.withUserConfiguration(DirtyRestTemplateConfig.class).run((context) -> assertThat(context).hasNotFailed()). }
false;public;0;8;;@Test public void whenServletWebApplicationRestTemplateBuilderIsConfigured() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(RestTemplateAutoConfiguration.class)).run((context) -> assertThat(context).hasSingleBean(RestTemplateBuilder.class)). }
false;public;0;8;;@Test public void whenReactiveWebApplicationRestTemplateBuilderIsNotConfigured() {     new ReactiveWebApplicationContextRunner().withConfiguration(AutoConfigurations.of(RestTemplateAutoConfiguration.class)).run((context) -> assertThat(context).doesNotHaveBean(RestTemplateBuilder.class)). }
false;public;1;4;;@Bean public RestTemplate restTemplate(RestTemplateBuilder builder) {     return builder.build(). }
false;public;1;9;;@Bean public RestTemplate restTemplateOne(RestTemplateBuilder builder) {     try {         return builder.build().     } finally {         breakBuilderOnNextCall(builder).     } }
false;public;1;9;;@Bean public RestTemplate restTemplateTwo(RestTemplateBuilder builder) {     try {         return builder.build().     } finally {         breakBuilderOnNextCall(builder).     } }
false;private;1;5;;private void breakBuilderOnNextCall(RestTemplateBuilder builder) {     builder.additionalCustomizers((restTemplate) -> {         throw new IllegalStateException().     }). }
false;public;0;5;;@Bean public RestTemplateBuilder restTemplateBuilder() {     return new RestTemplateBuilder().messageConverters(new CustomHttpMessageConverter()). }
false;public;0;4;;@Bean public RestTemplateCustomizer restTemplateCustomizer() {     return mock(RestTemplateCustomizer.class). }
