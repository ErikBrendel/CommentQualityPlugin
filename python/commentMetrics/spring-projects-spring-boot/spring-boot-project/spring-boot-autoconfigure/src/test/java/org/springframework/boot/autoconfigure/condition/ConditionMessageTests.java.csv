commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void isEmptyWhenEmptyShouldReturnTrue() {     ConditionMessage message = ConditionMessage.empty().     assertThat(message.isEmpty()).isTrue(). }
false;public;0;5;;@Test public void isEmptyWhenNotEmptyShouldReturnFalse() {     ConditionMessage message = ConditionMessage.of("Test").     assertThat(message.isEmpty()).isFalse(). }
false;public;0;5;;@Test public void toStringWhenEmptyShouldReturnEmptyString() {     ConditionMessage message = ConditionMessage.empty().     assertThat(message.toString()).isEqualTo(""). }
false;public;0;5;;@Test public void toStringWhenHasMessageShouldReturnMessage() {     ConditionMessage message = ConditionMessage.of("Test").     assertThat(message.toString()).isEqualTo("Test"). }
false;public;0;5;;@Test public void appendWhenHasExistingMessageShouldAddSpace() {     ConditionMessage message = ConditionMessage.of("a").append("b").     assertThat(message.toString()).isEqualTo("a b"). }
false;public;0;5;;@Test public void appendWhenAppendingNullShouldDoNothing() {     ConditionMessage message = ConditionMessage.of("a").append(null).     assertThat(message.toString()).isEqualTo("a"). }
false;public;0;5;;@Test public void appendWhenNoMessageShouldNotAddSpace() {     ConditionMessage message = ConditionMessage.empty().append("b").     assertThat(message.toString()).isEqualTo("b"). }
false;public;0;6;;@Test public void andConditionWhenUsingClassShouldIncludeCondition() {     ConditionMessage message = ConditionMessage.empty().andCondition(Test.class).because("OK").     assertThat(message.toString()).isEqualTo("@Test OK"). }
false;public;0;6;;@Test public void andConditionWhenUsingStringShouldIncludeCondition() {     ConditionMessage message = ConditionMessage.empty().andCondition("@Test").because("OK").     assertThat(message.toString()).isEqualTo("@Test OK"). }
false;public;0;6;;@Test public void andConditionWhenIncludingDetailsShouldIncludeCondition() {     ConditionMessage message = ConditionMessage.empty().andCondition(Test.class, "(a=b)").because("OK").     assertThat(message.toString()).isEqualTo("@Test (a=b) OK"). }
false;public;0;8;;@Test public void ofCollectionShouldCombine() {     List<ConditionMessage> messages = new ArrayList<>().     messages.add(ConditionMessage.of("a")).     messages.add(ConditionMessage.of("b")).     ConditionMessage message = ConditionMessage.of(messages).     assertThat(message.toString()).isEqualTo("a. b"). }
false;public;0;5;;@Test public void ofCollectionWhenNullShouldReturnEmpty() {     ConditionMessage message = ConditionMessage.of((List<ConditionMessage>) null).     assertThat(message.isEmpty()).isTrue(). }
false;public;0;5;;@Test public void forConditionShouldIncludeCondition() {     ConditionMessage message = ConditionMessage.forCondition("@Test").because("OK").     assertThat(message.toString()).isEqualTo("@Test OK"). }
false;public;0;5;;@Test public void forConditionShouldNotAddExtraSpaceWithEmptyCondition() {     ConditionMessage message = ConditionMessage.forCondition("").because("OK").     assertThat(message.toString()).isEqualTo("OK"). }
false;public;0;6;;@Test public void forConditionWhenClassShouldIncludeCondition() {     ConditionMessage message = ConditionMessage.forCondition(Test.class, "(a=b)").because("OK").     assertThat(message.toString()).isEqualTo("@Test (a=b) OK"). }
false;public;0;6;;@Test public void foundExactlyShouldConstructMessage() {     ConditionMessage message = ConditionMessage.forCondition(Test.class).foundExactly("abc").     assertThat(message.toString()).isEqualTo("@Test found abc"). }
false;public;0;6;;@Test public void foundWhenSingleElementShouldUseSingular() {     ConditionMessage message = ConditionMessage.forCondition(Test.class).found("bean", "beans").items("a").     assertThat(message.toString()).isEqualTo("@Test found bean a"). }
false;public;0;6;;@Test public void foundNoneAtAllShouldConstructMessage() {     ConditionMessage message = ConditionMessage.forCondition(Test.class).found("no beans").atAll().     assertThat(message.toString()).isEqualTo("@Test found no beans"). }
false;public;0;6;;@Test public void foundWhenMultipleElementsShouldUsePlural() {     ConditionMessage message = ConditionMessage.forCondition(Test.class).found("bean", "beans").items("a", "b", "c").     assertThat(message.toString()).isEqualTo("@Test found beans a, b, c"). }
false;public;0;6;;@Test public void foundWhenQuoteStyleShouldQuote() {     ConditionMessage message = ConditionMessage.forCondition(Test.class).found("bean", "beans").items(Style.QUOTE, "a", "b", "c").     assertThat(message.toString()).isEqualTo("@Test found beans 'a', 'b', 'c'"). }
false;public;0;6;;@Test public void didNotFindWhenSingleElementShouldUseSingular() {     ConditionMessage message = ConditionMessage.forCondition(Test.class).didNotFind("class", "classes").items("a").     assertThat(message.toString()).isEqualTo("@Test did not find class a"). }
false;public;0;6;;@Test public void didNotFindWhenMultipleElementsShouldUsePlural() {     ConditionMessage message = ConditionMessage.forCondition(Test.class).didNotFind("class", "classes").items("a", "b", "c").     assertThat(message.toString()).isEqualTo("@Test did not find classes a, b, c"). }
false;public;0;6;;@Test public void resultedInShouldConstructMessage() {     ConditionMessage message = ConditionMessage.forCondition(Test.class).resultedIn("Green").     assertThat(message.toString()).isEqualTo("@Test resulted in Green"). }
false;public;0;6;;@Test public void notAvailableShouldConstructMessage() {     ConditionMessage message = ConditionMessage.forCondition(Test.class).notAvailable("JMX").     assertThat(message.toString()).isEqualTo("@Test JMX is not available"). }
false;public;0;6;;@Test public void availableShouldConstructMessage() {     ConditionMessage message = ConditionMessage.forCondition(Test.class).available("JMX").     assertThat(message.toString()).isEqualTo("@Test JMX is available"). }
