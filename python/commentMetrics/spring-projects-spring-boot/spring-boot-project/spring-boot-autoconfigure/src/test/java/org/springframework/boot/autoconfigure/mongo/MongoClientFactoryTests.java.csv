commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void portCanBeCustomized() {     MongoProperties properties = new MongoProperties().     properties.setPort(12345).     MongoClient client = createMongoClient(properties).     List<ServerAddress> allAddresses = client.getAllAddress().     assertThat(allAddresses).hasSize(1).     assertServerAddress(allAddresses.get(0), "localhost", 12345). }
false;public;0;9;;@Test public void hostCanBeCustomized() {     MongoProperties properties = new MongoProperties().     properties.setHost("mongo.example.com").     MongoClient client = createMongoClient(properties).     List<ServerAddress> allAddresses = client.getAllAddress().     assertThat(allAddresses).hasSize(1).     assertServerAddress(allAddresses.get(0), "mongo.example.com", 27017). }
false;public;0;9;;@Test public void credentialsCanBeCustomized() {     MongoProperties properties = new MongoProperties().     properties.setUsername("user").     properties.setPassword("secret".toCharArray()).     MongoClient client = createMongoClient(properties).     assertMongoCredential(client.getCredentialsList().get(0), "user", "secret", "test"). }
false;public;0;10;;@Test public void databaseCanBeCustomized() {     MongoProperties properties = new MongoProperties().     properties.setDatabase("foo").     properties.setUsername("user").     properties.setPassword("secret".toCharArray()).     MongoClient client = createMongoClient(properties).     assertMongoCredential(client.getCredentialsList().get(0), "user", "secret", "foo"). }
false;public;0;10;;@Test public void authenticationDatabaseCanBeCustomized() {     MongoProperties properties = new MongoProperties().     properties.setAuthenticationDatabase("foo").     properties.setUsername("user").     properties.setPassword("secret".toCharArray()).     MongoClient client = createMongoClient(properties).     assertMongoCredential(client.getCredentialsList().get(0), "user", "secret", "foo"). }
false;public;0;14;;@Test public void uriCanBeCustomized() {     MongoProperties properties = new MongoProperties().     properties.setUri("mongodb://user:secret@mongo1.example.com:12345," + "mongo2.example.com:23456/test").     MongoClient client = createMongoClient(properties).     List<ServerAddress> allAddresses = client.getAllAddress().     assertThat(allAddresses).hasSize(2).     assertServerAddress(allAddresses.get(0), "mongo1.example.com", 12345).     assertServerAddress(allAddresses.get(1), "mongo2.example.com", 23456).     List<MongoCredential> credentialsList = client.getCredentialsList().     assertThat(credentialsList).hasSize(1).     assertMongoCredential(credentialsList.get(0), "user", "secret", "test"). }
false;public;0;10;;@Test public void uriIsIgnoredInEmbeddedMode() {     MongoProperties properties = new MongoProperties().     properties.setUri("mongodb://mongo.example.com:1234/mydb").     this.environment.setProperty("local.mongo.port", "4000").     MongoClient client = createMongoClient(properties, this.environment).     List<ServerAddress> allAddresses = client.getAllAddress().     assertThat(allAddresses).hasSize(1).     assertServerAddress(allAddresses.get(0), "localhost", 4000). }
false;private;1;3;;private MongoClient createMongoClient(MongoProperties properties) {     return createMongoClient(properties, null). }
false;private;2;4;;private MongoClient createMongoClient(MongoProperties properties, Environment environment) {     return new MongoClientFactory(properties, environment).createMongoClient(null). }
false;private;3;5;;private void assertServerAddress(ServerAddress serverAddress, String expectedHost, int expectedPort) {     assertThat(serverAddress.getHost()).isEqualTo(expectedHost).     assertThat(serverAddress.getPort()).isEqualTo(expectedPort). }
false;private;4;6;;private void assertMongoCredential(MongoCredential credentials, String expectedUsername, String expectedPassword, String expectedSource) {     assertThat(credentials.getUserName()).isEqualTo(expectedUsername).     assertThat(credentials.getPassword()).isEqualTo(expectedPassword.toCharArray()).     assertThat(credentials.getSource()).isEqualTo(expectedSource). }
