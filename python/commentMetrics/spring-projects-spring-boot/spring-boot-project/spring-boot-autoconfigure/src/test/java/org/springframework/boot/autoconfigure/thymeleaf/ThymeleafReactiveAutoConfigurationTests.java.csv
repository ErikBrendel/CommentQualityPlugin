commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;8;;@Test public void createFromConfigClass() {     load(BaseConfiguration.class, "spring.thymeleaf.suffix:.html").     TemplateEngine engine = this.context.getBean(TemplateEngine.class).     Context attrs = new Context(Locale.UK, Collections.singletonMap("foo", "bar")).     String result = engine.process("template", attrs).     assertThat(result).isEqualTo("<html>bar</html>"). }
false;public;0;11;;@Test public void overrideCharacterEncoding() {     load(BaseConfiguration.class, "spring.thymeleaf.encoding:UTF-16").     ITemplateResolver resolver = this.context.getBean(ITemplateResolver.class).     assertThat(resolver instanceof SpringResourceTemplateResolver).isTrue().     assertThat(((SpringResourceTemplateResolver) resolver).getCharacterEncoding()).isEqualTo("UTF-16").     ThymeleafReactiveViewResolver views = this.context.getBean(ThymeleafReactiveViewResolver.class).     assertThat(views.getDefaultCharset().name()).isEqualTo("UTF-16"). }
false;public;0;9;;@Test public void overrideMediaTypes() {     load(BaseConfiguration.class, "spring.thymeleaf.reactive.media-types:text/html,text/plain").     ThymeleafReactiveViewResolver views = this.context.getBean(ThymeleafReactiveViewResolver.class).     assertThat(views.getSupportedMediaTypes()).contains(MediaType.TEXT_HTML, MediaType.TEXT_PLAIN). }
false;public;0;6;;@Test public void overrideTemplateResolverOrder() {     load(BaseConfiguration.class, "spring.thymeleaf.templateResolverOrder:25").     ITemplateResolver resolver = this.context.getBean(ITemplateResolver.class).     assertThat(resolver.getOrder()).isEqualTo(Integer.valueOf(25)). }
false;public;0;7;;@Test public void overrideViewNames() {     load(BaseConfiguration.class, "spring.thymeleaf.viewNames:foo,bar").     ThymeleafReactiveViewResolver views = this.context.getBean(ThymeleafReactiveViewResolver.class).     assertThat(views.getViewNames()).isEqualTo(new String[] { "foo", "bar" }). }
false;public;0;7;;@Test public void overrideMaxChunkSize() {     load(BaseConfiguration.class, "spring.thymeleaf.reactive.maxChunkSize:8KB").     ThymeleafReactiveViewResolver views = this.context.getBean(ThymeleafReactiveViewResolver.class).     assertThat(views.getResponseMaxChunkSizeBytes()).isEqualTo(Integer.valueOf(8192)). }
false;public;0;8;;@Test public void overrideFullModeViewNames() {     load(BaseConfiguration.class, "spring.thymeleaf.reactive.fullModeViewNames:foo,bar").     ThymeleafReactiveViewResolver views = this.context.getBean(ThymeleafReactiveViewResolver.class).     assertThat(views.getFullModeViewNames()).isEqualTo(new String[] { "foo", "bar" }). }
false;public;0;9;;@Test public void overrideChunkedModeViewNames() {     load(BaseConfiguration.class, "spring.thymeleaf.reactive.chunkedModeViewNames:foo,bar").     ThymeleafReactiveViewResolver views = this.context.getBean(ThymeleafReactiveViewResolver.class).     assertThat(views.getChunkedModeViewNames()).isEqualTo(new String[] { "foo", "bar" }). }
false;public;0;6;;@Test public void overrideEnableSpringElCompiler() {     load(BaseConfiguration.class, "spring.thymeleaf.enable-spring-el-compiler:true").     assertThat(this.context.getBean(SpringWebFluxTemplateEngine.class).getEnableSpringELCompiler()).isTrue(). }
false;public;0;6;;@Test public void enableSpringElCompilerIsDisabledByDefault() {     load(BaseConfiguration.class).     assertThat(this.context.getBean(SpringWebFluxTemplateEngine.class).getEnableSpringELCompiler()).isFalse(). }
false;public;0;7;;@Test public void overrideRenderHiddenMarkersBeforeCheckboxes() {     load(BaseConfiguration.class, "spring.thymeleaf.render-hidden-markers-before-checkboxes:true").     assertThat(this.context.getBean(SpringWebFluxTemplateEngine.class).getRenderHiddenMarkersBeforeCheckboxes()).isTrue(). }
false;public;0;6;;@Test public void enableRenderHiddenMarkersBeforeCheckboxesIsDisabledByDefault() {     load(BaseConfiguration.class).     assertThat(this.context.getBean(SpringWebFluxTemplateEngine.class).getRenderHiddenMarkersBeforeCheckboxes()).isFalse(). }
false;public;0;6;;@Test public void templateLocationDoesNotExist() {     load(BaseConfiguration.class, "spring.thymeleaf.prefix:classpath:/no-such-directory/").     assertThat(this.output.toString()).contains("Cannot find template location"). }
false;public;0;9;;@Test public void templateLocationEmpty() {     new File(this.buildOutput.getTestResourcesLocation(), "empty-templates/empty-directory").mkdirs().     load(BaseConfiguration.class, "spring.thymeleaf.prefix:classpath:/empty-templates/empty-directory/").     assertThat(this.output.toString()).doesNotContain("Cannot find template location"). }
false;public;0;9;;@Test public void useDataDialect() {     load(BaseConfiguration.class).     ISpringWebFluxTemplateEngine engine = this.context.getBean(ISpringWebFluxTemplateEngine.class).     Context attrs = new Context(Locale.UK, Collections.singletonMap("foo", "bar")).     String result = engine.process("data-dialect", attrs).     assertThat(result).isEqualTo("<html><body data-foo=\"bar\"></body></html>"). }
false;public;0;9;;@Test public void useJava8TimeDialect() {     load(BaseConfiguration.class).     ISpringWebFluxTemplateEngine engine = this.context.getBean(ISpringWebFluxTemplateEngine.class).     Context attrs = new Context(Locale.UK).     String result = engine.process("java8time-dialect", attrs).     assertThat(result).isEqualTo("<html><body>2015-11-24</body></html>"). }
false;public;0;16;;@Test public void useSecurityDialect() {     load(BaseConfiguration.class).     ISpringWebFluxTemplateEngine engine = this.context.getBean(ISpringWebFluxTemplateEngine.class).     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/test").build()).     exchange.getAttributes().put(SpringSecurityContextUtils.SECURITY_CONTEXT_MODEL_ATTRIBUTE_NAME, new SecurityContextImpl(new TestingAuthenticationToken("alice", "admin"))).     IContext attrs = new SpringWebFluxContext(exchange).     String result = engine.process("security-dialect", attrs).     assertThat(result).isEqualTo("<html><body><div>alice</div></body></html>" + System.lineSeparator()). }
false;public;0;9;;@Test public void renderTemplate() {     load(BaseConfiguration.class).     ISpringWebFluxTemplateEngine engine = this.context.getBean(ISpringWebFluxTemplateEngine.class).     Context attrs = new Context(Locale.UK, Collections.singletonMap("foo", "bar")).     String result = engine.process("home", attrs).     assertThat(result).isEqualTo("<html><body>bar</body></html>"). }
false;public;0;7;;@Test public void layoutDialectCanBeCustomized() {     load(LayoutDialectConfiguration.class).     LayoutDialect layoutDialect = this.context.getBean(LayoutDialect.class).     assertThat(ReflectionTestUtils.getField(layoutDialect, "sortingStrategy")).isInstanceOf(GroupingStrategy.class). }
false;private;2;9;;private void load(Class<?> config, String... envVariables) {     this.context = new AnnotationConfigReactiveWebApplicationContext().     TestPropertyValues.of(envVariables).applyTo(this.context).     if (config != null) {         this.context.register(config).     }     this.context.register(config).     this.context.refresh(). }
false;public;0;4;;@Bean public LayoutDialect layoutDialect() {     return new LayoutDialect(new GroupingStrategy()). }
