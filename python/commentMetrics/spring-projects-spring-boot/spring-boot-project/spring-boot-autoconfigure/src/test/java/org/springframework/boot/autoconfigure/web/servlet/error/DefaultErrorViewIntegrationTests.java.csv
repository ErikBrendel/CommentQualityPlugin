commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build(). }
false;public;0;9;;@Test public void testErrorForBrowserClient() throws Exception {     MvcResult response = this.mockMvc.perform(get("/error").accept(MediaType.TEXT_HTML)).andExpect(status().is5xxServerError()).andReturn().     String content = response.getResponse().getContentAsString().     assertThat(content).contains("<html>").     assertThat(content).contains("999"). }
false;public;0;14;;@Test public void testErrorWithHtmlEscape() throws Exception {     MvcResult response = this.mockMvc.perform(get("/error").requestAttr("javax.servlet.error.exception", new RuntimeException("<script>alert('Hello World')</script>")).accept(MediaType.TEXT_HTML)).andExpect(status().is5xxServerError()).andReturn().     String content = response.getResponse().getContentAsString().     assertThat(content).contains("&lt.script&gt.").     assertThat(content).contains("Hello World").     assertThat(content).contains("999"). }
false;public;0;13;;@Test public void testErrorWithSpelEscape() throws Exception {     String spel = "${T(" + getClass().getName() + ").injectCall()}".     MvcResult response = this.mockMvc.perform(get("/error").requestAttr("javax.servlet.error.exception", new RuntimeException(spel)).accept(MediaType.TEXT_HTML)).andExpect(status().is5xxServerError()).andReturn().     String content = response.getResponse().getContentAsString().     assertThat(content).doesNotContain("injection"). }
false;public,static;0;3;;public static String injectCall() {     return "injection". }
true;public,static;1;3;// For manual testing ;// For manual testing public static void main(String[] args) {     SpringApplication.run(TestConfiguration.class, args). }
