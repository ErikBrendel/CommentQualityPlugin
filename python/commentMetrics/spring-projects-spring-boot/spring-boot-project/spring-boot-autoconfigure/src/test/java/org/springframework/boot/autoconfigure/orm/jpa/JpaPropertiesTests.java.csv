commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void determineDatabaseNoCheckIfDatabaseIsSet() {     this.contextRunner.withPropertyValues("spring.jpa.database=postgresql").run(assertJpaProperties((properties) -> {         DataSource dataSource = mockStandaloneDataSource().         Database database = properties.determineDatabase(dataSource).         assertThat(database).isEqualTo(Database.POSTGRESQL).         try {             verify(dataSource, never()).getConnection().         } catch (SQLException ex) {             throw new IllegalStateException("Should not happen", ex).         }     })). }
false;public;0;8;;@Test public void determineDatabaseWithKnownUrl() {     this.contextRunner.run(assertJpaProperties((properties) -> {         Database database = properties.determineDatabase(mockDataSource("jdbc:h2:mem:testdb")).         assertThat(database).isEqualTo(Database.H2).     })). }
false;public;0;9;;@Test public void determineDatabaseWithKnownUrlAndUserConfig() {     this.contextRunner.withPropertyValues("spring.jpa.database=mysql").run(assertJpaProperties((properties) -> {         Database database = properties.determineDatabase(mockDataSource("jdbc:h2:mem:testdb")).         assertThat(database).isEqualTo(Database.MYSQL).     })). }
false;public;0;8;;@Test public void determineDatabaseWithUnknownUrl() {     this.contextRunner.run(assertJpaProperties((properties) -> {         Database database = properties.determineDatabase(mockDataSource("jdbc:unknown://localhost")).         assertThat(database).isEqualTo(Database.DEFAULT).     })). }
false;private;0;10;;private DataSource mockStandaloneDataSource() {     try {         DataSource ds = mock(DataSource.class).         given(ds.getConnection()).willThrow(SQLException.class).         return ds.     } catch (SQLException ex) {         throw new IllegalStateException("Should not happen", ex).     } }
false;private;1;14;;private DataSource mockDataSource(String jdbcUrl) {     DataSource ds = mock(DataSource.class).     try {         DatabaseMetaData metadata = mock(DatabaseMetaData.class).         given(metadata.getURL()).willReturn(jdbcUrl).         Connection connection = mock(Connection.class).         given(connection.getMetaData()).willReturn(metadata).         given(ds.getConnection()).willReturn(connection).     } catch (SQLException ex) {     // Do nothing     }     return ds. }
false;private;1;7;;private ContextConsumer<AssertableApplicationContext> assertJpaProperties(Consumer<JpaProperties> consumer) {     return (context) -> {         assertThat(context).hasSingleBean(JpaProperties.class).         consumer.accept(context.getBean(JpaProperties.class)).     }. }
