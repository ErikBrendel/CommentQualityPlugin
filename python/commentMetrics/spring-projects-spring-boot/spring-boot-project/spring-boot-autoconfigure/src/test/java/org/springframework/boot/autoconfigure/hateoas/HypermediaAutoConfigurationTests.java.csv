commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;12;;@Test public void linkDiscoverersCreated() {     this.context = new AnnotationConfigWebApplicationContext().     this.context.setServletContext(new MockServletContext()).     this.context.register(BaseConfig.class).     this.context.refresh().     LinkDiscoverers discoverers = this.context.getBean(LinkDiscoverers.class).     assertThat(discoverers).isNotNull().     Optional<LinkDiscoverer> discoverer = discoverers.getLinkDiscovererFor(MediaTypes.HAL_JSON).     assertThat(discoverer).containsInstanceOf(HalLinkDiscoverer.class). }
false;public;0;9;;@Test public void entityLinksCreated() {     this.context = new AnnotationConfigWebApplicationContext().     this.context.setServletContext(new MockServletContext()).     this.context.register(BaseConfig.class).     this.context.refresh().     EntityLinks discoverers = this.context.getBean(EntityLinks.class).     assertThat(discoverers).isNotNull(). }
false;public;0;11;;@Test public void doesBackOffIfEnableHypermediaSupportIsDeclaredManually() {     this.context = new AnnotationConfigWebApplicationContext().     this.context.setServletContext(new MockServletContext()).     this.context.register(EnableHypermediaSupportConfig.class, BaseConfig.class).     TestPropertyValues.of("spring.jackson.serialization.INDENT_OUTPUT:true").applyTo(this.context).     this.context.refresh().     assertThat(this.context.getBeansOfType(HypermediaConfiguration.class)).isEmpty().     assertThat(this.context.getBeansOfType(EntityLinksConfiguration.class)).isEmpty(). }
false;public;0;15;;@Test public void supportedMediaTypesOfTypeConstrainedConvertersIsCustomized() {     this.context = new AnnotationConfigWebApplicationContext().     this.context.setServletContext(new MockServletContext()).     this.context.register(BaseConfig.class).     this.context.refresh().     RequestMappingHandlerAdapter handlerAdapter = this.context.getBean(RequestMappingHandlerAdapter.class).     for (HttpMessageConverter<?> converter : handlerAdapter.getMessageConverters()) {         if (converter instanceof TypeConstrainedMappingJackson2HttpMessageConverter) {             assertThat(converter.getSupportedMediaTypes()).contains(MediaType.APPLICATION_JSON, MediaTypes.HAL_JSON).         }     } }
false;public;0;17;;@Test public void customizationOfSupportedMediaTypesCanBeDisabled() {     this.context = new AnnotationConfigWebApplicationContext().     this.context.setServletContext(new MockServletContext()).     this.context.register(BaseConfig.class).     TestPropertyValues.of("spring.hateoas.use-hal-as-default-json-media-type:false").applyTo(this.context).     this.context.refresh().     RequestMappingHandlerAdapter handlerAdapter = this.context.getBean(RequestMappingHandlerAdapter.class).     for (HttpMessageConverter<?> converter : handlerAdapter.getMessageConverters()) {         if (converter instanceof TypeConstrainedMappingJackson2HttpMessageConverter) {             assertThat(converter.getSupportedMediaTypes()).containsExactly(MediaTypes.HAL_JSON, MediaTypes.HAL_JSON_UTF8).         }     } }
