commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void canBindCharArrayPassword() {     // gh-1572     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.data.mongodb.password:word").applyTo(context).     context.register(Config.class).     context.refresh().     MongoProperties properties = context.getBean(MongoProperties.class).     assertThat(properties.getPassword()).isEqualTo("word".toCharArray()). }
false;public;0;57;;@Test @SuppressWarnings("deprecation") public void allMongoClientOptionsCanBeSet() {     MongoClientOptions.Builder builder = MongoClientOptions.builder().     builder.alwaysUseMBeans(true).     builder.connectionsPerHost(101).     builder.connectTimeout(10001).     builder.cursorFinalizerEnabled(false).     builder.description("test").     builder.maxWaitTime(120001).     builder.socketKeepAlive(false).     builder.socketTimeout(1000).     builder.threadsAllowedToBlockForConnectionMultiplier(6).     builder.minConnectionsPerHost(0).     builder.maxConnectionIdleTime(60000).     builder.maxConnectionLifeTime(60000).     builder.heartbeatFrequency(10001).     builder.minHeartbeatFrequency(501).     builder.heartbeatConnectTimeout(20001).     builder.heartbeatSocketTimeout(20001).     builder.localThreshold(20).     builder.requiredReplicaSetName("testReplicaSetName").     MongoClientOptions options = builder.build().     MongoProperties properties = new MongoProperties().     MongoClient client = new MongoClientFactory(properties, null).createMongoClient(options).     MongoClientOptions wrapped = client.getMongoClientOptions().     assertThat(wrapped.isAlwaysUseMBeans()).isEqualTo(options.isAlwaysUseMBeans()).     assertThat(wrapped.getConnectionsPerHost()).isEqualTo(options.getConnectionsPerHost()).     assertThat(wrapped.getConnectTimeout()).isEqualTo(options.getConnectTimeout()).     assertThat(wrapped.isCursorFinalizerEnabled()).isEqualTo(options.isCursorFinalizerEnabled()).     assertThat(wrapped.getDescription()).isEqualTo(options.getDescription()).     assertThat(wrapped.getMaxWaitTime()).isEqualTo(options.getMaxWaitTime()).     assertThat(wrapped.getSocketTimeout()).isEqualTo(options.getSocketTimeout()).     assertThat(wrapped.isSocketKeepAlive()).isEqualTo(options.isSocketKeepAlive()).     assertThat(wrapped.getThreadsAllowedToBlockForConnectionMultiplier()).isEqualTo(options.getThreadsAllowedToBlockForConnectionMultiplier()).     assertThat(wrapped.getMinConnectionsPerHost()).isEqualTo(options.getMinConnectionsPerHost()).     assertThat(wrapped.getMaxConnectionIdleTime()).isEqualTo(options.getMaxConnectionIdleTime()).     assertThat(wrapped.getMaxConnectionLifeTime()).isEqualTo(options.getMaxConnectionLifeTime()).     assertThat(wrapped.getHeartbeatFrequency()).isEqualTo(options.getHeartbeatFrequency()).     assertThat(wrapped.getMinHeartbeatFrequency()).isEqualTo(options.getMinHeartbeatFrequency()).     assertThat(wrapped.getHeartbeatConnectTimeout()).isEqualTo(options.getHeartbeatConnectTimeout()).     assertThat(wrapped.getHeartbeatSocketTimeout()).isEqualTo(options.getHeartbeatSocketTimeout()).     assertThat(wrapped.getLocalThreshold()).isEqualTo(options.getLocalThreshold()).     assertThat(wrapped.getRequiredReplicaSetName()).isEqualTo(options.getRequiredReplicaSetName()). }
false;public;0;12;;@Test public void uriOverridesHostAndPort() {     MongoProperties properties = new MongoProperties().     properties.setHost("localhost").     properties.setPort(27017).     properties.setUri("mongodb://mongo1.example.com:12345").     MongoClient client = new MongoClientFactory(properties, null).createMongoClient(null).     List<ServerAddress> allAddresses = client.getAllAddress().     assertThat(allAddresses).hasSize(1).     assertServerAddress(allAddresses.get(0), "mongo1.example.com", 12345). }
false;public;0;11;;@Test public void onlyHostAndPortSetShouldUseThat() {     MongoProperties properties = new MongoProperties().     properties.setHost("localhost").     properties.setPort(27017).     MongoClient client = new MongoClientFactory(properties, null).createMongoClient(null).     List<ServerAddress> allAddresses = client.getAllAddress().     assertThat(allAddresses).hasSize(1).     assertServerAddress(allAddresses.get(0), "localhost", 27017). }
false;public;0;10;;@Test public void onlyUriSetShouldUseThat() {     MongoProperties properties = new MongoProperties().     properties.setUri("mongodb://mongo1.example.com:12345").     MongoClient client = new MongoClientFactory(properties, null).createMongoClient(null).     List<ServerAddress> allAddresses = client.getAllAddress().     assertThat(allAddresses).hasSize(1).     assertServerAddress(allAddresses.get(0), "mongo1.example.com", 12345). }
false;public;0;9;;@Test public void noCustomAddressAndNoUriUsesDefaultUri() {     MongoProperties properties = new MongoProperties().     MongoClient client = new MongoClientFactory(properties, null).createMongoClient(null).     List<ServerAddress> allAddresses = client.getAllAddress().     assertThat(allAddresses).hasSize(1).     assertServerAddress(allAddresses.get(0), "localhost", 27017). }
false;private;3;5;;private void assertServerAddress(ServerAddress serverAddress, String expectedHost, int expectedPort) {     assertThat(serverAddress.getHost()).isEqualTo(expectedHost).     assertThat(serverAddress.getPort()).isEqualTo(expectedPort). }
