commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void defaultConfig() {     this.contextRunner.withPropertyValues("spring.session.store-type=mongodb").withConfiguration(AutoConfigurations.of(EmbeddedMongoAutoConfiguration.class, MongoAutoConfiguration.class, MongoDataAutoConfiguration.class, MongoReactiveAutoConfiguration.class, MongoReactiveDataAutoConfiguration.class)).run(validateSpringSessionUsesMongo("sessions")). }
false;public;0;12;;@Test public void defaultConfigWithUniqueStoreImplementation() {     this.contextRunner.withClassLoader(new FilteredClassLoader(ReactiveRedisOperationsSessionRepository.class)).withConfiguration(AutoConfigurations.of(EmbeddedMongoAutoConfiguration.class, MongoAutoConfiguration.class, MongoDataAutoConfiguration.class, MongoReactiveAutoConfiguration.class, MongoReactiveDataAutoConfiguration.class)).run(validateSpringSessionUsesMongo("sessions")). }
false;public;0;12;;@Test public void mongoSessionStoreWithCustomizations() {     this.contextRunner.withConfiguration(AutoConfigurations.of(EmbeddedMongoAutoConfiguration.class, MongoAutoConfiguration.class, MongoDataAutoConfiguration.class, MongoReactiveAutoConfiguration.class, MongoReactiveDataAutoConfiguration.class)).withPropertyValues("spring.session.store-type=mongodb", "spring.session.mongodb.collection-name=foo").run(validateSpringSessionUsesMongo("foo")). }
false;private;1;8;;private ContextConsumer<AssertableReactiveWebApplicationContext> validateSpringSessionUsesMongo(String collectionName) {     return (context) -> {         ReactiveMongoOperationsSessionRepository repository = validateSessionRepository(context, ReactiveMongoOperationsSessionRepository.class).         assertThat(repository.getCollectionName()).isEqualTo(collectionName).     }. }
