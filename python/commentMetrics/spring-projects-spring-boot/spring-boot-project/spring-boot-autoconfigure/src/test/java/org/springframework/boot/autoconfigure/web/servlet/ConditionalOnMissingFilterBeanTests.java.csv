commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void outcomeWhenValueIsOfMissingBeanReturnsMatch() {     this.contextRunner.withUserConfiguration(WithoutTestFilterConfig.class, OnMissingWithValueConfig.class).run((context) -> assertThat(context).satisfies(filterBeanRequirement("myOtherFilter", "testFilter"))). }
false;public;0;8;;@Test public void outcomeWhenValueIsOfExistingBeanReturnsNoMatch() {     this.contextRunner.withUserConfiguration(WithTestFilterConfig.class, OnMissingWithValueConfig.class).run((context) -> assertThat(context).satisfies(filterBeanRequirement("myTestFilter"))). }
false;public;0;8;;@Test public void outcomeWhenValueIsOfMissingBeanRegistrationReturnsMatch() {     this.contextRunner.withUserConfiguration(WithoutTestFilterRegistrationConfig.class, OnMissingWithValueConfig.class).run((context) -> assertThat(context).satisfies(filterBeanRequirement("myOtherFilter", "testFilter"))). }
false;public;0;8;;@Test public void outcomeWhenValueIsOfExistingBeanRegistrationReturnsNoMatch() {     this.contextRunner.withUserConfiguration(WithTestFilterRegistrationConfig.class, OnMissingWithValueConfig.class).run((context) -> assertThat(context).satisfies(filterBeanRequirement("myTestFilter"))). }
false;public;0;8;;@Test public void outcomeWhenReturnTypeIsOfExistingBeanReturnsNoMatch() {     this.contextRunner.withUserConfiguration(WithTestFilterConfig.class, OnMissingWithReturnTypeConfig.class).run((context) -> assertThat(context).satisfies(filterBeanRequirement("myTestFilter"))). }
false;public;0;8;;@Test public void outcomeWhenReturnTypeIsOfExistingBeanRegistrationReturnsNoMatch() {     this.contextRunner.withUserConfiguration(WithTestFilterRegistrationConfig.class, OnMissingWithReturnTypeConfig.class).run((context) -> assertThat(context).satisfies(filterBeanRequirement("myTestFilter"))). }
false;public;0;8;;@Test public void outcomeWhenReturnRegistrationTypeIsOfExistingBeanReturnsNoMatch() {     this.contextRunner.withUserConfiguration(WithTestFilterConfig.class, OnMissingWithReturnRegistrationTypeConfig.class).run((context) -> assertThat(context).satisfies(filterBeanRequirement("myTestFilter"))). }
false;public;0;8;;@Test public void outcomeWhenReturnRegistrationTypeIsOfExistingBeanRegistrationReturnsNoMatch() {     this.contextRunner.withUserConfiguration(WithTestFilterRegistrationConfig.class, OnMissingWithReturnRegistrationTypeConfig.class).run((context) -> assertThat(context).satisfies(filterBeanRequirement("myTestFilter"))). }
false;private;1;10;;private Consumer<ConfigurableApplicationContext> filterBeanRequirement(String... names) {     return (context) -> {         String[] filters = context.getBeanNamesForType(Filter.class).         String[] registrations = context.getBeanNamesForType(FilterRegistrationBean.class).         assertThat(StringUtils.concatenateStringArrays(filters, registrations)).containsOnly(names).     }. }
false;public;0;4;;@Bean public TestFilter myTestFilter() {     return new TestFilter(). }
false;public;0;4;;@Bean public OtherFilter myOtherFilter() {     return new OtherFilter(). }
false;public;0;4;;@Bean public FilterRegistrationBean<OtherFilter> myOtherFilter() {     return new FilterRegistrationBean<>(new OtherFilter()). }
false;public;0;4;;@Bean public FilterRegistrationBean<TestFilter> myTestFilter() {     return new FilterRegistrationBean<>(new TestFilter()). }
false;public;0;5;;@Bean @ConditionalOnMissingFilterBean(TestFilter.class) public TestFilter testFilter() {     return new TestFilter(). }
false;public;0;5;;@Bean @ConditionalOnMissingFilterBean public TestFilter testFilter() {     return new TestFilter(). }
false;public;0;5;;@Bean @ConditionalOnMissingFilterBean public FilterRegistrationBean<TestFilter> testFilter() {     return new FilterRegistrationBean<>(new TestFilter()). }
false;public;3;4;;@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { }
false;public;3;4;;@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { }
