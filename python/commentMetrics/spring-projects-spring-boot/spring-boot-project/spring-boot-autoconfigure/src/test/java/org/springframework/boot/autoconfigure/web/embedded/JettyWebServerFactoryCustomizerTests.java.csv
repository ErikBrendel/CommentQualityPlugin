commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     this.environment = new MockEnvironment().     this.serverProperties = new ServerProperties().     ConfigurationPropertySources.attach(this.environment).     this.customizer = new JettyWebServerFactoryCustomizer(this.environment, this.serverProperties). }
false;public;0;8;;@Test public void deduceUseForwardHeaders() {     this.environment.setProperty("DYNO", "-").     ConfigurableJettyWebServerFactory factory = mock(ConfigurableJettyWebServerFactory.class).     this.customizer.customize(factory).     verify(factory).setUseForwardHeaders(true). }
false;public;0;7;;@Test public void defaultUseForwardHeaders() {     ConfigurableJettyWebServerFactory factory = mock(ConfigurableJettyWebServerFactory.class).     this.customizer.customize(factory).     verify(factory).setUseForwardHeaders(false). }
false;public;0;31;;@Test public void accessLogCanBeCustomized() throws IOException {     File logFile = File.createTempFile("jetty_log", ".log").     String timezone = TimeZone.getDefault().getID().     bind("server.jetty.accesslog.enabled=true", "server.jetty.accesslog.filename=" + logFile.getAbsolutePath().replace("\\", "\\\\"), "server.jetty.accesslog.file-date-format=yyyy-MM-dd", "server.jetty.accesslog.retention-period=42", "server.jetty.accesslog.append=true", "server.jetty.accesslog.extended-format=true", "server.jetty.accesslog.date-format=HH:mm:ss", "server.jetty.accesslog.locale=en_BE", "server.jetty.accesslog.time-zone=" + timezone, "server.jetty.accesslog.log-cookies=true", "server.jetty.accesslog.log-server=true", "server.jetty.accesslog.log-latency=true").     JettyWebServer server = customizeAndGetServer().     NCSARequestLog requestLog = getNCSARequestLog(server).     assertThat(requestLog.getFilename()).isEqualTo(logFile.getAbsolutePath()).     assertThat(requestLog.getFilenameDateFormat()).isEqualTo("yyyy-MM-dd").     assertThat(requestLog.getRetainDays()).isEqualTo(42).     assertThat(requestLog.isAppend()).isTrue().     assertThat(requestLog.isExtended()).isTrue().     assertThat(requestLog.getLogDateFormat()).isEqualTo("HH:mm:ss").     assertThat(requestLog.getLogLocale()).isEqualTo(new Locale("en", "BE")).     assertThat(requestLog.getLogTimeZone()).isEqualTo(timezone).     assertThat(requestLog.getLogCookies()).isTrue().     assertThat(requestLog.getLogServer()).isTrue().     assertThat(requestLog.getLogLatency()).isTrue(). }
false;public;0;12;;@Test public void accessLogCanBeEnabled() {     bind("server.jetty.accesslog.enabled=true").     JettyWebServer server = customizeAndGetServer().     NCSARequestLog requestLog = getNCSARequestLog(server).     assertThat(requestLog.getFilename()).isNull().     assertThat(requestLog.isAppend()).isFalse().     assertThat(requestLog.isExtended()).isFalse().     assertThat(requestLog.getLogCookies()).isFalse().     assertThat(requestLog.getLogServer()).isFalse().     assertThat(requestLog.getLogLatency()).isFalse(). }
false;private;1;5;;private NCSARequestLog getNCSARequestLog(JettyWebServer server) {     RequestLog requestLog = server.getServer().getRequestLog().     assertThat(requestLog).isInstanceOf(NCSARequestLog.class).     return (NCSARequestLog) requestLog. }
false;public;0;8;;@Test public void setUseForwardHeaders() {     this.serverProperties.setUseForwardHeaders(true).     ConfigurableJettyWebServerFactory factory = mock(ConfigurableJettyWebServerFactory.class).     this.customizer.customize(factory).     verify(factory).setUseForwardHeaders(true). }
false;public;0;7;;@Test public void customizeMaxHttpHeaderSize() {     bind("server.max-http-header-size=2048").     JettyWebServer server = customizeAndGetServer().     List<Integer> requestHeaderSizes = getRequestHeaderSizes(server).     assertThat(requestHeaderSizes).containsOnly(2048). }
false;public;0;7;;@Test public void customMaxHttpHeaderSizeIgnoredIfNegative() {     bind("server.max-http-header-size=-1").     JettyWebServer server = customizeAndGetServer().     List<Integer> requestHeaderSizes = getRequestHeaderSizes(server).     assertThat(requestHeaderSizes).containsOnly(8192). }
false;public;0;7;;@Test public void customMaxHttpHeaderSizeIgnoredIfZero() {     bind("server.max-http-header-size=0").     JettyWebServer server = customizeAndGetServer().     List<Integer> requestHeaderSizes = getRequestHeaderSizes(server).     assertThat(requestHeaderSizes).containsOnly(8192). }
false;private;1;17;;private List<Integer> getRequestHeaderSizes(JettyWebServer server) {     List<Integer> requestHeaderSizes = new ArrayList<>().     // Start (and directly stop) server to have connectors available     server.start().     server.stop().     Connector[] connectors = server.getServer().getConnectors().     for (Connector connector : connectors) {         connector.getConnectionFactories().stream().filter((factory) -> factory instanceof ConnectionFactory).forEach((cf) -> {             ConnectionFactory factory = (ConnectionFactory) cf.             HttpConfiguration configuration = factory.getHttpConfiguration().             requestHeaderSizes.add(configuration.getRequestHeaderSize()).         }).     }     return requestHeaderSizes. }
false;private;1;6;;private void bind(String... inlinedProperties) {     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, inlinedProperties).     new Binder(ConfigurationPropertySources.get(this.environment)).bind("server", Bindable.ofInstance(this.serverProperties)). }
false;private;0;4;;private JettyWebServer customizeAndGetServer() {     JettyServletWebServerFactory factory = customizeAndGetFactory().     return (JettyWebServer) factory.getWebServer(). }
false;private;0;5;;private JettyServletWebServerFactory customizeAndGetFactory() {     JettyServletWebServerFactory factory = new JettyServletWebServerFactory(0).     this.customizer.customize(factory).     return factory. }
