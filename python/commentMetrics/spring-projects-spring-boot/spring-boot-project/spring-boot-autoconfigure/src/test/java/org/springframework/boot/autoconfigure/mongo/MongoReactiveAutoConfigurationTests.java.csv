commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void clientExists() {     this.contextRunner.run((context) -> assertThat(context).hasSingleBean(MongoClient.class)). }
false;public;0;7;;@Test public void optionsAdded() {     this.contextRunner.withPropertyValues("spring.data.mongodb.host:localhost").withUserConfiguration(OptionsConfig.class).run((context) -> assertThat(getSettings(context).getSocketSettings().getReadTimeout(TimeUnit.SECONDS)).isEqualTo(300)). }
false;public;0;8;;@Test public void optionsAddedButNoHost() {     this.contextRunner.withPropertyValues("spring.data.mongodb.uri:mongodb://localhost/test").withUserConfiguration(OptionsConfig.class).run((context) -> assertThat(getSettings(context).getReadPreference()).isEqualTo(ReadPreference.nearest())). }
false;public;0;12;;@Test public void optionsSslConfig() {     this.contextRunner.withPropertyValues("spring.data.mongodb.uri:mongodb://localhost/test").withUserConfiguration(SslOptionsConfig.class).run((context) -> {         assertThat(context).hasSingleBean(MongoClient.class).         MongoClientSettings settings = getSettings(context).         assertThat(settings.getApplicationName()).isEqualTo("test-config").         assertThat(settings.getStreamFactoryFactory()).isSameAs(context.getBean("myStreamFactoryFactory")).     }). }
false;public;0;8;;@Test public void nettyStreamFactoryFactoryIsConfiguredAutomatically() {     this.contextRunner.run((context) -> {         assertThat(context).hasSingleBean(MongoClient.class).         assertThat(getSettings(context).getStreamFactoryFactory()).isInstanceOf(NettyStreamFactoryFactory.class).     }). }
false;public;0;13;;@Test public void customizerOverridesAutoConfig() {     this.contextRunner.withPropertyValues("spring.data.mongodb.uri:mongodb://localhost/test?appname=auto-config").withUserConfiguration(SimpleCustomizerConfig.class).run((context) -> {         assertThat(context).hasSingleBean(MongoClient.class).         MongoClientSettings settings = getSettings(context).         assertThat(settings.getApplicationName()).isEqualTo("overridden-name").         assertThat(settings.getStreamFactoryFactory()).isEqualTo(SimpleCustomizerConfig.streamFactoryFactory).     }). }
false;private;1;6;;@SuppressWarnings("deprecation") private MongoClientSettings getSettings(ApplicationContext context) {     MongoClient client = context.getBean(MongoClient.class).     return (MongoClientSettings) ReflectionTestUtils.getField(client.getSettings(), "wrapped"). }
false;public;0;7;;@Bean public MongoClientSettings mongoClientSettings() {     return MongoClientSettings.builder().readPreference(ReadPreference.nearest()).applyToSocketSettings((socket) -> socket.readTimeout(300, TimeUnit.SECONDS)).build(). }
false;public;0;5;;@Bean public MongoClientSettings mongoClientSettings() {     return MongoClientSettings.builder().applicationName("test-config").streamFactoryFactory(myStreamFactoryFactory()).build(). }
false;public;0;7;;@Bean public StreamFactoryFactory myStreamFactoryFactory() {     StreamFactoryFactory streamFactoryFactory = mock(StreamFactoryFactory.class).     given(streamFactoryFactory.create(any(), any())).willReturn(mock(StreamFactory.class)).     return streamFactoryFactory. }
false;public;0;6;;@Bean public MongoClientSettingsBuilderCustomizer customizer() {     return (clientSettingsBuilder) -> clientSettingsBuilder.applicationName("overridden-name").streamFactoryFactory(streamFactoryFactory). }
