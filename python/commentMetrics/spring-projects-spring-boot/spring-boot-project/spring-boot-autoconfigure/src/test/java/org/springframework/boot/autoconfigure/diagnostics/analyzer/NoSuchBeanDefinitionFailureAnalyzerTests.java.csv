commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void failureAnalysisForMultipleBeans() {     FailureAnalysis analysis = analyzeFailure(new NoUniqueBeanDefinitionException(String.class, 2, "Test")).     assertThat(analysis).isNull(). }
false;public;0;11;;@Test public void failureAnalysisForNoMatchType() {     FailureAnalysis analysis = analyzeFailure(createFailure(StringHandler.class)).     assertDescriptionConstructorMissingType(analysis, StringHandler.class, 0, String.class).     assertThat(analysis.getDescription()).doesNotContain("No matching auto-configuration has been found for this type.").     assertThat(analysis.getAction()).startsWith(String.format("Consider defining a bean of type '%s' in your configuration.", String.class.getName())). }
false;public;0;11;;@Test public void failureAnalysisForMissingPropertyExactType() {     FailureAnalysis analysis = analyzeFailure(createFailure(StringPropertyTypeConfiguration.class)).     assertDescriptionConstructorMissingType(analysis, StringHandler.class, 0, String.class).     assertBeanMethodDisabled(analysis, "did not find property 'spring.string.enabled'", TestPropertyAutoConfiguration.class, "string").     assertActionMissingType(analysis, String.class). }
false;public;0;12;;@Test public void failureAnalysisForMissingPropertySubType() {     FailureAnalysis analysis = analyzeFailure(createFailure(IntegerPropertyTypeConfiguration.class)).     assertThat(analysis).isNotNull().     assertDescriptionConstructorMissingType(analysis, NumberHandler.class, 0, Number.class).     assertBeanMethodDisabled(analysis, "did not find property 'spring.integer.enabled'", TestPropertyAutoConfiguration.class, "integer").     assertActionMissingType(analysis, Number.class). }
false;public;0;10;;@Test public void failureAnalysisForMissingClassOnAutoConfigurationType() {     FailureAnalysis analysis = analyzeFailure(createFailure(MissingClassOnAutoConfigurationConfiguration.class)).     assertDescriptionConstructorMissingType(analysis, StringHandler.class, 0, String.class).     assertClassDisabled(analysis, "did not find required class 'com.example.FooBar'", "string", ClassUtils.getShortName(TestTypeClassAutoConfiguration.class)).     assertActionMissingType(analysis, String.class). }
false;public;0;14;;@Test public void failureAnalysisForExcludedAutoConfigurationType() {     FatalBeanException failure = createFailure(StringHandler.class).     addExclusions(this.analyzer, TestPropertyAutoConfiguration.class).     FailureAnalysis analysis = analyzeFailure(failure).     assertDescriptionConstructorMissingType(analysis, StringHandler.class, 0, String.class).     String configClass = ClassUtils.getShortName(TestPropertyAutoConfiguration.class.getName()).     assertClassDisabled(analysis, String.format("auto-configuration '%s' was excluded", configClass), "string", ClassUtils.getShortName(TestPropertyAutoConfiguration.class)).     assertActionMissingType(analysis, String.class). }
false;public;0;13;;@Test public void failureAnalysisForSeveralConditionsType() {     FailureAnalysis analysis = analyzeFailure(createFailure(SeveralAutoConfigurationTypeConfiguration.class)).     assertDescriptionConstructorMissingType(analysis, StringHandler.class, 0, String.class).     assertBeanMethodDisabled(analysis, "did not find property 'spring.string.enabled'", TestPropertyAutoConfiguration.class, "string").     assertClassDisabled(analysis, "did not find required class 'com.example.FooBar'", "string", ClassUtils.getShortName(TestPropertyAutoConfiguration.class)).     assertActionMissingType(analysis, String.class). }
false;public;0;10;;@Test public void failureAnalysisForNoMatchName() {     FailureAnalysis analysis = analyzeFailure(createFailure(StringNameHandler.class)).     assertThat(analysis.getDescription()).startsWith(String.format("Constructor in %s required a bean named '%s' that could not be found", StringNameHandler.class.getName(), "test-string")).     assertThat(analysis.getAction()).startsWith(String.format("Consider defining a bean named '%s' in your configuration.", "test-string")). }
false;public;0;12;;@Test public void failureAnalysisForMissingBeanName() {     FailureAnalysis analysis = analyzeFailure(createFailure(StringMissingBeanNameConfiguration.class)).     assertThat(analysis.getDescription()).startsWith(String.format("Constructor in %s required a bean named '%s' that could not be found", StringNameHandler.class.getName(), "test-string")).     assertBeanMethodDisabled(analysis, "@ConditionalOnBean (types: java.lang.Integer. SearchStrategy: all) did not find any beans", TestMissingBeanAutoConfiguration.class, "string").     assertActionMissingName(analysis, "test-string"). }
false;public;0;10;;@Test public void failureAnalysisForNullBeanByType() {     FailureAnalysis analysis = analyzeFailure(createFailure(StringNullBeanConfiguration.class)).     assertDescriptionConstructorMissingType(analysis, StringHandler.class, 0, String.class).     assertUserDefinedBean(analysis, "as the bean value is null", TestNullBeanConfiguration.class, "string").     assertActionMissingType(analysis, String.class). }
false;public;0;7;;@Test public void failureAnalysisForUnmatchedQualifier() {     FailureAnalysis analysis = analyzeFailure(createFailure(QualifiedBeanConfiguration.class)).     assertThat(analysis.getDescription()).containsPattern("@org.springframework.beans.factory.annotation.Qualifier\\(value=\"*alpha\"*\\)"). }
false;private;4;8;;private void assertDescriptionConstructorMissingType(FailureAnalysis analysis, Class<?> component, int index, Class<?> type) {     String expected = String.format("Parameter %s of constructor in %s required a bean of " + "type '%s' that could not be found.", index, component.getName(), type.getName()).     assertThat(analysis.getDescription()).startsWith(expected). }
false;private;2;6;;private void assertActionMissingType(FailureAnalysis analysis, Class<?> type) {     assertThat(analysis.getAction()).startsWith(String.format("Consider revisiting the entries above or defining a bean of type '%s' " + "in your configuration.", type.getName())). }
false;private;2;6;;private void assertActionMissingName(FailureAnalysis analysis, String name) {     assertThat(analysis.getAction()).startsWith(String.format("Consider revisiting the entries above or defining a bean named '%s' " + "in your configuration.", name)). }
false;private;4;7;;private void assertBeanMethodDisabled(FailureAnalysis analysis, String description, Class<?> target, String methodName) {     String expected = String.format("Bean method '%s' in '%s' not loaded because", methodName, ClassUtils.getShortName(target)).     assertThat(analysis.getDescription()).contains(expected).     assertThat(analysis.getDescription()).contains(description). }
false;private;4;7;;private void assertClassDisabled(FailureAnalysis analysis, String description, String methodName, String className) {     String expected = String.format("Bean method '%s' in '%s' not loaded because", methodName, className).     assertThat(analysis.getDescription()).contains(expected).     assertThat(analysis.getDescription()).contains(description). }
false;private;4;7;;private void assertUserDefinedBean(FailureAnalysis analysis, String description, Class<?> target, String methodName) {     String expected = String.format("User-defined bean method '%s' in '%s' ignored", methodName, ClassUtils.getShortName(target)).     assertThat(analysis.getDescription()).contains(expected).     assertThat(analysis.getDescription()).contains(description). }
false;private,static;2;10;;private static void addExclusions(NoSuchBeanDefinitionFailureAnalyzer analyzer, Class<?>... classes) {     ConditionEvaluationReport report = (ConditionEvaluationReport) ReflectionTestUtils.getField(analyzer, "report").     List<String> exclusions = new ArrayList<>(report.getExclusions()).     for (Class<?> c : classes) {         exclusions.add(c.getName()).     }     report.recordExclusions(exclusions). }
false;private;2;12;;private FatalBeanException createFailure(Class<?> config, String... environment) {     try (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext()) {         this.analyzer.setBeanFactory(context.getBeanFactory()).         TestPropertyValues.of(environment).applyTo(context).         context.register(config).         context.refresh().         return null.     } catch (FatalBeanException ex) {         return ex.     } }
false;private;1;7;;private FailureAnalysis analyzeFailure(Exception failure) {     FailureAnalysis analysis = this.analyzer.analyze(failure).     if (analysis != null) {         new LoggingFailureAnalysisReporter().report(analysis).     }     return analysis. }
false;public;0;5;;@ConditionalOnProperty("spring.string.enabled") @Bean public String string() {     return "Test". }
false;public;0;5;;@ConditionalOnProperty("spring.integer.enabled") @Bean public Integer integer() {     return 42. }
false;public;0;4;;@Bean public String string() {     return "Test". }
false;public;0;5;;@ConditionalOnBean(Integer.class) @Bean(name = "test-string") public String string() {     return "Test". }
false;public;0;4;;@Bean public String string() {     return null. }
false;public;1;4;;@Bean public String consumer(@Qualifier("alpha") Thing thing) {     return "consumer". }
false;public;0;4;;@Bean public Thing producer() {     return new Thing(). }
