commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void logsDebugOnContextRefresh() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     this.initializer.initialize(context).     context.register(Config.class).     context.refresh().     withDebugLogging(() -> this.initializer.onApplicationEvent(new ContextRefreshedEvent(context))).     assertThat(this.output.toString()).contains("CONDITIONS EVALUATION REPORT"). }
false;public;0;11;;@Test public void logsDebugOnError() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     this.initializer.initialize(context).     context.register(ErrorConfig.class).     assertThatExceptionOfType(Exception.class).isThrownBy(context::refresh).satisfies((ex) -> withDebugLogging(() -> this.initializer.onApplicationEvent(new ApplicationFailedEvent(new SpringApplication(), new String[0], context, ex)))).     assertThat(this.output.toString()).contains("CONDITIONS EVALUATION REPORT"). }
false;public;0;13;;@Test public void logsInfoOnErrorIfDebugDisabled() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     this.initializer.initialize(context).     context.register(ErrorConfig.class).     assertThatExceptionOfType(Exception.class).isThrownBy(context::refresh).satisfies((ex) -> this.initializer.onApplicationEvent(new ApplicationFailedEvent(new SpringApplication(), new String[0], context, ex))).     assertThat(this.output.toString()).contains("Error starting" + " ApplicationContext. To display the conditions report re-run" + " your application with 'debug' enabled."). }
false;public;0;13;;@Test public void logsOutput() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     this.initializer.initialize(context).     context.register(Config.class).     ConditionEvaluationReport.get(context.getBeanFactory()).recordExclusions(Arrays.asList("com.foo.Bar")).     context.refresh().     withDebugLogging(() -> this.initializer.onApplicationEvent(new ContextRefreshedEvent(context))).     assertThat(this.output.toString()).contains("not a servlet web application (OnWebApplicationCondition)"). }
false;public;0;8;;@Test public void canBeUsedInApplicationContext() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(Config.class).     new ConditionEvaluationReportLoggingListener().initialize(context).     context.refresh().     assertThat(context.getBean(ConditionEvaluationReport.class)).isNotNull(). }
false;public;0;9;;@Test public void canBeUsedInNonGenericApplicationContext() {     AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext().     context.setServletContext(new MockServletContext()).     context.register(Config.class).     new ConditionEvaluationReportLoggingListener().initialize(context).     context.refresh().     assertThat(context.getBean(ConditionEvaluationReport.class)).isNotNull(). }
false;public;0;11;;@Test public void listenerWithInfoLevelShouldLogAtInfo() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     ConditionEvaluationReportLoggingListener initializer = new ConditionEvaluationReportLoggingListener(LogLevel.INFO).     initializer.initialize(context).     context.register(Config.class).     context.refresh().     initializer.onApplicationEvent(new ContextRefreshedEvent(context)).     assertThat(this.output.toString()).contains("CONDITIONS EVALUATION REPORT"). }
false;public;0;6;;@Test public void listenerSupportsOnlyInfoAndDebug() {     assertThatIllegalArgumentException().isThrownBy(() -> new ConditionEvaluationReportLoggingListener(LogLevel.TRACE)).withMessageContaining("LogLevel must be INFO or DEBUG"). }
false;public;0;8;;@Test public void noErrorIfNotInitialized() {     this.initializer.onApplicationEvent(new ApplicationFailedEvent(new SpringApplication(), new String[0], null, new RuntimeException("Planned"))).     assertThat(this.output.toString()).contains("Unable to provide the conditions report"). }
false;private;1;13;;private void withDebugLogging(Runnable runnable) {     LoggerContext context = (LoggerContext) StaticLoggerBinder.getSingleton().getLoggerFactory().     Logger logger = context.getLogger(ConditionEvaluationReportLoggingListener.class).     Level currentLevel = logger.getLevel().     logger.setLevel(Level.DEBUG).     try {         runnable.run().     } finally {         logger.setLevel(currentLevel).     } }
false;public;0;4;;@Bean public String iBreak() {     throw new RuntimeException(). }
