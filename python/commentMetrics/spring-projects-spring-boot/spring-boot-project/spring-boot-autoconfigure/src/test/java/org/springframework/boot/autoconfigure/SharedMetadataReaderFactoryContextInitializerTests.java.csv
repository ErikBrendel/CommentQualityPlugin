commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void checkOrderOfInitializer() {     SpringApplication application = new SpringApplication(TestConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     @SuppressWarnings("unchecked")     List<ApplicationContextInitializer<?>> initializers = (List<ApplicationContextInitializer<?>>) ReflectionTestUtils.getField(application, "initializers").     // Simulate what would happen if an initializer was added using spring.factories     // and happened to be loaded first     initializers.add(0, new Initializer()).     GenericApplicationContext context = (GenericApplicationContext) application.run().     BeanDefinition definition = context.getBeanDefinition(SharedMetadataReaderFactoryContextInitializer.BEAN_NAME).     assertThat(definition.getAttribute("seen")).isEqualTo(true). }
false;public;1;4;;@Override public void initialize(GenericApplicationContext applicationContext) {     applicationContext.addBeanFactoryPostProcessor(new PostProcessor()). }
false;public;1;4;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { }
false;public;1;8;;@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {     for (String name : registry.getBeanDefinitionNames()) {         BeanDefinition definition = registry.getBeanDefinition(name).         definition.setAttribute("seen", true).     } }
