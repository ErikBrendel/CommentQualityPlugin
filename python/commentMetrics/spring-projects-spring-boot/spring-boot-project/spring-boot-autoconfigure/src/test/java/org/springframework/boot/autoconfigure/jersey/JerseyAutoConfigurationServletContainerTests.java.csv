commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void existingJerseyServletIsAmended() {     assertThat(output.toString()).contains("Configuring existing registration for Jersey servlet").     assertThat(output.toString()).contains("Servlet " + Application.class.getName() + " was not registered"). }
false;public;0;4;;@GET public String message() {     return "Hello " + this.msg. }
false;protected;1;12;;@Override protected void postProcessContext(Context context) {     Wrapper jerseyServlet = context.createWrapper().     String servletName = Application.class.getName().     jerseyServlet.setName(servletName).     jerseyServlet.setServletClass(ServletContainer.class.getName()).     jerseyServlet.setServlet(new ServletContainer()).     jerseyServlet.setOverridable(false).     context.addChild(jerseyServlet).     String pattern = UDecoder.URLDecode("/*", StandardCharsets.UTF_8).     context.addServletMappingDecoded(pattern, servletName). }
false;public;0;19;;@Bean public TomcatServletWebServerFactory tomcat() {     return new TomcatServletWebServerFactory() {          @Override         protected void postProcessContext(Context context) {             Wrapper jerseyServlet = context.createWrapper().             String servletName = Application.class.getName().             jerseyServlet.setName(servletName).             jerseyServlet.setServletClass(ServletContainer.class.getName()).             jerseyServlet.setServlet(new ServletContainer()).             jerseyServlet.setOverridable(false).             context.addChild(jerseyServlet).             String pattern = UDecoder.URLDecode("/*", StandardCharsets.UTF_8).             context.addServletMappingDecoded(pattern, servletName).         }     }. }
