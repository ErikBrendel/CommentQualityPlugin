commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void influxDbRequiresUrl() {     this.contextRunner.run((context) -> assertThat(context.getBeansOfType(InfluxDB.class)).isEmpty()). }
false;public;0;8;;@Test public void influxDbCanBeCustomized() {     this.contextRunner.withPropertyValues("spring.influx.url=http://localhost", "spring.influx.password:password", "spring.influx.user:user").run(((context) -> assertThat(context.getBeansOfType(InfluxDB.class)).hasSize(1))). }
false;public;0;9;;@Test public void influxDbCanBeCreatedWithoutCredentials() {     this.contextRunner.withPropertyValues("spring.influx.url=http://localhost").run((context) -> {         assertThat(context.getBeansOfType(InfluxDB.class)).hasSize(1).         int readTimeout = getReadTimeoutProperty(context).         assertThat(readTimeout).isEqualTo(10_000).     }). }
false;public;0;11;;@Test public void influxDbWithOkHttpClientBuilderProvider() {     this.contextRunner.withUserConfiguration(CustomOkHttpClientBuilderProviderConfig.class).withPropertyValues("spring.influx.url=http://localhost").run((context) -> {         assertThat(context.getBeansOfType(InfluxDB.class)).hasSize(1).         int readTimeout = getReadTimeoutProperty(context).         assertThat(readTimeout).isEqualTo(40_000).     }). }
false;private;1;6;;private int getReadTimeoutProperty(AssertableApplicationContext context) {     InfluxDB influxDB = context.getBean(InfluxDB.class).     Retrofit retrofit = (Retrofit) ReflectionTestUtils.getField(influxDB, "retrofit").     OkHttpClient callFactory = (OkHttpClient) retrofit.callFactory().     return callFactory.readTimeoutMillis(). }
false;public;0;4;;@Bean public InfluxDbOkHttpClientBuilderProvider influxDbOkHttpClientBuilderProvider() {     return () -> new OkHttpClient.Builder().readTimeout(40, TimeUnit.SECONDS). }
