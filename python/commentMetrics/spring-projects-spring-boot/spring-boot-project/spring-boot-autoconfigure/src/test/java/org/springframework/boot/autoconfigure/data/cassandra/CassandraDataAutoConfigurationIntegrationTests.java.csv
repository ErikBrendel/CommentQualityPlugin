commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setUp() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.data.cassandra.port=" + cassandra.getContainer().getFirstMappedPort(), "spring.data.cassandra.read-timeout=24000", "spring.data.cassandra.connect-timeout=10000").applyTo(this.context.getEnvironment()). }
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;12;;@Test public void hasDefaultSchemaActionSet() {     String cityPackage = City.class.getPackage().getName().     AutoConfigurationPackages.register(this.context, cityPackage).     this.context.register(CassandraAutoConfiguration.class, CassandraDataAutoConfiguration.class).     this.context.refresh().     CassandraSessionFactoryBean bean = this.context.getBean(CassandraSessionFactoryBean.class).     assertThat(bean.getSchemaAction()).isEqualTo(SchemaAction.NONE). }
false;public;0;16;;@Test public void hasRecreateSchemaActionSet() {     createTestKeyspaceIfNotExists().     String cityPackage = City.class.getPackage().getName().     AutoConfigurationPackages.register(this.context, cityPackage).     TestPropertyValues.of("spring.data.cassandra.schemaAction=recreate_drop_unused", "spring.data.cassandra.keyspaceName=boot_test").applyTo(this.context).     this.context.register(CassandraAutoConfiguration.class, CassandraDataAutoConfiguration.class).     this.context.refresh().     CassandraSessionFactoryBean bean = this.context.getBean(CassandraSessionFactoryBean.class).     assertThat(bean.getSchemaAction()).isEqualTo(SchemaAction.RECREATE_DROP_UNUSED). }
false;private;0;10;;private void createTestKeyspaceIfNotExists() {     Cluster cluster = Cluster.builder().withoutJMXReporting().withPort(cassandra.getContainer().getFirstMappedPort()).addContactPoint(cassandra.getContainer().getContainerIpAddress()).build().     try (Session session = cluster.connect()) {         session.execute("CREATE KEYSPACE IF NOT EXISTS boot_test" + "  WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 }.").     } }
