commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void singleSelectorWithNoImports() {     this.contextRunner.withUserConfiguration(NoConfig.class).run((context) -> assertThat(getImportedConfigBeans(context)).isEmpty()). }
false;public;0;6;;@Test public void singleSelector() {     this.contextRunner.withUserConfiguration(SingleConfig.class).run((context) -> assertThat(getImportedConfigBeans(context)).containsExactly("ConfigC")). }
false;public;0;6;;@Test public void multipleSelectorsShouldMergeAndSortCorrectly() {     this.contextRunner.withUserConfiguration(Config.class, AnotherConfig.class).run((context) -> assertThat(getImportedConfigBeans(context)).containsExactly("ConfigA", "ConfigB", "ConfigC", "ConfigD")). }
false;public;0;8;;@Test public void multipleSelectorsWithRedundantImportsShouldMergeAndSortCorrectly() {     this.contextRunner.withUserConfiguration(SingleConfig.class, Config.class, AnotherConfig.class).run((context) -> assertThat(getImportedConfigBeans(context)).containsExactly("ConfigA", "ConfigB", "ConfigC", "ConfigD")). }
false;private;1;13;;private List<String> getImportedConfigBeans(AssertableApplicationContext context) {     String shortName = ClassUtils.getShortName(AutoConfigurationImportSelectorIntegrationTests.class).     int beginIndex = shortName.length() + 1.     List<String> orderedConfigBeans = new ArrayList<>().     for (String bean : context.getBeanDefinitionNames()) {         if (bean.contains("$Config")) {             String shortBeanName = ClassUtils.getShortName(bean).             orderedConfigBeans.add(shortBeanName.substring(beginIndex)).         }     }     return orderedConfigBeans. }
