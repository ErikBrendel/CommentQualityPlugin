commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void doesNotMatchIfBetterVersionIsRequired() {     Assume.javaEight().     this.contextRunner.withUserConfiguration(Java9Required.class).run((context) -> assertThat(context).doesNotHaveBean(String.class)). }
false;public;0;5;;@Test public void doesNotMatchIfLowerIsRequired() {     this.contextRunner.withUserConfiguration(Java7Required.class).run((context) -> assertThat(context).doesNotHaveBean(String.class)). }
false;public;0;5;;@Test public void matchesIfVersionIsInRange() {     this.contextRunner.withUserConfiguration(Java8Required.class).run((context) -> assertThat(context).hasSingleBean(String.class)). }
false;public;0;9;;@Test public void boundsTests() {     testBounds(Range.EQUAL_OR_NEWER, JavaVersion.NINE, JavaVersion.EIGHT, true).     testBounds(Range.EQUAL_OR_NEWER, JavaVersion.EIGHT, JavaVersion.EIGHT, true).     testBounds(Range.EQUAL_OR_NEWER, JavaVersion.EIGHT, JavaVersion.NINE, false).     testBounds(Range.OLDER_THAN, JavaVersion.NINE, JavaVersion.EIGHT, false).     testBounds(Range.OLDER_THAN, JavaVersion.EIGHT, JavaVersion.EIGHT, false).     testBounds(Range.OLDER_THAN, JavaVersion.EIGHT, JavaVersion.NINE, true). }
false;public;0;7;;@Test public void equalOrNewerMessage() {     ConditionOutcome outcome = this.condition.getMatchOutcome(Range.EQUAL_OR_NEWER, JavaVersion.NINE, JavaVersion.EIGHT).     assertThat(outcome.getMessage()).isEqualTo("@ConditionalOnJava (1.8 or newer) found 1.9"). }
false;public;0;7;;@Test public void olderThanMessage() {     ConditionOutcome outcome = this.condition.getMatchOutcome(Range.OLDER_THAN, JavaVersion.NINE, JavaVersion.EIGHT).     assertThat(outcome.getMessage()).isEqualTo("@ConditionalOnJava (older than 1.8) found 1.9"). }
false;public;0;5;;@Test public void java8IsDetected() throws Exception {     Assume.javaEight().     assertThat(getJavaVersion()).isEqualTo("1.8"). }
false;public;0;6;;@Test public void java8IsTheFallback() throws Exception {     Assume.javaEight().     assertThat(getJavaVersion(Function.class, Files.class, ServiceLoader.class)).isEqualTo("1.8"). }
false;private;1;9;;private String getJavaVersion(Class<?>... hiddenClasses) throws Exception {     FilteredClassLoader classLoader = new FilteredClassLoader(hiddenClasses).     Class<?> javaVersionClass = classLoader.loadClass(JavaVersion.class.getName()).     Method getJavaVersionMethod = ReflectionUtils.findMethod(javaVersionClass, "getJavaVersion").     Object javaVersion = ReflectionUtils.invokeMethod(getJavaVersionMethod, null).     classLoader.close().     return javaVersion.toString(). }
false;private;4;6;;private void testBounds(Range range, JavaVersion runningVersion, JavaVersion version, boolean expected) {     ConditionOutcome outcome = this.condition.getMatchOutcome(range, runningVersion, version).     assertThat(outcome.isMatch()).as(outcome.getMessage()).isEqualTo(expected). }
false;;0;4;;@Bean String foo() {     return "foo". }
false;;0;4;;@Bean String foo() {     return "foo". }
false;;0;4;;@Bean String foo() {     return "foo". }
