commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testHomePage() {     String result = this.client.get().uri("/").exchange().expectStatus().isOk().expectBody(String.class).returnResult().getResponseBody().     assertThat(result).contains("Hello App").contains("Hello World"). }
false;public;0;6;;@Test public void testPartialPage() {     String result = this.client.get().uri("/partial").exchange().expectStatus().isOk().expectBody(String.class).returnResult().getResponseBody().     assertThat(result).contains("Hello App").contains("Hello World"). }
false;public;1;7;;@RequestMapping("/") public String home(Model model) {     model.addAttribute("time", new Date()).     model.addAttribute("message", "Hello World").     model.addAttribute("title", "Hello App").     return "home". }
false;public;1;7;;@RequestMapping("/partial") public String layout(Model model) {     model.addAttribute("time", new Date()).     model.addAttribute("message", "Hello World").     model.addAttribute("title", "Hello App").     return "partial". }
false;public;0;10;;@Bean public MustacheViewResolver viewResolver() {     Mustache.Compiler compiler = Mustache.compiler().withLoader(new MustacheResourceTemplateLoader("classpath:/mustache-templates/", ".html")).     MustacheViewResolver resolver = new MustacheViewResolver(compiler).     resolver.setPrefix("classpath:/mustache-templates/").     resolver.setSuffix(".html").     return resolver. }
false;public,static;1;5;;public static void main(String[] args) {     SpringApplication application = new SpringApplication(Application.class).     application.setWebApplicationType(WebApplicationType.REACTIVE).     application.run(args). }
