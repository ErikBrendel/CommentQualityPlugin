commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void atCommonLocationsShouldMatchCommonLocations() {     RequestMatcher matcher = this.resourceRequest.atCommonLocations().     assertMatcher(matcher).matches("/css/file.css").     assertMatcher(matcher).matches("/js/file.js").     assertMatcher(matcher).matches("/images/file.css").     assertMatcher(matcher).matches("/webjars/file.css").     assertMatcher(matcher).matches("/foo/favicon.ico").     assertMatcher(matcher).doesNotMatch("/bar"). }
false;public;0;7;;@Test public void atCommonLocationsWithExcludeShouldNotMatchExcluded() {     RequestMatcher matcher = this.resourceRequest.atCommonLocations().excluding(StaticResourceLocation.CSS).     assertMatcher(matcher).doesNotMatch("/css/file.css").     assertMatcher(matcher).matches("/js/file.js"). }
false;public;0;6;;@Test public void atLocationShouldMatchLocation() {     RequestMatcher matcher = this.resourceRequest.at(StaticResourceLocation.CSS).     assertMatcher(matcher).matches("/css/file.css").     assertMatcher(matcher).doesNotMatch("/js/file.js"). }
false;public;0;6;;@Test public void atLocationWhenHasServletPathShouldMatchLocation() {     RequestMatcher matcher = this.resourceRequest.at(StaticResourceLocation.CSS).     assertMatcher(matcher, "/foo").matches("/foo", "/css/file.css").     assertMatcher(matcher, "/foo").doesNotMatch("/foo", "/js/file.js"). }
false;public;0;6;;@Test public void atLocationsFromSetWhenSetIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.resourceRequest.at(null)).withMessageContaining("Locations must not be null"). }
false;public;0;7;;@Test public void excludeFromSetWhenSetIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.resourceRequest.atCommonLocations().excluding(null)).withMessageContaining("Locations must not be null"). }
false;private;1;6;;private RequestMatcherAssert assertMatcher(RequestMatcher matcher) {     DispatcherServletPath dispatcherServletPath = () -> "".     StaticWebApplicationContext context = new StaticWebApplicationContext().     context.registerBean(DispatcherServletPath.class, () -> dispatcherServletPath).     return assertThat(new RequestMatcherAssert(context, matcher)). }
false;private;2;6;;private RequestMatcherAssert assertMatcher(RequestMatcher matcher, String path) {     DispatcherServletPath dispatcherServletPath = () -> path.     StaticWebApplicationContext context = new StaticWebApplicationContext().     context.registerBean(DispatcherServletPath.class, () -> dispatcherServletPath).     return assertThat(new RequestMatcherAssert(context, matcher)). }
false;public;1;3;;public void matches(String path) {     matches(mockRequest(path)). }
false;public;2;3;;public void matches(String servletPath, String path) {     matches(mockRequest(servletPath, path)). }
false;private;1;4;;private void matches(HttpServletRequest request) {     assertThat(this.matcher.matches(request)).as("Matches " + getRequestPath(request)).isTrue(). }
false;public;1;3;;public void doesNotMatch(String path) {     doesNotMatch(mockRequest(path)). }
false;public;2;3;;public void doesNotMatch(String servletPath, String path) {     doesNotMatch(mockRequest(servletPath, path)). }
false;private;1;4;;private void doesNotMatch(HttpServletRequest request) {     assertThat(this.matcher.matches(request)).as("Does not match " + getRequestPath(request)).isFalse(). }
false;private;1;3;;private MockHttpServletRequest mockRequest(String path) {     return mockRequest(null, path). }
false;private;2;12;;private MockHttpServletRequest mockRequest(String servletPath, String path) {     MockServletContext servletContext = new MockServletContext().     servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context).     MockHttpServletRequest request = new MockHttpServletRequest(servletContext).     if (servletPath != null) {         request.setServletPath(servletPath).     }     request.setPathInfo(path).     return request. }
false;private;1;7;;private String getRequestPath(HttpServletRequest request) {     String url = request.getServletPath().     if (request.getPathInfo() != null) {         url += request.getPathInfo().     }     return url. }
