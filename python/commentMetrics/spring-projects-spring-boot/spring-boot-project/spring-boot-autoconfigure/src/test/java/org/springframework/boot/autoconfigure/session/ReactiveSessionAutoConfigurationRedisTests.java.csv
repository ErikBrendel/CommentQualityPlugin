commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void defaultConfig() {     this.contextRunner.withPropertyValues("spring.session.store-type=redis").withConfiguration(AutoConfigurations.of(RedisAutoConfiguration.class, RedisReactiveAutoConfiguration.class)).run(validateSpringSessionUsesRedis("spring:session:", RedisFlushMode.ON_SAVE)). }
false;public;0;10;;@Test public void defaultConfigWithUniqueStoreImplementation() {     this.contextRunner.withClassLoader(new FilteredClassLoader(ReactiveMongoOperationsSessionRepository.class)).withConfiguration(AutoConfigurations.of(RedisAutoConfiguration.class, RedisReactiveAutoConfiguration.class)).run(validateSpringSessionUsesRedis("spring:session:", RedisFlushMode.ON_SAVE)). }
false;public;0;10;;@Test public void redisSessionStoreWithCustomizations() {     this.contextRunner.withConfiguration(AutoConfigurations.of(RedisAutoConfiguration.class, RedisReactiveAutoConfiguration.class)).withPropertyValues("spring.session.store-type=redis", "spring.session.redis.namespace=foo", "spring.session.redis.flush-mode=immediate").run(validateSpringSessionUsesRedis("foo:", RedisFlushMode.IMMEDIATE)). }
false;private;2;10;;private ContextConsumer<AssertableReactiveWebApplicationContext> validateSpringSessionUsesRedis(String namespace, RedisFlushMode flushMode) {     return (context) -> {         ReactiveRedisOperationsSessionRepository repository = validateSessionRepository(context, ReactiveRedisOperationsSessionRepository.class).         assertThat(repository).hasFieldOrPropertyWithValue("namespace", namespace).         assertThat(repository).hasFieldOrPropertyWithValue("redisFlushMode", flushMode).     }. }
