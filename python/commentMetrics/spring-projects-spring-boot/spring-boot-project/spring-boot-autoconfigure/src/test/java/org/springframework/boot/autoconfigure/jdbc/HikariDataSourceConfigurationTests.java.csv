commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testDataSourceExists() {     this.contextRunner.run((context) -> {         assertThat(context.getBeansOfType(DataSource.class)).hasSize(1).         assertThat(context.getBeansOfType(HikariDataSource.class)).hasSize(1).     }). }
false;public;0;11;;@Test public void testDataSourcePropertiesOverridden() {     this.contextRunner.withPropertyValues("spring.datasource.hikari.jdbc-url=jdbc:foo//bar/spam", "spring.datasource.hikari.max-lifetime=1234").run((context) -> {         HikariDataSource ds = context.getBean(HikariDataSource.class).         assertThat(ds.getJdbcUrl()).isEqualTo("jdbc:foo//bar/spam").         assertThat(ds.getMaxLifetime()).isEqualTo(1234).     }). // TODO: test JDBC4 isValid() }
false;public;0;13;;@Test public void testDataSourceGenericPropertiesOverridden() {     this.contextRunner.withPropertyValues("spring.datasource.hikari.data-source-properties" + ".dataSourceClassName=org.h2.JDBCDataSource").run((context) -> {         HikariDataSource ds = context.getBean(HikariDataSource.class).         assertThat(ds.getDataSourceProperties().getProperty("dataSourceClassName")).isEqualTo("org.h2.JDBCDataSource").     }). }
false;public;0;7;;@Test public void testDataSourceDefaultsPreserved() {     this.contextRunner.run((context) -> {         HikariDataSource ds = context.getBean(HikariDataSource.class).         assertThat(ds.getMaxLifetime()).isEqualTo(1800000).     }). }
false;public;0;9;;@Test public void nameIsAliasedToPoolName() {     this.contextRunner.withPropertyValues("spring.datasource.name=myDS").run((context) -> {         HikariDataSource ds = context.getBean(HikariDataSource.class).         assertThat(ds.getPoolName()).isEqualTo("myDS").     }). }
false;public;0;10;;@Test public void poolNameTakesPrecedenceOverName() {     this.contextRunner.withPropertyValues("spring.datasource.name=myDS", "spring.datasource.hikari.pool-name=myHikariDS").run((context) -> {         HikariDataSource ds = context.getBean(HikariDataSource.class).         assertThat(ds.getPoolName()).isEqualTo("myHikariDS").     }). }
