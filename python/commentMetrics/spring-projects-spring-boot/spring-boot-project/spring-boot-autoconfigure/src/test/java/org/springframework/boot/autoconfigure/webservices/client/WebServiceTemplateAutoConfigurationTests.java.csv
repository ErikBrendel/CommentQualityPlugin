commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void autoConfiguredBuilderShouldNotHaveMarshallerAndUnmarshaller() {     this.contextRunner.run(assertWebServiceTemplateBuilder((builder) -> {         WebServiceTemplate webServiceTemplate = builder.build().         assertThat(webServiceTemplate.getUnmarshaller()).isNull().         assertThat(webServiceTemplate.getMarshaller()).isNull().     })). }
false;public;0;10;;@Test public void autoConfiguredBuilderShouldHaveHttpMessageSenderByDefault() {     this.contextRunner.run(assertWebServiceTemplateBuilder((builder) -> {         WebServiceTemplate webServiceTemplate = builder.build().         assertThat(webServiceTemplate.getMessageSenders()).hasSize(1).         WebServiceMessageSender messageSender = webServiceTemplate.getMessageSenders()[0].         assertThat(messageSender).isInstanceOf(ClientHttpRequestMessageSender.class).     })). }
false;public;0;10;;@Test public void webServiceTemplateWhenHasCustomBuilderShouldUseCustomBuilder() {     this.contextRunner.withUserConfiguration(CustomWebServiceTemplateBuilderConfig.class).run(assertWebServiceTemplateBuilder((builder) -> {         WebServiceTemplate webServiceTemplate = builder.build().         assertThat(webServiceTemplate.getMarshaller()).isSameAs(CustomWebServiceTemplateBuilderConfig.marshaller).     })). }
false;public;0;9;;@Test public void webServiceTemplateShouldApplyCustomizer() {     this.contextRunner.withUserConfiguration(WebServiceTemplateCustomizerConfig.class).run(assertWebServiceTemplateBuilder((builder) -> {         WebServiceTemplate webServiceTemplate = builder.build().         assertThat(webServiceTemplate.getUnmarshaller()).isSameAs(WebServiceTemplateCustomizerConfig.unmarshaller).     })). }
false;public;0;5;;@Test public void builderShouldBeFreshForEachUse() {     this.contextRunner.withUserConfiguration(DirtyWebServiceTemplateConfig.class).run((context) -> assertThat(context).hasNotFailed()). }
false;private;1;7;;private ContextConsumer<AssertableApplicationContext> assertWebServiceTemplateBuilder(Consumer<WebServiceTemplateBuilder> builder) {     return (context) -> {         assertThat(context).hasSingleBean(WebServiceTemplateBuilder.class).         builder.accept(context.getBean(WebServiceTemplateBuilder.class)).     }. }
false;public;1;10;;@Bean public WebServiceTemplate webServiceTemplateOne(WebServiceTemplateBuilder builder) {     try {         return builder.build().     } finally {         breakBuilderOnNextCall(builder).     } }
false;public;1;10;;@Bean public WebServiceTemplate webServiceTemplateTwo(WebServiceTemplateBuilder builder) {     try {         return builder.build().     } finally {         breakBuilderOnNextCall(builder).     } }
false;private;1;5;;private void breakBuilderOnNextCall(WebServiceTemplateBuilder builder) {     builder.additionalCustomizers((webServiceTemplate) -> {         throw new IllegalStateException().     }). }
false;public;0;4;;@Bean public WebServiceTemplateBuilder webServiceTemplateBuilder() {     return new WebServiceTemplateBuilder().setMarshaller(marshaller). }
false;public;0;4;;@Bean public WebServiceTemplateCustomizer webServiceTemplateCustomizer() {     return (ws) -> ws.setUnmarshaller(unmarshaller). }
