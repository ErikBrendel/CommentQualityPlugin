commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void getRelativePathReturnsRelativePath() {     assertThat(((DispatcherServletPath) () -> "spring").getRelativePath("boot")).isEqualTo("spring/boot").     assertThat(((DispatcherServletPath) () -> "spring/").getRelativePath("boot")).isEqualTo("spring/boot").     assertThat(((DispatcherServletPath) () -> "spring").getRelativePath("/boot")).isEqualTo("spring/boot"). }
false;public;0;5;;@Test public void getPrefixWhenHasSimplePathReturnPath() {     assertThat(((DispatcherServletPath) () -> "spring").getPrefix()).isEqualTo("spring"). }
false;public;0;5;;@Test public void getPrefixWhenHasPatternRemovesPattern() {     assertThat(((DispatcherServletPath) () -> "spring/*.do").getPrefix()).isEqualTo("spring"). }
false;public;0;5;;@Test public void getPathWhenPathEndsWithSlashRemovesSlash() {     assertThat(((DispatcherServletPath) () -> "spring/").getPrefix()).isEqualTo("spring"). }
false;public;0;5;;@Test public void getServletUrlMappingWhenPathIsEmptyReturnsSlash() {     assertThat(((DispatcherServletPath) () -> "").getServletUrlMapping()).isEqualTo("/"). }
false;public;0;5;;@Test public void getServletUrlMappingWhenPathIsSlashReturnsSlash() {     assertThat(((DispatcherServletPath) () -> "/").getServletUrlMapping()).isEqualTo("/"). }
false;public;0;5;;@Test public void getServletUrlMappingWhenPathContainsStarReturnsPath() {     assertThat(((DispatcherServletPath) () -> "spring/*.do").getServletUrlMapping()).isEqualTo("spring/*.do"). }
false;public;0;5;;@Test public void getServletUrlMappingWhenHasPathNotEndingSlashReturnsSlashStarPattern() {     assertThat(((DispatcherServletPath) () -> "spring/boot").getServletUrlMapping()).isEqualTo("spring/boot/*"). }
false;public;0;5;;@Test public void getServletUrlMappingWhenHasPathEndingWithSlashReturnsSlashStarPattern() {     assertThat(((DispatcherServletPath) () -> "spring/boot/").getServletUrlMapping()).isEqualTo("spring/boot/*"). }
