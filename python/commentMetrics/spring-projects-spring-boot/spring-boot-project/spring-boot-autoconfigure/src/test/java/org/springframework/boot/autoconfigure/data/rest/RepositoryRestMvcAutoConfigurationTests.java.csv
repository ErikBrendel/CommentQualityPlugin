commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void tearDown() {     if (this.context != null) {         this.context.close().     } }
false;public;0;6;;@Test public void testDefaultRepositoryConfiguration() {     load(TestConfiguration.class).     assertThat(this.context.getBean(RepositoryRestMvcConfiguration.class)).isNotNull(). }
false;public;0;14;;@Test public void testWithCustomBasePath() {     load(TestConfiguration.class, "spring.data.rest.base-path:foo").     assertThat(this.context.getBean(RepositoryRestMvcConfiguration.class)).isNotNull().     RepositoryRestConfiguration bean = this.context.getBean(RepositoryRestConfiguration.class).     URI expectedUri = URI.create("/foo").     assertThat(bean.getBaseUri()).as("Custom basePath not set").isEqualTo(expectedUri).     BaseUri baseUri = this.context.getBean(BaseUri.class).     assertThat(expectedUri).as("Custom basePath has not been applied to BaseUri bean").isEqualTo(baseUri.getUri()). }
false;public;0;29;;@Test public void testWithCustomSettings() {     load(TestConfiguration.class, "spring.data.rest.default-page-size:42", "spring.data.rest.max-page-size:78", "spring.data.rest.page-param-name:_page", "spring.data.rest.limit-param-name:_limit", "spring.data.rest.sort-param-name:_sort", "spring.data.rest.detection-strategy=visibility", "spring.data.rest.default-media-type:application/my-json", "spring.data.rest.return-body-on-create:false", "spring.data.rest.return-body-on-update:false", "spring.data.rest.enable-enum-translation:true").     assertThat(this.context.getBean(RepositoryRestMvcConfiguration.class)).isNotNull().     RepositoryRestConfiguration bean = this.context.getBean(RepositoryRestConfiguration.class).     assertThat(bean.getDefaultPageSize()).isEqualTo(42).     assertThat(bean.getMaxPageSize()).isEqualTo(78).     assertThat(bean.getPageParamName()).isEqualTo("_page").     assertThat(bean.getLimitParamName()).isEqualTo("_limit").     assertThat(bean.getSortParamName()).isEqualTo("_sort").     assertThat(bean.getRepositoryDetectionStrategy()).isEqualTo(RepositoryDetectionStrategies.VISIBILITY).     assertThat(bean.getDefaultMediaType()).isEqualTo(MediaType.parseMediaType("application/my-json")).     assertThat(bean.returnBodyOnCreate(null)).isFalse().     assertThat(bean.returnBodyOnUpdate(null)).isFalse().     assertThat(bean.isEnableEnumTranslation()).isTrue(). }
false;public;0;15;;@Test public void testWithCustomConfigurer() {     load(TestConfigurationWithConfigurer.class, "spring.data.rest.detection-strategy=visibility", "spring.data.rest.default-media-type:application/my-json").     assertThat(this.context.getBean(RepositoryRestMvcConfiguration.class)).isNotNull().     RepositoryRestConfiguration bean = this.context.getBean(RepositoryRestConfiguration.class).     assertThat(bean.getRepositoryDetectionStrategy()).isEqualTo(RepositoryDetectionStrategies.ALL).     assertThat(bean.getDefaultMediaType()).isEqualTo(MediaType.parseMediaType("application/my-custom-json")).     assertThat(bean.getMaxPageSize()).isEqualTo(78). }
false;public;0;9;;@Test public void backOffWithCustomConfiguration() {     load(TestConfigurationWithRestMvcConfig.class, "spring.data.rest.base-path:foo").     assertThat(this.context.getBean(RepositoryRestMvcConfiguration.class)).isNotNull().     RepositoryRestConfiguration bean = this.context.getBean(RepositoryRestConfiguration.class).     assertThat(bean.getBaseUri()).isEqualTo(URI.create("")). }
false;private;2;8;;private void load(Class<?> config, String... environment) {     AnnotationConfigWebApplicationContext applicationContext = new AnnotationConfigWebApplicationContext().     applicationContext.setServletContext(new MockServletContext()).     applicationContext.register(config, BaseConfiguration.class).     TestPropertyValues.of(environment).applyTo(applicationContext).     applicationContext.refresh().     this.context = applicationContext. }
false;public;0;6;;@Bean public Jackson2ObjectMapperBuilder objectMapperBuilder() {     Jackson2ObjectMapperBuilder objectMapperBuilder = new Jackson2ObjectMapperBuilder().     objectMapperBuilder.simpleDateFormat("yyyy-MM").     return objectMapperBuilder. }
false;public;1;8;;@Override public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {     config.setRepositoryDetectionStrategy(RepositoryDetectionStrategies.ALL).     config.setDefaultMediaType(MediaType.parseMediaType("application/my-custom-json")).     config.setMaxPageSize(78). }
