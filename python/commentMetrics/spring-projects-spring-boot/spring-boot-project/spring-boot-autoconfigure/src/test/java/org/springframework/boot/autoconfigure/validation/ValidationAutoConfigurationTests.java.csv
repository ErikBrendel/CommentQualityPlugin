commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;15;;@Test public void validationAutoConfigurationShouldConfigureDefaultValidator() {     load(Config.class).     String[] jsrValidatorNames = this.context.getBeanNamesForType(Validator.class).     String[] springValidatorNames = this.context.getBeanNamesForType(org.springframework.validation.Validator.class).     assertThat(jsrValidatorNames).containsExactly("defaultValidator").     assertThat(springValidatorNames).containsExactly("defaultValidator").     Validator jsrValidator = this.context.getBean(Validator.class).     org.springframework.validation.Validator springValidator = this.context.getBean(org.springframework.validation.Validator.class).     assertThat(jsrValidator).isInstanceOf(LocalValidatorFactoryBean.class).     assertThat(jsrValidator).isEqualTo(springValidator).     assertThat(isPrimaryBean("defaultValidator")).isTrue(). }
false;public;0;15;;@Test public void validationAutoConfigurationWhenUserProvidesValidatorShouldBackOff() {     load(UserDefinedValidatorConfig.class).     String[] jsrValidatorNames = this.context.getBeanNamesForType(Validator.class).     String[] springValidatorNames = this.context.getBeanNamesForType(org.springframework.validation.Validator.class).     assertThat(jsrValidatorNames).containsExactly("customValidator").     assertThat(springValidatorNames).containsExactly("customValidator").     org.springframework.validation.Validator springValidator = this.context.getBean(org.springframework.validation.Validator.class).     Validator jsrValidator = this.context.getBean(Validator.class).     assertThat(jsrValidator).isInstanceOf(OptionalValidatorFactoryBean.class).     assertThat(jsrValidator).isEqualTo(springValidator).     assertThat(isPrimaryBean("customValidator")).isFalse(). }
false;public;0;10;;@Test public void validationAutoConfigurationWhenUserProvidesDefaultValidatorShouldNotEnablePrimary() {     load(UserDefinedDefaultValidatorConfig.class).     String[] jsrValidatorNames = this.context.getBeanNamesForType(Validator.class).     String[] springValidatorNames = this.context.getBeanNamesForType(org.springframework.validation.Validator.class).     assertThat(jsrValidatorNames).containsExactly("defaultValidator").     assertThat(springValidatorNames).containsExactly("defaultValidator").     assertThat(isPrimaryBean("defaultValidator")).isFalse(). }
false;public;0;10;;@Test public void validationAutoConfigurationWhenUserProvidesJsrValidatorShouldBackOff() {     load(UserDefinedJsrValidatorConfig.class).     String[] jsrValidatorNames = this.context.getBeanNamesForType(Validator.class).     String[] springValidatorNames = this.context.getBeanNamesForType(org.springframework.validation.Validator.class).     assertThat(jsrValidatorNames).containsExactly("customValidator").     assertThat(springValidatorNames).isEmpty().     assertThat(isPrimaryBean("customValidator")).isFalse(). }
false;public;0;16;;@Test public void validationAutoConfigurationWhenUserProvidesSpringValidatorShouldCreateJsrValidator() {     load(UserDefinedSpringValidatorConfig.class).     String[] jsrValidatorNames = this.context.getBeanNamesForType(Validator.class).     String[] springValidatorNames = this.context.getBeanNamesForType(org.springframework.validation.Validator.class).     assertThat(jsrValidatorNames).containsExactly("defaultValidator").     assertThat(springValidatorNames).containsExactly("customValidator", "anotherCustomValidator", "defaultValidator").     Validator jsrValidator = this.context.getBean(Validator.class).     org.springframework.validation.Validator springValidator = this.context.getBean(org.springframework.validation.Validator.class).     assertThat(jsrValidator).isInstanceOf(LocalValidatorFactoryBean.class).     assertThat(jsrValidator).isEqualTo(springValidator).     assertThat(isPrimaryBean("defaultValidator")).isTrue(). }
false;public;0;17;;@Test public void validationAutoConfigurationWhenUserProvidesPrimarySpringValidatorShouldRemovePrimaryFlag() {     load(UserDefinedPrimarySpringValidatorConfig.class).     String[] jsrValidatorNames = this.context.getBeanNamesForType(Validator.class).     String[] springValidatorNames = this.context.getBeanNamesForType(org.springframework.validation.Validator.class).     assertThat(jsrValidatorNames).containsExactly("defaultValidator").     assertThat(springValidatorNames).containsExactly("customValidator", "anotherCustomValidator", "defaultValidator").     Validator jsrValidator = this.context.getBean(Validator.class).     org.springframework.validation.Validator springValidator = this.context.getBean(org.springframework.validation.Validator.class).     assertThat(jsrValidator).isInstanceOf(LocalValidatorFactoryBean.class).     assertThat(springValidator).isEqualTo(this.context.getBean("anotherCustomValidator")).     assertThat(isPrimaryBean("defaultValidator")).isFalse(). }
false;public;0;9;;@Test public void validationIsEnabled() {     load(SampleService.class).     assertThat(this.context.getBeansOfType(Validator.class)).hasSize(1).     SampleService service = this.context.getBean(SampleService.class).     service.doSomething("Valid").     assertThatExceptionOfType(ConstraintViolationException.class).isThrownBy(() -> service.doSomething("KO")). }
false;public;0;10;;@Test public void validationUsesCglibProxy() {     load(DefaultAnotherSampleService.class).     assertThat(this.context.getBeansOfType(Validator.class)).hasSize(1).     DefaultAnotherSampleService service = this.context.getBean(DefaultAnotherSampleService.class).     service.doSomething(42).     assertThatExceptionOfType(ConstraintViolationException.class).isThrownBy(() -> service.doSomething(2)). }
false;public;0;12;;@Test public void validationCanBeConfiguredToUseJdkProxy() {     load(AnotherSampleServiceConfiguration.class, "spring.aop.proxy-target-class=false").     assertThat(this.context.getBeansOfType(Validator.class)).hasSize(1).     assertThat(this.context.getBeansOfType(DefaultAnotherSampleService.class)).isEmpty().     AnotherSampleService service = this.context.getBean(AnotherSampleService.class).     service.doSomething(42).     assertThatExceptionOfType(ConstraintViolationException.class).isThrownBy(() -> service.doSomething(2)). }
false;public;0;13;;@Test public void userDefinedMethodValidationPostProcessorTakesPrecedence() {     load(SampleConfiguration.class).     assertThat(this.context.getBeansOfType(Validator.class)).hasSize(1).     Object userMethodValidationPostProcessor = this.context.getBean("testMethodValidationPostProcessor").     assertThat(this.context.getBean(MethodValidationPostProcessor.class)).isSameAs(userMethodValidationPostProcessor).     assertThat(this.context.getBeansOfType(MethodValidationPostProcessor.class)).hasSize(1).     assertThat(this.context.getBean(Validator.class)).isNotSameAs(ReflectionTestUtils.getField(userMethodValidationPostProcessor, "validator")). }
false;public;0;6;;@Test public void methodValidationPostProcessorValidatorDependencyDoesNotTriggerEarlyInitialization() {     load(CustomValidatorConfiguration.class).     assertThat(this.context.getBean(TestBeanPostProcessor.class).postProcessed).contains("someService"). }
false;private;1;3;;private boolean isPrimaryBean(String beanName) {     return this.context.getBeanDefinition(beanName).isPrimary(). }
false;private;2;10;;private void load(Class<?> config, String... environment) {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     TestPropertyValues.of(environment).applyTo(ctx).     if (config != null) {         ctx.register(config).     }     ctx.register(ValidationAutoConfiguration.class).     ctx.refresh().     this.context = ctx. }
false;public;0;4;;@Bean public OptionalValidatorFactoryBean customValidator() {     return new OptionalValidatorFactoryBean(). }
false;public;0;4;;@Bean public OptionalValidatorFactoryBean defaultValidator() {     return new OptionalValidatorFactoryBean(). }
false;public;0;4;;@Bean public Validator customValidator() {     return mock(Validator.class). }
false;public;0;4;;@Bean public org.springframework.validation.Validator customValidator() {     return mock(org.springframework.validation.Validator.class). }
false;public;0;4;;@Bean public org.springframework.validation.Validator anotherCustomValidator() {     return mock(org.springframework.validation.Validator.class). }
false;public;0;4;;@Bean public org.springframework.validation.Validator customValidator() {     return mock(org.springframework.validation.Validator.class). }
false;public;0;5;;@Bean @Primary public org.springframework.validation.Validator anotherCustomValidator() {     return mock(org.springframework.validation.Validator.class). }
false;public;1;3;;public void doSomething(@Size(min = 3, max = 10) String name) { }
false;;1;1;;void doSomething(@Min(42) Integer counter).
false;public;1;4;;@Override public void doSomething(Integer counter) { }
false;public;0;4;;@Bean public AnotherSampleService anotherSampleService() {     return new DefaultAnotherSampleService(). }
false;public;0;4;;@Bean public MethodValidationPostProcessor testMethodValidationPostProcessor() {     return new MethodValidationPostProcessor(). }
false;;0;4;;@Bean Validator customValidator() {     return new CustomValidatorBean(). }
false;static;0;4;;@Bean static TestBeanPostProcessor testBeanPostProcessor() {     return new TestBeanPostProcessor(). }
false;public;0;4;;@Bean public SomeService someService() {     return new SomeService(). }
false;public;2;5;;@Override public Object postProcessAfterInitialization(Object bean, String name) {     this.postProcessed.add(name).     return bean. }
false;public;2;4;;@Override public Object postProcessBeforeInitialization(Object bean, String name) {     return bean. }
