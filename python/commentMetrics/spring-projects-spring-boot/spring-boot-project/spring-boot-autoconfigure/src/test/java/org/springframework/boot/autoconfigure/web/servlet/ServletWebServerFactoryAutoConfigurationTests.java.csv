commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void createFromConfigClass() {     this.contextRunner.run(verifyContext()). }
false;public;0;5;;@Test public void contextAlreadyHasDispatcherServletWithDefaultName() {     this.contextRunner.withUserConfiguration(DispatcherServletConfiguration.class).run(verifyContext()). }
false;public;0;9;;@Test public void contextAlreadyHasDispatcherServlet() {     this.contextRunner.withUserConfiguration(SpringServletConfiguration.class).run((context) -> {         verifyContext(context).         assertThat(context.getBeanNamesForType(DispatcherServlet.class)).hasSize(2).     }). }
false;public;0;8;;@Test public void contextAlreadyHasNonDispatcherServlet() {     this.contextRunner.withUserConfiguration(NonSpringServletConfiguration.class).run((context) -> {         // the non default servlet is still registered         verifyContext(context).         assertThat(context).doesNotHaveBean(DispatcherServlet.class).     }). }
false;public;0;8;;@Test public void contextAlreadyHasNonServlet() {     this.contextRunner.withUserConfiguration(NonServletConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean(DispatcherServlet.class).         assertThat(context).doesNotHaveBean(Servlet.class).     }). }
false;public;0;10;;@Test public void contextAlreadyHasDispatcherServletAndRegistration() {     this.contextRunner.withUserConfiguration(DispatcherServletWithRegistrationConfiguration.class).run((context) -> {         verifyContext(context).         assertThat(context).hasSingleBean(DispatcherServlet.class).     }). }
false;public;0;5;;@Test public void webServerHasNoServletContext() {     this.contextRunner.withUserConfiguration(EnsureWebServerHasNoServletContext.class).run(verifyContext()). }
false;public;0;11;;@Test public void customizeWebServerFactoryThroughCallback() {     this.contextRunner.withUserConfiguration(CallbackEmbeddedServerFactoryCustomizer.class).run((context) -> {         verifyContext(context).         assertThat(context.getBean(MockServletWebServerFactory.class).getPort()).isEqualTo(9000).     }). }
false;public;0;9;;@Test public void initParametersAreConfiguredOnTheServletContext() {     this.contextRunner.withPropertyValues("server.servlet.context-parameters.a:alpha", "server.servlet.context-parameters.b:bravo").run((context) -> {         ServletContext servletContext = context.getServletContext().         assertThat(servletContext.getInitParameter("a")).isEqualTo("alpha").         assertThat(servletContext.getInitParameter("b")).isEqualTo("bravo").     }). }
false;public;0;14;;@Test public void tomcatConnectorCustomizerBeanIsAddedToFactory() {     WebApplicationContextRunner runner = new WebApplicationContextRunner(AnnotationConfigServletWebServerApplicationContext::new).withConfiguration(AutoConfigurations.of(ServletWebServerFactoryAutoConfiguration.class)).withUserConfiguration(TomcatConnectorCustomizerConfiguration.class).     runner.run((context) -> {         TomcatServletWebServerFactory factory = context.getBean(TomcatServletWebServerFactory.class).         assertThat(factory.getTomcatConnectorCustomizers()).hasSize(1).     }). }
false;public;0;12;;@Test public void tomcatContextCustomizerBeanIsAddedToFactory() {     WebApplicationContextRunner runner = new WebApplicationContextRunner(AnnotationConfigServletWebServerApplicationContext::new).withConfiguration(AutoConfigurations.of(ServletWebServerFactoryAutoConfiguration.class)).     runner.run((context) -> {         TomcatServletWebServerFactory factory = context.getBean(TomcatServletWebServerFactory.class).         assertThat(factory.getTomcatContextCustomizers()).hasSize(1).     }). }
false;private;0;3;;private ContextConsumer<AssertableWebApplicationContext> verifyContext() {     return this::verifyContext. }
false;private;1;8;;private void verifyContext(ApplicationContext context) {     MockServletWebServerFactory factory = context.getBean(MockServletWebServerFactory.class).     Servlet servlet = context.getBean(DispatcherServletAutoConfiguration.DEFAULT_DISPATCHER_SERVLET_BEAN_NAME, Servlet.class).     verify(factory.getServletContext()).addServlet("dispatcherServlet", servlet). }
false;public;0;4;;@Bean public ServletWebServerFactory webServerFactory() {     return new MockServletWebServerFactory(). }
false;public;0;4;;@Bean public DispatcherServlet dispatcherServlet() {     return new DispatcherServlet(). }
false;public;0;4;;@Bean public DispatcherServlet springServlet() {     return new DispatcherServlet(). }
false;protected;2;4;;@Override protected void doService(HttpServletRequest request, HttpServletResponse response) { }
false;public;0;9;;@Bean public FrameworkServlet dispatcherServlet() {     return new FrameworkServlet() {          @Override         protected void doService(HttpServletRequest request, HttpServletResponse response) {         }     }. }
false;public;0;4;;@Bean public String dispatcherServlet() {     return "foo". }
false;public;0;4;;@Bean(name = DispatcherServletAutoConfiguration.DEFAULT_DISPATCHER_SERVLET_BEAN_NAME) public DispatcherServlet dispatcherServlet() {     return new DispatcherServlet(). }
false;public;0;4;;@Bean(name = DispatcherServletAutoConfiguration.DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME) public ServletRegistrationBean<DispatcherServlet> dispatcherRegistration() {     return new ServletRegistrationBean<>(dispatcherServlet(), "/app/*"). }
false;public;2;9;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     if (bean instanceof ConfigurableServletWebServerFactory) {         MockServletWebServerFactory webServerFactory = (MockServletWebServerFactory) bean.         assertThat(webServerFactory.getServletContext()).isNull().     }     return bean. }
false;public;2;4;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) {     return bean. }
false;public;1;4;;@Override public void customize(ConfigurableServletWebServerFactory serverFactory) {     serverFactory.setPort(9000). }
false;public;0;5;;@Bean public TomcatConnectorCustomizer connectorCustomizer() {     return (connector) -> {     }. }
false;public;0;5;;@Bean public TomcatContextCustomizer contextCustomizer() {     return (context) -> {     }. }
