commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void jacksonNotAvailable() {     this.contextRunner.run((context) -> {         assertThat(context).doesNotHaveBean(ObjectMapper.class).         assertThat(context).doesNotHaveBean(MappingJackson2HttpMessageConverter.class).         assertThat(context).doesNotHaveBean(MappingJackson2XmlHttpMessageConverter.class).     }). }
false;public;0;6;;@Test public void jacksonDefaultConverter() {     this.contextRunner.withUserConfiguration(JacksonObjectMapperConfig.class).run(assertConverter(MappingJackson2HttpMessageConverter.class, "mappingJackson2HttpMessageConverter")). }
false;public;0;6;;@Test public void jacksonConverterWithBuilder() {     this.contextRunner.withUserConfiguration(JacksonObjectMapperBuilderConfig.class).run(assertConverter(MappingJackson2HttpMessageConverter.class, "mappingJackson2HttpMessageConverter")). }
false;public;0;6;;@Test public void jacksonXmlConverterWithBuilder() {     this.contextRunner.withUserConfiguration(JacksonObjectMapperBuilderConfig.class).run(assertConverter(MappingJackson2XmlHttpMessageConverter.class, "mappingJackson2XmlHttpMessageConverter")). }
false;public;0;8;;@Test public void jacksonCustomConverter() {     this.contextRunner.withUserConfiguration(JacksonObjectMapperConfig.class, JacksonConverterConfig.class).run(assertConverter(MappingJackson2HttpMessageConverter.class, "customJacksonMessageConverter")). }
false;public;0;7;;@Test public void gsonNotAvailable() {     this.contextRunner.run((context) -> {         assertThat(context).doesNotHaveBean(Gson.class).         assertThat(context).doesNotHaveBean(GsonHttpMessageConverter.class).     }). }
false;public;0;7;;@Test public void gsonDefaultConverter() {     this.contextRunner.withConfiguration(AutoConfigurations.of(GsonAutoConfiguration.class)).run(assertConverter(GsonHttpMessageConverter.class, "gsonHttpMessageConverter")). }
false;public;0;7;;@Test public void gsonCustomConverter() {     this.contextRunner.withUserConfiguration(GsonConverterConfig.class).withConfiguration(AutoConfigurations.of(GsonAutoConfiguration.class)).run(assertConverter(GsonHttpMessageConverter.class, "customGsonMessageConverter")). }
false;public;0;14;;@Test public void gsonCanBePreferred() {     allOptionsRunner().withPropertyValues("spring.http.converters.preferred-json-mapper:gson").run((context) -> {         assertConverterBeanExists(context, GsonHttpMessageConverter.class, "gsonHttpMessageConverter").         assertConverterBeanRegisteredWithHttpMessageConverters(context, GsonHttpMessageConverter.class).         assertThat(context).doesNotHaveBean(JsonbHttpMessageConverter.class).         assertThat(context).doesNotHaveBean(MappingJackson2HttpMessageConverter.class).     }). }
false;public;0;7;;@Test public void jsonbNotAvailable() {     this.contextRunner.run((context) -> {         assertThat(context).doesNotHaveBean(Jsonb.class).         assertThat(context).doesNotHaveBean(JsonbHttpMessageConverter.class).     }). }
false;public;0;7;;@Test public void jsonbDefaultConverter() {     this.contextRunner.withConfiguration(AutoConfigurations.of(JsonbAutoConfiguration.class)).run(assertConverter(JsonbHttpMessageConverter.class, "jsonbHttpMessageConverter")). }
false;public;0;7;;@Test public void jsonbCustomConverter() {     this.contextRunner.withUserConfiguration(JsonbConverterConfig.class).withConfiguration(AutoConfigurations.of(JsonbAutoConfiguration.class)).run(assertConverter(JsonbHttpMessageConverter.class, "customJsonbMessageConverter")). }
false;public;0;14;;@Test public void jsonbCanBePreferred() {     allOptionsRunner().withPropertyValues("spring.http.converters.preferred-json-mapper:jsonb").run((context) -> {         assertConverterBeanExists(context, JsonbHttpMessageConverter.class, "jsonbHttpMessageConverter").         assertConverterBeanRegisteredWithHttpMessageConverters(context, JsonbHttpMessageConverter.class).         assertThat(context).doesNotHaveBean(GsonHttpMessageConverter.class).         assertThat(context).doesNotHaveBean(MappingJackson2HttpMessageConverter.class).     }). }
false;public;0;5;;@Test public void stringDefaultConverter() {     this.contextRunner.run(assertConverter(StringHttpMessageConverter.class, "stringHttpMessageConverter")). }
false;public;0;6;;@Test public void stringCustomConverter() {     this.contextRunner.withUserConfiguration(StringConverterConfig.class).run(assertConverter(StringHttpMessageConverter.class, "customStringMessageConverter")). }
false;public;0;12;;@Test public void typeConstrainedConverterDoesNotPreventAutoConfigurationOfJacksonConverter() {     this.contextRunner.withUserConfiguration(JacksonObjectMapperBuilderConfig.class, TypeConstrainedConverterConfiguration.class).run((context) -> {         BeanDefinition beanDefinition = ((GenericApplicationContext) context.getSourceApplicationContext()).getBeanDefinition("mappingJackson2HttpMessageConverter").         assertThat(beanDefinition.getFactoryBeanName()).isEqualTo(MappingJackson2HttpMessageConverterConfiguration.class.getName()).     }). }
false;public;0;12;;@Test public void typeConstrainedConverterFromSpringDataDoesNotPreventAutoConfigurationOfJacksonConverter() {     this.contextRunner.withUserConfiguration(JacksonObjectMapperBuilderConfig.class, RepositoryRestMvcConfiguration.class).run((context) -> {         BeanDefinition beanDefinition = ((GenericApplicationContext) context.getSourceApplicationContext()).getBeanDefinition("mappingJackson2HttpMessageConverter").         assertThat(beanDefinition.getFactoryBeanName()).isEqualTo(MappingJackson2HttpMessageConverterConfiguration.class.getName()).     }). }
false;public;0;11;;@Test public void jacksonIsPreferredByDefault() {     allOptionsRunner().run((context) -> {         assertConverterBeanExists(context, MappingJackson2HttpMessageConverter.class, "mappingJackson2HttpMessageConverter").         assertConverterBeanRegisteredWithHttpMessageConverters(context, MappingJackson2HttpMessageConverter.class).         assertThat(context).doesNotHaveBean(GsonHttpMessageConverter.class).         assertThat(context).doesNotHaveBean(JsonbHttpMessageConverter.class).     }). }
false;public;0;12;;@Test public void gsonIsPreferredIfJacksonIsNotAvailable() {     allOptionsRunner().withClassLoader(new FilteredClassLoader(ObjectMapper.class.getPackage().getName())).run((context) -> {         assertConverterBeanExists(context, GsonHttpMessageConverter.class, "gsonHttpMessageConverter").         assertConverterBeanRegisteredWithHttpMessageConverters(context, GsonHttpMessageConverter.class).         assertThat(context).doesNotHaveBean(JsonbHttpMessageConverter.class).     }). }
false;public;0;9;;@Test public void jsonbIsPreferredIfJacksonAndGsonAreNotAvailable() {     allOptionsRunner().withClassLoader(new FilteredClassLoader(ObjectMapper.class.getPackage().getName(), Gson.class.getPackage().getName())).run(assertConverter(JsonbHttpMessageConverter.class, "jsonbHttpMessageConverter")). }
false;public;0;8;;@Test public void whenServletWebApplicationHttpMessageConvertersIsConfigured() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpMessageConvertersAutoConfiguration.class)).run((context) -> assertThat(context).hasSingleBean(HttpMessageConverters.class)). }
false;public;0;8;;@Test public void whenReactiveWebApplicationHttpMessageConvertersIsNotConfigured() {     new ReactiveWebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpMessageConvertersAutoConfiguration.class)).run((context) -> assertThat(context).doesNotHaveBean(HttpMessageConverters.class)). }
false;private;0;5;;private ApplicationContextRunner allOptionsRunner() {     return this.contextRunner.withConfiguration(AutoConfigurations.of(GsonAutoConfiguration.class, JacksonAutoConfiguration.class, JsonbAutoConfiguration.class)). }
false;private;2;8;;private ContextConsumer<AssertableApplicationContext> assertConverter(Class<? extends HttpMessageConverter<?>> converterType, String beanName) {     return (context) -> {         assertConverterBeanExists(context, converterType, beanName).         assertConverterBeanRegisteredWithHttpMessageConverters(context, converterType).     }. }
false;private;3;5;;private void assertConverterBeanExists(AssertableApplicationContext context, Class<?> type, String beanName) {     assertThat(context).hasSingleBean(type).     assertThat(context).hasBean(beanName). }
false;private;2;7;;private void assertConverterBeanRegisteredWithHttpMessageConverters(AssertableApplicationContext context, Class<? extends HttpMessageConverter<?>> type) {     HttpMessageConverter<?> converter = context.getBean(type).     HttpMessageConverters converters = context.getBean(HttpMessageConverters.class).     assertThat(converters.getConverters()).contains(converter). }
false;public;0;4;;@Bean public ObjectMapper objectMapper() {     return new ObjectMapper(). }
false;public;0;4;;@Bean public ObjectMapper objectMapper() {     return new ObjectMapper(). }
false;public;0;4;;@Bean public Jackson2ObjectMapperBuilder builder() {     return new Jackson2ObjectMapperBuilder(). }
false;public;1;7;;@Bean public MappingJackson2HttpMessageConverter customJacksonMessageConverter(ObjectMapper objectMapper) {     MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter().     converter.setObjectMapper(objectMapper).     return converter. }
false;public;1;6;;@Bean public GsonHttpMessageConverter customGsonMessageConverter(Gson gson) {     GsonHttpMessageConverter converter = new GsonHttpMessageConverter().     converter.setGson(gson).     return converter. }
false;public;1;6;;@Bean public JsonbHttpMessageConverter customJsonbMessageConverter(Jsonb jsonb) {     JsonbHttpMessageConverter converter = new JsonbHttpMessageConverter().     converter.setJsonb(jsonb).     return converter. }
false;public;0;4;;@Bean public StringHttpMessageConverter customStringMessageConverter() {     return new StringHttpMessageConverter(). }
false;public;0;5;;@Bean public TypeConstrainedMappingJackson2HttpMessageConverter typeConstrainedConverter() {     return new TypeConstrainedMappingJackson2HttpMessageConverter(RepresentationModel.class). }
