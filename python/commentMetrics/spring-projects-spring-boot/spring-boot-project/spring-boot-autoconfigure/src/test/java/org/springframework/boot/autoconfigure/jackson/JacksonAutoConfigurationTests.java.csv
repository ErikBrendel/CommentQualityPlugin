commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void registersJodaModuleAutomatically() {     this.contextRunner.run((context) -> {         ObjectMapper objectMapper = context.getBean(ObjectMapper.class).         assertThat(objectMapper.canSerialize(LocalDateTime.class)).isTrue().     }). }
false;public;0;11;;@Test public void doubleModuleRegistration() {     this.contextRunner.withUserConfiguration(DoubleModulesConfig.class).withConfiguration(AutoConfigurations.of(HttpMessageConvertersAutoConfiguration.class)).run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(mapper.writeValueAsString(new Foo())).isEqualTo("{\"foo\":\"bar\"}").     }). }
false;public;0;7;;@Test public void noCustomDateFormat() {     this.contextRunner.run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(mapper.getDateFormat()).isInstanceOf(StdDateFormat.class).     }). }
false;public;0;11;;@Test public void customDateFormat() {     this.contextRunner.withPropertyValues("spring.jackson.date-format:yyyyMMddHHmmss").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         DateFormat dateFormat = mapper.getDateFormat().         assertThat(dateFormat).isInstanceOf(SimpleDateFormat.class).         assertThat(((SimpleDateFormat) dateFormat).toPattern()).isEqualTo("yyyyMMddHHmmss").     }). }
false;public;0;16;;@Test public void customJodaDateTimeFormat() throws Exception {     this.contextRunner.withPropertyValues("spring.jackson.date-format:yyyyMMddHHmmss", "spring.jackson.joda-date-time-format:yyyy-MM-dd HH:mm:ss").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         DateTime dateTime = new DateTime(1988, 6, 25, 20, 30, DateTimeZone.UTC).         assertThat(mapper.writeValueAsString(dateTime)).isEqualTo("\"1988-06-25 20:30:00\"").         Date date = dateTime.toDate().         assertThat(mapper.writeValueAsString(date)).isEqualTo("\"19880625203000\"").     }). }
false;public;0;9;;@Test public void customDateFormatClass() {     this.contextRunner.withPropertyValues("spring.jackson.date-format:org.springframework.boot.autoconfigure.jackson.JacksonAutoConfigurationTests.MyDateFormat").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(mapper.getDateFormat()).isInstanceOf(MyDateFormat.class).     }). }
false;public;0;7;;@Test public void noCustomPropertyNamingStrategy() {     this.contextRunner.run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(mapper.getPropertyNamingStrategy()).isNull().     }). }
false;public;0;10;;@Test public void customPropertyNamingStrategyField() {     this.contextRunner.withPropertyValues("spring.jackson.property-naming-strategy:SNAKE_CASE").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(mapper.getPropertyNamingStrategy()).isInstanceOf(SnakeCaseStrategy.class).     }). }
false;public;0;10;;@Test public void customPropertyNamingStrategyClass() {     this.contextRunner.withPropertyValues("spring.jackson.property-naming-strategy:com.fasterxml.jackson.databind.PropertyNamingStrategy.SnakeCaseStrategy").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(mapper.getPropertyNamingStrategy()).isInstanceOf(SnakeCaseStrategy.class).     }). }
false;public;0;12;;@Test public void enableSerializationFeature() {     this.contextRunner.withPropertyValues("spring.jackson.serialization.indent_output:true").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(SerializationFeature.INDENT_OUTPUT.enabledByDefault()).isFalse().         assertThat(mapper.getSerializationConfig().hasSerializationFeatures(SerializationFeature.INDENT_OUTPUT.getMask())).isTrue().     }). }
false;public;0;14;;@Test public void disableSerializationFeature() {     this.contextRunner.withPropertyValues("spring.jackson.serialization.write_dates_as_timestamps:false").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS.enabledByDefault()).isTrue().         assertThat(mapper.getSerializationConfig().hasSerializationFeatures(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS.getMask())).isFalse().     }). }
false;public;0;15;;@Test public void enableDeserializationFeature() {     this.contextRunner.withPropertyValues("spring.jackson.deserialization.use_big_decimal_for_floats:true").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS.enabledByDefault()).isFalse().         assertThat(mapper.getDeserializationConfig().hasDeserializationFeatures(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS.getMask())).isTrue().     }). }
false;public;0;15;;@Test public void disableDeserializationFeature() {     this.contextRunner.withPropertyValues("spring.jackson.deserialization.fail-on-unknown-properties:false").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES.enabledByDefault()).isTrue().         assertThat(mapper.getDeserializationConfig().hasDeserializationFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES.getMask())).isFalse().     }). }
false;public;0;18;;@Test public void enableMapperFeature() {     this.contextRunner.withPropertyValues("spring.jackson.mapper.require_setters_for_getters:true").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS.enabledByDefault()).isFalse().         assertThat(mapper.getSerializationConfig().hasMapperFeatures(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS.getMask())).isTrue().         assertThat(mapper.getDeserializationConfig().hasMapperFeatures(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS.getMask())).isTrue().     }). }
false;public;0;15;;@Test public void disableMapperFeature() {     this.contextRunner.withPropertyValues("spring.jackson.mapper.use_annotations:false").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(MapperFeature.USE_ANNOTATIONS.enabledByDefault()).isTrue().         assertThat(mapper.getDeserializationConfig().hasMapperFeatures(MapperFeature.USE_ANNOTATIONS.getMask())).isFalse().         assertThat(mapper.getSerializationConfig().hasMapperFeatures(MapperFeature.USE_ANNOTATIONS.getMask())).isFalse().     }). }
false;public;0;12;;@Test public void enableParserFeature() {     this.contextRunner.withPropertyValues("spring.jackson.parser.allow_single_quotes:true").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(JsonParser.Feature.ALLOW_SINGLE_QUOTES.enabledByDefault()).isFalse().         assertThat(mapper.getFactory().isEnabled(JsonParser.Feature.ALLOW_SINGLE_QUOTES)).isTrue().     }). }
false;public;0;12;;@Test public void disableParserFeature() {     this.contextRunner.withPropertyValues("spring.jackson.parser.auto_close_source:false").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(JsonParser.Feature.AUTO_CLOSE_SOURCE.enabledByDefault()).isTrue().         assertThat(mapper.getFactory().isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)).isFalse().     }). }
false;public;0;14;;@Test public void enableGeneratorFeature() {     this.contextRunner.withPropertyValues("spring.jackson.generator.write_numbers_as_strings:true").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS.enabledByDefault()).isFalse().         assertThat(mapper.getFactory().isEnabled(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS)).isTrue().     }). }
false;public;0;13;;@Test public void disableGeneratorFeature() {     this.contextRunner.withPropertyValues("spring.jackson.generator.auto_close_target:false").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(JsonGenerator.Feature.AUTO_CLOSE_TARGET.enabledByDefault()).isTrue().         assertThat(mapper.getFactory().isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)).isFalse().     }). }
false;public;0;22;;@Test public void defaultObjectMapperBuilder() {     this.contextRunner.run((context) -> {         Jackson2ObjectMapperBuilder builder = context.getBean(Jackson2ObjectMapperBuilder.class).         ObjectMapper mapper = builder.build().         assertThat(MapperFeature.DEFAULT_VIEW_INCLUSION.enabledByDefault()).isTrue().         assertThat(mapper.getDeserializationConfig().isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)).isFalse().         assertThat(MapperFeature.DEFAULT_VIEW_INCLUSION.enabledByDefault()).isTrue().         assertThat(mapper.getDeserializationConfig().isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)).isFalse().         assertThat(mapper.getSerializationConfig().isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)).isFalse().         assertThat(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES.enabledByDefault()).isTrue().         assertThat(mapper.getDeserializationConfig().isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)).isFalse().     }). }
false;public;0;11;;@Test public void moduleBeansAndWellKnownModulesAreRegisteredWithTheObjectMapperBuilder() {     this.contextRunner.withUserConfiguration(ModuleConfig.class).run((context) -> {         ObjectMapper objectMapper = context.getBean(Jackson2ObjectMapperBuilder.class).build().         assertThat(context.getBean(CustomModule.class).getOwners()).contains((ObjectCodec) objectMapper).         assertThat(objectMapper.canSerialize(LocalDateTime.class)).isTrue().         assertThat(objectMapper.canSerialize(Baz.class)).isTrue().     }). }
false;public;0;9;;@Test public void defaultSerializationInclusion() {     this.contextRunner.run((context) -> {         ObjectMapper objectMapper = context.getBean(Jackson2ObjectMapperBuilder.class).build().         assertThat(objectMapper.getSerializationConfig().getDefaultPropertyInclusion().getValueInclusion()).isEqualTo(JsonInclude.Include.USE_DEFAULTS).     }). }
false;public;0;12;;@Test public void customSerializationInclusion() {     this.contextRunner.withPropertyValues("spring.jackson.default-property-inclusion:non_null").run((context) -> {         ObjectMapper objectMapper = context.getBean(Jackson2ObjectMapperBuilder.class).build().         assertThat(objectMapper.getSerializationConfig().getDefaultPropertyInclusion().getValueInclusion()).isEqualTo(JsonInclude.Include.NON_NULL).     }). }
false;public;0;13;;@Test public void customTimeZoneFormattingADateTime() {     this.contextRunner.withPropertyValues("spring.jackson.time-zone:America/Los_Angeles", "spring.jackson.date-format:zzzz", "spring.jackson.locale:en").run((context) -> {         ObjectMapper objectMapper = context.getBean(Jackson2ObjectMapperBuilder.class).build().         DateTime dateTime = new DateTime(1436966242231L, DateTimeZone.UTC).         assertThat(objectMapper.writeValueAsString(dateTime)).isEqualTo("\"Pacific Daylight Time\"").     }). }
false;public;0;11;;@Test public void customTimeZoneFormattingADate() throws JsonProcessingException {     this.contextRunner.withPropertyValues("spring.jackson.time-zone:GMT+10", "spring.jackson.date-format:z").run((context) -> {         ObjectMapper objectMapper = context.getBean(Jackson2ObjectMapperBuilder.class).build().         Date date = new Date(1436966242231L).         assertThat(objectMapper.writeValueAsString(date)).isEqualTo("\"GMT+10:00\"").     }). }
false;public;0;14;;@Test public void customLocaleWithJodaTime() throws JsonProcessingException {     this.contextRunner.withPropertyValues("spring.jackson.locale:de_DE", "spring.jackson.date-format:zzzz", "spring.jackson.serialization.write-dates-with-zone-id:true").run((context) -> {         ObjectMapper objectMapper = context.getBean(ObjectMapper.class).         DateTime jodaTime = new DateTime(1478424650000L, DateTimeZone.forID("Europe/Rome")).         assertThat(objectMapper.writeValueAsString(jodaTime)).startsWith("\"Mitteleuropäische ").     }). }
false;public;0;8;;@Test public void additionalJacksonBuilderCustomization() {     this.contextRunner.withUserConfiguration(ObjectMapperBuilderCustomConfig.class).run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         assertThat(mapper.getDateFormat()).isInstanceOf(MyDateFormat.class).     }). }
false;public;0;5;;@Test public void parameterNamesModuleIsAutoConfigured() {     assertParameterNamesModuleCreatorBinding(Mode.DEFAULT, JacksonAutoConfiguration.class). }
false;public;0;5;;@Test public void customParameterNamesModuleCanBeConfigured() {     assertParameterNamesModuleCreatorBinding(Mode.DELEGATING, ParameterNamesModuleConfig.class, JacksonAutoConfiguration.class). }
false;public;0;11;;@Test public void writeDatesAsTimestampsDefault() {     this.contextRunner.run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         DateTime dateTime = new DateTime(1988, 6, 25, 20, 30, DateTimeZone.UTC).         String expected = FormatConfig.DEFAULT_DATETIME_PRINTER.rawFormatter().withZone(DateTimeZone.UTC).print(dateTime).         assertThat(mapper.writeValueAsString(dateTime)).isEqualTo("\"" + expected + "\"").     }). }
false;public;0;11;;@Test public void writeWithVisibility() {     this.contextRunner.withPropertyValues("spring.jackson.visibility.getter:none", "spring.jackson.visibility.field:any").run((context) -> {         ObjectMapper mapper = context.getBean(ObjectMapper.class).         String json = mapper.writeValueAsString(new VisibilityBean()).         assertThat(json).contains("property1").         assertThat(json).contains("property2").         assertThat(json).doesNotContain("property3").     }). }
false;private;2;11;;private void assertParameterNamesModuleCreatorBinding(Mode expectedMode, Class<?>... configClasses) {     this.contextRunner.withUserConfiguration(configClasses).run((context) -> {         DeserializationConfig deserializationConfig = context.getBean(ObjectMapper.class).getDeserializationConfig().         AnnotationIntrospector annotationIntrospector = deserializationConfig.getAnnotationIntrospector().allIntrospectors().iterator().next().         assertThat(annotationIntrospector).hasFieldOrPropertyWithValue("creatorBinding", expectedMode).     }). }
false;public;0;5;;@Bean @Primary public ObjectMapper objectMapper() {     return mock(ObjectMapper.class). }
false;public;0;4;;@Bean public CustomModule jacksonModule() {     return new CustomModule(). }
false;public;3;7;;@Override public void serialize(Foo value, JsonGenerator jgen, SerializerProvider provider) throws IOException {     jgen.writeStartObject().     jgen.writeStringField("foo", "bar").     jgen.writeEndObject(). }
false;public;0;15;;@Bean public Module jacksonModule() {     SimpleModule module = new SimpleModule().     module.addSerializer(Foo.class, new JsonSerializer<Foo>() {          @Override         public void serialize(Foo value, JsonGenerator jgen, SerializerProvider provider) throws IOException {             jgen.writeStartObject().             jgen.writeStringField("foo", "bar").             jgen.writeEndObject().         }     }).     return module. }
false;public;0;7;;@Bean @Primary public ObjectMapper objectMapper() {     ObjectMapper mapper = new ObjectMapper().     mapper.registerModule(jacksonModule()).     return mapper. }
false;public;0;4;;@Bean public ParameterNamesModule parameterNamesModule() {     return new ParameterNamesModule(JsonCreator.Mode.DELEGATING). }
false;public;0;4;;@Bean public Jackson2ObjectMapperBuilderCustomizer customDateFormat() {     return (builder) -> builder.dateFormat(new MyDateFormat()). }
false;static;0;3;;static Foo create() {     return new Foo(). }
false;public;0;3;;public String getName() {     return this.name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getPropertyName() {     return this.propertyName. }
false;public;1;3;;public void setPropertyName(String propertyName) {     this.propertyName = propertyName. }
false;protected;3;4;;@Override protected void serializeObject(Baz value, JsonGenerator jgen, SerializerProvider provider) { }
false;public;1;4;;@Override public void setupModule(SetupContext context) {     this.owners.add(context.getOwner()). }
false;;0;3;;Set<ObjectCodec> getOwners() {     return this.owners. }
false;public;0;3;;public String getProperty3() {     return null. }
