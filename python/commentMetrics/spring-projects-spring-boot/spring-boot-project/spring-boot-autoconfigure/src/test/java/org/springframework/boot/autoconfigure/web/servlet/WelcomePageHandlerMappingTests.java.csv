commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void isOrderedAtLowPriority() {     this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).run((context) -> {         WelcomePageHandlerMapping handler = context.getBean(WelcomePageHandlerMapping.class).         assertThat(handler.getOrder()).isEqualTo(2).     }). }
false;public;0;8;;@Test public void handlesRequestForStaticPageThatAcceptsTextHtml() {     this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).run((context) -> MockMvcBuilders.webAppContextSetup(context).build().perform(get("/").accept(MediaType.TEXT_HTML)).andExpect(status().isOk()).andExpect(forwardedUrl("index.html"))). }
false;public;0;8;;@Test public void handlesRequestForStaticPageThatAcceptsAll() {     this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).run((context) -> MockMvcBuilders.webAppContextSetup(context).build().perform(get("/").accept(MediaType.ALL)).andExpect(status().isOk()).andExpect(forwardedUrl("index.html"))). }
false;public;0;7;;@Test public void doesNotHandleRequestThatDoesNotAcceptTextHtml() {     this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).run((context) -> MockMvcBuilders.webAppContextSetup(context).build().perform(get("/").accept(MediaType.APPLICATION_JSON)).andExpect(status().isNotFound())). }
false;public;0;7;;@Test public void handlesRequestWithNoAcceptHeader() {     this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).run((context) -> MockMvcBuilders.webAppContextSetup(context).build().perform(get("/")).andExpect(status().isOk()).andExpect(forwardedUrl("index.html"))). }
false;public;0;9;;@Test public void handlesRequestWithEmptyAcceptHeader() {     this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).run((context) -> MockMvcBuilders.webAppContextSetup(context).build().perform(get("/").header(HttpHeaders.ACCEPT, "")).andExpect(status().isOk()).andExpect(forwardedUrl("index.html"))). }
false;public;0;8;;@Test public void rootHandlerIsNotRegisteredWhenStaticPathPatternIsNotSlashStarStar() {     this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class).withPropertyValues("static-path-pattern=/foo/**").run((context) -> assertThat(context.getBean(WelcomePageHandlerMapping.class).getRootHandler()).isNull()). }
false;public;0;6;;@Test public void producesNotFoundResponseWhenThereIsNoWelcomePage() {     this.contextRunner.run((context) -> MockMvcBuilders.webAppContextSetup(context).build().perform(get("/").accept(MediaType.TEXT_HTML)).andExpect(status().isNotFound())). }
false;public;0;10;;@Test public void handlesRequestForTemplateThatAcceptsTextHtml() {     this.contextRunner.withUserConfiguration(TemplateConfiguration.class).run((context) -> {         MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(context).build().         mockMvc.perform(get("/").accept(MediaType.TEXT_HTML)).andExpect(status().isOk()).andExpect(content().string("index template")).     }). }
false;public;0;10;;@Test public void handlesRequestForTemplateThatAcceptsAll() {     this.contextRunner.withUserConfiguration(TemplateConfiguration.class).run((context) -> {         MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(context).build().         mockMvc.perform(get("/").accept(MediaType.ALL)).andExpect(status().isOk()).andExpect(content().string("index template")).     }). }
false;public;0;10;;@Test public void prefersAStaticResourceToATemplate() {     this.contextRunner.withUserConfiguration(StaticResourceConfiguration.class, TemplateConfiguration.class).run((context) -> {         MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(context).build().         mockMvc.perform(get("/").accept(MediaType.ALL)).andExpect(status().isOk()).andExpect(forwardedUrl("index.html")).     }). }
false;public;4;14;;@Bean public WelcomePageHandlerMapping handlerMapping(ApplicationContext applicationContext, ObjectProvider<TemplateAvailabilityProviders> templateAvailabilityProviders, ObjectProvider<Resource> staticIndexPage, @Value("${static-path-pattern:/**}") String staticPathPattern) {     return new WelcomePageHandlerMapping(templateAvailabilityProviders.getIfAvailable(() -> new TemplateAvailabilityProviders(applicationContext)), applicationContext, Optional.ofNullable(staticIndexPage.getIfAvailable()), staticPathPattern). }
false;public;0;4;;@Bean public Resource staticIndexPage() {     return new FileSystemResource("src/test/resources/welcome-page/index.html"). }
false;public;0;5;;@Bean public TemplateAvailabilityProviders templateAvailabilityProviders() {     return new TestTemplateAvailabilityProviders((view, environment, classLoader, resourceLoader) -> view.equals("index")). }
false;protected;3;6;;@Override protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     response.getWriter().print(name + " template"). }
false;public;0;18;;@Bean public ViewResolver viewResolver() {     return (name, locale) -> {         if (name.startsWith("forward:")) {             return new InternalResourceView(name.substring("forward:".length())).         }         return new AbstractView() {              @Override             protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {                 response.getWriter().print(name + " template").             }         }.     }. }
