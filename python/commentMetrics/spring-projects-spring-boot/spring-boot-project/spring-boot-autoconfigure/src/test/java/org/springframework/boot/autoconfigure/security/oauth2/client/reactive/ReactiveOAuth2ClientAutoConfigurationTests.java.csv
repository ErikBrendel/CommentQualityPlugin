commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void autoConfigurationShouldBackOffForServletEnvironments() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(ReactiveOAuth2ClientAutoConfiguration.class)).run((context) -> assertThat(context).doesNotHaveBean(ReactiveOAuth2ClientAutoConfiguration.class)). }
false;public;0;5;;@Test public void clientRegistrationRepositoryBeanShouldNotBeCreatedWhenPropertiesAbsent() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(ClientRegistrationRepository.class)). }
false;public;0;13;;@Test public void clientRegistrationRepositoryBeanShouldBeCreatedWhenPropertiesPresent() {     this.contextRunner.withPropertyValues(REGISTRATION_PREFIX + ".foo.client-id=abcd", REGISTRATION_PREFIX + ".foo.client-secret=secret", REGISTRATION_PREFIX + ".foo.provider=github").run((context) -> {         ReactiveClientRegistrationRepository repository = context.getBean(ReactiveClientRegistrationRepository.class).         ClientRegistration registration = repository.findByRegistrationId("foo").block(Duration.ofSeconds(30)).         assertThat(registration).isNotNull().         assertThat(registration.getClientSecret()).isEqualTo("secret").     }). }
false;public;0;5;;@Test public void authorizedClientServiceBeanIsConditionalOnClientRegistrationRepository() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(ReactiveOAuth2AuthorizedClientService.class)). }
false;public;0;7;;@Test public void configurationRegistersAuthorizedClientServiceBean() {     this.contextRunner.withUserConfiguration(ReactiveClientRepositoryConfiguration.class).run((context) -> assertThat(context).hasSingleBean(InMemoryReactiveClientRegistrationRepository.class)). }
false;public;0;11;;@Test public void authorizedClientServiceBeanIsConditionalOnMissingBean() {     this.contextRunner.withUserConfiguration(ReactiveOAuth2AuthorizedClientRepositoryConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(ReactiveOAuth2AuthorizedClientService.class).         assertThat(context).hasBean("testAuthorizedClientService").     }). }
false;public;0;5;;@Test public void authorizedClientRepositoryBeanIsConditionalOnAuthorizedClientService() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(ServerOAuth2AuthorizedClientRepository.class)). }
false;public;0;8;;@Test public void configurationRegistersAuthorizedClientRepositoryBean() {     this.contextRunner.withUserConfiguration(ReactiveOAuth2AuthorizedClientServiceConfiguration.class).run((context) -> assertThat(context).hasSingleBean(AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository.class)). }
false;public;0;11;;@Test public void authorizedClientRepositoryBeanIsConditionalOnMissingBean() {     this.contextRunner.withUserConfiguration(ReactiveOAuth2AuthorizedClientRepositoryConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(ServerOAuth2AuthorizedClientRepository.class).         assertThat(context).hasBean("testAuthorizedClientRepository").     }). }
false;public;0;4;;@Test public void autoConfigurationConditionalOnClassFlux() {     assertWhenClassNotPresent(Flux.class). }
false;public;0;4;;@Test public void autoConfigurationConditionalOnClassEnableWebFluxSecurity() {     assertWhenClassNotPresent(EnableWebFluxSecurity.class). }
false;public;0;4;;@Test public void autoConfigurationConditionalOnClassClientRegistration() {     assertWhenClassNotPresent(ClientRegistration.class). }
false;private;1;9;;private void assertWhenClassNotPresent(Class<?> classToFilter) {     FilteredClassLoader classLoader = new FilteredClassLoader(classToFilter).     this.contextRunner.withClassLoader(classLoader).withPropertyValues(REGISTRATION_PREFIX + ".foo.client-id=abcd", REGISTRATION_PREFIX + ".foo.client-secret=secret", REGISTRATION_PREFIX + ".foo.provider=github").run((context) -> assertThat(context).doesNotHaveBean(ReactiveOAuth2ClientAutoConfiguration.class)). }
false;public;0;7;;@Bean public ReactiveClientRegistrationRepository clientRegistrationRepository() {     List<ClientRegistration> registrations = new ArrayList<>().     registrations.add(getClientRegistration("first", "http://user-info-uri.com")).     registrations.add(getClientRegistration("second", "http://other-user-info")).     return new InMemoryReactiveClientRegistrationRepository(registrations). }
false;private;2;13;;private ClientRegistration getClientRegistration(String id, String userInfoUri) {     ClientRegistration.Builder builder = ClientRegistration.withRegistrationId(id).     builder.clientName("foo").clientId("foo").clientAuthenticationMethod(org.springframework.security.oauth2.core.ClientAuthenticationMethod.BASIC).authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE).scope("read").clientSecret("secret").redirectUriTemplate("http://redirect-uri.com").authorizationUri("http://authorization-uri.com").tokenUri("http://token-uri.com").userInfoUri(userInfoUri).userNameAttributeName("login").     return builder.build(). }
false;public;1;6;;@Bean public ReactiveOAuth2AuthorizedClientService testAuthorizedClientService(ReactiveClientRegistrationRepository clientRegistrationRepository) {     return new InMemoryReactiveOAuth2AuthorizedClientService(clientRegistrationRepository). }
false;public;1;6;;@Bean public ServerOAuth2AuthorizedClientRepository testAuthorizedClientRepository(ReactiveOAuth2AuthorizedClientService authorizedClientService) {     return new AuthenticatedPrincipalServerOAuth2AuthorizedClientRepository(authorizedClientService). }
