commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void failureAnalysisIsPerformed() {     FailureAnalysis failureAnalysis = performAnalysis(TestConfiguration.class).     assertThat(failureAnalysis.getDescription()).contains("'url' attribute is not specified", "no embedded datasource could be configured", "Failed to determine a suitable driver class").     assertThat(failureAnalysis.getAction()).contains("If you want an embedded database (H2, HSQL or Derby), please put it on the classpath", "If you have database settings to be loaded from a particular profile you may need to activate it", "(no profiles are currently active)"). }
false;public;0;7;;@Test public void failureAnalysisIsPerformedWithActiveProfiles() {     this.environment.setActiveProfiles("first", "second").     FailureAnalysis failureAnalysis = performAnalysis(TestConfiguration.class).     assertThat(failureAnalysis.getAction()).contains("(the profiles first,second are currently active)"). }
false;private;1;7;;private FailureAnalysis performAnalysis(Class<?> configuration) {     BeanCreationException failure = createFailure(configuration).     assertThat(failure).isNotNull().     DataSourceBeanCreationFailureAnalyzer failureAnalyzer = new DataSourceBeanCreationFailureAnalyzer().     failureAnalyzer.setEnvironment(this.environment).     return failureAnalyzer.analyze(failure). }
false;private;1;13;;private BeanCreationException createFailure(Class<?> configuration) {     try {         AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().         context.setEnvironment(this.environment).         context.register(configuration).         context.refresh().         context.close().         return null.     } catch (BeanCreationException ex) {         return ex.     } }
