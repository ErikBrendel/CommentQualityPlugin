commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void noSchedulingDoesNotExposeTaskScheduler() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(TaskScheduler.class)). }
false;public;0;20;;@Test public void enableSchedulingWithNoTaskExecutorAutoConfiguresOne() {     this.contextRunner.withPropertyValues("spring.task.scheduling.shutdown.await-termination=true", "spring.task.scheduling.shutdown.await-termination-period=30s", "spring.task.scheduling.thread-name-prefix=scheduling-test-").withUserConfiguration(SchedulingConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(TaskExecutor.class).         TaskExecutor taskExecutor = context.getBean(TaskExecutor.class).         TestBean bean = context.getBean(TestBean.class).         Thread.sleep(15).         assertThat(taskExecutor).hasFieldOrPropertyWithValue("waitForTasksToCompleteOnShutdown", true).         assertThat(taskExecutor).hasFieldOrPropertyWithValue("awaitTerminationSeconds", 30).         assertThat(bean.threadNames).allMatch((name) -> name.contains("scheduling-test-")).     }). }
false;public;0;15;;@Test public void enableSchedulingWithNoTaskExecutorAppliesCustomizers() {     this.contextRunner.withPropertyValues("spring.task.scheduling.thread-name-prefix=scheduling-test-").withUserConfiguration(SchedulingConfiguration.class, TaskSchedulerCustomizerConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(TaskExecutor.class).         TestBean bean = context.getBean(TestBean.class).         Thread.sleep(15).         assertThat(bean.threadNames).allMatch((name) -> name.contains("customized-scheduler-")).     }). }
false;public;0;12;;@Test public void enableSchedulingWithExistingTaskSchedulerBacksOff() {     this.contextRunner.withUserConfiguration(SchedulingConfiguration.class, TaskSchedulerConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(TaskScheduler.class).         assertThat(context.getBean(TaskScheduler.class)).isInstanceOf(TestTaskScheduler.class).         TestBean bean = context.getBean(TestBean.class).         Thread.sleep(15).         assertThat(bean.threadNames).containsExactly("test-1").     }). }
false;public;0;12;;@Test public void enableSchedulingWithExistingScheduledExecutorServiceBacksOff() {     this.contextRunner.withUserConfiguration(SchedulingConfiguration.class, ScheduledExecutorServiceConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean(TaskScheduler.class).         assertThat(context).hasSingleBean(ScheduledExecutorService.class).         TestBean bean = context.getBean(TestBean.class).         Thread.sleep(15).         assertThat(bean.threadNames).allMatch((name) -> name.contains("pool-")).     }). }
false;public;0;10;;@Test public void enableSchedulingWithConfigurerBacksOff() {     this.contextRunner.withUserConfiguration(SchedulingConfiguration.class, SchedulingConfigurerConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean(TaskScheduler.class).         TestBean bean = context.getBean(TestBean.class).         Thread.sleep(15).         assertThat(bean.threadNames).containsExactly("test-1").     }). }
false;public;0;4;;@Bean public TaskScheduler customTaskScheduler() {     return new TestTaskScheduler(). }
false;public;0;4;;@Bean public ScheduledExecutorService customScheduledExecutorService() {     return Executors.newScheduledThreadPool(2). }
false;public;0;5;;@Bean public TaskSchedulerCustomizer testTaskSchedulerCustomizer() {     return ((taskScheduler) -> taskScheduler.setThreadNamePrefix("customized-scheduler-")). }
false;public;1;4;;@Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {     taskRegistrar.setScheduler(this.taskScheduler). }
false;public;0;4;;@Bean public TestBean testBean() {     return new TestBean(). }
false;public;0;4;;@Scheduled(fixedRate = 10) public void accumulate() {     this.threadNames.add(Thread.currentThread().getName()). }
