commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void validPhase() {     this.contextRunner.withUserConfiguration(ValidConfig.class).run((context) -> assertThat(context).hasBean("myBean")). }
false;public;0;12;;@Test public void invalidMemberPhase() {     this.contextRunner.withUserConfiguration(InvalidConfig.class).run((context) -> {         assertThat(context).hasFailed().         assertThat(context.getStartupFailure().getCause()).isInstanceOf(IllegalStateException.class).hasMessageContaining("Nested condition " + InvalidNestedCondition.class.getName() + " uses a configuration phase that is inappropriate for class " + OnBeanCondition.class.getName()).     }). }
false;public;0;13;;@Test public void invalidNestedMemberPhase() {     this.contextRunner.withUserConfiguration(DoubleNestedConfig.class).run((context) -> {         assertThat(context).hasFailed().         assertThat(context.getStartupFailure().getCause()).isInstanceOf(IllegalStateException.class).hasMessageContaining("Nested condition " + DoubleNestedCondition.class.getName() + " uses a configuration phase that is inappropriate for class " + ValidNestedCondition.class.getName()).     }). }
false;public;0;4;;@Bean public String myBean() {     return "myBean". }
false;protected;1;5;;@Override protected ConditionOutcome getFinalMatchOutcome(MemberMatchOutcomes memberOutcomes) {     return ConditionOutcome.match(). }
false;public;0;4;;@Bean public String myBean() {     return "myBean". }
false;protected;1;5;;@Override protected ConditionOutcome getFinalMatchOutcome(MemberMatchOutcomes memberOutcomes) {     return ConditionOutcome.match(). }
false;protected;1;5;;@Override protected ConditionOutcome getFinalMatchOutcome(MemberMatchOutcomes memberOutcomes) {     return ConditionOutcome.match(). }
