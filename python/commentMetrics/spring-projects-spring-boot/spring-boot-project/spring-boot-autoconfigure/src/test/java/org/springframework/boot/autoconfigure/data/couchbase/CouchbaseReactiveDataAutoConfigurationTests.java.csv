commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;5;;@Test public void disabledIfCouchbaseIsNotConfigured() {     load(null).     assertThat(this.context.getBeansOfType(IndexManager.class)).isEmpty(). }
false;public;0;8;;@Test public void customConfiguration() {     load(CustomCouchbaseConfiguration.class).     RxJavaCouchbaseTemplate rxJavaCouchbaseTemplate = this.context.getBean(RxJavaCouchbaseTemplate.class).     assertThat(rxJavaCouchbaseTemplate.getDefaultConsistency()).isEqualTo(Consistency.STRONGLY_CONSISTENT). }
false;public;0;6;;@Test public void validatorIsPresent() {     load(CouchbaseTestConfigurer.class).     assertThat(this.context.getBeansOfType(ValidatingCouchbaseEventListener.class)).hasSize(1). }
false;public;0;10;;@Test @SuppressWarnings("unchecked") public void entityScanShouldSetInitialEntitySet() {     load(EntityScanConfig.class).     CouchbaseMappingContext mappingContext = this.context.getBean(CouchbaseMappingContext.class).     Set<Class<?>> initialEntitySet = (Set<Class<?>>) ReflectionTestUtils.getField(mappingContext, "initialEntitySet").     assertThat(initialEntitySet).containsOnly(City.class). }
false;public;0;8;;@Test public void customConversions() {     load(CustomConversionsConfig.class).     RxJavaCouchbaseTemplate template = this.context.getBean(RxJavaCouchbaseTemplate.class).     assertThat(template.getConverter().getConversionService().canConvert(CouchbaseProperties.class, Boolean.class)).isTrue(). }
false;private;2;13;;private void load(Class<?> config, String... environment) {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     TestPropertyValues.of(environment).applyTo(context).     if (config != null) {         context.register(config).     }     context.register(PropertyPlaceholderAutoConfiguration.class, ValidationAutoConfiguration.class, CouchbaseAutoConfiguration.class, CouchbaseDataAutoConfiguration.class, CouchbaseReactiveDataAutoConfiguration.class).     context.refresh().     this.context = context. }
false;protected;0;4;;@Override protected CouchbaseConfigurer couchbaseConfigurer() {     return new CouchbaseTestConfigurer(). }
false;protected;0;4;;@Override protected Consistency getDefaultConsistency() {     return Consistency.STRONGLY_CONSISTENT. }
false;public;0;5;;@Bean(BeanNames.COUCHBASE_CUSTOM_CONVERSIONS) public CouchbaseCustomConversions myCustomConversions() {     return new CouchbaseCustomConversions(Collections.singletonList(new MyConverter())). }
false;public;1;4;;@Override public Boolean convert(CouchbaseProperties value) {     return true. }
