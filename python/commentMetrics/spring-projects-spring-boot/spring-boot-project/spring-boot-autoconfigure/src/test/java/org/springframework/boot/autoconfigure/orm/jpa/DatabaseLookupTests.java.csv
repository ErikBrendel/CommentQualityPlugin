commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void getDatabaseWhenDataSourceIsNullShouldReturnDefault() {     assertThat(DatabaseLookup.getDatabase(null)).isEqualTo(Database.DEFAULT). }
false;public;0;4;;@Test public void getDatabaseWhenDataSourceIsUnknownShouldReturnDefault() throws Exception {     testGetDatabase("jdbc:idontexist:", Database.DEFAULT). }
false;public;0;4;;@Test public void getDatabaseWhenDerbyShouldReturnDerby() throws Exception {     testGetDatabase("jdbc:derby:", Database.DERBY). }
false;public;0;4;;@Test public void getDatabaseWhenH2ShouldReturnH2() throws Exception {     testGetDatabase("jdbc:h2:", Database.H2). }
false;public;0;4;;@Test public void getDatabaseWhenHsqldbShouldReturnHsqldb() throws Exception {     testGetDatabase("jdbc:hsqldb:", Database.HSQL). }
false;public;0;4;;@Test public void getDatabaseWhenMysqlShouldReturnMysql() throws Exception {     testGetDatabase("jdbc:mysql:", Database.MYSQL). }
false;public;0;4;;@Test public void getDatabaseWhenOracleShouldReturnOracle() throws Exception {     testGetDatabase("jdbc:oracle:", Database.ORACLE). }
false;public;0;4;;@Test public void getDatabaseWhenPostgresShouldReturnPostgres() throws Exception {     testGetDatabase("jdbc:postgresql:", Database.POSTGRESQL). }
false;public;0;4;;@Test public void getDatabaseWhenSqlserverShouldReturnSqlserver() throws Exception {     testGetDatabase("jdbc:sqlserver:", Database.SQL_SERVER). }
false;public;0;4;;@Test public void getDatabaseWhenDb2ShouldReturnDb2() throws Exception {     testGetDatabase("jdbc:db2:", Database.DB2). }
false;public;0;4;;@Test public void getDatabaseWhenInformixShouldReturnInformix() throws Exception {     testGetDatabase("jdbc:informix-sqli:", Database.INFORMIX). }
false;public;0;4;;@Test public void getDatabaseWhenSapShouldReturnHana() throws Exception {     testGetDatabase("jdbc:sap:", Database.HANA). }
false;private;2;10;;private void testGetDatabase(String url, Database expected) throws Exception {     DataSource dataSource = mock(DataSource.class).     Connection connection = mock(Connection.class).     DatabaseMetaData metaData = mock(DatabaseMetaData.class).     given(dataSource.getConnection()).willReturn(connection).     given(connection.getMetaData()).willReturn(metaData).     given(metaData.getURL()).willReturn(url).     Database database = DatabaseLookup.getDatabase(dataSource).     assertThat(database).isEqualTo(expected). }
