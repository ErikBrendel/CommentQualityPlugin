commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testDefaultRepositoryConfiguration() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(CityRepository.class).         assertThat(context).hasSingleBean(PlatformTransactionManager.class).         assertThat(context).hasSingleBean(EntityManagerFactory.class).         assertThat(context.getBean(LocalContainerEntityManagerFactoryBean.class).getBootstrapExecutor()).isNull().     }). }
false;public;0;9;;@Test public void testOverrideRepositoryConfiguration() {     this.contextRunner.withUserConfiguration(CustomConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(CityJpaRepository.class).         assertThat(context).hasSingleBean(PlatformTransactionManager.class).         assertThat(context).hasSingleBean(EntityManagerFactory.class).     }). }
false;public;0;6;;@Test public void autoConfigurationShouldNotKickInEvenIfManualConfigDidNotCreateAnyRepositories() {     this.contextRunner.withUserConfiguration(SortOfInvalidCustomConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(CityRepository.class)). }
false;public;0;13;;@Test public void whenBootstrappingModeIsLazyWithMultipleAsyncExecutorBootstrapExecutorIsConfigured() {     this.contextRunner.withUserConfiguration(MultipleAsyncTaskExecutorConfiguration.class).withConfiguration(AutoConfigurations.of(TaskExecutionAutoConfiguration.class, TaskSchedulingAutoConfiguration.class)).withPropertyValues("spring.data.jpa.repositories.bootstrap-mode=lazy").run((context) -> assertThat(context.getBean(LocalContainerEntityManagerFactoryBean.class).getBootstrapExecutor()).isEqualTo(context.getBean("applicationTaskExecutor"))). }
false;public;0;10;;@Test public void whenBootstrappingModeIsLazyWithSingleAsyncExecutorBootstrapExecutorIsConfigured() {     this.contextRunner.withUserConfiguration(SingleAsyncTaskExecutorConfiguration.class).withPropertyValues("spring.data.jpa.repositories.bootstrap-mode=lazy").run((context) -> assertThat(context.getBean(LocalContainerEntityManagerFactoryBean.class).getBootstrapExecutor()).isEqualTo(context.getBean("testAsyncTaskExecutor"))). }
false;public;0;14;;@Test public void whenBootstrappingModeIsDeferredBootstrapExecutorIsConfigured() {     this.contextRunner.withUserConfiguration(MultipleAsyncTaskExecutorConfiguration.class).withConfiguration(AutoConfigurations.of(TaskExecutionAutoConfiguration.class, TaskSchedulingAutoConfiguration.class)).withPropertyValues("spring.data.jpa.repositories.bootstrap-mode=deferred").run((context) -> assertThat(context.getBean(LocalContainerEntityManagerFactoryBean.class).getBootstrapExecutor()).isEqualTo(context.getBean("applicationTaskExecutor"))). }
false;public;0;12;;@Test public void whenBootstrappingModeIsDefaultBootstrapExecutorIsNotConfigured() {     this.contextRunner.withUserConfiguration(MultipleAsyncTaskExecutorConfiguration.class).withConfiguration(AutoConfigurations.of(TaskExecutionAutoConfiguration.class, TaskSchedulingAutoConfiguration.class)).withPropertyValues("spring.data.jpa.repositories.bootstrap-mode=default").run((context) -> assertThat(context.getBean(LocalContainerEntityManagerFactoryBean.class).getBootstrapExecutor()).isNull()). }
false;public;0;4;;@Bean public SimpleAsyncTaskExecutor testAsyncTaskExecutor() {     return new SimpleAsyncTaskExecutor(). }
