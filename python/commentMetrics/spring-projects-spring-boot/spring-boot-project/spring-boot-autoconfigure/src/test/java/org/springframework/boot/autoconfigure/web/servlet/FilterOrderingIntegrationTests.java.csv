commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void cleanup() {     if (this.context != null) {         this.context.close().     } }
false;public;0;18;;@Test public void testFilterOrdering() {     load().     List<RegisteredFilter> registeredFilters = this.context.getBean(MockServletWebServerFactory.class).getWebServer().getRegisteredFilters().     List<Filter> filters = new ArrayList<>(registeredFilters.size()).     for (RegisteredFilter registeredFilter : registeredFilters) {         filters.add(registeredFilter.getFilter()).     }     Iterator<Filter> iterator = filters.iterator().     assertThat(iterator.next()).isInstanceOf(OrderedCharacterEncodingFilter.class).     assertThat(iterator.next()).isInstanceOf(SessionRepositoryFilter.class).     assertThat(iterator.next()).isInstanceOf(Filter.class).     assertThat(iterator.next()).isInstanceOf(Filter.class).     assertThat(iterator.next()).isInstanceOf(OrderedRequestContextFilter.class).     assertThat(iterator.next()).isInstanceOf(FilterChainProxy.class). }
false;private;0;11;;private void load() {     this.context = new AnnotationConfigServletWebServerApplicationContext().     this.context.register(MockWebServerConfiguration.class, TestSessionConfiguration.class, TestRedisConfiguration.class, WebMvcAutoConfiguration.class, SecurityAutoConfiguration.class, SessionAutoConfiguration.class, HttpMessageConvertersAutoConfiguration.class, PropertyPlaceholderAutoConfiguration.class, HttpEncodingAutoConfiguration.class).     this.context.refresh(). }
false;public;0;4;;@Bean public MockServletWebServerFactory webServerFactory() {     return new MockServletWebServerFactory(). }
false;public;0;4;;@Bean public WebServerFactoryCustomizerBeanPostProcessor ServletWebServerCustomizerBeanPostProcessor() {     return new WebServerFactoryCustomizerBeanPostProcessor(). }
false;public;0;4;;@Bean public MapSessionRepository mapSessionRepository() {     return new MapSessionRepository(new ConcurrentHashMap<>()). }
false;public;0;7;;@Bean public RedisConnectionFactory redisConnectionFactory() {     RedisConnectionFactory connectionFactory = mock(RedisConnectionFactory.class).     RedisConnection connection = mock(RedisConnection.class).     given(connectionFactory.getConnection()).willReturn(connection).     return connectionFactory. }
