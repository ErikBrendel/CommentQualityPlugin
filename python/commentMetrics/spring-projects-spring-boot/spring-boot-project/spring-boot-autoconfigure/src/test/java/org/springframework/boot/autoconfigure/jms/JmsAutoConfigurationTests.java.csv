commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testDefaultJmsConfiguration() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).run(this::testDefaultJmsConfiguration). }
false;private;1;14;;private void testDefaultJmsConfiguration(AssertableApplicationContext loaded) {     assertThat(loaded).hasSingleBean(ConnectionFactory.class).     assertThat(loaded).hasSingleBean(CachingConnectionFactory.class).     CachingConnectionFactory factory = loaded.getBean(CachingConnectionFactory.class).     assertThat(factory.getTargetConnectionFactory()).isInstanceOf(ActiveMQConnectionFactory.class).     JmsTemplate jmsTemplate = loaded.getBean(JmsTemplate.class).     JmsMessagingTemplate messagingTemplate = loaded.getBean(JmsMessagingTemplate.class).     assertThat(factory).isEqualTo(jmsTemplate.getConnectionFactory()).     assertThat(messagingTemplate.getJmsTemplate()).isEqualTo(jmsTemplate).     assertThat(getBrokerUrl(factory)).isEqualTo(ACTIVEMQ_EMBEDDED_URL).     assertThat(loaded.containsBean("jmsListenerContainerFactory")).isTrue(). }
false;public;0;7;;@Test public void testConnectionFactoryBackOff() {     this.contextRunner.withUserConfiguration(TestConfiguration2.class).run((context) -> assertThat(context.getBean(ActiveMQConnectionFactory.class).getBrokerURL()).isEqualTo("foobar")). }
false;public;0;6;;@Test public void testJmsTemplateBackOff() {     this.contextRunner.withUserConfiguration(TestConfiguration3.class).run((context) -> assertThat(context.getBean(JmsTemplate.class).getPriority()).isEqualTo(999)). }
false;public;0;6;;@Test public void testJmsMessagingTemplateBackOff() {     this.contextRunner.withUserConfiguration(TestConfiguration5.class).run((context) -> assertThat(context.getBean(JmsMessagingTemplate.class).getDefaultDestinationName()).isEqualTo("fooBar")). }
false;public;0;7;;@Test public void testJmsTemplateBackOffEverything() {     this.contextRunner.withUserConfiguration(TestConfiguration2.class, TestConfiguration3.class, TestConfiguration5.class).run(this::testJmsTemplateBackOffEverything). }
false;private;1;10;;private void testJmsTemplateBackOffEverything(AssertableApplicationContext loaded) {     JmsTemplate jmsTemplate = loaded.getBean(JmsTemplate.class).     assertThat(jmsTemplate.getPriority()).isEqualTo(999).     assertThat(loaded.getBean(ActiveMQConnectionFactory.class).getBrokerURL()).isEqualTo("foobar").     JmsMessagingTemplate messagingTemplate = loaded.getBean(JmsMessagingTemplate.class).     assertThat(messagingTemplate.getDefaultDestinationName()).isEqualTo("fooBar").     assertThat(messagingTemplate.getJmsTemplate()).isEqualTo(jmsTemplate). }
false;public;0;7;;@Test public void testEnableJmsCreateDefaultContainerFactory() {     this.contextRunner.withUserConfiguration(EnableJmsConfiguration.class).run((context) -> assertThat(context).getBean("jmsListenerContainerFactory", JmsListenerContainerFactory.class).isExactlyInstanceOf(DefaultJmsListenerContainerFactory.class)). }
false;public;0;10;;@Test public void testJmsListenerContainerFactoryBackOff() {     this.contextRunner.withUserConfiguration(TestConfiguration6.class, EnableJmsConfiguration.class).run((context) -> assertThat(context).getBean("jmsListenerContainerFactory", JmsListenerContainerFactory.class).isExactlyInstanceOf(SimpleJmsListenerContainerFactory.class)). }
false;public;0;6;;@Test public void jmsListenerContainerFactoryWhenMultipleConnectionFactoryBeansShouldBackOff() {     this.contextRunner.withUserConfiguration(TestConfiguration10.class).run((context) -> assertThat(context).doesNotHaveBean(JmsListenerContainerFactory.class)). }
false;public;0;9;;@Test public void testJmsListenerContainerFactoryWithCustomSettings() {     this.contextRunner.withUserConfiguration(EnableJmsConfiguration.class).withPropertyValues("spring.jms.listener.autoStartup=false", "spring.jms.listener.acknowledgeMode=client", "spring.jms.listener.concurrency=2", "spring.jms.listener.maxConcurrency=10").run(this::testJmsListenerContainerFactoryWithCustomSettings). }
false;private;1;10;;private void testJmsListenerContainerFactoryWithCustomSettings(AssertableApplicationContext loaded) {     DefaultMessageListenerContainer container = getContainer(loaded, "jmsListenerContainerFactory").     assertThat(container.isAutoStartup()).isFalse().     assertThat(container.getSessionAcknowledgeMode()).isEqualTo(Session.CLIENT_ACKNOWLEDGE).     assertThat(container.getConcurrentConsumers()).isEqualTo(2).     assertThat(container.getMaxConcurrentConsumers()).isEqualTo(10). }
false;public;0;12;;@Test public void testDefaultContainerFactoryWithJtaTransactionManager() {     this.contextRunner.withUserConfiguration(TestConfiguration7.class, EnableJmsConfiguration.class).run((context) -> {         DefaultMessageListenerContainer container = getContainer(context, "jmsListenerContainerFactory").         assertThat(container.isSessionTransacted()).isFalse().         assertThat(container).hasFieldOrPropertyWithValue("transactionManager", context.getBean(JtaTransactionManager.class)).     }). }
false;public;0;11;;@Test public void testDefaultContainerFactoryNonJtaTransactionManager() {     this.contextRunner.withUserConfiguration(TestConfiguration8.class, EnableJmsConfiguration.class).run((context) -> {         DefaultMessageListenerContainer container = getContainer(context, "jmsListenerContainerFactory").         assertThat(container.isSessionTransacted()).isTrue().         assertThat(container).hasFieldOrPropertyWithValue("transactionManager", null).     }). }
false;public;0;11;;@Test public void testDefaultContainerFactoryNoTransactionManager() {     this.contextRunner.withUserConfiguration(EnableJmsConfiguration.class).run((context) -> {         DefaultMessageListenerContainer container = getContainer(context, "jmsListenerContainerFactory").         assertThat(container.isSessionTransacted()).isTrue().         assertThat(container).hasFieldOrPropertyWithValue("transactionManager", null).     }). }
false;public;0;10;;@Test public void testDefaultContainerFactoryWithMessageConverters() {     this.contextRunner.withUserConfiguration(MessageConvertersConfiguration.class, EnableJmsConfiguration.class).run((context) -> {         DefaultMessageListenerContainer container = getContainer(context, "jmsListenerContainerFactory").         assertThat(container.getMessageConverter()).isSameAs(context.getBean("myMessageConverter")).     }). }
false;public;0;14;;@Test public void testCustomContainerFactoryWithConfigurer() {     this.contextRunner.withUserConfiguration(TestConfiguration9.class, EnableJmsConfiguration.class).withPropertyValues("spring.jms.listener.autoStartup=false").run((context) -> {         DefaultMessageListenerContainer container = getContainer(context, "customListenerContainerFactory").         assertThat(container.getCacheLevel()).isEqualTo(DefaultMessageListenerContainer.CACHE_CONSUMER).         assertThat(container.isAutoStartup()).isFalse().     }). }
false;private;2;8;;private DefaultMessageListenerContainer getContainer(AssertableApplicationContext loaded, String name) {     JmsListenerContainerFactory<?> factory = loaded.getBean(name, JmsListenerContainerFactory.class).     assertThat(factory).isInstanceOf(DefaultJmsListenerContainerFactory.class).     return ((DefaultJmsListenerContainerFactory) factory).createListenerContainer(mock(JmsListenerEndpoint.class)). }
false;public;0;9;;@Test public void testJmsTemplateWithMessageConverter() {     this.contextRunner.withUserConfiguration(MessageConvertersConfiguration.class).run((context) -> {         JmsTemplate jmsTemplate = context.getBean(JmsTemplate.class).         assertThat(jmsTemplate.getMessageConverter()).isSameAs(context.getBean("myMessageConverter")).     }). }
false;public;0;7;;@Test public void testJmsTemplateWithDestinationResolver() {     this.contextRunner.withUserConfiguration(DestinationResolversConfiguration.class).run((context) -> assertThat(context.getBean(JmsTemplate.class).getDestinationResolver()).isSameAs(context.getBean("myDestinationResolver"))). }
false;public;0;24;;@Test public void testJmsTemplateFullCustomization() {     this.contextRunner.withUserConfiguration(MessageConvertersConfiguration.class).withPropertyValues("spring.jms.template.default-destination=testQueue", "spring.jms.template.delivery-delay=500", "spring.jms.template.delivery-mode=non-persistent", "spring.jms.template.priority=6", "spring.jms.template.time-to-live=6000", "spring.jms.template.receive-timeout=2000").run((context) -> {         JmsTemplate jmsTemplate = context.getBean(JmsTemplate.class).         assertThat(jmsTemplate.getMessageConverter()).isSameAs(context.getBean("myMessageConverter")).         assertThat(jmsTemplate.isPubSubDomain()).isFalse().         assertThat(jmsTemplate.getDefaultDestinationName()).isEqualTo("testQueue").         assertThat(jmsTemplate.getDeliveryDelay()).isEqualTo(500).         assertThat(jmsTemplate.getDeliveryMode()).isEqualTo(1).         assertThat(jmsTemplate.getPriority()).isEqualTo(6).         assertThat(jmsTemplate.getTimeToLive()).isEqualTo(6000).         assertThat(jmsTemplate.isExplicitQosEnabled()).isTrue().         assertThat(jmsTemplate.getReceiveTimeout()).isEqualTo(2000).     }). }
false;public;0;6;;@Test public void testPubSubDisabledByDefault() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).run((context) -> assertThat(context.getBean(JmsTemplate.class).isPubSubDomain()).isFalse()). }
false;public;0;6;;@Test public void testJmsTemplatePostProcessedSoThatPubSubIsTrue() {     this.contextRunner.withUserConfiguration(TestConfiguration4.class).run((context) -> assertThat(context.getBean(JmsTemplate.class).isPubSubDomain()).isTrue()). }
false;public;0;12;;@Test public void testPubSubDomainActive() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.jms.pubSubDomain:true").run((context) -> {         JmsTemplate jmsTemplate = context.getBean(JmsTemplate.class).         DefaultMessageListenerContainer defaultMessageListenerContainer = context.getBean(DefaultJmsListenerContainerFactory.class).createListenerContainer(mock(JmsListenerEndpoint.class)).         assertThat(jmsTemplate.isPubSubDomain()).isTrue().         assertThat(defaultMessageListenerContainer.isPubSubDomain()).isTrue().     }). }
false;public;0;14;;@Test public void testPubSubDomainOverride() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.jms.pubSubDomain:false").run((context) -> {         assertThat(context).hasSingleBean(JmsTemplate.class).         assertThat(context).hasSingleBean(ConnectionFactory.class).         JmsTemplate jmsTemplate = context.getBean(JmsTemplate.class).         ConnectionFactory factory = context.getBean(ConnectionFactory.class).         assertThat(jmsTemplate).isNotNull().         assertThat(jmsTemplate.isPubSubDomain()).isFalse().         assertThat(factory).isNotNull().isEqualTo(jmsTemplate.getConnectionFactory()).     }). }
false;public;0;13;;@Test public void testActiveMQOverriddenStandalone() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.activemq.inMemory:false").run((context) -> {         assertThat(context).hasSingleBean(JmsTemplate.class).         assertThat(context).hasSingleBean(CachingConnectionFactory.class).         JmsTemplate jmsTemplate = context.getBean(JmsTemplate.class).         ConnectionFactory factory = context.getBean(ConnectionFactory.class).         assertThat(factory).isEqualTo(jmsTemplate.getConnectionFactory()).         assertThat(getBrokerUrl((CachingConnectionFactory) factory)).isEqualTo(ACTIVEMQ_NETWORK_URL).     }). }
false;public;0;14;;@Test public void testActiveMQOverriddenRemoteHost() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.activemq.brokerUrl:tcp://remote-host:10000").run((context) -> {         assertThat(context).hasSingleBean(JmsTemplate.class).         assertThat(context).hasSingleBean(CachingConnectionFactory.class).         JmsTemplate jmsTemplate = context.getBean(JmsTemplate.class).         ConnectionFactory factory = context.getBean(ConnectionFactory.class).         assertThat(factory).isEqualTo(jmsTemplate.getConnectionFactory()).         assertThat(getBrokerUrl((CachingConnectionFactory) factory)).isEqualTo("tcp://remote-host:10000").     }). }
false;private;1;6;;private String getBrokerUrl(CachingConnectionFactory connectionFactory) {     assertThat(connectionFactory.getTargetConnectionFactory()).isInstanceOf(ActiveMQConnectionFactory.class).     return ((ActiveMQConnectionFactory) connectionFactory.getTargetConnectionFactory()).getBrokerURL(). }
false;public;0;16;;@Test public void testActiveMQOverriddenPool() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.activemq.pool.enabled:true").run((context) -> {         JmsTemplate jmsTemplate = context.getBean(JmsTemplate.class).         JmsPoolConnectionFactory pool = context.getBean(JmsPoolConnectionFactory.class).         assertThat(jmsTemplate).isNotNull().         assertThat(pool).isNotNull().         assertThat(pool).isEqualTo(jmsTemplate.getConnectionFactory()).         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory) pool.getConnectionFactory().         assertThat(factory.getBrokerURL()).isEqualTo(ACTIVEMQ_EMBEDDED_URL).     }). }
false;public;0;17;;@Test public void testActiveMQOverriddenPoolAndStandalone() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.activemq.pool.enabled:true", "spring.activemq.inMemory:false").run((context) -> {         JmsTemplate jmsTemplate = context.getBean(JmsTemplate.class).         JmsPoolConnectionFactory pool = context.getBean(JmsPoolConnectionFactory.class).         assertThat(jmsTemplate).isNotNull().         assertThat(pool).isNotNull().         assertThat(pool).isEqualTo(jmsTemplate.getConnectionFactory()).         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory) pool.getConnectionFactory().         assertThat(factory.getBrokerURL()).isEqualTo(ACTIVEMQ_NETWORK_URL).     }). }
false;public;0;18;;@Test public void testActiveMQOverriddenPoolAndRemoteServer() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.activemq.pool.enabled:true", "spring.activemq.brokerUrl:tcp://remote-host:10000").run((context) -> {         JmsTemplate jmsTemplate = context.getBean(JmsTemplate.class).         JmsPoolConnectionFactory pool = context.getBean(JmsPoolConnectionFactory.class).         assertThat(jmsTemplate).isNotNull().         assertThat(pool).isNotNull().         assertThat(pool).isEqualTo(jmsTemplate.getConnectionFactory()).         ActiveMQConnectionFactory factory = (ActiveMQConnectionFactory) pool.getConnectionFactory().         assertThat(factory.getBrokerURL()).isEqualTo("tcp://remote-host:10000").     }). }
false;public;0;8;;@Test public void enableJmsAutomatically() {     this.contextRunner.withUserConfiguration(NoEnableJmsConfiguration.class).run((context) -> assertThat(context).hasBean(JmsListenerConfigUtils.JMS_LISTENER_ANNOTATION_PROCESSOR_BEAN_NAME).hasBean(JmsListenerConfigUtils.JMS_LISTENER_ENDPOINT_REGISTRY_BEAN_NAME)). }
false;;0;8;;@Bean ConnectionFactory connectionFactory() {     return new ActiveMQConnectionFactory() {          {             setBrokerURL("foobar").         }     }. }
false;;1;6;;@Bean JmsTemplate jmsTemplate(ConnectionFactory connectionFactory) {     JmsTemplate jmsTemplate = new JmsTemplate(connectionFactory).     jmsTemplate.setPriority(999).     return jmsTemplate. }
false;public;2;9;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     if (bean.getClass().isAssignableFrom(JmsTemplate.class)) {         JmsTemplate jmsTemplate = (JmsTemplate) bean.         jmsTemplate.setPubSubDomain(true).     }     return bean. }
false;public;2;5;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     return bean. }
false;;1;7;;@Bean JmsMessagingTemplate jmsMessagingTemplate(JmsTemplate jmsTemplate) {     JmsMessagingTemplate messagingTemplate = new JmsMessagingTemplate(jmsTemplate).     messagingTemplate.setDefaultDestinationName("fooBar").     return messagingTemplate. }
false;;1;7;;@Bean JmsListenerContainerFactory<?> jmsListenerContainerFactory(ConnectionFactory connectionFactory) {     SimpleJmsListenerContainerFactory factory = new SimpleJmsListenerContainerFactory().     factory.setConnectionFactory(connectionFactory).     return factory. }
false;;0;4;;@Bean JtaTransactionManager transactionManager() {     return mock(JtaTransactionManager.class). }
false;;0;4;;@Bean DataSourceTransactionManager transactionManager() {     return mock(DataSourceTransactionManager.class). }
false;public;0;5;;@Bean @Primary public MessageConverter myMessageConverter() {     return mock(MessageConverter.class). }
false;public;0;4;;@Bean public MessageConverter anotherMessageConverter() {     return mock(MessageConverter.class). }
false;public;0;5;;@Bean @Primary public DestinationResolver myDestinationResolver() {     return mock(DestinationResolver.class). }
false;public;0;4;;@Bean public DestinationResolver anotherDestinationResolver() {     return mock(DestinationResolver.class). }
false;;2;10;;@Bean JmsListenerContainerFactory<?> customListenerContainerFactory(DefaultJmsListenerContainerFactoryConfigurer configurer, ConnectionFactory connectionFactory) {     DefaultJmsListenerContainerFactory factory = new DefaultJmsListenerContainerFactory().     configurer.configure(factory, connectionFactory).     factory.setCacheLevel(DefaultMessageListenerContainer.CACHE_CONSUMER).     return factory. }
false;public;0;4;;@Bean public ConnectionFactory connectionFactory1() {     return new ActiveMQConnectionFactory(). }
false;public;0;4;;@Bean public ConnectionFactory connectionFactory2() {     return new ActiveMQConnectionFactory(). }
