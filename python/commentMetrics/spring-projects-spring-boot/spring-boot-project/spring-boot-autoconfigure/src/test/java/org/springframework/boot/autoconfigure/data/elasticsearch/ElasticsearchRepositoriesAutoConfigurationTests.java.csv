commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void close() {     this.context.close(). }
false;public;0;7;;@Test public void testDefaultRepositoryConfiguration() {     load(TestConfiguration.class).     assertThat(this.context.getBean(CityRepository.class)).isNotNull().     assertThat(this.context.getBean(Client.class)).isNotNull(). }
false;public;0;5;;@Test public void testNoRepositoryConfiguration() {     load(EmptyConfiguration.class).     assertThat(this.context.getBean(Client.class)).isNotNull(). }
false;public;0;5;;@Test public void doesNotTriggerDefaultRepositoryDetectionIfCustomized() {     load(CustomizedConfiguration.class).     assertThat(this.context.getBean(CityElasticsearchDbRepository.class)).isNotNull(). }
false;private;1;9;;private void load(Class<?> config) {     this.context = new AnnotationConfigApplicationContext().     addElasticsearchProperties(this.context).     this.context.register(config, ElasticsearchAutoConfiguration.class, ElasticsearchRepositoriesAutoConfiguration.class, ElasticsearchDataAutoConfiguration.class, PropertyPlaceholderAutoConfiguration.class).     this.context.refresh(). }
false;private;1;6;;private void addElasticsearchProperties(AnnotationConfigApplicationContext context) {     TestPropertyValues.of("spring.data.elasticsearch.cluster-nodes:localhost:" + elasticsearch.getMappedTransportPort(), "spring.data.elasticsearch.cluster-name:docker-cluster").applyTo(context). }
