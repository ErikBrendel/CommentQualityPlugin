commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void defaultConfiguration() {     this.contextRunner.run((context) -> assertThat(context).hasSingleBean(ServletRegistrationBean.class)). }
false;public;0;7;;@Test public void customPathMustBeginWithASlash() {     this.contextRunner.withPropertyValues("spring.webservices.path=invalid").run((context) -> assertThat(context).getFailure().isInstanceOf(BeanCreationException.class).hasMessageContaining("Failed to bind properties under 'spring.webservices'")). }
false;public;0;5;;@Test public void customPath() {     this.contextRunner.withPropertyValues("spring.webservices.path=/valid").run((context) -> assertThat(getUrlMappings(context)).contains("/valid/*")). }
false;public;0;5;;@Test public void customPathWithTrailingSlash() {     this.contextRunner.withPropertyValues("spring.webservices.path=/valid/").run((context) -> assertThat(getUrlMappings(context)).contains("/valid/*")). }
false;public;0;11;;@Test public void customLoadOnStartup() {     this.contextRunner.withPropertyValues("spring.webservices.servlet.load-on-startup=1").run((context) -> {         ServletRegistrationBean<?> registrationBean = context.getBean(ServletRegistrationBean.class).         assertThat(ReflectionTestUtils.getField(registrationBean, "loadOnStartup")).isEqualTo(1).     }). }
false;public;0;10;;@Test public void customInitParameters() {     this.contextRunner.withPropertyValues("spring.webservices.servlet.init.key1=value1", "spring.webservices.servlet.init.key2=value2").run((context) -> assertThat(getServletRegistrationBean(context).getInitParameters()).containsEntry("key1", "value1").containsEntry("key2", "value2")). }
false;public;0;11;;@Test public void withWsdlBeans() {     this.contextRunner.withPropertyValues("spring.webservices.wsdl-locations=classpath:/wsdl").run((context) -> {         assertThat(context.getBeansOfType(SimpleWsdl11Definition.class)).containsOnlyKeys("service").         assertThat(context.getBeansOfType(SimpleXsdSchema.class)).containsOnlyKeys("types").     }). }
false;public;0;12;;@Test public void withWsdlBeansAsList() {     this.contextRunner.withPropertyValues("spring.webservices.wsdl-locations[0]=classpath:/wsdl").run((context) -> {         assertThat(context.getBeansOfType(SimpleWsdl11Definition.class)).containsOnlyKeys("service").         assertThat(context.getBeansOfType(SimpleXsdSchema.class)).containsOnlyKeys("types").     }). }
false;private;1;3;;private Collection<String> getUrlMappings(ApplicationContext context) {     return getServletRegistrationBean(context).getUrlMappings(). }
false;private;1;4;;private ServletRegistrationBean<?> getServletRegistrationBean(ApplicationContext loaded) {     return loaded.getBean(ServletRegistrationBean.class). }
