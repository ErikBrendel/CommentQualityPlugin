commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     List<Transport> transports = Arrays.asList(new WebSocketTransport(new StandardWebSocketClient(new WsWebSocketContainer())), new RestTemplateXhrTransport(new RestTemplate())).     this.sockJsClient = new SockJsClient(transports). }
false;public;0;5;;@After public void tearDown() {     this.context.close().     this.sockJsClient.stop(). }
false;public;0;6;;@Test public void basicMessagingWithJsonResponse() throws Throwable {     Object result = performStompSubscription("/app/json").     assertThat(new String((byte[]) result)).isEqualTo(String.format("{%n  \"foo\" : 5,%n  \"bar\" : \"baz\"%n}")). }
false;public;0;5;;@Test public void basicMessagingWithStringResponse() throws Throwable {     Object result = performStompSubscription("/app/string").     assertThat(new String((byte[]) result)).isEqualTo("string data"). }
false;public;0;12;;@Test public void customizedConverterTypesMatchDefaultConverterTypes() {     List<MessageConverter> customizedConverters = getCustomizedConverters().     List<MessageConverter> defaultConverters = getDefaultConverters().     assertThat(customizedConverters.size()).isEqualTo(defaultConverters.size()).     Iterator<MessageConverter> customizedIterator = customizedConverters.iterator().     Iterator<MessageConverter> defaultIterator = defaultConverters.iterator().     while (customizedIterator.hasNext()) {         assertThat(customizedIterator.next()).isInstanceOf(defaultIterator.next().getClass()).     } }
false;private;0;7;;private List<MessageConverter> getCustomizedConverters() {     List<MessageConverter> customizedConverters = new ArrayList<>().     WebSocketMessagingAutoConfiguration.WebSocketMessageConverterConfiguration configuration = new WebSocketMessagingAutoConfiguration.WebSocketMessageConverterConfiguration(new ObjectMapper()).     configuration.configureMessageConverters(customizedConverters).     return customizedConverters. }
false;private;0;7;;@SuppressWarnings("unchecked") private List<MessageConverter> getDefaultConverters() {     CompositeMessageConverter compositeDefaultConverter = new DelegatingWebSocketMessageBrokerConfiguration().brokerMessageConverter().     return (List<MessageConverter>) ReflectionTestUtils.getField(compositeDefaultConverter, "converters"). }
false;public;2;5;;@Override public void handleFrame(StompHeaders headers, Object payload) {     result.set(payload).     latch.countDown(). }
false;public;1;4;;@Override public Type getPayloadType(StompHeaders headers) {     return Object.class. }
false;public;2;18;;@Override public void afterConnected(StompSession session, StompHeaders connectedHeaders) {     session.subscribe(topic, new StompFrameHandler() {          @Override         public void handleFrame(StompHeaders headers, Object payload) {             result.set(payload).             latch.countDown().         }          @Override         public Type getPayloadType(StompHeaders headers) {             return Object.class.         }     }). }
false;public;2;4;;@Override public void handleFrame(StompHeaders headers, Object payload) {     latch.countDown(). }
false;public;5;6;;@Override public void handleException(StompSession session, StompCommand command, StompHeaders headers, byte[] payload, Throwable exception) {     failure.set(exception).     latch.countDown(). }
false;public;2;5;;@Override public void handleTransportError(StompSession session, Throwable exception) {     failure.set(exception).     latch.countDown(). }
false;private;1;64;;private Object performStompSubscription(String topic) throws Throwable {     TestPropertyValues.of("server.port:0", "spring.jackson.serialization.indent-output:true").applyTo(this.context).     this.context.register(WebSocketMessagingConfiguration.class).     new ServerPortInfoApplicationContextInitializer().initialize(this.context).     this.context.refresh().     WebSocketStompClient stompClient = new WebSocketStompClient(this.sockJsClient).     final AtomicReference<Throwable> failure = new AtomicReference<>().     final AtomicReference<Object> result = new AtomicReference<>().     final CountDownLatch latch = new CountDownLatch(1).     StompSessionHandler handler = new StompSessionHandlerAdapter() {          @Override         public void afterConnected(StompSession session, StompHeaders connectedHeaders) {             session.subscribe(topic, new StompFrameHandler() {                  @Override                 public void handleFrame(StompHeaders headers, Object payload) {                     result.set(payload).                     latch.countDown().                 }                  @Override                 public Type getPayloadType(StompHeaders headers) {                     return Object.class.                 }             }).         }          @Override         public void handleFrame(StompHeaders headers, Object payload) {             latch.countDown().         }          @Override         public void handleException(StompSession session, StompCommand command, StompHeaders headers, byte[] payload, Throwable exception) {             failure.set(exception).             latch.countDown().         }          @Override         public void handleTransportError(StompSession session, Throwable exception) {             failure.set(exception).             latch.countDown().         }     }.     stompClient.setMessageConverter(new SimpleMessageConverter()).     stompClient.connect("ws://localhost:{port}/messaging", handler, this.context.getEnvironment().getProperty("local.server.port")).     if (!latch.await(30000, TimeUnit.SECONDS)) {         if (failure.get() != null) {             throw failure.get().         }         fail("Response was not received within 30 seconds").     }     return result.get(). }
false;public;1;4;;@Override public void registerStompEndpoints(StompEndpointRegistry registry) {     registry.addEndpoint("/messaging").withSockJS(). }
false;public;1;4;;@Override public void configureMessageBroker(MessageBrokerRegistry registry) {     registry.setApplicationDestinationPrefixes("/app"). }
false;public;0;4;;@Bean public MessagingController messagingController() {     return new MessagingController(). }
false;public;0;4;;@Bean public TomcatServletWebServerFactory tomcat() {     return new TomcatServletWebServerFactory(0). }
false;public;0;4;;@Bean public TomcatWebSocketServletWebServerCustomizer tomcatCustomizer() {     return new TomcatWebSocketServletWebServerCustomizer(). }
false;;0;4;;@SubscribeMapping("/json") Data json() {     return new Data(5, "baz"). }
false;;0;4;;@SubscribeMapping("/string") String string() {     return "string data". }
false;public;0;3;;public int getFoo() {     return this.foo. }
false;public;0;3;;public String getBar() {     return this.bar. }
