commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void withNoDataSource() {     this.contextRunner.run((context) -> {         assertThat(context).hasSingleBean(Scheduler.class).         Scheduler scheduler = context.getBean(Scheduler.class).         assertThat(scheduler.getMetaData().getJobStoreClass()).isAssignableFrom(RAMJobStore.class).     }). }
false;public;0;13;;@Test public void withDataSourceUseMemoryByDefault() {     this.contextRunner.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class, DataSourceTransactionManagerAutoConfiguration.class)).run((context) -> {         assertThat(context).hasSingleBean(Scheduler.class).         Scheduler scheduler = context.getBean(Scheduler.class).         assertThat(scheduler.getMetaData().getJobStoreClass()).isAssignableFrom(RAMJobStore.class).     }). }
false;public;0;9;;@Test public void withDataSource() {     this.contextRunner.withUserConfiguration(QuartzJobsConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class, DataSourceTransactionManagerAutoConfiguration.class)).withPropertyValues("spring.quartz.job-store-type=jdbc").run(assertDataSourceJobStore("dataSource")). }
false;public;0;8;;@Test public void withDataSourceNoTransactionManager() {     this.contextRunner.withUserConfiguration(QuartzJobsConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).withPropertyValues("spring.quartz.job-store-type=jdbc").run(assertDataSourceJobStore("dataSource")). }
false;public;0;8;;@Test public void dataSourceWithQuartzDataSourceQualifierUsedWhenMultiplePresent() {     this.contextRunner.withUserConfiguration(QuartzJobsConfiguration.class, MultipleDataSourceConfiguration.class).withPropertyValues("spring.quartz.job-store-type=jdbc").run(assertDataSourceJobStore("quartzDataSource")). }
false;private;1;16;;private ContextConsumer<AssertableApplicationContext> assertDataSourceJobStore(String datasourceName) {     return (context) -> {         assertThat(context).hasSingleBean(Scheduler.class).         Scheduler scheduler = context.getBean(Scheduler.class).         assertThat(scheduler.getMetaData().getJobStoreClass()).isAssignableFrom(LocalDataSourceJobStore.class).         JdbcTemplate jdbcTemplate = new JdbcTemplate(context.getBean(datasourceName, DataSource.class)).         assertThat(jdbcTemplate.queryForObject("SELECT COUNT(*) FROM QRTZ_JOB_DETAILS", Integer.class)).isEqualTo(2).         assertThat(jdbcTemplate.queryForObject("SELECT COUNT(*) FROM QRTZ_SIMPLE_TRIGGERS", Integer.class)).isEqualTo(0).     }. }
false;public;0;13;;@Test public void withTaskExecutor() {     this.contextRunner.withUserConfiguration(MockExecutorConfiguration.class).withPropertyValues("spring.quartz.properties.org.quartz.threadPool.threadCount=50").run((context) -> {         assertThat(context).hasSingleBean(Scheduler.class).         Scheduler scheduler = context.getBean(Scheduler.class).         assertThat(scheduler.getMetaData().getThreadPoolSize()).isEqualTo(50).         Executor executor = context.getBean(Executor.class).         verifyZeroInteractions(executor).     }). }
false;public;0;14;;@Test public void withOverwriteExistingJobs() {     this.contextRunner.withUserConfiguration(OverwriteTriggerConfiguration.class).withPropertyValues("spring.quartz.overwrite-existing-jobs=true").run((context) -> {         assertThat(context).hasSingleBean(Scheduler.class).         Scheduler scheduler = context.getBean(Scheduler.class).         Trigger fooTrigger = scheduler.getTrigger(TriggerKey.triggerKey("fooTrigger")).         assertThat(fooTrigger).isNotNull().         assertThat(((SimpleTrigger) fooTrigger).getRepeatInterval()).isEqualTo(30000).     }). }
false;public;0;17;;@Test public void withConfiguredJobAndTrigger() {     this.contextRunner.withUserConfiguration(QuartzFullConfiguration.class).withPropertyValues("test-name=withConfiguredJobAndTrigger").run((context) -> {         assertThat(context).hasSingleBean(Scheduler.class).         Scheduler scheduler = context.getBean(Scheduler.class).         assertThat(scheduler.getJobDetail(JobKey.jobKey("fooJob"))).isNotNull().         assertThat(scheduler.getTrigger(TriggerKey.triggerKey("fooTrigger"))).isNotNull().         Thread.sleep(1000L).         assertThat(this.output.toString()).contains("withConfiguredJobAndTrigger").         assertThat(this.output.toString()).contains("jobDataValue").     }). }
false;public;0;10;;@Test public void withConfiguredCalendars() {     this.contextRunner.withUserConfiguration(QuartzCalendarsConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(Scheduler.class).         Scheduler scheduler = context.getBean(Scheduler.class).         assertThat(scheduler.getCalendar("weekly")).isNotNull().         assertThat(scheduler.getCalendar("monthly")).isNotNull().     }). }
false;public;0;11;;@Test public void withQuartzProperties() {     this.contextRunner.withPropertyValues("spring.quartz.properties.org.quartz.scheduler.instanceId=FOO").run((context) -> {         assertThat(context).hasSingleBean(Scheduler.class).         Scheduler scheduler = context.getBean(Scheduler.class).         assertThat(scheduler.getSchedulerInstanceId()).isEqualTo("FOO").     }). }
false;public;0;9;;@Test public void withCustomizer() {     this.contextRunner.withUserConfiguration(QuartzCustomConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(Scheduler.class).         Scheduler scheduler = context.getBean(Scheduler.class).         assertThat(scheduler.getSchedulerName()).isEqualTo("fooScheduler").     }). }
false;public;0;23;;@Test public void validateDefaultProperties() {     this.contextRunner.withUserConfiguration(ManualSchedulerConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(SchedulerFactoryBean.class).         SchedulerFactoryBean schedulerFactory = context.getBean(SchedulerFactoryBean.class).         QuartzProperties properties = new QuartzProperties().         assertThat(properties.isAutoStartup()).isEqualTo(schedulerFactory.isAutoStartup()).         assertThat(schedulerFactory).hasFieldOrPropertyWithValue("startupDelay", (int) properties.getStartupDelay().getSeconds()).         assertThat(schedulerFactory).hasFieldOrPropertyWithValue("waitForJobsToCompleteOnShutdown", properties.isWaitForJobsToCompleteOnShutdown()).         assertThat(schedulerFactory).hasFieldOrPropertyWithValue("overwriteExistingJobs", properties.isOverwriteExistingJobs()).     }). }
false;public;0;18;;@Test public void withCustomConfiguration() {     this.contextRunner.withPropertyValues("spring.quartz.auto-startup=false", "spring.quartz.startup-delay=1m", "spring.quartz.wait-for-jobs-to-complete-on-shutdown=true", "spring.quartz.overwrite-existing-jobs=true").run((context) -> {         assertThat(context).hasSingleBean(SchedulerFactoryBean.class).         SchedulerFactoryBean schedulerFactory = context.getBean(SchedulerFactoryBean.class).         assertThat(schedulerFactory.isAutoStartup()).isFalse().         assertThat(schedulerFactory).hasFieldOrPropertyWithValue("startupDelay", 60).         assertThat(schedulerFactory).hasFieldOrPropertyWithValue("waitForJobsToCompleteOnShutdown", true).         assertThat(schedulerFactory).hasFieldOrPropertyWithValue("overwriteExistingJobs", true).     }). }
false;public;0;6;;@Test public void schedulerNameWithDedicatedProperty() {     this.contextRunner.withPropertyValues("spring.quartz.scheduler-name=testScheduler").run(assertSchedulerName("testScheduler")). }
false;public;0;6;;@Test public void schedulerNameWithQuartzProperty() {     this.contextRunner.withPropertyValues("spring.quartz.properties.org.quartz.scheduler.instanceName=testScheduler").run(assertSchedulerName("testScheduler")). }
false;public;0;7;;@Test public void schedulerNameWithDedicatedPropertyTakesPrecedence() {     this.contextRunner.withPropertyValues("spring.quartz.scheduler-name=specificTestScheduler", "spring.quartz.properties.org.quartz.scheduler.instanceName=testScheduler").run(assertSchedulerName("specificTestScheduler")). }
false;public;0;5;;@Test public void schedulerNameUseBeanNameByDefault() {     this.contextRunner.withPropertyValues().run(assertSchedulerName("quartzScheduler")). }
false;private;1;10;;private ContextConsumer<AssertableApplicationContext> assertSchedulerName(String schedulerName) {     return (context) -> {         assertThat(context).hasSingleBean(SchedulerFactoryBean.class).         SchedulerFactoryBean schedulerFactory = context.getBean(SchedulerFactoryBean.class).         assertThat(schedulerFactory).hasFieldOrPropertyWithValue("schedulerName", schedulerName).     }. }
false;public;0;5;;@Bean public JobDetail fooJob() {     return JobBuilder.newJob().ofType(FooJob.class).withIdentity("fooJob").storeDurably().build(). }
false;public;0;5;;@Bean public JobDetail barJob() {     return JobBuilder.newJob().ofType(FooJob.class).withIdentity("barJob").storeDurably().build(). }
false;public;0;5;;@Bean public JobDetail fooJob() {     return JobBuilder.newJob().ofType(FooJob.class).withIdentity("fooJob").usingJobData("jobDataKey", "jobDataValue").storeDurably().build(). }
false;public;0;8;;@Bean public Trigger fooTrigger() {     SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(10).repeatForever().     return TriggerBuilder.newTrigger().forJob(fooJob()).withIdentity("fooTrigger").withSchedule(scheduleBuilder).build(). }
false;public;1;8;;@Bean public Trigger anotherFooTrigger(JobDetail fooJob) {     SimpleScheduleBuilder scheduleBuilder = SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(30).repeatForever().     return TriggerBuilder.newTrigger().forJob(fooJob).withIdentity("fooTrigger").withSchedule(scheduleBuilder).build(). }
false;public;0;4;;@Bean public Calendar weekly() {     return new WeeklyCalendar(). }
false;public;0;4;;@Bean public Calendar monthly() {     return new MonthlyCalendar(). }
false;public;0;4;;@Bean public Executor executor() {     return mock(Executor.class). }
false;public;0;5;;@Bean public SchedulerFactoryBeanCustomizer customizer() {     return (schedulerFactoryBean) -> schedulerFactoryBean.setSchedulerName("fooScheduler"). }
false;public;0;4;;@Bean public SchedulerFactoryBean quartzScheduler() {     return new SchedulerFactoryBean(). }
false;public;0;5;;@Bean @Primary public DataSource applicationDataSource() throws Exception {     return createTestDataSource(). }
false;public;0;5;;@QuartzDataSource @Bean public DataSource quartzDataSource() throws Exception {     return createTestDataSource(). }
false;private;0;6;;private DataSource createTestDataSource() throws Exception {     DataSourceProperties properties = new DataSourceProperties().     properties.setGenerateUniqueName(true).     properties.afterPropertiesSet().     return properties.initializeDataSourceBuilder().build(). }
false;protected;1;5;;@Override protected void executeInternal(JobExecutionContext context) {     System.out.println(this.env.getProperty("test-name", "unknown") + " - " + this.jobDataKey). }
false;public;1;3;;public void setJobDataKey(String jobDataKey) {     this.jobDataKey = jobDataKey. }
