commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;7;;@Test public void defaultConfiguration() {     load(EmptyConfiguration.class).     CharacterEncodingFilter filter = this.context.getBean(CharacterEncodingFilter.class).     assertCharacterEncodingFilter(filter, "UTF-8", true, false). }
false;public;0;6;;@Test public void disableConfiguration() {     load(EmptyConfiguration.class, "spring.http.encoding.enabled:false").     assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.context.getBean(CharacterEncodingFilter.class)). }
false;public;0;8;;@Test public void customConfiguration() {     load(EmptyConfiguration.class, "spring.http.encoding.charset:ISO-8859-15", "spring.http.encoding.force:false").     CharacterEncodingFilter filter = this.context.getBean(CharacterEncodingFilter.class).     assertCharacterEncodingFilter(filter, "ISO-8859-15", false, false). }
false;public;0;8;;@Test public void customFilterConfiguration() {     load(FilterConfiguration.class, "spring.http.encoding.charset:ISO-8859-15", "spring.http.encoding.force:false").     CharacterEncodingFilter filter = this.context.getBean(CharacterEncodingFilter.class).     assertCharacterEncodingFilter(filter, "US-ASCII", false, false). }
false;public;0;7;;@Test public void forceRequest() {     load(EmptyConfiguration.class, "spring.http.encoding.force-request:false").     CharacterEncodingFilter filter = this.context.getBean(CharacterEncodingFilter.class).     assertCharacterEncodingFilter(filter, "UTF-8", false, false). }
false;public;0;7;;@Test public void forceResponse() {     load(EmptyConfiguration.class, "spring.http.encoding.force-response:true").     CharacterEncodingFilter filter = this.context.getBean(CharacterEncodingFilter.class).     assertCharacterEncodingFilter(filter, "UTF-8", true, true). }
false;public;0;8;;@Test public void forceRequestOverridesForce() {     load(EmptyConfiguration.class, "spring.http.encoding.force:true", "spring.http.encoding.force-request:false").     CharacterEncodingFilter filter = this.context.getBean(CharacterEncodingFilter.class).     assertCharacterEncodingFilter(filter, "UTF-8", false, true). }
false;public;0;8;;@Test public void forceResponseOverridesForce() {     load(EmptyConfiguration.class, "spring.http.encoding.force:true", "spring.http.encoding.force-response:false").     CharacterEncodingFilter filter = this.context.getBean(CharacterEncodingFilter.class).     assertCharacterEncodingFilter(filter, "UTF-8", true, false). }
false;public;0;9;;@Test public void filterIsOrderedHighest() {     load(OrderedConfiguration.class).     List<Filter> beans = new ArrayList<>(this.context.getBeansOfType(Filter.class).values()).     AnnotationAwareOrderComparator.sort(beans).     assertThat(beans.get(0)).isInstanceOf(CharacterEncodingFilter.class).     assertThat(beans.get(1)).isInstanceOf(HiddenHttpMethodFilter.class). }
false;public;0;8;;@Test public void noLocaleCharsetMapping() {     load(EmptyConfiguration.class).     Map<String, WebServerFactoryCustomizer<?>> beans = getWebServerFactoryCustomizerBeans().     assertThat(beans.size()).isEqualTo(1).     assertThat(this.context.getBean(MockServletWebServerFactory.class).getLocaleCharsetMappings()).isEmpty(). }
false;public;0;15;;@Test public void customLocaleCharsetMappings() {     load(EmptyConfiguration.class, "spring.http.encoding.mapping.en:UTF-8", "spring.http.encoding.mapping.fr_FR:UTF-8").     Map<String, WebServerFactoryCustomizer<?>> beans = getWebServerFactoryCustomizerBeans().     assertThat(beans.size()).isEqualTo(1).     assertThat(this.context.getBean(MockServletWebServerFactory.class).getLocaleCharsetMappings().size()).isEqualTo(2).     assertThat(this.context.getBean(MockServletWebServerFactory.class).getLocaleCharsetMappings().get(Locale.ENGLISH)).isEqualTo(StandardCharsets.UTF_8).     assertThat(this.context.getBean(MockServletWebServerFactory.class).getLocaleCharsetMappings().get(Locale.FRANCE)).isEqualTo(StandardCharsets.UTF_8). }
false;private;0;4;;@SuppressWarnings({ "unchecked", "rawtypes" }) private Map<String, WebServerFactoryCustomizer<?>> getWebServerFactoryCustomizerBeans() {     return (Map) this.context.getBeansOfType(WebServerFactoryCustomizer.class). }
false;private;4;7;;private void assertCharacterEncodingFilter(CharacterEncodingFilter actual, String encoding, boolean forceRequestEncoding, boolean forceResponseEncoding) {     assertThat(actual.getEncoding()).isEqualTo(encoding).     assertThat(actual.isForceRequestEncoding()).isEqualTo(forceRequestEncoding).     assertThat(actual.isForceResponseEncoding()).isEqualTo(forceResponseEncoding). }
false;private;2;3;;private void load(Class<?> config, String... environment) {     this.context = doLoad(new Class<?>[] { config }, environment). }
false;private;2;11;;private AnnotationConfigWebApplicationContext doLoad(Class<?>[] configs, String... environment) {     AnnotationConfigWebApplicationContext applicationContext = new AnnotationConfigWebApplicationContext().     TestPropertyValues.of(environment).applyTo(applicationContext).     applicationContext.register(configs).     applicationContext.register(MinimalWebAutoConfiguration.class, HttpEncodingAutoConfiguration.class).     applicationContext.setServletContext(new MockServletContext()).     applicationContext.refresh().     return applicationContext. }
false;public;0;7;;@Bean public CharacterEncodingFilter myCharacterEncodingFilter() {     CharacterEncodingFilter filter = new CharacterEncodingFilter().     filter.setEncoding("US-ASCII").     filter.setForceEncoding(false).     return filter. }
false;public;0;4;;@Bean public OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {     return new OrderedHiddenHttpMethodFilter(). }
false;public;0;4;;@Bean public OrderedFormContentFilter formContentFilter() {     return new OrderedFormContentFilter(). }
false;public;0;4;;@Bean public MockServletWebServerFactory MockServletWebServerFactory() {     return new MockServletWebServerFactory(). }
false;public;0;4;;@Bean public WebServerFactoryCustomizerBeanPostProcessor ServletWebServerCustomizerBeanPostProcessor() {     return new WebServerFactoryCustomizerBeanPostProcessor(). }
