commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.importSelector.setBeanFactory(this.beanFactory).     this.importSelector.setEnvironment(this.environment).     this.importSelector.setResourceLoader(new DefaultResourceLoader()). }
false;public;0;7;;@Test public void importsAreSelected() throws Exception {     AnnotationMetadata annotationMetadata = getAnnotationMetadata(ImportFreeMarker.class).     String[] imports = this.importSelector.selectImports(annotationMetadata).     assertThat(imports).containsExactly(FreeMarkerAutoConfiguration.class.getName()). }
false;public;0;7;;@Test public void importsAreSelectedUsingClassesAttribute() throws Exception {     AnnotationMetadata annotationMetadata = getAnnotationMetadata(ImportFreeMarkerUsingClassesAttribute.class).     String[] imports = this.importSelector.selectImports(annotationMetadata).     assertThat(imports).containsExactly(FreeMarkerAutoConfiguration.class.getName()). }
false;public;0;7;;@Test public void propertyExclusionsAreNotApplied() throws Exception {     AnnotationMetadata annotationMetadata = getAnnotationMetadata(ImportFreeMarker.class).     this.importSelector.selectImports(annotationMetadata).     verifyZeroInteractions(this.environment). }
false;public;0;8;;@Test public void multipleImportsAreFound() throws Exception {     AnnotationMetadata annotationMetadata = getAnnotationMetadata(MultipleImports.class).     String[] imports = this.importSelector.selectImports(annotationMetadata).     assertThat(imports).containsOnly(FreeMarkerAutoConfiguration.class.getName(), ThymeleafAutoConfiguration.class.getName()). }
false;public;0;7;;@Test public void selfAnnotatingAnnotationDoesNotCauseStackOverflow() throws IOException {     AnnotationMetadata annotationMetadata = getAnnotationMetadata(ImportWithSelfAnnotatingAnnotation.class).     String[] imports = this.importSelector.selectImports(annotationMetadata).     assertThat(imports).containsOnly(ThymeleafAutoConfiguration.class.getName()). }
false;public;0;7;;@Test public void exclusionsAreApplied() throws Exception {     AnnotationMetadata annotationMetadata = getAnnotationMetadata(MultipleImportsWithExclusion.class).     String[] imports = this.importSelector.selectImports(annotationMetadata).     assertThat(imports).containsOnly(FreeMarkerAutoConfiguration.class.getName()). }
false;public;0;7;;@Test public void exclusionsWithoutImport() throws Exception {     AnnotationMetadata annotationMetadata = getAnnotationMetadata(ExclusionWithoutImport.class).     String[] imports = this.importSelector.selectImports(annotationMetadata).     assertThat(imports).containsOnly(FreeMarkerAutoConfiguration.class.getName()). }
false;public;0;7;;@Test public void exclusionsAliasesAreApplied() throws Exception {     AnnotationMetadata annotationMetadata = getAnnotationMetadata(ImportWithSelfAnnotatingAnnotationExclude.class).     String[] imports = this.importSelector.selectImports(annotationMetadata).     assertThat(imports).isEmpty(). }
false;public;0;10;;@Test public void determineImportsWhenUsingMetaWithoutClassesShouldBeEqual() throws Exception {     Set<Object> set1 = this.importSelector.determineImports(getAnnotationMetadata(ImportMetaAutoConfigurationWithUnrelatedOne.class)).     Set<Object> set2 = this.importSelector.determineImports(getAnnotationMetadata(ImportMetaAutoConfigurationWithUnrelatedTwo.class)).     assertThat(set1).isEqualTo(set2).     assertThat(set1.hashCode()).isEqualTo(set2.hashCode()). }
false;public;0;9;;@Test public void determineImportsWhenUsingNonMetaWithoutClassesShouldBeSame() throws Exception {     Set<Object> set1 = this.importSelector.determineImports(getAnnotationMetadata(ImportAutoConfigurationWithUnrelatedOne.class)).     Set<Object> set2 = this.importSelector.determineImports(getAnnotationMetadata(ImportAutoConfigurationWithUnrelatedTwo.class)).     assertThat(set1).isEqualTo(set2). }
false;public;0;9;;@Test public void determineImportsWhenUsingNonMetaWithClassesShouldBeSame() throws Exception {     Set<Object> set1 = this.importSelector.determineImports(getAnnotationMetadata(ImportAutoConfigurationWithItemsOne.class)).     Set<Object> set2 = this.importSelector.determineImports(getAnnotationMetadata(ImportAutoConfigurationWithItemsTwo.class)).     assertThat(set1).isEqualTo(set2). }
false;public;0;10;;@Test public void determineImportsWhenUsingMetaExcludeWithoutClassesShouldBeEqual() throws Exception {     Set<Object> set1 = this.importSelector.determineImports(getAnnotationMetadata(ImportMetaAutoConfigurationExcludeWithUnrelatedOne.class)).     Set<Object> set2 = this.importSelector.determineImports(getAnnotationMetadata(ImportMetaAutoConfigurationExcludeWithUnrelatedTwo.class)).     assertThat(set1).isEqualTo(set2).     assertThat(set1.hashCode()).isEqualTo(set2.hashCode()). }
false;public;0;9;;@Test public void determineImportsWhenUsingMetaDifferentExcludeWithoutClassesShouldBeDifferent() throws Exception {     Set<Object> set1 = this.importSelector.determineImports(getAnnotationMetadata(ImportMetaAutoConfigurationExcludeWithUnrelatedOne.class)).     Set<Object> set2 = this.importSelector.determineImports(getAnnotationMetadata(ImportMetaAutoConfigurationWithUnrelatedTwo.class)).     assertThat(set1).isNotEqualTo(set2). }
false;public;0;12;;@Test public void determineImportsShouldNotSetPackageImport() throws Exception {     Class<?> packageImportClass = ClassUtils.resolveClassName("org.springframework.boot.autoconfigure.AutoConfigurationPackages.PackageImport", null).     Set<Object> selectedImports = this.importSelector.determineImports(getAnnotationMetadata(ImportMetaAutoConfigurationExcludeWithUnrelatedOne.class)).     for (Object selectedImport : selectedImports) {         assertThat(selectedImport).isNotInstanceOf(packageImportClass).     } }
false;private;1;4;;private AnnotationMetadata getAnnotationMetadata(Class<?> source) throws IOException {     return new SimpleMetadataReaderFactory().getMetadataReader(source.getName()).getAnnotationMetadata(). }
false;protected;1;8;;@Override protected Collection<String> loadFactoryNames(Class<?> source) {     if (source == MetaImportAutoConfiguration.class) {         return Arrays.asList(ThymeleafAutoConfiguration.class.getName(), FreeMarkerAutoConfiguration.class.getName()).     }     return super.loadFactoryNames(source). }
