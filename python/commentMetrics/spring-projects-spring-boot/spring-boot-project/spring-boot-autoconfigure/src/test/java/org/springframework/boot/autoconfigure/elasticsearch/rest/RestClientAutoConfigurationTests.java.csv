commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void configureShouldCreateBothRestClientVariants() {     this.contextRunner.run((context) -> assertThat(context).hasSingleBean(RestClient.class).hasSingleBean(RestHighLevelClient.class)). }
false;public;0;6;;@Test public void configureWhenCustomClientShouldBackOff() {     this.contextRunner.withUserConfiguration(CustomRestClientConfiguration.class).run((context) -> assertThat(context).hasSingleBean(RestClient.class).hasBean("customRestClient")). }
false;public;0;10;;@Test public void configureWhenBuilderCustomizerShouldApply() {     this.contextRunner.withUserConfiguration(BuilderCustomizerConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(RestClient.class).         RestClient restClient = context.getBean(RestClient.class).         assertThat(restClient).hasFieldOrPropertyWithValue("maxRetryTimeoutMillis", 42L).     }). }
false;public;0;19;;@Test public void restClientCanQueryElasticsearchNode() {     this.contextRunner.withPropertyValues("spring.elasticsearch.rest.uris=http://localhost:" + RestClientAutoConfigurationTests.elasticsearch.getMappedPort()).run((context) -> {         RestHighLevelClient client = context.getBean(RestHighLevelClient.class).         Map<String, String> source = new HashMap<>().         source.put("a", "alpha").         source.put("b", "bravo").         IndexRequest index = new IndexRequest("foo", "bar", "1").source(source).         client.index(index, RequestOptions.DEFAULT).         GetRequest getRequest = new GetRequest("foo", "bar", "1").         assertThat(client.get(getRequest, RequestOptions.DEFAULT).isExists()).isTrue().     }). }
false;public;0;4;;@Bean public RestClient customRestClient() {     return mock(RestClient.class). }
false;public;0;4;;@Bean public RestClientBuilderCustomizer myCustomizer() {     return (builder) -> builder.setMaxRetryTimeoutMillis(42). }
