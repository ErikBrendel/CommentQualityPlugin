commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void contextSourceWithDefaultUrl() {     this.contextRunner.run((context) -> {         LdapContextSource contextSource = context.getBean(LdapContextSource.class).         assertThat(contextSource.getUrls()).containsExactly("ldap://localhost:389").         assertThat(contextSource.isAnonymousReadOnly()).isFalse().     }). }
false;public;0;10;;@Test public void contextSourceWithSingleUrl() {     this.contextRunner.withPropertyValues("spring.ldap.urls:ldap://localhost:123").run((context) -> {         LdapContextSource contextSource = context.getBean(LdapContextSource.class).         assertThat(contextSource.getUrls()).containsExactly("ldap://localhost:123").     }). }
false;public;0;14;;@Test public void contextSourceWithSeveralUrls() {     this.contextRunner.withPropertyValues("spring.ldap.urls:ldap://localhost:123,ldap://mycompany:123").run((context) -> {         LdapContextSource contextSource = context.getBean(LdapContextSource.class).         LdapProperties ldapProperties = context.getBean(LdapProperties.class).         assertThat(contextSource.getUrls()).containsExactly("ldap://localhost:123", "ldap://mycompany:123").         assertThat(ldapProperties.getUrls()).hasSize(2).     }). }
false;public;0;20;;@Test public void contextSourceWithExtraCustomization() {     this.contextRunner.withPropertyValues("spring.ldap.urls:ldap://localhost:123", "spring.ldap.username:root", "spring.ldap.password:secret", "spring.ldap.anonymous-read-only:true", "spring.ldap.base:cn=SpringDevelopers", "spring.ldap.baseEnvironment.java.naming.security.authentication:DIGEST-MD5").run((context) -> {         LdapContextSource contextSource = context.getBean(LdapContextSource.class).         assertThat(contextSource.getUserDn()).isEqualTo("root").         assertThat(contextSource.getPassword()).isEqualTo("secret").         assertThat(contextSource.isAnonymousReadOnly()).isTrue().         assertThat(contextSource.getBaseLdapPathAsString()).isEqualTo("cn=SpringDevelopers").         LdapProperties ldapProperties = context.getBean(LdapProperties.class).         assertThat(ldapProperties.getBaseEnvironment()).containsEntry("java.naming.security.authentication", "DIGEST-MD5").     }). }
false;public;0;5;;@Test public void templateExists() {     this.contextRunner.withPropertyValues("spring.ldap.urls:ldap://localhost:389").run((context) -> assertThat(context).hasSingleBean(LdapTemplate.class)). }
false;public;0;11;;@Test public void contextSourceWithUserProvidedPooledContextSource() {     this.contextRunner.withUserConfiguration(PooledContextSourceConfig.class).run((context) -> {         LdapContextSource contextSource = context.getBean(LdapContextSource.class).         assertThat(contextSource.getUrls()).containsExactly("ldap://localhost:389").         assertThat(contextSource.isAnonymousReadOnly()).isFalse().     }). }
false;public;1;9;;@Bean @Primary public PooledContextSource pooledContextSource(LdapContextSource ldapContextSource) {     PooledContextSource pooledContextSource = new PooledContextSource(new PoolConfig()).     pooledContextSource.setContextSource(ldapContextSource).     return pooledContextSource. }
