commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setupJndi() {     this.initialContextFactory = System.getProperty(Context.INITIAL_CONTEXT_FACTORY).     System.setProperty(Context.INITIAL_CONTEXT_FACTORY, TestableInitialContextFactory.class.getName()).     this.threadContextClassLoader = Thread.currentThread().getContextClassLoader().     Thread.currentThread().setContextClassLoader(new JndiPropertiesHidingClassLoader(getClass().getClassLoader())). }
false;public;0;12;;@After public void close() {     TestableInitialContextFactory.clearAll().     if (this.initialContextFactory != null) {         System.setProperty(Context.INITIAL_CONTEXT_FACTORY, this.initialContextFactory).     } else {         System.clearProperty(Context.INITIAL_CONTEXT_FACTORY).     }     Thread.currentThread().setContextClassLoader(this.threadContextClassLoader). }
false;public;0;15;;@Test public void smtpHostSet() {     String host = "192.168.1.234".     this.contextRunner.withPropertyValues("spring.mail.host:" + host).run((context) -> {         assertThat(context).hasSingleBean(JavaMailSenderImpl.class).         JavaMailSenderImpl mailSender = context.getBean(JavaMailSenderImpl.class).         assertThat(mailSender.getHost()).isEqualTo(host).         assertThat(mailSender.getPort()).isEqualTo(JavaMailSenderImpl.DEFAULT_PORT).         assertThat(mailSender.getProtocol()).isEqualTo(JavaMailSenderImpl.DEFAULT_PROTOCOL).     }). }
false;public;0;18;;@Test public void smtpHostWithSettings() {     String host = "192.168.1.234".     this.contextRunner.withPropertyValues("spring.mail.host:" + host, "spring.mail.port:42", "spring.mail.username:john", "spring.mail.password:secret", "spring.mail.default-encoding:US-ASCII", "spring.mail.protocol:smtps").run((context) -> {         assertThat(context).hasSingleBean(JavaMailSenderImpl.class).         JavaMailSenderImpl mailSender = context.getBean(JavaMailSenderImpl.class).         assertThat(mailSender.getHost()).isEqualTo(host).         assertThat(mailSender.getPort()).isEqualTo(42).         assertThat(mailSender.getUsername()).isEqualTo("john").         assertThat(mailSender.getPassword()).isEqualTo("secret").         assertThat(mailSender.getDefaultEncoding()).isEqualTo("US-ASCII").         assertThat(mailSender.getProtocol()).isEqualTo("smtps").     }). }
false;public;0;11;;@Test public void smtpHostWithJavaMailProperties() {     this.contextRunner.withPropertyValues("spring.mail.host:localhost", "spring.mail.properties.mail.smtp.auth:true").run((context) -> {         assertThat(context).hasSingleBean(JavaMailSenderImpl.class).         JavaMailSenderImpl mailSender = context.getBean(JavaMailSenderImpl.class).         assertThat(mailSender.getJavaMailProperties().get("mail.smtp.auth")).isEqualTo("true").     }). }
false;public;0;5;;@Test public void smtpHostNotSet() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(MailSender.class)). }
false;public;0;13;;@Test public void mailSenderBackOff() {     this.contextRunner.withUserConfiguration(ManualMailConfiguration.class).withPropertyValues("spring.mail.host:smtp.acme.org", "spring.mail.user:user", "spring.mail.password:secret").run((context) -> {         assertThat(context).hasSingleBean(JavaMailSenderImpl.class).         JavaMailSenderImpl mailSender = context.getBean(JavaMailSenderImpl.class).         assertThat(mailSender.getUsername()).isNull().         assertThat(mailSender.getPassword()).isNull().     }). }
false;public;0;5;;@Test public void jndiSessionAvailable() {     Session session = configureJndiSession("java:comp/env/foo").     testJndiSessionLookup(session, "java:comp/env/foo"). }
false;public;0;5;;@Test public void jndiSessionAvailableWithResourceRef() {     Session session = configureJndiSession("java:comp/env/foo").     testJndiSessionLookup(session, "foo"). }
false;private;2;11;;private void testJndiSessionLookup(Session session, String jndiName) {     this.contextRunner.withPropertyValues("spring.mail.jndi-name:" + jndiName).run((context) -> {         assertThat(context).hasSingleBean(Session.class).         Session sessionBean = context.getBean(Session.class).         assertThat(context).hasSingleBean(JavaMailSenderImpl.class).         assertThat(sessionBean).isEqualTo(session).         assertThat(context.getBean(JavaMailSenderImpl.class).getSession()).isEqualTo(sessionBean).     }). }
false;public;0;9;;@Test public void jndiSessionIgnoredIfJndiNameNotSet() {     configureJndiSession("foo").     this.contextRunner.withPropertyValues("spring.mail.host:smtp.acme.org").run((context) -> {         assertThat(context).doesNotHaveBean(Session.class).         assertThat(context).hasSingleBean(JavaMailSenderImpl.class).     }). }
false;public;0;8;;@Test public void jndiSessionNotUsedIfJndiNameNotSet() {     configureJndiSession("foo").     this.contextRunner.run((context) -> {         assertThat(context).doesNotHaveBean(Session.class).         assertThat(context).doesNotHaveBean(MailSender.class).     }). }
false;public;0;11;;@Test public void jndiSessionNotAvailableWithJndiName() {     this.contextRunner.withPropertyValues("spring.mail.jndi-name:foo").run((context) -> {         assertThat(context).hasFailed().         assertThat(context.getStartupFailure()).isInstanceOf(BeanCreationException.class).hasMessageContaining("Unable to find Session in JNDI location foo").     }). }
false;public;0;12;;@Test public void jndiSessionTakesPrecedenceOverProperties() {     Session session = configureJndiSession("foo").     this.contextRunner.withPropertyValues("spring.mail.jndi-name:foo", "spring.mail.host:localhost").run((context) -> {         assertThat(context).hasSingleBean(Session.class).         Session sessionBean = context.getBean(Session.class).         assertThat(sessionBean).isEqualTo(session).         assertThat(context.getBean(JavaMailSenderImpl.class).getSession()).isEqualTo(sessionBean).     }). }
false;public;0;10;;@Test public void defaultEncodingWithProperties() {     this.contextRunner.withPropertyValues("spring.mail.host:localhost", "spring.mail.default-encoding:UTF-16").run((context) -> {         assertThat(context).hasSingleBean(JavaMailSenderImpl.class).         JavaMailSenderImpl mailSender = context.getBean(JavaMailSenderImpl.class).         assertThat(mailSender.getDefaultEncoding()).isEqualTo("UTF-16").     }). }
false;public;0;11;;@Test public void defaultEncodingWithJndi() {     configureJndiSession("foo").     this.contextRunner.withPropertyValues("spring.mail.jndi-name:foo", "spring.mail.default-encoding:UTF-16").run((context) -> {         assertThat(context).hasSingleBean(JavaMailSenderImpl.class).         JavaMailSenderImpl mailSender = context.getBean(JavaMailSenderImpl.class).         assertThat(mailSender.getDefaultEncoding()).isEqualTo("UTF-16").     }). }
false;public;0;12;;@Test public void connectionOnStartup() {     this.contextRunner.withUserConfiguration(MockMailConfiguration.class).withPropertyValues("spring.mail.host:10.0.0.23", "spring.mail.test-connection:true").run((context) -> {         assertThat(context).hasSingleBean(JavaMailSenderImpl.class).         JavaMailSenderImpl mailSender = context.getBean(JavaMailSenderImpl.class).         verify(mailSender, times(1)).testConnection().     }). }
false;public;0;12;;@Test public void connectionOnStartupNotCalled() {     this.contextRunner.withUserConfiguration(MockMailConfiguration.class).withPropertyValues("spring.mail.host:10.0.0.23", "spring.mail.test-connection:false").run((context) -> {         assertThat(context).hasSingleBean(JavaMailSenderImpl.class).         JavaMailSenderImpl mailSender = context.getBean(JavaMailSenderImpl.class).         verify(mailSender, never()).testConnection().     }). }
false;private;1;6;;private Session configureJndiSession(String name) throws IllegalStateException {     Properties properties = new Properties().     Session session = Session.getDefaultInstance(properties).     TestableInitialContextFactory.bind(name, session).     return session. }
false;;0;4;;@Bean JavaMailSender customMailSender() {     return new JavaMailSenderImpl(). }
false;;0;4;;@Bean JavaMailSenderImpl mockMailSender() {     return mock(JavaMailSenderImpl.class). }
