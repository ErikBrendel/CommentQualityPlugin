commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testNameOnMissingBeanCondition() {     this.contextRunner.withUserConfiguration(FooConfiguration.class, OnBeanNameConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean("bar").         assertThat(context.getBean("foo")).isEqualTo("foo").     }). }
false;public;0;10;;@Test public void testNameOnMissingBeanConditionReverseOrder() {     this.contextRunner.withUserConfiguration(OnBeanNameConfiguration.class, FooConfiguration.class).run((context) -> {         // Ideally this would be doesNotHaveBean, but the ordering is a         // problem         assertThat(context).hasBean("bar").         assertThat(context.getBean("foo")).isEqualTo("foo").     }). }
false;public;0;10;;@Test public void testNameAndTypeOnMissingBeanCondition() {     // Arguably this should be hasBean, but as things are implemented the conditions     // specified in the different attributes of @ConditionalOnBean are combined with     // logical OR (not AND) so if any of them match the condition is true.     this.contextRunner.withUserConfiguration(FooConfiguration.class, OnBeanNameAndTypeConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean("bar")). }
false;public;0;8;;@Test public void hierarchyConsidered() {     this.contextRunner.withUserConfiguration(FooConfiguration.class).run((parent) -> new ApplicationContextRunner().withParent(parent).withUserConfiguration(HierarchyConsidered.class).run((context) -> assertThat(context.containsLocalBean("bar")).isFalse())). }
false;public;0;8;;@Test public void hierarchyNotConsidered() {     this.contextRunner.withUserConfiguration(FooConfiguration.class).run((parent) -> new ApplicationContextRunner().withParent(parent).withUserConfiguration(HierarchyNotConsidered.class).run((context) -> assertThat(context.containsLocalBean("bar")).isTrue())). }
false;public;0;7;;@Test public void impliedOnBeanMethod() {     this.contextRunner.withUserConfiguration(ExampleBeanConfiguration.class, ImpliedOnBeanMethod.class).run((context) -> assertThat(context).hasSingleBean(ExampleBean.class)). }
false;public;0;8;;@Test public void testAnnotationOnMissingBeanCondition() {     this.contextRunner.withUserConfiguration(FooConfiguration.class, OnAnnotationConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean("bar").         assertThat(context.getBean("foo")).isEqualTo("foo").     }). }
false;public;0;11;;@Test public void testAnnotationOnMissingBeanConditionWithEagerFactoryBean() {     // Rigorous test for SPR-11069     this.contextRunner.withUserConfiguration(FooConfiguration.class, OnAnnotationConfiguration.class, FactoryBeanXmlConfiguration.class, PropertyPlaceholderAutoConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean("bar").         assertThat(context).hasBean("example").         assertThat(context.getBean("foo")).isEqualTo("foo").     }). }
false;public;0;10;;@Test public void testOnMissingBeanConditionWithFactoryBean() {     this.contextRunner.withUserConfiguration(FactoryBeanConfiguration.class, ConditionalOnFactoryBean.class, PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory")). }
false;public;0;11;;@Test public void testOnMissingBeanConditionWithComponentScannedFactoryBean() {     this.contextRunner.withUserConfiguration(ComponentScannedFactoryBeanBeanMethodConfiguration.class, ConditionalOnFactoryBean.class, PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory")). }
false;public;0;10;;@Test public void testOnMissingBeanConditionWithComponentScannedFactoryBeanWithBeanMethodArguments() {     this.contextRunner.withUserConfiguration(ComponentScannedFactoryBeanBeanMethodWithArgumentsConfiguration.class, ConditionalOnFactoryBean.class, PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory")). }
false;public;0;12;;@Test public void testOnMissingBeanConditionWithFactoryBeanWithBeanMethodArguments() {     this.contextRunner.withUserConfiguration(FactoryBeanWithBeanMethodArgumentsConfiguration.class, ConditionalOnFactoryBean.class, PropertyPlaceholderAutoConfiguration.class).withPropertyValues("theValue=foo").run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory")). }
false;public;0;10;;@Test public void testOnMissingBeanConditionWithConcreteFactoryBean() {     this.contextRunner.withUserConfiguration(ConcreteFactoryBeanConfiguration.class, ConditionalOnFactoryBean.class, PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory")). }
false;public;0;10;;@Test public void testOnMissingBeanConditionWithUnhelpfulFactoryBean() {     // We could not tell that the FactoryBean would ultimately create an ExampleBean     this.contextRunner.withUserConfiguration(UnhelpfulFactoryBeanConfiguration.class, ConditionalOnFactoryBean.class, PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context).getBeans(ExampleBean.class).hasSize(2)). }
false;public;0;10;;@Test public void testOnMissingBeanConditionWithRegisteredFactoryBean() {     this.contextRunner.withUserConfiguration(RegisteredFactoryBeanConfiguration.class, ConditionalOnFactoryBean.class, PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory")). }
false;public;0;11;;@Test public void testOnMissingBeanConditionWithNonspecificFactoryBeanWithClassAttribute() {     this.contextRunner.withUserConfiguration(NonspecificFactoryBeanClassAttributeConfiguration.class, ConditionalOnFactoryBean.class, PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory")). }
false;public;0;11;;@Test public void testOnMissingBeanConditionWithNonspecificFactoryBeanWithStringAttribute() {     this.contextRunner.withUserConfiguration(NonspecificFactoryBeanStringAttributeConfiguration.class, ConditionalOnFactoryBean.class, PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory")). }
false;public;0;10;;@Test public void testOnMissingBeanConditionWithFactoryBeanInXml() {     this.contextRunner.withUserConfiguration(FactoryBeanXmlConfiguration.class, ConditionalOnFactoryBean.class, PropertyPlaceholderAutoConfiguration.class).run((context) -> assertThat(context.getBean(ExampleBean.class).toString()).isEqualTo("fromFactory")). }
false;public;0;9;;@Test public void testOnMissingBeanConditionWithIgnoredSubclass() {     this.contextRunner.withUserConfiguration(CustomExampleBeanConfiguration.class, ConditionalOnIgnoredSubclass.class, PropertyPlaceholderAutoConfiguration.class).run((context) -> {         assertThat(context).getBeans(ExampleBean.class).hasSize(2).         assertThat(context).getBeans(CustomExampleBean.class).hasSize(1).     }). }
false;public;0;9;;@Test public void testOnMissingBeanConditionWithIgnoredSubclassByName() {     this.contextRunner.withUserConfiguration(CustomExampleBeanConfiguration.class, ConditionalOnIgnoredSubclassByName.class, PropertyPlaceholderAutoConfiguration.class).run((context) -> {         assertThat(context).getBeans(ExampleBean.class).hasSize(2).         assertThat(context).getBeans(CustomExampleBean.class).hasSize(1).     }). }
false;public;0;11;;@Test public void grandparentIsConsideredWhenUsingAncestorsStrategy() {     this.contextRunner.withUserConfiguration(ExampleBeanConfiguration.class).run((grandparent) -> new ApplicationContextRunner().withParent(grandparent).run((parent) -> new ApplicationContextRunner().withParent(parent).withUserConfiguration(ExampleBeanConfiguration.class, OnBeanInAncestorsConfiguration.class).run((context) -> assertThat(context).getBeans(ExampleBean.class).hasSize(1)))). }
false;public;0;9;;@Test public void currentContextIsIgnoredWhenUsingAncestorsStrategy() {     this.contextRunner.run((parent) -> new ApplicationContextRunner().withParent(parent).withUserConfiguration(ExampleBeanConfiguration.class, OnBeanInAncestorsConfiguration.class).run((context) -> assertThat(context).getBeans(ExampleBean.class).hasSize(2))). }
false;public;0;8;;@Test public void beanProducedByFactoryBeanIsConsideredWhenMatchingOnAnnotation() {     this.contextRunner.withUserConfiguration(ConcreteFactoryBeanConfiguration.class, OnAnnotationWithFactoryBeanConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean("bar").         assertThat(context).hasSingleBean(ExampleBean.class).     }). }
false;public;0;8;;@Test public void parameterizedContainerWhenValueIsOfMissingBeanMatches() {     this.contextRunner.withUserConfiguration(ParameterizedWithoutCustomConfig.class, ParameterizedConditionWithValueConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("otherExampleBean", "conditionalCustomExampleBean"))). }
false;public;0;8;;@Test public void parameterizedContainerWhenValueIsOfExistingBeanDoesNotMatch() {     this.contextRunner.withUserConfiguration(ParameterizedWithCustomConfig.class, ParameterizedConditionWithValueConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("customExampleBean"))). }
false;public;0;8;;@Test public void parameterizedContainerWhenValueIsOfMissingBeanRegistrationMatches() {     this.contextRunner.withUserConfiguration(ParameterizedWithoutCustomContainerConfig.class, ParameterizedConditionWithValueConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("otherExampleBean", "conditionalCustomExampleBean"))). }
false;public;0;8;;@Test public void parameterizedContainerWhenValueIsOfExistingBeanRegistrationDoesNotMatch() {     this.contextRunner.withUserConfiguration(ParameterizedWithCustomContainerConfig.class, ParameterizedConditionWithValueConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("customExampleBean"))). }
false;public;0;8;;@Test public void parameterizedContainerWhenReturnTypeIsOfExistingBeanDoesNotMatch() {     this.contextRunner.withUserConfiguration(ParameterizedWithCustomConfig.class, ParameterizedConditionWithReturnTypeConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("customExampleBean"))). }
false;public;0;8;;@Test public void parameterizedContainerWhenReturnTypeIsOfExistingBeanRegistrationDoesNotMatch() {     this.contextRunner.withUserConfiguration(ParameterizedWithCustomContainerConfig.class, ParameterizedConditionWithReturnTypeConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("customExampleBean"))). }
false;public;0;8;;@Test public void parameterizedContainerWhenReturnRegistrationTypeIsOfExistingBeanDoesNotMatch() {     this.contextRunner.withUserConfiguration(ParameterizedWithCustomConfig.class, ParameterizedConditionWithReturnRegistrationTypeConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("customExampleBean"))). }
false;public;0;8;;@Test public void parameterizedContainerWhenReturnRegistrationTypeIsOfExistingBeanRegistrationDoesNotMatch() {     this.contextRunner.withUserConfiguration(ParameterizedWithCustomContainerConfig.class, ParameterizedConditionWithReturnRegistrationTypeConfig.class).run((context) -> assertThat(context).satisfies(exampleBeanRequirement("customExampleBean"))). }
false;private;1;10;;private Consumer<ConfigurableApplicationContext> exampleBeanRequirement(String... names) {     return (context) -> {         String[] beans = context.getBeanNamesForType(ExampleBean.class).         String[] containers = context.getBeanNamesForType(TestParameterizedContainer.class).         assertThat(StringUtils.concatenateStringArrays(beans, containers)).containsOnly(names).     }. }
false;public;0;5;;@Bean @ConditionalOnMissingBean(search = SearchStrategy.ANCESTORS) public ExampleBean exampleBean2() {     return new ExampleBean("test"). }
false;public;0;4;;@Bean public String bar() {     return "bar". }
false;public;0;4;;@Bean public String bar() {     return "bar". }
false;public;0;4;;@Bean public FactoryBean<ExampleBean> exampleBeanFactoryBean() {     return new ExampleFactoryBean("foo"). }
false;public;1;5;;@Bean public FactoryBean<ExampleBean> exampleBeanFactoryBean(@Value("${theValue}") String value) {     return new ExampleFactoryBean(value). }
false;public;0;4;;@Bean public ExampleFactoryBean exampleBeanFactoryBean() {     return new ExampleFactoryBean("foo"). }
false;public;0;5;;@Bean @SuppressWarnings("rawtypes") public FactoryBean exampleBeanFactoryBean() {     return new ExampleFactoryBean("foo"). }
false;public;2;11;;@Override public void registerBeanDefinitions(AnnotationMetadata meta, BeanDefinitionRegistry registry) {     BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(NonspecificFactoryBean.class).     builder.addConstructorArgValue("foo").     builder.getBeanDefinition().setAttribute(OnBeanCondition.FACTORY_BEAN_OBJECT_TYPE, ExampleBean.class).     registry.registerBeanDefinition("exampleBeanFactoryBean", builder.getBeanDefinition()). }
false;public;2;12;;@Override public void registerBeanDefinitions(AnnotationMetadata meta, BeanDefinitionRegistry registry) {     BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(NonspecificFactoryBean.class).     builder.addConstructorArgValue("foo").     builder.getBeanDefinition().setAttribute(OnBeanCondition.FACTORY_BEAN_OBJECT_TYPE, ExampleBean.class.getName()).     registry.registerBeanDefinition("exampleBeanFactoryBean", builder.getBeanDefinition()). }
false;public;2;9;;@Override public void registerBeanDefinitions(AnnotationMetadata meta, BeanDefinitionRegistry registry) {     BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(ExampleFactoryBean.class).     builder.addConstructorArgValue("foo").     registry.registerBeanDefinition("exampleBeanFactoryBean", builder.getBeanDefinition()). }
false;public;0;5;;@Bean @ConditionalOnMissingBean(ExampleBean.class) public ExampleBean createExampleBean() {     return new ExampleBean("direct"). }
false;public;0;5;;@Bean @ConditionalOnMissingBean(value = ExampleBean.class, ignored = CustomExampleBean.class) public ExampleBean exampleBean() {     return new ExampleBean("test"). }
false;public;0;5;;@Bean @ConditionalOnMissingBean(value = ExampleBean.class, ignoredType = "org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBeanTests.CustomExampleBean") public ExampleBean exampleBean() {     return new ExampleBean("test"). }
false;public;0;4;;@Bean public CustomExampleBean customExampleBean() {     return new CustomExampleBean(). }
false;public;0;4;;@Bean public String bar() {     return "bar". }
false;public;0;4;;@Bean public String bar() {     return "bar". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String bar() {     return "bar". }
false;public;0;4;;@Bean public String bar() {     return "bar". }
false;public;0;4;;@Bean public ExampleBean exampleBean() {     return new ExampleBean("test"). }
false;public;0;5;;@Bean @ConditionalOnMissingBean public ExampleBean exampleBean2() {     return new ExampleBean("test"). }
false;public;0;4;;@Override public ExampleBean getObject() {     return new ExampleBean("fromFactory"). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return ExampleBean.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;public;0;4;;@Override public ExampleBean getObject() {     return new ExampleBean("fromFactory"). }
false;public;0;4;;@Override public Class<?> getObjectType() {     return ExampleBean.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;public;0;4;;@Bean public CustomExampleBean customExampleBean() {     return new CustomExampleBean(). }
false;public;0;4;;@Bean public OtherExampleBean otherExampleBean() {     return new OtherExampleBean(). }
false;public;0;4;;@Bean public TestParameterizedContainer<OtherExampleBean> otherExampleBean() {     return new TestParameterizedContainer<>(). }
false;public;0;4;;@Bean public TestParameterizedContainer<CustomExampleBean> customExampleBean() {     return new TestParameterizedContainer<>(). }
false;public;0;5;;@Bean @ConditionalOnMissingBean(value = CustomExampleBean.class, parameterizedContainer = TestParameterizedContainer.class) public CustomExampleBean conditionalCustomExampleBean() {     return new CustomExampleBean(). }
false;public;0;5;;@Bean @ConditionalOnMissingBean(parameterizedContainer = TestParameterizedContainer.class) public CustomExampleBean conditionalCustomExampleBean() {     return new CustomExampleBean(). }
false;public;0;5;;@Bean @ConditionalOnMissingBean(parameterizedContainer = TestParameterizedContainer.class) public TestParameterizedContainer<CustomExampleBean> conditionalCustomExampleBean() {     return new TestParameterizedContainer<>(). }
false;public;0;4;;@Override public String toString() {     return this.value. }
