commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;6;;@Test public void defaultUseEmbeddedInMemoryIfAvailable() {     Neo4jProperties properties = load(true).     Configuration configuration = properties.createConfiguration().     assertDriver(configuration, Neo4jProperties.EMBEDDED_DRIVER, null). }
false;public;0;7;;@Test public void defaultUseBoltDriverIfEmbeddedDriverIsNotAvailable() {     Neo4jProperties properties = load(false).     Configuration configuration = properties.createConfiguration().     assertDriver(configuration, Neo4jProperties.BOLT_DRIVER, Neo4jProperties.DEFAULT_BOLT_URI). }
false;public;0;7;;@Test public void httpUriUseHttpDriver() {     Neo4jProperties properties = load(true, "spring.data.neo4j.uri=http://localhost:7474").     Configuration configuration = properties.createConfiguration().     assertDriver(configuration, Neo4jProperties.HTTP_DRIVER, "http://localhost:7474"). }
false;public;0;8;;@Test public void httpsUriUseHttpDriver() {     Neo4jProperties properties = load(true, "spring.data.neo4j.uri=https://localhost:7474").     Configuration configuration = properties.createConfiguration().     assertDriver(configuration, Neo4jProperties.HTTP_DRIVER, "https://localhost:7474"). }
false;public;0;7;;@Test public void boltUriUseBoltDriver() {     Neo4jProperties properties = load(true, "spring.data.neo4j.uri=bolt://localhost:7687").     Configuration configuration = properties.createConfiguration().     assertDriver(configuration, Neo4jProperties.BOLT_DRIVER, "bolt://localhost:7687"). }
false;public;0;8;;@Test public void fileUriUseEmbeddedServer() {     Neo4jProperties properties = load(true, "spring.data.neo4j.uri=file://var/tmp/graph.db").     Configuration configuration = properties.createConfiguration().     assertDriver(configuration, Neo4jProperties.EMBEDDED_DRIVER, "file://var/tmp/graph.db"). }
false;public;0;9;;@Test public void credentialsAreSet() {     Neo4jProperties properties = load(true, "spring.data.neo4j.uri=http://localhost:7474", "spring.data.neo4j.username=user", "spring.data.neo4j.password=secret").     Configuration configuration = properties.createConfiguration().     assertDriver(configuration, Neo4jProperties.HTTP_DRIVER, "http://localhost:7474").     assertCredentials(configuration, "user", "secret"). }
false;public;0;8;;@Test public void credentialsAreSetFromUri() {     Neo4jProperties properties = load(true, "spring.data.neo4j.uri=http://user:secret@my-server:7474").     Configuration configuration = properties.createConfiguration().     assertDriver(configuration, Neo4jProperties.HTTP_DRIVER, "http://my-server:7474").     assertCredentials(configuration, "user", "secret"). }
false;public;0;6;;@Test public void autoIndexNoneByDefault() {     Neo4jProperties properties = load(true).     Configuration configuration = properties.createConfiguration().     assertThat(configuration.getAutoIndex()).isEqualTo(AutoIndexMode.NONE). }
false;public;0;6;;@Test public void autoIndexCanBeConfigured() {     Neo4jProperties properties = load(true, "spring.data.neo4j.auto-index=validate").     Configuration configuration = properties.createConfiguration().     assertThat(configuration.getAutoIndex()).isEqualTo(AutoIndexMode.VALIDATE). }
false;public;0;8;;@Test public void embeddedModeDisabledUseBoltUri() {     Neo4jProperties properties = load(true, "spring.data.neo4j.embedded.enabled=false").     Configuration configuration = properties.createConfiguration().     assertDriver(configuration, Neo4jProperties.BOLT_DRIVER, Neo4jProperties.DEFAULT_BOLT_URI). }
false;public;0;8;;@Test public void embeddedModeWithRelativeLocation() {     Neo4jProperties properties = load(true, "spring.data.neo4j.uri=file:relative/path/to/my.db").     Configuration configuration = properties.createConfiguration().     assertDriver(configuration, Neo4jProperties.EMBEDDED_DRIVER, "file:relative/path/to/my.db"). }
false;public;0;6;;@Test public void nativeTypesAreSetToFalseByDefault() {     Neo4jProperties properties = load(true).     Configuration configuration = properties.createConfiguration().     assertThat(configuration.getUseNativeTypes()).isFalse(). }
false;public;0;7;;@Test public void nativeTypesCanBeConfigured() {     Neo4jProperties properties = load(true, "spring.data.neo4j.use-native-types=true").     Configuration configuration = properties.createConfiguration().     assertThat(configuration.getUseNativeTypes()).isTrue(). }
false;private,static;3;5;;private static void assertDriver(Configuration actual, String driver, String uri) {     assertThat(actual).isNotNull().     assertThat(actual.getDriverClassName()).isEqualTo(driver).     assertThat(actual.getURI()).isEqualTo(uri). }
false;private,static;3;17;;private static void assertCredentials(Configuration actual, String username, String password) {     Credentials<?> credentials = actual.getCredentials().     if (username == null && password == null) {         assertThat(credentials).isNull().     } else {         assertThat(credentials).isNotNull().         Object content = credentials.credentials().         assertThat(content).isInstanceOf(String.class).         String[] auth = new String(Base64.decode(((String) content).getBytes())).split(":").         assertThat(auth[0]).isEqualTo(username).         assertThat(auth[1]).isEqualTo(password).         assertThat(auth).hasSize(2).     } }
false;public;2;11;;public Neo4jProperties load(boolean embeddedAvailable, String... environment) {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     if (!embeddedAvailable) {         ctx.setClassLoader(new FilteredClassLoader(EmbeddedDriver.class)).     }     TestPropertyValues.of(environment).applyTo(ctx).     ctx.register(TestConfiguration.class).     ctx.refresh().     this.context = ctx.     return this.context.getBean(Neo4jProperties.class). }
