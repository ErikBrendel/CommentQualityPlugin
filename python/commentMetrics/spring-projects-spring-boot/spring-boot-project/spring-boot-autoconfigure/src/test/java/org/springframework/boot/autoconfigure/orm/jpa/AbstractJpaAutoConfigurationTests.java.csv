commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected ApplicationContextRunner contextRunner() {     return this.contextRunner. }
false;public;0;6;;@Test public void notConfiguredIfDataSourceIsNotAvailable() {     new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(this.autoConfiguredClass)).run(assertJpaIsNotAutoConfigured()). }
false;public;0;7;;@Test public void notConfiguredIfNoSingleDataSourceCandidateIsAvailable() {     new ApplicationContextRunner().withUserConfiguration(TestTwoDataSourcesConfiguration.class).withConfiguration(AutoConfigurations.of(this.autoConfiguredClass)).run(assertJpaIsNotAutoConfigured()). }
false;protected;0;8;;protected ContextConsumer<AssertableApplicationContext> assertJpaIsNotAutoConfigured() {     return (context) -> {         assertThat(context).hasNotFailed().         assertThat(context).hasSingleBean(JpaProperties.class).         assertThat(context).doesNotHaveBean(PlatformTransactionManager.class).         assertThat(context).doesNotHaveBean(EntityManagerFactory.class).     }. }
false;public;0;8;;@Test public void configuredWithAutoConfiguredDataSource() {     this.contextRunner.run((context) -> {         assertThat(context).hasSingleBean(DataSource.class).         assertThat(context).hasSingleBean(JpaTransactionManager.class).         assertThat(context).hasSingleBean(EntityManagerFactory.class).     }). }
false;public;0;10;;@Test public void configuredWithSingleCandidateDataSource() {     this.contextRunner.withUserConfiguration(TestTwoDataSourcesAndPrimaryConfiguration.class).run((context) -> {         assertThat(context).getBeans(DataSource.class).hasSize(2).         assertThat(context).hasSingleBean(JpaTransactionManager.class).         assertThat(context).hasSingleBean(EntityManagerFactory.class).     }). }
false;public;0;12;;@Test public void jtaTransactionManagerTakesPrecedence() {     this.contextRunner.withConfiguration(AutoConfigurations.of(DataSourceTransactionManagerAutoConfiguration.class)).run((context) -> {         assertThat(context).hasSingleBean(DataSource.class).         assertThat(context).hasSingleBean(JpaTransactionManager.class).         assertThat(context).getBean("transactionManager").isInstanceOf(JpaTransactionManager.class).     }). }
false;public;0;11;;@Test public void openEntityManagerInViewInterceptorIsCreated() {     new WebApplicationContextRunner().withPropertyValues("spring.datasource.generate-unique-name=true").withUserConfiguration(TestConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class, TransactionAutoConfiguration.class, this.autoConfiguredClass)).run((context) -> assertThat(context).hasSingleBean(OpenEntityManagerInViewInterceptor.class)). }
false;public;0;11;;@Test public void openEntityManagerInViewInterceptorIsNotRegisteredWhenFilterPresent() {     new WebApplicationContextRunner().withPropertyValues("spring.datasource.generate-unique-name=true").withUserConfiguration(TestFilterConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class, TransactionAutoConfiguration.class, this.autoConfiguredClass)).run((context) -> assertThat(context).doesNotHaveBean(OpenEntityManagerInViewInterceptor.class)). }
false;public;0;11;;@Test public void openEntityManagerInViewInterceptorIsNotRegisteredWhenFilterRegistrationPresent() {     new WebApplicationContextRunner().withPropertyValues("spring.datasource.generate-unique-name=true").withUserConfiguration(TestFilterRegistrationConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class, TransactionAutoConfiguration.class, this.autoConfiguredClass)).run((context) -> assertThat(context).doesNotHaveBean(OpenEntityManagerInViewInterceptor.class)). }
false;public;0;13;;@Test public void openEntityManagerInViewInterceptorAutoConfigurationBacksOffWhenManuallyRegistered() {     new WebApplicationContextRunner().withPropertyValues("spring.datasource.generate-unique-name=true").withUserConfiguration(TestInterceptorManualConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class, TransactionAutoConfiguration.class, this.autoConfiguredClass)).run((context) -> assertThat(context).getBean(OpenEntityManagerInViewInterceptor.class).isExactlyInstanceOf(TestInterceptorManualConfiguration.ManualOpenEntityManagerInViewInterceptor.class)). }
false;public;0;12;;@Test public void openEntityManagerInViewInterceptorISNotRegisteredWhenExplicitlyOff() {     new WebApplicationContextRunner().withPropertyValues("spring.datasource.generate-unique-name=true", "spring.jpa.open-in-view=false").withUserConfiguration(TestConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class, TransactionAutoConfiguration.class, this.autoConfiguredClass)).run((context) -> assertThat(context).doesNotHaveBean(OpenEntityManagerInViewInterceptor.class)). }
false;public;0;14;;@Test public void customJpaProperties() {     this.contextRunner.withPropertyValues("spring.jpa.properties.a:b", "spring.jpa.properties.a.b:c", "spring.jpa.properties.c:d").run((context) -> {         LocalContainerEntityManagerFactoryBean bean = context.getBean(LocalContainerEntityManagerFactoryBean.class).         Map<String, Object> map = bean.getJpaPropertyMap().         assertThat(map.get("a")).isEqualTo("b").         assertThat(map.get("c")).isEqualTo("d").         assertThat(map.get("a.b")).isEqualTo("c").     }). }
false;public;0;12;;@Test public void usesManuallyDefinedLocalContainerEntityManagerFactoryBeanIfAvailable() {     this.contextRunner.withUserConfiguration(TestConfigurationWithLocalContainerEntityManagerFactoryBean.class).run((context) -> {         LocalContainerEntityManagerFactoryBean factoryBean = context.getBean(LocalContainerEntityManagerFactoryBean.class).         Map<String, Object> map = factoryBean.getJpaPropertyMap().         assertThat(map.get("configured")).isEqualTo("manually").     }). }
false;public;0;12;;@Test public void usesManuallyDefinedEntityManagerFactoryIfAvailable() {     this.contextRunner.withUserConfiguration(TestConfigurationWithLocalContainerEntityManagerFactoryBean.class).run((context) -> {         EntityManagerFactory factoryBean = context.getBean(EntityManagerFactory.class).         Map<String, Object> map = factoryBean.getProperties().         assertThat(map.get("configured")).isEqualTo("manually").     }). }
false;public;0;10;;@Test public void usesManuallyDefinedTransactionManagerBeanIfAvailable() {     this.contextRunner.withUserConfiguration(TestConfigurationWithTransactionManager.class).run((context) -> {         PlatformTransactionManager txManager = context.getBean(PlatformTransactionManager.class).         assertThat(txManager).isInstanceOf(CustomJpaTransactionManager.class).     }). }
false;public;0;13;;@Test public void customPersistenceUnitManager() {     this.contextRunner.withUserConfiguration(TestConfigurationWithCustomPersistenceUnitManager.class).run((context) -> {         LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = context.getBean(LocalContainerEntityManagerFactoryBean.class).         assertThat(entityManagerFactoryBean).hasFieldOrPropertyWithValue("persistenceUnitManager", context.getBean(PersistenceUnitManager.class)).     }). }
false;public;0;4;;@Bean public DataSource firstDataSource() {     return createRandomDataSource(). }
false;public;0;4;;@Bean public DataSource secondDataSource() {     return createRandomDataSource(). }
false;private;0;4;;private DataSource createRandomDataSource() {     String url = "jdbc:h2:mem:init-" + UUID.randomUUID().     return DataSourceBuilder.create().url(url).build(). }
false;public;0;5;;@Bean @Primary public DataSource firstDataSource() {     return createRandomDataSource(). }
false;public;0;4;;@Bean public DataSource secondDataSource() {     return createRandomDataSource(). }
false;private;0;4;;private DataSource createRandomDataSource() {     String url = "jdbc:h2:mem:init-" + UUID.randomUUID().     return DataSourceBuilder.create().url(url).build(). }
false;public;0;4;;@Bean public OpenEntityManagerInViewFilter openEntityManagerInViewFilter() {     return new OpenEntityManagerInViewFilter(). }
false;public;0;4;;@Bean public FilterRegistrationBean<OpenEntityManagerInViewFilter> OpenEntityManagerInViewFilterFilterRegistrationBean() {     return new FilterRegistrationBean<>(). }
false;public;0;4;;@Bean public OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor() {     return new ManualOpenEntityManagerInViewInterceptor(). }
false;public;2;13;;@Bean public LocalContainerEntityManagerFactoryBean entityManagerFactory(DataSource dataSource, JpaVendorAdapter adapter) {     LocalContainerEntityManagerFactoryBean factoryBean = new LocalContainerEntityManagerFactoryBean().     factoryBean.setJpaVendorAdapter(adapter).     factoryBean.setDataSource(dataSource).     factoryBean.setPersistenceUnitName("manually-configured").     Map<String, Object> properties = new HashMap<>().     properties.put("configured", "manually").     properties.put("hibernate.transaction.jta.platform", NoJtaPlatform.INSTANCE).     factoryBean.setJpaPropertyMap(properties).     return factoryBean. }
false;public;2;14;;@Bean public EntityManagerFactory entityManagerFactory(DataSource dataSource, JpaVendorAdapter adapter) {     LocalContainerEntityManagerFactoryBean factoryBean = new LocalContainerEntityManagerFactoryBean().     factoryBean.setJpaVendorAdapter(adapter).     factoryBean.setDataSource(dataSource).     factoryBean.setPersistenceUnitName("manually-configured").     Map<String, Object> properties = new HashMap<>().     properties.put("configured", "manually").     properties.put("hibernate.transaction.jta.platform", NoJtaPlatform.INSTANCE).     factoryBean.setJpaPropertyMap(properties).     factoryBean.afterPropertiesSet().     return factoryBean.getObject(). }
false;public;1;6;;@Bean public PlatformTransactionManager transactionManager(EntityManagerFactory emf) {     JpaTransactionManager transactionManager = new JpaTransactionManager().     transactionManager.setEntityManagerFactory(emf).     return transactionManager. }
false;public;0;4;;@Bean public PlatformTransactionManager transactionManager() {     return new CustomJpaTransactionManager(). }
false;public;0;7;;@Bean public PersistenceUnitManager persistenceUnitManager() {     DefaultPersistenceUnitManager persistenceUnitManager = new DefaultPersistenceUnitManager().     persistenceUnitManager.setDefaultDataSource(this.dataSource).     persistenceUnitManager.setPackagesToScan(City.class.getPackage().getName()).     return persistenceUnitManager. }
