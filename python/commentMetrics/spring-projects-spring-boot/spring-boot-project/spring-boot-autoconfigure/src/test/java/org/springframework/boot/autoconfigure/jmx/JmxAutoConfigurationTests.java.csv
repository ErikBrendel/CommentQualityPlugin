commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@After public void tearDown() {     if (this.context != null) {         this.context.close().         if (this.context.getParent() != null) {             ((ConfigurableApplicationContext) this.context.getParent()).close().         }     } }
false;public;0;7;;@Test public void testDefaultMBeanExport() {     this.context = new AnnotationConfigApplicationContext().     this.context.register(JmxAutoConfiguration.class).     this.context.refresh().     assertThat(this.context.getBean(MBeanExporter.class)).isNotNull(). }
false;public;0;10;;@Test public void testEnabledMBeanExport() {     MockEnvironment env = new MockEnvironment().     env.setProperty("spring.jmx.enabled", "true").     this.context = new AnnotationConfigApplicationContext().     this.context.setEnvironment(env).     this.context.register(JmxAutoConfiguration.class).     this.context.refresh().     assertThat(this.context.getBean(MBeanExporter.class)).isNotNull(). }
false;public;0;11;;@Test public void testDisabledMBeanExport() {     MockEnvironment env = new MockEnvironment().     env.setProperty("spring.jmx.enabled", "false").     this.context = new AnnotationConfigApplicationContext().     this.context.setEnvironment(env).     this.context.register(TestConfiguration.class, JmxAutoConfiguration.class).     this.context.refresh().     assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.context.getBean(MBeanExporter.class)). }
false;public;0;18;;@Test public void testDefaultDomainConfiguredOnMBeanExport() {     MockEnvironment env = new MockEnvironment().     env.setProperty("spring.jmx.enabled", "true").     env.setProperty("spring.jmx.default-domain", "my-test-domain").     env.setProperty("spring.jmx.unique-names", "true").     this.context = new AnnotationConfigApplicationContext().     this.context.setEnvironment(env).     this.context.register(TestConfiguration.class, JmxAutoConfiguration.class).     this.context.refresh().     MBeanExporter mBeanExporter = this.context.getBean(MBeanExporter.class).     assertThat(mBeanExporter).isNotNull().     MetadataNamingStrategy naming = (MetadataNamingStrategy) ReflectionTestUtils.getField(mBeanExporter, "namingStrategy").     assertThat(naming).hasFieldOrPropertyWithValue("defaultDomain", "my-test-domain").     assertThat(naming).hasFieldOrPropertyWithValue("ensureUniqueRuntimeObjectNames", true). }
false;public;0;11;;@Test public void testBasicParentContext() {     this.context = new AnnotationConfigApplicationContext().     this.context.register(JmxAutoConfiguration.class).     this.context.refresh().     AnnotationConfigApplicationContext parent = this.context.     this.context = new AnnotationConfigApplicationContext().     this.context.setParent(parent).     this.context.register(JmxAutoConfiguration.class).     this.context.refresh(). }
false;public;0;11;;@Test public void testParentContext() {     this.context = new AnnotationConfigApplicationContext().     this.context.register(JmxAutoConfiguration.class, TestConfiguration.class).     this.context.refresh().     AnnotationConfigApplicationContext parent = this.context.     this.context = new AnnotationConfigApplicationContext().     this.context.setParent(parent).     this.context.register(JmxAutoConfiguration.class, TestConfiguration.class).     this.context.refresh(). }
false;public;0;10;;@Test public void customJmxDomain() {     this.context = new AnnotationConfigApplicationContext().     this.context.register(CustomJmxDomainConfiguration.class, JmxAutoConfiguration.class, IntegrationAutoConfiguration.class).     this.context.refresh().     IntegrationMBeanExporter mbeanExporter = this.context.getBean(IntegrationMBeanExporter.class).     assertThat(mbeanExporter).hasFieldOrPropertyWithValue("domain", "foo.my"). }
false;public;0;4;;@Bean public Counter counter() {     return new Counter(). }
false;public;0;4;;@ManagedAttribute public int get() {     return this.counter. }
false;public;0;4;;@ManagedOperation public void increment() {     this.counter++. }
