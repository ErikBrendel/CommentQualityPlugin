commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;9;;@Test public void exceptionTranslationPostProcessorUsesCglibByDefault() {     this.context = new AnnotationConfigApplicationContext(PersistenceExceptionTranslationAutoConfiguration.class).     Map<String, PersistenceExceptionTranslationPostProcessor> beans = this.context.getBeansOfType(PersistenceExceptionTranslationPostProcessor.class).     assertThat(beans).hasSize(1).     assertThat(beans.values().iterator().next().isProxyTargetClass()).isTrue(). }
false;public;0;12;;@Test public void exceptionTranslationPostProcessorCanBeConfiguredToUseJdkProxy() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.aop.proxy-target-class=false").applyTo(this.context).     this.context.register(PersistenceExceptionTranslationAutoConfiguration.class).     this.context.refresh().     Map<String, PersistenceExceptionTranslationPostProcessor> beans = this.context.getBeansOfType(PersistenceExceptionTranslationPostProcessor.class).     assertThat(beans).hasSize(1).     assertThat(beans.values().iterator().next().isProxyTargetClass()).isFalse(). }
false;public;0;11;;@Test public void exceptionTranslationPostProcessorCanBeDisabled() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.dao.exceptiontranslation.enabled=false").applyTo(this.context).     this.context.register(PersistenceExceptionTranslationAutoConfiguration.class).     this.context.refresh().     Map<String, PersistenceExceptionTranslationPostProcessor> beans = this.context.getBeansOfType(PersistenceExceptionTranslationPostProcessor.class).     assertThat(beans).isEmpty(). }
false;public;0;9;;// @Test // public void // persistOfNullThrowsIllegalArgumentExceptionWithoutExceptionTranslation() { // this.context = new AnnotationConfigApplicationContext( // EmbeddedDataSourceConfiguration.class, // HibernateJpaAutoConfiguration.class, TestConfiguration.class). // assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy( // () -> this.context.getBean(TestRepository.class).doSomething()). // } @Test public void persistOfNullThrowsInvalidDataAccessApiUsageExceptionWithExceptionTranslation() {     this.context = new AnnotationConfigApplicationContext(EmbeddedDataSourceConfiguration.class, HibernateJpaAutoConfiguration.class, TestConfiguration.class, PersistenceExceptionTranslationAutoConfiguration.class).     assertThatExceptionOfType(InvalidDataAccessApiUsageException.class).isThrownBy(() -> this.context.getBean(TestRepository.class).doSomething()). }
false;public;1;4;;@Bean public TestRepository testRepository(EntityManagerFactory entityManagerFactory) {     return new TestRepository(entityManagerFactory.createEntityManager()). }
false;public;0;3;;public void doSomething() {     this.entityManager.persist(null). }
