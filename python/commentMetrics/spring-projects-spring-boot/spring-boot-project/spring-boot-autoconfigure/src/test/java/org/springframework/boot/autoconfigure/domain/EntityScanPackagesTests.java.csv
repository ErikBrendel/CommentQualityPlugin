commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void cleanup() {     if (this.context != null) {         this.context.close().     } }
false;public;0;8;;@Test public void getWhenNoneRegisteredShouldReturnNone() {     this.context = new AnnotationConfigApplicationContext().     this.context.refresh().     EntityScanPackages packages = EntityScanPackages.get(this.context).     assertThat(packages).isNotNull().     assertThat(packages.getPackageNames()).isEmpty(). }
false;public;0;9;;@Test public void getShouldReturnRegisterPackages() {     this.context = new AnnotationConfigApplicationContext().     EntityScanPackages.register(this.context, "a", "b").     EntityScanPackages.register(this.context, "b", "c").     this.context.refresh().     EntityScanPackages packages = EntityScanPackages.get(this.context).     assertThat(packages.getPackageNames()).containsExactly("a", "b", "c"). }
false;public;0;7;;@Test public void registerFromArrayWhenRegistryIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> EntityScanPackages.register(null)).withMessageContaining("Registry must not be null"). }
false;public;0;8;;@Test public void registerFromArrayWhenPackageNamesIsNullShouldThrowException() {     this.context = new AnnotationConfigApplicationContext().     assertThatIllegalArgumentException().isThrownBy(() -> EntityScanPackages.register(this.context, (String[]) null)).withMessageContaining("PackageNames must not be null"). }
false;public;0;7;;@Test public void registerFromCollectionWhenRegistryIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> EntityScanPackages.register(null, Collections.emptyList())).withMessageContaining("Registry must not be null"). }
false;public;0;8;;@Test public void registerFromCollectionWhenPackageNamesIsNullShouldThrowException() {     this.context = new AnnotationConfigApplicationContext().     assertThatIllegalArgumentException().isThrownBy(() -> EntityScanPackages.register(this.context, (Collection<String>) null)).withMessageContaining("PackageNames must not be null"). }
false;public;0;7;;@Test public void entityScanAnnotationWhenHasValueAttributeShouldSetupPackages() {     this.context = new AnnotationConfigApplicationContext(EntityScanValueConfig.class).     EntityScanPackages packages = EntityScanPackages.get(this.context).     assertThat(packages.getPackageNames()).containsExactly("a"). }
false;public;0;9;;@Test public void entityScanAnnotationWhenHasValueAttributeShouldSetupPackagesAsm() {     this.context = new AnnotationConfigApplicationContext().     this.context.registerBeanDefinition("entityScanValueConfig", new RootBeanDefinition(EntityScanValueConfig.class.getName())).     this.context.refresh().     EntityScanPackages packages = EntityScanPackages.get(this.context).     assertThat(packages.getPackageNames()).containsExactly("a"). }
false;public;0;7;;@Test public void entityScanAnnotationWhenHasBasePackagesAttributeShouldSetupPackages() {     this.context = new AnnotationConfigApplicationContext(EntityScanBasePackagesConfig.class).     EntityScanPackages packages = EntityScanPackages.get(this.context).     assertThat(packages.getPackageNames()).containsExactly("b"). }
false;public;0;6;;@Test public void entityScanAnnotationWhenHasValueAndBasePackagesAttributeShouldThrow() {     assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> this.context = new AnnotationConfigApplicationContext(EntityScanValueAndBasePackagesConfig.class)). }
false;public;0;8;;@Test public void entityScanAnnotationWhenHasBasePackageClassesAttributeShouldSetupPackages() {     this.context = new AnnotationConfigApplicationContext(EntityScanBasePackageClassesConfig.class).     EntityScanPackages packages = EntityScanPackages.get(this.context).     assertThat(packages.getPackageNames()).containsExactly(getClass().getPackage().getName()). }
false;public;0;8;;@Test public void entityScanAnnotationWhenNoAttributesShouldSetupPackages() {     this.context = new AnnotationConfigApplicationContext(EntityScanNoAttributesConfig.class).     EntityScanPackages packages = EntityScanPackages.get(this.context).     assertThat(packages.getPackageNames()).containsExactly(getClass().getPackage().getName()). }
false;public;0;7;;@Test public void entityScanAnnotationWhenLoadingFromMultipleConfigsShouldCombinePackages() {     this.context = new AnnotationConfigApplicationContext(EntityScanValueConfig.class, EntityScanBasePackagesConfig.class).     EntityScanPackages packages = EntityScanPackages.get(this.context).     assertThat(packages.getPackageNames()).containsExactly("a", "b"). }
