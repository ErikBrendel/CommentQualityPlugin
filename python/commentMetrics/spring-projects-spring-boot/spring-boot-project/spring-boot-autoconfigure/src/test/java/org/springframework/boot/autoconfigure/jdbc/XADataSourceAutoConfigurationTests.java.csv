commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void wrapExistingXaDataSource() {     ApplicationContext context = createContext(WrapExisting.class).     context.getBean(DataSource.class).     XADataSource source = context.getBean(XADataSource.class).     MockXADataSourceWrapper wrapper = context.getBean(MockXADataSourceWrapper.class).     assertThat(wrapper.getXaDataSource()).isEqualTo(source). }
false;public;0;12;;@Test public void createFromUrl() {     ApplicationContext context = createContext(FromProperties.class, "spring.datasource.url:jdbc:hsqldb:mem:test", "spring.datasource.username:un").     context.getBean(DataSource.class).     MockXADataSourceWrapper wrapper = context.getBean(MockXADataSourceWrapper.class).     JDBCXADataSource dataSource = (JDBCXADataSource) wrapper.getXaDataSource().     assertThat(dataSource).isNotNull().     assertThat(dataSource.getUrl()).isEqualTo("jdbc:hsqldb:mem:test").     assertThat(dataSource.getUser()).isEqualTo("un"). }
false;public;0;11;;@Test public void createFromClass() throws Exception {     ApplicationContext context = createContext(FromProperties.class, "spring.datasource.xa.data-source-class-name:org.hsqldb.jdbc.pool.JDBCXADataSource", "spring.datasource.xa.properties.login-timeout:123").     context.getBean(DataSource.class).     MockXADataSourceWrapper wrapper = context.getBean(MockXADataSourceWrapper.class).     JDBCXADataSource dataSource = (JDBCXADataSource) wrapper.getXaDataSource().     assertThat(dataSource).isNotNull().     assertThat(dataSource.getLoginTimeout()).isEqualTo(123). }
false;private;2;7;;private ApplicationContext createContext(Class<?> configuration, String... env) {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     TestPropertyValues.of(env).applyTo(context).     context.register(configuration, XADataSourceAutoConfiguration.class).     context.refresh().     return context. }
false;public;0;4;;@Bean public MockXADataSourceWrapper wrapper() {     return new MockXADataSourceWrapper(). }
false;public;0;4;;@Bean public XADataSource xaDataSource() {     return mock(XADataSource.class). }
false;public;0;4;;@Bean public MockXADataSourceWrapper wrapper() {     return new MockXADataSourceWrapper(). }
false;public;1;5;;@Override public DataSource wrapDataSource(XADataSource dataSource) {     this.dataSource = dataSource.     return mock(DataSource.class). }
false;public;0;3;;public XADataSource getXaDataSource() {     return this.dataSource. }
