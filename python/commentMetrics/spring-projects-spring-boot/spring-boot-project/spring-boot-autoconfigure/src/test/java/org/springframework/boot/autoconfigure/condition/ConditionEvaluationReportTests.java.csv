commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.beanFactory = new DefaultListableBeanFactory().     this.report = ConditionEvaluationReport.get(this.beanFactory). }
false;public;0;5;;@Test public void get() {     assertThat(this.report).isNotEqualTo(nullValue()).     assertThat(this.report).isSameAs(ConditionEvaluationReport.get(this.beanFactory)). }
false;public;0;15;;@Test public void parent() {     this.beanFactory.setParentBeanFactory(new DefaultListableBeanFactory()).     ConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory.getParentBeanFactory()).     assertThat(this.report).isSameAs(ConditionEvaluationReport.get(this.beanFactory)).     assertThat(this.report).isNotEqualTo(nullValue()).     assertThat(this.report.getParent()).isNotEqualTo(nullValue()).     ConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory.getParentBeanFactory()).     assertThat(this.report).isSameAs(ConditionEvaluationReport.get(this.beanFactory)).     assertThat(this.report.getParent()).isSameAs(ConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory.getParentBeanFactory())). }
false;public;0;12;;@Test public void parentBottomUp() {     // NB: overrides setup     this.beanFactory = new DefaultListableBeanFactory().     this.beanFactory.setParentBeanFactory(new DefaultListableBeanFactory()).     ConditionEvaluationReport.get((ConfigurableListableBeanFactory) this.beanFactory.getParentBeanFactory()).     this.report = ConditionEvaluationReport.get(this.beanFactory).     assertThat(this.report).isNotNull().     assertThat(this.report).isNotSameAs(this.report.getParent()).     assertThat(this.report.getParent()).isNotNull().     assertThat(this.report.getParent().getParent()).isNull(). }
false;public;0;25;;@Test public void recordConditionEvaluations() {     this.outcome1 = new ConditionOutcome(false, "m1").     this.outcome2 = new ConditionOutcome(false, "m2").     this.outcome3 = new ConditionOutcome(false, "m3").     this.report.recordConditionEvaluation("a", this.condition1, this.outcome1).     this.report.recordConditionEvaluation("a", this.condition2, this.outcome2).     this.report.recordConditionEvaluation("b", this.condition3, this.outcome3).     Map<String, ConditionAndOutcomes> map = this.report.getConditionAndOutcomesBySource().     assertThat(map.size()).isEqualTo(2).     Iterator<ConditionAndOutcome> iterator = map.get("a").iterator().     ConditionAndOutcome conditionAndOutcome = iterator.next().     assertThat(conditionAndOutcome.getCondition()).isEqualTo(this.condition1).     assertThat(conditionAndOutcome.getOutcome()).isEqualTo(this.outcome1).     conditionAndOutcome = iterator.next().     assertThat(conditionAndOutcome.getCondition()).isEqualTo(this.condition2).     assertThat(conditionAndOutcome.getOutcome()).isEqualTo(this.outcome2).     assertThat(iterator.hasNext()).isFalse().     iterator = map.get("b").iterator().     conditionAndOutcome = iterator.next().     assertThat(conditionAndOutcome.getCondition()).isEqualTo(this.condition3).     assertThat(conditionAndOutcome.getOutcome()).isEqualTo(this.outcome3).     assertThat(iterator.hasNext()).isFalse(). }
false;public;0;6;;@Test public void fullMatch() {     prepareMatches(true, true, true).     assertThat(this.report.getConditionAndOutcomesBySource().get("a").isFullMatch()).isTrue(). }
false;public;0;6;;@Test public void notFullMatch() {     prepareMatches(true, false, true).     assertThat(this.report.getConditionAndOutcomesBySource().get("a").isFullMatch()).isFalse(). }
false;private;3;8;;private void prepareMatches(boolean m1, boolean m2, boolean m3) {     this.outcome1 = new ConditionOutcome(m1, "m1").     this.outcome2 = new ConditionOutcome(m2, "m2").     this.outcome3 = new ConditionOutcome(m3, "m3").     this.report.recordConditionEvaluation("a", this.condition1, this.outcome1).     this.report.recordConditionEvaluation("a", this.condition2, this.outcome2).     this.report.recordConditionEvaluation("a", this.condition3, this.outcome3). }
false;public;0;7;;@Test @SuppressWarnings("resource") public void springBootConditionPopulatesReport() {     ConditionEvaluationReport report = ConditionEvaluationReport.get(new AnnotationConfigApplicationContext(Config.class).getBeanFactory()).     assertThat(report.getConditionAndOutcomesBySource().size()).isNotEqualTo(0). }
false;public;0;17;;@Test public void testDuplicateConditionAndOutcomes() {     ConditionAndOutcome outcome1 = new ConditionAndOutcome(this.condition1, new ConditionOutcome(true, "Message 1")).     ConditionAndOutcome outcome2 = new ConditionAndOutcome(this.condition2, new ConditionOutcome(true, "Message 2")).     ConditionAndOutcome outcome3 = new ConditionAndOutcome(this.condition3, new ConditionOutcome(true, "Message 2")).     assertThat(outcome1).isEqualTo(outcome1).     assertThat(outcome1).isNotEqualTo(outcome2).     assertThat(outcome2).isEqualTo(outcome3).     ConditionAndOutcomes outcomes = new ConditionAndOutcomes().     outcomes.add(this.condition1, new ConditionOutcome(true, "Message 1")).     outcomes.add(this.condition2, new ConditionOutcome(true, "Message 2")).     outcomes.add(this.condition3, new ConditionOutcome(true, "Message 2")).     assertThat(getNumberOfOutcomes(outcomes)).isEqualTo(2). }
false;public;0;22;;@Test public void duplicateOutcomes() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(DuplicateConfig.class).     ConditionEvaluationReport report = ConditionEvaluationReport.get(context.getBeanFactory()).     String autoconfigKey = MultipartAutoConfiguration.class.getName().     ConditionAndOutcomes outcomes = report.getConditionAndOutcomesBySource().get(autoconfigKey).     assertThat(outcomes).isNotEqualTo(nullValue()).     assertThat(getNumberOfOutcomes(outcomes)).isEqualTo(2).     List<String> messages = new ArrayList<>().     for (ConditionAndOutcome outcome : outcomes) {         messages.add(outcome.getOutcome().getMessage()).     }     assertThat(messages).areAtLeastOne(Matched.by(containsString("@ConditionalOnClass found required classes " + "'javax.servlet.Servlet', 'org.springframework.web.multipart." + "support.StandardServletMultipartResolver', " + "'javax.servlet.MultipartConfigElement'"))).     context.close(). }
false;public;0;16;;@Test public void negativeOuterPositiveInnerBean() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("test.present=true").applyTo(context).     context.register(NegativeOuterConfig.class).     context.refresh().     ConditionEvaluationReport report = ConditionEvaluationReport.get(context.getBeanFactory()).     Map<String, ConditionAndOutcomes> sourceOutcomes = report.getConditionAndOutcomesBySource().     assertThat(context.containsBean("negativeOuterPositiveInnerBean")).isFalse().     String negativeConfig = NegativeOuterConfig.class.getName().     assertThat(sourceOutcomes.get(negativeConfig).isFullMatch()).isFalse().     String positiveConfig = NegativeOuterConfig.PositiveInnerConfig.class.getName().     assertThat(sourceOutcomes.get(positiveConfig).isFullMatch()).isFalse(). }
false;public;0;15;;@Test public void reportWhenSameShortNamePresentMoreThanOnceShouldUseFullyQualifiedName() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(WebMvcAutoConfiguration.class, org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration.class, org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration.class).     context.refresh().     ConditionEvaluationReport report = ConditionEvaluationReport.get(context.getBeanFactory()).     assertThat(report.getConditionAndOutcomesBySource()).containsKeys("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration", "org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration", "org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration").     context.close(). }
false;public;0;17;;@Test public void reportMessageWhenSameShortNamePresentMoreThanOnceShouldUseFullyQualifiedName() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(WebMvcAutoConfiguration.class, org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration.class, org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration.class).     context.refresh().     ConditionEvaluationReport report = ConditionEvaluationReport.get(context.getBeanFactory()).     String reportMessage = new ConditionEvaluationReportMessage(report).toString().     assertThat(reportMessage).contains("WebMvcAutoConfiguration", "org.springframework.boot.autoconfigure.condition.config.first.SampleAutoConfiguration", "org.springframework.boot.autoconfigure.condition.config.second.SampleAutoConfiguration").     assertThat(reportMessage).doesNotContain("org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration").     context.close(). }
false;private;1;9;;private int getNumberOfOutcomes(ConditionAndOutcomes outcomes) {     Iterator<ConditionAndOutcome> iterator = outcomes.iterator().     int numberOfOutcomesAdded = 0.     while (iterator.hasNext()) {         numberOfOutcomesAdded++.         iterator.next().     }     return numberOfOutcomesAdded. }
false;public;0;4;;@Bean public String negativeOuterPositiveInnerBean() {     return "negativeOuterPositiveInnerBean". }
false;public;0;4;;@Override public ConfigurationPhase getConfigurationPhase() {     return this.phase. }
false;public;2;5;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     return new ConditionOutcome(this.match, ClassUtils.getShortName(getClass())). }
