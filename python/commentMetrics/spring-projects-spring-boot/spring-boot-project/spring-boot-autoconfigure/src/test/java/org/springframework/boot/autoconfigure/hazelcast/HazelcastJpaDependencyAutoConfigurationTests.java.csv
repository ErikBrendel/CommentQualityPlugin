commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void registrationIfHazelcastInstanceHasRegularBeanName() {     this.contextRunner.withUserConfiguration(HazelcastConfiguration.class).run((context) -> {         assertThat(postProcessors(context)).containsKey("hazelcastInstanceJpaDependencyPostProcessor").         assertThat(entityManagerFactoryDependencies(context)).contains("hazelcastInstance").     }). }
false;public;0;10;;@Test public void noRegistrationIfHazelcastInstanceHasCustomBeanName() {     this.contextRunner.withUserConfiguration(HazelcastCustomNameConfiguration.class).run((context) -> {         assertThat(entityManagerFactoryDependencies(context)).doesNotContain("hazelcastInstance").         assertThat(postProcessors(context)).doesNotContainKey("hazelcastInstanceJpaDependencyPostProcessor").     }). }
false;public;0;9;;@Test public void noRegistrationWithNoHazelcastInstance() {     this.contextRunner.run((context) -> {         assertThat(entityManagerFactoryDependencies(context)).doesNotContain("hazelcastInstance").         assertThat(postProcessors(context)).doesNotContainKey("hazelcastInstanceJpaDependencyPostProcessor").     }). }
false;public;0;8;;@Test public void noRegistrationWithNoEntityManagerFactory() {     new ApplicationContextRunner().withUserConfiguration(HazelcastConfiguration.class).withConfiguration(AutoConfigurations.of(HazelcastJpaDependencyAutoConfiguration.class)).run((context) -> assertThat(postProcessors(context)).doesNotContainKey("hazelcastInstanceJpaDependencyPostProcessor")). }
false;private;1;4;;private Map<String, EntityManagerFactoryDependsOnPostProcessor> postProcessors(AssertableApplicationContext context) {     return context.getBeansOfType(EntityManagerFactoryDependsOnPostProcessor.class). }
false;private;1;7;;private List<String> entityManagerFactoryDependencies(AssertableApplicationContext context) {     String[] dependsOn = ((BeanDefinitionRegistry) context.getSourceApplicationContext()).getBeanDefinition("entityManagerFactory").getDependsOn().     return (dependsOn != null) ? Arrays.asList(dependsOn) : Collections.emptyList(). }
false;public;0;4;;@Bean public HazelcastInstance hazelcastInstance() {     return mock(HazelcastInstance.class). }
false;public;0;4;;@Bean public HazelcastInstance myHazelcastInstance() {     return mock(HazelcastInstance.class). }
