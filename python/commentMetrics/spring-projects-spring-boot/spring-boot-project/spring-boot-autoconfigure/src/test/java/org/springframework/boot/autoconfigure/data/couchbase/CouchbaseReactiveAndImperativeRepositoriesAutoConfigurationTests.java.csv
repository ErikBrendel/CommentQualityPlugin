commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void close() {     this.context.close(). }
false;public;0;11;;@Test public void shouldCreateInstancesForReactiveAndImperativeRepositories() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.datasource.initialization-mode:never").applyTo(this.context).     this.context.register(ImperativeAndReactiveConfiguration.class, BaseConfiguration.class).     this.context.refresh().     assertThat(this.context.getBean(CityRepository.class)).isNotNull().     assertThat(this.context.getBean(ReactiveCityRepository.class)).isNotNull(). }
false;public;1;12;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     List<String> names = new ArrayList<>().     for (Class<?> type : new Class<?>[] { CouchbaseAutoConfiguration.class, CouchbaseDataAutoConfiguration.class, CouchbaseRepositoriesAutoConfiguration.class, CouchbaseReactiveDataAutoConfiguration.class, CouchbaseReactiveRepositoriesAutoConfiguration.class }) {         names.add(type.getName()).     }     return StringUtils.toStringArray(names). }
