commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testDefaultUsernamePassword() {     this.contextRunner.run((context) -> {         UserDetailsService manager = context.getBean(UserDetailsService.class).         assertThat(this.output.toString()).contains("Using generated security password:").         assertThat(manager.loadUserByUsername("user")).isNotNull().     }). }
false;public;0;16;;@Test public void defaultUserNotCreatedIfAuthenticationManagerBeanPresent() {     this.contextRunner.withUserConfiguration(TestAuthenticationManagerConfiguration.class).run((context) -> {         AuthenticationManager manager = context.getBean(AuthenticationManager.class).         assertThat(manager).isEqualTo(context.getBean(TestAuthenticationManagerConfiguration.class).authenticationManager).         assertThat(this.output.toString()).doesNotContain("Using generated security password: ").         TestingAuthenticationToken token = new TestingAuthenticationToken("foo", "bar").         assertThat(manager.authenticate(token)).isNotNull().     }). }
false;public;0;12;;@Test public void defaultUserNotCreatedIfUserDetailsServiceBeanPresent() {     this.contextRunner.withUserConfiguration(TestUserDetailsServiceConfiguration.class).run((context) -> {         UserDetailsService userDetailsService = context.getBean(UserDetailsService.class).         assertThat(this.output.toString()).doesNotContain("Using generated security password: ").         assertThat(userDetailsService.loadUserByUsername("foo")).isNotNull().     }). }
false;public;0;14;;@Test public void defaultUserNotCreatedIfAuthenticationProviderBeanPresent() {     this.contextRunner.withUserConfiguration(TestAuthenticationProviderConfiguration.class).run((context) -> {         AuthenticationProvider provider = context.getBean(AuthenticationProvider.class).         assertThat(this.output.toString()).doesNotContain("Using generated security password: ").         TestingAuthenticationToken token = new TestingAuthenticationToken("foo", "bar").         assertThat(provider.authenticate(token)).isNotNull().     }). }
false;public;0;11;;@Test public void userDetailsServiceWhenPasswordEncoderAbsentAndDefaultPassword() {     this.contextRunner.withUserConfiguration(TestSecurityConfiguration.class).run(((context) -> {         InMemoryUserDetailsManager userDetailsService = context.getBean(InMemoryUserDetailsManager.class).         String password = userDetailsService.loadUserByUsername("user").getPassword().         assertThat(password).startsWith("{noop}").     })). }
false;public;0;4;;@Test public void userDetailsServiceWhenPasswordEncoderAbsentAndRawPassword() {     testPasswordEncoding(TestSecurityConfiguration.class, "secret", "{noop}secret"). }
false;public;0;5;;@Test public void userDetailsServiceWhenPasswordEncoderAbsentAndEncodedPassword() {     String password = "{bcrypt}$2a$10$sCBi9fy9814vUPf2ZRbtp.fR5/VgRk2iBFZ.ypu5IyZ28bZgxrVDa".     testPasswordEncoding(TestSecurityConfiguration.class, password, password). }
false;public;0;4;;@Test public void userDetailsServiceWhenPasswordEncoderBeanPresent() {     testPasswordEncoding(TestConfigWithPasswordEncoder.class, "secret", "secret"). }
false;public;0;7;;@Test public void userDetailsServiceWhenClientRegistrationRepositoryBeanPresent() {     this.contextRunner.withUserConfiguration(TestConfigWithClientRegistrationRepository.class).run(((context) -> assertThat(context).doesNotHaveBean(InMemoryUserDetailsManager.class))). }
false;public;0;7;;@Test public void generatedPasswordShouldNotBePrintedIfAuthenticationManagerBuilderIsUsed() {     this.contextRunner.withUserConfiguration(TestConfigWithAuthenticationManagerBuilder.class).run(((context) -> assertThat(this.output.toString()).doesNotContain("Using generated security password: "))). }
false;private;3;12;;private void testPasswordEncoding(Class<?> configClass, String providedPassword, String expectedPassword) {     this.contextRunner.withUserConfiguration(configClass).withPropertyValues("spring.security.user.password=" + providedPassword).run(((context) -> {         InMemoryUserDetailsManager userDetailsService = context.getBean(InMemoryUserDetailsManager.class).         String password = userDetailsService.loadUserByUsername("user").getPassword().         assertThat(password).isEqualTo(expectedPassword).     })). }
false;public;0;7;;@Bean public AuthenticationManager myAuthenticationManager() {     AuthenticationProvider authenticationProvider = new TestingAuthenticationProvider().     this.authenticationManager = new ProviderManager(Collections.singletonList(authenticationProvider)).     return this.authenticationManager. }
false;public;0;5;;@Bean public InMemoryUserDetailsManager myUserDetailsManager() {     return new InMemoryUserDetailsManager(User.withUsername("foo").password("bar").roles("USER").build()). }
false;public;0;4;;@Bean public AuthenticationProvider myAuthenticationProvider() {     return new TestingAuthenticationProvider(). }
false;public;0;4;;@Bean public PasswordEncoder passwordEncoder() {     return mock(PasswordEncoder.class). }
false;public;0;4;;@Bean public ClientRegistrationRepository clientRegistrationRepository() {     return mock(ClientRegistrationRepository.class). }
false;protected;1;7;;@Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {     auth.inMemoryAuthentication().withUser("hero").password("{noop}hero").roles("HERO", "USER").and().withUser("user").password("{noop}user").roles("USER"). }
false;public;0;12;;@Bean public WebSecurityConfigurerAdapter webSecurityConfigurerAdapter() {     return new WebSecurityConfigurerAdapter() {          @Override         protected void configure(AuthenticationManagerBuilder auth) throws Exception {             auth.inMemoryAuthentication().withUser("hero").password("{noop}hero").roles("HERO", "USER").and().withUser("user").password("{noop}user").roles("USER").         }     }. }
