commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void noDataSource() {     this.contextRunner.run((context) -> assertThat(context.getBeansOfType(DSLContext.class)).isEmpty()). }
false;public;0;22;;@Test public void jooqWithoutTx() {     this.contextRunner.withUserConfiguration(JooqDataSourceConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean(PlatformTransactionManager.class).         assertThat(context).doesNotHaveBean(SpringTransactionProvider.class).         DSLContext dsl = context.getBean(DSLContext.class).         dsl.execute("create table jooqtest (name varchar(255) primary key).").         dsl.transaction(new AssertFetch(dsl, "select count(*) as total from jooqtest.", "0")).         dsl.transaction(new ExecuteSql(dsl, "insert into jooqtest (name) values ('foo').")).         dsl.transaction(new AssertFetch(dsl, "select count(*) as total from jooqtest.", "1")).         assertThatExceptionOfType(DataIntegrityViolationException.class).isThrownBy(() -> dsl.transaction(new ExecuteSql(dsl, "insert into jooqtest (name) values ('bar').", "insert into jooqtest (name) values ('foo')."))).         dsl.transaction(new AssertFetch(dsl, "select count(*) as total from jooqtest.", "2")).     }). }
false;public;0;25;;@Test public void jooqWithTx() {     this.contextRunner.withUserConfiguration(JooqDataSourceConfiguration.class, TxManagerConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(PlatformTransactionManager.class).         DSLContext dsl = context.getBean(DSLContext.class).         assertThat(dsl.configuration().dialect()).isEqualTo(SQLDialect.HSQLDB).         dsl.execute("create table jooqtest_tx (name varchar(255) primary key).").         dsl.transaction(new AssertFetch(dsl, "select count(*) as total from jooqtest_tx.", "0")).         dsl.transaction(new ExecuteSql(dsl, "insert into jooqtest_tx (name) values ('foo').")).         dsl.transaction(new AssertFetch(dsl, "select count(*) as total from jooqtest_tx.", "1")).         assertThatExceptionOfType(DataIntegrityViolationException.class).isThrownBy(() -> dsl.transaction(new ExecuteSql(dsl, "insert into jooqtest (name) values ('bar').", "insert into jooqtest (name) values ('foo')."))).         dsl.transaction(new AssertFetch(dsl, "select count(*) as total from jooqtest_tx.", "1")).     }). }
false;public;0;30;;@Test public void customProvidersArePickedUp() {     this.contextRunner.withUserConfiguration(JooqDataSourceConfiguration.class, TxManagerConfiguration.class, TestRecordMapperProvider.class, TestRecordUnmapperProvider.class, TestRecordListenerProvider.class, TestExecuteListenerProvider.class, TestVisitListenerProvider.class, TestTransactionListenerProvider.class, TestExecutorProvider.class).run((context) -> {         DSLContext dsl = context.getBean(DSLContext.class).         assertThat(dsl.configuration().recordMapperProvider().getClass()).isEqualTo(TestRecordMapperProvider.class).         assertThat(dsl.configuration().recordUnmapperProvider().getClass()).isEqualTo(TestRecordUnmapperProvider.class).         assertThat(dsl.configuration().executorProvider().getClass()).isEqualTo(TestExecutorProvider.class).         assertThat(dsl.configuration().recordListenerProviders().length).isEqualTo(1).         ExecuteListenerProvider[] executeListenerProviders = dsl.configuration().executeListenerProviders().         assertThat(executeListenerProviders.length).isEqualTo(2).         assertThat(executeListenerProviders[0]).isInstanceOf(DefaultExecuteListenerProvider.class).         assertThat(executeListenerProviders[1]).isInstanceOf(TestExecuteListenerProvider.class).         assertThat(dsl.configuration().visitListenerProviders().length).isEqualTo(1).         assertThat(dsl.configuration().transactionListenerProviders().length).isEqualTo(1).     }). }
false;public;0;8;;@Test public void relaxedBindingOfSqlDialect() {     this.contextRunner.withUserConfiguration(JooqDataSourceConfiguration.class).withPropertyValues("spring.jooq.sql-dialect:PoSTGrES").run((context) -> assertThat(context.getBean(org.jooq.Configuration.class).dialect()).isEqualTo(SQLDialect.POSTGRES)). }
false;public;1;5;;@Override public void run(org.jooq.Configuration configuration) {     assertThat(this.dsl.fetch(this.sql).getValue(0, 0).toString()).isEqualTo(this.expected). }
false;public;1;6;;@Override public void run(org.jooq.Configuration configuration) {     for (String statement : this.sql) {         this.dsl.execute(statement).     } }
false;public;0;5;;@Bean public DataSource jooqDataSource() {     return DataSourceBuilder.create().url("jdbc:hsqldb:mem:jooqtest").username("sa").build(). }
false;public;1;4;;@Bean public PlatformTransactionManager transactionManager(DataSource dataSource) {     return new DataSourceTransactionManager(dataSource). }
false;public;2;5;;@Override public <R extends Record, E> RecordMapper<R, E> provide(RecordType<R> recordType, Class<? extends E> aClass) {     return null. }
false;public;2;5;;@Override public <E, R extends Record> RecordUnmapper<E, R> provide(Class<? extends E> aClass, RecordType<R> recordType) {     return null. }
false;public;0;4;;@Override public RecordListener provide() {     return null. }
false;public;0;4;;@Override public ExecuteListener provide() {     return null. }
false;public;0;4;;@Override public VisitListener provide() {     return null. }
false;public;0;4;;@Override public TransactionListener provide() {     return null. }
false;public;0;4;;@Override public Executor provide() {     return null. }
