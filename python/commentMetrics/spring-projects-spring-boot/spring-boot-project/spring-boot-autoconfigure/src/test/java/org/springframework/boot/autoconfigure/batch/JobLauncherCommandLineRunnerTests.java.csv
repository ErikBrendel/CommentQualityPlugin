commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Before public void init() {     this.context.register(BatchConfiguration.class).     this.context.refresh().     JobRepository jobRepository = this.context.getBean(JobRepository.class).     JobLauncher jobLauncher = this.context.getBean(JobLauncher.class).     this.jobs = new JobBuilderFactory(jobRepository).     PlatformTransactionManager transactionManager = this.context.getBean(PlatformTransactionManager.class).     this.steps = new StepBuilderFactory(jobRepository, transactionManager).     Tasklet tasklet = (contribution, chunkContext) -> null.     this.step = this.steps.get("step").tasklet(tasklet).build().     this.job = this.jobs.get("job").start(this.step).build().     this.jobExplorer = this.context.getBean(JobExplorer.class).     this.runner = new JobLauncherCommandLineRunner(jobLauncher, this.jobExplorer, jobRepository).     this.context.getBean(BatchConfiguration.class).clear(). }
false;public;0;4;;@After public void closeContext() {     this.context.close(). }
false;public;0;8;;@Test public void basicExecution() throws Exception {     this.runner.execute(this.job, new JobParameters()).     assertThat(this.jobExplorer.getJobInstances("job", 0, 100)).hasSize(1).     this.runner.execute(this.job, new JobParametersBuilder().addLong("id", 1L).toJobParameters()).     assertThat(this.jobExplorer.getJobInstances("job", 0, 100)).hasSize(2). }
false;public;0;8;;@Test public void incrementExistingExecution() throws Exception {     this.job = this.jobs.get("job").start(this.step).incrementer(new RunIdIncrementer()).build().     this.runner.execute(this.job, new JobParameters()).     this.runner.execute(this.job, new JobParameters()).     assertThat(this.jobExplorer.getJobInstances("job", 0, 100)).hasSize(2). }
false;public;0;10;;@Test public void retryFailedExecution() throws Exception {     this.job = this.jobs.get("job").start(this.steps.get("step").tasklet(throwingTasklet()).build()).incrementer(new RunIdIncrementer()).build().     this.runner.execute(this.job, new JobParameters()).     this.runner.execute(this.job, new JobParametersBuilder().addLong("run.id", 1L).toJobParameters()).     assertThat(this.jobExplorer.getJobInstances("job", 0, 100)).hasSize(1). }
false;public;0;15;;@Test public void runDifferentInstances() throws Exception {     this.job = this.jobs.get("job").start(this.steps.get("step").tasklet(throwingTasklet()).build()).build().     // start a job instance     JobParameters jobParameters = new JobParametersBuilder().addString("name", "foo").toJobParameters().     this.runner.execute(this.job, jobParameters).     assertThat(this.jobExplorer.getJobInstances("job", 0, 100)).hasSize(1).     // start a different job instance     JobParameters otherJobParameters = new JobParametersBuilder().addString("name", "bar").toJobParameters().     this.runner.execute(this.job, otherJobParameters).     assertThat(this.jobExplorer.getJobInstances("job", 0, 100)).hasSize(2). }
false;public;0;17;;@Test public void retryFailedExecutionOnNonRestartableJob() throws Exception {     this.job = this.jobs.get("job").preventRestart().start(this.steps.get("step").tasklet(throwingTasklet()).build()).incrementer(new RunIdIncrementer()).build().     this.runner.execute(this.job, new JobParameters()).     this.runner.execute(this.job, new JobParameters()).     // A failed job that is not restartable does not re-use the job params of     // the last execution, but creates a new job instance when running it again.     assertThat(this.jobExplorer.getJobInstances("job", 0, 100)).hasSize(2).     assertThatExceptionOfType(JobRestartException.class).isThrownBy(() -> {         // try to re-run a failed execution         this.runner.execute(this.job, new JobParametersBuilder().addLong("run.id", 1L).toJobParameters()).         fail("expected JobRestartException").     }).withMessageContaining("JobInstance already exists and is not restartable"). }
false;public;0;14;;@Test public void retryFailedExecutionWithNonIdentifyingParameters() throws Exception {     this.job = this.jobs.get("job").start(this.steps.get("step").tasklet(throwingTasklet()).build()).incrementer(new RunIdIncrementer()).build().     JobParameters jobParameters = new JobParametersBuilder().addLong("id", 1L, false).addLong("foo", 2L, false).toJobParameters().     this.runner.execute(this.job, jobParameters).     assertThat(this.jobExplorer.getJobInstances("job", 0, 100)).hasSize(1).     // try to re-run a failed execution with non identifying parameters     this.runner.execute(this.job, new JobParametersBuilder(jobParameters).addLong("run.id", 1L).toJobParameters()).     assertThat(this.jobExplorer.getJobInstances("job", 0, 100)).hasSize(1). }
false;public;0;31;;@Test public void retryFailedExecutionWithDifferentNonIdentifyingParametersFromPreviousExecution() throws Exception {     this.job = this.jobs.get("job").start(this.steps.get("step").tasklet(throwingTasklet()).build()).incrementer(new RunIdIncrementer()).build().     JobParameters jobParameters = new JobParametersBuilder().addLong("id", 1L, false).addLong("foo", 2L, false).toJobParameters().     this.runner.execute(this.job, jobParameters).     assertThat(this.jobExplorer.getJobInstances("job", 0, 100)).hasSize(1).     // try to re-run a failed execution with non identifying parameters     this.runner.execute(this.job, new JobParametersBuilder().addLong("run.id", 1L).addLong("id", 2L, false).addLong("foo", 3L, false).toJobParameters()).     assertThat(this.jobExplorer.getJobInstances("job", 0, 100)).hasSize(1).     JobInstance jobInstance = this.jobExplorer.getJobInstance(0L).     assertThat(this.jobExplorer.getJobExecutions(jobInstance)).hasSize(2).     // first execution     JobExecution firstJobExecution = this.jobExplorer.getJobExecution(0L).     JobParameters parameters = firstJobExecution.getJobParameters().     assertThat(parameters.getLong("run.id")).isEqualTo(1L).     assertThat(parameters.getLong("id")).isEqualTo(1L).     assertThat(parameters.getLong("foo")).isEqualTo(2L).     // second execution     JobExecution secondJobExecution = this.jobExplorer.getJobExecution(1L).     parameters = secondJobExecution.getJobParameters().     // identifying parameters should be the same as previous execution     assertThat(parameters.getLong("run.id")).isEqualTo(1L).     // non-identifying parameters should be the newly specified ones     assertThat(parameters.getLong("id")).isEqualTo(2L).     assertThat(parameters.getLong("foo")).isEqualTo(3L). }
false;private;0;5;;private Tasklet throwingTasklet() {     return (contribution, chunkContext) -> {         throw new RuntimeException("Planned").     }. }
false;public;0;3;;public void clear() {     this.jobRepositoryFactory.clear(). }
false;public;0;4;;@Override public JobRepository getJobRepository() {     return this.jobRepository. }
false;public;0;4;;@Override public PlatformTransactionManager getTransactionManager() {     return this.transactionManager. }
false;public;0;7;;@Override public JobLauncher getJobLauncher() {     SimpleJobLauncher launcher = new SimpleJobLauncher().     launcher.setJobRepository(this.jobRepository).     launcher.setTaskExecutor(new SyncTaskExecutor()).     return launcher. }
false;public;0;4;;@Override public JobExplorer getJobExplorer() throws Exception {     return new MapJobExplorerFactoryBean(this.jobRepositoryFactory).getObject(). }
