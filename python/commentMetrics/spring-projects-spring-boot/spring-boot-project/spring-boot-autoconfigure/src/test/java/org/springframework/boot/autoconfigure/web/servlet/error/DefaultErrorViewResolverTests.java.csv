commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext().     applicationContext.refresh().     this.resourceProperties = new ResourceProperties().     TemplateAvailabilityProviders templateAvailabilityProviders = new TestTemplateAvailabilityProviders(this.templateAvailabilityProvider).     this.resolver = new DefaultErrorViewResolver(applicationContext, this.resourceProperties, templateAvailabilityProviders). }
false;public;0;6;;@Test public void createWhenApplicationContextIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new DefaultErrorViewResolver(null, new ResourceProperties())).withMessageContaining("ApplicationContext must not be null"). }
false;public;0;6;;@Test public void createWhenResourcePropertiesIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new DefaultErrorViewResolver(mock(ApplicationContext.class), null)).withMessageContaining("ResourceProperties must not be null"). }
false;public;0;6;;@Test public void resolveWhenNoMatchShouldReturnNull() {     ModelAndView resolved = this.resolver.resolveErrorView(this.request, HttpStatus.NOT_FOUND, this.model).     assertThat(resolved).isNull(). }
false;public;0;14;;@Test public void resolveWhenExactTemplateMatchShouldReturnTemplate() {     given(this.templateAvailabilityProvider.isTemplateAvailable(eq("error/404"), any(Environment.class), any(ClassLoader.class), any(ResourceLoader.class))).willReturn(true).     ModelAndView resolved = this.resolver.resolveErrorView(this.request, HttpStatus.NOT_FOUND, this.model).     assertThat(resolved).isNotNull().     assertThat(resolved.getViewName()).isEqualTo("error/404").     verify(this.templateAvailabilityProvider).isTemplateAvailable(eq("error/404"), any(Environment.class), any(ClassLoader.class), any(ResourceLoader.class)).     verifyNoMoreInteractions(this.templateAvailabilityProvider). }
false;public;0;9;;@Test public void resolveWhenSeries5xxTemplateMatchShouldReturnTemplate() {     given(this.templateAvailabilityProvider.isTemplateAvailable(eq("error/5xx"), any(Environment.class), any(ClassLoader.class), any(ResourceLoader.class))).willReturn(true).     ModelAndView resolved = this.resolver.resolveErrorView(this.request, HttpStatus.SERVICE_UNAVAILABLE, this.model).     assertThat(resolved.getViewName()).isEqualTo("error/5xx"). }
false;public;0;9;;@Test public void resolveWhenSeries4xxTemplateMatchShouldReturnTemplate() {     given(this.templateAvailabilityProvider.isTemplateAvailable(eq("error/4xx"), any(Environment.class), any(ClassLoader.class), any(ResourceLoader.class))).willReturn(true).     ModelAndView resolved = this.resolver.resolveErrorView(this.request, HttpStatus.NOT_FOUND, this.model).     assertThat(resolved.getViewName()).isEqualTo("error/4xx"). }
false;public;0;9;;@Test public void resolveWhenExactResourceMatchShouldReturnResource() throws Exception {     setResourceLocation("/exact").     ModelAndView resolved = this.resolver.resolveErrorView(this.request, HttpStatus.NOT_FOUND, this.model).     MockHttpServletResponse response = render(resolved).     assertThat(response.getContentAsString().trim()).isEqualTo("exact/404").     assertThat(response.getContentType()).isEqualTo(MediaType.TEXT_HTML_VALUE). }
false;public;0;9;;@Test public void resolveWhenSeries4xxResourceMatchShouldReturnResource() throws Exception {     setResourceLocation("/4xx").     ModelAndView resolved = this.resolver.resolveErrorView(this.request, HttpStatus.NOT_FOUND, this.model).     MockHttpServletResponse response = render(resolved).     assertThat(response.getContentAsString().trim()).isEqualTo("4xx/4xx").     assertThat(response.getContentType()).isEqualTo(MediaType.TEXT_HTML_VALUE). }
false;public;0;9;;@Test public void resolveWhenSeries5xxResourceMatchShouldReturnResource() throws Exception {     setResourceLocation("/5xx").     ModelAndView resolved = this.resolver.resolveErrorView(this.request, HttpStatus.INTERNAL_SERVER_ERROR, this.model).     MockHttpServletResponse response = render(resolved).     assertThat(response.getContentAsString().trim()).isEqualTo("5xx/5xx").     assertThat(response.getContentType()).isEqualTo(MediaType.TEXT_HTML_VALUE). }
false;public;0;10;;@Test public void resolveWhenTemplateAndResourceMatchShouldFavorTemplate() {     setResourceLocation("/exact").     given(this.templateAvailabilityProvider.isTemplateAvailable(eq("error/404"), any(Environment.class), any(ClassLoader.class), any(ResourceLoader.class))).willReturn(true).     ModelAndView resolved = this.resolver.resolveErrorView(this.request, HttpStatus.NOT_FOUND, this.model).     assertThat(resolved.getViewName()).isEqualTo("error/404"). }
false;public;0;13;;@Test public void resolveWhenExactResourceMatchAndSeriesTemplateMatchShouldFavorResource() throws Exception {     setResourceLocation("/exact").     given(this.templateAvailabilityProvider.isTemplateAvailable(eq("error/4xx"), any(Environment.class), any(ClassLoader.class), any(ResourceLoader.class))).willReturn(true).     ModelAndView resolved = this.resolver.resolveErrorView(this.request, HttpStatus.NOT_FOUND, this.model).     MockHttpServletResponse response = render(resolved).     assertThat(response.getContentAsString().trim()).isEqualTo("exact/404").     assertThat(response.getContentType()).isEqualTo(MediaType.TEXT_HTML_VALUE). }
false;public;0;4;;@Test public void orderShouldBeLowest() {     assertThat(this.resolver.getOrder()).isEqualTo(Ordered.LOWEST_PRECEDENCE). }
false;public;0;5;;@Test public void setOrderShouldChangeOrder() {     this.resolver.setOrder(123).     assertThat(this.resolver.getOrder()).isEqualTo(123). }
false;private;1;5;;private void setResourceLocation(String path) {     String packageName = getClass().getPackage().getName().     this.resourceProperties.setStaticLocations(new String[] { "classpath:" + packageName.replace('.', '/') + path + "/" }). }
false;private;1;5;;private MockHttpServletResponse render(ModelAndView modelAndView) throws Exception {     MockHttpServletResponse response = new MockHttpServletResponse().     modelAndView.getView().render(this.model, this.request, response).     return response. }
