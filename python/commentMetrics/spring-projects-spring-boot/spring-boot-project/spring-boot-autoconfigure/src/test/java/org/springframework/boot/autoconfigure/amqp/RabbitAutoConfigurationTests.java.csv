commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testDefaultRabbitConfiguration() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).run((context) -> {         RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class).         RabbitMessagingTemplate messagingTemplate = context.getBean(RabbitMessagingTemplate.class).         CachingConnectionFactory connectionFactory = context.getBean(CachingConnectionFactory.class).         RabbitAdmin amqpAdmin = context.getBean(RabbitAdmin.class).         assertThat(rabbitTemplate.getConnectionFactory()).isEqualTo(connectionFactory).         assertThat(getMandatory(rabbitTemplate)).isFalse().         assertThat(messagingTemplate.getRabbitTemplate()).isEqualTo(rabbitTemplate).         assertThat(amqpAdmin).isNotNull().         assertThat(connectionFactory.getHost()).isEqualTo("localhost").         assertThat(connectionFactory.isPublisherConfirms()).isFalse().         assertThat(connectionFactory.isPublisherReturns()).isFalse().         assertThat(context.containsBean("rabbitListenerContainerFactory")).as("Listener container factory should be created by default").isTrue().     }). }
false;public;0;12;;@Test public void testDefaultRabbitTemplateConfiguration() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).run((context) -> {         RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class).         RabbitTemplate defaultRabbitTemplate = new RabbitTemplate().         assertThat(rabbitTemplate.getRoutingKey()).isEqualTo(defaultRabbitTemplate.getRoutingKey()).         assertThat(rabbitTemplate.getExchange()).isEqualTo(defaultRabbitTemplate.getExchange()).     }). }
false;public;0;13;;@Test public void testDefaultConnectionFactoryConfiguration() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).run((context) -> {         RabbitProperties properties = new RabbitProperties().         com.rabbitmq.client.ConnectionFactory rabbitConnectionFactory = getTargetConnectionFactory(context).         assertThat(rabbitConnectionFactory.getUsername()).isEqualTo(properties.getUsername()).         assertThat(rabbitConnectionFactory.getPassword()).isEqualTo(properties.getPassword()).     }). }
false;public;0;21;;@Test public void testConnectionFactoryWithOverrides() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.host:remote-server", "spring.rabbitmq.port:9000", "spring.rabbitmq.username:alice", "spring.rabbitmq.password:secret", "spring.rabbitmq.virtual_host:/vhost", "spring.rabbitmq.connection-timeout:123").run((context) -> {         CachingConnectionFactory connectionFactory = context.getBean(CachingConnectionFactory.class).         assertThat(connectionFactory.getHost()).isEqualTo("remote-server").         assertThat(connectionFactory.getPort()).isEqualTo(9000).         assertThat(connectionFactory.getVirtualHost()).isEqualTo("/vhost").         com.rabbitmq.client.ConnectionFactory rcf = connectionFactory.getRabbitConnectionFactory().         assertThat(rcf.getConnectionTimeout()).isEqualTo(123).         assertThat((Address[]) ReflectionTestUtils.getField(connectionFactory, "addresses")).hasSize(1).     }). }
false;public;0;23;;@Test public void testConnectionFactoryWithCustomConnectionNameStrategy() {     this.contextRunner.withUserConfiguration(ConnectionNameStrategyConfiguration.class).run((context) -> {         CachingConnectionFactory connectionFactory = context.getBean(CachingConnectionFactory.class).         Address[] addresses = (Address[]) ReflectionTestUtils.getField(connectionFactory, "addresses").         assertThat(addresses).hasSize(1).         com.rabbitmq.client.ConnectionFactory rcf = mock(com.rabbitmq.client.ConnectionFactory.class).         given(rcf.newConnection(isNull(), eq(addresses), anyString())).willReturn(mock(Connection.class)).         ReflectionTestUtils.setField(connectionFactory, "rabbitConnectionFactory", rcf).         connectionFactory.createConnection().         verify(rcf).newConnection(isNull(), eq(addresses), eq("test#0")).         connectionFactory.resetConnection().         connectionFactory.createConnection().         verify(rcf).newConnection(isNull(), eq(addresses), eq("test#1")).     }). }
false;public;0;9;;@Test public void testConnectionFactoryEmptyVirtualHost() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.virtual_host:").run((context) -> {         CachingConnectionFactory connectionFactory = context.getBean(CachingConnectionFactory.class).         assertThat(connectionFactory.getVirtualHost()).isEqualTo("/").     }). }
false;public;0;9;;@Test public void testConnectionFactoryVirtualHostNoLeadingSlash() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.virtual_host:foo").run((context) -> {         CachingConnectionFactory connectionFactory = context.getBean(CachingConnectionFactory.class).         assertThat(connectionFactory.getVirtualHost()).isEqualTo("foo").     }). }
false;public;0;10;;@Test public void testConnectionFactoryVirtualHostMultiLeadingSlashes() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.virtual_host:///foo").run((context) -> {         CachingConnectionFactory connectionFactory = context.getBean(CachingConnectionFactory.class).         assertThat(connectionFactory.getVirtualHost()).isEqualTo("///foo").     }). }
false;public;0;9;;@Test public void testConnectionFactoryDefaultVirtualHost() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.virtual_host:/").run((context) -> {         CachingConnectionFactory connectionFactory = context.getBean(CachingConnectionFactory.class).         assertThat(connectionFactory.getVirtualHost()).isEqualTo("/").     }). }
false;public;0;14;;@Test public void testConnectionFactoryPublisherSettings() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.publisher-confirms=true", "spring.rabbitmq.publisher-returns=true").run((context) -> {         CachingConnectionFactory connectionFactory = context.getBean(CachingConnectionFactory.class).         RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class).         assertThat(connectionFactory.isPublisherConfirms()).isTrue().         assertThat(connectionFactory.isPublisherReturns()).isTrue().         assertThat(getMandatory(rabbitTemplate)).isTrue().     }). }
false;public;0;11;;@Test public void testRabbitTemplateMessageConverters() {     this.contextRunner.withUserConfiguration(MessageConvertersConfiguration.class).run((context) -> {         RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class).         assertThat(rabbitTemplate.getMessageConverter()).isSameAs(context.getBean("myMessageConverter")).         assertThat(rabbitTemplate).hasFieldOrPropertyWithValue("retryTemplate", null).     }). }
false;public;0;29;;@Test public void testRabbitTemplateRetry() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.template.retry.enabled:true", "spring.rabbitmq.template.retry.maxAttempts:4", "spring.rabbitmq.template.retry.initialInterval:2000", "spring.rabbitmq.template.retry.multiplier:1.5", "spring.rabbitmq.template.retry.maxInterval:5000", "spring.rabbitmq.template.receiveTimeout:123", "spring.rabbitmq.template.replyTimeout:456").run((context) -> {         RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class).         assertThat(rabbitTemplate).hasFieldOrPropertyWithValue("receiveTimeout", 123L).         assertThat(rabbitTemplate).hasFieldOrPropertyWithValue("replyTimeout", 456L).         RetryTemplate retryTemplate = (RetryTemplate) ReflectionTestUtils.getField(rabbitTemplate, "retryTemplate").         assertThat(retryTemplate).isNotNull().         SimpleRetryPolicy retryPolicy = (SimpleRetryPolicy) ReflectionTestUtils.getField(retryTemplate, "retryPolicy").         ExponentialBackOffPolicy backOffPolicy = (ExponentialBackOffPolicy) ReflectionTestUtils.getField(retryTemplate, "backOffPolicy").         assertThat(retryPolicy.getMaxAttempts()).isEqualTo(4).         assertThat(backOffPolicy.getInitialInterval()).isEqualTo(2000).         assertThat(backOffPolicy.getMultiplier()).isEqualTo(1.5).         assertThat(backOffPolicy.getMaxInterval()).isEqualTo(5000).     }). }
false;public;0;18;;@Test public void testRabbitTemplateRetryWithCustomizer() {     this.contextRunner.withUserConfiguration(RabbitRetryTemplateCustomizerConfiguration.class).withPropertyValues("spring.rabbitmq.template.retry.enabled:true", "spring.rabbitmq.template.retry.initialInterval:2000").run((context) -> {         RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class).         RetryTemplate retryTemplate = (RetryTemplate) ReflectionTestUtils.getField(rabbitTemplate, "retryTemplate").         assertThat(retryTemplate).isNotNull().         ExponentialBackOffPolicy backOffPolicy = (ExponentialBackOffPolicy) ReflectionTestUtils.getField(retryTemplate, "backOffPolicy").         assertThat(backOffPolicy).isSameAs(context.getBean(RabbitRetryTemplateCustomizerConfiguration.class).backOffPolicy).         assertThat(backOffPolicy.getInitialInterval()).isEqualTo(100).     }). }
false;public;0;12;;@Test public void testRabbitTemplateExchangeAndRoutingKey() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.template.exchange:my-exchange", "spring.rabbitmq.template.routing-key:my-routing-key").run((context) -> {         RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class).         assertThat(rabbitTemplate.getExchange()).isEqualTo("my-exchange").         assertThat(rabbitTemplate.getRoutingKey()).isEqualTo("my-routing-key").     }). }
false;public;0;11;;@Test public void testRabbitTemplateDefaultReceiveQueue() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.template.default-receive-queue:default-queue").run((context) -> {         RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class).         assertThat(rabbitTemplate).hasFieldOrPropertyWithValue("defaultReceiveQueue", "default-queue").     }). }
false;public;0;9;;@Test public void testRabbitTemplateMandatory() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.template.mandatory:true").run((context) -> {         RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class).         assertThat(getMandatory(rabbitTemplate)).isTrue().     }). }
false;public;0;10;;@Test public void testRabbitTemplateMandatoryDisabledEvenIfPublisherReturnsIsSet() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.template.mandatory:false", "spring.rabbitmq.publisher-returns=true").run((context) -> {         RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class).         assertThat(getMandatory(rabbitTemplate)).isFalse().     }). }
false;public;0;13;;@Test public void testConnectionFactoryBackOff() {     this.contextRunner.withUserConfiguration(TestConfiguration2.class).run((context) -> {         RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class).         CachingConnectionFactory connectionFactory = context.getBean(CachingConnectionFactory.class).         assertThat(connectionFactory).isEqualTo(rabbitTemplate.getConnectionFactory()).         assertThat(connectionFactory.getHost()).isEqualTo("otherserver").         assertThat(connectionFactory.getPort()).isEqualTo(8001).     }). }
false;public;0;18;;@Test public void testConnectionFactoryCacheSettings() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.cache.channel.size=23", "spring.rabbitmq.cache.channel.checkoutTimeout=1000", "spring.rabbitmq.cache.connection.mode=CONNECTION", "spring.rabbitmq.cache.connection.size=2").run((context) -> {         CachingConnectionFactory connectionFactory = context.getBean(CachingConnectionFactory.class).         assertThat(connectionFactory.getChannelCacheSize()).isEqualTo(23).         assertThat(connectionFactory.getCacheMode()).isEqualTo(CacheMode.CONNECTION).         assertThat(connectionFactory.getConnectionCacheSize()).isEqualTo(2).         assertThat(connectionFactory).hasFieldOrPropertyWithValue("channelCheckoutTimeout", 1000L).     }). }
false;public;0;9;;@Test public void testRabbitTemplateBackOff() {     this.contextRunner.withUserConfiguration(TestConfiguration3.class).run((context) -> {         RabbitTemplate rabbitTemplate = context.getBean(RabbitTemplate.class).         assertThat(rabbitTemplate.getMessageConverter()).isEqualTo(context.getBean("testMessageConverter")).     }). }
false;public;0;10;;@Test public void testRabbitMessagingTemplateBackOff() {     this.contextRunner.withUserConfiguration(TestConfiguration4.class).run((context) -> {         RabbitMessagingTemplate messagingTemplate = context.getBean(RabbitMessagingTemplate.class).         assertThat(messagingTemplate.getDefaultDestination()).isEqualTo("fooBar").     }). }
false;public;0;11;;@Test public void testStaticQueues() {     // There should NOT be an AmqpAdmin bean when dynamic is switch to false     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.dynamic:false").run((context) -> assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> context.getBean(AmqpAdmin.class)).withMessageContaining("No qualifying bean of type '" + AmqpAdmin.class.getName() + "'")). }
false;public;0;11;;@Test public void testEnableRabbitCreateDefaultContainerFactory() {     this.contextRunner.withUserConfiguration(EnableRabbitConfiguration.class).run((context) -> {         RabbitListenerContainerFactory<?> rabbitListenerContainerFactory = context.getBean("rabbitListenerContainerFactory", RabbitListenerContainerFactory.class).         assertThat(rabbitListenerContainerFactory.getClass()).isEqualTo(SimpleRabbitListenerContainerFactory.class).     }). }
false;public;0;12;;@Test public void testRabbitListenerContainerFactoryBackOff() {     this.contextRunner.withUserConfiguration(TestConfiguration5.class).run((context) -> {         SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory = context.getBean("rabbitListenerContainerFactory", SimpleRabbitListenerContainerFactory.class).         rabbitListenerContainerFactory.setTxSize(10).         verify(rabbitListenerContainerFactory).setTxSize(10).         assertThat(rabbitListenerContainerFactory.getAdviceChain()).isNull().     }). }
false;public;0;34;;@Test public void testSimpleRabbitListenerContainerFactoryWithCustomSettings() {     this.contextRunner.withUserConfiguration(MessageConvertersConfiguration.class, MessageRecoverersConfiguration.class).withPropertyValues("spring.rabbitmq.listener.simple.retry.enabled:true", "spring.rabbitmq.listener.simple.retry.maxAttempts:4", "spring.rabbitmq.listener.simple.retry.initialInterval:2000", "spring.rabbitmq.listener.simple.retry.multiplier:1.5", "spring.rabbitmq.listener.simple.retry.maxInterval:5000", "spring.rabbitmq.listener.simple.autoStartup:false", "spring.rabbitmq.listener.simple.acknowledgeMode:manual", "spring.rabbitmq.listener.simple.concurrency:5", "spring.rabbitmq.listener.simple.maxConcurrency:10", "spring.rabbitmq.listener.simple.prefetch:40", "spring.rabbitmq.listener.simple.defaultRequeueRejected:false", "spring.rabbitmq.listener.simple.idleEventInterval:5", "spring.rabbitmq.listener.simple.transactionSize:20", "spring.rabbitmq.listener.simple.missingQueuesFatal:false").run((context) -> {         SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory = context.getBean("rabbitListenerContainerFactory", SimpleRabbitListenerContainerFactory.class).         assertThat(rabbitListenerContainerFactory).hasFieldOrPropertyWithValue("concurrentConsumers", 5).         assertThat(rabbitListenerContainerFactory).hasFieldOrPropertyWithValue("maxConcurrentConsumers", 10).         assertThat(rabbitListenerContainerFactory).hasFieldOrPropertyWithValue("txSize", 20).         assertThat(rabbitListenerContainerFactory).hasFieldOrPropertyWithValue("missingQueuesFatal", false).         checkCommonProps(context, rabbitListenerContainerFactory).     }). }
false;public;0;29;;@Test public void testDirectRabbitListenerContainerFactoryWithCustomSettings() {     this.contextRunner.withUserConfiguration(MessageConvertersConfiguration.class, MessageRecoverersConfiguration.class).withPropertyValues("spring.rabbitmq.listener.type:direct", "spring.rabbitmq.listener.direct.retry.enabled:true", "spring.rabbitmq.listener.direct.retry.maxAttempts:4", "spring.rabbitmq.listener.direct.retry.initialInterval:2000", "spring.rabbitmq.listener.direct.retry.multiplier:1.5", "spring.rabbitmq.listener.direct.retry.maxInterval:5000", "spring.rabbitmq.listener.direct.autoStartup:false", "spring.rabbitmq.listener.direct.acknowledgeMode:manual", "spring.rabbitmq.listener.direct.consumers-per-queue:5", "spring.rabbitmq.listener.direct.prefetch:40", "spring.rabbitmq.listener.direct.defaultRequeueRejected:false", "spring.rabbitmq.listener.direct.idleEventInterval:5", "spring.rabbitmq.listener.direct.missingQueuesFatal:true").run((context) -> {         DirectRabbitListenerContainerFactory rabbitListenerContainerFactory = context.getBean("rabbitListenerContainerFactory", DirectRabbitListenerContainerFactory.class).         assertThat(rabbitListenerContainerFactory).hasFieldOrPropertyWithValue("consumersPerQueue", 5).         assertThat(rabbitListenerContainerFactory).hasFieldOrPropertyWithValue("missingQueuesFatal", true).         checkCommonProps(context, rabbitListenerContainerFactory).     }). }
false;public;0;15;;@Test public void testSimpleRabbitListenerContainerFactoryRetryWithCustomizer() {     this.contextRunner.withUserConfiguration(RabbitRetryTemplateCustomizerConfiguration.class).withPropertyValues("spring.rabbitmq.listener.simple.retry.enabled:true", "spring.rabbitmq.listener.simple.retry.maxAttempts:4").run((context) -> {         SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory = context.getBean("rabbitListenerContainerFactory", SimpleRabbitListenerContainerFactory.class).         assertListenerRetryTemplate(rabbitListenerContainerFactory, context.getBean(RabbitRetryTemplateCustomizerConfiguration.class).retryPolicy).     }). }
false;public;0;16;;@Test public void testDirectRabbitListenerContainerFactoryRetryWithCustomizer() {     this.contextRunner.withUserConfiguration(RabbitRetryTemplateCustomizerConfiguration.class).withPropertyValues("spring.rabbitmq.listener.type:direct", "spring.rabbitmq.listener.direct.retry.enabled:true", "spring.rabbitmq.listener.direct.retry.maxAttempts:4").run((context) -> {         DirectRabbitListenerContainerFactory rabbitListenerContainerFactory = context.getBean("rabbitListenerContainerFactory", DirectRabbitListenerContainerFactory.class).         assertListenerRetryTemplate(rabbitListenerContainerFactory, context.getBean(RabbitRetryTemplateCustomizerConfiguration.class).retryPolicy).     }). }
false;private;2;11;;private void assertListenerRetryTemplate(AbstractRabbitListenerContainerFactory<?> rabbitListenerContainerFactory, RetryPolicy retryPolicy) {     Advice[] adviceChain = rabbitListenerContainerFactory.getAdviceChain().     assertThat(adviceChain).isNotNull().     assertThat(adviceChain.length).isEqualTo(1).     Advice advice = adviceChain[0].     RetryTemplate retryTemplate = (RetryTemplate) ReflectionTestUtils.getField(advice, "retryOperations").     assertThat(retryTemplate).hasFieldOrPropertyWithValue("retryPolicy", retryPolicy). }
false;public;0;15;;@Test public void testRabbitListenerContainerFactoryConfigurersAreAvailable() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.listener.simple.concurrency:5", "spring.rabbitmq.listener.simple.maxConcurrency:10", "spring.rabbitmq.listener.simple.prefetch:40", "spring.rabbitmq.listener.direct.consumers-per-queue:5", "spring.rabbitmq.listener.direct.prefetch:40").run((context) -> {         assertThat(context).hasSingleBean(SimpleRabbitListenerContainerFactoryConfigurer.class).         assertThat(context).hasSingleBean(DirectRabbitListenerContainerFactoryConfigurer.class).     }). }
false;public;0;19;;@Test public void testSimpleRabbitListenerContainerFactoryConfigurerUsesConfig() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.listener.type:direct", "spring.rabbitmq.listener.simple.concurrency:5", "spring.rabbitmq.listener.simple.maxConcurrency:10", "spring.rabbitmq.listener.simple.prefetch:40").run((context) -> {         SimpleRabbitListenerContainerFactoryConfigurer configurer = context.getBean(SimpleRabbitListenerContainerFactoryConfigurer.class).         SimpleRabbitListenerContainerFactory factory = mock(SimpleRabbitListenerContainerFactory.class).         configurer.configure(factory, mock(ConnectionFactory.class)).         verify(factory).setConcurrentConsumers(5).         verify(factory).setMaxConcurrentConsumers(10).         verify(factory).setPrefetchCount(40).     }). }
false;public;0;17;;@Test public void testDirectRabbitListenerContainerFactoryConfigurerUsesConfig() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.listener.type:simple", "spring.rabbitmq.listener.direct.consumers-per-queue:5", "spring.rabbitmq.listener.direct.prefetch:40").run((context) -> {         DirectRabbitListenerContainerFactoryConfigurer configurer = context.getBean(DirectRabbitListenerContainerFactoryConfigurer.class).         DirectRabbitListenerContainerFactory factory = mock(DirectRabbitListenerContainerFactory.class).         configurer.configure(factory, mock(ConnectionFactory.class)).         verify(factory).setConsumersPerQueue(5).         verify(factory).setPrefetchCount(40).     }). }
false;private;2;36;;private void checkCommonProps(AssertableApplicationContext context, AbstractRabbitListenerContainerFactory<?> containerFactory) {     assertThat(containerFactory).hasFieldOrPropertyWithValue("autoStartup", Boolean.FALSE).     assertThat(containerFactory).hasFieldOrPropertyWithValue("acknowledgeMode", AcknowledgeMode.MANUAL).     assertThat(containerFactory).hasFieldOrPropertyWithValue("prefetchCount", 40).     assertThat(containerFactory).hasFieldOrPropertyWithValue("messageConverter", context.getBean("myMessageConverter")).     assertThat(containerFactory).hasFieldOrPropertyWithValue("defaultRequeueRejected", Boolean.FALSE).     assertThat(containerFactory).hasFieldOrPropertyWithValue("idleEventInterval", 5L).     Advice[] adviceChain = containerFactory.getAdviceChain().     assertThat(adviceChain).isNotNull().     assertThat(adviceChain.length).isEqualTo(1).     Advice advice = adviceChain[0].     MessageRecoverer messageRecoverer = context.getBean("myMessageRecoverer", MessageRecoverer.class).     MethodInvocationRecoverer<?> mir = (MethodInvocationRecoverer<?>) ReflectionTestUtils.getField(advice, "recoverer").     Message message = mock(Message.class).     Exception ex = new Exception("test").     mir.recover(new Object[] { "foo", message }, ex).     verify(messageRecoverer).recover(message, ex).     RetryTemplate retryTemplate = (RetryTemplate) ReflectionTestUtils.getField(advice, "retryOperations").     assertThat(retryTemplate).isNotNull().     SimpleRetryPolicy retryPolicy = (SimpleRetryPolicy) ReflectionTestUtils.getField(retryTemplate, "retryPolicy").     ExponentialBackOffPolicy backOffPolicy = (ExponentialBackOffPolicy) ReflectionTestUtils.getField(retryTemplate, "backOffPolicy").     assertThat(retryPolicy.getMaxAttempts()).isEqualTo(4).     assertThat(backOffPolicy.getInitialInterval()).isEqualTo(2000).     assertThat(backOffPolicy.getMultiplier()).isEqualTo(1.5).     assertThat(backOffPolicy.getMaxInterval()).isEqualTo(5000). }
false;public;0;10;;@Test public void enableRabbitAutomatically() {     this.contextRunner.withUserConfiguration(NoEnableRabbitConfiguration.class).run((context) -> {         assertThat(context).hasBean(RabbitListenerConfigUtils.RABBIT_LISTENER_ANNOTATION_PROCESSOR_BEAN_NAME).         assertThat(context).hasBean(RabbitListenerConfigUtils.RABBIT_LISTENER_ENDPOINT_REGISTRY_BEAN_NAME).     }). }
false;public;0;11;;@Test public void customizeRequestedHeartBeat() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.requestedHeartbeat:20").run((context) -> {         com.rabbitmq.client.ConnectionFactory rabbitConnectionFactory = getTargetConnectionFactory(context).         assertThat(rabbitConnectionFactory.getRequestedHeartbeat()).isEqualTo(20).     }). }
false;public;0;10;;@Test public void noSslByDefault() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).run((context) -> {         com.rabbitmq.client.ConnectionFactory rabbitConnectionFactory = getTargetConnectionFactory(context).         assertThat(rabbitConnectionFactory.getSocketFactory()).isNull().         assertThat(rabbitConnectionFactory.isSSL()).isFalse().     }). }
false;public;0;12;;@Test public void enableSsl() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.ssl.enabled:true").run((context) -> {         com.rabbitmq.client.ConnectionFactory rabbitConnectionFactory = getTargetConnectionFactory(context).         assertThat(rabbitConnectionFactory.isSSL()).isTrue().         assertThat(rabbitConnectionFactory.getSocketFactory()).as("SocketFactory must use SSL").isInstanceOf(SSLSocketFactory.class).     }). }
false;public;0;14;;@Test public // Make sure that we at least attempt to load the store void enableSslWithNonExistingKeystoreShouldFail() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.ssl.enabled:true", "spring.rabbitmq.ssl.keyStore=foo", "spring.rabbitmq.ssl.keyStorePassword=secret").run((context) -> {         assertThat(context).hasFailed().         assertThat(context).getFailure().hasMessageContaining("foo").         assertThat(context).getFailure().hasMessageContaining("does not exist").     }). }
false;public;0;14;;@Test public // Make sure that we at least attempt to load the store void enableSslWithNonExistingTrustStoreShouldFail() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.ssl.enabled:true", "spring.rabbitmq.ssl.trustStore=bar", "spring.rabbitmq.ssl.trustStorePassword=secret").run((context) -> {         assertThat(context).hasFailed().         assertThat(context).getFailure().hasMessageContaining("bar").         assertThat(context).getFailure().hasMessageContaining("does not exist").     }). }
false;public;0;13;;@Test public void enableSslWithInvalidKeystoreTypeShouldFail() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.ssl.enabled:true", "spring.rabbitmq.ssl.keyStore=foo", "spring.rabbitmq.ssl.keyStoreType=fooType").run((context) -> {         assertThat(context).hasFailed().         assertThat(context).getFailure().hasMessageContaining("fooType").         assertThat(context).getFailure().hasRootCauseInstanceOf(NoSuchAlgorithmException.class).     }). }
false;public;0;13;;@Test public void enableSslWithInvalidTrustStoreTypeShouldFail() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.ssl.enabled:true", "spring.rabbitmq.ssl.trustStore=bar", "spring.rabbitmq.ssl.trustStoreType=barType").run((context) -> {         assertThat(context).hasFailed().         assertThat(context).getFailure().hasMessageContaining("barType").         assertThat(context).getFailure().hasRootCauseInstanceOf(NoSuchAlgorithmException.class).     }). }
false;public;0;12;;@Test public void enableSslWithKeystoreTypeAndTrustStoreTypeShouldWork() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.ssl.enabled:true", "spring.rabbitmq.ssl.keyStore=/org/springframework/boot/autoconfigure/amqp/test.jks", "spring.rabbitmq.ssl.keyStoreType=jks", "spring.rabbitmq.ssl.keyStorePassword=secret", "spring.rabbitmq.ssl.trustStore=/org/springframework/boot/autoconfigure/amqp/test.jks", "spring.rabbitmq.ssl.trustStoreType=jks", "spring.rabbitmq.ssl.trustStorePassword=secret").run((context) -> assertThat(context).hasNotFailed()). }
false;public;0;13;;@Test public void enableSslWithValidateServerCertificateFalse() throws Exception {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.ssl.enabled:true", "spring.rabbitmq.ssl.validateServerCertificate=false").run((context) -> {         com.rabbitmq.client.ConnectionFactory rabbitConnectionFactory = getTargetConnectionFactory(context).         TrustManager trustManager = getTrustManager(rabbitConnectionFactory).         assertThat(trustManager).isInstanceOf(TrustEverythingTrustManager.class).     }). }
false;public;0;11;;@Test public void enableSslWithValidateServerCertificateDefault() throws Exception {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.rabbitmq.ssl.enabled:true").run((context) -> {         com.rabbitmq.client.ConnectionFactory rabbitConnectionFactory = getTargetConnectionFactory(context).         TrustManager trustManager = getTrustManager(rabbitConnectionFactory).         assertThat(trustManager).isNotInstanceOf(TrustEverythingTrustManager.class).     }). }
false;private;1;12;;private TrustManager getTrustManager(com.rabbitmq.client.ConnectionFactory rabbitConnectionFactory) {     SslContextFactory sslContextFactory = (SslContextFactory) ReflectionTestUtils.getField(rabbitConnectionFactory, "sslContextFactory").     SSLContext sslContext = sslContextFactory.create("connection").     Object spi = ReflectionTestUtils.getField(sslContext, "contextSpi").     Object trustManager = ReflectionTestUtils.getField(spi, "trustManager").     while (trustManager.getClass().getName().endsWith("Wrapper")) {         trustManager = ReflectionTestUtils.getField(trustManager, "tm").     }     return (TrustManager) trustManager. }
false;private;1;6;;private com.rabbitmq.client.ConnectionFactory getTargetConnectionFactory(AssertableApplicationContext context) {     CachingConnectionFactory connectionFactory = context.getBean(CachingConnectionFactory.class).     return connectionFactory.getRabbitConnectionFactory(). }
false;private;1;3;;private boolean getMandatory(RabbitTemplate rabbitTemplate) {     return rabbitTemplate.isMandatoryFor(mock(Message.class)). }
false;;0;4;;@Bean ConnectionFactory aDifferentConnectionFactory() {     return new CachingConnectionFactory("otherserver", 8001). }
false;;1;6;;@Bean RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {     RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory).     rabbitTemplate.setMessageConverter(testMessageConverter()).     return rabbitTemplate. }
false;public;0;4;;@Bean public MessageConverter testMessageConverter() {     return mock(MessageConverter.class). }
false;;1;7;;@Bean RabbitMessagingTemplate messagingTemplate(RabbitTemplate rabbitTemplate) {     RabbitMessagingTemplate messagingTemplate = new RabbitMessagingTemplate(rabbitTemplate).     messagingTemplate.setDefaultDestination("fooBar").     return messagingTemplate. }
false;;0;4;;@Bean RabbitListenerContainerFactory<?> rabbitListenerContainerFactory() {     return mock(SimpleRabbitListenerContainerFactory.class). }
false;public;0;5;;@Bean @Primary public MessageConverter myMessageConverter() {     return mock(MessageConverter.class). }
false;public;0;4;;@Bean public MessageConverter anotherMessageConverter() {     return mock(MessageConverter.class). }
false;public;0;5;;@Bean @Primary public MessageRecoverer myMessageRecoverer() {     return mock(MessageRecoverer.class). }
false;public;0;4;;@Bean public MessageRecoverer anotherMessageRecoverer() {     return mock(MessageRecoverer.class). }
false;public;0;4;;@Bean public ConnectionNameStrategy myConnectionNameStrategy() {     return (connectionFactory) -> "test#" + this.counter.getAndIncrement(). }
false;public;0;8;;@Bean public RabbitRetryTemplateCustomizer rabbitTemplateRetryTemplateCustomizer() {     return (target, template) -> {         if (target.equals(RabbitRetryTemplateCustomizer.Target.SENDER)) {             template.setBackOffPolicy(this.backOffPolicy).         }     }. }
false;public;0;8;;@Bean public RabbitRetryTemplateCustomizer rabbitListenerRetryTemplateCustomizer() {     return (target, template) -> {         if (target.equals(RabbitRetryTemplateCustomizer.Target.LISTENER)) {             template.setRetryPolicy(this.retryPolicy).         }     }. }
