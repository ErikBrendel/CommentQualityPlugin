commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void close() {     this.context.close(). }
false;public;0;8;;@Test public void testDefaultRepositoryConfiguration() {     prepareApplicationContext(TestConfiguration.class).     assertThat(this.context.getBean(CityRepository.class)).isNotNull().     Neo4jMappingContext mappingContext = this.context.getBean(Neo4jMappingContext.class).     assertThat(mappingContext.getPersistentEntity(City.class)).isNotNull(). }
false;public;0;5;;@Test public void testNoRepositoryConfiguration() {     prepareApplicationContext(EmptyConfiguration.class).     assertThat(this.context.getBean(SessionFactory.class)).isNotNull(). }
false;public;0;5;;@Test public void doesNotTriggerDefaultRepositoryDetectionIfCustomized() {     prepareApplicationContext(CustomizedConfiguration.class).     assertThat(this.context.getBean(CityNeo4jRepository.class)).isNotNull(). }
false;public;0;6;;@Test public void autoConfigurationShouldNotKickInEvenIfManualConfigDidNotCreateAnyRepositories() {     prepareApplicationContext(SortOfInvalidCustomConfiguration.class).     assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.context.getBean(CityRepository.class)). }
false;private;1;10;;private void prepareApplicationContext(Class<?>... configurationClasses) {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.data.neo4j.uri=http://localhost:9797").applyTo(this.context).     this.context.register(configurationClasses).     this.context.register(Neo4jDataAutoConfiguration.class, Neo4jRepositoriesAutoConfiguration.class, PropertyPlaceholderAutoConfiguration.class).     this.context.refresh(). }
