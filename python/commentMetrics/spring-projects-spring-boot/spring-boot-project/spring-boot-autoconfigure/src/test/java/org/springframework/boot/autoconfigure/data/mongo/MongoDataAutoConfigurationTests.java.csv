commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void templateExists() {     this.contextRunner.run((context) -> assertThat(context).hasSingleBean(MongoTemplate.class)). }
false;public;0;6;;@Test public void gridFsTemplateExists() {     this.contextRunner.withPropertyValues("spring.data.mongodb.gridFsDatabase:grid").run((context) -> assertThat(context).hasSingleBean(GridFsTemplate.class)). }
false;public;0;9;;@Test public void customConversions() {     this.contextRunner.withUserConfiguration(CustomConversionsConfig.class).run((context) -> {         MongoTemplate template = context.getBean(MongoTemplate.class).         assertThat(template.getConverter().getConversionService().canConvert(MongoClient.class, Boolean.class)).isTrue().     }). }
false;public;0;15;;@Test public void usesAutoConfigurationPackageToPickUpDocumentTypes() {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     String cityPackage = City.class.getPackage().getName().     AutoConfigurationPackages.register(context, cityPackage).     context.register(MongoAutoConfiguration.class, MongoDataAutoConfiguration.class).     try {         context.refresh().         assertDomainTypesDiscovered(context.getBean(MongoMappingContext.class), City.class).     } finally {         context.close().     } }
false;public;0;11;;@Test public void defaultFieldNamingStrategy() {     this.contextRunner.run((context) -> {         MongoMappingContext mappingContext = context.getBean(MongoMappingContext.class).         FieldNamingStrategy fieldNamingStrategy = (FieldNamingStrategy) ReflectionTestUtils.getField(mappingContext, "fieldNamingStrategy").         assertThat(fieldNamingStrategy.getClass()).isEqualTo(PropertyNameFieldNamingStrategy.class).     }). }
false;public;0;14;;@Test public void customFieldNamingStrategy() {     this.contextRunner.withPropertyValues("spring.data.mongodb.field-naming-strategy:" + CamelCaseAbbreviatingFieldNamingStrategy.class.getName()).run((context) -> {         MongoMappingContext mappingContext = context.getBean(MongoMappingContext.class).         FieldNamingStrategy fieldNamingStrategy = (FieldNamingStrategy) ReflectionTestUtils.getField(mappingContext, "fieldNamingStrategy").         assertThat(fieldNamingStrategy.getClass()).isEqualTo(CamelCaseAbbreviatingFieldNamingStrategy.class).     }). }
false;public;0;8;;@Test public void interfaceFieldNamingStrategy() {     this.contextRunner.withPropertyValues("spring.data.mongodb.field-naming-strategy:" + FieldNamingStrategy.class.getName()).run((context) -> assertThat(context).getFailure().isInstanceOf(BeanCreationException.class)). }
false;public;0;13;;@Test @SuppressWarnings("unchecked") public void entityScanShouldSetInitialEntitySet() {     this.contextRunner.withUserConfiguration(EntityScanConfig.class).run((context) -> {         MongoMappingContext mappingContext = context.getBean(MongoMappingContext.class).         Set<Class<?>> initialEntitySet = (Set<Class<?>>) ReflectionTestUtils.getField(mappingContext, "initialEntitySet").         assertThat(initialEntitySet).containsOnly(City.class, Country.class).     }). }
false;public;0;12;;@Test public void registersDefaultSimpleTypesWithMappingContext() {     this.contextRunner.run((context) -> {         MongoMappingContext mappingContext = context.getBean(MongoMappingContext.class).         BasicMongoPersistentEntity<?> entity = mappingContext.getPersistentEntity(Sample.class).         MongoPersistentProperty dateProperty = entity.getPersistentProperty("date").         assertThat(dateProperty.isEntity()).isFalse().     }). }
false;public;0;8;;@Test public void backsOffIfMongoClientBeanIsNotPresent() {     ApplicationContextRunner runner = new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(MongoDataAutoConfiguration.class)).     runner.run((context) -> assertThat(context).doesNotHaveBean(MongoDataAutoConfiguration.class)). }
false;public;0;7;;@Test public void createsMongoDbFactoryForPreferredMongoClient() {     this.contextRunner.run((context) -> {         MongoDbFactory dbFactory = context.getBean(MongoDbFactory.class).         assertThat(dbFactory).isInstanceOf(SimpleMongoDbFactory.class).     }). }
false;public;0;8;;@Test public void createsMongoDbFactoryForFallbackMongoClient() {     this.contextRunner.withUserConfiguration(FallbackMongoClientConfiguration.class).run((context) -> {         MongoDbFactory dbFactory = context.getBean(MongoDbFactory.class).         assertThat(dbFactory).isInstanceOf(SimpleMongoClientDbFactory.class).     }). }
false;private,static;2;7;;@SuppressWarnings({ "unchecked", "rawtypes" }) private static void assertDomainTypesDiscovered(MongoMappingContext mappingContext, Class<?>... types) {     Set<Class> initialEntitySet = (Set<Class>) ReflectionTestUtils.getField(mappingContext, "initialEntitySet").     assertThat(initialEntitySet).containsOnly(types). }
false;public;0;4;;@Bean public MongoCustomConversions customConversions() {     return new MongoCustomConversions(Arrays.asList(new MyConverter())). }
false;;0;4;;@Bean com.mongodb.client.MongoClient fallbackMongoClient() {     return MongoClients.create(). }
false;public;1;4;;@Override public Boolean convert(MongoClient source) {     return null. }
