commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void closeContext() {     if (this.context != null) {         this.context.close().     } }
false;public;0;10;;@Test @SuppressWarnings("rawtypes") public void testErrorForMachineClient() {     load().     ResponseEntity<Map> entity = new TestRestTemplate().getForEntity(createUrl("?trace=true"), Map.class).     assertErrorAttributes(entity.getBody(), "500", "Internal Server Error", null, "Expected!", "/").     assertThat(entity.getBody().containsKey("trace")).isFalse(). }
false;public;0;4;;@Test public void testErrorForMachineClientTraceParamTrue() {     errorForMachineClientOnTraceParam("?trace=true", true). }
false;public;0;4;;@Test public void testErrorForMachineClientTraceParamFalse() {     errorForMachineClientOnTraceParam("?trace=false", false). }
false;public;0;4;;@Test public void testErrorForMachineClientTraceParamAbsent() {     errorForMachineClientOnTraceParam("", false). }
false;private;2;10;;@SuppressWarnings("rawtypes") private void errorForMachineClientOnTraceParam(String path, boolean expectedTrace) {     load("--server.error.include-exception=true", "--server.error.include-stacktrace=on-trace-param").     ResponseEntity<Map> entity = new TestRestTemplate().getForEntity(createUrl(path), Map.class).     assertErrorAttributes(entity.getBody(), "500", "Internal Server Error", IllegalStateException.class, "Expected!", "/").     assertThat(entity.getBody().containsKey("trace")).isEqualTo(expectedTrace). }
false;public;0;10;;@Test @SuppressWarnings("rawtypes") public void testErrorForMachineClientNoStacktrace() {     load("--server.error.include-stacktrace=never").     ResponseEntity<Map> entity = new TestRestTemplate().getForEntity(createUrl("?trace=true"), Map.class).     assertErrorAttributes(entity.getBody(), "500", "Internal Server Error", null, "Expected!", "/").     assertThat(entity.getBody().containsKey("trace")).isFalse(). }
false;public;0;10;;@Test @SuppressWarnings("rawtypes") public void testErrorForMachineClientAlwaysStacktrace() {     load("--server.error.include-stacktrace=always").     ResponseEntity<Map> entity = new TestRestTemplate().getForEntity(createUrl("?trace=false"), Map.class).     assertErrorAttributes(entity.getBody(), "500", "Internal Server Error", null, "Expected!", "/").     assertThat(entity.getBody().containsKey("trace")).isTrue(). }
false;public;0;10;;@Test @SuppressWarnings("rawtypes") public void testErrorForAnnotatedException() {     load("--server.error.include-exception=true").     ResponseEntity<Map> entity = new TestRestTemplate().getForEntity(createUrl("/annotated"), Map.class).     assertErrorAttributes(entity.getBody(), "400", "Bad Request", TestConfiguration.Errors.ExpectedException.class, "Expected!", "/annotated"). }
false;public;0;10;;@Test @SuppressWarnings("rawtypes") public void testErrorForAnnotatedNoReasonException() {     load("--server.error.include-exception=true").     ResponseEntity<Map> entity = new TestRestTemplate().getForEntity(createUrl("/annotatedNoReason"), Map.class).     assertErrorAttributes(entity.getBody(), "406", "Not Acceptable", TestConfiguration.Errors.NoReasonExpectedException.class, "Expected message", "/annotatedNoReason"). }
false;public;0;13;;@Test @SuppressWarnings("rawtypes") public void testBindingExceptionForMachineClient() {     load("--server.error.include-exception=true").     RequestEntity request = RequestEntity.get(URI.create(createUrl("/bind"))).accept(MediaType.APPLICATION_JSON).build().     ResponseEntity<Map> entity = new TestRestTemplate().exchange(request, Map.class).     String resp = entity.getBody().toString().     assertThat(resp).contains("Error count: 1").     assertThat(resp).contains("errors=[{").     assertThat(resp).contains("codes=[").     assertThat(resp).contains("org.springframework.validation.BindException"). }
false;public;0;15;;@Test @SuppressWarnings("rawtypes") public void testRequestBodyValidationForMachineClient() {     load("--server.error.include-exception=true").     RequestEntity request = RequestEntity.post(URI.create(createUrl("/bodyValidation"))).accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON).body("{}").     ResponseEntity<Map> entity = new TestRestTemplate().exchange(request, Map.class).     String resp = entity.getBody().toString().     assertThat(resp).contains("Error count: 1").     assertThat(resp).contains("errors=[{").     assertThat(resp).contains("codes=[").     assertThat(resp).contains(MethodArgumentNotValidException.class.getName()). }
false;public;0;10;;@Test @SuppressWarnings("rawtypes") public void testNoExceptionByDefaultForMachineClient() {     load().     RequestEntity request = RequestEntity.get(URI.create(createUrl("/bind"))).accept(MediaType.APPLICATION_JSON).build().     ResponseEntity<Map> entity = new TestRestTemplate().exchange(request, Map.class).     String resp = entity.getBody().toString().     assertThat(resp).doesNotContain("org.springframework.validation.BindException"). }
false;public;0;10;;@Test public void testConventionTemplateMapping() {     load().     RequestEntity<?> request = RequestEntity.get(URI.create(createUrl("/noStorage"))).accept(MediaType.TEXT_HTML).build().     ResponseEntity<String> entity = new TestRestTemplate().exchange(request, String.class).     String resp = entity.getBody().     assertThat(resp).contains("We are out of storage"). }
false;private;6;15;;private void assertErrorAttributes(Map<?, ?> content, String status, String error, Class<?> exception, String message, String path) {     assertThat(content.get("status")).as("Wrong status").isEqualTo(status).     assertThat(content.get("error")).as("Wrong error").isEqualTo(error).     if (exception != null) {         assertThat(content.get("exception")).as("Wrong exception").isEqualTo(exception.getName()).     } else {         assertThat(content.containsKey("exception")).as("Exception attribute should not be set").isFalse().     }     assertThat(content.get("message")).as("Wrong message").isEqualTo(message).     assertThat(content.get("path")).as("Wrong path").isEqualTo(path). }
false;private;1;5;;private String createUrl(String path) {     int port = this.context.getEnvironment().getProperty("local.server.port", int.class).     return "http://localhost:" + port + path. }
false;private;1;9;;private void load(String... arguments) {     List<String> args = new ArrayList<>().     args.add("--server.port=0").     if (arguments != null) {         args.addAll(Arrays.asList(arguments)).     }     this.context = SpringApplication.run(TestConfiguration.class, StringUtils.toStringArray(args)). }
true;public,static;1;3;// For manual testing ;// For manual testing public static void main(String[] args) {     SpringApplication.run(TestConfiguration.class, args). }
false;protected;3;6;;@Override protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     response.getWriter().write("ERROR_BEAN"). }
false;public;0;11;;@Bean public View error() {     return new AbstractView() {          @Override         protected void renderMergedOutputModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {             response.getWriter().write("ERROR_BEAN").         }     }. }
false;public;0;3;;public String getFoo() {     return "foo". }
false;public;0;4;;@RequestMapping("/") public String home() {     throw new IllegalStateException("Expected!"). }
false;public;0;4;;@RequestMapping("/annotated") public String annotated() {     throw new ExpectedException(). }
false;public;0;4;;@RequestMapping("/annotatedNoReason") public String annotatedNoReason() {     throw new NoReasonExpectedException("Expected message"). }
false;public;0;6;;@RequestMapping("/bind") public String bind() throws Exception {     BindException error = new BindException(this, "test").     error.rejectValue("foo", "bar.error").     throw error. }
false;public;1;4;;@PostMapping(path = "/bodyValidation", produces = "application/json") public String bodyValidation(@Valid @RequestBody DummyBody body) {     return body.content. }
false;public;0;4;;@RequestMapping(path = "/noStorage") public String noStorage() {     throw new InsufficientStorageException(). }
false;public;0;3;;public String getContent() {     return this.content. }
false;public;1;3;;public void setContent(String content) {     this.content = content. }
