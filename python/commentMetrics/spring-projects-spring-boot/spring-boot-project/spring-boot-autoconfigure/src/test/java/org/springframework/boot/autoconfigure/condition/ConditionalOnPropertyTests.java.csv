commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void tearDown() {     if (this.context != null) {         this.context.close().     } }
false;public;0;6;;@Test public void allPropertiesAreDefined() {     load(MultiplePropertiesRequiredConfiguration.class, "property1=value1", "property2=value2").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;5;;@Test public void notAllPropertiesAreDefined() {     load(MultiplePropertiesRequiredConfiguration.class, "property1=value1").     assertThat(this.context.containsBean("foo")).isFalse(). }
false;public;0;6;;@Test public void propertyValueEqualsFalse() {     load(MultiplePropertiesRequiredConfiguration.class, "property1=false", "property2=value2").     assertThat(this.context.containsBean("foo")).isFalse(). }
false;public;0;6;;@Test public void propertyValueEqualsFALSE() {     load(MultiplePropertiesRequiredConfiguration.class, "property1=FALSE", "property2=value2").     assertThat(this.context.containsBean("foo")).isFalse(). }
false;public;0;6;;@Test public void relaxedName() {     load(RelaxedPropertiesRequiredConfiguration.class, "spring.theRelaxedProperty=value1").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;6;;@Test public void prefixWithoutPeriod() {     load(RelaxedPropertiesRequiredConfigurationWithShortPrefix.class, "spring.property=value1").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;6;;@Test public // Enabled by default void enabledIfNotConfiguredOtherwise() {     load(EnabledIfNotConfiguredOtherwiseConfig.class).     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;5;;@Test public void enabledIfNotConfiguredOtherwiseWithConfig() {     load(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:false").     assertThat(this.context.containsBean("foo")).isFalse(). }
false;public;0;5;;@Test public void enabledIfNotConfiguredOtherwiseWithConfigDifferentCase() {     load(EnabledIfNotConfiguredOtherwiseConfig.class, "simple.my-property:FALSE").     assertThat(this.context.containsBean("foo")).isFalse(). }
false;public;0;6;;@Test public // Disabled by default void disableIfNotConfiguredOtherwise() {     load(DisabledIfNotConfiguredOtherwiseConfig.class).     assertThat(this.context.containsBean("foo")).isFalse(). }
false;public;0;5;;@Test public void disableIfNotConfiguredOtherwiseWithConfig() {     load(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myProperty:true").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;5;;@Test public void disableIfNotConfiguredOtherwiseWithConfigDifferentCase() {     load(DisabledIfNotConfiguredOtherwiseConfig.class, "simple.myproperty:TrUe").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;5;;@Test public void simpleValueIsSet() {     load(SimpleValueConfig.class, "simple.myProperty:bar").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;5;;@Test public void caseInsensitive() {     load(SimpleValueConfig.class, "simple.myProperty:BaR").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;5;;@Test public void defaultValueIsSet() {     load(DefaultValueConfig.class, "simple.myProperty:bar").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;5;;@Test public void defaultValueIsNotSet() {     load(DefaultValueConfig.class).     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;5;;@Test public void defaultValueIsSetDifferentValue() {     load(DefaultValueConfig.class, "simple.myProperty:another").     assertThat(this.context.containsBean("foo")).isFalse(). }
false;public;0;5;;@Test public void prefix() {     load(PrefixValueConfig.class, "simple.myProperty:bar").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;5;;@Test public void relaxedEnabledByDefault() {     load(PrefixValueConfig.class, "simple.myProperty:bar").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;6;;@Test public void multiValuesAllSet() {     load(MultiValuesConfig.class, "simple.my-property:bar", "simple.my-another-property:bar").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;5;;@Test public void multiValuesOnlyOneSet() {     load(MultiValuesConfig.class, "simple.my-property:bar").     assertThat(this.context.containsBean("foo")).isFalse(). }
false;public;0;5;;@Test public void usingValueAttribute() {     load(ValueAttribute.class, "some.property").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;7;;@Test public void nameOrValueMustBeSpecified() {     assertThatIllegalStateException().isThrownBy(() -> load(NoNameOrValueAttribute.class, "some.property")).satisfies(causeMessageContaining("The name or value attribute of @ConditionalOnProperty must be specified")). }
false;public;0;7;;@Test public void nameAndValueMustNotBeSpecified() {     assertThatIllegalStateException().isThrownBy(() -> load(NameAndValueAttribute.class, "some.property")).satisfies(causeMessageContaining("The name and value attributes of @ConditionalOnProperty are exclusive")). }
false;private;1;3;;private <T extends Exception> Consumer<T> causeMessageContaining(String message) {     return (ex) -> assertThat(ex.getCause()).hasMessageContaining(message). }
false;public;0;5;;@Test public void metaAnnotationConditionMatchesWhenPropertyIsSet() {     load(MetaAnnotation.class, "my.feature.enabled=true").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;public;0;5;;@Test public void metaAnnotationConditionDoesNotMatchWhenPropertyIsNotSet() {     load(MetaAnnotation.class).     assertThat(this.context.containsBean("foo")).isFalse(). }
false;public;0;5;;@Test public void metaAndDirectAnnotationConditionDoesNotMatchWhenOnlyDirectPropertyIsSet() {     load(MetaAnnotationAndDirectAnnotation.class, "my.other.feature.enabled=true").     assertThat(this.context.containsBean("foo")).isFalse(). }
false;public;0;5;;@Test public void metaAndDirectAnnotationConditionDoesNotMatchWhenOnlyMetaPropertyIsSet() {     load(MetaAnnotationAndDirectAnnotation.class, "my.feature.enabled=true").     assertThat(this.context.containsBean("foo")).isFalse(). }
false;public;0;5;;@Test public void metaAndDirectAnnotationConditionDoesNotMatchWhenNeitherPropertyIsSet() {     load(MetaAnnotationAndDirectAnnotation.class).     assertThat(this.context.containsBean("foo")).isFalse(). }
false;public;0;6;;@Test public void metaAndDirectAnnotationConditionMatchesWhenBothPropertiesAreSet() {     load(MetaAnnotationAndDirectAnnotation.class, "my.feature.enabled=true", "my.other.feature.enabled=true").     assertThat(this.context.containsBean("foo")).isTrue(). }
false;private;2;5;;private void load(Class<?> config, String... environment) {     TestPropertyValues.of(environment).applyTo(this.environment).     this.context = new SpringApplicationBuilder(config).environment(this.environment).web(WebApplicationType.NONE).run(). }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
