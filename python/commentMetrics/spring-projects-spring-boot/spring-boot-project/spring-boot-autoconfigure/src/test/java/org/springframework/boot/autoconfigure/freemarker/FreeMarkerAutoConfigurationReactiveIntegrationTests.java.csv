commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void defaultConfiguration() {     this.contextRunner.run((context) -> {         assertThat(context.getBean(FreeMarkerViewResolver.class)).isNotNull().         assertThat(context.getBean(FreeMarkerConfigurer.class)).isNotNull().         assertThat(context.getBean(FreeMarkerConfig.class)).isNotNull().         assertThat(context.getBean(freemarker.template.Configuration.class)).isNotNull().     }). }
false;public;0;11;;@Test public void defaultViewResolution() {     this.contextRunner.run((context) -> {         MockServerWebExchange exchange = render(context, "home").         String result = exchange.getResponse().getBodyAsString().block(Duration.ofSeconds(30)).         assertThat(result).contains("home").         assertThat(exchange.getResponse().getHeaders().getContentType()).isEqualTo(MediaType.TEXT_HTML).     }). }
false;public;0;10;;@Test public void customPrefix() {     this.contextRunner.withPropertyValues("spring.freemarker.prefix:prefix/").run((context) -> {         MockServerWebExchange exchange = render(context, "prefixed").         String result = exchange.getResponse().getBodyAsString().block(Duration.ofSeconds(30)).         assertThat(result).contains("prefixed").     }). }
false;public;0;10;;@Test public void customSuffix() {     this.contextRunner.withPropertyValues("spring.freemarker.suffix:.freemarker").run((context) -> {         MockServerWebExchange exchange = render(context, "suffixed").         String result = exchange.getResponse().getBodyAsString().block(Duration.ofSeconds(30)).         assertThat(result).contains("suffixed").     }). }
false;public;0;11;;@Test public void customTemplateLoaderPath() {     this.contextRunner.withPropertyValues("spring.freemarker.templateLoaderPath:classpath:/custom-templates/").run((context) -> {         MockServerWebExchange exchange = render(context, "custom").         String result = exchange.getResponse().getBodyAsString().block(Duration.ofSeconds(30)).         assertThat(result).contains("custom").     }). }
false;public;0;9;;@SuppressWarnings("deprecation") @Test public void customFreeMarkerSettings() {     this.contextRunner.withPropertyValues("spring.freemarker.settings.boolean_format:yup,nope").run((context) -> assertThat(context.getBean(FreeMarkerConfigurer.class).getConfiguration().getSetting("boolean_format")).isEqualTo("yup,nope")). }
false;public;0;10;;@Test public void renderTemplate() {     this.contextRunner.withPropertyValues().run((context) -> {         FreeMarkerConfigurer freemarker = context.getBean(FreeMarkerConfigurer.class).         StringWriter writer = new StringWriter().         freemarker.getConfiguration().getTemplate("message.ftl").process(this, writer).         assertThat(writer.toString()).contains("Hello World").     }). }
false;public;0;3;;public String getGreeting() {     return "Hello World". }
false;private;2;9;;private MockServerWebExchange render(ApplicationContext context, String viewName) {     FreeMarkerViewResolver resolver = context.getBean(FreeMarkerViewResolver.class).     Mono<View> view = resolver.resolveViewName(viewName, Locale.UK).     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/path")).     view.flatMap((v) -> v.render(null, MediaType.TEXT_HTML, exchange)).block(Duration.ofSeconds(30)).     return exchange. }
