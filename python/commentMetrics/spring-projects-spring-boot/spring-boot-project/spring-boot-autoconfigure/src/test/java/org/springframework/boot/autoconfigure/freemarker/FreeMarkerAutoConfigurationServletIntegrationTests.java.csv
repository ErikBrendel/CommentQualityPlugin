commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;9;;@Test public void defaultConfiguration() {     load().     assertThat(this.context.getBean(FreeMarkerViewResolver.class)).isNotNull().     assertThat(this.context.getBean(FreeMarkerConfigurer.class)).isNotNull().     assertThat(this.context.getBean(FreeMarkerConfig.class)).isNotNull().     assertThat(this.context.getBean(freemarker.template.Configuration.class)).isNotNull(). }
false;public;0;8;;@Test public void defaultViewResolution() throws Exception {     load().     MockHttpServletResponse response = render("home").     String result = response.getContentAsString().     assertThat(result).contains("home").     assertThat(response.getContentType()).isEqualTo("text/html.charset=UTF-8"). }
false;public;0;8;;@Test public void customContentType() throws Exception {     load("spring.freemarker.contentType:application/json").     MockHttpServletResponse response = render("home").     String result = response.getContentAsString().     assertThat(result).contains("home").     assertThat(response.getContentType()).isEqualTo("application/json.charset=UTF-8"). }
false;public;0;7;;@Test public void customPrefix() throws Exception {     load("spring.freemarker.prefix:prefix/").     MockHttpServletResponse response = render("prefixed").     String result = response.getContentAsString().     assertThat(result).contains("prefixed"). }
false;public;0;7;;@Test public void customSuffix() throws Exception {     load("spring.freemarker.suffix:.freemarker").     MockHttpServletResponse response = render("suffixed").     String result = response.getContentAsString().     assertThat(result).contains("suffixed"). }
false;public;0;7;;@Test public void customTemplateLoaderPath() throws Exception {     load("spring.freemarker.templateLoaderPath:classpath:/custom-templates/").     MockHttpServletResponse response = render("custom").     String result = response.getContentAsString().     assertThat(result).contains("custom"). }
false;public;0;6;;@Test public void disableCache() {     load("spring.freemarker.cache:false").     assertThat(this.context.getBean(FreeMarkerViewResolver.class).getCacheLimit()).isEqualTo(0). }
false;public;0;8;;@Test public void allowSessionOverride() {     load("spring.freemarker.allow-session-override:true").     AbstractTemplateViewResolver viewResolver = this.context.getBean(FreeMarkerViewResolver.class).     assertThat(viewResolver).hasFieldOrPropertyWithValue("allowSessionOverride", true). }
false;public;0;7;;@SuppressWarnings("deprecation") @Test public void customFreeMarkerSettings() {     load("spring.freemarker.settings.boolean_format:yup,nope").     assertThat(this.context.getBean(FreeMarkerConfigurer.class).getConfiguration().getSetting("boolean_format")).isEqualTo("yup,nope"). }
false;public;0;9;;@Test public void renderTemplate() throws Exception {     load().     FreeMarkerConfigurer freemarker = this.context.getBean(FreeMarkerConfigurer.class).     StringWriter writer = new StringWriter().     freemarker.getConfiguration().getTemplate("message.ftl").process(this, writer).     assertThat(writer.toString()).contains("Hello World"). }
false;public;0;5;;@Test public void registerResourceHandlingFilterDisabledByDefault() {     load().     assertThat(this.context.getBeansOfType(FilterRegistrationBean.class)).isEmpty(). }
false;public;0;10;;@Test public void registerResourceHandlingFilterOnlyIfResourceChainIsEnabled() {     load("spring.resources.chain.enabled:true").     FilterRegistrationBean<?> registration = this.context.getBean(FilterRegistrationBean.class).     assertThat(registration.getFilter()).isInstanceOf(ResourceUrlEncodingFilter.class).     assertThat(registration).hasFieldOrPropertyWithValue("dispatcherTypes", EnumSet.of(DispatcherType.REQUEST, DispatcherType.ERROR)). }
false;public;0;15;;@Test @SuppressWarnings("rawtypes") public void registerResourceHandlingFilterWithOtherRegistrationBean() {     // gh-14897     load(FilterRegistrationOtherConfiguration.class, "spring.resources.chain.enabled:true").     Map<String, FilterRegistrationBean> beans = this.context.getBeansOfType(FilterRegistrationBean.class).     assertThat(beans).hasSize(2).     FilterRegistrationBean registration = beans.values().stream().filter((r) -> r.getFilter() instanceof ResourceUrlEncodingFilter).findFirst().get().     assertThat(registration).hasFieldOrPropertyWithValue("dispatcherTypes", EnumSet.of(DispatcherType.REQUEST, DispatcherType.ERROR)). }
false;public;0;15;;@Test @SuppressWarnings("rawtypes") public void registerResourceHandlingFilterWithResourceRegistrationBean() {     // gh-14926     load(FilterRegistrationResourceConfiguration.class, "spring.resources.chain.enabled:true").     Map<String, FilterRegistrationBean> beans = this.context.getBeansOfType(FilterRegistrationBean.class).     assertThat(beans).hasSize(1).     FilterRegistrationBean registration = beans.values().stream().filter((r) -> r.getFilter() instanceof ResourceUrlEncodingFilter).findFirst().get().     assertThat(registration).hasFieldOrPropertyWithValue("dispatcherTypes", EnumSet.of(DispatcherType.INCLUDE)). }
false;private;1;3;;private void load(String... env) {     load(BaseConfiguration.class, env). }
false;private;2;7;;private void load(Class<?> config, String... env) {     this.context = new AnnotationConfigWebApplicationContext().     this.context.setServletContext(new MockServletContext()).     TestPropertyValues.of(env).applyTo(this.context).     this.context.register(config).     this.context.refresh(). }
false;public;0;3;;public String getGreeting() {     return "Hello World". }
false;private;1;12;;private MockHttpServletResponse render(String viewName) throws Exception {     FreeMarkerViewResolver resolver = this.context.getBean(FreeMarkerViewResolver.class).     View view = resolver.resolveViewName(viewName, Locale.UK).     assertThat(view).isNotNull().     HttpServletRequest request = new MockHttpServletRequest().     request.setAttribute(RequestContext.WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context).     MockHttpServletResponse response = new MockHttpServletResponse().     view.render(null, request, response).     return response. }
false;public;0;7;;@Bean public FilterRegistrationBean<ResourceUrlEncodingFilter> filterRegistration() {     FilterRegistrationBean<ResourceUrlEncodingFilter> bean = new FilterRegistrationBean<>(new ResourceUrlEncodingFilter()).     bean.setDispatcherTypes(EnumSet.of(DispatcherType.INCLUDE)).     return bean. }
false;public;0;4;;@Bean public FilterRegistrationBean<OrderedCharacterEncodingFilter> filterRegistration() {     return new FilterRegistrationBean<>(new OrderedCharacterEncodingFilter()). }
