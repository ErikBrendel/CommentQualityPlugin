commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void tearDown() {     if (this.context != null) {         this.context.close().     } }
false;public;0;5;;@Test public void noTransactionManager() {     load(EmptyConfiguration.class).     assertThat(this.context.getBeansOfType(TransactionTemplate.class)).isEmpty(). }
false;public;0;12;;@Test public void singleTransactionManager() {     load(new Class<?>[] { DataSourceAutoConfiguration.class, DataSourceTransactionManagerAutoConfiguration.class }, "spring.datasource.initialization-mode:never").     PlatformTransactionManager transactionManager = this.context.getBean(PlatformTransactionManager.class).     TransactionTemplate transactionTemplate = this.context.getBean(TransactionTemplate.class).     assertThat(transactionTemplate.getTransactionManager()).isSameAs(transactionManager). }
false;public;0;5;;@Test public void severalTransactionManagers() {     load(SeveralTransactionManagersConfiguration.class).     assertThat(this.context.getBeansOfType(TransactionTemplate.class)).isEmpty(). }
false;public;0;8;;@Test public void customTransactionManager() {     load(CustomTransactionManagerConfiguration.class).     Map<String, TransactionTemplate> beans = this.context.getBeansOfType(TransactionTemplate.class).     assertThat(beans).hasSize(1).     assertThat(beans.containsKey("transactionTemplateFoo")).isTrue(). }
false;public;0;9;;@Test public void platformTransactionManagerCustomizers() {     load(SeveralTransactionManagersConfiguration.class).     TransactionManagerCustomizers customizers = this.context.getBean(TransactionManagerCustomizers.class).     List<?> field = (List<?>) ReflectionTestUtils.getField(customizers, "customizers").     assertThat(field).hasSize(1).first().isInstanceOf(TransactionProperties.class). }
false;public;0;6;;@Test public void transactionNotManagedWithNoTransactionManager() {     load(BaseConfiguration.class).     assertThat(this.context.getBean(TransactionalService.class).isTransactionActive()).isFalse(). }
false;public;0;8;;@Test public void transactionManagerUsesCglibByDefault() {     load(TransactionManagersConfiguration.class).     assertThat(this.context.getBean(AnotherServiceImpl.class).isTransactionActive()).isTrue().     assertThat(this.context.getBeansOfType(TransactionalServiceImpl.class)).hasSize(1). }
false;public;0;10;;@Test public void transactionManagerCanBeConfiguredToJdkProxy() {     load(TransactionManagersConfiguration.class, "spring.aop.proxy-target-class=false").     assertThat(this.context.getBean(AnotherService.class).isTransactionActive()).isTrue().     assertThat(this.context.getBeansOfType(AnotherServiceImpl.class)).hasSize(0).     assertThat(this.context.getBeansOfType(TransactionalServiceImpl.class)).hasSize(0). }
false;public;0;11;;@Test public void customEnableTransactionManagementTakesPrecedence() {     load(new Class<?>[] { CustomTransactionManagementConfiguration.class, TransactionManagersConfiguration.class }, "spring.aop.proxy-target-class=true").     assertThat(this.context.getBean(AnotherService.class).isTransactionActive()).isTrue().     assertThat(this.context.getBeansOfType(AnotherServiceImpl.class)).hasSize(0).     assertThat(this.context.getBeansOfType(TransactionalServiceImpl.class)).hasSize(0). }
false;private;2;3;;private void load(Class<?> config, String... environment) {     load(new Class<?>[] { config }, environment). }
false;private;2;8;;private void load(Class<?>[] configs, String... environment) {     AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext().     applicationContext.register(configs).     applicationContext.register(TransactionAutoConfiguration.class).     TestPropertyValues.of(environment).applyTo(applicationContext).     applicationContext.refresh().     this.context = applicationContext. }
false;public;0;4;;@Bean public PlatformTransactionManager transactionManagerOne() {     return mock(PlatformTransactionManager.class). }
false;public;0;4;;@Bean public PlatformTransactionManager transactionManagerTwo() {     return mock(PlatformTransactionManager.class). }
false;public;0;4;;@Bean public TransactionTemplate transactionTemplateFoo() {     return new TransactionTemplate(transactionManagerFoo()). }
false;public;0;4;;@Bean public PlatformTransactionManager transactionManagerFoo() {     return mock(PlatformTransactionManager.class). }
false;public;0;4;;@Bean public TransactionalService transactionalService() {     return new TransactionalServiceImpl(). }
false;public;0;4;;@Bean public AnotherServiceImpl anotherService() {     return new AnotherServiceImpl(). }
false;public;0;4;;@Bean public DataSourceTransactionManager transactionManager() {     return new DataSourceTransactionManager(dataSource()). }
false;public;0;6;;@Bean public DataSource dataSource() {     return DataSourceBuilder.create().driverClassName("org.hsqldb.jdbc.JDBCDriver").url("jdbc:hsqldb:mem:tx").username("sa").build(). }
false;;0;2;;@Transactional boolean isTransactionActive().
false;public;0;4;;@Override public boolean isTransactionActive() {     return TransactionSynchronizationManager.isActualTransactionActive(). }
false;;0;1;;boolean isTransactionActive().
false;public;0;5;;@Override @Transactional public boolean isTransactionActive() {     return TransactionSynchronizationManager.isActualTransactionActive(). }
