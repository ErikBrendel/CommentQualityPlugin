commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void multipleAnnotationsShouldMergeCorrectly() {     assertThat(getImportedConfigBeans(Config.class)).containsExactly("ConfigA", "ConfigB", "ConfigC", "ConfigD").     assertThat(getImportedConfigBeans(AnotherConfig.class)).containsExactly("ConfigA", "ConfigB", "ConfigC", "ConfigD"). }
false;public;0;5;;@Test public void classesAsAnAlias() {     assertThat(getImportedConfigBeans(AnotherConfigUsingClasses.class)).containsExactly("ConfigA", "ConfigB", "ConfigC", "ConfigD"). }
false;public;0;5;;@Test public void excluding() {     assertThat(getImportedConfigBeans(ExcludingConfig.class)).containsExactly("ConfigA", "ConfigB", "ConfigD"). }
false;public;0;5;;@Test public void excludeAppliedGlobally() {     assertThat(getImportedConfigBeans(ExcludeDConfig.class, ImportADConfig.class)).containsExactly("ConfigA"). }
false;public;0;5;;@Test public void excludeWithRedundancy() {     assertThat(getImportedConfigBeans(ExcludeADConfig.class, ExcludeDConfig.class, ImportADConfig.class)).isEmpty(). }
false;private;1;15;;private List<String> getImportedConfigBeans(Class<?>... config) {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(config).     String shortName = ClassUtils.getShortName(ImportAutoConfigurationTests.class).     int beginIndex = shortName.length() + 1.     List<String> orderedConfigBeans = new ArrayList<>().     for (String bean : context.getBeanDefinitionNames()) {         if (bean.contains("$Config")) {             String shortBeanName = ClassUtils.getShortName(bean).             orderedConfigBeans.add(shortBeanName.substring(beginIndex)).         }     }     context.close().     return orderedConfigBeans. }
