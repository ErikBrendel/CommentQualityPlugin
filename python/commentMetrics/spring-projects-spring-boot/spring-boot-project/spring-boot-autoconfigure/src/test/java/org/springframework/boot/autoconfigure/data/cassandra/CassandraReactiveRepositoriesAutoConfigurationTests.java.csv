commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testDefaultRepositoryConfiguration() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(ReactiveCityRepository.class).         assertThat(context).hasSingleBean(Cluster.class).         assertThat(getInitialEntitySet(context)).hasSize(1).     }). }
false;public;0;9;;@Test public void testNoRepositoryConfiguration() {     this.contextRunner.withUserConfiguration(TestExcludeConfiguration.class, EmptyConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(Cluster.class).         assertThat(getInitialEntitySet(context)).hasSize(1).containsOnly(City.class).     }). }
false;public;0;10;;@Test public void doesNotTriggerDefaultRepositoryDetectionIfCustomized() {     this.contextRunner.withUserConfiguration(TestExcludeConfiguration.class, CustomizedConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(ReactiveCityCassandraRepository.class).         assertThat(getInitialEntitySet(context)).hasSize(1).containsOnly(City.class).     }). }
false;public;0;7;;@Test public void enablingImperativeRepositoriesDisablesReactiveRepositories() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.data.cassandra.repositories.type=imperative").run((context) -> assertThat(context).doesNotHaveBean(ReactiveCityRepository.class)). }
false;public;0;7;;@Test public void enablingNoRepositoriesDisablesReactiveRepositories() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("spring.data.cassandra.repositories.type=none").run((context) -> assertThat(context).doesNotHaveBean(ReactiveCityRepository.class)). }
false;private;1;7;;@SuppressWarnings("unchecked") private Set<Class<?>> getInitialEntitySet(ApplicationContext context) {     CassandraMappingContext mappingContext = context.getBean(CassandraMappingContext.class).     return (Set<Class<?>>) ReflectionTestUtils.getField(mappingContext, "initialEntitySet"). }
false;public;0;4;;@Bean public Session Session() {     return mock(Session.class). }
