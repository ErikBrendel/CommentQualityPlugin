commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void configuresADefaultUser() {     this.contextRunner.withUserConfiguration(TestSecurityConfiguration.class).run((context) -> {         ReactiveUserDetailsService userDetailsService = context.getBean(ReactiveUserDetailsService.class).         assertThat(userDetailsService.findByUsername("user").block(Duration.ofSeconds(30))).isNotNull().     }). }
false;public;0;15;;@Test public void doesNotConfigureDefaultUserIfUserDetailsServiceAvailable() {     this.contextRunner.withUserConfiguration(UserConfig.class, TestSecurityConfiguration.class).run((context) -> {         ReactiveUserDetailsService userDetailsService = context.getBean(ReactiveUserDetailsService.class).         assertThat(userDetailsService.findByUsername("user").block(Duration.ofSeconds(30))).isNull().         assertThat(userDetailsService.findByUsername("foo").block(Duration.ofSeconds(30))).isNotNull().         assertThat(userDetailsService.findByUsername("admin").block(Duration.ofSeconds(30))).isNotNull().     }). }
false;public;0;10;;@Test public void doesNotConfigureDefaultUserIfAuthenticationManagerAvailable() {     this.contextRunner.withUserConfiguration(AuthenticationManagerConfig.class, TestSecurityConfiguration.class).withConfiguration(AutoConfigurations.of(ReactiveSecurityAutoConfiguration.class)).run((context) -> assertThat(context).getBean(ReactiveUserDetailsService.class).isNull()). }
false;public;0;11;;@Test public void userDetailsServiceWhenPasswordEncoderAbsentAndDefaultPassword() {     this.contextRunner.withUserConfiguration(TestSecurityConfiguration.class).run(((context) -> {         MapReactiveUserDetailsService userDetailsService = context.getBean(MapReactiveUserDetailsService.class).         String password = userDetailsService.findByUsername("user").block(Duration.ofSeconds(30)).getPassword().         assertThat(password).startsWith("{noop}").     })). }
false;public;0;4;;@Test public void userDetailsServiceWhenPasswordEncoderAbsentAndRawPassword() {     testPasswordEncoding(TestSecurityConfiguration.class, "secret", "{noop}secret"). }
false;public;0;5;;@Test public void userDetailsServiceWhenPasswordEncoderAbsentAndEncodedPassword() {     String password = "{bcrypt}$2a$10$sCBi9fy9814vUPf2ZRbtp.fR5/VgRk2iBFZ.ypu5IyZ28bZgxrVDa".     testPasswordEncoding(TestSecurityConfiguration.class, password, password). }
false;public;0;4;;@Test public void userDetailsServiceWhenPasswordEncoderBeanPresent() {     testPasswordEncoding(TestConfigWithPasswordEncoder.class, "secret", "secret"). }
false;private;3;12;;private void testPasswordEncoding(Class<?> configClass, String providedPassword, String expectedPassword) {     this.contextRunner.withUserConfiguration(configClass).withPropertyValues("spring.security.user.password=" + providedPassword).run(((context) -> {         MapReactiveUserDetailsService userDetailsService = context.getBean(MapReactiveUserDetailsService.class).         String password = userDetailsService.findByUsername("user").block(Duration.ofSeconds(30)).getPassword().         assertThat(password).isEqualTo(expectedPassword).     })). }
false;public;0;8;;@Bean public MapReactiveUserDetailsService userDetailsService() {     UserDetails foo = User.withUsername("foo").password("foo").roles("USER").build().     UserDetails admin = User.withUsername("admin").password("admin").roles("USER", "ADMIN").build().     return new MapReactiveUserDetailsService(foo, admin). }
false;public;0;4;;@Bean public ReactiveAuthenticationManager reactiveAuthenticationManager() {     return (authentication) -> null. }
false;public;0;4;;@Bean public PasswordEncoder passwordEncoder() {     return mock(PasswordEncoder.class). }
