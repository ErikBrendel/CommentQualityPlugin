commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void loadShouldLoadProperties() {     assertThat(load()).isNotNull(). }
false;public;0;4;;@Test public void wasProcessedWhenProcessedShouldReturnTrue() {     assertThat(load().wasProcessed("test")).isTrue(). }
false;public;0;4;;@Test public void wasProcessedWhenNotProcessedShouldReturnFalse() {     assertThat(load().wasProcessed("testx")).isFalse(). }
false;public;0;4;;@Test public void getIntegerShouldReturnValue() {     assertThat(load().getInteger("test", "int")).isEqualTo(123). }
false;public;0;4;;@Test public void getIntegerWhenMissingShouldReturnNull() {     assertThat(load().getInteger("test", "intx")).isNull(). }
false;public;0;4;;@Test public void getIntegerWithDefaultWhenMissingShouldReturnDefault() {     assertThat(load().getInteger("test", "intx", 345)).isEqualTo(345). }
false;public;0;4;;@Test public void getSetShouldReturnValue() {     assertThat(load().getSet("test", "set")).containsExactly("a", "b", "c"). }
false;public;0;4;;@Test public void getSetWhenMissingShouldReturnNull() {     assertThat(load().getSet("test", "setx")).isNull(). }
false;public;0;5;;@Test public void getSetWithDefaultWhenMissingShouldReturnDefault() {     assertThat(load().getSet("test", "setx", Collections.singleton("x"))).containsExactly("x"). }
false;public;0;4;;@Test public void getShouldReturnValue() {     assertThat(load().get("test", "string")).isEqualTo("abc"). }
false;public;0;4;;@Test public void getWhenMissingShouldReturnNull() {     assertThat(load().get("test", "stringx")).isNull(). }
false;public;0;4;;@Test public void getWithDefaultWhenMissingShouldReturnDefault() {     assertThat(load().get("test", "stringx", "xyz")).isEqualTo("xyz"). }
false;private;0;4;;private AutoConfigurationMetadata load() {     return AutoConfigurationMetadataLoader.loadMetadata(null, "META-INF/AutoConfigurationMetadataLoaderTests.properties"). }
