commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void atCommonLocationsShouldMatchCommonLocations() {     ServerWebExchangeMatcher matcher = this.resourceRequest.atCommonLocations().     assertMatcher(matcher).matches("/css/file.css").     assertMatcher(matcher).matches("/js/file.js").     assertMatcher(matcher).matches("/images/file.css").     assertMatcher(matcher).matches("/webjars/file.css").     assertMatcher(matcher).matches("/foo/favicon.ico").     assertMatcher(matcher).doesNotMatch("/bar"). }
false;public;0;7;;@Test public void atCommonLocationsWithExcludeShouldNotMatchExcluded() {     ServerWebExchangeMatcher matcher = this.resourceRequest.atCommonLocations().excluding(StaticResourceLocation.CSS).     assertMatcher(matcher).doesNotMatch("/css/file.css").     assertMatcher(matcher).matches("/js/file.js"). }
false;public;0;7;;@Test public void atLocationShouldMatchLocation() {     ServerWebExchangeMatcher matcher = this.resourceRequest.at(StaticResourceLocation.CSS).     assertMatcher(matcher).matches("/css/file.css").     assertMatcher(matcher).doesNotMatch("/js/file.js"). }
false;public;0;6;;@Test public void atLocationsFromSetWhenSetIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.resourceRequest.at(null)).withMessageContaining("Locations must not be null"). }
false;public;0;7;;@Test public void excludeFromSetWhenSetIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.resourceRequest.atCommonLocations().excluding(null)).withMessageContaining("Locations must not be null"). }
false;private;1;5;;private RequestMatcherAssert assertMatcher(ServerWebExchangeMatcher matcher) {     StaticWebApplicationContext context = new StaticWebApplicationContext().     context.registerBean(ServerProperties.class).     return assertThat(new RequestMatcherAssert(context, matcher)). }
false;;1;6;;void matches(String path) {     ServerWebExchange exchange = webHandler().createExchange(MockServerHttpRequest.get(path).build(), new MockServerHttpResponse()).     matches(exchange). }
false;private;1;4;;private void matches(ServerWebExchange exchange) {     assertThat(this.matcher.matches(exchange).block(Duration.ofSeconds(30)).isMatch()).as("Matches " + getRequestPath(exchange)).isTrue(). }
false;;1;6;;void doesNotMatch(String path) {     ServerWebExchange exchange = webHandler().createExchange(MockServerHttpRequest.get(path).build(), new MockServerHttpResponse()).     doesNotMatch(exchange). }
false;private;1;5;;private void doesNotMatch(ServerWebExchange exchange) {     assertThat(this.matcher.matches(exchange).block(Duration.ofSeconds(30)).isMatch()).as("Does not match " + getRequestPath(exchange)).isFalse(). }
false;private;0;6;;private TestHttpWebHandlerAdapter webHandler() {     TestHttpWebHandlerAdapter adapter = new TestHttpWebHandlerAdapter(mock(WebHandler.class)).     adapter.setApplicationContext(this.context).     return adapter. }
false;private;1;3;;private String getRequestPath(ServerWebExchange exchange) {     return exchange.getRequest().getPath().toString(). }
false;protected;2;5;;@Override protected ServerWebExchange createExchange(ServerHttpRequest request, ServerHttpResponse response) {     return super.createExchange(request, response). }
