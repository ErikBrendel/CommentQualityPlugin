commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void jestClientOnLocalhostByDefault() {     this.contextRunner.run((context) -> assertThat(context).hasSingleBean(JestClient.class)). }
false;public;0;7;;@Test public void customJestClient() {     this.contextRunner.withUserConfiguration(CustomJestClient.class).withPropertyValues("spring.elasticsearch.jest.uris[0]=http://localhost:9200").run((context) -> assertThat(context).hasSingleBean(JestClient.class)). }
false;public;0;11;;@Test public void customGson() {     this.contextRunner.withUserConfiguration(CustomGson.class).withPropertyValues("spring.elasticsearch.jest.uris=http://localhost:9200").run((context) -> {         JestHttpClient client = (JestHttpClient) context.getBean(JestClient.class).         assertThat(client.getGson()).isSameAs(context.getBean("customGson")).     }). }
false;public;0;12;;@Test public void customizerOverridesAutoConfig() {     this.contextRunner.withUserConfiguration(BuilderCustomizer.class).withPropertyValues("spring.elasticsearch.jest.uris=http://localhost:9200").run((context) -> {         JestHttpClient client = (JestHttpClient) context.getBean(JestClient.class).         assertThat(client.getGson()).isSameAs(context.getBean(BuilderCustomizer.class).getGson()).     }). }
false;public;0;10;;@Test public void proxyHostWithoutPort() {     this.contextRunner.withPropertyValues("spring.elasticsearch.jest.uris=http://localhost:9200", "spring.elasticsearch.jest.proxy.host=proxy.example.com").run((context) -> assertThat(context.getStartupFailure()).isInstanceOf(BeanCreationException.class).hasMessageContaining("Proxy port must not be null")). }
false;public;0;18;;@Test public void jestCanCommunicateWithElasticsearchInstance() {     this.contextRunner.withPropertyValues("spring.elasticsearch.jest.uris=http://localhost:" + elasticsearch.getMappedPort()).run((context) -> {         JestClient client = context.getBean(JestClient.class).         Map<String, String> source = new HashMap<>().         source.put("a", "alpha").         source.put("b", "bravo").         Index index = new Index.Builder(source).index("foo").type("bar").id("1").build().         execute(client, index).         Get getRequest = new Get.Builder("foo", "1").build().         assertThat(execute(client, getRequest).getResponseCode()).isEqualTo(200).     }). }
false;private;2;16;;private JestResult execute(JestClient client, Action<? extends JestResult> action) {     for (int i = 0. i < 2. i++) {         try {             return client.execute(action).         } catch (IOException ex) {         // Continue         }     }     try {         return client.execute(action).     } catch (IOException ex) {         throw new RuntimeException(ex).     } }
false;public;0;4;;@Bean public JestClient customJestClient() {     return mock(JestClient.class). }
false;public;0;4;;@Bean public Gson customGson() {     return new Gson(). }
false;public;0;4;;@Bean public HttpClientConfigBuilderCustomizer customizer() {     return (builder) -> builder.gson(BuilderCustomizer.this.gson). }
false;;0;3;;Gson getGson() {     return this.gson. }
