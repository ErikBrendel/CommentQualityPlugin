commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void init() {     new LiquibaseServiceLocatorApplicationListener().onApplicationEvent(new ApplicationStartingEvent(new SpringApplication(Object.class), new String[0])). }
false;public;0;5;;@Test public void noDataSource() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(SpringLiquibase.class)). }
false;public;0;11;;@Test public void defaultSpringLiquibase() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).run(assertLiquibase((liquibase) -> {         assertThat(liquibase.getChangeLog()).isEqualTo("classpath:/db/changelog/db.changelog-master.yaml").         assertThat(liquibase.getContexts()).isNull().         assertThat(liquibase.getDefaultSchema()).isNull().         assertThat(liquibase.isDropFirst()).isFalse().     })). }
false;public;0;8;;@Test public void changelogXml() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.xml").run(assertLiquibase((liquibase) -> assertThat(liquibase.getChangeLog()).isEqualTo("classpath:/db/changelog/db.changelog-override.xml"))). }
false;public;0;9;;@Test public void changelogJson() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.json").run(assertLiquibase((liquibase) -> assertThat(liquibase.getChangeLog()).isEqualTo("classpath:/db/changelog/db.changelog-override.json"))). }
false;public;0;9;;@Test public void changelogSql() {     Assume.javaEight().     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.sql").run(assertLiquibase((liquibase) -> assertThat(liquibase.getChangeLog()).isEqualTo("classpath:/db/changelog/db.changelog-override.sql"))). }
false;public;0;15;;@Test public void defaultValues() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).run(assertLiquibase((liquibase) -> {         LiquibaseProperties properties = new LiquibaseProperties().         assertThat(liquibase.getDatabaseChangeLogTable()).isEqualTo(properties.getDatabaseChangeLogTable()).         assertThat(liquibase.getDatabaseChangeLogLockTable()).isEqualTo(properties.getDatabaseChangeLogLockTable()).         assertThat(liquibase.isDropFirst()).isEqualTo(properties.isDropFirst()).         assertThat(liquibase.isTestRollbackOnUpdate()).isEqualTo(properties.isTestRollbackOnUpdate()).     })). }
false;public;0;7;;@Test public void overrideContexts() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.liquibase.contexts:test, production").run(assertLiquibase((liquibase) -> assertThat(liquibase.getContexts()).isEqualTo("test, production"))). }
false;public;0;8;;@Test public void overrideDefaultSchema() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.liquibase.default-schema:public").run(assertLiquibase((liquibase) -> assertThat(liquibase.getDefaultSchema()).isEqualTo("public"))). }
false;public;0;25;;@Test public void overrideLiquibaseInfrastructure() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.liquibase.liquibase-schema:public", "spring.liquibase.liquibase-tablespace:infra", "spring.liquibase.database-change-log-table:LIQUI_LOG", "spring.liquibase.database-change-log-lock-table:LIQUI_LOCK").run((context) -> {         SpringLiquibase liquibase = context.getBean(SpringLiquibase.class).         assertThat(liquibase.getLiquibaseSchema()).isEqualTo("public").         assertThat(liquibase.getLiquibaseTablespace()).isEqualTo("infra").         assertThat(liquibase.getDatabaseChangeLogTable()).isEqualTo("LIQUI_LOG").         assertThat(liquibase.getDatabaseChangeLogLockTable()).isEqualTo("LIQUI_LOCK").         JdbcTemplate jdbcTemplate = new JdbcTemplate(context.getBean(DataSource.class)).         assertThat(jdbcTemplate.queryForObject("SELECT COUNT(*) FROM public.LIQUI_LOG", Integer.class)).isEqualTo(1).         assertThat(jdbcTemplate.queryForObject("SELECT COUNT(*) FROM public.LIQUI_LOCK", Integer.class)).isEqualTo(1).     }). }
false;public;0;7;;@Test public void overrideDropFirst() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.liquibase.drop-first:true").run(assertLiquibase((liquibase) -> assertThat(liquibase.isDropFirst()).isTrue())). }
false;public;0;11;;@Test public void overrideDataSource() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.liquibase.url:jdbc:hsqldb:mem:liquibase").run(assertLiquibase((liquibase) -> {         DataSource dataSource = liquibase.getDataSource().         assertThat(((HikariDataSource) dataSource).isClosed()).isTrue().         assertThat(((HikariDataSource) dataSource).getJdbcUrl()).isEqualTo("jdbc:hsqldb:mem:liquibase").     })). }
false;public;0;15;;@Test public void overrideUser() {     String jdbcUrl = "jdbc:hsqldb:mem:normal".     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.datasource.url:" + jdbcUrl, "spring.datasource.username:not-sa", "spring.liquibase.user:sa").run(assertLiquibase((liquibase) -> {         DataSource dataSource = liquibase.getDataSource().         assertThat(((HikariDataSource) dataSource).isClosed()).isTrue().         assertThat(((HikariDataSource) dataSource).getJdbcUrl()).isEqualTo(jdbcUrl).         assertThat(((HikariDataSource) dataSource).getUsername()).isEqualTo("sa").     })). }
false;public;0;9;;@Test public void overrideTestRollbackOnUpdate() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.liquibase.test-rollback-on-update:true").run((context) -> {         SpringLiquibase liquibase = context.getBean(SpringLiquibase.class).         assertThat(liquibase.isTestRollbackOnUpdate()).isTrue().     }). }
false;public;0;11;;@Test public void changeLogDoesNotExist() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.liquibase.change-log:classpath:/no-such-changelog.yaml").run((context) -> {         assertThat(context).hasFailed().         assertThat(context).getFailure().isInstanceOf(BeanCreationException.class).     }). }
false;public;0;9;;@Test public void logging() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).run(assertLiquibase((liquibase) -> {         Object log = ReflectionTestUtils.getField(liquibase, "log").         assertThat(log).isInstanceOf(Slf4jLogger.class).         assertThat(this.output.toString()).doesNotContain(": liquibase:").     })). }
false;public;0;7;;@Test public void overrideLabels() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.liquibase.labels:test, production").run(assertLiquibase((liquibase) -> assertThat(liquibase.getLabels()).isEqualTo("test, production"))). }
false;public;0;12;;@Test @SuppressWarnings("unchecked") public void testOverrideParameters() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.liquibase.parameters.foo:bar").run(assertLiquibase((liquibase) -> {         Map<String, String> parameters = (Map<String, String>) ReflectionTestUtils.getField(liquibase, "parameters").         assertThat(parameters.containsKey("foo")).isTrue().         assertThat(parameters.get("foo")).isEqualTo("bar").     })). }
false;public;0;14;;@Test public void rollbackFile() throws IOException {     File file = this.temp.newFile("rollback-file.sql").     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.liquibase.rollbackFile:" + file.getAbsolutePath()).run((context) -> {         SpringLiquibase liquibase = context.getBean(SpringLiquibase.class).         File actualFile = (File) ReflectionTestUtils.getField(liquibase, "rollbackFile").         assertThat(actualFile).isEqualTo(file).exists().         assertThat(contentOf(file)).contains("DROP TABLE PUBLIC.customer.").     }). }
false;public;0;9;;@Test public void liquibaseDataSource() {     this.contextRunner.withUserConfiguration(LiquibaseDataSourceConfiguration.class, EmbeddedDataSourceConfiguration.class).run((context) -> {         SpringLiquibase liquibase = context.getBean(SpringLiquibase.class).         assertThat(liquibase.getDataSource()).isEqualTo(context.getBean("liquibaseDataSource")).     }). }
false;public;0;9;;@Test public void liquibaseDataSourceWithoutDataSourceAutoConfiguration() {     this.contextRunner.withUserConfiguration(LiquibaseDataSourceConfiguration.class).run((context) -> {         SpringLiquibase liquibase = context.getBean(SpringLiquibase.class).         assertThat(liquibase.getDataSource()).isEqualTo(context.getBean("liquibaseDataSource")).     }). }
false;private;1;8;;private ContextConsumer<AssertableApplicationContext> assertLiquibase(Consumer<SpringLiquibase> consumer) {     return (context) -> {         assertThat(context).hasSingleBean(SpringLiquibase.class).         SpringLiquibase liquibase = context.getBean(SpringLiquibase.class).         consumer.accept(liquibase).     }. }
false;public;0;6;;@Bean @Primary public DataSource normalDataSource() {     return DataSourceBuilder.create().url("jdbc:hsqldb:mem:normal").username("sa").build(). }
false;public;0;6;;@LiquibaseDataSource @Bean public DataSource liquibaseDataSource() {     return DataSourceBuilder.create().url("jdbc:hsqldb:mem:liquibasetest").username("sa").build(). }
