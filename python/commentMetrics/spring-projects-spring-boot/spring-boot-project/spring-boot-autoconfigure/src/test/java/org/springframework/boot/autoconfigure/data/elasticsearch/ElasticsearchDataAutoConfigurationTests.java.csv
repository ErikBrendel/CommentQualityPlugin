commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;6;;@Test public void templateBackOffWithNoClient() {     this.context = new AnnotationConfigApplicationContext(ElasticsearchDataAutoConfiguration.class).     assertThat(this.context.getBeansOfType(ElasticsearchTemplate.class)).isEmpty(). }
false;public;0;14;;@Test public void templateExists() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.data.elasticsearch.cluster-nodes:localhost:" + elasticsearch.getMappedTransportPort(), "spring.data.elasticsearch.cluster-name:docker-cluster").applyTo(this.context).     this.context.register(PropertyPlaceholderAutoConfiguration.class, ElasticsearchAutoConfiguration.class, ElasticsearchDataAutoConfiguration.class).     this.context.refresh().     assertHasSingleBean(ElasticsearchTemplate.class). }
false;public;0;14;;@Test public void mappingContextExists() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.data.elasticsearch.cluster-nodes:localhost:" + elasticsearch.getMappedTransportPort(), "spring.data.elasticsearch.cluster-name:docker-cluster").applyTo(this.context).     this.context.register(PropertyPlaceholderAutoConfiguration.class, ElasticsearchAutoConfiguration.class, ElasticsearchDataAutoConfiguration.class).     this.context.refresh().     assertHasSingleBean(SimpleElasticsearchMappingContext.class). }
false;public;0;14;;@Test public void converterExists() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.data.elasticsearch.cluster-nodes:localhost:" + elasticsearch.getMappedTransportPort(), "spring.data.elasticsearch.cluster-name:docker-cluster").applyTo(this.context).     this.context.register(PropertyPlaceholderAutoConfiguration.class, ElasticsearchAutoConfiguration.class, ElasticsearchDataAutoConfiguration.class).     this.context.refresh().     assertHasSingleBean(ElasticsearchConverter.class). }
false;private;1;3;;private void assertHasSingleBean(Class<?> type) {     assertThat(this.context.getBeanNamesForType(type)).hasSize(1). }
