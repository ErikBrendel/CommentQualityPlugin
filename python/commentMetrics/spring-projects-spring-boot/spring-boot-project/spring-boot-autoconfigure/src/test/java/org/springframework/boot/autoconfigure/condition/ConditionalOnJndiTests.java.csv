commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setupThreadContextClassLoader() {     this.threadContextClassLoader = Thread.currentThread().getContextClassLoader().     Thread.currentThread().setContextClassLoader(new JndiPropertiesHidingClassLoader(getClass().getClassLoader())). }
false;public;0;12;;@After public void close() {     TestableInitialContextFactory.clearAll().     if (this.initialContextFactory != null) {         System.setProperty(Context.INITIAL_CONTEXT_FACTORY, this.initialContextFactory).     } else {         System.clearProperty(Context.INITIAL_CONTEXT_FACTORY).     }     Thread.currentThread().setContextClassLoader(this.threadContextClassLoader). }
false;public;0;7;;@Test public void jndiNotAvailable() {     this.contextRunner.withUserConfiguration(JndiAvailableConfiguration.class, JndiConditionConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(String.class)). }
false;public;0;8;;@Test public void jndiAvailable() {     setupJndi().     this.contextRunner.withUserConfiguration(JndiAvailableConfiguration.class, JndiConditionConfiguration.class).run((context) -> assertThat(context).hasSingleBean(String.class)). }
false;public;0;6;;@Test public void jndiLocationNotBound() {     setupJndi().     this.contextRunner.withUserConfiguration(JndiConditionConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(String.class)). }
false;public;0;7;;@Test public void jndiLocationBound() {     setupJndi().     TestableInitialContextFactory.bind("java:/FooManager", new Object()).     this.contextRunner.withUserConfiguration(JndiConditionConfiguration.class).run((context) -> assertThat(context).hasSingleBean(String.class)). }
false;public;0;6;;@Test public void jndiLocationNotFound() {     ConditionOutcome outcome = this.condition.getMatchOutcome(null, mockMetaData("java:/a")).     assertThat(outcome.isMatch()).isFalse(). }
false;public;0;7;;@Test public void jndiLocationFound() {     this.condition.setFoundLocation("java:/b").     ConditionOutcome outcome = this.condition.getMatchOutcome(null, mockMetaData("java:/a", "java:/b")).     assertThat(outcome.isMatch()).isTrue(). }
false;private;0;5;;private void setupJndi() {     this.initialContextFactory = System.getProperty(Context.INITIAL_CONTEXT_FACTORY).     System.setProperty(Context.INITIAL_CONTEXT_FACTORY, TestableInitialContextFactory.class.getName()). }
false;private;1;8;;private AnnotatedTypeMetadata mockMetaData(String... value) {     AnnotatedTypeMetadata metadata = mock(AnnotatedTypeMetadata.class).     Map<String, Object> attributes = new HashMap<>().     attributes.put("value", value).     given(metadata.getAnnotationAttributes(ConditionalOnJndi.class.getName())).willReturn(attributes).     return metadata. }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
false;protected;0;4;;@Override protected boolean isJndiAvailable() {     return this.jndiAvailable. }
false;public;0;4;;@Override public String lookupFirstLocation() {     return MockableOnJndi.this.foundLocation. }
false;protected;1;9;;@Override protected JndiLocator getJndiLocator(String[] locations) {     return new JndiLocator(locations) {          @Override         public String lookupFirstLocation() {             return MockableOnJndi.this.foundLocation.         }     }. }
false;public;1;3;;public void setFoundLocation(String foundLocation) {     this.foundLocation = foundLocation. }
