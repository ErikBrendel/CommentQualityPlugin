commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void defaultConfig() {     this.contextRunner.withPropertyValues("spring.session.store-type=hazelcast").run(this::validateDefaultConfig). }
false;public;0;9;;@Test public void defaultConfigWithUniqueStoreImplementation() {     this.contextRunner.withClassLoader(new FilteredClassLoader(JdbcOperationsSessionRepository.class, RedisOperationsSessionRepository.class, MongoOperationsSessionRepository.class)).run(this::validateDefaultConfig). }
false;private;1;5;;private void validateDefaultConfig(AssertableWebApplicationContext context) {     validateSessionRepository(context, HazelcastSessionRepository.class).     HazelcastInstance hazelcastInstance = context.getBean(HazelcastInstance.class).     verify(hazelcastInstance, times(1)).getMap("spring:session:sessions"). }
false;public;0;12;;@Test public void customMapName() {     this.contextRunner.withPropertyValues("spring.session.store-type=hazelcast", "spring.session.hazelcast.map-name=foo:bar:biz").run((context) -> {         validateSessionRepository(context, HazelcastSessionRepository.class).         HazelcastInstance hazelcastInstance = context.getBean(HazelcastInstance.class).         verify(hazelcastInstance, times(1)).getMap("foo:bar:biz").     }). }
false;public;0;12;;@Test public void customFlushMode() {     this.contextRunner.withPropertyValues("spring.session.store-type=hazelcast", "spring.session.hazelcast.flush-mode=immediate").run((context) -> {         HazelcastSessionRepository repository = validateSessionRepository(context, HazelcastSessionRepository.class).         assertThat(repository).hasFieldOrPropertyWithValue("hazelcastFlushMode", HazelcastFlushMode.IMMEDIATE).     }). }
false;public;0;9;;@Bean @SuppressWarnings("unchecked") public HazelcastInstance hazelcastInstance() {     IMap<Object, Object> map = mock(IMap.class).     HazelcastInstance mock = mock(HazelcastInstance.class).     given(mock.getMap("spring:session:sessions")).willReturn(map).     given(mock.getMap("foo:bar:biz")).willReturn(map).     return mock. }
