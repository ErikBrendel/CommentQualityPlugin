commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void closeContext() {     if (this.context != null) {         this.context.close().     } }
false;public;0;7;;@Test public void customPlatformTransactionManager() {     this.context = new AnnotationConfigApplicationContext(CustomTransactionManagerConfig.class, JtaAutoConfiguration.class).     assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.context.getBean(JtaTransactionManager.class)). }
false;public;0;11;;@Test public void disableJtaSupport() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.jta.enabled:false").applyTo(this.context).     this.context.register(JtaAutoConfiguration.class).     this.context.refresh().     assertThat(this.context.getBeansOfType(JtaTransactionManager.class)).isEmpty().     assertThat(this.context.getBeansOfType(XADataSourceWrapper.class)).isEmpty().     assertThat(this.context.getBeansOfType(XAConnectionFactoryWrapper.class)).isEmpty(). }
false;public;0;13;;@Test public void atomikosSanityCheck() {     this.context = new AnnotationConfigApplicationContext(JtaProperties.class, AtomikosJtaConfiguration.class).     this.context.getBean(AtomikosProperties.class).     this.context.getBean(UserTransactionService.class).     this.context.getBean(UserTransactionManager.class).     this.context.getBean(UserTransaction.class).     this.context.getBean(XADataSourceWrapper.class).     this.context.getBean(XAConnectionFactoryWrapper.class).     this.context.getBean(AtomikosDependsOnBeanFactoryPostProcessor.class).     this.context.getBean(JtaTransactionManager.class). }
false;public;0;11;;@Test public void bitronixSanityCheck() {     this.context = new AnnotationConfigApplicationContext(JtaProperties.class, BitronixJtaConfiguration.class).     this.context.getBean(bitronix.tm.Configuration.class).     this.context.getBean(TransactionManager.class).     this.context.getBean(XADataSourceWrapper.class).     this.context.getBean(XAConnectionFactoryWrapper.class).     this.context.getBean(BitronixDependentBeanFactoryPostProcessor.class).     this.context.getBean(JtaTransactionManager.class). }
false;public;0;8;;@Test public void defaultBitronixServerId() throws UnknownHostException {     this.context = new AnnotationConfigApplicationContext(BitronixJtaConfiguration.class).     String serverId = this.context.getBean(bitronix.tm.Configuration.class).getServerId().     assertThat(serverId).isEqualTo(InetAddress.getLocalHost().getHostAddress()). }
false;public;0;11;;@Test public void customBitronixServerId() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.jta.transactionManagerId:custom").applyTo(this.context).     this.context.register(BitronixJtaConfiguration.class).     this.context.refresh().     String serverId = this.context.getBean(bitronix.tm.Configuration.class).getServerId().     assertThat(serverId).isEqualTo("custom"). }
false;public;0;12;;@Test public void defaultAtomikosTransactionManagerName() throws IOException {     this.context = new AnnotationConfigApplicationContext().     File logs = this.temp.newFolder("jta").     TestPropertyValues.of("spring.jta.logDir:" + logs.getAbsolutePath()).applyTo(this.context).     this.context.register(AtomikosJtaConfiguration.class).     this.context.refresh().     File epochFile = new File(logs, "tmlog0.log").     assertThat(epochFile.isFile()).isTrue(). }
false;public;0;14;;@Test public void atomikosConnectionFactoryPoolConfiguration() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.jta.atomikos.connectionfactory.minPoolSize:5", "spring.jta.atomikos.connectionfactory.maxPoolSize:10").applyTo(this.context).     this.context.register(AtomikosJtaConfiguration.class, PoolConfiguration.class).     this.context.refresh().     AtomikosConnectionFactoryBean connectionFactory = this.context.getBean(AtomikosConnectionFactoryBean.class).     assertThat(connectionFactory.getMinPoolSize()).isEqualTo(5).     assertThat(connectionFactory.getMaxPoolSize()).isEqualTo(10). }
false;public;0;14;;@Test public void bitronixConnectionFactoryPoolConfiguration() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.jta.bitronix.connectionfactory.minPoolSize:5", "spring.jta.bitronix.connectionfactory.maxPoolSize:10").applyTo(this.context).     this.context.register(BitronixJtaConfiguration.class, PoolConfiguration.class).     this.context.refresh().     PoolingConnectionFactoryBean connectionFactory = this.context.getBean(PoolingConnectionFactoryBean.class).     assertThat(connectionFactory.getMinPoolSize()).isEqualTo(5).     assertThat(connectionFactory.getMaxPoolSize()).isEqualTo(10). }
false;public;0;14;;@Test public void atomikosDataSourcePoolConfiguration() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.jta.atomikos.datasource.minPoolSize:5", "spring.jta.atomikos.datasource.maxPoolSize:10").applyTo(this.context).     this.context.register(AtomikosJtaConfiguration.class, PoolConfiguration.class).     this.context.refresh().     AtomikosDataSourceBean dataSource = this.context.getBean(AtomikosDataSourceBean.class).     assertThat(dataSource.getMinPoolSize()).isEqualTo(5).     assertThat(dataSource.getMaxPoolSize()).isEqualTo(10). }
false;public;0;14;;@Test public void bitronixDataSourcePoolConfiguration() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.jta.bitronix.datasource.minPoolSize:5", "spring.jta.bitronix.datasource.maxPoolSize:10").applyTo(this.context).     this.context.register(BitronixJtaConfiguration.class, PoolConfiguration.class).     this.context.refresh().     PoolingDataSourceBean dataSource = this.context.getBean(PoolingDataSourceBean.class).     assertThat(dataSource.getMinPoolSize()).isEqualTo(5).     assertThat(dataSource.getMaxPoolSize()).isEqualTo(10). }
false;public;0;15;;@Test public void atomikosCustomizeJtaTransactionManagerUsingProperties() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.transaction.default-timeout:30", "spring.transaction.rollback-on-commit-failure:true").applyTo(this.context).     this.context.register(AtomikosJtaConfiguration.class, TransactionAutoConfiguration.class).     this.context.refresh().     JtaTransactionManager transactionManager = this.context.getBean(JtaTransactionManager.class).     assertThat(transactionManager.getDefaultTimeout()).isEqualTo(30).     assertThat(transactionManager.isRollbackOnCommitFailure()).isTrue(). }
false;public;0;15;;@Test public void bitronixCustomizeJtaTransactionManagerUsingProperties() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.transaction.default-timeout:30", "spring.transaction.rollback-on-commit-failure:true").applyTo(this.context).     this.context.register(BitronixJtaConfiguration.class, TransactionAutoConfiguration.class).     this.context.refresh().     JtaTransactionManager transactionManager = this.context.getBean(JtaTransactionManager.class).     assertThat(transactionManager.getDefaultTimeout()).isEqualTo(30).     assertThat(transactionManager.isRollbackOnCommitFailure()).isTrue(). }
false;public;0;4;;@Bean public PlatformTransactionManager transactionManager() {     return mock(PlatformTransactionManager.class). }
false;public;1;14;;@Bean public ConnectionFactory pooledConnectionFactory(XAConnectionFactoryWrapper wrapper) throws Exception {     XAConnectionFactory connectionFactory = mock(XAConnectionFactory.class).     XAConnection connection = mock(XAConnection.class).     XASession session = mock(XASession.class).     TemporaryQueue queue = mock(TemporaryQueue.class).     XAResource resource = mock(XAResource.class).     given(connectionFactory.createXAConnection()).willReturn(connection).     given(connection.createXASession()).willReturn(session).     given(session.createTemporaryQueue()).willReturn(queue).     given(session.getXAResource()).willReturn(resource).     return wrapper.wrapConnectionFactory(connectionFactory). }
false;public;1;5;;@Bean public DataSource pooledDataSource(XADataSourceWrapper wrapper) throws Exception {     XADataSource dataSource = mock(XADataSource.class).     return wrapper.wrapDataSource(dataSource). }
