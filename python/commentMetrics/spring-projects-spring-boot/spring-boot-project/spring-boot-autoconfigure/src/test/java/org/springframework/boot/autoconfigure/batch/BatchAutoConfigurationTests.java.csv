commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testDefaultContext() {     this.contextRunner.withUserConfiguration(TestConfiguration.class, EmbeddedDataSourceConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(JobLauncher.class).         assertThat(context).hasSingleBean(JobExplorer.class).         assertThat(context.getBean(BatchProperties.class).getInitializeSchema()).isEqualTo(DataSourceInitializationMode.EMBEDDED).         assertThat(new JdbcTemplate(context.getBean(DataSource.class)).queryForList("select * from BATCH_JOB_EXECUTION")).isEmpty().     }). }
false;public;0;9;;@Test public void testNoDatabase() {     this.contextRunner.withUserConfiguration(TestCustomConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(JobLauncher.class).         JobExplorer explorer = context.getBean(JobExplorer.class).         assertThat(explorer.getJobInstances("job", 0, 100)).isEmpty().     }). }
false;public;0;8;;@Test public void testNoBatchConfiguration() {     this.contextRunner.withUserConfiguration(EmptyConfiguration.class, EmbeddedDataSourceConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean(JobLauncher.class).         assertThat(context).doesNotHaveBean(JobRepository.class).     }). }
false;public;0;10;;@Test public void testDefinesAndLaunchesJob() {     this.contextRunner.withUserConfiguration(JobConfiguration.class, EmbeddedDataSourceConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(JobLauncher.class).         context.getBean(JobLauncherCommandLineRunner.class).run().         assertThat(context.getBean(JobRepository.class).getLastJobExecution("job", new JobParameters())).isNotNull().     }). }
false;public;0;13;;@Test public void testDefinesAndLaunchesNamedJob() {     this.contextRunner.withUserConfiguration(NamedJobConfigurationWithRegisteredJob.class, EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.batch.job.names:discreteRegisteredJob").run((context) -> {         assertThat(context).hasSingleBean(JobLauncher.class).         context.getBean(JobLauncherCommandLineRunner.class).run().         assertThat(context.getBean(JobRepository.class).getLastJobExecution("discreteRegisteredJob", new JobParameters())).isNotNull().     }). }
false;public;0;14;;@Test public void testDefinesAndLaunchesLocalJob() {     this.contextRunner.withUserConfiguration(NamedJobConfigurationWithLocalJob.class, EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.batch.job.names:discreteLocalJob").run((context) -> {         assertThat(context).hasSingleBean(JobLauncher.class).         context.getBean(JobLauncherCommandLineRunner.class).run().         assertThat(context.getBean(JobRepository.class).getLastJobExecution("discreteLocalJob", new JobParameters())).isNotNull().     }). }
false;public;0;10;;@Test public void testDisableLaunchesJob() {     this.contextRunner.withUserConfiguration(JobConfiguration.class, EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.batch.job.enabled:false").run((context) -> {         assertThat(context).hasSingleBean(JobLauncher.class).         assertThat(context).doesNotHaveBean(CommandLineRunner.class).     }). }
false;public;0;17;;@Test public void testDisableSchemaLoader() {     this.contextRunner.withUserConfiguration(TestConfiguration.class, EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.datasource.generate-unique-name=true", "spring.batch.initialize-schema:never").run((context) -> {         assertThat(context).hasSingleBean(JobLauncher.class).         assertThat(context.getBean(BatchProperties.class).getInitializeSchema()).isEqualTo(DataSourceInitializationMode.NEVER).         assertThatExceptionOfType(BadSqlGrammarException.class).isThrownBy(() -> new JdbcTemplate(context.getBean(DataSource.class)).queryForList("select * from BATCH_JOB_EXECUTION")).     }). }
false;public;0;18;;@Test public void testUsingJpa() {     this.contextRunner.withUserConfiguration(TestConfiguration.class, EmbeddedDataSourceConfiguration.class, HibernateJpaAutoConfiguration.class).run((context) -> {         PlatformTransactionManager transactionManager = context.getBean(PlatformTransactionManager.class).         // It's a lazy proxy, but it does render its target if you ask for         // toString():         assertThat(transactionManager.toString().contains("JpaTransactionManager")).isTrue().         assertThat(context).hasSingleBean(EntityManagerFactory.class).         // Ensure the JobRepository can be used (no problem with isolation         // level)         assertThat(context.getBean(JobRepository.class).getLastJobExecution("job", new JobParameters())).isNull().     }). }
false;public;0;24;;@Test public void testRenamePrefix() {     this.contextRunner.withUserConfiguration(TestConfiguration.class, EmbeddedDataSourceConfiguration.class, HibernateJpaAutoConfiguration.class).withPropertyValues("spring.datasource.generate-unique-name=true", "spring.batch.schema:classpath:batch/custom-schema-hsql.sql", "spring.batch.tablePrefix:PREFIX_").run((context) -> {         assertThat(context).hasSingleBean(JobLauncher.class).         assertThat(context.getBean(BatchProperties.class).getInitializeSchema()).isEqualTo(DataSourceInitializationMode.EMBEDDED).         assertThat(new JdbcTemplate(context.getBean(DataSource.class)).queryForList("select * from PREFIX_JOB_EXECUTION")).isEmpty().         JobExplorer jobExplorer = context.getBean(JobExplorer.class).         assertThat(jobExplorer.findRunningJobExecutions("test")).isEmpty().         JobRepository jobRepository = context.getBean(JobRepository.class).         assertThat(jobRepository.getLastJobExecution("test", new JobParameters())).isNull().     }). }
false;public;0;17;;@Test public void testCustomizeJpaTransactionManagerUsingProperties() {     this.contextRunner.withUserConfiguration(TestConfiguration.class, EmbeddedDataSourceConfiguration.class, HibernateJpaAutoConfiguration.class).withPropertyValues("spring.transaction.default-timeout:30", "spring.transaction.rollback-on-commit-failure:true").run((context) -> {         assertThat(context).hasSingleBean(BatchConfigurer.class).         JpaTransactionManager transactionManager = JpaTransactionManager.class.cast(context.getBean(BatchConfigurer.class).getTransactionManager()).         assertThat(transactionManager.getDefaultTimeout()).isEqualTo(30).         assertThat(transactionManager.isRollbackOnCommitFailure()).isTrue().     }). }
false;public;0;16;;@Test public void testCustomizeDataSourceTransactionManagerUsingProperties() {     this.contextRunner.withUserConfiguration(TestConfiguration.class, EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.transaction.default-timeout:30", "spring.transaction.rollback-on-commit-failure:true").run((context) -> {         assertThat(context).hasSingleBean(BatchConfigurer.class).         DataSourceTransactionManager transactionManager = DataSourceTransactionManager.class.cast(context.getBean(BatchConfigurer.class).getTransactionManager()).         assertThat(transactionManager.getDefaultTimeout()).isEqualTo(30).         assertThat(transactionManager.isRollbackOnCommitFailure()).isTrue().     }). }
false;public;0;8;;@Override public JobRepository getJobRepository() throws Exception {     if (this.jobRepository == null) {         this.factory.afterPropertiesSet().         this.jobRepository = this.factory.getObject().     }     return this.jobRepository. }
false;public;0;4;;@Override public PlatformTransactionManager getTransactionManager() {     return new ResourcelessTransactionManager(). }
false;public;0;6;;@Override public JobLauncher getJobLauncher() {     SimpleJobLauncher launcher = new SimpleJobLauncher().     launcher.setJobRepository(this.jobRepository).     return launcher. }
false;public;0;7;;@Override public JobExplorer getJobExplorer() throws Exception {     MapJobExplorerFactoryBean explorer = new MapJobExplorerFactoryBean(this.factory).     explorer.afterPropertiesSet().     return explorer.getObject(). }
false;public;0;6;;@Bean public JobRegistryBeanPostProcessor registryProcessor() {     JobRegistryBeanPostProcessor processor = new JobRegistryBeanPostProcessor().     processor.setJobRegistry(this.jobRegistry).     return processor. }
false;public;0;4;;@Override public Collection<String> getStepNames() {     return Collections.emptySet(). }
false;public;1;4;;@Override public Step getStep(String stepName) {     return null. }
false;protected;1;4;;@Override protected void doExecute(JobExecution execution) {     execution.setStatus(BatchStatus.COMPLETED). }
false;public;0;22;;@Bean public Job discreteJob() {     AbstractJob job = new AbstractJob("discreteRegisteredJob") {          @Override         public Collection<String> getStepNames() {             return Collections.emptySet().         }          @Override         public Step getStep(String stepName) {             return null.         }          @Override         protected void doExecute(JobExecution execution) {             execution.setStatus(BatchStatus.COMPLETED).         }     }.     job.setJobRepository(this.jobRepository).     return job. }
false;public;0;4;;@Override public Collection<String> getStepNames() {     return Collections.emptySet(). }
false;public;1;4;;@Override public Step getStep(String stepName) {     return null. }
false;protected;1;4;;@Override protected void doExecute(JobExecution execution) {     execution.setStatus(BatchStatus.COMPLETED). }
false;public;0;22;;@Bean public Job discreteJob() {     AbstractJob job = new AbstractJob("discreteLocalJob") {          @Override         public Collection<String> getStepNames() {             return Collections.emptySet().         }          @Override         public Step getStep(String stepName) {             return null.         }          @Override         protected void doExecute(JobExecution execution) {             execution.setStatus(BatchStatus.COMPLETED).         }     }.     job.setJobRepository(this.jobRepository).     return job. }
false;public;0;4;;@Override public Collection<String> getStepNames() {     return Collections.emptySet(). }
false;public;1;4;;@Override public Step getStep(String stepName) {     return null. }
false;protected;1;4;;@Override protected void doExecute(JobExecution execution) {     execution.setStatus(BatchStatus.COMPLETED). }
false;public;0;22;;@Bean public Job job() {     AbstractJob job = new AbstractJob() {          @Override         public Collection<String> getStepNames() {             return Collections.emptySet().         }          @Override         public Step getStep(String stepName) {             return null.         }          @Override         protected void doExecute(JobExecution execution) {             execution.setStatus(BatchStatus.COMPLETED).         }     }.     job.setJobRepository(this.jobRepository).     return job. }
