commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void imperativeRepositoryMatchesWithNoConfiguredType() {     this.contextRunner.withUserConfiguration(ImperativeRepository.class).run((context) -> assertThat(context).hasSingleBean(ImperativeRepository.class)). }
false;public;0;5;;@Test public void reactiveRepositoryMatchesWithNoConfiguredType() {     this.contextRunner.withUserConfiguration(ReactiveRepository.class).run((context) -> assertThat(context).hasSingleBean(ReactiveRepository.class)). }
false;public;0;7;;@Test public void imperativeRepositoryMatchesWithAutoConfiguredType() {     this.contextRunner.withUserConfiguration(ImperativeRepository.class).withPropertyValues("spring.data.test.repositories.type:auto").run((context) -> assertThat(context).hasSingleBean(ImperativeRepository.class)). }
false;public;0;7;;@Test public void reactiveRepositoryMatchesWithAutoConfiguredType() {     this.contextRunner.withUserConfiguration(ReactiveRepository.class).withPropertyValues("spring.data.test.repositories.type:auto").run((context) -> assertThat(context).hasSingleBean(ReactiveRepository.class)). }
false;public;0;7;;@Test public void imperativeRepositoryMatchesWithImperativeConfiguredType() {     this.contextRunner.withUserConfiguration(ImperativeRepository.class).withPropertyValues("spring.data.test.repositories.type:imperative").run((context) -> assertThat(context).hasSingleBean(ImperativeRepository.class)). }
false;public;0;7;;@Test public void reactiveRepositoryMatchesWithReactiveConfiguredType() {     this.contextRunner.withUserConfiguration(ReactiveRepository.class).withPropertyValues("spring.data.test.repositories.type:reactive").run((context) -> assertThat(context).hasSingleBean(ReactiveRepository.class)). }
false;public;0;7;;@Test public void imperativeRepositoryDoesNotMatchWithReactiveConfiguredType() {     this.contextRunner.withUserConfiguration(ImperativeRepository.class).withPropertyValues("spring.data.test.repositories.type:reactive").run((context) -> assertThat(context).doesNotHaveBean(ImperativeRepository.class)). }
false;public;0;7;;@Test public void reactiveRepositoryDoesNotMatchWithImperativeConfiguredType() {     this.contextRunner.withUserConfiguration(ReactiveRepository.class).withPropertyValues("spring.data.test.repositories.type:imperative").run((context) -> assertThat(context).doesNotHaveBean(ReactiveRepository.class)). }
false;public;0;7;;@Test public void imperativeRepositoryDoesNotMatchWithNoneConfiguredType() {     this.contextRunner.withUserConfiguration(ImperativeRepository.class).withPropertyValues("spring.data.test.repositories.type:none").run((context) -> assertThat(context).doesNotHaveBean(ImperativeRepository.class)). }
false;public;0;7;;@Test public void reactiveRepositoryDoesNotMatchWithNoneConfiguredType() {     this.contextRunner.withUserConfiguration(ReactiveRepository.class).withPropertyValues("spring.data.test.repositories.type:none").run((context) -> assertThat(context).doesNotHaveBean(ReactiveRepository.class)). }
false;public;0;6;;@Test public void failsFastWhenConfiguredTypeIsUnknown() {     this.contextRunner.withUserConfiguration(ReactiveRepository.class).withPropertyValues("spring.data.test.repositories.type:abcde").run((context) -> assertThat(context).hasFailed()). }
