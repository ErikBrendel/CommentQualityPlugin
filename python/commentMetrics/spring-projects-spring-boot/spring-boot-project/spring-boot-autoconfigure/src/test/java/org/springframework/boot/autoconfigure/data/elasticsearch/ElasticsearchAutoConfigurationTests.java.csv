commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;11;;@Test public void useExistingClient() {     this.context = new AnnotationConfigApplicationContext().     this.context.register(CustomConfiguration.class, PropertyPlaceholderAutoConfiguration.class, ElasticsearchAutoConfiguration.class).     this.context.refresh().     assertThat(this.context.getBeanNamesForType(Client.class).length).isEqualTo(1).     assertThat(this.context.getBean("myClient")).isSameAs(this.context.getBean(Client.class)). }
false;public;0;15;;@Test public void createTransportClient() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.data.elasticsearch.cluster-nodes:localhost:" + elasticsearch.getMappedTransportPort(), "spring.data.elasticsearch.cluster-name:docker-cluster").applyTo(this.context).     this.context.register(PropertyPlaceholderAutoConfiguration.class, ElasticsearchAutoConfiguration.class).     this.context.refresh().     List<DiscoveryNode> connectedNodes = this.context.getBean(TransportClient.class).connectedNodes().     assertThat(connectedNodes).hasSize(1). }
false;public;0;4;;@Bean public Client myClient() {     return mock(Client.class). }
