commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void failureAnalysisIsPerformed() {     FailureAnalysis failureAnalysis = performAnalysis(TestConfiguration.class).     assertThat(failureAnalysis).isNotNull().     assertThat(failureAnalysis.getDescription()).isEqualTo("Configuration of the Hikari connection pool failed: " + "'dataSourceClassName' is not supported.").     assertThat(failureAnalysis.getAction()).contains("Spring Boot auto-configures only a driver"). }
false;public;0;6;;@Test public void unrelatedIllegalStateExceptionIsSkipped() {     FailureAnalysis failureAnalysis = new HikariDriverConfigurationFailureAnalyzer().analyze(new RuntimeException("foo", new IllegalStateException("bar"))).     assertThat(failureAnalysis).isNull(). }
false;private;1;5;;private FailureAnalysis performAnalysis(Class<?> configuration) {     BeanCreationException failure = createFailure(configuration).     assertThat(failure).isNotNull().     return new HikariDriverConfigurationFailureAnalyzer().analyze(failure). }
false;private;1;17;;private BeanCreationException createFailure(Class<?> configuration) {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.datasource.type=" + HikariDataSource.class.getName(), "spring.datasource.hikari.data-source-class-name=com.example.Foo", "spring.datasource.initialization-mode=always").applyTo(context).     context.register(configuration).     try {         context.refresh().         context.close().         return null.     } catch (BeanCreationException ex) {         return ex.     } }
