commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     MockitoAnnotations.initMocks(this). }
false;public;0;13;;@Test public void noCustomNamingStrategy() {     this.contextRunner.run(assertHibernateProperties((hibernateProperties) -> {         assertThat(hibernateProperties).doesNotContainKeys("hibernate.ejb.naming_strategy").         assertThat(hibernateProperties).containsEntry(AvailableSettings.PHYSICAL_NAMING_STRATEGY, SpringPhysicalNamingStrategy.class.getName()).         assertThat(hibernateProperties).containsEntry(AvailableSettings.IMPLICIT_NAMING_STRATEGY, SpringImplicitNamingStrategy.class.getName()).     })). }
false;public;0;15;;@Test public void hibernate5CustomNamingStrategies() {     this.contextRunner.withPropertyValues("spring.jpa.hibernate.naming.implicit-strategy:com.example.Implicit", "spring.jpa.hibernate.naming.physical-strategy:com.example.Physical").run(assertHibernateProperties((hibernateProperties) -> {         assertThat(hibernateProperties).contains(entry(AvailableSettings.IMPLICIT_NAMING_STRATEGY, "com.example.Implicit"), entry(AvailableSettings.PHYSICAL_NAMING_STRATEGY, "com.example.Physical")).         assertThat(hibernateProperties).doesNotContainKeys("hibernate.ejb.naming_strategy").     })). }
false;public;0;16;;@Test public void hibernate5CustomNamingStrategiesViaJpaProperties() {     this.contextRunner.withPropertyValues("spring.jpa.properties.hibernate.implicit_naming_strategy:com.example.Implicit", "spring.jpa.properties.hibernate.physical_naming_strategy:com.example.Physical").run(assertHibernateProperties((hibernateProperties) -> {         // You can override them as we don't provide any default         assertThat(hibernateProperties).contains(entry(AvailableSettings.IMPLICIT_NAMING_STRATEGY, "com.example.Implicit"), entry(AvailableSettings.PHYSICAL_NAMING_STRATEGY, "com.example.Physical")).         assertThat(hibernateProperties).doesNotContainKeys("hibernate.ejb.naming_strategy").     })). }
false;public;0;6;;@Test public void useNewIdGeneratorMappingsDefault() {     this.contextRunner.run(assertHibernateProperties((hibernateProperties) -> assertThat(hibernateProperties).containsEntry(AvailableSettings.USE_NEW_ID_GENERATOR_MAPPINGS, "true"))). }
false;public;0;11;;@Test public void useNewIdGeneratorMappingsFalse() {     this.contextRunner.withPropertyValues("spring.jpa.hibernate.use-new-id-generator-mappings:false").run(assertHibernateProperties((hibernateProperties) -> assertThat(hibernateProperties).containsEntry(AvailableSettings.USE_NEW_ID_GENERATOR_MAPPINGS, "false"))). }
false;public;0;7;;@Test public void scannerUsesDisabledScannerByDefault() {     this.contextRunner.run(assertHibernateProperties((hibernateProperties) -> assertThat(hibernateProperties).containsEntry(AvailableSettings.SCANNER, "org.hibernate.boot.archive.scan.internal.DisabledScanner"))). }
false;public;0;8;;@Test public void scannerCanBeCustomized() {     this.contextRunner.withPropertyValues("spring.jpa.properties.hibernate.archive.scanner:org.hibernate.boot.archive.scan.internal.StandardScanner").run(assertHibernateProperties((hibernateProperties) -> assertThat(hibernateProperties).containsEntry(AvailableSettings.SCANNER, "org.hibernate.boot.archive.scan.internal.StandardScanner"))). }
false;public;0;5;;@Test public void defaultDdlAutoIsNotInvokedIfPropertyIsSet() {     this.contextRunner.withPropertyValues("spring.jpa.hibernate.ddl-auto=validate").run(assertDefaultDdlAutoNotInvoked("validate")). }
false;public;0;6;;@Test public void defaultDdlAutoIsNotInvokedIfHibernateSpecificPropertyIsSet() {     this.contextRunner.withPropertyValues("spring.jpa.properties.hibernate.hbm2ddl.auto=create").run(assertDefaultDdlAutoNotInvoked("create")). }
false;private;1;8;;private ContextConsumer<AssertableApplicationContext> assertDefaultDdlAutoNotInvoked(String expectedDdlAuto) {     return assertHibernateProperties((hibernateProperties) -> {         assertThat(hibernateProperties).containsEntry(AvailableSettings.HBM2DDL_AUTO, expectedDdlAuto).         verify(this.ddlAutoSupplier, never()).get().     }). }
false;private;1;12;;private ContextConsumer<AssertableApplicationContext> assertHibernateProperties(Consumer<Map<String, Object>> consumer) {     return (context) -> {         assertThat(context).hasSingleBean(JpaProperties.class).         assertThat(context).hasSingleBean(HibernateProperties.class).         Map<String, Object> hibernateProperties = context.getBean(HibernateProperties.class).determineHibernateProperties(context.getBean(JpaProperties.class).getProperties(), new HibernateSettings().ddlAuto(this.ddlAutoSupplier)).         consumer.accept(hibernateProperties).     }. }
