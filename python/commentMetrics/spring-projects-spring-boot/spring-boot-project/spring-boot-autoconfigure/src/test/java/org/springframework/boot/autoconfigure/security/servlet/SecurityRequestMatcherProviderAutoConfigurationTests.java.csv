commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void configurationConditionalOnWebApplication() {     new ApplicationContextRunner().withConfiguration(AutoConfigurations.of(SecurityRequestMatcherProviderAutoConfiguration.class)).withUserConfiguration(TestMvcConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(RequestMatcherProvider.class)). }
false;public;0;8;;@Test public void configurationConditionalOnRequestMatcherClass() {     this.contextRunner.withClassLoader(new FilteredClassLoader("org.springframework.security.web.util.matcher.RequestMatcher")).run((context) -> assertThat(context).doesNotHaveBean(RequestMatcherProvider.class)). }
false;public;0;7;;@Test public void registersMvcRequestMatcherProviderIfMvcPresent() {     this.contextRunner.withUserConfiguration(TestMvcConfiguration.class).run((context) -> assertThat(context).getBean(RequestMatcherProvider.class).isInstanceOf(MvcRequestMatcherProvider.class)). }
false;public;0;10;;@Test public void registersRequestMatcherForJerseyProviderIfJerseyPresentAndMvcAbsent() {     this.contextRunner.withClassLoader(new FilteredClassLoader("org.springframework.web.servlet.DispatcherServlet")).withUserConfiguration(TestJerseyConfiguration.class).run((context) -> assertThat(context).getBean(RequestMatcherProvider.class).isInstanceOf(JerseyRequestMatcherProvider.class)). }
false;public;0;8;;@Test public void mvcRequestMatcherProviderConditionalOnDispatcherServletClass() {     this.contextRunner.withClassLoader(new FilteredClassLoader("org.springframework.web.servlet.DispatcherServlet")).run((context) -> assertThat(context).doesNotHaveBean(MvcRequestMatcherProvider.class)). }
false;public;0;8;;@Test public void jerseyRequestMatcherProviderConditionalOnResourceConfigClass() {     this.contextRunner.withClassLoader(new FilteredClassLoader("org.glassfish.jersey.server.ResourceConfig")).run((context) -> assertThat(context).doesNotHaveBean(JerseyRequestMatcherProvider.class)). }
false;public;0;8;;@Test public void mvcRequestMatcherProviderConditionalOnHandlerMappingIntrospectorBean() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(SecurityRequestMatcherProviderAutoConfiguration.class)).run((context) -> assertThat(context).doesNotHaveBean(MvcRequestMatcherProvider.class)). }
false;public;0;10;;@Test public void jerseyRequestMatcherProviderConditionalOnJerseyApplicationPathBean() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(SecurityRequestMatcherProviderAutoConfiguration.class)).withClassLoader(new FilteredClassLoader("org.springframework.web.servlet.DispatcherServlet")).run((context) -> assertThat(context).doesNotHaveBean(JerseyRequestMatcherProvider.class)). }
false;public;0;4;;@Bean public HandlerMappingIntrospector introspector() {     return new HandlerMappingIntrospector(). }
false;public;0;4;;@Bean public JerseyApplicationPath jerseyApplicationPath() {     return () -> "/admin". }
