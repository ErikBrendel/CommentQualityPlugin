commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void gsonRegistration() {     this.contextRunner.run((context) -> {         Gson gson = context.getBean(Gson.class).         assertThat(gson.toJson(new DataObject())).isEqualTo("{\"data\":1}").     }). }
false;public;0;11;;@Test public void generateNonExecutableJson() {     this.contextRunner.withPropertyValues("spring.gson.generate-non-executable-json:true").run((context) -> {         Gson gson = context.getBean(Gson.class).         assertThat(gson.toJson(new DataObject())).isNotEqualTo("{\"data\":1}").         assertThat(gson.toJson(new DataObject())).endsWith("{\"data\":1}").     }). }
false;public;0;10;;@Test public void excludeFieldsWithoutExposeAnnotation() {     this.contextRunner.withPropertyValues("spring.gson.exclude-fields-without-expose-annotation:true").run((context) -> {         Gson gson = context.getBean(Gson.class).         assertThat(gson.toJson(new DataObject())).isEqualTo("{}").     }). }
false;public;0;8;;@Test public void serializeNulls() {     this.contextRunner.withPropertyValues("spring.gson.serialize-nulls:true").run((context) -> {         Gson gson = context.getBean(Gson.class).         assertThat(gson.serializeNulls()).isTrue().     }). }
false;public;0;12;;@Test public void enableComplexMapKeySerialization() {     this.contextRunner.withPropertyValues("spring.gson.enable-complex-map-key-serialization:true").run((context) -> {         Gson gson = context.getBean(Gson.class).         Map<DataObject, String> original = new LinkedHashMap<>().         original.put(new DataObject(), "a").         assertThat(gson.toJson(original)).isEqualTo("[[{\"data\":1},\"a\"]]").     }). }
false;public;0;9;;@Test public void notDisableInnerClassSerialization() {     this.contextRunner.run((context) -> {         Gson gson = context.getBean(Gson.class).         WrapperObject wrapperObject = new WrapperObject().         assertThat(gson.toJson(wrapperObject.new NestedObject())).isEqualTo("{\"data\":\"nested\"}").     }). }
false;public;0;11;;@Test public void disableInnerClassSerialization() {     this.contextRunner.withPropertyValues("spring.gson.disable-inner-class-serialization:true").run((context) -> {         Gson gson = context.getBean(Gson.class).         WrapperObject wrapperObject = new WrapperObject().         assertThat(gson.toJson(wrapperObject.new NestedObject())).isEqualTo("null").     }). }
false;public;0;10;;@Test public void withLongSerializationPolicy() {     this.contextRunner.withPropertyValues("spring.gson.long-serialization-policy:" + LongSerializationPolicy.STRING).run((context) -> {         Gson gson = context.getBean(Gson.class).         assertThat(gson.toJson(new DataObject())).isEqualTo("{\"data\":\"1\"}").     }). }
false;public;0;11;;@Test public void withFieldNamingPolicy() {     FieldNamingPolicy fieldNamingPolicy = FieldNamingPolicy.UPPER_CAMEL_CASE.     this.contextRunner.withPropertyValues("spring.gson.field-naming-policy:" + fieldNamingPolicy).run((context) -> {         Gson gson = context.getBean(Gson.class).         assertThat(gson.fieldNamingStrategy()).isEqualTo(fieldNamingPolicy).     }). }
false;public;0;8;;@Test public void additionalGsonBuilderCustomization() {     this.contextRunner.withUserConfiguration(GsonBuilderCustomizerConfig.class).run((context) -> {         Gson gson = context.getBean(Gson.class).         assertThat(gson.toJson(new DataObject())).isEqualTo("{}").     }). }
false;public;0;9;;@Test public void customGsonBuilder() {     this.contextRunner.withUserConfiguration(GsonBuilderConfig.class).run((context) -> {         Gson gson = context.getBean(Gson.class).         assertThat(gson.toJson(new DataObject())).isEqualTo("{\"data\":1,\"owner\":null}").     }). }
false;public;0;9;;@Test public void withPrettyPrinting() {     this.contextRunner.withPropertyValues("spring.gson.pretty-printing:true").run((context) -> {         Gson gson = context.getBean(Gson.class).         assertThat(gson.toJson(new DataObject())).isEqualTo("{\n  \"data\": 1\n}").     }). }
false;public;0;7;;@Test public void withoutLenient() {     this.contextRunner.run((context) -> {         Gson gson = context.getBean(Gson.class).         assertThat(gson).hasFieldOrPropertyWithValue("lenient", false).     }). }
false;public;0;8;;@Test public void withLenient() {     this.contextRunner.withPropertyValues("spring.gson.lenient:true").run((context) -> {         Gson gson = context.getBean(Gson.class).         assertThat(gson).hasFieldOrPropertyWithValue("lenient", true).     }). }
false;public;0;7;;@Test public void withHtmlEscaping() {     this.contextRunner.run((context) -> {         Gson gson = context.getBean(Gson.class).         assertThat(gson.htmlSafe()).isTrue().     }). }
false;public;0;9;;@Test public void withoutHtmlEscaping() {     this.contextRunner.withPropertyValues("spring.gson.disable-html-escaping:true").run((context) -> {         Gson gson = context.getBean(Gson.class).         assertThat(gson.htmlSafe()).isFalse().     }). }
false;public;0;10;;@Test public void customDateFormat() {     this.contextRunner.withPropertyValues("spring.gson.date-format:H").run((context) -> {         Gson gson = context.getBean(Gson.class).         DateTime dateTime = new DateTime(1988, 6, 25, 20, 30).         Date date = dateTime.toDate().         assertThat(gson.toJson(date)).isEqualTo("\"20\"").     }). }
false;public;1;4;;@Override public boolean shouldSkipField(FieldAttributes fieldAttributes) {     return "data".equals(fieldAttributes.getName()). }
false;public;1;4;;@Override public boolean shouldSkipClass(Class<?> aClass) {     return false. }
false;public;0;15;;@Bean public GsonBuilderCustomizer customSerializationExclusionStrategy() {     return (gsonBuilder) -> gsonBuilder.addSerializationExclusionStrategy(new ExclusionStrategy() {          @Override         public boolean shouldSkipField(FieldAttributes fieldAttributes) {             return "data".equals(fieldAttributes.getName()).         }          @Override         public boolean shouldSkipClass(Class<?> aClass) {             return false.         }     }). }
false;public;0;4;;@Bean public GsonBuilder customGsonBuilder() {     return new GsonBuilder().serializeNulls(). }
false;public;1;3;;public void setData(Long data) {     this.data = data. }
