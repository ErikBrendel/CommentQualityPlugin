commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testWebConfiguration() {     this.contextRunner.run((context) -> {         assertThat(context.getBean(AuthenticationManagerBuilder.class)).isNotNull().         assertThat(context.getBean(FilterChainProxy.class).getFilterChains()).hasSize(1).     }). }
false;public;0;11;;@Test public void testDefaultFilterOrderWithSecurityAdapter() {     this.contextRunner.withConfiguration(AutoConfigurations.of(WebSecurity.class, SecurityFilterAutoConfiguration.class)).run((context) -> assertThat(context.getBean("securityFilterChainRegistration", DelegatingFilterProxyRegistrationBean.class).getOrder()).isEqualTo(OrderedFilter.REQUEST_WRAPPER_FILTER_MAX_ORDER - 100)). }
false;public;0;11;;@Test public void testFilterIsNotRegisteredInNonWeb() {     try (AnnotationConfigApplicationContext customContext = new AnnotationConfigApplicationContext()) {         customContext.register(SecurityAutoConfiguration.class, SecurityFilterAutoConfiguration.class, PropertyPlaceholderAutoConfiguration.class).         customContext.refresh().         assertThat(customContext.containsBean("securityFilterChainRegistration")).isFalse().     } }
false;public;0;6;;@Test public void defaultAuthenticationEventPublisherRegistered() {     this.contextRunner.run((context) -> assertThat(context.getBean(AuthenticationEventPublisher.class)).isInstanceOf(DefaultAuthenticationEventPublisher.class)). }
false;public;0;8;;@Test public void defaultAuthenticationEventPublisherIsConditionalOnMissingBean() {     this.contextRunner.withUserConfiguration(AuthenticationEventPublisherConfiguration.class).run((context) -> assertThat(context.getBean(AuthenticationEventPublisher.class)).isInstanceOf(AuthenticationEventPublisherConfiguration.TestAuthenticationEventPublisher.class)). }
false;public;0;11;;@Test public void testDefaultFilterOrder() {     this.contextRunner.withConfiguration(AutoConfigurations.of(SecurityFilterAutoConfiguration.class)).run((context) -> assertThat(context.getBean("securityFilterChainRegistration", DelegatingFilterProxyRegistrationBean.class).getOrder()).isEqualTo(OrderedFilter.REQUEST_WRAPPER_FILTER_MAX_ORDER - 100)). }
false;public;0;11;;@Test public void testCustomFilterOrder() {     this.contextRunner.withConfiguration(AutoConfigurations.of(SecurityFilterAutoConfiguration.class)).withPropertyValues("spring.security.filter.order:12345").run((context) -> assertThat(context.getBean("securityFilterChainRegistration", DelegatingFilterProxyRegistrationBean.class).getOrder()).isEqualTo(12345)). }
false;public;0;14;;@Test public void testJpaCoexistsHappily() {     this.contextRunner.withPropertyValues("spring.datasource.url:jdbc:hsqldb:mem:testsecdb", "spring.datasource.initialization-mode:never").withUserConfiguration(EntityConfiguration.class).withConfiguration(AutoConfigurations.of(HibernateJpaAutoConfiguration.class, DataSourceAutoConfiguration.class)).run((context) -> assertThat(context.getBean(JpaTransactionManager.class)).isNotNull()). // This can fail if security @Conditionals force early instantiation of the // HibernateJpaAutoConfiguration (e.g. the EntityManagerFactory is not found) }
false;public;0;5;;@Test public void testSecurityEvaluationContextExtensionSupport() {     this.contextRunner.run((context) -> assertThat(context).getBean(SecurityEvaluationContextExtension.class).isNotNull()). }
false;public;0;16;;@Test public void defaultFilterDispatcherTypes() {     this.contextRunner.withConfiguration(AutoConfigurations.of(SecurityFilterAutoConfiguration.class)).run((context) -> {         DelegatingFilterProxyRegistrationBean bean = context.getBean("securityFilterChainRegistration", DelegatingFilterProxyRegistrationBean.class).         @SuppressWarnings("unchecked")         EnumSet<DispatcherType> dispatcherTypes = (EnumSet<DispatcherType>) ReflectionTestUtils.getField(bean, "dispatcherTypes").         assertThat(dispatcherTypes).containsOnly(DispatcherType.ASYNC, DispatcherType.ERROR, DispatcherType.REQUEST).     }). }
false;public;0;18;;@Test public void customFilterDispatcherTypes() {     this.contextRunner.withPropertyValues("spring.security.filter.dispatcher-types:INCLUDE,ERROR").withConfiguration(AutoConfigurations.of(SecurityFilterAutoConfiguration.class)).run((context) -> {         DelegatingFilterProxyRegistrationBean bean = context.getBean("securityFilterChainRegistration", DelegatingFilterProxyRegistrationBean.class).         @SuppressWarnings("unchecked")         EnumSet<DispatcherType> dispatcherTypes = (EnumSet<DispatcherType>) ReflectionTestUtils.getField(bean, "dispatcherTypes").         assertThat(dispatcherTypes).containsOnly(DispatcherType.INCLUDE, DispatcherType.ERROR).     }). }
false;public;0;4;;@Bean public AuthenticationEventPublisher authenticationEventPublisher() {     return new TestAuthenticationEventPublisher(). }
false;public;1;4;;@Override public void publishAuthenticationSuccess(Authentication authentication) { }
false;public;2;5;;@Override public void publishAuthenticationFailure(AuthenticationException exception, Authentication authentication) { }
