commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void hostDefaultsToLocalhost() {     assertThat(this.properties.getHost()).isEqualTo("localhost"). }
false;public;0;5;;@Test public void customHost() {     this.properties.setHost("rabbit.example.com").     assertThat(this.properties.getHost()).isEqualTo("rabbit.example.com"). }
false;public;0;5;;@Test public void hostIsDeterminedFromFirstAddress() {     this.properties.setAddresses("rabbit1.example.com:1234,rabbit2.example.com:2345").     assertThat(this.properties.determineHost()).isEqualTo("rabbit1.example.com"). }
false;public;0;5;;@Test public void determineHostReturnsHostPropertyWhenNoAddresses() {     this.properties.setHost("rabbit.example.com").     assertThat(this.properties.determineHost()).isEqualTo("rabbit.example.com"). }
false;public;0;4;;@Test public void portDefaultsTo5672() {     assertThat(this.properties.getPort()).isEqualTo(5672). }
false;public;0;5;;@Test public void customPort() {     this.properties.setPort(1234).     assertThat(this.properties.getPort()).isEqualTo(1234). }
false;public;0;5;;@Test public void determinePortReturnsPortOfFirstAddress() {     this.properties.setAddresses("rabbit1.example.com:1234,rabbit2.example.com:2345").     assertThat(this.properties.determinePort()).isEqualTo(1234). }
false;public;0;5;;@Test public void determinePortReturnsPortPropertyWhenNoAddresses() {     this.properties.setPort(1234).     assertThat(this.properties.determinePort()).isEqualTo(1234). }
false;public;0;6;;@Test public void determinePortReturnsDefaultAmqpPortWhenFirstAddressHasNoExplicitPort() {     this.properties.setPort(1234).     this.properties.setAddresses("rabbit1.example.com,rabbit2.example.com:2345").     assertThat(this.properties.determinePort()).isEqualTo(5672). }
false;public;0;4;;@Test public void virtualHostDefaultsToNull() {     assertThat(this.properties.getVirtualHost()).isNull(). }
false;public;0;5;;@Test public void customVirtualHost() {     this.properties.setVirtualHost("alpha").     assertThat(this.properties.getVirtualHost()).isEqualTo("alpha"). }
false;public;0;5;;@Test public void virtualHostRetainsALeadingSlash() {     this.properties.setVirtualHost("/alpha").     assertThat(this.properties.getVirtualHost()).isEqualTo("/alpha"). }
false;public;0;6;;@Test public void determineVirtualHostReturnsVirtualHostOfFirstAddress() {     this.properties.setAddresses("rabbit1.example.com:1234/alpha,rabbit2.example.com:2345/bravo").     assertThat(this.properties.determineVirtualHost()).isEqualTo("alpha"). }
false;public;0;5;;@Test public void determineVirtualHostReturnsPropertyWhenNoAddresses() {     this.properties.setVirtualHost("alpha").     assertThat(this.properties.determineVirtualHost()).isEqualTo("alpha"). }
false;public;0;7;;@Test public void determineVirtualHostReturnsPropertyWhenFirstAddressHasNoVirtualHost() {     this.properties.setVirtualHost("alpha").     this.properties.setAddresses("rabbit1.example.com:1234,rabbit2.example.com:2345/bravo").     assertThat(this.properties.determineVirtualHost()).isEqualTo("alpha"). }
false;public;0;5;;@Test public void determineVirtualHostIsSlashWhenAddressHasTrailingSlash() {     this.properties.setAddresses("amqp://root:password@otherhost:1111/").     assertThat(this.properties.determineVirtualHost()).isEqualTo("/"). }
false;public;0;5;;@Test public void emptyVirtualHostIsCoercedToASlash() {     this.properties.setVirtualHost("").     assertThat(this.properties.getVirtualHost()).isEqualTo("/"). }
false;public;0;4;;@Test public void usernameDefaultsToGuest() {     assertThat(this.properties.getUsername()).isEqualTo("guest"). }
false;public;0;5;;@Test public void customUsername() {     this.properties.setUsername("user").     assertThat(this.properties.getUsername()).isEqualTo("user"). }
false;public;0;6;;@Test public void determineUsernameReturnsUsernameOfFirstAddress() {     this.properties.setAddresses("user:secret@rabbit1.example.com:1234/alpha," + "rabbit2.example.com:2345/bravo").     assertThat(this.properties.determineUsername()).isEqualTo("user"). }
false;public;0;5;;@Test public void determineUsernameReturnsPropertyWhenNoAddresses() {     this.properties.setUsername("alice").     assertThat(this.properties.determineUsername()).isEqualTo("alice"). }
false;public;0;7;;@Test public void determineUsernameReturnsPropertyWhenFirstAddressHasNoUsername() {     this.properties.setUsername("alice").     this.properties.setAddresses("rabbit1.example.com:1234/alpha," + "user:secret@rabbit2.example.com:2345/bravo").     assertThat(this.properties.determineUsername()).isEqualTo("alice"). }
false;public;0;4;;@Test public void passwordDefaultsToGuest() {     assertThat(this.properties.getPassword()).isEqualTo("guest"). }
false;public;0;5;;@Test public void customPassword() {     this.properties.setPassword("secret").     assertThat(this.properties.getPassword()).isEqualTo("secret"). }
false;public;0;6;;@Test public void determinePasswordReturnsPasswordOfFirstAddress() {     this.properties.setAddresses("user:secret@rabbit1.example.com:1234/alpha," + "rabbit2.example.com:2345/bravo").     assertThat(this.properties.determinePassword()).isEqualTo("secret"). }
false;public;0;5;;@Test public void determinePasswordReturnsPropertyWhenNoAddresses() {     this.properties.setPassword("secret").     assertThat(this.properties.determinePassword()).isEqualTo("secret"). }
false;public;0;7;;@Test public void determinePasswordReturnsPropertyWhenFirstAddressHasNoPassword() {     this.properties.setPassword("12345678").     this.properties.setAddresses("rabbit1.example.com:1234/alpha," + "user:secret@rabbit2.example.com:2345/bravo").     assertThat(this.properties.determinePassword()).isEqualTo("12345678"). }
false;public;0;4;;@Test public void addressesDefaultsToNull() {     assertThat(this.properties.getAddresses()).isNull(). }
false;public;0;7;;@Test public void customAddresses() {     this.properties.setAddresses("user:secret@rabbit1.example.com:1234/alpha,rabbit2.example.com").     assertThat(this.properties.getAddresses()).isEqualTo("user:secret@rabbit1.example.com:1234/alpha,rabbit2.example.com"). }
false;public;0;7;;@Test public void determineAddressesReturnsAddressesWithJustHostAndPort() {     this.properties.setAddresses("user:secret@rabbit1.example.com:1234/alpha,rabbit2.example.com").     assertThat(this.properties.determineAddresses()).isEqualTo("rabbit1.example.com:1234,rabbit2.example.com:5672"). }
false;public;0;7;;@Test public void determineAddressesUsesHostAndPortPropertiesWhenNoAddressesSet() {     this.properties.setHost("rabbit.example.com").     this.properties.setPort(1234).     assertThat(this.properties.determineAddresses()).isEqualTo("rabbit.example.com:1234"). }
false;public;0;10;;@Test public void simpleContainerUseConsistentDefaultValues() {     SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory().     SimpleMessageListenerContainer container = factory.createListenerContainer().     RabbitProperties.SimpleContainer simple = this.properties.getListener().getSimple().     assertThat(simple.isAutoStartup()).isEqualTo(container.isAutoStartup()).     assertThat(container).hasFieldOrPropertyWithValue("missingQueuesFatal", simple.isMissingQueuesFatal()). }
false;public;0;10;;@Test public void directContainerUseConsistentDefaultValues() {     DirectRabbitListenerContainerFactory factory = new DirectRabbitListenerContainerFactory().     DirectMessageListenerContainer container = factory.createListenerContainer().     RabbitProperties.DirectContainer direct = this.properties.getListener().getDirect().     assertThat(direct.isAutoStartup()).isEqualTo(container.isAutoStartup()).     assertThat(container).hasFieldOrPropertyWithValue("missingQueuesFatal", direct.isMissingQueuesFatal()). }
