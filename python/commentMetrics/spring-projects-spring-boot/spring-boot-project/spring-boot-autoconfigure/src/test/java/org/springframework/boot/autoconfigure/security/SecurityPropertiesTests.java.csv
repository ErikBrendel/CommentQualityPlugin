commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() {     this.binder = new Binder(this.source). }
false;public;0;4;;@Test public void validateDefaultFilterOrderMatchesMetadata() {     assertThat(this.security.getFilter().getOrder()).isEqualTo(-100). }
false;public;0;6;;@Test public void filterOrderShouldBind() {     this.source.put("spring.security.filter.order", "55").     this.binder.bind("spring.security", Bindable.ofInstance(this.security)).     assertThat(this.security.getFilter().getOrder()).isEqualTo(55). }
false;public;0;8;;@Test public void userWhenNotConfiguredShouldUseDefaultNameAndGeneratedPassword() {     SecurityProperties.User user = this.security.getUser().     assertThat(user.getName()).isEqualTo("user").     assertThat(user.getPassword()).isNotNull().     assertThat(user.isPasswordGenerated()).isTrue().     assertThat(user.getRoles()).isEmpty(). }
false;public;0;12;;@Test public void userShouldBindProperly() {     this.source.put("spring.security.user.name", "foo").     this.source.put("spring.security.user.password", "password").     this.source.put("spring.security.user.roles", "ADMIN,USER").     this.binder.bind("spring.security", Bindable.ofInstance(this.security)).     SecurityProperties.User user = this.security.getUser().     assertThat(user.getName()).isEqualTo("foo").     assertThat(user.getPassword()).isEqualTo("password").     assertThat(user.isPasswordGenerated()).isFalse().     assertThat(user.getRoles()).containsExactly("ADMIN", "USER"). }
false;public;0;6;;@Test public void passwordAutogeneratedIfEmpty() {     this.source.put("spring.security.user.password", "").     this.binder.bind("spring.security", Bindable.ofInstance(this.security)).     assertThat(this.security.getUser().isPasswordGenerated()).isTrue(). }
