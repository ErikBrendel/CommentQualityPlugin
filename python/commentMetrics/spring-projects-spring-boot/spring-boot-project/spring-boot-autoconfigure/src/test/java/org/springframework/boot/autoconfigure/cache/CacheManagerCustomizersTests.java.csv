commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void customizeWithNullCustomizersShouldDoNothing() {     new CacheManagerCustomizers(null).customize(mock(CacheManager.class)). }
false;public;0;8;;@Test public void customizeSimpleCacheManager() {     CacheManagerCustomizers customizers = new CacheManagerCustomizers(Collections.singletonList(new CacheNamesCacheManagerCustomizer())).     ConcurrentMapCacheManager cacheManager = new ConcurrentMapCacheManager().     customizers.customize(cacheManager).     assertThat(cacheManager.getCacheNames()).containsOnly("one", "two"). }
false;public;0;16;;@Test public void customizeShouldCheckGeneric() {     List<TestCustomizer<?>> list = new ArrayList<>().     list.add(new TestCustomizer<>()).     list.add(new TestConcurrentMapCacheManagerCustomizer()).     CacheManagerCustomizers customizers = new CacheManagerCustomizers(list).     customizers.customize(mock(CacheManager.class)).     assertThat(list.get(0).getCount()).isEqualTo(1).     assertThat(list.get(1).getCount()).isEqualTo(0).     customizers.customize(mock(ConcurrentMapCacheManager.class)).     assertThat(list.get(0).getCount()).isEqualTo(2).     assertThat(list.get(1).getCount()).isEqualTo(1).     customizers.customize(mock(CaffeineCacheManager.class)).     assertThat(list.get(0).getCount()).isEqualTo(3).     assertThat(list.get(1).getCount()).isEqualTo(1). }
false;public;1;4;;@Override public void customize(ConcurrentMapCacheManager cacheManager) {     cacheManager.setCacheNames(Arrays.asList("one", "two")). }
false;public;1;4;;@Override public void customize(T cacheManager) {     this.count++. }
false;public;0;3;;public int getCount() {     return this.count. }
