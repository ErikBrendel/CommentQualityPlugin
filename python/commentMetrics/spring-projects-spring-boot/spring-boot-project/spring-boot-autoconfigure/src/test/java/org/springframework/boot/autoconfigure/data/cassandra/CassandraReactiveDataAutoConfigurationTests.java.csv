commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;6;;@Test public void templateExists() {     load("spring.data.cassandra.keyspaceName:boot_test").     assertThat(this.context.getBeanNamesForType(ReactiveCassandraTemplate.class)).hasSize(1). }
false;public;0;10;;@Test @SuppressWarnings("unchecked") public void entityScanShouldSetInitialEntitySet() {     load(EntityScanConfig.class, "spring.data.cassandra.keyspaceName:boot_test").     CassandraMappingContext mappingContext = this.context.getBean(CassandraMappingContext.class).     Set<Class<?>> initialEntitySet = (Set<Class<?>>) ReflectionTestUtils.getField(mappingContext, "initialEntitySet").     assertThat(initialEntitySet).containsOnly(City.class). }
false;public;0;8;;@Test public void userTypeResolverShouldBeSet() {     load("spring.data.cassandra.keyspaceName:boot_test").     CassandraMappingContext mappingContext = this.context.getBean(CassandraMappingContext.class).     assertThat(ReflectionTestUtils.getField(mappingContext, "userTypeResolver")).isInstanceOf(SimpleUserTypeResolver.class). }
false;private;1;3;;private void load(String... environment) {     load(null, environment). }
false;private;2;12;;private void load(Class<?> config, String... environment) {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     TestPropertyValues.of(environment).applyTo(ctx).     if (config != null) {         ctx.register(config).     }     ctx.register(TestConfiguration.class, CassandraAutoConfiguration.class, CassandraDataAutoConfiguration.class, CassandraReactiveDataAutoConfiguration.class).     ctx.refresh().     this.context = ctx. }
false;public;0;4;;@Bean public Session session() {     return mock(Session.class). }
