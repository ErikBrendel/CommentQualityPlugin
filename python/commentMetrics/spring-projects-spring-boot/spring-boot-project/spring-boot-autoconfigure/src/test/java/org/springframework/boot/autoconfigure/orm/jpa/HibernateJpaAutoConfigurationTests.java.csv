commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testDataScriptWithMissingDdl() {     contextRunner().withPropertyValues("spring.datasource.data:classpath:/city.sql", // Missing:     "spring.datasource.schema:classpath:/ddl.sql").run((context) -> {         assertThat(context).hasFailed().         assertThat(context.getStartupFailure()).hasMessageContaining("ddl.sql").         assertThat(context.getStartupFailure()).hasMessageContaining("spring.datasource.schema").     }). }
false;public;0;12;;@Test public void testDataScript() {     // This can't succeed because the data SQL is executed immediately after the     // schema     // and Hibernate hasn't initialized yet at that point     contextRunner().withPropertyValues("spring.datasource.data:classpath:/city.sql").run((context) -> {         assertThat(context).hasFailed().         assertThat(context.getStartupFailure()).isInstanceOf(BeanCreationException.class).     }). }
false;public;0;11;;@Test public void testDataScriptRunsEarly() {     contextRunner().withUserConfiguration(TestInitializedJpaConfiguration.class).withClassLoader(new HideDataScriptClassLoader()).withPropertyValues("spring.jpa.show-sql=true", "spring.jpa.hibernate.ddl-auto:create-drop", "spring.datasource.data:classpath:/city.sql").run((context) -> assertThat(context.getBean(TestInitializedJpaConfiguration.class).called).isTrue()). }
false;public;0;8;;@Test public void testFlywaySwitchOffDdlAuto() {     contextRunner().withPropertyValues("spring.datasource.initialization-mode:never", "spring.flyway.locations:classpath:db/city").withConfiguration(AutoConfigurations.of(FlywayAutoConfiguration.class)).run((context) -> assertThat(context).hasNotFailed()). }
false;public;0;9;;@Test public void testFlywayPlusValidation() {     contextRunner().withPropertyValues("spring.datasource.initialization-mode:never", "spring.flyway.locations:classpath:db/city", "spring.jpa.hibernate.ddl-auto:validate").withConfiguration(AutoConfigurations.of(FlywayAutoConfiguration.class)).run((context) -> assertThat(context).hasNotFailed()). }
false;public;0;9;;@Test public void testLiquibasePlusValidation() {     contextRunner().withPropertyValues("spring.datasource.initialization-mode:never", "spring.liquibase.changeLog:classpath:db/changelog/db.changelog-city.yaml", "spring.jpa.hibernate.ddl-auto:validate").withConfiguration(AutoConfigurations.of(LiquibaseAutoConfiguration.class)).run((context) -> assertThat(context).hasNotFailed()). }
false;public;0;6;;@Test public void jtaDefaultPlatform() {     contextRunner().withConfiguration(AutoConfigurations.of(JtaAutoConfiguration.class)).run(assertJtaPlatform(SpringJtaPlatform.class)). }
false;public;0;9;;@Test public void jtaCustomPlatform() {     contextRunner().withPropertyValues("spring.jpa.properties.hibernate.transaction.jta.platform:" + TestJtaPlatform.class.getName()).withConfiguration(AutoConfigurations.of(JtaAutoConfiguration.class)).run(assertJtaPlatform(TestJtaPlatform.class)). }
false;public;0;4;;@Test public void jtaNotUsedByTheApplication() {     contextRunner().run(assertJtaPlatform(NoJtaPlatform.class)). }
false;private;1;10;;private ContextConsumer<AssertableApplicationContext> assertJtaPlatform(Class<? extends JtaPlatform> expectedType) {     return (context) -> {         SessionFactoryImpl sessionFactory = context.getBean(LocalContainerEntityManagerFactoryBean.class).getNativeEntityManagerFactory().unwrap(SessionFactoryImpl.class).         assertThat(sessionFactory.getServiceRegistry().getService(JtaPlatform.class)).isInstanceOf(expectedType).     }. }
false;public;0;12;;@Test public void jtaCustomTransactionManagerUsingProperties() {     contextRunner().withPropertyValues("spring.transaction.default-timeout:30", "spring.transaction.rollback-on-commit-failure:true").run((context) -> {         JpaTransactionManager transactionManager = context.getBean(JpaTransactionManager.class).         assertThat(transactionManager.getDefaultTimeout()).isEqualTo(30).         assertThat(transactionManager.isRollbackOnCommitFailure()).isTrue().     }). }
false;public;0;12;;@Test public void autoConfigurationBacksOffWithSeveralDataSources() {     contextRunner().withConfiguration(AutoConfigurations.of(DataSourceTransactionManagerAutoConfiguration.class, XADataSourceAutoConfiguration.class, JtaAutoConfiguration.class)).withUserConfiguration(TestTwoDataSourcesConfiguration.class).run((context) -> {         assertThat(context).hasNotFailed().         assertThat(context).doesNotHaveBean(EntityManagerFactory.class).     }). }
false;public;0;12;;@Test public void providerDisablesAutoCommitIsConfigured() {     contextRunner().withPropertyValues("spring.datasource.type:" + HikariDataSource.class.getName(), "spring.datasource.hikari.auto-commit:false").run((context) -> {         Map<String, Object> jpaProperties = context.getBean(LocalContainerEntityManagerFactoryBean.class).getJpaPropertyMap().         assertThat(jpaProperties).contains(entry("hibernate.connection.provider_disables_autocommit", "true")).     }). }
false;public;0;12;;@Test public void providerDisablesAutoCommitIsNotConfiguredIfAutoCommitIsEnabled() {     contextRunner().withPropertyValues("spring.datasource.type:" + HikariDataSource.class.getName(), "spring.datasource.hikari.auto-commit:true").run((context) -> {         Map<String, Object> jpaProperties = context.getBean(LocalContainerEntityManagerFactoryBean.class).getJpaPropertyMap().         assertThat(jpaProperties).doesNotContainKeys("hibernate.connection.provider_disables_autocommit").     }). }
false;public;0;15;;@Test public void providerDisablesAutoCommitIsNotConfiguredIfPropertyIsSet() {     contextRunner().withPropertyValues("spring.datasource.type:" + HikariDataSource.class.getName(), "spring.datasource.hikari.auto-commit:false", "spring.jpa.properties.hibernate.connection.provider_disables_autocommit=false").run((context) -> {         Map<String, Object> jpaProperties = context.getBean(LocalContainerEntityManagerFactoryBean.class).getJpaPropertyMap().         assertThat(jpaProperties).contains(entry("hibernate.connection.provider_disables_autocommit", "false")).     }). }
false;public;0;15;;@Test public void providerDisablesAutoCommitIsNotConfiguredWithJta() {     contextRunner().withConfiguration(AutoConfigurations.of(JtaAutoConfiguration.class)).withPropertyValues("spring.datasource.type:" + HikariDataSource.class.getName(), "spring.datasource.hikari.auto-commit:false").run((context) -> {         Map<String, Object> jpaProperties = context.getBean(LocalContainerEntityManagerFactoryBean.class).getJpaPropertyMap().         assertThat(jpaProperties).doesNotContainKeys("hibernate.connection.provider_disables_autocommit").     }). }
false;public;0;14;;@Test public void customResourceMapping() {     contextRunner().withClassLoader(new HideDataScriptClassLoader()).withPropertyValues("spring.datasource.data:classpath:/db/non-annotated-data.sql", "spring.jpa.mapping-resources=META-INF/mappings/non-annotated.xml").run((context) -> {         EntityManager em = context.getBean(EntityManagerFactory.class).createEntityManager().         NonAnnotatedEntity found = em.find(NonAnnotatedEntity.class, 2000L).         assertThat(found).isNotNull().         assertThat(found.getValue()).isEqualTo("Test").     }). }
false;public;0;15;;@Test public void physicalNamingStrategyCanBeUsed() {     contextRunner().withUserConfiguration(TestPhysicalNamingStrategyConfiguration.class).run((context) -> {         Map<String, Object> hibernateProperties = context.getBean(HibernateJpaConfiguration.class).getVendorProperties().         assertThat(hibernateProperties).contains(entry("hibernate.physical_naming_strategy", context.getBean("testPhysicalNamingStrategy"))).         assertThat(hibernateProperties).doesNotContainKeys("hibernate.ejb.naming_strategy").     }). }
false;public;0;15;;@Test public void implicitNamingStrategyCanBeUsed() {     contextRunner().withUserConfiguration(TestImplicitNamingStrategyConfiguration.class).run((context) -> {         Map<String, Object> hibernateProperties = context.getBean(HibernateJpaConfiguration.class).getVendorProperties().         assertThat(hibernateProperties).contains(entry("hibernate.implicit_naming_strategy", context.getBean("testImplicitNamingStrategy"))).         assertThat(hibernateProperties).doesNotContainKeys("hibernate.ejb.naming_strategy").     }). }
false;public;0;21;;@Test public void namingStrategyInstancesTakePrecedenceOverNamingStrategyProperties() {     contextRunner().withUserConfiguration(TestPhysicalNamingStrategyConfiguration.class, TestImplicitNamingStrategyConfiguration.class).withPropertyValues("spring.jpa.hibernate.naming.physical-strategy:com.example.Physical", "spring.jpa.hibernate.naming.implicit-strategy:com.example.Implicit").run((context) -> {         Map<String, Object> hibernateProperties = context.getBean(HibernateJpaConfiguration.class).getVendorProperties().         assertThat(hibernateProperties).contains(entry("hibernate.physical_naming_strategy", context.getBean("testPhysicalNamingStrategy")), entry("hibernate.implicit_naming_strategy", context.getBean("testImplicitNamingStrategy"))).         assertThat(hibernateProperties).doesNotContainKeys("hibernate.ejb.naming_strategy").     }). }
false;public;0;26;;@Test public void hibernatePropertiesCustomizerTakesPrecedenceOverStrategyInstancesAndNamingStrategyProperties() {     contextRunner().withUserConfiguration(TestHibernatePropertiesCustomizerConfiguration.class, TestPhysicalNamingStrategyConfiguration.class, TestImplicitNamingStrategyConfiguration.class).withPropertyValues("spring.jpa.hibernate.naming.physical-strategy:com.example.Physical", "spring.jpa.hibernate.naming.implicit-strategy:com.example.Implicit").run((context) -> {         Map<String, Object> hibernateProperties = context.getBean(HibernateJpaConfiguration.class).getVendorProperties().         TestHibernatePropertiesCustomizerConfiguration configuration = context.getBean(TestHibernatePropertiesCustomizerConfiguration.class).         assertThat(hibernateProperties).contains(entry("hibernate.physical_naming_strategy", configuration.physicalNamingStrategy), entry("hibernate.implicit_naming_strategy", configuration.implicitNamingStrategy)).         assertThat(hibernateProperties).doesNotContainKeys("hibernate.ejb.naming_strategy").     }). }
false;public;0;14;;@Test public void eventListenerCanBeRegisteredAsBeans() {     contextRunner().withUserConfiguration(TestInitializedJpaConfiguration.class).withClassLoader(new HideDataScriptClassLoader()).withPropertyValues("spring.jpa.show-sql=true", "spring.jpa.hibernate.ddl-auto:create-drop", "spring.datasource.data:classpath:/city.sql").run((context) -> {         // See CityListener         assertThat(context).hasSingleBean(City.class).         assertThat(context.getBean(City.class).getName()).isEqualTo("Washington").     }). }
false;public;0;5;;@Test public void hibernatePropertiesCustomizerCanDisableBeanContainer() {     contextRunner().withUserConfiguration(DisableBeanContainerConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(City.class)). }
false;public;0;14;;@Test public void withSyncBootstrappingAnApplicationListenerThatUsesJpaDoesNotTriggerABeanCurrentlyInCreationException() {     contextRunner().withUserConfiguration(JpaUsingApplicationListenerConfiguration.class).withPropertyValues("spring.datasource.initialization-mode=never").run((context) -> {         assertThat(context).hasNotFailed().         assertThat(context.getBean(EventCapturingApplicationListener.class).events.stream().filter(DataSourceSchemaCreatedEvent.class::isInstance)).hasSize(1).     }). }
false;public;0;20;;@Test public void withAsyncBootstrappingAnApplicationListenerThatUsesJpaDoesNotTriggerABeanCurrentlyInCreationException() {     contextRunner().withUserConfiguration(AsyncBootstrappingConfiguration.class, JpaUsingApplicationListenerConfiguration.class).withPropertyValues("spring.datasource.initialization-mode=never").run((context) -> {         assertThat(context).hasNotFailed().         EventCapturingApplicationListener listener = context.getBean(EventCapturingApplicationListener.class).         long end = System.currentTimeMillis() + 30000.         while ((System.currentTimeMillis() < end) && !dataSourceSchemaCreatedEventReceived(listener)) {             Thread.sleep(100).         }         assertThat(listener.events.stream().filter(DataSourceSchemaCreatedEvent.class::isInstance)).hasSize(1).     }). }
false;private;1;9;;private boolean dataSourceSchemaCreatedEventReceived(EventCapturingApplicationListener listener) {     for (ApplicationEvent event : listener.events) {         if (event instanceof DataSourceSchemaCreatedEvent) {             return true.         }     }     return false. }
false;public;1;11;;@Autowired public void validateDataSourceIsInitialized(EntityManagerFactory entityManagerFactory) {     // Inject the entity manager to validate it is initialized at the injection     // point     EntityManager entityManager = entityManagerFactory.createEntityManager().     City city = entityManager.find(City.class, 2000L).     assertThat(city).isNotNull().     assertThat(city.getName()).isEqualTo("Washington").     this.called = true. }
false;public;0;4;;@Bean public ImplicitNamingStrategy testImplicitNamingStrategy() {     return new SpringImplicitNamingStrategy(). }
false;public;0;4;;@Bean public PhysicalNamingStrategy testPhysicalNamingStrategy() {     return new SpringPhysicalNamingStrategy(). }
false;public;0;9;;@Bean public HibernatePropertiesCustomizer testHibernatePropertiesCustomizer() {     return (hibernateProperties) -> {         hibernateProperties.put("hibernate.physical_naming_strategy", this.physicalNamingStrategy).         hibernateProperties.put("hibernate.implicit_naming_strategy", this.implicitNamingStrategy).     }. }
false;public;0;5;;@Bean public HibernatePropertiesCustomizer disableBeanContainerHibernatePropertiesCustomizer() {     return (hibernateProperties) -> hibernateProperties.remove(AvailableSettings.BEAN_CONTAINER). }
false;public;0;4;;@Override public TransactionManager retrieveTransactionManager() {     return mock(TransactionManager.class). }
false;public;0;4;;@Override public UserTransaction retrieveUserTransaction() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public Object getTransactionIdentifier(Transaction transaction) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public boolean canRegisterSynchronization() {     throw new UnsupportedOperationException(). }
false;public;1;4;;@Override public void registerSynchronization(Synchronization synchronization) {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public int getCurrentStatus() {     throw new UnsupportedOperationException(). }
false;public;1;7;;@Override public Enumeration<URL> getResources(String name) throws IOException {     if (HIDDEN_RESOURCES.contains(name)) {         return Collections.emptyEnumeration().     }     return super.getResources(name). }
false;public;1;5;;@Bean public EventCapturingApplicationListener jpaUsingApplicationListener(EntityManagerFactory emf) {     return new EventCapturingApplicationListener(). }
false;public;1;4;;@Override public void onApplicationEvent(ApplicationEvent event) {     this.events.add(event). }
false;public;0;4;;@Bean public ThreadPoolTaskExecutor ThreadPoolTaskExecutor() {     return new ThreadPoolTaskExecutor(). }
false;public;1;5;;@Bean public EntityManagerFactoryBuilderCustomizer asyncBootstrappingCustomizer(ThreadPoolTaskExecutor executor) {     return (builder) -> builder.setBootstrapExecutor(executor). }
