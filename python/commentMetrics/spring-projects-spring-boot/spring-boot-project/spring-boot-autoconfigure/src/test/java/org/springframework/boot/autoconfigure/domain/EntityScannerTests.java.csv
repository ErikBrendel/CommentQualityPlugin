commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void createWhenContextIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new EntityScanner(null)).withMessageContaining("Context must not be null"). }
false;public;0;9;;@Test public void scanShouldScanFromSinglePackage() throws Exception {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ScanConfig.class).     EntityScanner scanner = new EntityScanner(context).     Set<Class<?>> scanned = scanner.scan(Entity.class).     assertThat(scanned).containsOnly(EntityA.class, EntityB.class, EntityC.class).     context.close(). }
false;public;0;9;;@Test public void scanShouldScanFromMultiplePackages() throws Exception {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ScanAConfig.class, ScanBConfig.class).     EntityScanner scanner = new EntityScanner(context).     Set<Class<?>> scanned = scanner.scan(Entity.class).     assertThat(scanned).containsOnly(EntityA.class, EntityB.class).     context.close(). }
false;public;0;14;;@Test public void scanShouldFilterOnAnnotation() throws Exception {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ScanConfig.class).     EntityScanner scanner = new EntityScanner(context).     assertThat(scanner.scan(Entity.class)).containsOnly(EntityA.class, EntityB.class, EntityC.class).     assertThat(scanner.scan(Embeddable.class)).containsOnly(EmbeddableA.class, EmbeddableB.class, EmbeddableC.class).     assertThat(scanner.scan(Entity.class, Embeddable.class)).containsOnly(EntityA.class, EntityB.class, EntityC.class, EmbeddableA.class, EmbeddableB.class, EmbeddableC.class).     context.close(). }
