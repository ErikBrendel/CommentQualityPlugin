commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void close() {     this.context.close(). }
false;public;0;9;;@Test public void testDefaultRepositoryConfiguration() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.datasource.initialization-mode:never").applyTo(this.context).     this.context.register(TestConfiguration.class, BaseConfiguration.class).     this.context.refresh().     assertThat(this.context.getBean(CountryRepository.class)).isNotNull(). }
false;public;0;10;;@Test public void testMixedRepositoryConfiguration() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.datasource.initialization-mode:never").applyTo(this.context).     this.context.register(MixedConfiguration.class, BaseConfiguration.class).     this.context.refresh().     assertThat(this.context.getBean(CountryRepository.class)).isNotNull().     assertThat(this.context.getBean(CityRepository.class)).isNotNull(). }
false;public;0;9;;@Test public void testJpaRepositoryConfigurationWithMongoTemplate() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.datasource.initialization-mode:never").applyTo(this.context).     this.context.register(JpaConfiguration.class, BaseConfiguration.class).     this.context.refresh().     assertThat(this.context.getBean(CityRepository.class)).isNotNull(). }
false;public;0;9;;@Test public void testJpaRepositoryConfigurationWithMongoOverlap() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.datasource.initialization-mode:never").applyTo(this.context).     this.context.register(OverlapConfiguration.class, BaseConfiguration.class).     this.context.refresh().     assertThat(this.context.getBean(CityRepository.class)).isNotNull(). }
false;public;0;11;;@Test public void testJpaRepositoryConfigurationWithMongoOverlapDisabled() {     this.context = new AnnotationConfigApplicationContext().     TestPropertyValues.of("spring.datasource.initialization-mode:never", "spring.data.mongodb.repositories.type:none").applyTo(this.context).     this.context.register(OverlapConfiguration.class, BaseConfiguration.class).     this.context.refresh().     assertThat(this.context.getBean(CityRepository.class)).isNotNull(). }
false;public;1;12;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     List<String> names = new ArrayList<>().     for (Class<?> type : new Class<?>[] { DataSourceAutoConfiguration.class, HibernateJpaAutoConfiguration.class, JpaRepositoriesAutoConfiguration.class, MongoAutoConfiguration.class, MongoDataAutoConfiguration.class, MongoRepositoriesAutoConfiguration.class }) {         names.add(type.getName()).     }     return StringUtils.toStringArray(names). }
