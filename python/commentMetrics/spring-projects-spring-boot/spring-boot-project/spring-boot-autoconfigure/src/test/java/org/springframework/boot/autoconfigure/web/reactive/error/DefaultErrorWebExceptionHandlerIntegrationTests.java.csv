commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void jsonError() {     this.contextRunner.run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         client.get().uri("/").exchange().expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).expectBody().jsonPath("status").isEqualTo("500").jsonPath("error").isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase()).jsonPath("path").isEqualTo(("/")).jsonPath("message").isEqualTo("Expected!").jsonPath("exception").doesNotExist().jsonPath("trace").doesNotExist().         this.outputCapture.expect(Matchers.allOf(containsString("500 Server Error for HTTP GET \"/\""), containsString("java.lang.IllegalStateException: Expected!"))).     }). }
false;public;0;11;;@Test public void notFound() {     this.contextRunner.run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         client.get().uri("/notFound").exchange().expectStatus().isNotFound().expectBody().jsonPath("status").isEqualTo("404").jsonPath("error").isEqualTo(HttpStatus.NOT_FOUND.getReasonPhrase()).jsonPath("path").isEqualTo(("/notFound")).jsonPath("exception").doesNotExist().     }). }
false;public;0;15;;@Test public void htmlError() {     this.contextRunner.run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         String body = client.get().uri("/").accept(MediaType.TEXT_HTML).exchange().expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).expectHeader().contentType(MediaType.TEXT_HTML).expectBody(String.class).returnResult().getResponseBody().         assertThat(body).contains("status: 500").contains("message: Expected!").         this.outputCapture.expect(Matchers.allOf(containsString("500 Server Error for HTTP GET \"/\""), containsString("java.lang.IllegalStateException: Expected!"))).     }). }
false;public;0;13;;@Test public void bindingResultError() {     this.contextRunner.run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         client.post().uri("/bind").contentType(MediaType.APPLICATION_JSON).syncBody("{}").exchange().expectStatus().isBadRequest().expectBody().jsonPath("status").isEqualTo("400").jsonPath("error").isEqualTo(HttpStatus.BAD_REQUEST.getReasonPhrase()).jsonPath("path").isEqualTo(("/bind")).jsonPath("exception").doesNotExist().jsonPath("errors").isArray().jsonPath("message").isNotEmpty().     }). }
false;public;0;17;;@Test public void includeStackTraceOnParam() {     this.contextRunner.withPropertyValues("server.error.include-exception=true", "server.error.include-stacktrace=on-trace-param").run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         client.get().uri("/?trace=true").exchange().expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).expectBody().jsonPath("status").isEqualTo("500").jsonPath("error").isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase()).jsonPath("exception").isEqualTo(IllegalStateException.class.getName()).jsonPath("trace").exists().     }). }
false;public;0;15;;@Test public void alwaysIncludeStackTrace() throws Exception {     this.contextRunner.withPropertyValues("server.error.include-exception=true", "server.error.include-stacktrace=always").run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         client.get().uri("/?trace=false").exchange().expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).expectBody().jsonPath("status").isEqualTo("500").jsonPath("error").isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase()).jsonPath("exception").isEqualTo(IllegalStateException.class.getName()).jsonPath("trace").exists().     }). }
false;public;0;16;;@Test public void neverIncludeStackTrace() {     this.contextRunner.withPropertyValues("server.error.include-exception=true", "server.error.include-stacktrace=never").run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         client.get().uri("/?trace=true").exchange().expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).expectBody().jsonPath("status").isEqualTo("500").jsonPath("error").isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR.getReasonPhrase()).jsonPath("exception").isEqualTo(IllegalStateException.class.getName()).jsonPath("trace").doesNotExist().     }). }
false;public;0;14;;@Test public void statusException() {     this.contextRunner.withPropertyValues("server.error.include-exception=true").run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         client.get().uri("/badRequest").exchange().expectStatus().isBadRequest().expectBody().jsonPath("status").isEqualTo("400").jsonPath("error").isEqualTo(HttpStatus.BAD_REQUEST.getReasonPhrase()).jsonPath("exception").isEqualTo(ResponseStatusException.class.getName()).     }). }
false;public;0;18;;@Test public void defaultErrorView() {     this.contextRunner.withPropertyValues("spring.mustache.prefix=classpath:/unknown/", "server.error.include-stacktrace=always").run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         String body = client.get().uri("/").accept(MediaType.TEXT_HTML).exchange().expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).expectHeader().contentType(MediaType.TEXT_HTML).expectBody(String.class).returnResult().getResponseBody().         assertThat(body).contains("Whitelabel Error Page").contains("<div>Expected!</div>").contains("<div style='white-space:pre-wrap.'>java.lang.IllegalStateException").     }). }
false;public;0;16;;@Test public void escapeHtmlInDefaultErrorView() {     this.contextRunner.withPropertyValues("spring.mustache.prefix=classpath:/unknown/").run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         String body = client.get().uri("/html").accept(MediaType.TEXT_HTML).exchange().expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR).expectHeader().contentType(MediaType.TEXT_HTML).expectBody(String.class).returnResult().getResponseBody().         assertThat(body).contains("Whitelabel Error Page").doesNotContain("<script>").contains("&lt.script&gt.").     }). }
false;public;0;15;;@Test public void testExceptionWithNullMessage() {     this.contextRunner.withPropertyValues("spring.mustache.prefix=classpath:/unknown/").run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         String body = client.get().uri("/notfound").accept(MediaType.TEXT_HTML).exchange().expectStatus().isNotFound().expectHeader().contentType(MediaType.TEXT_HTML).expectBody(String.class).returnResult().getResponseBody().         assertThat(body).contains("Whitelabel Error Page").contains("type=Not Found, status=404").     }). }
false;public;0;12;;@Test public void responseCommitted() {     this.contextRunner.run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> client.get().uri("/commit").exchange().expectStatus()).withCauseInstanceOf(IllegalStateException.class).withMessageContaining("already committed!").     }). }
false;public;0;10;;@Test public void whitelabelDisabled() {     this.contextRunner.withPropertyValues("server.error.whitelabel.enabled=false", "spring.mustache.prefix=classpath:/unknown/").run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         client.get().uri("/notfound").accept(MediaType.TEXT_HTML).exchange().expectStatus().isNotFound().expectBody().isEmpty().     }). }
false;public;0;15;;@Test public void exactStatusTemplateErrorPage() {     this.contextRunner.withPropertyValues("server.error.whitelabel.enabled=false", "spring.mustache.prefix=" + getErrorTemplatesLocation()).run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         String body = client.get().uri("/notfound").accept(MediaType.TEXT_HTML).exchange().expectStatus().isNotFound().expectBody(String.class).returnResult().getResponseBody().         assertThat(body).contains("404 page").     }). }
false;public;0;15;;@Test public void seriesStatusTemplateErrorPage() {     this.contextRunner.withPropertyValues("server.error.whitelabel.enabled=false", "spring.mustache.prefix=" + getErrorTemplatesLocation()).run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         String body = client.get().uri("/badRequest").accept(MediaType.TEXT_HTML).exchange().expectStatus().isBadRequest().expectBody(String.class).returnResult().getResponseBody().         assertThat(body).contains("4xx page").     }). }
false;private;0;4;;private String getErrorTemplatesLocation() {     String packageName = getClass().getPackage().getName().     return "classpath:/" + packageName.replace('.', '/') + "/templates/". }
false;public;0;9;;@Test public void invalidAcceptMediaType() {     this.contextRunner.run((context) -> {         WebTestClient client = WebTestClient.bindToApplicationContext(context).build().         client.get().uri("/notfound").header("Accept", "v=3.0").exchange().expectStatus().isEqualTo(HttpStatus.NOT_FOUND).     }). }
false;public;0;4;;@GetMapping("/") public String home() {     throw new IllegalStateException("Expected!"). }
false;public;0;4;;@GetMapping("/badRequest") public Mono<String> badRequest() {     return Mono.error(new ResponseStatusException(HttpStatus.BAD_REQUEST)). }
false;public;1;5;;@GetMapping("/commit") public Mono<Void> commit(ServerWebExchange exchange) {     return exchange.getResponse().writeWith(Mono.empty()).then(Mono.error(new IllegalStateException("already committed!"))). }
false;public;0;4;;@GetMapping("/html") public String htmlEscape() {     throw new IllegalStateException("<script>"). }
false;public;1;5;;@PostMapping(path = "/bind", produces = "application/json") @ResponseBody public String bodyValidation(@Valid @RequestBody DummyBody body) {     return body.getContent(). }
