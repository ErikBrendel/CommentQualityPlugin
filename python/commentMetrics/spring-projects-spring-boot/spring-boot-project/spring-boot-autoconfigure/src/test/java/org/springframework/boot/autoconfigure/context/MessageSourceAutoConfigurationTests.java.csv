commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testDefaultMessageSource() {     this.contextRunner.run((context) -> assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)).isEqualTo("Foo message")). }
false;public;0;9;;@Test public void propertiesBundleWithSlashIsDetected() {     this.contextRunner.withPropertyValues("spring.messages.basename:test/messages").run((context) -> {         assertThat(context).hasSingleBean(MessageSource.class).         assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)).isEqualTo("bar").     }). }
false;public;0;9;;@Test public void propertiesBundleWithDotIsDetected() {     this.contextRunner.withPropertyValues("spring.messages.basename:test.messages").run((context) -> {         assertThat(context).hasSingleBean(MessageSource.class).         assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)).isEqualTo("bar").     }). }
false;public;0;7;;@Test public void testEncodingWorks() {     this.contextRunner.withPropertyValues("spring.messages.basename:test/swedish").run((context) -> assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)).isEqualTo("Some text with some swedish öäå!")). }
false;public;0;5;;@Test public void testCacheDurationNoUnit() {     this.contextRunner.withPropertyValues("spring.messages.basename:test/messages", "spring.messages.cache-duration=10").run(assertCache(10 * 1000)). }
false;public;0;5;;@Test public void testCacheDurationWithUnit() {     this.contextRunner.withPropertyValues("spring.messages.basename:test/messages", "spring.messages.cache-duration=1m").run(assertCache(60 * 1000)). }
false;private;1;7;;private ContextConsumer<AssertableApplicationContext> assertCache(long expected) {     return (context) -> {         assertThat(context).hasSingleBean(MessageSource.class).         assertThat(context.getBean(MessageSource.class)).hasFieldOrPropertyWithValue("cacheMillis", expected).     }. }
false;public;0;12;;@Test public void testMultipleMessageSourceCreated() {     this.contextRunner.withPropertyValues("spring.messages.basename:test/messages,test/messages2").run((context) -> {         assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)).isEqualTo("bar").         assertThat(context.getMessage("foo-foo", null, "Foo-Foo message", Locale.UK)).isEqualTo("bar-bar").     }). }
false;public;0;8;;@Test public void testBadEncoding() {     // Bad encoding just means the messages are ignored     this.contextRunner.withPropertyValues("spring.messages.encoding:rubbish").run((context) -> assertThat(context.getMessage("foo", null, "blah", Locale.UK)).isEqualTo("blah")). }
false;public;0;8;;@Test @Ignore("Expected to fail per gh-1075") public void testMessageSourceFromPropertySourceAnnotation() {     this.contextRunner.withUserConfiguration(Config.class).run((context) -> assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)).isEqualTo("bar")). }
false;public;0;6;;@Test public void testFallbackDefault() {     this.contextRunner.withPropertyValues("spring.messages.basename:test/messages").run((context) -> assertThat(context.getBean(MessageSource.class)).hasFieldOrPropertyWithValue("fallbackToSystemLocale", true)). }
false;public;0;8;;@Test public void testFallbackTurnOff() {     this.contextRunner.withPropertyValues("spring.messages.basename:test/messages", "spring.messages.fallback-to-system-locale:false").run((context) -> assertThat(context.getBean(MessageSource.class)).hasFieldOrPropertyWithValue("fallbackToSystemLocale", false)). }
false;public;0;6;;@Test public void testFormatMessageDefault() {     this.contextRunner.withPropertyValues("spring.messages.basename:test/messages").run((context) -> assertThat(context.getBean(MessageSource.class)).hasFieldOrPropertyWithValue("alwaysUseMessageFormat", false)). }
false;public;0;8;;@Test public void testFormatMessageOn() {     this.contextRunner.withPropertyValues("spring.messages.basename:test/messages", "spring.messages.always-use-message-format:true").run((context) -> assertThat(context.getBean(MessageSource.class)).hasFieldOrPropertyWithValue("alwaysUseMessageFormat", true)). }
false;public;0;6;;@Test public void testUseCodeAsDefaultMessageDefault() {     this.contextRunner.withPropertyValues("spring.messages.basename:test/messages").run((context) -> assertThat(context.getBean(MessageSource.class)).hasFieldOrPropertyWithValue("useCodeAsDefaultMessage", false)). }
false;public;0;8;;@Test public void testUseCodeAsDefaultMessageOn() {     this.contextRunner.withPropertyValues("spring.messages.basename:test/messages", "spring.messages.use-code-as-default-message:true").run((context) -> assertThat(context.getBean(MessageSource.class)).hasFieldOrPropertyWithValue("useCodeAsDefaultMessage", true)). }
false;public;0;6;;@Test public void existingMessageSourceIsPreferred() {     this.contextRunner.withUserConfiguration(CustomMessageSourceConfiguration.class).run((context) -> assertThat(context.getMessage("foo", null, null, null)).isEqualTo("foo")). }
false;public;0;8;;@Test public void existingMessageSourceInParentIsIgnored() {     this.contextRunner.run((parent) -> this.contextRunner.withParent(parent).withPropertyValues("spring.messages.basename:test/messages").run((context) -> assertThat(context.getMessage("foo", null, "Foo message", Locale.UK)).isEqualTo("bar"))). }
false;public;0;7;;@Test public void messageSourceWithNonStandardBeanNameIsIgnored() {     this.contextRunner.withPropertyValues("spring.messages.basename:test/messages").withUserConfiguration(CustomBeanNameMessageSourceConfiguration.class).run((context) -> assertThat(context.getMessage("foo", null, Locale.US)).isEqualTo("bar")). }
false;public;0;4;;@Bean public MessageSource messageSource() {     return new TestMessageSource(). }
false;public;0;4;;@Bean public MessageSource codeReturningMessageSource() {     return new TestMessageSource(). }
false;public;4;5;;@Override public String getMessage(String code, Object[] args, String defaultMessage, Locale locale) {     return code. }
false;public;3;5;;@Override public String getMessage(String code, Object[] args, Locale locale) throws NoSuchMessageException {     return code. }
false;public;2;5;;@Override public String getMessage(MessageSourceResolvable resolvable, Locale locale) throws NoSuchMessageException {     return resolvable.getCodes()[0]. }
