commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void backsOffWithNoDataSource() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(JdbcRepositoryConfigExtension.class)). }
false;public;0;9;;@Test public void backsOffWithNoJdbcOperations() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class, TestConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(DataSource.class).         assertThat(context).doesNotHaveBean(JdbcRepositoryConfigExtension.class).     }). }
false;public;0;19;;@Test public void basicAutoConfiguration() {     this.contextRunner.withConfiguration(AutoConfigurations.of(JdbcTemplateAutoConfiguration.class, DataSourceAutoConfiguration.class)).withUserConfiguration(TestConfiguration.class, EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.datasource.schema=classpath:data-jdbc-schema.sql", "spring.datasource.data=classpath:city.sql", "spring.datasource.generate-unique-name:true").run((context) -> {         assertThat(context).hasSingleBean(AbstractJdbcConfiguration.class).         assertThat(context).hasSingleBean(CityRepository.class).         assertThat(context.getBean(CityRepository.class).findById(2000L)).isPresent().     }). }
false;public;0;12;;@Test public void autoConfigurationWithNoRepositories() {     this.contextRunner.withConfiguration(AutoConfigurations.of(JdbcTemplateAutoConfiguration.class)).withUserConfiguration(EmbeddedDataSourceConfiguration.class, EmptyConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(AbstractJdbcConfiguration.class).         assertThat(context).doesNotHaveBean(Repository.class).     }). }
false;public;0;19;;@Test public void honoursUsersEnableJdbcRepositoriesConfiguration() {     this.contextRunner.withConfiguration(AutoConfigurations.of(JdbcTemplateAutoConfiguration.class, DataSourceAutoConfiguration.class)).withUserConfiguration(EnableRepositoriesConfiguration.class, EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.datasource.schema=classpath:data-jdbc-schema.sql", "spring.datasource.data=classpath:city.sql", "spring.datasource.generate-unique-name:true").run((context) -> {         assertThat(context).hasSingleBean(AbstractJdbcConfiguration.class).         assertThat(context).hasSingleBean(CityRepository.class).         assertThat(context.getBean(CityRepository.class).findById(2000L)).isPresent().     }). }
