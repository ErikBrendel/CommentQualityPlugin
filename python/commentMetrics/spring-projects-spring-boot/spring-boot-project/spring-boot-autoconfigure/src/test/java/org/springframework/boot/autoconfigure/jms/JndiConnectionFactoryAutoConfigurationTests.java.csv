commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setupJndi() {     this.initialContextFactory = System.getProperty(Context.INITIAL_CONTEXT_FACTORY).     System.setProperty(Context.INITIAL_CONTEXT_FACTORY, TestableInitialContextFactory.class.getName()).     this.threadContextClassLoader = Thread.currentThread().getContextClassLoader().     Thread.currentThread().setContextClassLoader(new JndiPropertiesHidingClassLoader(getClass().getClassLoader())). }
false;public;0;12;;@After public void cleanUp() {     TestableInitialContextFactory.clearAll().     if (this.initialContextFactory != null) {         System.setProperty(Context.INITIAL_CONTEXT_FACTORY, this.initialContextFactory).     } else {         System.clearProperty(Context.INITIAL_CONTEXT_FACTORY).     }     Thread.currentThread().setContextClassLoader(this.threadContextClassLoader). }
false;public;0;5;;@Test public void detectNoAvailableCandidates() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(ConnectionFactory.class)). }
false;public;0;5;;@Test public void detectWithJmsXAConnectionFactory() {     ConnectionFactory connectionFactory = configureConnectionFactory("java:/JmsXA").     this.contextRunner.run(assertConnectionFactory(connectionFactory)). }
false;public;0;6;;@Test public void detectWithXAConnectionFactory() {     ConnectionFactory connectionFactory = configureConnectionFactory("java:/XAConnectionFactory").     this.contextRunner.run(assertConnectionFactory(connectionFactory)). }
false;public;0;7;;@Test public void jndiNamePropertySet() {     ConnectionFactory connectionFactory = configureConnectionFactory("java:comp/env/myCF").     this.contextRunner.withPropertyValues("spring.jms.jndi-name=java:comp/env/myCF").run(assertConnectionFactory(connectionFactory)). }
false;public;0;7;;@Test public void jndiNamePropertySetWithResourceRef() {     ConnectionFactory connectionFactory = configureConnectionFactory("java:comp/env/myCF").     this.contextRunner.withPropertyValues("spring.jms.jndi-name=myCF").run(assertConnectionFactory(connectionFactory)). }
false;public;0;10;;@Test public void jndiNamePropertySetWithWrongValue() {     this.contextRunner.withPropertyValues("spring.jms.jndi-name=doesNotExistCF").run((context) -> {         assertThat(context).hasFailed().         assertThat(context).getFailure().isInstanceOf(BeanCreationException.class).hasMessageContaining("doesNotExistCF").     }). }
false;private;1;8;;private ContextConsumer<AssertableApplicationContext> assertConnectionFactory(ConnectionFactory connectionFactory) {     return (context) -> {         assertThat(context).hasSingleBean(ConnectionFactory.class).         assertThat(context.getBean(ConnectionFactory.class)).isSameAs(connectionFactory).     }. }
false;private;1;5;;private ConnectionFactory configureConnectionFactory(String name) {     ConnectionFactory connectionFactory = mock(ConnectionFactory.class).     TestableInitialContextFactory.bind(name, connectionFactory).     return connectionFactory. }
