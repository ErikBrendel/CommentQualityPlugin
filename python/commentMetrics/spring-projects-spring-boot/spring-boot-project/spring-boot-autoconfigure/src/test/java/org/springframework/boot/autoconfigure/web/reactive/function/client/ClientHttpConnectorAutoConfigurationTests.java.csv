commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void shouldCreateHttpClientBeans() {     this.contextRunner.run((context) -> {         assertThat(context).hasSingleBean(ReactorResourceFactory.class).         assertThat(context).hasSingleBean(ReactorClientHttpConnector.class).         WebClientCustomizer clientCustomizer = context.getBean(WebClientCustomizer.class).         WebClient.Builder builder = mock(WebClient.Builder.class).         clientCustomizer.customize(builder).         verify(builder, times(1)).clientConnector(any(ReactorClientHttpConnector.class)).     }). }
false;public;0;15;;@Test public void shouldNotOverrideCustomClientConnector() {     this.contextRunner.withUserConfiguration(CustomClientHttpConnectorConfig.class).run((context) -> {         assertThat(context).hasSingleBean(ClientHttpConnector.class).hasBean("customConnector").doesNotHaveBean(ReactorResourceFactory.class).         WebClientCustomizer clientCustomizer = context.getBean(WebClientCustomizer.class).         WebClient.Builder builder = mock(WebClient.Builder.class).         clientCustomizer.customize(builder).         verify(builder, times(1)).clientConnector(any(ClientHttpConnector.class)).     }). }
false;public;0;8;;@Test public void shouldUseCustomReactorResourceFactory() {     this.contextRunner.withUserConfiguration(CustomReactorResourceConfig.class).run((context) -> assertThat(context).hasSingleBean(ReactorClientHttpConnector.class).hasSingleBean(ReactorResourceFactory.class).hasBean("customReactorResourceFactory")). }
false;public;0;4;;@Bean public ClientHttpConnector customConnector() {     return mock(ClientHttpConnector.class). }
false;public;0;4;;@Bean public ReactorResourceFactory customReactorResourceFactory() {     return new ReactorResourceFactory(). }
