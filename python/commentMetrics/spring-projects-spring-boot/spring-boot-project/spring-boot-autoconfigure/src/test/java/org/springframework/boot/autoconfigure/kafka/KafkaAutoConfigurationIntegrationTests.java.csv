commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;21;;@SuppressWarnings({ "unchecked", "rawtypes" }) @Test public void testEndToEnd() throws Exception {     load(KafkaConfig.class, "spring.kafka.bootstrap-servers:" + getEmbeddedKafkaBrokersAsString(), "spring.kafka.consumer.group-id=testGroup", "spring.kafka.consumer.auto-offset-reset=earliest").     KafkaTemplate<String, String> template = this.context.getBean(KafkaTemplate.class).     template.send(TEST_TOPIC, "foo", "bar").     Listener listener = this.context.getBean(Listener.class).     assertThat(listener.latch.await(30, TimeUnit.SECONDS)).isTrue().     assertThat(listener.key).isEqualTo("foo").     assertThat(listener.received).isEqualTo("bar").     DefaultKafkaProducerFactory producerFactory = this.context.getBean(DefaultKafkaProducerFactory.class).     Producer producer = producerFactory.createProducer().     assertThat(producer.partitionsFor(ADMIN_CREATED_TOPIC).size()).isEqualTo(10).     producer.close(). }
false;public;0;7;;@Test public void testStreams() {     load(KafkaStreamsConfig.class, "spring.application.name:my-app", "spring.kafka.bootstrap-servers:" + getEmbeddedKafkaBrokersAsString()).     assertThat(this.context.getBean(StreamsBuilderFactoryBean.class).isAutoStartup()).isTrue(). }
false;private;2;3;;private void load(Class<?> config, String... environment) {     this.context = doLoad(new Class<?>[] { config }, environment). }
false;private;2;9;;private AnnotationConfigApplicationContext doLoad(Class<?>[] configs, String... environment) {     AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext().     applicationContext.register(configs).     applicationContext.register(KafkaAutoConfiguration.class).     TestPropertyValues.of(environment).applyTo(applicationContext).     applicationContext.refresh().     return applicationContext. }
false;private;0;3;;private String getEmbeddedKafkaBrokersAsString() {     return embeddedKafka.getEmbeddedKafka().getBrokersAsString(). }
false;public;0;4;;@Bean public Listener listener() {     return new Listener(). }
false;public;0;4;;@Bean public NewTopic adminCreated() {     return new NewTopic(ADMIN_CREATED_TOPIC, 10, (short) 1). }
false;public;2;7;;@KafkaListener(topics = TEST_TOPIC) public void listen(String foo, @Header(KafkaHeaders.RECEIVED_MESSAGE_KEY) String key) {     this.received = foo.     this.key = key.     this.latch.countDown(). }
