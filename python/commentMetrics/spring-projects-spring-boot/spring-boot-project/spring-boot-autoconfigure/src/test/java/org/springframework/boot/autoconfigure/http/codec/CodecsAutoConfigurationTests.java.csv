commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void autoConfigShouldProvideALoggingRequestDetailsCustomizer() {     this.contextRunner.run((context) -> {         CodecCustomizer customizer = context.getBean(CodecCustomizer.class).         CodecConfigurer configurer = new DefaultClientCodecConfigurer().         customizer.customize(configurer).         assertThat(configurer.defaultCodecs()).hasFieldOrPropertyWithValue("enableLoggingRequestDetails", false).     }). }
false;public;0;11;;@Test public void loggingRequestDetailsCustomizerShouldUseHttpProperties() {     this.contextRunner.withPropertyValues("spring.http.log-request-details=true").run((context) -> {         CodecCustomizer customizer = context.getBean(CodecCustomizer.class).         CodecConfigurer configurer = new DefaultClientCodecConfigurer().         customizer.customize(configurer).         assertThat(configurer.defaultCodecs()).hasFieldOrPropertyWithValue("enableLoggingRequestDetails", true).     }). }
false;public;0;11;;@Test public void loggingRequestDetailsBeanShouldHaveOrderZero() {     this.contextRunner.run((context) -> {         Method customizerMethod = ReflectionUtils.findMethod(CodecsAutoConfiguration.LoggingCodecConfiguration.class, "loggingCodecCustomizer", HttpProperties.class).         Integer order = new TestAnnotationAwareOrderComparator().findOrder(customizerMethod).         assertThat(order).isEqualTo(0).     }). }
false;public;0;5;;@Test public void jacksonCodecCustomizerBacksOffWhenThereIsNoObjectMapper() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean("jacksonCodecCustomizer")). }
false;public;0;5;;@Test public void jacksonCodecCustomizerIsAutoConfiguredWhenObjectMapperIsPresent() {     this.contextRunner.withUserConfiguration(ObjectMapperConfiguration.class).run((context) -> assertThat(context).hasBean("jacksonCodecCustomizer")). }
false;public;0;11;;@Test public void userProvidedCustomizerCanOverrideJacksonCodecCustomizer() {     this.contextRunner.withUserConfiguration(ObjectMapperConfiguration.class, CodecCustomizerConfiguration.class).run((context) -> {         List<CodecCustomizer> codecCustomizers = context.getBean(CodecCustomizers.class).codecCustomizers.         assertThat(codecCustomizers).hasSize(3).         assertThat(codecCustomizers.get(2)).isInstanceOf(TestCodecCustomizer.class).     }). }
false;public;1;4;;@Override public Integer findOrder(Object obj) {     return super.findOrder(obj). }
false;;0;4;;@Bean ObjectMapper objectMapper() {     return new ObjectMapper(). }
false;;0;4;;@Bean CodecCustomizer codecCustomizer() {     return new TestCodecCustomizer(). }
false;;1;4;;@Bean CodecCustomizers codecCustomizers(List<CodecCustomizer> customizers) {     return new CodecCustomizers(customizers). }
false;public;1;3;;@Override public void customize(CodecConfigurer configurer) { }
