commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void noDataSource() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(Flyway.class)). }
false;public;0;9;;@Test public void createDataSourceWithUrl() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.flyway.url:jdbc:hsqldb:mem:flywaytest").run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         assertThat(context.getBean(Flyway.class).getDataSource()).isNotNull().     }). }
false;public;0;11;;@Test public void createDataSourceWithUser() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.datasource.url:jdbc:hsqldb:mem:" + UUID.randomUUID(), "spring.flyway.user:sa").run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         assertThat(context.getBean(Flyway.class).getDataSource()).isNotNull().     }). }
false;public;0;9;;@Test public void flywayDataSource() {     this.contextRunner.withUserConfiguration(FlywayDataSourceConfiguration.class, EmbeddedDataSourceConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         assertThat(context.getBean(Flyway.class).getDataSource()).isEqualTo(context.getBean("flywayDataSource")).     }). }
false;public;0;9;;@Test public void flywayDataSourceWithoutDataSourceAutoConfiguration() {     this.contextRunner.withUserConfiguration(FlywayDataSourceConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         assertThat(context.getBean(Flyway.class).getDataSource()).isEqualTo(context.getBean("flywayDataSource")).     }). }
false;public;0;14;;@Test public void schemaManagementProviderDetectsDataSource() {     this.contextRunner.withUserConfiguration(FlywayDataSourceConfiguration.class, EmbeddedDataSourceConfiguration.class).run((context) -> {         FlywaySchemaManagementProvider schemaManagementProvider = context.getBean(FlywaySchemaManagementProvider.class).         assertThat(schemaManagementProvider.getSchemaManagement(context.getBean(DataSource.class))).isEqualTo(SchemaManagement.UNMANAGED).         assertThat(schemaManagementProvider.getSchemaManagement(context.getBean("flywayDataSource", DataSource.class))).isEqualTo(SchemaManagement.MANAGED).     }). }
false;public;0;10;;@Test public void defaultFlyway() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         Flyway flyway = context.getBean(Flyway.class).         assertThat(flyway.getLocations()).containsExactly(new Location("classpath:db/migration")).     }). }
false;public;0;13;;@Test public void overrideLocations() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.flyway.locations:classpath:db/changelog,classpath:db/migration").run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         Flyway flyway = context.getBean(Flyway.class).         assertThat(flyway.getLocations()).containsExactly(new Location("classpath:db/changelog"), new Location("classpath:db/migration")).     }). }
false;public;0;13;;@Test public void overrideLocationsList() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.flyway.locations[0]:classpath:db/changelog", "spring.flyway.locations[1]:classpath:db/migration").run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         Flyway flyway = context.getBean(Flyway.class).         assertThat(flyway.getLocations()).containsExactly(new Location("classpath:db/changelog"), new Location("classpath:db/migration")).     }). }
false;public;0;10;;@Test public void overrideSchemas() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.flyway.schemas:public").run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         Flyway flyway = context.getBean(Flyway.class).         assertThat(Arrays.asList(flyway.getSchemas()).toString()).isEqualTo("[public]").     }). }
false;public;0;10;;@Test public void changeLogDoesNotExist() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.flyway.locations:filesystem:no-such-dir").run((context) -> {         assertThat(context).hasFailed().         assertThat(context).getFailure().isInstanceOf(BeanCreationException.class).     }). }
false;public;0;13;;@Test public void checkLocationsAllMissing() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.flyway.locations:classpath:db/missing1,classpath:db/migration2").run((context) -> {         assertThat(context).hasFailed().         assertThat(context).getFailure().isInstanceOf(BeanCreationException.class).         assertThat(context).getFailure().hasMessageContaining("Cannot find migrations location in").     }). }
false;public;0;7;;@Test public void checkLocationsAllExist() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.flyway.locations:classpath:db/changelog,classpath:db/migration").run((context) -> assertThat(context).hasNotFailed()). }
false;public;0;6;;@Test public void checkLocationsAllExistWithImplicitClasspathPrefix() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.flyway.locations:db/changelog,db/migration").run((context) -> assertThat(context).hasNotFailed()). }
false;public;0;7;;@Test public void checkLocationsAllExistWithFilesystemPrefix() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.flyway.locations:filesystem:src/test/resources/db/migration").run((context) -> assertThat(context).hasNotFailed()). }
false;public;0;8;;@Test public void customFlywayMigrationStrategy() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class, MockFlywayMigrationStrategy.class).run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         context.getBean(MockFlywayMigrationStrategy.class).assertCalled().     }). }
false;public;0;11;;@Test public void customFlywayMigrationInitializer() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class, CustomFlywayMigrationInitializer.class).run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         FlywayMigrationInitializer initializer = context.getBean(FlywayMigrationInitializer.class).         assertThat(initializer.getOrder()).isEqualTo(Ordered.HIGHEST_PRECEDENCE).     }). }
false;public;0;7;;@Test public void customFlywayWithJpa() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class, CustomFlywayWithJpaConfiguration.class).run((context) -> assertThat(context).hasNotFailed()). }
false;public;0;10;;@Test public void overrideBaselineVersionString() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.flyway.baseline-version=0").run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         Flyway flyway = context.getBean(Flyway.class).         assertThat(flyway.getBaselineVersion()).isEqualTo(MigrationVersion.fromVersion("0")).     }). }
false;public;0;10;;@Test public void overrideBaselineVersionNumber() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.flyway.baseline-version=1").run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         Flyway flyway = context.getBean(Flyway.class).         assertThat(flyway.getBaselineVersion()).isEqualTo(MigrationVersion.fromVersion("1")).     }). }
false;public;0;13;;@Test public void useVendorDirectory() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.flyway.locations=classpath:db/vendors/{vendor},classpath:db/changelog").run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         Flyway flyway = context.getBean(Flyway.class).         assertThat(flyway.getLocations()).containsExactlyInAnyOrder(new Location("classpath:db/vendors/h2"), new Location("classpath:db/changelog")).     }). }
false;public;0;12;;@Test public void useOneLocationWithVendorDirectory() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class).withPropertyValues("spring.flyway.locations=classpath:db/vendors/{vendor}").run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         Flyway flyway = context.getBean(Flyway.class).         assertThat(flyway.getLocations()).containsExactly(new Location("classpath:db/vendors/h2")).     }). }
false;public;0;18;;@Test public void callbacksAreConfiguredAndOrdered() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class, CallbackConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         Flyway flyway = context.getBean(Flyway.class).         Callback callbackOne = context.getBean("callbackOne", Callback.class).         Callback callbackTwo = context.getBean("callbackTwo", Callback.class).         assertThat(flyway.getCallbacks()).hasSize(2).         assertThat(flyway.getCallbacks()).containsExactly(callbackTwo, callbackOne).         InOrder orderedCallbacks = inOrder(callbackOne, callbackTwo).         orderedCallbacks.verify(callbackTwo).handle(any(Event.class), any(Context.class)).         orderedCallbacks.verify(callbackOne).handle(any(Event.class), any(Context.class)).     }). }
false;public;0;18;;@Test public void legacyCallbacksAreConfiguredAndOrdered() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class, LegacyCallbackConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         Flyway flyway = context.getBean(Flyway.class).         FlywayCallback callbackOne = context.getBean("legacyCallbackOne", FlywayCallback.class).         FlywayCallback callbackTwo = context.getBean("legacyCallbackTwo", FlywayCallback.class).         assertThat(flyway.getCallbacks()).hasSize(2).         InOrder orderedCallbacks = inOrder(callbackOne, callbackTwo).         orderedCallbacks.verify(callbackTwo).beforeMigrate(any(Connection.class)).         orderedCallbacks.verify(callbackOne).beforeMigrate(any(Connection.class)).     }). }
false;public;0;12;;@Test public void callbacksAndLegacyCallbacksCannotBeMixed() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class, LegacyCallbackConfiguration.class, CallbackConfiguration.class).run((context) -> {         assertThat(context).hasFailed().         assertThat(context.getStartupFailure()).hasMessageContaining("Found a mixture of Callback and FlywayCallback beans." + " One type must be used exclusively.").     }). }
false;public;0;14;;@Test public void configurationCustomizersAreConfiguredAndOrdered() {     this.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class, ConfigurationCustomizerConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(Flyway.class).         Flyway flyway = context.getBean(Flyway.class).         assertThat(flyway.getConfiguration().getConnectRetries()).isEqualTo(5).         assertThat(flyway.getConfiguration().isIgnoreMissingMigrations()).isTrue().         assertThat(flyway.getConfiguration().isIgnorePendingMigrations()).isTrue().     }). }
false;public;0;6;;@Bean @Primary public DataSource normalDataSource() {     return DataSourceBuilder.create().url("jdbc:hsqldb:mem:normal").username("sa").build(). }
false;public;0;6;;@FlywayDataSource @Bean public DataSource flywayDataSource() {     return DataSourceBuilder.create().url("jdbc:hsqldb:mem:flywaytest").username("sa").build(). }
false;public;1;7;;@Bean public FlywayMigrationInitializer flywayMigrationInitializer(Flyway flyway) {     FlywayMigrationInitializer initializer = new FlywayMigrationInitializer(flyway).     initializer.setOrder(Ordered.HIGHEST_PRECEDENCE).     return initializer. }
false;public;0;4;;@Bean public Flyway flyway() {     return new Flyway(). }
false;public;0;8;;@Bean public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean() {     Map<String, Object> properties = new HashMap<>().     properties.put("configured", "manually").     properties.put("hibernate.transaction.jta.platform", NoJtaPlatform.INSTANCE).     return new EntityManagerFactoryBuilder(new HibernateJpaVendorAdapter(), properties, null).dataSource(this.dataSource).build(). }
false;public;1;4;;@Override public void migrate(Flyway flyway) {     this.called = true. }
false;public;0;3;;public void assertCalled() {     assertThat(this.called).isTrue(). }
false;public;0;5;;@Bean @Order(1) public Callback callbackOne() {     return mockCallback(). }
false;public;0;5;;@Bean @Order(0) public Callback callbackTwo() {     return mockCallback(). }
false;private;0;6;;private Callback mockCallback() {     Callback callback = mock(Callback.class).     given(callback.supports(any(Event.class), any(Context.class))).willReturn(true).     return callback. }
false;public;0;5;;@Bean @Order(1) public FlywayCallback legacyCallbackOne() {     return mock(FlywayCallback.class). }
false;public;0;5;;@Bean @Order(0) public FlywayCallback legacyCallbackTwo() {     return mock(FlywayCallback.class). }
false;public;0;6;;@Bean @Order(1) public FlywayConfigurationCustomizer customizerOne() {     return (configuration) -> configuration.connectRetries(5).ignorePendingMigrations(true). }
false;public;0;6;;@Bean @Order(0) public FlywayConfigurationCustomizer customizerTwo() {     return (configuration) -> configuration.connectRetries(10).ignoreMissingMigrations(true). }
