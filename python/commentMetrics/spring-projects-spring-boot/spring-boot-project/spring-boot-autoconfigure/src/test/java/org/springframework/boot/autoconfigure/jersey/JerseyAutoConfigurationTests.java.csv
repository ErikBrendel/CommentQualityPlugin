commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void requestContextFilterRegistrationIsAutoConfigured() {     this.contextRunner.run((context) -> {         assertThat(context).hasSingleBean(FilterRegistrationBean.class).         FilterRegistrationBean<?> registration = context.getBean(FilterRegistrationBean.class).         assertThat(registration.getFilter()).isInstanceOf(RequestContextFilter.class).     }). }
false;public;0;8;;@Test public void whenUserDefinesARequestContextFilterTheAutoConfiguredRegistrationBacksOff() {     this.contextRunner.withUserConfiguration(RequestContextFilterConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean(FilterRegistrationBean.class).         assertThat(context).hasSingleBean(RequestContextFilter.class).     }). }
false;public;0;10;;@Test public void whenUserDefinesARequestContextFilterRegistrationTheAutoConfiguredRegistrationBacksOff() {     this.contextRunner.withUserConfiguration(RequestContextFilterRegistrationConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(FilterRegistrationBean.class).         assertThat(context).hasBean("customRequestContextFilterRegistration").     }). }
false;public;0;4;;@Bean public ResourceConfig resourceConfig() {     return new ResourceConfig(). }
false;public;0;4;;@Bean public RequestContextFilter requestContextFilter() {     return new RequestContextFilter(). }
false;public;0;5;;@Bean public FilterRegistrationBean<RequestContextFilter> customRequestContextFilterRegistration() {     return new FilterRegistrationBean<RequestContextFilter>(new RequestContextFilter()). }
