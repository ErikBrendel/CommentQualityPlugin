commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;13;;@Parameters(name = "{0}") public static Object[] parameters() {     return new Object[] { new Object[] { SQLDialect.DERBY, sqlException("42802") }, new Object[] { SQLDialect.H2, sqlException(42000) }, new Object[] { SQLDialect.HSQLDB, sqlException(-22) }, new Object[] { SQLDialect.MARIADB, sqlException(1054) }, new Object[] { SQLDialect.MYSQL, sqlException(1054) }, new Object[] { SQLDialect.POSTGRES, sqlException("03000") }, new Object[] { SQLDialect.POSTGRES_9_3, sqlException("03000") }, new Object[] { SQLDialect.POSTGRES_9_4, sqlException("03000") }, new Object[] { SQLDialect.POSTGRES_9_5, sqlException("03000") }, new Object[] { SQLDialect.SQLITE, sqlException("21000") } }. }
false;private,static;1;3;;private static SQLException sqlException(String sqlState) {     return new SQLException(null, sqlState). }
false;private,static;1;4;;private static SQLException sqlException(int vendorCode) {     return new SQLException(null, null, vendorCode). }
false;public;0;13;;@Test public void exceptionTranslation() {     ExecuteContext context = mock(ExecuteContext.class).     Configuration configuration = mock(Configuration.class).     given(context.configuration()).willReturn(configuration).     given(configuration.dialect()).willReturn(this.dialect).     given(context.sqlException()).willReturn(this.sqlException).     this.exceptionTranslator.exception(context).     ArgumentCaptor<RuntimeException> captor = ArgumentCaptor.forClass(RuntimeException.class).     verify(context).exception(captor.capture()).     assertThat(captor.getValue()).isInstanceOf(BadSqlGrammarException.class). }
