commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void defaultDdlAutoForMysql() {     // Set up environment so we get a MySQL database but don't require server to be     // running...     this.contextRunner.withPropertyValues("spring.datasource.type:" + org.apache.tomcat.jdbc.pool.DataSource.class.getName(), "spring.datasource.database:mysql", "spring.datasource.url:jdbc:mysql://localhost/nonexistent", "spring.jpa.database:MYSQL").run((context) -> {         HibernateDefaultDdlAutoProvider ddlAutoProvider = new HibernateDefaultDdlAutoProvider(Collections.emptyList()).         assertThat(ddlAutoProvider.getDefaultDdlAuto(context.getBean(DataSource.class))).isEqualTo("none").     }). }
false;public;0;10;;@Test public void defaultDDlAutoForEmbedded() {     this.contextRunner.run((context) -> {         HibernateDefaultDdlAutoProvider ddlAutoProvider = new HibernateDefaultDdlAutoProvider(Collections.emptyList()).         assertThat(ddlAutoProvider.getDefaultDdlAuto(context.getBean(DataSource.class))).isEqualTo("create-drop").     }). }
false;public;0;12;;@Test public void defaultDDlAutoForEmbeddedWithPositiveContributor() {     this.contextRunner.run((context) -> {         DataSource dataSource = context.getBean(DataSource.class).         SchemaManagementProvider provider = mock(SchemaManagementProvider.class).         given(provider.getSchemaManagement(dataSource)).willReturn(SchemaManagement.MANAGED).         HibernateDefaultDdlAutoProvider ddlAutoProvider = new HibernateDefaultDdlAutoProvider(Collections.singletonList(provider)).         assertThat(ddlAutoProvider.getDefaultDdlAuto(dataSource)).isEqualTo("none").     }). }
false;public;0;13;;@Test public void defaultDDlAutoForEmbeddedWithNegativeContributor() {     this.contextRunner.run((context) -> {         DataSource dataSource = context.getBean(DataSource.class).         SchemaManagementProvider provider = mock(SchemaManagementProvider.class).         given(provider.getSchemaManagement(dataSource)).willReturn(SchemaManagement.UNMANAGED).         HibernateDefaultDdlAutoProvider ddlAutoProvider = new HibernateDefaultDdlAutoProvider(Collections.singletonList(provider)).         assertThat(ddlAutoProvider.getDefaultDdlAuto(dataSource)).isEqualTo("create-drop").     }). }
