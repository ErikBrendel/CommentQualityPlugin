commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;5;;@Test public void couchbaseNotAvailable() {     load(null).     assertThat(this.context.getBeansOfType(CityRepository.class)).hasSize(0). }
false;public;0;5;;@Test public void defaultRepository() {     load(DefaultConfiguration.class).     assertThat(this.context.getBeansOfType(CityRepository.class)).hasSize(1). }
false;public;0;6;;@Test public void reactiveRepositories() {     load(DefaultConfiguration.class, "spring.data.couchbase.repositories.type=reactive").     assertThat(this.context.getBeansOfType(CityRepository.class)).hasSize(0). }
false;public;0;5;;@Test public void disabledRepositories() {     load(DefaultConfiguration.class, "spring.data.couchbase.repositories.type=none").     assertThat(this.context.getBeansOfType(CityRepository.class)).hasSize(0). }
false;public;0;5;;@Test public void noRepositoryAvailable() {     load(NoRepositoryConfiguration.class).     assertThat(this.context.getBeansOfType(CityRepository.class)).hasSize(0). }
false;private;2;12;;private void load(Class<?> config, String... environment) {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     TestPropertyValues.of(environment).applyTo(context).     if (config != null) {         context.register(config).     }     context.register(PropertyPlaceholderAutoConfiguration.class, CouchbaseAutoConfiguration.class, CouchbaseDataAutoConfiguration.class, CouchbaseRepositoriesAutoConfiguration.class).     context.refresh().     this.context = context. }
