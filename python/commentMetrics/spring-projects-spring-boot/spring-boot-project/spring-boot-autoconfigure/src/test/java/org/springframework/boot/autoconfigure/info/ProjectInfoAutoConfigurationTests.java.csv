commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void gitPropertiesUnavailableIfResourceNotAvailable() {     this.contextRunner.run((context) -> assertThat(context.getBeansOfType(GitProperties.class)).isEmpty()). }
false;public;0;9;;@Test public void gitPropertiesWithNoData() {     this.contextRunner.withPropertyValues("spring.info.git.location=" + "classpath:/org/springframework/boot/autoconfigure/info/git-no-data.properties").run((context) -> {         GitProperties gitProperties = context.getBean(GitProperties.class).         assertThat(gitProperties.getBranch()).isNull().     }). }
false;public;0;11;;@Test public void gitPropertiesFallbackWithGitPropertiesBean() {     this.contextRunner.withUserConfiguration(CustomInfoPropertiesConfiguration.class).withPropertyValues("spring.info.git.location=" + "classpath:/org/springframework/boot/autoconfigure/info/git.properties").run((context) -> {         GitProperties gitProperties = context.getBean(GitProperties.class).         assertThat(gitProperties).isSameAs(context.getBean("customGitProperties")).     }). }
false;public;0;9;;@Test public void gitPropertiesUsesUtf8ByDefault() {     this.contextRunner.withPropertyValues("spring.info.git.location=classpath:/org/springframework/boot/autoconfigure/info/git.properties").run((context) -> {         GitProperties gitProperties = context.getBean(GitProperties.class).         assertThat(gitProperties.get("commit.charset")).isEqualTo("test™").     }). }
false;public;0;9;;@Test public void gitPropertiesEncodingCanBeConfigured() {     this.contextRunner.withPropertyValues("spring.info.git.encoding=US-ASCII", "spring.info.git.location=classpath:/org/springframework/boot/autoconfigure/info/git.properties").run((context) -> {         GitProperties gitProperties = context.getBean(GitProperties.class).         assertThat(gitProperties.get("commit.charset")).isNotEqualTo("test™").     }). }
false;public;0;12;;@Test public void buildPropertiesDefaultLocation() {     this.contextRunner.run((context) -> {         BuildProperties buildProperties = context.getBean(BuildProperties.class).         assertThat(buildProperties.getGroup()).isEqualTo("com.example").         assertThat(buildProperties.getArtifact()).isEqualTo("demo").         assertThat(buildProperties.getName()).isEqualTo("Demo Project").         assertThat(buildProperties.getVersion()).isEqualTo("0.0.1-SNAPSHOT").         assertThat(buildProperties.getTime().toEpochMilli()).isEqualTo(1457100965000L).     }). }
false;public;0;15;;@Test public void buildPropertiesCustomLocation() {     this.contextRunner.withPropertyValues("spring.info.build.location=" + "classpath:/org/springframework/boot/autoconfigure/info/build-info.properties").run((context) -> {         BuildProperties buildProperties = context.getBean(BuildProperties.class).         assertThat(buildProperties.getGroup()).isEqualTo("com.example.acme").         assertThat(buildProperties.getArtifact()).isEqualTo("acme").         assertThat(buildProperties.getName()).isEqualTo("acme").         assertThat(buildProperties.getVersion()).isEqualTo("1.0.1-SNAPSHOT").         assertThat(buildProperties.getTime().toEpochMilli()).isEqualTo(1457088120000L).     }). }
false;public;0;8;;@Test public void buildPropertiesCustomInvalidLocation() {     this.contextRunner.withPropertyValues("spring.info.build.location=" + "classpath:/org/acme/no-build-info.properties").run((context) -> assertThat(context.getBeansOfType(BuildProperties.class)).hasSize(0)). }
false;public;0;10;;@Test public void buildPropertiesFallbackWithBuildInfoBean() {     this.contextRunner.withUserConfiguration(CustomInfoPropertiesConfiguration.class).run((context) -> {         BuildProperties buildProperties = context.getBean(BuildProperties.class).         assertThat(buildProperties).isSameAs(context.getBean("customBuildProperties")).     }). }
false;public;0;10;;@Test public void buildPropertiesUsesUtf8ByDefault() {     this.contextRunner.withPropertyValues("spring.info.build.location=classpath:/org/springframework/boot/autoconfigure/info/build-info.properties").run((context) -> {         BuildProperties buildProperties = context.getBean(BuildProperties.class).         assertThat(buildProperties.get("charset")).isEqualTo("test™").     }). }
false;public;0;10;;@Test public void buildPropertiesEncodingCanBeConfigured() {     this.contextRunner.withPropertyValues("spring.info.build.encoding=US-ASCII", "spring.info.build.location=classpath:/org/springframework/boot/autoconfigure/info/build-info.properties").run((context) -> {         BuildProperties buildProperties = context.getBean(BuildProperties.class).         assertThat(buildProperties.get("charset")).isNotEqualTo("test™").     }). }
false;public;0;4;;@Bean public GitProperties customGitProperties() {     return new GitProperties(new Properties()). }
false;public;0;4;;@Bean public BuildProperties customBuildProperties() {     return new BuildProperties(new Properties()). }
