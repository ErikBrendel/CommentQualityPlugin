commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void bootstrapHostsIsRequired() {     this.contextRunner.run(this::assertNoCouchbaseBeans). }
false;public;0;9;;@Test public void bootstrapHostsNotRequiredIfCouchbaseConfigurerIsSet() {     this.contextRunner.withUserConfiguration(CouchbaseTestConfigurer.class).run((context) -> {         assertThat(context).hasSingleBean(CouchbaseTestConfigurer.class).         // No beans are going to be created         assertNoCouchbaseBeans(context).     }). }
false;public;0;9;;@Test public void bootstrapHostsIgnoredIfCouchbaseConfigurerIsSet() {     this.contextRunner.withUserConfiguration(CouchbaseTestConfigurer.class).withPropertyValues("spring.couchbase.bootstrapHosts=localhost").run((context) -> {         assertThat(context).hasSingleBean(CouchbaseTestConfigurer.class).         assertNoCouchbaseBeans(context).     }). }
false;private;1;6;;private void assertNoCouchbaseBeans(AssertableApplicationContext context) {     // No beans are going to be created     assertThat(context).doesNotHaveBean(CouchbaseEnvironment.class).doesNotHaveBean(ClusterInfo.class).doesNotHaveBean(Cluster.class).doesNotHaveBean(Bucket.class). }
false;public;0;15;;@Test public void customizeEnvEndpoints() {     testCouchbaseEnv((env) -> {         assertThat(env.kvServiceConfig().minEndpoints()).isEqualTo(2).         assertThat(env.kvServiceConfig().maxEndpoints()).isEqualTo(2).         assertThat(env.queryServiceConfig().minEndpoints()).isEqualTo(3).         assertThat(env.queryServiceConfig().maxEndpoints()).isEqualTo(5).         assertThat(env.viewServiceConfig().minEndpoints()).isEqualTo(4).         assertThat(env.viewServiceConfig().maxEndpoints()).isEqualTo(6).     }, "spring.couchbase.env.endpoints.key-value=2", "spring.couchbase.env.endpoints.queryservice.min-endpoints=3", "spring.couchbase.env.endpoints.queryservice.max-endpoints=5", "spring.couchbase.env.endpoints.viewservice.min-endpoints=4", "spring.couchbase.env.endpoints.viewservice.max-endpoints=6"). }
false;public;0;12;;@Test public void customizeEnvEndpointsUsesNewInfrastructure() {     testCouchbaseEnv((env) -> {         assertThat(env.queryServiceConfig().minEndpoints()).isEqualTo(3).         assertThat(env.queryServiceConfig().maxEndpoints()).isEqualTo(5).         assertThat(env.viewServiceConfig().minEndpoints()).isEqualTo(4).         assertThat(env.viewServiceConfig().maxEndpoints()).isEqualTo(6).     }, "spring.couchbase.env.endpoints.queryservice.min-endpoints=3", "spring.couchbase.env.endpoints.queryservice.max-endpoints=5", "spring.couchbase.env.endpoints.viewservice.min-endpoints=4", "spring.couchbase.env.endpoints.viewservice.max-endpoints=6"). }
false;public;0;10;;@Test public void customizeEnvEndpointsUsesNewInfrastructureWithOnlyMax() {     testCouchbaseEnv((env) -> {         assertThat(env.queryServiceConfig().minEndpoints()).isEqualTo(1).         assertThat(env.queryServiceConfig().maxEndpoints()).isEqualTo(5).         assertThat(env.viewServiceConfig().minEndpoints()).isEqualTo(1).         assertThat(env.viewServiceConfig().maxEndpoints()).isEqualTo(6).     }, "spring.couchbase.env.endpoints.queryservice.max-endpoints=5", "spring.couchbase.env.endpoints.viewservice.max-endpoints=6"). }
false;public;0;14;;@Test public void customizeEnvTimeouts() {     testCouchbaseEnv((env) -> {         assertThat(env.connectTimeout()).isEqualTo(100).         assertThat(env.kvTimeout()).isEqualTo(200).         assertThat(env.queryTimeout()).isEqualTo(300).         assertThat(env.socketConnectTimeout()).isEqualTo(400).         assertThat(env.viewTimeout()).isEqualTo(500).     }, "spring.couchbase.env.timeouts.connect=100", "spring.couchbase.env.timeouts.keyValue=200", "spring.couchbase.env.timeouts.query=300", "spring.couchbase.env.timeouts.socket-connect=400", "spring.couchbase.env.timeouts.view=500"). }
false;public;0;9;;@Test public void enableSslNoEnabledFlag() {     testCouchbaseEnv((env) -> {         assertThat(env.sslEnabled()).isTrue().         assertThat(env.sslKeystoreFile()).isEqualTo("foo").         assertThat(env.sslKeystorePassword()).isEqualTo("secret").     }, "spring.couchbase.env.ssl.keyStore=foo", "spring.couchbase.env.ssl.keyStorePassword=secret"). }
false;public;0;10;;@Test public void disableSslEvenWithKeyStore() {     testCouchbaseEnv((env) -> {         assertThat(env.sslEnabled()).isFalse().         assertThat(env.sslKeystoreFile()).isNull().         assertThat(env.sslKeystorePassword()).isNull().     }, "spring.couchbase.env.ssl.enabled=false", "spring.couchbase.env.ssl.keyStore=foo", "spring.couchbase.env.ssl.keyStorePassword=secret"). }
false;private;2;12;;private void testCouchbaseEnv(Consumer<DefaultCouchbaseEnvironment> environmentConsumer, String... environment) {     this.contextRunner.withUserConfiguration(CouchbaseTestConfigurer.class).withPropertyValues(environment).run((context) -> {         CouchbaseProperties properties = context.getBean(CouchbaseProperties.class).         DefaultCouchbaseEnvironment env = new CouchbaseConfiguration(properties).couchbaseEnvironment().         environmentConsumer.accept(env).     }). }
false;public;0;13;;@Test public void customizeEnvWithCustomCouchbaseConfiguration() {     this.contextRunner.withUserConfiguration(CustomCouchbaseConfiguration.class).withPropertyValues("spring.couchbase.bootstrap-hosts=localhost", "spring.couchbase.env.timeouts.connect=100").run((context) -> {         assertThat(context).hasSingleBean(CouchbaseConfiguration.class).         DefaultCouchbaseEnvironment env = context.getBean(DefaultCouchbaseEnvironment.class).         assertThat(env.socketConnectTimeout()).isEqualTo(5000).         assertThat(env.connectTimeout()).isEqualTo(2000).     }). }
false;protected;1;6;;@Override protected DefaultCouchbaseEnvironment.Builder initializeEnvironmentBuilder(CouchbaseProperties properties) {     return super.initializeEnvironmentBuilder(properties).socketConnectTimeout(5000).connectTimeout(2000). }
false;public;0;4;;@Override public Cluster couchbaseCluster() {     return mock(Cluster.class). }
false;public;0;4;;@Override public ClusterInfo couchbaseClusterInfo() {     return mock(ClusterInfo.class). }
false;public;0;4;;@Override public Bucket couchbaseClient() {     return mock(CouchbaseBucket.class). }
