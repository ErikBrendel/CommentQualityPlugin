commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void closeContext() {     if (this.context != null) {         this.context.close().     } }
false;public;0;5;;@Test public void defaultEmbeddedDatabase() {     this.context = load().     assertThat(this.context.getBean(DataSource.class)).isNotNull(). }
false;public;0;11;;@Test public void generateUniqueName() throws Exception {     this.context = load("spring.datasource.generate-unique-name=true").     try (AnnotationConfigApplicationContext context2 = load("spring.datasource.generate-unique-name=true")) {         DataSource dataSource = this.context.getBean(DataSource.class).         DataSource dataSource2 = context2.getBean(DataSource.class).         assertThat(getDatabaseName(dataSource)).isNotEqualTo(getDatabaseName(dataSource2)).     } }
false;private;1;11;;private String getDatabaseName(DataSource dataSource) throws SQLException {     try (Connection connection = dataSource.getConnection()) {         ResultSet catalogs = connection.getMetaData().getCatalogs().         if (catalogs.next()) {             return catalogs.getString(1).         } else {             throw new IllegalStateException("Unable to get database name").         }     } }
false;private;1;7;;private AnnotationConfigApplicationContext load(String... environment) {     AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext().     TestPropertyValues.of(environment).applyTo(ctx).     ctx.register(EmbeddedDataSourceConfiguration.class).     ctx.refresh().     return ctx. }
