commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void init() {     TestPropertyValues.of(PREFIX + "initialize:false").applyTo(this.context). }
false;public;0;9;;@Test public void testDataSourceExists() {     this.context.register(TomcatDataSourceConfiguration.class).     TestPropertyValues.of(PREFIX + "url:jdbc:h2:mem:testdb").applyTo(this.context).     this.context.refresh().     assertThat(this.context.getBean(DataSource.class)).isNotNull().     assertThat(this.context.getBean(org.apache.tomcat.jdbc.pool.DataSource.class)).isNotNull(). }
false;public;0;23;;@Test public void testDataSourcePropertiesOverridden() throws Exception {     this.context.register(TomcatDataSourceConfiguration.class).     TestPropertyValues.of(PREFIX + "url:jdbc:h2:mem:testdb", PREFIX + "testWhileIdle:true", PREFIX + "testOnBorrow:true", PREFIX + "testOnReturn:true", PREFIX + "timeBetweenEvictionRunsMillis:10000", PREFIX + "minEvictableIdleTimeMillis:12345", PREFIX + "maxWait:1234", PREFIX + "jdbcInterceptors:SlowQueryReport", PREFIX + "validationInterval:9999").applyTo(this.context).     this.context.refresh().     org.apache.tomcat.jdbc.pool.DataSource ds = this.context.getBean(org.apache.tomcat.jdbc.pool.DataSource.class).     assertThat(ds.getUrl()).isEqualTo("jdbc:h2:mem:testdb").     assertThat(ds.isTestWhileIdle()).isTrue().     assertThat(ds.isTestOnBorrow()).isTrue().     assertThat(ds.isTestOnReturn()).isTrue().     assertThat(ds.getTimeBetweenEvictionRunsMillis()).isEqualTo(10000).     assertThat(ds.getMinEvictableIdleTimeMillis()).isEqualTo(12345).     assertThat(ds.getMaxWait()).isEqualTo(1234).     assertThat(ds.getValidationInterval()).isEqualTo(9999L).     assertDataSourceHasInterceptors(ds). }
false;private;1;11;;private void assertDataSourceHasInterceptors(DataSourceProxy ds) throws ClassNotFoundException {     PoolProperties.InterceptorDefinition[] interceptors = ds.getJdbcInterceptorsAsArray().     for (PoolProperties.InterceptorDefinition interceptor : interceptors) {         if (SlowQueryReport.class == interceptor.getInterceptorClass()) {             return.         }     }     fail("SlowQueryReport interceptor should have been set."). }
false;public;0;12;;@Test public void testDataSourceDefaultsPreserved() {     this.context.register(TomcatDataSourceConfiguration.class).     TestPropertyValues.of(PREFIX + "url:jdbc:h2:mem:testdb").applyTo(this.context).     this.context.refresh().     org.apache.tomcat.jdbc.pool.DataSource ds = this.context.getBean(org.apache.tomcat.jdbc.pool.DataSource.class).     assertThat(ds.getTimeBetweenEvictionRunsMillis()).isEqualTo(5000).     assertThat(ds.getMinEvictableIdleTimeMillis()).isEqualTo(60000).     assertThat(ds.getMaxWait()).isEqualTo(30000).     assertThat(ds.getValidationInterval()).isEqualTo(3000L). }
false;public;0;6;;@Bean @ConfigurationProperties(prefix = "spring.datasource.tomcat") public DataSource dataSource() {     return DataSourceBuilder.create().type(org.apache.tomcat.jdbc.pool.DataSource.class).build(). }
