commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testVanillaOnClassCondition() {     this.contextRunner.withUserConfiguration(BasicConfiguration.class, FooConfiguration.class).run(this::hasBarBean). }
false;public;0;10;;@Test public void testMissingOnClassCondition() {     this.contextRunner.withUserConfiguration(MissingConfiguration.class, FooConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean("bar").         assertThat(context).hasBean("foo").         assertThat(context.getBean("foo")).isEqualTo("foo").     }). }
false;public;0;6;;@Test public void testOnClassConditionWithXml() {     this.contextRunner.withUserConfiguration(BasicConfiguration.class, XmlConfiguration.class).run(this::hasBarBean). }
false;public;0;5;;@Test public void testOnClassConditionWithCombinedXml() {     this.contextRunner.withUserConfiguration(CombinedXmlConfiguration.class).run(this::hasBarBean). }
false;public;0;13;;@Test public void onClassConditionOutputShouldNotContainConditionalOnMissingClassInMessage() {     this.contextRunner.withUserConfiguration(BasicConfiguration.class).run((context) -> {         Collection<ConditionEvaluationReport.ConditionAndOutcomes> conditionAndOutcomes = ConditionEvaluationReport.get(context.getSourceApplicationContext().getBeanFactory()).getConditionAndOutcomesBySource().values().         String message = conditionAndOutcomes.iterator().next().iterator().next().getOutcome().getMessage().         assertThat(message).doesNotContain("@ConditionalOnMissingClass did not find unwanted class").     }). }
false;private;1;4;;private void hasBarBean(AssertableApplicationContext context) {     assertThat(context).hasBean("bar").     assertThat(context.getBean("bar")).isEqualTo("bar"). }
false;public;0;4;;@Bean public String bar() {     return "bar". }
false;public;0;4;;@Bean public String bar() {     return "bar". }
false;public;0;4;;@Bean public String foo() {     return "foo". }
