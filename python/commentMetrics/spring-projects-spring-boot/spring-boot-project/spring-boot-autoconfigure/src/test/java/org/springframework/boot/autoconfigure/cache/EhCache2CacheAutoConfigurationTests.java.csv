commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void ehCacheWithCaches() {     this.contextRunner.withUserConfiguration(DefaultCacheConfiguration.class).withPropertyValues("spring.cache.type=ehcache").run((context) -> {         EhCacheCacheManager cacheManager = getCacheManager(context, EhCacheCacheManager.class).         assertThat(cacheManager.getCacheNames()).containsOnly("cacheTest1", "cacheTest2").         assertThat(context.getBean(net.sf.ehcache.CacheManager.class)).isEqualTo(cacheManager.getCacheManager()).     }). }
false;public;0;8;;@Test public void ehCacheWithCustomizers() {     this.contextRunner.withUserConfiguration(DefaultCacheAndCustomizersConfiguration.class).withPropertyValues("spring.cache.type=" + "ehcache").run(verifyCustomizers("allCacheManagerCustomizer", "ehcacheCacheManagerCustomizer")). }
false;public;0;12;;@Test public void ehCacheWithConfig() {     this.contextRunner.withUserConfiguration(DefaultCacheConfiguration.class).withPropertyValues("spring.cache.type=ehcache", "spring.cache.ehcache.config=cache/ehcache-override.xml").run((context) -> {         EhCacheCacheManager cacheManager = getCacheManager(context, EhCacheCacheManager.class).         assertThat(cacheManager.getCacheNames()).containsOnly("cacheOverrideTest1", "cacheOverrideTest2").     }). }
false;public;0;10;;@Test public void ehCacheWithExistingCacheManager() {     this.contextRunner.withUserConfiguration(EhCacheCustomCacheManager.class).withPropertyValues("spring.cache.type=ehcache").run((context) -> {         EhCacheCacheManager cacheManager = getCacheManager(context, EhCacheCacheManager.class).         assertThat(cacheManager.getCacheManager()).isEqualTo(context.getBean("customEhCacheCacheManager")).     }). }
