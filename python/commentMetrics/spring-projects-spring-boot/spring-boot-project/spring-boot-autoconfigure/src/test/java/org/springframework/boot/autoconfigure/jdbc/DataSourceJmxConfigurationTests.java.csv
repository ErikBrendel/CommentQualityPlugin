commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void hikariAutoConfiguredCanUseRegisterMBeans() {     String poolName = UUID.randomUUID().toString().     this.contextRunner.withPropertyValues("spring.datasource.type=" + HikariDataSource.class.getName(), "spring.datasource.name=" + poolName, "spring.datasource.hikari.register-mbeans=true").run((context) -> {         assertThat(context).hasSingleBean(HikariDataSource.class).         assertThat(context.getBean(HikariDataSource.class).isRegisterMbeans()).isTrue().         MBeanServer mBeanServer = context.getBean(MBeanServer.class).         validateHikariMBeansRegistration(mBeanServer, poolName, true).     }). }
false;public;0;22;;@Test public void hikariAutoConfiguredWithoutDataSourceName() throws MalformedObjectNameException {     MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer().     Set<ObjectInstance> existingInstances = mBeanServer.queryMBeans(new ObjectName("com.zaxxer.hikari:type=*"), null).     this.contextRunner.withPropertyValues("spring.datasource.type=" + HikariDataSource.class.getName(), "spring.datasource.hikari.register-mbeans=true").run((context) -> {         assertThat(context).hasSingleBean(HikariDataSource.class).         assertThat(context.getBean(HikariDataSource.class).isRegisterMbeans()).isTrue().         // We can't rely on the number of MBeans so we're checking that the         // pool and pool         // config MBeans were registered         assertThat(mBeanServer.queryMBeans(new ObjectName("com.zaxxer.hikari:type=*"), null).size()).isEqualTo(existingInstances.size() + 2).     }). }
false;public;0;17;;@Test public void hikariAutoConfiguredUsesJmsFlag() {     String poolName = UUID.randomUUID().toString().     this.contextRunner.withPropertyValues("spring.datasource.type=" + HikariDataSource.class.getName(), "spring.jmx.enabled=false", "spring.datasource.name=" + poolName, "spring.datasource.hikari.register-mbeans=true").run((context) -> {         assertThat(context).hasSingleBean(HikariDataSource.class).         assertThat(context.getBean(HikariDataSource.class).isRegisterMbeans()).isTrue().         // Hikari can still register mBeans         validateHikariMBeansRegistration(ManagementFactory.getPlatformMBeanServer(), poolName, true).     }). }
false;public;0;18;;@Test public void hikariProxiedCanUseRegisterMBeans() {     String poolName = UUID.randomUUID().toString().     this.contextRunner.withUserConfiguration(DataSourceProxyConfiguration.class).withPropertyValues("spring.datasource.type=" + HikariDataSource.class.getName(), "spring.datasource.name=" + poolName, "spring.datasource.hikari.register-mbeans=true").run((context) -> {         assertThat(context).hasSingleBean(javax.sql.DataSource.class).         HikariDataSource hikariDataSource = context.getBean(javax.sql.DataSource.class).unwrap(HikariDataSource.class).         assertThat(hikariDataSource.isRegisterMbeans()).isTrue().         MBeanServer mBeanServer = context.getBean(MBeanServer.class).         validateHikariMBeansRegistration(mBeanServer, poolName, true).     }). }
false;private;3;9;;private void validateHikariMBeansRegistration(MBeanServer mBeanServer, String poolName, boolean expected) throws MalformedObjectNameException {     assertThat(mBeanServer.isRegistered(new ObjectName("com.zaxxer.hikari:type=Pool (" + poolName + ")"))).isEqualTo(expected).     assertThat(mBeanServer.isRegistered(new ObjectName("com.zaxxer.hikari:type=PoolConfig (" + poolName + ")"))).isEqualTo(expected). }
false;public;0;8;;@Test public void tomcatDoesNotExposeMBeanPoolByDefault() {     this.contextRunner.withPropertyValues("spring.datasource.type=" + DataSource.class.getName()).run((context) -> assertThat(context).doesNotHaveBean(ConnectionPool.class)). }
false;public;0;12;;@Test public void tomcatAutoConfiguredCanExposeMBeanPool() {     this.contextRunner.withPropertyValues("spring.datasource.type=" + DataSource.class.getName(), "spring.datasource.jmx-enabled=true").run((context) -> {         assertThat(context).hasBean("dataSourceMBean").         assertThat(context).hasSingleBean(ConnectionPool.class).         assertThat(context.getBean(DataSourceProxy.class).createPool().getJmxPool()).isSameAs(context.getBean(ConnectionPool.class)).     }). }
false;public;0;12;;@Test public void tomcatProxiedCanExposeMBeanPool() {     this.contextRunner.withUserConfiguration(DataSourceProxyConfiguration.class).withPropertyValues("spring.datasource.type=" + DataSource.class.getName(), "spring.datasource.jmx-enabled=true").run((context) -> {         assertThat(context).hasBean("dataSourceMBean").         assertThat(context).getBean("dataSourceMBean").isInstanceOf(ConnectionPool.class).     }). }
false;public;0;12;;@Test public void tomcatDelegateCanExposeMBeanPool() {     this.contextRunner.withUserConfiguration(DataSourceDelegateConfiguration.class).withPropertyValues("spring.datasource.type=" + DataSource.class.getName(), "spring.datasource.jmx-enabled=true").run((context) -> {         assertThat(context).hasBean("dataSourceMBean").         assertThat(context).getBean("dataSourceMBean").isInstanceOf(ConnectionPool.class).     }). }
false;public,static;0;4;;@Bean public static DataSourceBeanPostProcessor dataSourceBeanPostProcessor() {     return new DataSourceBeanPostProcessor(). }
false;public;2;7;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) {     if (bean instanceof javax.sql.DataSource) {         return new ProxyFactory(bean).getProxy().     }     return bean. }
false;public;2;8;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) {     if (bean instanceof javax.sql.DataSource) {         return new DelegatingDataSource((javax.sql.DataSource) bean).     }     return bean. }
false;public,static;0;13;;@Bean public static DataSourceBeanPostProcessor dataSourceBeanPostProcessor() {     return new DataSourceBeanPostProcessor() {          @Override         public Object postProcessAfterInitialization(Object bean, String beanName) {             if (bean instanceof javax.sql.DataSource) {                 return new DelegatingDataSource((javax.sql.DataSource) bean).             }             return bean.         }     }. }
