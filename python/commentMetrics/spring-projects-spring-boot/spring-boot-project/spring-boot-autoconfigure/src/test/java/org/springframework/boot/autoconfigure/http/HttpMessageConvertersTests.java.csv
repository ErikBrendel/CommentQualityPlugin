commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void containsDefaults() {     HttpMessageConverters converters = new HttpMessageConverters().     List<Class<?>> converterClasses = new ArrayList<>().     for (HttpMessageConverter<?> converter : converters) {         converterClasses.add(converter.getClass()).     }     assertThat(converterClasses).containsExactly(ByteArrayHttpMessageConverter.class, StringHttpMessageConverter.class, ResourceHttpMessageConverter.class, ResourceRegionHttpMessageConverter.class, SourceHttpMessageConverter.class, AllEncompassingFormHttpMessageConverter.class, MappingJackson2HttpMessageConverter.class, MappingJackson2SmileHttpMessageConverter.class, MappingJackson2CborHttpMessageConverter.class, MappingJackson2XmlHttpMessageConverter.class). }
false;public;0;20;;@Test public void addBeforeExistingConverter() {     MappingJackson2HttpMessageConverter converter1 = new MappingJackson2HttpMessageConverter().     MappingJackson2HttpMessageConverter converter2 = new MappingJackson2HttpMessageConverter().     HttpMessageConverters converters = new HttpMessageConverters(converter1, converter2).     assertThat(converters.getConverters().contains(converter1)).isTrue().     assertThat(converters.getConverters().contains(converter2)).isTrue().     List<MappingJackson2HttpMessageConverter> httpConverters = new ArrayList<>().     for (HttpMessageConverter<?> candidate : converters) {         if (candidate instanceof MappingJackson2HttpMessageConverter) {             httpConverters.add((MappingJackson2HttpMessageConverter) candidate).         }     }     // The existing converter is still there, but with a lower priority     assertThat(httpConverters).hasSize(3).     assertThat(httpConverters.indexOf(converter1)).isEqualTo(0).     assertThat(httpConverters.indexOf(converter2)).isEqualTo(1).     assertThat(converters.getConverters().indexOf(converter1)).isNotEqualTo(0). }
false;public;0;9;;@Test public void addNewConverters() {     HttpMessageConverter<?> converter1 = mock(HttpMessageConverter.class).     HttpMessageConverter<?> converter2 = mock(HttpMessageConverter.class).     HttpMessageConverters converters = new HttpMessageConverters(converter1, converter2).     assertThat(converters.getConverters().get(0)).isEqualTo(converter1).     assertThat(converters.getConverters().get(1)).isEqualTo(converter2). }
false;public;0;11;;@Test public void convertersAreAddedToFormPartConverter() {     HttpMessageConverter<?> converter1 = mock(HttpMessageConverter.class).     HttpMessageConverter<?> converter2 = mock(HttpMessageConverter.class).     List<HttpMessageConverter<?>> converters = new HttpMessageConverters(converter1, converter2).getConverters().     List<HttpMessageConverter<?>> partConverters = extractFormPartConverters(converters).     assertThat(partConverters.get(0)).isEqualTo(converter1).     assertThat(partConverters.get(1)).isEqualTo(converter2). }
false;protected;1;7;;@Override protected List<HttpMessageConverter<?>> postProcessConverters(List<HttpMessageConverter<?>> converters) {     converters.removeIf(MappingJackson2XmlHttpMessageConverter.class::isInstance).     return converters. }
false;public;0;26;;@Test public void postProcessConverters() {     HttpMessageConverters converters = new HttpMessageConverters() {          @Override         protected List<HttpMessageConverter<?>> postProcessConverters(List<HttpMessageConverter<?>> converters) {             converters.removeIf(MappingJackson2XmlHttpMessageConverter.class::isInstance).             return converters.         }     }.     List<Class<?>> converterClasses = new ArrayList<>().     for (HttpMessageConverter<?> converter : converters) {         converterClasses.add(converter.getClass()).     }     assertThat(converterClasses).containsExactly(ByteArrayHttpMessageConverter.class, StringHttpMessageConverter.class, ResourceHttpMessageConverter.class, ResourceRegionHttpMessageConverter.class, SourceHttpMessageConverter.class, AllEncompassingFormHttpMessageConverter.class, MappingJackson2HttpMessageConverter.class, MappingJackson2SmileHttpMessageConverter.class, MappingJackson2CborHttpMessageConverter.class). }
false;protected;1;7;;@Override protected List<HttpMessageConverter<?>> postProcessPartConverters(List<HttpMessageConverter<?>> converters) {     converters.removeIf(MappingJackson2XmlHttpMessageConverter.class::isInstance).     return converters. }
false;public;0;24;;@Test public void postProcessPartConverters() {     HttpMessageConverters converters = new HttpMessageConverters() {          @Override         protected List<HttpMessageConverter<?>> postProcessPartConverters(List<HttpMessageConverter<?>> converters) {             converters.removeIf(MappingJackson2XmlHttpMessageConverter.class::isInstance).             return converters.         }     }.     List<Class<?>> converterClasses = new ArrayList<>().     for (HttpMessageConverter<?> converter : extractFormPartConverters(converters.getConverters())) {         converterClasses.add(converter.getClass()).     }     assertThat(converterClasses).containsExactly(ByteArrayHttpMessageConverter.class, StringHttpMessageConverter.class, ResourceHttpMessageConverter.class, SourceHttpMessageConverter.class, MappingJackson2HttpMessageConverter.class, MappingJackson2SmileHttpMessageConverter.class). }
false;private;1;8;;@SuppressWarnings("unchecked") private List<HttpMessageConverter<?>> extractFormPartConverters(List<HttpMessageConverter<?>> converters) {     AllEncompassingFormHttpMessageConverter formConverter = findFormConverter(converters).     return (List<HttpMessageConverter<?>>) ReflectionTestUtils.getField(formConverter, "partConverters"). }
false;private;1;9;;private AllEncompassingFormHttpMessageConverter findFormConverter(Collection<HttpMessageConverter<?>> converters) {     for (HttpMessageConverter<?> converter : converters) {         if (converter instanceof AllEncompassingFormHttpMessageConverter) {             return (AllEncompassingFormHttpMessageConverter) converter.         }     }     return null. }
