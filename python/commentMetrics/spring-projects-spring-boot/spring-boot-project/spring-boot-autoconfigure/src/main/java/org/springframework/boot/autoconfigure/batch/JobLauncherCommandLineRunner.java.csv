commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;1;4;;@Override public void setApplicationEventPublisher(ApplicationEventPublisher publisher) {     this.publisher = publisher. }
false;public;1;4;;@Autowired(required = false) public void setJobRegistry(JobRegistry jobRegistry) {     this.jobRegistry = jobRegistry. }
false;public;1;3;;public void setJobNames(String jobNames) {     this.jobNames = jobNames. }
false;public;1;4;;@Autowired(required = false) public void setJobParametersConverter(JobParametersConverter converter) {     this.converter = converter. }
false;public;1;4;;@Autowired(required = false) public void setJobs(Collection<Job> jobs) {     this.jobs = jobs. }
false;public;1;5;;@Override public void run(String... args) throws JobExecutionException {     logger.info("Running default command line with: " + Arrays.asList(args)).     launchJobFromProperties(StringUtils.splitArrayElementsIntoProperties(args, "=")). }
false;protected;1;6;;protected void launchJobFromProperties(Properties properties) throws JobExecutionException {     JobParameters jobParameters = this.converter.getJobParameters(properties).     executeLocalJobs(jobParameters).     executeRegisteredJobs(jobParameters). }
false;private;1;13;;private void executeLocalJobs(JobParameters jobParameters) throws JobExecutionException {     for (Job job : this.jobs) {         if (StringUtils.hasText(this.jobNames)) {             String[] jobsToRun = this.jobNames.split(",").             if (!PatternMatchUtils.simpleMatch(jobsToRun, job.getName())) {                 logger.debug("Skipped job: " + job.getName()).                 continue.             }         }         execute(job, jobParameters).     } }
false;private;1;18;;private void executeRegisteredJobs(JobParameters jobParameters) throws JobExecutionException {     if (this.jobRegistry != null && StringUtils.hasText(this.jobNames)) {         String[] jobsToRun = this.jobNames.split(",").         for (String jobName : jobsToRun) {             try {                 Job job = this.jobRegistry.getJob(jobName).                 if (this.jobs.contains(job)) {                     continue.                 }                 execute(job, jobParameters).             } catch (NoSuchJobException ex) {                 logger.debug("No job found in registry for job name: " + jobName).             }         }     } }
false;protected;2;10;;protected void execute(Job job, JobParameters jobParameters) throws JobExecutionAlreadyRunningException, JobRestartException, JobInstanceAlreadyCompleteException, JobParametersInvalidException, JobParametersNotFoundException {     JobParameters parameters = getNextJobParameters(job, jobParameters).     JobExecution execution = this.jobLauncher.run(job, parameters).     if (this.publisher != null) {         this.publisher.publishEvent(new JobExecutionEvent(execution)).     } }
false;private;2;12;;private JobParameters getNextJobParameters(Job job, JobParameters jobParameters) {     if (this.jobRepository != null && this.jobRepository.isJobInstanceExists(job.getName(), jobParameters)) {         return getNextJobParametersForExisting(job, jobParameters).     }     if (job.getJobParametersIncrementer() == null) {         return jobParameters.     }     JobParameters nextParameters = new JobParametersBuilder(jobParameters, this.jobExplorer).getNextJobParameters(job).toJobParameters().     return merge(nextParameters, jobParameters). }
false;private;2;11;;private JobParameters getNextJobParametersForExisting(Job job, JobParameters jobParameters) {     JobExecution lastExecution = this.jobRepository.getLastJobExecution(job.getName(), jobParameters).     if (isStoppedOrFailed(lastExecution) && job.isRestartable()) {         JobParameters previousIdentifyingParameters = getGetIdentifying(lastExecution.getJobParameters()).         return merge(previousIdentifyingParameters, jobParameters).     }     return jobParameters. }
false;private;1;4;;private boolean isStoppedOrFailed(JobExecution execution) {     BatchStatus status = (execution != null) ? execution.getStatus() : null.     return (status == BatchStatus.STOPPED || status == BatchStatus.FAILED). }
false;private;1;10;;private JobParameters getGetIdentifying(JobParameters parameters) {     HashMap<String, JobParameter> nonIdentifying = new LinkedHashMap<>(parameters.getParameters().size()).     parameters.getParameters().forEach((key, value) -> {         if (value.isIdentifying()) {             nonIdentifying.put(key, value).         }     }).     return new JobParameters(nonIdentifying). }
false;private;2;6;;private JobParameters merge(JobParameters parameters, JobParameters additionals) {     Map<String, JobParameter> merged = new LinkedHashMap<>().     merged.putAll(parameters.getParameters()).     merged.putAll(additionals.getParameters()).     return new JobParameters(merged). }
