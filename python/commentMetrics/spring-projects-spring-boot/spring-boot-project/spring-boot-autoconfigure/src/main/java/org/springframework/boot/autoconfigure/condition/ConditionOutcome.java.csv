commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Create a new {@link ConditionOutcome} instance for a 'match'.  * @return the {@link ConditionOutcome}  */ ;/**  * Create a new {@link ConditionOutcome} instance for a 'match'.  * @return the {@link ConditionOutcome}  */ public static ConditionOutcome match() {     return match(ConditionMessage.empty()). }
true;public,static;1;3;/**  * Create a new {@link ConditionOutcome} instance for 'match'. For more consistent  * messages consider using {@link #match(ConditionMessage)}.  * @param message the message  * @return the {@link ConditionOutcome}  */ ;/**  * Create a new {@link ConditionOutcome} instance for 'match'. For more consistent  * messages consider using {@link #match(ConditionMessage)}.  * @param message the message  * @return the {@link ConditionOutcome}  */ public static ConditionOutcome match(String message) {     return new ConditionOutcome(true, message). }
true;public,static;1;3;/**  * Create a new {@link ConditionOutcome} instance for 'match'.  * @param message the message  * @return the {@link ConditionOutcome}  */ ;/**  * Create a new {@link ConditionOutcome} instance for 'match'.  * @param message the message  * @return the {@link ConditionOutcome}  */ public static ConditionOutcome match(ConditionMessage message) {     return new ConditionOutcome(true, message). }
true;public,static;1;3;/**  * Create a new {@link ConditionOutcome} instance for 'no match'. For more consistent  * messages consider using {@link #noMatch(ConditionMessage)}.  * @param message the message  * @return the {@link ConditionOutcome}  */ ;/**  * Create a new {@link ConditionOutcome} instance for 'no match'. For more consistent  * messages consider using {@link #noMatch(ConditionMessage)}.  * @param message the message  * @return the {@link ConditionOutcome}  */ public static ConditionOutcome noMatch(String message) {     return new ConditionOutcome(false, message). }
true;public,static;1;3;/**  * Create a new {@link ConditionOutcome} instance for 'no match'.  * @param message the message  * @return the {@link ConditionOutcome}  */ ;/**  * Create a new {@link ConditionOutcome} instance for 'no match'.  * @param message the message  * @return the {@link ConditionOutcome}  */ public static ConditionOutcome noMatch(ConditionMessage message) {     return new ConditionOutcome(false, message). }
true;public;0;3;/**  * Return {@code true} if the outcome was a match.  * @return {@code true} if the outcome matches  */ ;/**  * Return {@code true} if the outcome was a match.  * @return {@code true} if the outcome matches  */ public boolean isMatch() {     return this.match. }
true;public;0;3;/**  * Return an outcome message or {@code null}.  * @return the message or {@code null}  */ ;/**  * Return an outcome message or {@code null}.  * @return the message or {@code null}  */ public String getMessage() {     return this.message.isEmpty() ? null : this.message.toString(). }
true;public;0;3;/**  * Return an outcome message or {@code null}.  * @return the message or {@code null}  */ ;/**  * Return an outcome message or {@code null}.  * @return the message or {@code null}  */ public ConditionMessage getConditionMessage() {     return this.message. }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null) {         return false.     }     if (getClass() == obj.getClass()) {         ConditionOutcome other = (ConditionOutcome) obj.         return (this.match == other.match && ObjectUtils.nullSafeEquals(this.message, other.message)).     }     return super.equals(obj). }
false;public;0;5;;@Override public int hashCode() {     return Boolean.hashCode(this.match) * 31 + ObjectUtils.nullSafeHashCode(this.message). }
false;public;0;4;;@Override public String toString() {     return (this.message != null) ? this.message.toString() : "". }
true;public,static;1;3;/**  * Return the inverse of the specified condition outcome.  * @param outcome the outcome to inverse  * @return the inverse of the condition outcome  * @since 1.3.0  */ ;/**  * Return the inverse of the specified condition outcome.  * @param outcome the outcome to inverse  * @return the inverse of the condition outcome  * @since 1.3.0  */ public static ConditionOutcome inverse(ConditionOutcome outcome) {     return new ConditionOutcome(!outcome.isMatch(), outcome.getConditionMessage()). }
