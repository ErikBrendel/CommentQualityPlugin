commented;modifiers;parameterAmount;loc;comment;code
false;public;2;17;;@Bean @ConditionalOnMissingBean public CassandraMappingContext cassandraMapping(BeanFactory beanFactory, CassandraCustomConversions conversions) throws ClassNotFoundException {     CassandraMappingContext context = new CassandraMappingContext().     List<String> packages = EntityScanPackages.get(beanFactory).getPackageNames().     if (packages.isEmpty() && AutoConfigurationPackages.has(beanFactory)) {         packages = AutoConfigurationPackages.get(beanFactory).     }     if (!packages.isEmpty()) {         context.setInitialEntitySet(CassandraEntityClassScanner.scan(packages)).     }     PropertyMapper.get().from(this.properties::getKeyspaceName).whenHasText().as(this::createSimpleUserTypeResolver).to(context::setUserTypeResolver).     context.setCustomConversions(conversions).     return context. }
false;private;1;3;;private SimpleUserTypeResolver createSimpleUserTypeResolver(String keyspaceName) {     return new SimpleUserTypeResolver(this.cluster, keyspaceName). }
false;public;2;8;;@Bean @ConditionalOnMissingBean public CassandraConverter cassandraConverter(CassandraMappingContext mapping, CassandraCustomConversions conversions) {     MappingCassandraConverter converter = new MappingCassandraConverter(mapping).     converter.setCustomConversions(conversions).     return converter. }
false;public;2;13;;@Bean @ConditionalOnMissingBean(Session.class) public CassandraSessionFactoryBean cassandraSession(Environment environment, CassandraConverter converter) throws Exception {     CassandraSessionFactoryBean session = new CassandraSessionFactoryBean().     session.setCluster(this.cluster).     session.setConverter(converter).     session.setKeyspaceName(this.properties.getKeyspaceName()).     Binder binder = Binder.get(environment).     binder.bind("spring.data.cassandra.schema-action", SchemaAction.class).ifBound(session::setSchemaAction).     return session. }
false;public;2;6;;@Bean @ConditionalOnMissingBean public CassandraTemplate cassandraTemplate(Session session, CassandraConverter converter) throws Exception {     return new CassandraTemplate(session, converter). }
false;public;0;5;;@Bean @ConditionalOnMissingBean public CassandraCustomConversions cassandraCustomConversions() {     return new CassandraCustomConversions(Collections.emptyList()). }
