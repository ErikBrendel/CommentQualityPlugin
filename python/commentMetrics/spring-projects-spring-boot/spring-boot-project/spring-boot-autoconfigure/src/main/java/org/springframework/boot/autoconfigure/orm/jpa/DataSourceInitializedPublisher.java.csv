commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     if (bean instanceof LocalContainerEntityManagerFactoryBean) {         LocalContainerEntityManagerFactoryBean factory = (LocalContainerEntityManagerFactoryBean) bean.         factory.setJpaVendorAdapter(new DataSourceSchemaCreatedPublisher(factory)).     }     return bean. }
false;public;2;21;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     if (bean instanceof DataSource) {         // Normally this will be the right DataSource         this.dataSource = (DataSource) bean.     }     if (bean instanceof JpaProperties) {         this.jpaProperties = (JpaProperties) bean.     }     if (bean instanceof HibernateProperties) {         this.hibernateProperties = (HibernateProperties) bean.     }     if (bean instanceof LocalContainerEntityManagerFactoryBean) {         LocalContainerEntityManagerFactoryBean factory = (LocalContainerEntityManagerFactoryBean) bean.         if (factory.getBootstrapExecutor() == null) {             publishEventIfRequired(factory.getNativeEntityManagerFactory()).         }     }     return bean. }
false;private;1;7;;private void publishEventIfRequired(EntityManagerFactory entityManagerFactory) {     DataSource dataSource = findDataSource(entityManagerFactory).     if (dataSource != null && isInitializingDatabase(dataSource)) {         this.applicationContext.publishEvent(new DataSourceSchemaCreatedEvent(dataSource)).     } }
false;private;1;6;;private DataSource findDataSource(EntityManagerFactory entityManagerFactory) {     Object dataSource = entityManagerFactory.getProperties().get("javax.persistence.nonJtaDataSource").     return (dataSource instanceof DataSource) ? (DataSource) dataSource : this.dataSource. }
false;private;1;14;;private boolean isInitializingDatabase(DataSource dataSource) {     if (this.jpaProperties == null || this.hibernateProperties == null) {         // better safe than sorry         return true.     }     Supplier<String> defaultDdlAuto = () -> (EmbeddedDatabaseConnection.isEmbedded(dataSource) ? "create-drop" : "none").     Map<String, Object> hibernate = this.hibernateProperties.determineHibernateProperties(this.jpaProperties.getProperties(), new HibernateSettings().ddlAuto(defaultDdlAuto)).     if (hibernate.containsKey("hibernate.hbm2ddl.auto")) {         return true.     }     return false. }
false;public;2;13;;@Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {     if (!registry.containsBeanDefinition(BEAN_NAME)) {         GenericBeanDefinition beanDefinition = new GenericBeanDefinition().         beanDefinition.setBeanClass(DataSourceInitializedPublisher.class).         beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).         // We don't need this one to be post processed otherwise it can cause a         // cascade of bean instantiation that we would rather avoid.         beanDefinition.setSynthetic(true).         registry.registerBeanDefinition(BEAN_NAME, beanDefinition).     } }
false;public;0;4;;@Override public PersistenceProvider getPersistenceProvider() {     return this.delegate.getPersistenceProvider(). }
false;public;0;4;;@Override public String getPersistenceProviderRootPackage() {     return this.delegate.getPersistenceProviderRootPackage(). }
false;public;1;4;;@Override public Map<String, ?> getJpaPropertyMap(PersistenceUnitInfo pui) {     return this.delegate.getJpaPropertyMap(pui). }
false;public;0;4;;@Override public Map<String, ?> getJpaPropertyMap() {     return this.delegate.getJpaPropertyMap(). }
false;public;0;4;;@Override public JpaDialect getJpaDialect() {     return this.delegate.getJpaDialect(). }
false;public;0;4;;@Override public Class<? extends EntityManagerFactory> getEntityManagerFactoryInterface() {     return this.delegate.getEntityManagerFactoryInterface(). }
false;public;0;4;;@Override public Class<? extends EntityManager> getEntityManagerInterface() {     return this.delegate.getEntityManagerInterface(). }
false;public;1;9;;@Override public void postProcessEntityManagerFactory(EntityManagerFactory emf) {     this.delegate.postProcessEntityManagerFactory(emf).     AsyncTaskExecutor bootstrapExecutor = this.factory.getBootstrapExecutor().     if (bootstrapExecutor != null) {         bootstrapExecutor.execute(() -> DataSourceInitializedPublisher.this.publishEventIfRequired(emf)).     } }
