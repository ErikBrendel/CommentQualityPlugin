commented;modifiers;parameterAmount;loc;comment;code
false;private;1;4;;private boolean isInfoOrDebug(LogLevel logLevelForReport) {     return LogLevel.INFO.equals(logLevelForReport) || LogLevel.DEBUG.equals(logLevelForReport). }
false;public;0;3;;public LogLevel getLogLevelForReport() {     return this.logLevelForReport. }
false;public;1;11;;@Override public void initialize(ConfigurableApplicationContext applicationContext) {     this.applicationContext = applicationContext.     applicationContext.addApplicationListener(new ConditionEvaluationReportListener()).     if (applicationContext instanceof GenericApplicationContext) {         // Get the report early in case the context fails to load         this.report = ConditionEvaluationReport.get(this.applicationContext.getBeanFactory()).     } }
false;protected;1;14;;protected void onApplicationEvent(ApplicationEvent event) {     ConfigurableApplicationContext initializerApplicationContext = this.applicationContext.     if (event instanceof ContextRefreshedEvent) {         if (((ApplicationContextEvent) event).getApplicationContext() == initializerApplicationContext) {             logAutoConfigurationReport().         }     } else if (event instanceof ApplicationFailedEvent && ((ApplicationFailedEvent) event).getApplicationContext() == initializerApplicationContext) {         logAutoConfigurationReport(true).     } }
false;private;0;3;;private void logAutoConfigurationReport() {     logAutoConfigurationReport(!this.applicationContext.isActive()). }
false;public;1;29;;public void logAutoConfigurationReport(boolean isCrashReport) {     if (this.report == null) {         if (this.applicationContext == null) {             this.logger.info("Unable to provide the conditions report " + "due to missing ApplicationContext").             return.         }         this.report = ConditionEvaluationReport.get(this.applicationContext.getBeanFactory()).     }     if (!this.report.getConditionAndOutcomesBySource().isEmpty()) {         if (this.getLogLevelForReport().equals(LogLevel.INFO)) {             if (this.logger.isInfoEnabled()) {                 this.logger.info(new ConditionEvaluationReportMessage(this.report)).             } else if (isCrashReport) {                 logMessage("info").             }         } else {             if (this.logger.isDebugEnabled()) {                 this.logger.debug(new ConditionEvaluationReportMessage(this.report)).             } else if (isCrashReport) {                 logMessage("debug").             }         }     } }
false;private;1;6;;private void logMessage(String logLevel) {     this.logger.info(String.format("%n%nError starting ApplicationContext. To display the " + "conditions report re-run your application with '" + logLevel + "' enabled.")). }
false;public;0;4;;@Override public int getOrder() {     return Ordered.LOWEST_PRECEDENCE. }
false;public;1;9;;@Override public boolean supportsEventType(ResolvableType resolvableType) {     Class<?> type = resolvableType.getRawClass().     if (type == null) {         return false.     }     return ContextRefreshedEvent.class.isAssignableFrom(type) || ApplicationFailedEvent.class.isAssignableFrom(type). }
false;public;1;4;;@Override public boolean supportsSourceType(Class<?> sourceType) {     return true. }
false;public;1;4;;@Override public void onApplicationEvent(ApplicationEvent event) {     ConditionEvaluationReportLoggingListener.this.onApplicationEvent(event). }
