commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set if unique runtime object names should be ensured.  * @param ensureUniqueRuntimeObjectNames {@code true} if unique names should ensured.  */ ;/**  * Set if unique runtime object names should be ensured.  * @param ensureUniqueRuntimeObjectNames {@code true} if unique names should ensured.  */ public void setEnsureUniqueRuntimeObjectNames(boolean ensureUniqueRuntimeObjectNames) {     this.ensureUniqueRuntimeObjectNames = ensureUniqueRuntimeObjectNames. }
false;public;2;15;;@Override public ObjectName getObjectName(Object managedBean, String beanKey) throws MalformedObjectNameException {     ObjectName name = super.getObjectName(managedBean, beanKey).     Hashtable<String, String> properties = new Hashtable<>().     properties.putAll(name.getKeyPropertyList()).     if (this.ensureUniqueRuntimeObjectNames) {         properties.put("identity", ObjectUtils.getIdentityHexString(managedBean)).     } else if (parentContextContainsSameBean(this.applicationContext, beanKey)) {         properties.put("context", ObjectUtils.getIdentityHexString(this.applicationContext)).     }     return ObjectNameManager.getInstance(name.getDomain(), properties). }
false;public;1;5;;@Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {     this.applicationContext = applicationContext. }
false;private;2;13;;private boolean parentContextContainsSameBean(ApplicationContext context, String beanKey) {     if (context.getParent() == null) {         return false.     }     try {         this.applicationContext.getParent().getBean(beanKey).         return true.     } catch (BeansException ex) {         return parentContextContainsSameBean(context.getParent(), beanKey).     } }
