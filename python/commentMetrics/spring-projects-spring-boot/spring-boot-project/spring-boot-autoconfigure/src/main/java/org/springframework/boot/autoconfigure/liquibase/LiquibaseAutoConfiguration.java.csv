commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Bean public LiquibaseSchemaManagementProvider liquibaseDefaultDdlModeProvider(ObjectProvider<SpringLiquibase> liquibases) {     return new LiquibaseSchemaManagementProvider(liquibases). }
false;public;0;11;;@PostConstruct public void checkChangelogExists() {     if (this.properties.isCheckChangeLogLocation()) {         Resource resource = this.resourceLoader.getResource(this.properties.getChangeLog()).         Assert.state(resource.exists(), () -> "Cannot find changelog location: " + resource + " (please add changelog or check your Liquibase " + "configuration)").     } }
false;public;3;24;;@Bean public SpringLiquibase liquibase(DataSourceProperties dataSourceProperties, ObjectProvider<DataSource> dataSource, @LiquibaseDataSource ObjectProvider<DataSource> liquibaseDataSource) {     SpringLiquibase liquibase = createSpringLiquibase(liquibaseDataSource.getIfAvailable(), dataSource.getIfUnique(), dataSourceProperties).     liquibase.setChangeLog(this.properties.getChangeLog()).     liquibase.setContexts(this.properties.getContexts()).     liquibase.setDefaultSchema(this.properties.getDefaultSchema()).     liquibase.setLiquibaseSchema(this.properties.getLiquibaseSchema()).     liquibase.setLiquibaseTablespace(this.properties.getLiquibaseTablespace()).     liquibase.setDatabaseChangeLogTable(this.properties.getDatabaseChangeLogTable()).     liquibase.setDatabaseChangeLogLockTable(this.properties.getDatabaseChangeLogLockTable()).     liquibase.setDropFirst(this.properties.isDropFirst()).     liquibase.setShouldRun(this.properties.isEnabled()).     liquibase.setLabels(this.properties.getLabels()).     liquibase.setChangeLogParameters(this.properties.getParameters()).     liquibase.setRollbackFile(this.properties.getRollbackFile()).     liquibase.setTestRollbackOnUpdate(this.properties.isTestRollbackOnUpdate()).     return liquibase. }
false;private;3;13;;private SpringLiquibase createSpringLiquibase(DataSource liquibaseDatasource, DataSource dataSource, DataSourceProperties dataSourceProperties) {     DataSource liquibaseDataSource = getDataSource(liquibaseDatasource, dataSource).     if (liquibaseDataSource != null) {         SpringLiquibase liquibase = new SpringLiquibase().         liquibase.setDataSource(liquibaseDataSource).         return liquibase.     }     SpringLiquibase liquibase = new DataSourceClosingSpringLiquibase().     liquibase.setDataSource(createNewDataSource(dataSourceProperties)).     return liquibase. }
false;private;2;10;;private DataSource getDataSource(DataSource liquibaseDataSource, DataSource dataSource) {     if (liquibaseDataSource != null) {         return liquibaseDataSource.     }     if (this.properties.getUrl() == null && this.properties.getUser() == null) {         return dataSource.     }     return null. }
false;private;1;11;;private DataSource createNewDataSource(DataSourceProperties dataSourceProperties) {     String url = getProperty(this.properties::getUrl, dataSourceProperties::getUrl).     String user = getProperty(this.properties::getUser, dataSourceProperties::getUsername).     String password = getProperty(this.properties::getPassword, dataSourceProperties::getPassword).     return DataSourceBuilder.create().url(url).username(user).password(password).build(). }
false;private;2;5;;private String getProperty(Supplier<String> property, Supplier<String> defaultValue) {     String value = property.get().     return (value != null) ? value : defaultValue.get(). }
