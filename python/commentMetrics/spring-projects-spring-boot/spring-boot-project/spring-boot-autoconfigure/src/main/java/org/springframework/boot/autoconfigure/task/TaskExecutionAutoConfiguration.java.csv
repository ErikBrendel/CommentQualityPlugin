commented;modifiers;parameterAmount;loc;comment;code
false;public;3;20;;@Bean @ConditionalOnMissingBean public TaskExecutorBuilder taskExecutorBuilder(TaskExecutionProperties properties, ObjectProvider<TaskExecutorCustomizer> taskExecutorCustomizers, ObjectProvider<TaskDecorator> taskDecorator) {     TaskExecutionProperties.Pool pool = properties.getPool().     TaskExecutorBuilder builder = new TaskExecutorBuilder().     builder = builder.queueCapacity(pool.getQueueCapacity()).     builder = builder.corePoolSize(pool.getCoreSize()).     builder = builder.maxPoolSize(pool.getMaxSize()).     builder = builder.allowCoreThreadTimeOut(pool.isAllowCoreThreadTimeout()).     builder = builder.keepAlive(pool.getKeepAlive()).     Shutdown shutdown = properties.getShutdown().     builder = builder.awaitTermination(shutdown.isAwaitTermination()).     builder = builder.awaitTerminationPeriod(shutdown.getAwaitTerminationPeriod()).     builder = builder.threadNamePrefix(properties.getThreadNamePrefix()).     builder = builder.customizers(taskExecutorCustomizers).     builder = builder.taskDecorator(taskDecorator.getIfUnique()).     return builder. }
false;public;1;7;;@Lazy @Bean(name = { APPLICATION_TASK_EXECUTOR_BEAN_NAME, AsyncAnnotationBeanPostProcessor.DEFAULT_TASK_EXECUTOR_BEAN_NAME }) @ConditionalOnMissingBean(Executor.class) public ThreadPoolTaskExecutor applicationTaskExecutor(TaskExecutorBuilder builder) {     return builder.build(). }
