# id;timestamp;commentText;codeText;commentWords;codeWords
DataSourceProperties -> public DataSourceBuilder<?> initializeDataSourceBuilder();1507173536;Initialize a {@link DataSourceBuilder} with the state of this instance._@return a {@link DataSourceBuilder} initialized with the customizations defined on_this instance;public DataSourceBuilder<?> initializeDataSourceBuilder() {_		return DataSourceBuilder.create(getClassLoader()).type(getType())_				.driverClassName(determineDriverClassName()).url(determineUrl())_				.username(determineUsername()).password(determinePassword())__	};initialize,a,link,data,source,builder,with,the,state,of,this,instance,return,a,link,data,source,builder,initialized,with,the,customizations,defined,on,this,instance;public,data,source,builder,initialize,data,source,builder,return,data,source,builder,create,get,class,loader,type,get,type,driver,class,name,determine,driver,class,name,url,determine,url,username,determine,username,password,determine,password
DataSourceProperties -> public DataSourceBuilder<?> initializeDataSourceBuilder();1508247426;Initialize a {@link DataSourceBuilder} with the state of this instance._@return a {@link DataSourceBuilder} initialized with the customizations defined on_this instance;public DataSourceBuilder<?> initializeDataSourceBuilder() {_		return DataSourceBuilder.create(getClassLoader()).type(getType())_				.driverClassName(determineDriverClassName()).url(determineUrl())_				.username(determineUsername()).password(determinePassword())__	};initialize,a,link,data,source,builder,with,the,state,of,this,instance,return,a,link,data,source,builder,initialized,with,the,customizations,defined,on,this,instance;public,data,source,builder,initialize,data,source,builder,return,data,source,builder,create,get,class,loader,type,get,type,driver,class,name,determine,driver,class,name,url,determine,url,username,determine,username,password,determine,password
DataSourceProperties -> public DataSourceBuilder<?> initializeDataSourceBuilder();1509090637;Initialize a {@link DataSourceBuilder} with the state of this instance._@return a {@link DataSourceBuilder} initialized with the customizations defined on_this instance;public DataSourceBuilder<?> initializeDataSourceBuilder() {_		return DataSourceBuilder.create(getClassLoader()).type(getType())_				.driverClassName(determineDriverClassName()).url(determineUrl())_				.username(determineUsername()).password(determinePassword())__	};initialize,a,link,data,source,builder,with,the,state,of,this,instance,return,a,link,data,source,builder,initialized,with,the,customizations,defined,on,this,instance;public,data,source,builder,initialize,data,source,builder,return,data,source,builder,create,get,class,loader,type,get,type,driver,class,name,determine,driver,class,name,url,determine,url,username,determine,username,password,determine,password
DataSourceProperties -> public DataSourceBuilder<?> initializeDataSourceBuilder();1511221881;Initialize a {@link DataSourceBuilder} with the state of this instance._@return a {@link DataSourceBuilder} initialized with the customizations defined on_this instance;public DataSourceBuilder<?> initializeDataSourceBuilder() {_		return DataSourceBuilder.create(getClassLoader()).type(getType())_				.driverClassName(determineDriverClassName()).url(determineUrl())_				.username(determineUsername()).password(determinePassword())__	};initialize,a,link,data,source,builder,with,the,state,of,this,instance,return,a,link,data,source,builder,initialized,with,the,customizations,defined,on,this,instance;public,data,source,builder,initialize,data,source,builder,return,data,source,builder,create,get,class,loader,type,get,type,driver,class,name,determine,driver,class,name,url,determine,url,username,determine,username,password,determine,password
DataSourceProperties -> public DataSourceBuilder<?> initializeDataSourceBuilder();1516844492;Initialize a {@link DataSourceBuilder} with the state of this instance._@return a {@link DataSourceBuilder} initialized with the customizations defined on_this instance;public DataSourceBuilder<?> initializeDataSourceBuilder() {_		return DataSourceBuilder.create(getClassLoader()).type(getType())_				.driverClassName(determineDriverClassName()).url(determineUrl())_				.username(determineUsername()).password(determinePassword())__	};initialize,a,link,data,source,builder,with,the,state,of,this,instance,return,a,link,data,source,builder,initialized,with,the,customizations,defined,on,this,instance;public,data,source,builder,initialize,data,source,builder,return,data,source,builder,create,get,class,loader,type,get,type,driver,class,name,determine,driver,class,name,url,determine,url,username,determine,username,password,determine,password
DataSourceProperties -> public DataSourceBuilder<?> initializeDataSourceBuilder();1516855380;Initialize a {@link DataSourceBuilder} with the state of this instance._@return a {@link DataSourceBuilder} initialized with the customizations defined on_this instance;public DataSourceBuilder<?> initializeDataSourceBuilder() {_		return DataSourceBuilder.create(getClassLoader()).type(getType())_				.driverClassName(determineDriverClassName()).url(determineUrl())_				.username(determineUsername()).password(determinePassword())__	};initialize,a,link,data,source,builder,with,the,state,of,this,instance,return,a,link,data,source,builder,initialized,with,the,customizations,defined,on,this,instance;public,data,source,builder,initialize,data,source,builder,return,data,source,builder,create,get,class,loader,type,get,type,driver,class,name,determine,driver,class,name,url,determine,url,username,determine,username,password,determine,password
DataSourceProperties -> public DataSourceBuilder<?> initializeDataSourceBuilder();1518430310;Initialize a {@link DataSourceBuilder} with the state of this instance._@return a {@link DataSourceBuilder} initialized with the customizations defined on_this instance;public DataSourceBuilder<?> initializeDataSourceBuilder() {_		return DataSourceBuilder.create(getClassLoader()).type(getType())_				.driverClassName(determineDriverClassName()).url(determineUrl())_				.username(determineUsername()).password(determinePassword())__	};initialize,a,link,data,source,builder,with,the,state,of,this,instance,return,a,link,data,source,builder,initialized,with,the,customizations,defined,on,this,instance;public,data,source,builder,initialize,data,source,builder,return,data,source,builder,create,get,class,loader,type,get,type,driver,class,name,determine,driver,class,name,url,determine,url,username,determine,username,password,determine,password
DataSourceProperties -> public DataSourceBuilder<?> initializeDataSourceBuilder();1518458586;Initialize a {@link DataSourceBuilder} with the state of this instance._@return a {@link DataSourceBuilder} initialized with the customizations defined on_this instance;public DataSourceBuilder<?> initializeDataSourceBuilder() {_		return DataSourceBuilder.create(getClassLoader()).type(getType())_				.driverClassName(determineDriverClassName()).url(determineUrl())_				.username(determineUsername()).password(determinePassword())__	};initialize,a,link,data,source,builder,with,the,state,of,this,instance,return,a,link,data,source,builder,initialized,with,the,customizations,defined,on,this,instance;public,data,source,builder,initialize,data,source,builder,return,data,source,builder,create,get,class,loader,type,get,type,driver,class,name,determine,driver,class,name,url,determine,url,username,determine,username,password,determine,password
DataSourceProperties -> public DataSourceBuilder<?> initializeDataSourceBuilder();1519380148;Initialize a {@link DataSourceBuilder} with the state of this instance._@return a {@link DataSourceBuilder} initialized with the customizations defined on_this instance;public DataSourceBuilder<?> initializeDataSourceBuilder() {_		return DataSourceBuilder.create(getClassLoader()).type(getType())_				.driverClassName(determineDriverClassName()).url(determineUrl())_				.username(determineUsername()).password(determinePassword())__	};initialize,a,link,data,source,builder,with,the,state,of,this,instance,return,a,link,data,source,builder,initialized,with,the,customizations,defined,on,this,instance;public,data,source,builder,initialize,data,source,builder,return,data,source,builder,create,get,class,loader,type,get,type,driver,class,name,determine,driver,class,name,url,determine,url,username,determine,username,password,determine,password
DataSourceProperties -> public DataSourceBuilder<?> initializeDataSourceBuilder();1525340853;Initialize a {@link DataSourceBuilder} with the state of this instance._@return a {@link DataSourceBuilder} initialized with the customizations defined on_this instance;public DataSourceBuilder<?> initializeDataSourceBuilder() {_		return DataSourceBuilder.create(getClassLoader()).type(getType())_				.driverClassName(determineDriverClassName()).url(determineUrl())_				.username(determineUsername()).password(determinePassword())__	};initialize,a,link,data,source,builder,with,the,state,of,this,instance,return,a,link,data,source,builder,initialized,with,the,customizations,defined,on,this,instance;public,data,source,builder,initialize,data,source,builder,return,data,source,builder,create,get,class,loader,type,get,type,driver,class,name,determine,driver,class,name,url,determine,url,username,determine,username,password,determine,password
DataSourceProperties -> public DataSourceBuilder<?> initializeDataSourceBuilder();1525416882;Initialize a {@link DataSourceBuilder} with the state of this instance._@return a {@link DataSourceBuilder} initialized with the customizations defined on_this instance;public DataSourceBuilder<?> initializeDataSourceBuilder() {_		return DataSourceBuilder.create(getClassLoader()).type(getType())_				.driverClassName(determineDriverClassName()).url(determineUrl())_				.username(determineUsername()).password(determinePassword())__	};initialize,a,link,data,source,builder,with,the,state,of,this,instance,return,a,link,data,source,builder,initialized,with,the,customizations,defined,on,this,instance;public,data,source,builder,initialize,data,source,builder,return,data,source,builder,create,get,class,loader,type,get,type,driver,class,name,determine,driver,class,name,url,determine,url,username,determine,username,password,determine,password
DataSourceProperties -> public DataSourceBuilder<?> initializeDataSourceBuilder();1532738143;Initialize a {@link DataSourceBuilder} with the state of this instance._@return a {@link DataSourceBuilder} initialized with the customizations defined on_this instance;public DataSourceBuilder<?> initializeDataSourceBuilder() {_		return DataSourceBuilder.create(getClassLoader()).type(getType())_				.driverClassName(determineDriverClassName()).url(determineUrl())_				.username(determineUsername()).password(determinePassword())__	};initialize,a,link,data,source,builder,with,the,state,of,this,instance,return,a,link,data,source,builder,initialized,with,the,customizations,defined,on,this,instance;public,data,source,builder,initialize,data,source,builder,return,data,source,builder,create,get,class,loader,type,get,type,driver,class,name,determine,driver,class,name,url,determine,url,username,determine,username,password,determine,password
DataSourceProperties -> public String determineDriverClassName();1507173536;Determine the driver to use based on this configuration and the environment._@return the driver to use_@since 1.4.0;public String determineDriverClassName() {_		if (StringUtils.hasText(this.driverClassName)) {_			Assert.state(driverClassIsLoadable(),_					"Cannot load driver class: " + this.driverClassName)__			return this.driverClassName__		}_		String driverClassName = null___		if (StringUtils.hasText(this.url)) {_			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName()__		}__		if (!StringUtils.hasText(driverClassName)) {_			driverClassName = this.embeddedDatabaseConnection.getDriverClassName()__		}__		if (!StringUtils.hasText(driverClassName)) {_			throw new DataSourceBeanCreationException(this.embeddedDatabaseConnection,_					this.environment, "driver class")__		}_		return driverClassName__	};determine,the,driver,to,use,based,on,this,configuration,and,the,environment,return,the,driver,to,use,since,1,4,0;public,string,determine,driver,class,name,if,string,utils,has,text,this,driver,class,name,assert,state,driver,class,is,loadable,cannot,load,driver,class,this,driver,class,name,return,this,driver,class,name,string,driver,class,name,null,if,string,utils,has,text,this,url,driver,class,name,database,driver,from,jdbc,url,this,url,get,driver,class,name,if,string,utils,has,text,driver,class,name,driver,class,name,this,embedded,database,connection,get,driver,class,name,if,string,utils,has,text,driver,class,name,throw,new,data,source,bean,creation,exception,this,embedded,database,connection,this,environment,driver,class,return,driver,class,name
DataSourceProperties -> public String determineDriverClassName();1508247426;Determine the driver to use based on this configuration and the environment._@return the driver to use_@since 1.4.0;public String determineDriverClassName() {_		if (StringUtils.hasText(this.driverClassName)) {_			Assert.state(driverClassIsLoadable(),_					() -> "Cannot load driver class: " + this.driverClassName)__			return this.driverClassName__		}_		String driverClassName = null___		if (StringUtils.hasText(this.url)) {_			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName()__		}__		if (!StringUtils.hasText(driverClassName)) {_			driverClassName = this.embeddedDatabaseConnection.getDriverClassName()__		}__		if (!StringUtils.hasText(driverClassName)) {_			throw new DataSourceBeanCreationException(this.embeddedDatabaseConnection,_					this.environment, "driver class")__		}_		return driverClassName__	};determine,the,driver,to,use,based,on,this,configuration,and,the,environment,return,the,driver,to,use,since,1,4,0;public,string,determine,driver,class,name,if,string,utils,has,text,this,driver,class,name,assert,state,driver,class,is,loadable,cannot,load,driver,class,this,driver,class,name,return,this,driver,class,name,string,driver,class,name,null,if,string,utils,has,text,this,url,driver,class,name,database,driver,from,jdbc,url,this,url,get,driver,class,name,if,string,utils,has,text,driver,class,name,driver,class,name,this,embedded,database,connection,get,driver,class,name,if,string,utils,has,text,driver,class,name,throw,new,data,source,bean,creation,exception,this,embedded,database,connection,this,environment,driver,class,return,driver,class,name
DataSourceProperties -> public String determineDriverClassName();1509090637;Determine the driver to use based on this configuration and the environment._@return the driver to use_@since 1.4.0;public String determineDriverClassName() {_		if (StringUtils.hasText(this.driverClassName)) {_			Assert.state(driverClassIsLoadable(),_					() -> "Cannot load driver class: " + this.driverClassName)__			return this.driverClassName__		}_		String driverClassName = null___		if (StringUtils.hasText(this.url)) {_			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName()__		}__		if (!StringUtils.hasText(driverClassName)) {_			driverClassName = this.embeddedDatabaseConnection.getDriverClassName()__		}__		if (!StringUtils.hasText(driverClassName)) {_			throw new DataSourceBeanCreationException(this.embeddedDatabaseConnection,_					this.environment, "driver class")__		}_		return driverClassName__	};determine,the,driver,to,use,based,on,this,configuration,and,the,environment,return,the,driver,to,use,since,1,4,0;public,string,determine,driver,class,name,if,string,utils,has,text,this,driver,class,name,assert,state,driver,class,is,loadable,cannot,load,driver,class,this,driver,class,name,return,this,driver,class,name,string,driver,class,name,null,if,string,utils,has,text,this,url,driver,class,name,database,driver,from,jdbc,url,this,url,get,driver,class,name,if,string,utils,has,text,driver,class,name,driver,class,name,this,embedded,database,connection,get,driver,class,name,if,string,utils,has,text,driver,class,name,throw,new,data,source,bean,creation,exception,this,embedded,database,connection,this,environment,driver,class,return,driver,class,name
DataSourceProperties -> public String determineDriverClassName();1511221881;Determine the driver to use based on this configuration and the environment._@return the driver to use_@since 1.4.0;public String determineDriverClassName() {_		if (StringUtils.hasText(this.driverClassName)) {_			Assert.state(driverClassIsLoadable(),_					() -> "Cannot load driver class: " + this.driverClassName)__			return this.driverClassName__		}_		String driverClassName = null___		if (StringUtils.hasText(this.url)) {_			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName()__		}__		if (!StringUtils.hasText(driverClassName)) {_			driverClassName = this.embeddedDatabaseConnection.getDriverClassName()__		}__		if (!StringUtils.hasText(driverClassName)) {_			throw new DataSourceBeanCreationException(this.embeddedDatabaseConnection,_					this.environment, "driver class")__		}_		return driverClassName__	};determine,the,driver,to,use,based,on,this,configuration,and,the,environment,return,the,driver,to,use,since,1,4,0;public,string,determine,driver,class,name,if,string,utils,has,text,this,driver,class,name,assert,state,driver,class,is,loadable,cannot,load,driver,class,this,driver,class,name,return,this,driver,class,name,string,driver,class,name,null,if,string,utils,has,text,this,url,driver,class,name,database,driver,from,jdbc,url,this,url,get,driver,class,name,if,string,utils,has,text,driver,class,name,driver,class,name,this,embedded,database,connection,get,driver,class,name,if,string,utils,has,text,driver,class,name,throw,new,data,source,bean,creation,exception,this,embedded,database,connection,this,environment,driver,class,return,driver,class,name
DataSourceProperties -> public String determineDriverClassName();1516844492;Determine the driver to use based on this configuration and the environment._@return the driver to use_@since 1.4.0;public String determineDriverClassName() {_		if (StringUtils.hasText(this.driverClassName)) {_			Assert.state(driverClassIsLoadable(),_					() -> "Cannot load driver class: " + this.driverClassName)__			return this.driverClassName__		}_		String driverClassName = null___		if (StringUtils.hasText(this.url)) {_			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName()__		}__		if (!StringUtils.hasText(driverClassName)) {_			driverClassName = this.embeddedDatabaseConnection.getDriverClassName()__		}__		if (!StringUtils.hasText(driverClassName)) {_			throw new DataSourceBeanCreationException(this.embeddedDatabaseConnection,_					this.environment, "driver class")__		}_		return driverClassName__	};determine,the,driver,to,use,based,on,this,configuration,and,the,environment,return,the,driver,to,use,since,1,4,0;public,string,determine,driver,class,name,if,string,utils,has,text,this,driver,class,name,assert,state,driver,class,is,loadable,cannot,load,driver,class,this,driver,class,name,return,this,driver,class,name,string,driver,class,name,null,if,string,utils,has,text,this,url,driver,class,name,database,driver,from,jdbc,url,this,url,get,driver,class,name,if,string,utils,has,text,driver,class,name,driver,class,name,this,embedded,database,connection,get,driver,class,name,if,string,utils,has,text,driver,class,name,throw,new,data,source,bean,creation,exception,this,embedded,database,connection,this,environment,driver,class,return,driver,class,name
DataSourceProperties -> public String determineDriverClassName();1516855380;Determine the driver to use based on this configuration and the environment._@return the driver to use_@since 1.4.0;public String determineDriverClassName() {_		if (StringUtils.hasText(this.driverClassName)) {_			Assert.state(driverClassIsLoadable(),_					() -> "Cannot load driver class: " + this.driverClassName)__			return this.driverClassName__		}_		String driverClassName = null__		if (StringUtils.hasText(this.url)) {_			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			driverClassName = this.embeddedDatabaseConnection.getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			throw new DataSourceBeanCreationException(this.embeddedDatabaseConnection,_					this.environment, "driver class")__		}_		return driverClassName__	};determine,the,driver,to,use,based,on,this,configuration,and,the,environment,return,the,driver,to,use,since,1,4,0;public,string,determine,driver,class,name,if,string,utils,has,text,this,driver,class,name,assert,state,driver,class,is,loadable,cannot,load,driver,class,this,driver,class,name,return,this,driver,class,name,string,driver,class,name,null,if,string,utils,has,text,this,url,driver,class,name,database,driver,from,jdbc,url,this,url,get,driver,class,name,if,string,utils,has,text,driver,class,name,driver,class,name,this,embedded,database,connection,get,driver,class,name,if,string,utils,has,text,driver,class,name,throw,new,data,source,bean,creation,exception,this,embedded,database,connection,this,environment,driver,class,return,driver,class,name
DataSourceProperties -> public String determineDriverClassName();1518430310;Determine the driver to use based on this configuration and the environment._@return the driver to use_@since 1.4.0;public String determineDriverClassName() {_		if (StringUtils.hasText(this.driverClassName)) {_			Assert.state(driverClassIsLoadable(),_					() -> "Cannot load driver class: " + this.driverClassName)__			return this.driverClassName__		}_		String driverClassName = null__		if (StringUtils.hasText(this.url)) {_			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			driverClassName = this.embeddedDatabaseConnection.getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			throw new DataSourceBeanCreationException(_					"Failed to determine a suitable driver class",_					this.embeddedDatabaseConnection)__		}_		return driverClassName__	};determine,the,driver,to,use,based,on,this,configuration,and,the,environment,return,the,driver,to,use,since,1,4,0;public,string,determine,driver,class,name,if,string,utils,has,text,this,driver,class,name,assert,state,driver,class,is,loadable,cannot,load,driver,class,this,driver,class,name,return,this,driver,class,name,string,driver,class,name,null,if,string,utils,has,text,this,url,driver,class,name,database,driver,from,jdbc,url,this,url,get,driver,class,name,if,string,utils,has,text,driver,class,name,driver,class,name,this,embedded,database,connection,get,driver,class,name,if,string,utils,has,text,driver,class,name,throw,new,data,source,bean,creation,exception,failed,to,determine,a,suitable,driver,class,this,embedded,database,connection,return,driver,class,name
DataSourceProperties -> public String determineDriverClassName();1518458586;Determine the driver to use based on this configuration and the environment._@return the driver to use_@since 1.4.0;public String determineDriverClassName() {_		if (StringUtils.hasText(this.driverClassName)) {_			Assert.state(driverClassIsLoadable(),_					() -> "Cannot load driver class: " + this.driverClassName)__			return this.driverClassName__		}_		String driverClassName = null__		if (StringUtils.hasText(this.url)) {_			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			driverClassName = this.embeddedDatabaseConnection.getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			throw new DataSourceBeanCreationException(_					"Failed to determine a suitable driver class",_					this.embeddedDatabaseConnection)__		}_		return driverClassName__	};determine,the,driver,to,use,based,on,this,configuration,and,the,environment,return,the,driver,to,use,since,1,4,0;public,string,determine,driver,class,name,if,string,utils,has,text,this,driver,class,name,assert,state,driver,class,is,loadable,cannot,load,driver,class,this,driver,class,name,return,this,driver,class,name,string,driver,class,name,null,if,string,utils,has,text,this,url,driver,class,name,database,driver,from,jdbc,url,this,url,get,driver,class,name,if,string,utils,has,text,driver,class,name,driver,class,name,this,embedded,database,connection,get,driver,class,name,if,string,utils,has,text,driver,class,name,throw,new,data,source,bean,creation,exception,failed,to,determine,a,suitable,driver,class,this,embedded,database,connection,return,driver,class,name
DataSourceProperties -> public String determineDriverClassName();1519380148;Determine the driver to use based on this configuration and the environment._@return the driver to use_@since 1.4.0;public String determineDriverClassName() {_		if (StringUtils.hasText(this.driverClassName)) {_			Assert.state(driverClassIsLoadable(),_					() -> "Cannot load driver class: " + this.driverClassName)__			return this.driverClassName__		}_		String driverClassName = null__		if (StringUtils.hasText(this.url)) {_			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			driverClassName = this.embeddedDatabaseConnection.getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			throw new DataSourceBeanCreationException(_					"Failed to determine a suitable driver class",_					this.embeddedDatabaseConnection)__		}_		return driverClassName__	};determine,the,driver,to,use,based,on,this,configuration,and,the,environment,return,the,driver,to,use,since,1,4,0;public,string,determine,driver,class,name,if,string,utils,has,text,this,driver,class,name,assert,state,driver,class,is,loadable,cannot,load,driver,class,this,driver,class,name,return,this,driver,class,name,string,driver,class,name,null,if,string,utils,has,text,this,url,driver,class,name,database,driver,from,jdbc,url,this,url,get,driver,class,name,if,string,utils,has,text,driver,class,name,driver,class,name,this,embedded,database,connection,get,driver,class,name,if,string,utils,has,text,driver,class,name,throw,new,data,source,bean,creation,exception,failed,to,determine,a,suitable,driver,class,this,embedded,database,connection,return,driver,class,name
DataSourceProperties -> public String determineDriverClassName();1525340853;Determine the driver to use based on this configuration and the environment._@return the driver to use_@since 1.4.0;public String determineDriverClassName() {_		if (StringUtils.hasText(this.driverClassName)) {_			Assert.state(driverClassIsLoadable(),_					() -> "Cannot load driver class: " + this.driverClassName)__			return this.driverClassName__		}_		String driverClassName = null__		if (StringUtils.hasText(this.url)) {_			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			driverClassName = this.embeddedDatabaseConnection.getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			throw new DataSourceBeanCreationException(_					"Failed to determine a suitable driver class",_					this, this.embeddedDatabaseConnection)__		}_		return driverClassName__	};determine,the,driver,to,use,based,on,this,configuration,and,the,environment,return,the,driver,to,use,since,1,4,0;public,string,determine,driver,class,name,if,string,utils,has,text,this,driver,class,name,assert,state,driver,class,is,loadable,cannot,load,driver,class,this,driver,class,name,return,this,driver,class,name,string,driver,class,name,null,if,string,utils,has,text,this,url,driver,class,name,database,driver,from,jdbc,url,this,url,get,driver,class,name,if,string,utils,has,text,driver,class,name,driver,class,name,this,embedded,database,connection,get,driver,class,name,if,string,utils,has,text,driver,class,name,throw,new,data,source,bean,creation,exception,failed,to,determine,a,suitable,driver,class,this,this,embedded,database,connection,return,driver,class,name
DataSourceProperties -> public String determineDriverClassName();1525416882;Determine the driver to use based on this configuration and the environment._@return the driver to use_@since 1.4.0;public String determineDriverClassName() {_		if (StringUtils.hasText(this.driverClassName)) {_			Assert.state(driverClassIsLoadable(),_					() -> "Cannot load driver class: " + this.driverClassName)__			return this.driverClassName__		}_		String driverClassName = null__		if (StringUtils.hasText(this.url)) {_			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			driverClassName = this.embeddedDatabaseConnection.getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			throw new DataSourceBeanCreationException(_					"Failed to determine a suitable driver class", this,_					this.embeddedDatabaseConnection)__		}_		return driverClassName__	};determine,the,driver,to,use,based,on,this,configuration,and,the,environment,return,the,driver,to,use,since,1,4,0;public,string,determine,driver,class,name,if,string,utils,has,text,this,driver,class,name,assert,state,driver,class,is,loadable,cannot,load,driver,class,this,driver,class,name,return,this,driver,class,name,string,driver,class,name,null,if,string,utils,has,text,this,url,driver,class,name,database,driver,from,jdbc,url,this,url,get,driver,class,name,if,string,utils,has,text,driver,class,name,driver,class,name,this,embedded,database,connection,get,driver,class,name,if,string,utils,has,text,driver,class,name,throw,new,data,source,bean,creation,exception,failed,to,determine,a,suitable,driver,class,this,this,embedded,database,connection,return,driver,class,name
DataSourceProperties -> public String determineDriverClassName();1532738143;Determine the driver to use based on this configuration and the environment._@return the driver to use_@since 1.4.0;public String determineDriverClassName() {_		if (StringUtils.hasText(this.driverClassName)) {_			Assert.state(driverClassIsLoadable(),_					() -> "Cannot load driver class: " + this.driverClassName)__			return this.driverClassName__		}_		String driverClassName = null__		if (StringUtils.hasText(this.url)) {_			driverClassName = DatabaseDriver.fromJdbcUrl(this.url).getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			driverClassName = this.embeddedDatabaseConnection.getDriverClassName()__		}_		if (!StringUtils.hasText(driverClassName)) {_			throw new DataSourceBeanCreationException(_					"Failed to determine a suitable driver class", this,_					this.embeddedDatabaseConnection)__		}_		return driverClassName__	};determine,the,driver,to,use,based,on,this,configuration,and,the,environment,return,the,driver,to,use,since,1,4,0;public,string,determine,driver,class,name,if,string,utils,has,text,this,driver,class,name,assert,state,driver,class,is,loadable,cannot,load,driver,class,this,driver,class,name,return,this,driver,class,name,string,driver,class,name,null,if,string,utils,has,text,this,url,driver,class,name,database,driver,from,jdbc,url,this,url,get,driver,class,name,if,string,utils,has,text,driver,class,name,driver,class,name,this,embedded,database,connection,get,driver,class,name,if,string,utils,has,text,driver,class,name,throw,new,data,source,bean,creation,exception,failed,to,determine,a,suitable,driver,class,this,this,embedded,database,connection,return,driver,class,name
DataSourceProperties -> public void setJndiName(String jndiName);1507173536;Allows the DataSource to be managed by the container and obtained via JNDI. The_{@code URL}, {@code driverClassName}, {@code username} and {@code password} fields_will be ignored when using JNDI lookups._@param jndiName the JNDI name;public void setJndiName(String jndiName) {_		this.jndiName = jndiName__	};allows,the,data,source,to,be,managed,by,the,container,and,obtained,via,jndi,the,code,url,code,driver,class,name,code,username,and,code,password,fields,will,be,ignored,when,using,jndi,lookups,param,jndi,name,the,jndi,name;public,void,set,jndi,name,string,jndi,name,this,jndi,name,jndi,name
DataSourceProperties -> public void setJndiName(String jndiName);1508247426;Allows the DataSource to be managed by the container and obtained via JNDI. The_{@code URL}, {@code driverClassName}, {@code username} and {@code password} fields_will be ignored when using JNDI lookups._@param jndiName the JNDI name;public void setJndiName(String jndiName) {_		this.jndiName = jndiName__	};allows,the,data,source,to,be,managed,by,the,container,and,obtained,via,jndi,the,code,url,code,driver,class,name,code,username,and,code,password,fields,will,be,ignored,when,using,jndi,lookups,param,jndi,name,the,jndi,name;public,void,set,jndi,name,string,jndi,name,this,jndi,name,jndi,name
DataSourceProperties -> public void setJndiName(String jndiName);1509090637;Allows the DataSource to be managed by the container and obtained via JNDI. The_{@code URL}, {@code driverClassName}, {@code username} and {@code password} fields_will be ignored when using JNDI lookups._@param jndiName the JNDI name;public void setJndiName(String jndiName) {_		this.jndiName = jndiName__	};allows,the,data,source,to,be,managed,by,the,container,and,obtained,via,jndi,the,code,url,code,driver,class,name,code,username,and,code,password,fields,will,be,ignored,when,using,jndi,lookups,param,jndi,name,the,jndi,name;public,void,set,jndi,name,string,jndi,name,this,jndi,name,jndi,name
DataSourceProperties -> public void setJndiName(String jndiName);1511221881;Allows the DataSource to be managed by the container and obtained via JNDI. The_{@code URL}, {@code driverClassName}, {@code username} and {@code password} fields_will be ignored when using JNDI lookups._@param jndiName the JNDI name;public void setJndiName(String jndiName) {_		this.jndiName = jndiName__	};allows,the,data,source,to,be,managed,by,the,container,and,obtained,via,jndi,the,code,url,code,driver,class,name,code,username,and,code,password,fields,will,be,ignored,when,using,jndi,lookups,param,jndi,name,the,jndi,name;public,void,set,jndi,name,string,jndi,name,this,jndi,name,jndi,name
DataSourceProperties -> public void setJndiName(String jndiName);1516844492;Allows the DataSource to be managed by the container and obtained via JNDI. The_{@code URL}, {@code driverClassName}, {@code username} and {@code password} fields_will be ignored when using JNDI lookups._@param jndiName the JNDI name;public void setJndiName(String jndiName) {_		this.jndiName = jndiName__	};allows,the,data,source,to,be,managed,by,the,container,and,obtained,via,jndi,the,code,url,code,driver,class,name,code,username,and,code,password,fields,will,be,ignored,when,using,jndi,lookups,param,jndi,name,the,jndi,name;public,void,set,jndi,name,string,jndi,name,this,jndi,name,jndi,name
DataSourceProperties -> public void setJndiName(String jndiName);1516855380;Allows the DataSource to be managed by the container and obtained via JNDI. The_{@code URL}, {@code driverClassName}, {@code username} and {@code password} fields_will be ignored when using JNDI lookups._@param jndiName the JNDI name;public void setJndiName(String jndiName) {_		this.jndiName = jndiName__	};allows,the,data,source,to,be,managed,by,the,container,and,obtained,via,jndi,the,code,url,code,driver,class,name,code,username,and,code,password,fields,will,be,ignored,when,using,jndi,lookups,param,jndi,name,the,jndi,name;public,void,set,jndi,name,string,jndi,name,this,jndi,name,jndi,name
DataSourceProperties -> public void setJndiName(String jndiName);1518430310;Allows the DataSource to be managed by the container and obtained via JNDI. The_{@code URL}, {@code driverClassName}, {@code username} and {@code password} fields_will be ignored when using JNDI lookups._@param jndiName the JNDI name;public void setJndiName(String jndiName) {_		this.jndiName = jndiName__	};allows,the,data,source,to,be,managed,by,the,container,and,obtained,via,jndi,the,code,url,code,driver,class,name,code,username,and,code,password,fields,will,be,ignored,when,using,jndi,lookups,param,jndi,name,the,jndi,name;public,void,set,jndi,name,string,jndi,name,this,jndi,name,jndi,name
DataSourceProperties -> public void setJndiName(String jndiName);1518458586;Allows the DataSource to be managed by the container and obtained via JNDI. The_{@code URL}, {@code driverClassName}, {@code username} and {@code password} fields_will be ignored when using JNDI lookups._@param jndiName the JNDI name;public void setJndiName(String jndiName) {_		this.jndiName = jndiName__	};allows,the,data,source,to,be,managed,by,the,container,and,obtained,via,jndi,the,code,url,code,driver,class,name,code,username,and,code,password,fields,will,be,ignored,when,using,jndi,lookups,param,jndi,name,the,jndi,name;public,void,set,jndi,name,string,jndi,name,this,jndi,name,jndi,name
DataSourceProperties -> public void setJndiName(String jndiName);1519380148;Allows the DataSource to be managed by the container and obtained via JNDI. The_{@code URL}, {@code driverClassName}, {@code username} and {@code password} fields_will be ignored when using JNDI lookups._@param jndiName the JNDI name;public void setJndiName(String jndiName) {_		this.jndiName = jndiName__	};allows,the,data,source,to,be,managed,by,the,container,and,obtained,via,jndi,the,code,url,code,driver,class,name,code,username,and,code,password,fields,will,be,ignored,when,using,jndi,lookups,param,jndi,name,the,jndi,name;public,void,set,jndi,name,string,jndi,name,this,jndi,name,jndi,name
DataSourceProperties -> public void setJndiName(String jndiName);1525340853;Allows the DataSource to be managed by the container and obtained via JNDI. The_{@code URL}, {@code driverClassName}, {@code username} and {@code password} fields_will be ignored when using JNDI lookups._@param jndiName the JNDI name;public void setJndiName(String jndiName) {_		this.jndiName = jndiName__	};allows,the,data,source,to,be,managed,by,the,container,and,obtained,via,jndi,the,code,url,code,driver,class,name,code,username,and,code,password,fields,will,be,ignored,when,using,jndi,lookups,param,jndi,name,the,jndi,name;public,void,set,jndi,name,string,jndi,name,this,jndi,name,jndi,name
DataSourceProperties -> public void setJndiName(String jndiName);1525416882;Allows the DataSource to be managed by the container and obtained via JNDI. The_{@code URL}, {@code driverClassName}, {@code username} and {@code password} fields_will be ignored when using JNDI lookups._@param jndiName the JNDI name;public void setJndiName(String jndiName) {_		this.jndiName = jndiName__	};allows,the,data,source,to,be,managed,by,the,container,and,obtained,via,jndi,the,code,url,code,driver,class,name,code,username,and,code,password,fields,will,be,ignored,when,using,jndi,lookups,param,jndi,name,the,jndi,name;public,void,set,jndi,name,string,jndi,name,this,jndi,name,jndi,name
DataSourceProperties -> public void setJndiName(String jndiName);1532738143;Allows the DataSource to be managed by the container and obtained via JNDI. The_{@code URL}, {@code driverClassName}, {@code username} and {@code password} fields_will be ignored when using JNDI lookups._@param jndiName the JNDI name;public void setJndiName(String jndiName) {_		this.jndiName = jndiName__	};allows,the,data,source,to,be,managed,by,the,container,and,obtained,via,jndi,the,code,url,code,driver,class,name,code,username,and,code,password,fields,will,be,ignored,when,using,jndi,lookups,param,jndi,name,the,jndi,name;public,void,set,jndi,name,string,jndi,name,this,jndi,name,jndi,name
DataSourceProperties -> public String determineUsername();1507173536;Determine the username to use based on this configuration and the environment._@return the username to use_@since 1.4.0;public String determineUsername() {_		if (StringUtils.hasText(this.username)) {_			return this.username__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return "sa"__		}_		return null__	};determine,the,username,to,use,based,on,this,configuration,and,the,environment,return,the,username,to,use,since,1,4,0;public,string,determine,username,if,string,utils,has,text,this,username,return,this,username,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,sa,return,null
DataSourceProperties -> public String determineUsername();1508247426;Determine the username to use based on this configuration and the environment._@return the username to use_@since 1.4.0;public String determineUsername() {_		if (StringUtils.hasText(this.username)) {_			return this.username__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return "sa"__		}_		return null__	};determine,the,username,to,use,based,on,this,configuration,and,the,environment,return,the,username,to,use,since,1,4,0;public,string,determine,username,if,string,utils,has,text,this,username,return,this,username,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,sa,return,null
DataSourceProperties -> public String determineUsername();1509090637;Determine the username to use based on this configuration and the environment._@return the username to use_@since 1.4.0;public String determineUsername() {_		if (StringUtils.hasText(this.username)) {_			return this.username__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return "sa"__		}_		return null__	};determine,the,username,to,use,based,on,this,configuration,and,the,environment,return,the,username,to,use,since,1,4,0;public,string,determine,username,if,string,utils,has,text,this,username,return,this,username,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,sa,return,null
DataSourceProperties -> public String determineUsername();1511221881;Determine the username to use based on this configuration and the environment._@return the username to use_@since 1.4.0;public String determineUsername() {_		if (StringUtils.hasText(this.username)) {_			return this.username__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return "sa"__		}_		return null__	};determine,the,username,to,use,based,on,this,configuration,and,the,environment,return,the,username,to,use,since,1,4,0;public,string,determine,username,if,string,utils,has,text,this,username,return,this,username,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,sa,return,null
DataSourceProperties -> public String determineUsername();1516844492;Determine the username to use based on this configuration and the environment._@return the username to use_@since 1.4.0;public String determineUsername() {_		if (StringUtils.hasText(this.username)) {_			return this.username__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return "sa"__		}_		return null__	};determine,the,username,to,use,based,on,this,configuration,and,the,environment,return,the,username,to,use,since,1,4,0;public,string,determine,username,if,string,utils,has,text,this,username,return,this,username,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,sa,return,null
DataSourceProperties -> public String determineUsername();1516855380;Determine the username to use based on this configuration and the environment._@return the username to use_@since 1.4.0;public String determineUsername() {_		if (StringUtils.hasText(this.username)) {_			return this.username__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return "sa"__		}_		return null__	};determine,the,username,to,use,based,on,this,configuration,and,the,environment,return,the,username,to,use,since,1,4,0;public,string,determine,username,if,string,utils,has,text,this,username,return,this,username,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,sa,return,null
DataSourceProperties -> public String determineUsername();1518430310;Determine the username to use based on this configuration and the environment._@return the username to use_@since 1.4.0;public String determineUsername() {_		if (StringUtils.hasText(this.username)) {_			return this.username__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return "sa"__		}_		return null__	};determine,the,username,to,use,based,on,this,configuration,and,the,environment,return,the,username,to,use,since,1,4,0;public,string,determine,username,if,string,utils,has,text,this,username,return,this,username,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,sa,return,null
DataSourceProperties -> public String determineUsername();1518458586;Determine the username to use based on this configuration and the environment._@return the username to use_@since 1.4.0;public String determineUsername() {_		if (StringUtils.hasText(this.username)) {_			return this.username__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return "sa"__		}_		return null__	};determine,the,username,to,use,based,on,this,configuration,and,the,environment,return,the,username,to,use,since,1,4,0;public,string,determine,username,if,string,utils,has,text,this,username,return,this,username,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,sa,return,null
DataSourceProperties -> public String determineUsername();1519380148;Determine the username to use based on this configuration and the environment._@return the username to use_@since 1.4.0;public String determineUsername() {_		if (StringUtils.hasText(this.username)) {_			return this.username__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return "sa"__		}_		return null__	};determine,the,username,to,use,based,on,this,configuration,and,the,environment,return,the,username,to,use,since,1,4,0;public,string,determine,username,if,string,utils,has,text,this,username,return,this,username,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,sa,return,null
DataSourceProperties -> public String determineUsername();1525340853;Determine the username to use based on this configuration and the environment._@return the username to use_@since 1.4.0;public String determineUsername() {_		if (StringUtils.hasText(this.username)) {_			return this.username__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return "sa"__		}_		return null__	};determine,the,username,to,use,based,on,this,configuration,and,the,environment,return,the,username,to,use,since,1,4,0;public,string,determine,username,if,string,utils,has,text,this,username,return,this,username,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,sa,return,null
DataSourceProperties -> public String determineUsername();1525416882;Determine the username to use based on this configuration and the environment._@return the username to use_@since 1.4.0;public String determineUsername() {_		if (StringUtils.hasText(this.username)) {_			return this.username__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return "sa"__		}_		return null__	};determine,the,username,to,use,based,on,this,configuration,and,the,environment,return,the,username,to,use,since,1,4,0;public,string,determine,username,if,string,utils,has,text,this,username,return,this,username,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,sa,return,null
DataSourceProperties -> public String determineUsername();1532738143;Determine the username to use based on this configuration and the environment._@return the username to use_@since 1.4.0;public String determineUsername() {_		if (StringUtils.hasText(this.username)) {_			return this.username__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return "sa"__		}_		return null__	};determine,the,username,to,use,based,on,this,configuration,and,the,environment,return,the,username,to,use,since,1,4,0;public,string,determine,username,if,string,utils,has,text,this,username,return,this,username,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,sa,return,null
DataSourceProperties -> public String getPassword();1507173536;Return the configured password or {@code null} if none was configured._@return the configured password_@see #determinePassword();public String getPassword() {_		return this.password__	};return,the,configured,password,or,code,null,if,none,was,configured,return,the,configured,password,see,determine,password;public,string,get,password,return,this,password
DataSourceProperties -> public String getPassword();1508247426;Return the configured password or {@code null} if none was configured._@return the configured password_@see #determinePassword();public String getPassword() {_		return this.password__	};return,the,configured,password,or,code,null,if,none,was,configured,return,the,configured,password,see,determine,password;public,string,get,password,return,this,password
DataSourceProperties -> public String getPassword();1509090637;Return the configured password or {@code null} if none was configured._@return the configured password_@see #determinePassword();public String getPassword() {_		return this.password__	};return,the,configured,password,or,code,null,if,none,was,configured,return,the,configured,password,see,determine,password;public,string,get,password,return,this,password
DataSourceProperties -> public String getPassword();1511221881;Return the configured password or {@code null} if none was configured._@return the configured password_@see #determinePassword();public String getPassword() {_		return this.password__	};return,the,configured,password,or,code,null,if,none,was,configured,return,the,configured,password,see,determine,password;public,string,get,password,return,this,password
DataSourceProperties -> public String getPassword();1516844492;Return the configured password or {@code null} if none was configured._@return the configured password_@see #determinePassword();public String getPassword() {_		return this.password__	};return,the,configured,password,or,code,null,if,none,was,configured,return,the,configured,password,see,determine,password;public,string,get,password,return,this,password
DataSourceProperties -> public String getPassword();1516855380;Return the configured password or {@code null} if none was configured._@return the configured password_@see #determinePassword();public String getPassword() {_		return this.password__	};return,the,configured,password,or,code,null,if,none,was,configured,return,the,configured,password,see,determine,password;public,string,get,password,return,this,password
DataSourceProperties -> public String getPassword();1518430310;Return the configured password or {@code null} if none was configured._@return the configured password_@see #determinePassword();public String getPassword() {_		return this.password__	};return,the,configured,password,or,code,null,if,none,was,configured,return,the,configured,password,see,determine,password;public,string,get,password,return,this,password
DataSourceProperties -> public String getPassword();1518458586;Return the configured password or {@code null} if none was configured._@return the configured password_@see #determinePassword();public String getPassword() {_		return this.password__	};return,the,configured,password,or,code,null,if,none,was,configured,return,the,configured,password,see,determine,password;public,string,get,password,return,this,password
DataSourceProperties -> public String getPassword();1519380148;Return the configured password or {@code null} if none was configured._@return the configured password_@see #determinePassword();public String getPassword() {_		return this.password__	};return,the,configured,password,or,code,null,if,none,was,configured,return,the,configured,password,see,determine,password;public,string,get,password,return,this,password
DataSourceProperties -> public String getPassword();1525340853;Return the configured password or {@code null} if none was configured._@return the configured password_@see #determinePassword();public String getPassword() {_		return this.password__	};return,the,configured,password,or,code,null,if,none,was,configured,return,the,configured,password,see,determine,password;public,string,get,password,return,this,password
DataSourceProperties -> public String getPassword();1525416882;Return the configured password or {@code null} if none was configured._@return the configured password_@see #determinePassword();public String getPassword() {_		return this.password__	};return,the,configured,password,or,code,null,if,none,was,configured,return,the,configured,password,see,determine,password;public,string,get,password,return,this,password
DataSourceProperties -> public String getPassword();1532738143;Return the configured password or {@code null} if none was configured._@return the configured password_@see #determinePassword();public String getPassword() {_		return this.password__	};return,the,configured,password,or,code,null,if,none,was,configured,return,the,configured,password,see,determine,password;public,string,get,password,return,this,password
DataSourceProperties -> public String determinePassword();1507173536;Determine the password to use based on this configuration and the environment._@return the password to use_@since 1.4.0;public String determinePassword() {_		if (StringUtils.hasText(this.password)) {_			return this.password__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return ""__		}_		return null__	};determine,the,password,to,use,based,on,this,configuration,and,the,environment,return,the,password,to,use,since,1,4,0;public,string,determine,password,if,string,utils,has,text,this,password,return,this,password,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,return,null
DataSourceProperties -> public String determinePassword();1508247426;Determine the password to use based on this configuration and the environment._@return the password to use_@since 1.4.0;public String determinePassword() {_		if (StringUtils.hasText(this.password)) {_			return this.password__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return ""__		}_		return null__	};determine,the,password,to,use,based,on,this,configuration,and,the,environment,return,the,password,to,use,since,1,4,0;public,string,determine,password,if,string,utils,has,text,this,password,return,this,password,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,return,null
DataSourceProperties -> public String determinePassword();1509090637;Determine the password to use based on this configuration and the environment._@return the password to use_@since 1.4.0;public String determinePassword() {_		if (StringUtils.hasText(this.password)) {_			return this.password__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return ""__		}_		return null__	};determine,the,password,to,use,based,on,this,configuration,and,the,environment,return,the,password,to,use,since,1,4,0;public,string,determine,password,if,string,utils,has,text,this,password,return,this,password,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,return,null
DataSourceProperties -> public String determinePassword();1511221881;Determine the password to use based on this configuration and the environment._@return the password to use_@since 1.4.0;public String determinePassword() {_		if (StringUtils.hasText(this.password)) {_			return this.password__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return ""__		}_		return null__	};determine,the,password,to,use,based,on,this,configuration,and,the,environment,return,the,password,to,use,since,1,4,0;public,string,determine,password,if,string,utils,has,text,this,password,return,this,password,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,return,null
DataSourceProperties -> public String determinePassword();1516844492;Determine the password to use based on this configuration and the environment._@return the password to use_@since 1.4.0;public String determinePassword() {_		if (StringUtils.hasText(this.password)) {_			return this.password__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return ""__		}_		return null__	};determine,the,password,to,use,based,on,this,configuration,and,the,environment,return,the,password,to,use,since,1,4,0;public,string,determine,password,if,string,utils,has,text,this,password,return,this,password,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,return,null
DataSourceProperties -> public String determinePassword();1516855380;Determine the password to use based on this configuration and the environment._@return the password to use_@since 1.4.0;public String determinePassword() {_		if (StringUtils.hasText(this.password)) {_			return this.password__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return ""__		}_		return null__	};determine,the,password,to,use,based,on,this,configuration,and,the,environment,return,the,password,to,use,since,1,4,0;public,string,determine,password,if,string,utils,has,text,this,password,return,this,password,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,return,null
DataSourceProperties -> public String determinePassword();1518430310;Determine the password to use based on this configuration and the environment._@return the password to use_@since 1.4.0;public String determinePassword() {_		if (StringUtils.hasText(this.password)) {_			return this.password__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return ""__		}_		return null__	};determine,the,password,to,use,based,on,this,configuration,and,the,environment,return,the,password,to,use,since,1,4,0;public,string,determine,password,if,string,utils,has,text,this,password,return,this,password,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,return,null
DataSourceProperties -> public String determinePassword();1518458586;Determine the password to use based on this configuration and the environment._@return the password to use_@since 1.4.0;public String determinePassword() {_		if (StringUtils.hasText(this.password)) {_			return this.password__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return ""__		}_		return null__	};determine,the,password,to,use,based,on,this,configuration,and,the,environment,return,the,password,to,use,since,1,4,0;public,string,determine,password,if,string,utils,has,text,this,password,return,this,password,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,return,null
DataSourceProperties -> public String determinePassword();1519380148;Determine the password to use based on this configuration and the environment._@return the password to use_@since 1.4.0;public String determinePassword() {_		if (StringUtils.hasText(this.password)) {_			return this.password__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return ""__		}_		return null__	};determine,the,password,to,use,based,on,this,configuration,and,the,environment,return,the,password,to,use,since,1,4,0;public,string,determine,password,if,string,utils,has,text,this,password,return,this,password,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,return,null
DataSourceProperties -> public String determinePassword();1525340853;Determine the password to use based on this configuration and the environment._@return the password to use_@since 1.4.0;public String determinePassword() {_		if (StringUtils.hasText(this.password)) {_			return this.password__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return ""__		}_		return null__	};determine,the,password,to,use,based,on,this,configuration,and,the,environment,return,the,password,to,use,since,1,4,0;public,string,determine,password,if,string,utils,has,text,this,password,return,this,password,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,return,null
DataSourceProperties -> public String determinePassword();1525416882;Determine the password to use based on this configuration and the environment._@return the password to use_@since 1.4.0;public String determinePassword() {_		if (StringUtils.hasText(this.password)) {_			return this.password__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return ""__		}_		return null__	};determine,the,password,to,use,based,on,this,configuration,and,the,environment,return,the,password,to,use,since,1,4,0;public,string,determine,password,if,string,utils,has,text,this,password,return,this,password,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,return,null
DataSourceProperties -> public String determinePassword();1532738143;Determine the password to use based on this configuration and the environment._@return the password to use_@since 1.4.0;public String determinePassword() {_		if (StringUtils.hasText(this.password)) {_			return this.password__		}_		if (EmbeddedDatabaseConnection.isEmbedded(determineDriverClassName())) {_			return ""__		}_		return null__	};determine,the,password,to,use,based,on,this,configuration,and,the,environment,return,the,password,to,use,since,1,4,0;public,string,determine,password,if,string,utils,has,text,this,password,return,this,password,if,embedded,database,connection,is,embedded,determine,driver,class,name,return,return,null
DataSourceProperties -> public String getUrl();1507173536;Return the configured url or {@code null} if none was configured._@return the configured url_@see #determineUrl();public String getUrl() {_		return this.url__	};return,the,configured,url,or,code,null,if,none,was,configured,return,the,configured,url,see,determine,url;public,string,get,url,return,this,url
DataSourceProperties -> public String getUrl();1508247426;Return the configured url or {@code null} if none was configured._@return the configured url_@see #determineUrl();public String getUrl() {_		return this.url__	};return,the,configured,url,or,code,null,if,none,was,configured,return,the,configured,url,see,determine,url;public,string,get,url,return,this,url
DataSourceProperties -> public String getUrl();1509090637;Return the configured url or {@code null} if none was configured._@return the configured url_@see #determineUrl();public String getUrl() {_		return this.url__	};return,the,configured,url,or,code,null,if,none,was,configured,return,the,configured,url,see,determine,url;public,string,get,url,return,this,url
DataSourceProperties -> public String getUrl();1511221881;Return the configured url or {@code null} if none was configured._@return the configured url_@see #determineUrl();public String getUrl() {_		return this.url__	};return,the,configured,url,or,code,null,if,none,was,configured,return,the,configured,url,see,determine,url;public,string,get,url,return,this,url
DataSourceProperties -> public String getUrl();1516844492;Return the configured url or {@code null} if none was configured._@return the configured url_@see #determineUrl();public String getUrl() {_		return this.url__	};return,the,configured,url,or,code,null,if,none,was,configured,return,the,configured,url,see,determine,url;public,string,get,url,return,this,url
DataSourceProperties -> public String getUrl();1516855380;Return the configured url or {@code null} if none was configured._@return the configured url_@see #determineUrl();public String getUrl() {_		return this.url__	};return,the,configured,url,or,code,null,if,none,was,configured,return,the,configured,url,see,determine,url;public,string,get,url,return,this,url
DataSourceProperties -> public String getUrl();1518430310;Return the configured url or {@code null} if none was configured._@return the configured url_@see #determineUrl();public String getUrl() {_		return this.url__	};return,the,configured,url,or,code,null,if,none,was,configured,return,the,configured,url,see,determine,url;public,string,get,url,return,this,url
DataSourceProperties -> public String getUrl();1518458586;Return the configured url or {@code null} if none was configured._@return the configured url_@see #determineUrl();public String getUrl() {_		return this.url__	};return,the,configured,url,or,code,null,if,none,was,configured,return,the,configured,url,see,determine,url;public,string,get,url,return,this,url
DataSourceProperties -> public String getUrl();1519380148;Return the configured url or {@code null} if none was configured._@return the configured url_@see #determineUrl();public String getUrl() {_		return this.url__	};return,the,configured,url,or,code,null,if,none,was,configured,return,the,configured,url,see,determine,url;public,string,get,url,return,this,url
DataSourceProperties -> public String getUrl();1525340853;Return the configured url or {@code null} if none was configured._@return the configured url_@see #determineUrl();public String getUrl() {_		return this.url__	};return,the,configured,url,or,code,null,if,none,was,configured,return,the,configured,url,see,determine,url;public,string,get,url,return,this,url
DataSourceProperties -> public String getUrl();1525416882;Return the configured url or {@code null} if none was configured._@return the configured url_@see #determineUrl();public String getUrl() {_		return this.url__	};return,the,configured,url,or,code,null,if,none,was,configured,return,the,configured,url,see,determine,url;public,string,get,url,return,this,url
DataSourceProperties -> public String getUrl();1532738143;Return the configured url or {@code null} if none was configured._@return the configured url_@see #determineUrl();public String getUrl() {_		return this.url__	};return,the,configured,url,or,code,null,if,none,was,configured,return,the,configured,url,see,determine,url;public,string,get,url,return,this,url
DataSourceProperties -> public String determineUrl();1507173536;Determine the url to use based on this configuration and the environment._@return the url to use_@since 1.4.0;public String determineUrl() {_		if (StringUtils.hasText(this.url)) {_			return this.url__		}_		String url = this.embeddedDatabaseConnection.getUrl(determineDatabaseName())__		if (!StringUtils.hasText(url)) {_			throw new DataSourceBeanCreationException(this.embeddedDatabaseConnection,_					this.environment, "url")__		}_		return url__	};determine,the,url,to,use,based,on,this,configuration,and,the,environment,return,the,url,to,use,since,1,4,0;public,string,determine,url,if,string,utils,has,text,this,url,return,this,url,string,url,this,embedded,database,connection,get,url,determine,database,name,if,string,utils,has,text,url,throw,new,data,source,bean,creation,exception,this,embedded,database,connection,this,environment,url,return,url
DataSourceProperties -> public String determineUrl();1508247426;Determine the url to use based on this configuration and the environment._@return the url to use_@since 1.4.0;public String determineUrl() {_		if (StringUtils.hasText(this.url)) {_			return this.url__		}_		String url = this.embeddedDatabaseConnection.getUrl(determineDatabaseName())__		if (!StringUtils.hasText(url)) {_			throw new DataSourceBeanCreationException(this.embeddedDatabaseConnection,_					this.environment, "url")__		}_		return url__	};determine,the,url,to,use,based,on,this,configuration,and,the,environment,return,the,url,to,use,since,1,4,0;public,string,determine,url,if,string,utils,has,text,this,url,return,this,url,string,url,this,embedded,database,connection,get,url,determine,database,name,if,string,utils,has,text,url,throw,new,data,source,bean,creation,exception,this,embedded,database,connection,this,environment,url,return,url
DataSourceProperties -> public String determineUrl();1509090637;Determine the url to use based on this configuration and the environment._@return the url to use_@since 1.4.0;public String determineUrl() {_		if (StringUtils.hasText(this.url)) {_			return this.url__		}_		String url = this.embeddedDatabaseConnection.getUrl(determineDatabaseName())__		if (!StringUtils.hasText(url)) {_			throw new DataSourceBeanCreationException(this.embeddedDatabaseConnection,_					this.environment, "url")__		}_		return url__	};determine,the,url,to,use,based,on,this,configuration,and,the,environment,return,the,url,to,use,since,1,4,0;public,string,determine,url,if,string,utils,has,text,this,url,return,this,url,string,url,this,embedded,database,connection,get,url,determine,database,name,if,string,utils,has,text,url,throw,new,data,source,bean,creation,exception,this,embedded,database,connection,this,environment,url,return,url
DataSourceProperties -> public String determineUrl();1511221881;Determine the url to use based on this configuration and the environment._@return the url to use_@since 1.4.0;public String determineUrl() {_		if (StringUtils.hasText(this.url)) {_			return this.url__		}_		String url = this.embeddedDatabaseConnection.getUrl(determineDatabaseName())__		if (!StringUtils.hasText(url)) {_			throw new DataSourceBeanCreationException(this.embeddedDatabaseConnection,_					this.environment, "url")__		}_		return url__	};determine,the,url,to,use,based,on,this,configuration,and,the,environment,return,the,url,to,use,since,1,4,0;public,string,determine,url,if,string,utils,has,text,this,url,return,this,url,string,url,this,embedded,database,connection,get,url,determine,database,name,if,string,utils,has,text,url,throw,new,data,source,bean,creation,exception,this,embedded,database,connection,this,environment,url,return,url
DataSourceProperties -> public String determineUrl();1516844492;Determine the url to use based on this configuration and the environment._@return the url to use_@since 1.4.0;public String determineUrl() {_		if (StringUtils.hasText(this.url)) {_			return this.url__		}_		String url = this.embeddedDatabaseConnection.getUrl(determineDatabaseName())__		if (!StringUtils.hasText(url)) {_			throw new DataSourceBeanCreationException(this.embeddedDatabaseConnection,_					this.environment, "url")__		}_		return url__	};determine,the,url,to,use,based,on,this,configuration,and,the,environment,return,the,url,to,use,since,1,4,0;public,string,determine,url,if,string,utils,has,text,this,url,return,this,url,string,url,this,embedded,database,connection,get,url,determine,database,name,if,string,utils,has,text,url,throw,new,data,source,bean,creation,exception,this,embedded,database,connection,this,environment,url,return,url
DataSourceProperties -> public String determineUrl();1516855380;Determine the url to use based on this configuration and the environment._@return the url to use_@since 1.4.0;public String determineUrl() {_		if (StringUtils.hasText(this.url)) {_			return this.url__		}_		String databaseName = determineDatabaseName()__		String url = (databaseName == null ? null_				: this.embeddedDatabaseConnection.getUrl(databaseName))__		if (!StringUtils.hasText(url)) {_			throw new DataSourceBeanCreationException(this.embeddedDatabaseConnection,_					this.environment, "url")__		}_		return url__	};determine,the,url,to,use,based,on,this,configuration,and,the,environment,return,the,url,to,use,since,1,4,0;public,string,determine,url,if,string,utils,has,text,this,url,return,this,url,string,database,name,determine,database,name,string,url,database,name,null,null,this,embedded,database,connection,get,url,database,name,if,string,utils,has,text,url,throw,new,data,source,bean,creation,exception,this,embedded,database,connection,this,environment,url,return,url
DataSourceProperties -> public String determineUrl();1518430310;Determine the url to use based on this configuration and the environment._@return the url to use_@since 1.4.0;public String determineUrl() {_		if (StringUtils.hasText(this.url)) {_			return this.url__		}_		String databaseName = determineDatabaseName()__		String url = (databaseName == null ? null_				: this.embeddedDatabaseConnection.getUrl(databaseName))__		if (!StringUtils.hasText(url)) {_			throw new DataSourceBeanCreationException(_					"Failed to determine suitable jdbc url",_					this.embeddedDatabaseConnection)__		}_		return url__	};determine,the,url,to,use,based,on,this,configuration,and,the,environment,return,the,url,to,use,since,1,4,0;public,string,determine,url,if,string,utils,has,text,this,url,return,this,url,string,database,name,determine,database,name,string,url,database,name,null,null,this,embedded,database,connection,get,url,database,name,if,string,utils,has,text,url,throw,new,data,source,bean,creation,exception,failed,to,determine,suitable,jdbc,url,this,embedded,database,connection,return,url
DataSourceProperties -> public String determineUrl();1518458586;Determine the url to use based on this configuration and the environment._@return the url to use_@since 1.4.0;public String determineUrl() {_		if (StringUtils.hasText(this.url)) {_			return this.url__		}_		String databaseName = determineDatabaseName()__		String url = (databaseName == null ? null_				: this.embeddedDatabaseConnection.getUrl(databaseName))__		if (!StringUtils.hasText(url)) {_			throw new DataSourceBeanCreationException(_					"Failed to determine suitable jdbc url",_					this.embeddedDatabaseConnection)__		}_		return url__	};determine,the,url,to,use,based,on,this,configuration,and,the,environment,return,the,url,to,use,since,1,4,0;public,string,determine,url,if,string,utils,has,text,this,url,return,this,url,string,database,name,determine,database,name,string,url,database,name,null,null,this,embedded,database,connection,get,url,database,name,if,string,utils,has,text,url,throw,new,data,source,bean,creation,exception,failed,to,determine,suitable,jdbc,url,this,embedded,database,connection,return,url
DataSourceProperties -> public String determineUrl();1519380148;Determine the url to use based on this configuration and the environment._@return the url to use_@since 1.4.0;public String determineUrl() {_		if (StringUtils.hasText(this.url)) {_			return this.url__		}_		String databaseName = determineDatabaseName()__		String url = (databaseName == null ? null_				: this.embeddedDatabaseConnection.getUrl(databaseName))__		if (!StringUtils.hasText(url)) {_			throw new DataSourceBeanCreationException(_					"Failed to determine suitable jdbc url",_					this.embeddedDatabaseConnection)__		}_		return url__	};determine,the,url,to,use,based,on,this,configuration,and,the,environment,return,the,url,to,use,since,1,4,0;public,string,determine,url,if,string,utils,has,text,this,url,return,this,url,string,database,name,determine,database,name,string,url,database,name,null,null,this,embedded,database,connection,get,url,database,name,if,string,utils,has,text,url,throw,new,data,source,bean,creation,exception,failed,to,determine,suitable,jdbc,url,this,embedded,database,connection,return,url
DataSourceProperties -> public String determineUrl();1525340853;Determine the url to use based on this configuration and the environment._@return the url to use_@since 1.4.0;public String determineUrl() {_		if (StringUtils.hasText(this.url)) {_			return this.url__		}_		String databaseName = determineDatabaseName()__		String url = (databaseName == null ? null_				: this.embeddedDatabaseConnection.getUrl(databaseName))__		if (!StringUtils.hasText(url)) {_			throw new DataSourceBeanCreationException(_					"Failed to determine suitable jdbc url",_					this, this.embeddedDatabaseConnection)__		}_		return url__	};determine,the,url,to,use,based,on,this,configuration,and,the,environment,return,the,url,to,use,since,1,4,0;public,string,determine,url,if,string,utils,has,text,this,url,return,this,url,string,database,name,determine,database,name,string,url,database,name,null,null,this,embedded,database,connection,get,url,database,name,if,string,utils,has,text,url,throw,new,data,source,bean,creation,exception,failed,to,determine,suitable,jdbc,url,this,this,embedded,database,connection,return,url
DataSourceProperties -> public String determineUrl();1525416882;Determine the url to use based on this configuration and the environment._@return the url to use_@since 1.4.0;public String determineUrl() {_		if (StringUtils.hasText(this.url)) {_			return this.url__		}_		String databaseName = determineDatabaseName()__		String url = (databaseName != null_				? this.embeddedDatabaseConnection.getUrl(databaseName) : null)__		if (!StringUtils.hasText(url)) {_			throw new DataSourceBeanCreationException(_					"Failed to determine suitable jdbc url", this,_					this.embeddedDatabaseConnection)__		}_		return url__	};determine,the,url,to,use,based,on,this,configuration,and,the,environment,return,the,url,to,use,since,1,4,0;public,string,determine,url,if,string,utils,has,text,this,url,return,this,url,string,database,name,determine,database,name,string,url,database,name,null,this,embedded,database,connection,get,url,database,name,null,if,string,utils,has,text,url,throw,new,data,source,bean,creation,exception,failed,to,determine,suitable,jdbc,url,this,this,embedded,database,connection,return,url
DataSourceProperties -> public String determineUrl();1532738143;Determine the url to use based on this configuration and the environment._@return the url to use_@since 1.4.0;public String determineUrl() {_		if (StringUtils.hasText(this.url)) {_			return this.url__		}_		String databaseName = determineDatabaseName()__		String url = (databaseName != null)_				? this.embeddedDatabaseConnection.getUrl(databaseName) : null__		if (!StringUtils.hasText(url)) {_			throw new DataSourceBeanCreationException(_					"Failed to determine suitable jdbc url", this,_					this.embeddedDatabaseConnection)__		}_		return url__	};determine,the,url,to,use,based,on,this,configuration,and,the,environment,return,the,url,to,use,since,1,4,0;public,string,determine,url,if,string,utils,has,text,this,url,return,this,url,string,database,name,determine,database,name,string,url,database,name,null,this,embedded,database,connection,get,url,database,name,null,if,string,utils,has,text,url,throw,new,data,source,bean,creation,exception,failed,to,determine,suitable,jdbc,url,this,this,embedded,database,connection,return,url
DataSourceProperties -> public String getUsername();1507173536;Return the configured username or {@code null} if none was configured._@return the configured username_@see #determineUsername();public String getUsername() {_		return this.username__	};return,the,configured,username,or,code,null,if,none,was,configured,return,the,configured,username,see,determine,username;public,string,get,username,return,this,username
DataSourceProperties -> public String getUsername();1508247426;Return the configured username or {@code null} if none was configured._@return the configured username_@see #determineUsername();public String getUsername() {_		return this.username__	};return,the,configured,username,or,code,null,if,none,was,configured,return,the,configured,username,see,determine,username;public,string,get,username,return,this,username
DataSourceProperties -> public String getUsername();1509090637;Return the configured username or {@code null} if none was configured._@return the configured username_@see #determineUsername();public String getUsername() {_		return this.username__	};return,the,configured,username,or,code,null,if,none,was,configured,return,the,configured,username,see,determine,username;public,string,get,username,return,this,username
DataSourceProperties -> public String getUsername();1511221881;Return the configured username or {@code null} if none was configured._@return the configured username_@see #determineUsername();public String getUsername() {_		return this.username__	};return,the,configured,username,or,code,null,if,none,was,configured,return,the,configured,username,see,determine,username;public,string,get,username,return,this,username
DataSourceProperties -> public String getUsername();1516844492;Return the configured username or {@code null} if none was configured._@return the configured username_@see #determineUsername();public String getUsername() {_		return this.username__	};return,the,configured,username,or,code,null,if,none,was,configured,return,the,configured,username,see,determine,username;public,string,get,username,return,this,username
DataSourceProperties -> public String getUsername();1516855380;Return the configured username or {@code null} if none was configured._@return the configured username_@see #determineUsername();public String getUsername() {_		return this.username__	};return,the,configured,username,or,code,null,if,none,was,configured,return,the,configured,username,see,determine,username;public,string,get,username,return,this,username
DataSourceProperties -> public String getUsername();1518430310;Return the configured username or {@code null} if none was configured._@return the configured username_@see #determineUsername();public String getUsername() {_		return this.username__	};return,the,configured,username,or,code,null,if,none,was,configured,return,the,configured,username,see,determine,username;public,string,get,username,return,this,username
DataSourceProperties -> public String getUsername();1518458586;Return the configured username or {@code null} if none was configured._@return the configured username_@see #determineUsername();public String getUsername() {_		return this.username__	};return,the,configured,username,or,code,null,if,none,was,configured,return,the,configured,username,see,determine,username;public,string,get,username,return,this,username
DataSourceProperties -> public String getUsername();1519380148;Return the configured username or {@code null} if none was configured._@return the configured username_@see #determineUsername();public String getUsername() {_		return this.username__	};return,the,configured,username,or,code,null,if,none,was,configured,return,the,configured,username,see,determine,username;public,string,get,username,return,this,username
DataSourceProperties -> public String getUsername();1525340853;Return the configured username or {@code null} if none was configured._@return the configured username_@see #determineUsername();public String getUsername() {_		return this.username__	};return,the,configured,username,or,code,null,if,none,was,configured,return,the,configured,username,see,determine,username;public,string,get,username,return,this,username
DataSourceProperties -> public String getUsername();1525416882;Return the configured username or {@code null} if none was configured._@return the configured username_@see #determineUsername();public String getUsername() {_		return this.username__	};return,the,configured,username,or,code,null,if,none,was,configured,return,the,configured,username,see,determine,username;public,string,get,username,return,this,username
DataSourceProperties -> public String getUsername();1532738143;Return the configured username or {@code null} if none was configured._@return the configured username_@see #determineUsername();public String getUsername() {_		return this.username__	};return,the,configured,username,or,code,null,if,none,was,configured,return,the,configured,username,see,determine,username;public,string,get,username,return,this,username
DataSourceProperties -> public String determineDatabaseName();1516855380;Determine the name to used based on this configuration._@return the database name to use or {@code null}_@since 2.0.0;public String determineDatabaseName() {_		if (this.generateUniqueName) {_			if (this.uniqueName == null) {_				this.uniqueName = UUID.randomUUID().toString()__			}_			return this.uniqueName__		}_		if (StringUtils.hasLength(this.name)) {_			return this.name__		}_		if (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {_			return "testdb"__		}_		return null__	};determine,the,name,to,used,based,on,this,configuration,return,the,database,name,to,use,or,code,null,since,2,0,0;public,string,determine,database,name,if,this,generate,unique,name,if,this,unique,name,null,this,unique,name,uuid,random,uuid,to,string,return,this,unique,name,if,string,utils,has,length,this,name,return,this,name,if,this,embedded,database,connection,embedded,database,connection,none,return,testdb,return,null
DataSourceProperties -> public String determineDatabaseName();1518430310;Determine the name to used based on this configuration._@return the database name to use or {@code null}_@since 2.0.0;public String determineDatabaseName() {_		if (this.generateUniqueName) {_			if (this.uniqueName == null) {_				this.uniqueName = UUID.randomUUID().toString()__			}_			return this.uniqueName__		}_		if (StringUtils.hasLength(this.name)) {_			return this.name__		}_		if (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {_			return "testdb"__		}_		return null__	};determine,the,name,to,used,based,on,this,configuration,return,the,database,name,to,use,or,code,null,since,2,0,0;public,string,determine,database,name,if,this,generate,unique,name,if,this,unique,name,null,this,unique,name,uuid,random,uuid,to,string,return,this,unique,name,if,string,utils,has,length,this,name,return,this,name,if,this,embedded,database,connection,embedded,database,connection,none,return,testdb,return,null
DataSourceProperties -> public String determineDatabaseName();1518458586;Determine the name to used based on this configuration._@return the database name to use or {@code null}_@since 2.0.0;public String determineDatabaseName() {_		if (this.generateUniqueName) {_			if (this.uniqueName == null) {_				this.uniqueName = UUID.randomUUID().toString()__			}_			return this.uniqueName__		}_		if (StringUtils.hasLength(this.name)) {_			return this.name__		}_		if (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {_			return "testdb"__		}_		return null__	};determine,the,name,to,used,based,on,this,configuration,return,the,database,name,to,use,or,code,null,since,2,0,0;public,string,determine,database,name,if,this,generate,unique,name,if,this,unique,name,null,this,unique,name,uuid,random,uuid,to,string,return,this,unique,name,if,string,utils,has,length,this,name,return,this,name,if,this,embedded,database,connection,embedded,database,connection,none,return,testdb,return,null
DataSourceProperties -> public String determineDatabaseName();1519380148;Determine the name to used based on this configuration._@return the database name to use or {@code null}_@since 2.0.0;public String determineDatabaseName() {_		if (this.generateUniqueName) {_			if (this.uniqueName == null) {_				this.uniqueName = UUID.randomUUID().toString()__			}_			return this.uniqueName__		}_		if (StringUtils.hasLength(this.name)) {_			return this.name__		}_		if (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {_			return "testdb"__		}_		return null__	};determine,the,name,to,used,based,on,this,configuration,return,the,database,name,to,use,or,code,null,since,2,0,0;public,string,determine,database,name,if,this,generate,unique,name,if,this,unique,name,null,this,unique,name,uuid,random,uuid,to,string,return,this,unique,name,if,string,utils,has,length,this,name,return,this,name,if,this,embedded,database,connection,embedded,database,connection,none,return,testdb,return,null
DataSourceProperties -> public String determineDatabaseName();1525340853;Determine the name to used based on this configuration._@return the database name to use or {@code null}_@since 2.0.0;public String determineDatabaseName() {_		if (this.generateUniqueName) {_			if (this.uniqueName == null) {_				this.uniqueName = UUID.randomUUID().toString()__			}_			return this.uniqueName__		}_		if (StringUtils.hasLength(this.name)) {_			return this.name__		}_		if (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {_			return "testdb"__		}_		return null__	};determine,the,name,to,used,based,on,this,configuration,return,the,database,name,to,use,or,code,null,since,2,0,0;public,string,determine,database,name,if,this,generate,unique,name,if,this,unique,name,null,this,unique,name,uuid,random,uuid,to,string,return,this,unique,name,if,string,utils,has,length,this,name,return,this,name,if,this,embedded,database,connection,embedded,database,connection,none,return,testdb,return,null
DataSourceProperties -> public String determineDatabaseName();1525416882;Determine the name to used based on this configuration._@return the database name to use or {@code null}_@since 2.0.0;public String determineDatabaseName() {_		if (this.generateUniqueName) {_			if (this.uniqueName == null) {_				this.uniqueName = UUID.randomUUID().toString()__			}_			return this.uniqueName__		}_		if (StringUtils.hasLength(this.name)) {_			return this.name__		}_		if (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {_			return "testdb"__		}_		return null__	};determine,the,name,to,used,based,on,this,configuration,return,the,database,name,to,use,or,code,null,since,2,0,0;public,string,determine,database,name,if,this,generate,unique,name,if,this,unique,name,null,this,unique,name,uuid,random,uuid,to,string,return,this,unique,name,if,string,utils,has,length,this,name,return,this,name,if,this,embedded,database,connection,embedded,database,connection,none,return,testdb,return,null
DataSourceProperties -> public String determineDatabaseName();1532738143;Determine the name to used based on this configuration._@return the database name to use or {@code null}_@since 2.0.0;public String determineDatabaseName() {_		if (this.generateUniqueName) {_			if (this.uniqueName == null) {_				this.uniqueName = UUID.randomUUID().toString()__			}_			return this.uniqueName__		}_		if (StringUtils.hasLength(this.name)) {_			return this.name__		}_		if (this.embeddedDatabaseConnection != EmbeddedDatabaseConnection.NONE) {_			return "testdb"__		}_		return null__	};determine,the,name,to,used,based,on,this,configuration,return,the,database,name,to,use,or,code,null,since,2,0,0;public,string,determine,database,name,if,this,generate,unique,name,if,this,unique,name,null,this,unique,name,uuid,random,uuid,to,string,return,this,unique,name,if,string,utils,has,length,this,name,return,this,name,if,this,embedded,database,connection,embedded,database,connection,none,return,testdb,return,null
DataSourceProperties -> public String getDriverClassName();1507173536;Return the configured driver or {@code null} if none was configured._@return the configured driver_@see #determineDriverClassName();public String getDriverClassName() {_		return this.driverClassName__	};return,the,configured,driver,or,code,null,if,none,was,configured,return,the,configured,driver,see,determine,driver,class,name;public,string,get,driver,class,name,return,this,driver,class,name
DataSourceProperties -> public String getDriverClassName();1508247426;Return the configured driver or {@code null} if none was configured._@return the configured driver_@see #determineDriverClassName();public String getDriverClassName() {_		return this.driverClassName__	};return,the,configured,driver,or,code,null,if,none,was,configured,return,the,configured,driver,see,determine,driver,class,name;public,string,get,driver,class,name,return,this,driver,class,name
DataSourceProperties -> public String getDriverClassName();1509090637;Return the configured driver or {@code null} if none was configured._@return the configured driver_@see #determineDriverClassName();public String getDriverClassName() {_		return this.driverClassName__	};return,the,configured,driver,or,code,null,if,none,was,configured,return,the,configured,driver,see,determine,driver,class,name;public,string,get,driver,class,name,return,this,driver,class,name
DataSourceProperties -> public String getDriverClassName();1511221881;Return the configured driver or {@code null} if none was configured._@return the configured driver_@see #determineDriverClassName();public String getDriverClassName() {_		return this.driverClassName__	};return,the,configured,driver,or,code,null,if,none,was,configured,return,the,configured,driver,see,determine,driver,class,name;public,string,get,driver,class,name,return,this,driver,class,name
DataSourceProperties -> public String getDriverClassName();1516844492;Return the configured driver or {@code null} if none was configured._@return the configured driver_@see #determineDriverClassName();public String getDriverClassName() {_		return this.driverClassName__	};return,the,configured,driver,or,code,null,if,none,was,configured,return,the,configured,driver,see,determine,driver,class,name;public,string,get,driver,class,name,return,this,driver,class,name
DataSourceProperties -> public String getDriverClassName();1516855380;Return the configured driver or {@code null} if none was configured._@return the configured driver_@see #determineDriverClassName();public String getDriverClassName() {_		return this.driverClassName__	};return,the,configured,driver,or,code,null,if,none,was,configured,return,the,configured,driver,see,determine,driver,class,name;public,string,get,driver,class,name,return,this,driver,class,name
DataSourceProperties -> public String getDriverClassName();1518430310;Return the configured driver or {@code null} if none was configured._@return the configured driver_@see #determineDriverClassName();public String getDriverClassName() {_		return this.driverClassName__	};return,the,configured,driver,or,code,null,if,none,was,configured,return,the,configured,driver,see,determine,driver,class,name;public,string,get,driver,class,name,return,this,driver,class,name
DataSourceProperties -> public String getDriverClassName();1518458586;Return the configured driver or {@code null} if none was configured._@return the configured driver_@see #determineDriverClassName();public String getDriverClassName() {_		return this.driverClassName__	};return,the,configured,driver,or,code,null,if,none,was,configured,return,the,configured,driver,see,determine,driver,class,name;public,string,get,driver,class,name,return,this,driver,class,name
DataSourceProperties -> public String getDriverClassName();1519380148;Return the configured driver or {@code null} if none was configured._@return the configured driver_@see #determineDriverClassName();public String getDriverClassName() {_		return this.driverClassName__	};return,the,configured,driver,or,code,null,if,none,was,configured,return,the,configured,driver,see,determine,driver,class,name;public,string,get,driver,class,name,return,this,driver,class,name
DataSourceProperties -> public String getDriverClassName();1525340853;Return the configured driver or {@code null} if none was configured._@return the configured driver_@see #determineDriverClassName();public String getDriverClassName() {_		return this.driverClassName__	};return,the,configured,driver,or,code,null,if,none,was,configured,return,the,configured,driver,see,determine,driver,class,name;public,string,get,driver,class,name,return,this,driver,class,name
DataSourceProperties -> public String getDriverClassName();1525416882;Return the configured driver or {@code null} if none was configured._@return the configured driver_@see #determineDriverClassName();public String getDriverClassName() {_		return this.driverClassName__	};return,the,configured,driver,or,code,null,if,none,was,configured,return,the,configured,driver,see,determine,driver,class,name;public,string,get,driver,class,name,return,this,driver,class,name
DataSourceProperties -> public String getDriverClassName();1532738143;Return the configured driver or {@code null} if none was configured._@return the configured driver_@see #determineDriverClassName();public String getDriverClassName() {_		return this.driverClassName__	};return,the,configured,driver,or,code,null,if,none,was,configured,return,the,configured,driver,see,determine,driver,class,name;public,string,get,driver,class,name,return,this,driver,class,name
