commented;modifiers;parameterAmount;loc;comment;code
false;public;5;16;;@Bean public RedisCacheManager cacheManager(CacheProperties cacheProperties, CacheManagerCustomizers cacheManagerCustomizers, ObjectProvider<org.springframework.data.redis.cache.RedisCacheConfiguration> redisCacheConfiguration, RedisConnectionFactory redisConnectionFactory, ResourceLoader resourceLoader) {     RedisCacheManagerBuilder builder = RedisCacheManager.builder(redisConnectionFactory).cacheDefaults(determineConfiguration(cacheProperties, redisCacheConfiguration, resourceLoader.getClassLoader())).     List<String> cacheNames = cacheProperties.getCacheNames().     if (!cacheNames.isEmpty()) {         builder.initialCacheNames(new LinkedHashSet<>(cacheNames)).     }     return cacheManagerCustomizers.customize(builder.build()). }
false;private;3;8;;private org.springframework.data.redis.cache.RedisCacheConfiguration determineConfiguration(CacheProperties cacheProperties, ObjectProvider<org.springframework.data.redis.cache.RedisCacheConfiguration> redisCacheConfiguration, ClassLoader classLoader) {     return redisCacheConfiguration.getIfAvailable(() -> createConfiguration(cacheProperties, classLoader)). }
false;private;2;21;;private org.springframework.data.redis.cache.RedisCacheConfiguration createConfiguration(CacheProperties cacheProperties, ClassLoader classLoader) {     Redis redisProperties = cacheProperties.getRedis().     org.springframework.data.redis.cache.RedisCacheConfiguration config = org.springframework.data.redis.cache.RedisCacheConfiguration.defaultCacheConfig().     config = config.serializeValuesWith(SerializationPair.fromSerializer(new JdkSerializationRedisSerializer(classLoader))).     if (redisProperties.getTimeToLive() != null) {         config = config.entryTtl(redisProperties.getTimeToLive()).     }     if (redisProperties.getKeyPrefix() != null) {         config = config.prefixKeysWith(redisProperties.getKeyPrefix()).     }     if (!redisProperties.isCacheNullValues()) {         config = config.disableCachingNullValues().     }     if (!redisProperties.isUseKeyPrefix()) {         config = config.disableKeyPrefix().     }     return config. }
