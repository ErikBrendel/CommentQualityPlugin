commented;modifiers;parameterAmount;loc;comment;code
false;public,final;2;25;;@Override public final boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {     String classOrMethodName = getClassOrMethodName(metadata).     try {         ConditionOutcome outcome = getMatchOutcome(context, metadata).         logOutcome(classOrMethodName, outcome).         recordEvaluation(context, classOrMethodName, outcome).         return outcome.isMatch().     } catch (NoClassDefFoundError ex) {         throw new IllegalStateException("Could not evaluate condition on " + classOrMethodName + " due to " + ex.getMessage() + " not " + "found. Make sure your own configuration does not rely on " + "that class. This can also happen if you are " + "@ComponentScanning a springframework package (e.g. if you " + "put a @ComponentScan in the default package by mistake)", ex).     } catch (RuntimeException ex) {         throw new IllegalStateException("Error processing condition on " + getName(metadata), ex).     } }
false;private;1;11;;private String getName(AnnotatedTypeMetadata metadata) {     if (metadata instanceof AnnotationMetadata) {         return ((AnnotationMetadata) metadata).getClassName().     }     if (metadata instanceof MethodMetadata) {         MethodMetadata methodMetadata = (MethodMetadata) metadata.         return methodMetadata.getDeclaringClassName() + "." + methodMetadata.getMethodName().     }     return metadata.toString(). }
false;private,static;1;9;;private static String getClassOrMethodName(AnnotatedTypeMetadata metadata) {     if (metadata instanceof ClassMetadata) {         ClassMetadata classMetadata = (ClassMetadata) metadata.         return classMetadata.getClassName().     }     MethodMetadata methodMetadata = (MethodMetadata) metadata.     return methodMetadata.getDeclaringClassName() + "#" + methodMetadata.getMethodName(). }
false;protected,final;2;5;;protected final void logOutcome(String classOrMethodName, ConditionOutcome outcome) {     if (this.logger.isTraceEnabled()) {         this.logger.trace(getLogMessage(classOrMethodName, outcome)).     } }
false;private;2;14;;private StringBuilder getLogMessage(String classOrMethodName, ConditionOutcome outcome) {     StringBuilder message = new StringBuilder().     message.append("Condition ").     message.append(ClassUtils.getShortName(getClass())).     message.append(" on ").     message.append(classOrMethodName).     message.append(outcome.isMatch() ? " matched" : " did not match").     if (StringUtils.hasLength(outcome.getMessage())) {         message.append(" due to ").         message.append(outcome.getMessage()).     }     return message. }
false;private;3;7;;private void recordEvaluation(ConditionContext context, String classOrMethodName, ConditionOutcome outcome) {     if (context.getBeanFactory() != null) {         ConditionEvaluationReport.get(context.getBeanFactory()).recordConditionEvaluation(classOrMethodName, this, outcome).     } }
true;public,abstract;2;2;/**  * Determine the outcome of the match along with suitable log output.  * @param context the condition context  * @param metadata the annotation metadata  * @return the condition outcome  */ ;/**  * Determine the outcome of the match along with suitable log output.  * @param context the condition context  * @param metadata the annotation metadata  * @return the condition outcome  */ public abstract ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata).
true;protected,final;3;9;/**  * Return true if any of the specified conditions match.  * @param context the context  * @param metadata the annotation meta-data  * @param conditions conditions to test  * @return {@code true} if any condition matches.  */ ;/**  * Return true if any of the specified conditions match.  * @param context the context  * @param metadata the annotation meta-data  * @param conditions conditions to test  * @return {@code true} if any condition matches.  */ protected final boolean anyMatches(ConditionContext context, AnnotatedTypeMetadata metadata, Condition... conditions) {     for (Condition condition : conditions) {         if (matches(context, metadata, condition)) {             return true.         }     }     return false. }
true;protected,final;3;8;/**  * Return true if any of the specified condition matches.  * @param context the context  * @param metadata the annotation meta-data  * @param condition condition to test  * @return {@code true} if the condition matches.  */ ;/**  * Return true if any of the specified condition matches.  * @param context the context  * @param metadata the annotation meta-data  * @param condition condition to test  * @return {@code true} if the condition matches.  */ protected final boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata, Condition condition) {     if (condition instanceof SpringBootCondition) {         return ((SpringBootCondition) condition).getMatchOutcome(context, metadata).isMatch().     }     return condition.matches(context, metadata). }
