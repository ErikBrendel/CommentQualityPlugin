commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Bean public JsonComponentModule jsonComponentModule() {     return new JsonComponentModule(). }
false;public;1;6;;@Bean @Primary @ConditionalOnMissingBean public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) {     return builder.createXmlMapper(false).build(). }
false;public;1;12;;@Bean public SimpleModule jodaDateTimeSerializationModule(JacksonProperties jacksonProperties) {     SimpleModule module = new SimpleModule().     JacksonJodaDateFormat jacksonJodaFormat = getJacksonJodaDateFormat(jacksonProperties).     if (jacksonJodaFormat != null) {         module.addSerializer(DateTime.class, new DateTimeSerializer(jacksonJodaFormat, 0)).     }     return module. }
false;private;1;23;;private JacksonJodaDateFormat getJacksonJodaDateFormat(JacksonProperties jacksonProperties) {     if (jacksonProperties.getJodaDateTimeFormat() != null) {         return new JacksonJodaDateFormat(DateTimeFormat.forPattern(jacksonProperties.getJodaDateTimeFormat()).withZoneUTC()).     }     if (jacksonProperties.getDateFormat() != null) {         try {             return new JacksonJodaDateFormat(DateTimeFormat.forPattern(jacksonProperties.getDateFormat()).withZoneUTC()).         } catch (IllegalArgumentException ex) {             if (logger.isWarnEnabled()) {                 logger.warn("spring.jackson.date-format could not be used to " + "configure formatting of Joda's DateTime. You may want " + "to configure spring.jackson.joda-date-time-format as " + "well.").             }         }     }     return null. }
false;public;0;5;;@Bean @ConditionalOnMissingBean public ParameterNamesModule parameterNamesModule() {     return new ParameterNamesModule(JsonCreator.Mode.DEFAULT). }
false;public;2;10;;@Bean @ConditionalOnMissingBean public Jackson2ObjectMapperBuilder jacksonObjectMapperBuilder(ApplicationContext applicationContext, List<Jackson2ObjectMapperBuilderCustomizer> customizers) {     Jackson2ObjectMapperBuilder builder = new Jackson2ObjectMapperBuilder().     builder.applicationContext(applicationContext).     customize(builder, customizers).     return builder. }
false;private;2;6;;private void customize(Jackson2ObjectMapperBuilder builder, List<Jackson2ObjectMapperBuilderCustomizer> customizers) {     for (Jackson2ObjectMapperBuilderCustomizer customizer : customizers) {         customizer.customize(builder).     } }
false;public;2;7;;@Bean public StandardJackson2ObjectMapperBuilderCustomizer standardJacksonObjectMapperBuilderCustomizer(ApplicationContext applicationContext, JacksonProperties jacksonProperties) {     return new StandardJackson2ObjectMapperBuilderCustomizer(applicationContext, jacksonProperties). }
false;public;0;4;;@Override public int getOrder() {     return 0. }
false;public;1;22;;@Override public void customize(Jackson2ObjectMapperBuilder builder) {     if (this.jacksonProperties.getDefaultPropertyInclusion() != null) {         builder.serializationInclusion(this.jacksonProperties.getDefaultPropertyInclusion()).     }     if (this.jacksonProperties.getTimeZone() != null) {         builder.timeZone(this.jacksonProperties.getTimeZone()).     }     configureFeatures(builder, FEATURE_DEFAULTS).     configureVisibility(builder, this.jacksonProperties.getVisibility()).     configureFeatures(builder, this.jacksonProperties.getDeserialization()).     configureFeatures(builder, this.jacksonProperties.getSerialization()).     configureFeatures(builder, this.jacksonProperties.getMapper()).     configureFeatures(builder, this.jacksonProperties.getParser()).     configureFeatures(builder, this.jacksonProperties.getGenerator()).     configureDateFormat(builder).     configurePropertyNamingStrategy(builder).     configureModules(builder).     configureLocale(builder). }
false;private;2;13;;private void configureFeatures(Jackson2ObjectMapperBuilder builder, Map<?, Boolean> features) {     features.forEach((feature, value) -> {         if (value != null) {             if (value) {                 builder.featuresToEnable(feature).             } else {                 builder.featuresToDisable(feature).             }         }     }). }
false;private;2;4;;private void configureVisibility(Jackson2ObjectMapperBuilder builder, Map<PropertyAccessor, JsonAutoDetect.Visibility> visibilities) {     visibilities.forEach(builder::visibility). }
false;private;1;26;;private void configureDateFormat(Jackson2ObjectMapperBuilder builder) {     // We support a fully qualified class name extending DateFormat or a date     // pattern string value     String dateFormat = this.jacksonProperties.getDateFormat().     if (dateFormat != null) {         try {             Class<?> dateFormatClass = ClassUtils.forName(dateFormat, null).             builder.dateFormat((DateFormat) BeanUtils.instantiateClass(dateFormatClass)).         } catch (ClassNotFoundException ex) {             SimpleDateFormat simpleDateFormat = new SimpleDateFormat(dateFormat).             // Since Jackson 2.6.3 we always need to set a TimeZone (see             // gh-4170). If none in our properties fallback to the Jackson's             // default             TimeZone timeZone = this.jacksonProperties.getTimeZone().             if (timeZone == null) {                 timeZone = new ObjectMapper().getSerializationConfig().getTimeZone().             }             simpleDateFormat.setTimeZone(timeZone).             builder.dateFormat(simpleDateFormat).         }     } }
false;private;1;17;;private void configurePropertyNamingStrategy(Jackson2ObjectMapperBuilder builder) {     // We support a fully qualified class name extending Jackson's     // PropertyNamingStrategy or a string value corresponding to the constant     // names in PropertyNamingStrategy which hold default provided     // implementations     String strategy = this.jacksonProperties.getPropertyNamingStrategy().     if (strategy != null) {         try {             configurePropertyNamingStrategyClass(builder, ClassUtils.forName(strategy, null)).         } catch (ClassNotFoundException ex) {             configurePropertyNamingStrategyField(builder, strategy).         }     } }
false;private;2;6;;private void configurePropertyNamingStrategyClass(Jackson2ObjectMapperBuilder builder, Class<?> propertyNamingStrategyClass) {     builder.propertyNamingStrategy((PropertyNamingStrategy) BeanUtils.instantiateClass(propertyNamingStrategyClass)). }
false;private;2;16;;private void configurePropertyNamingStrategyField(Jackson2ObjectMapperBuilder builder, String fieldName) {     // Find the field (this way we automatically support new constants     // that may be added by Jackson in the future)     Field field = ReflectionUtils.findField(PropertyNamingStrategy.class, fieldName, PropertyNamingStrategy.class).     Assert.notNull(field, () -> "Constant named '" + fieldName + "' not found on " + PropertyNamingStrategy.class.getName()).     try {         builder.propertyNamingStrategy((PropertyNamingStrategy) field.get(null)).     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
false;private;1;5;;private void configureModules(Jackson2ObjectMapperBuilder builder) {     Collection<Module> moduleBeans = getBeans(this.applicationContext, Module.class).     builder.modulesToInstall(moduleBeans.toArray(new Module[0])). }
false;private;1;6;;private void configureLocale(Jackson2ObjectMapperBuilder builder) {     Locale locale = this.jacksonProperties.getLocale().     if (locale != null) {         builder.locale(locale).     } }
false;private,static;2;5;;private static <T> Collection<T> getBeans(ListableBeanFactory beanFactory, Class<T> type) {     return BeanFactoryUtils.beansOfTypeIncludingAncestors(beanFactory, type).values(). }
