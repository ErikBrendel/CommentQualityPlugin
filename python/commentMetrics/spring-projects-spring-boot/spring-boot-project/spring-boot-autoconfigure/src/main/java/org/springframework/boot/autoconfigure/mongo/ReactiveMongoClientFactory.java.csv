commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Creates a {@link MongoClient} using the given {@code settings}. If the environment  * contains a {@code local.mongo.port} property, it is used to configure a client to  * an embedded MongoDB instance.  * @param settings the settings  * @return the Mongo client  */ ;/**  * Creates a {@link MongoClient} using the given {@code settings}. If the environment  * contains a {@code local.mongo.port} property, it is used to configure a client to  * an embedded MongoDB instance.  * @param settings the settings  * @return the Mongo client  */ public MongoClient createMongoClient(MongoClientSettings settings) {     Integer embeddedPort = getEmbeddedPort().     if (embeddedPort != null) {         return createEmbeddedMongoClient(settings, embeddedPort).     }     return createNetworkMongoClient(settings). }
false;private;0;9;;private Integer getEmbeddedPort() {     if (this.environment != null) {         String localPort = this.environment.getProperty("local.mongo.port").         if (localPort != null) {             return Integer.valueOf(localPort).         }     }     return null. }
false;private;2;9;;private MongoClient createEmbeddedMongoClient(MongoClientSettings settings, int port) {     Builder builder = builder(settings).     String host = (this.properties.getHost() != null) ? this.properties.getHost() : "localhost".     builder.applyToClusterSettings((cluster) -> cluster.hosts(Collections.singletonList(new ServerAddress(host, port)))).     return createMongoClient(builder). }
false;private;1;8;;private MongoClient createNetworkMongoClient(MongoClientSettings settings) {     if (hasCustomAddress() || hasCustomCredentials()) {         return createCredentialNetworkMongoClient(settings).     }     ConnectionString connectionString = new ConnectionString(this.properties.determineUri()).     return createMongoClient(createBuilder(settings, connectionString)). }
false;private;1;14;;private MongoClient createCredentialNetworkMongoClient(MongoClientSettings settings) {     Assert.state(this.properties.getUri() == null, "Invalid mongo configuration, " + "either uri or host/port/credentials must be specified").     Builder builder = builder(settings).     if (hasCustomCredentials()) {         applyCredentials(builder).     }     String host = getOrDefault(this.properties.getHost(), "localhost").     int port = getOrDefault(this.properties.getPort(), MongoProperties.DEFAULT_PORT).     ServerAddress serverAddress = new ServerAddress(host, port).     builder.applyToClusterSettings((cluster) -> cluster.hosts(Collections.singletonList(serverAddress))).     return createMongoClient(builder). }
false;private;1;7;;private void applyCredentials(Builder builder) {     String database = (this.properties.getAuthenticationDatabase() != null) ? this.properties.getAuthenticationDatabase() : this.properties.getMongoClientDatabase().     builder.credential((MongoCredential.createCredential(this.properties.getUsername(), database, this.properties.getPassword()))). }
false;private;2;3;;private <T> T getOrDefault(T value, T defaultValue) {     return (value != null) ? value : defaultValue. }
false;private;1;4;;private MongoClient createMongoClient(Builder builder) {     customize(builder).     return MongoClients.create(builder.build()). }
false;private;2;4;;private Builder createBuilder(MongoClientSettings settings, ConnectionString connection) {     return builder(settings).applyConnectionString(connection). }
false;private;1;5;;private void customize(MongoClientSettings.Builder builder) {     for (MongoClientSettingsBuilderCustomizer customizer : this.builderCustomizers) {         customizer.customize(builder).     } }
false;private;0;3;;private boolean hasCustomAddress() {     return this.properties.getHost() != null || this.properties.getPort() != null. }
false;private;0;4;;private boolean hasCustomCredentials() {     return this.properties.getUsername() != null && this.properties.getPassword() != null. }
false;private;1;6;;private Builder builder(MongoClientSettings settings) {     if (settings == null) {         return MongoClientSettings.builder().     }     return MongoClientSettings.builder(settings). }
