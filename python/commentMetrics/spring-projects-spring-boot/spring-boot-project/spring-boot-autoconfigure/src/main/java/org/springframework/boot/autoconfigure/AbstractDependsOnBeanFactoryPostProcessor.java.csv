commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {     for (String beanName : getBeanNames(beanFactory)) {         BeanDefinition definition = getBeanDefinition(beanName, beanFactory).         String[] dependencies = definition.getDependsOn().         for (String bean : this.dependsOn) {             dependencies = StringUtils.addStringToArray(dependencies, bean).         }         definition.setDependsOn(dependencies).     } }
false;private;1;13;;private Iterable<String> getBeanNames(ListableBeanFactory beanFactory) {     Set<String> names = new HashSet<>().     names.addAll(Arrays.asList(BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, this.beanClass, true, false))).     if (this.factoryBeanClass != null) {         for (String factoryBeanName : BeanFactoryUtils.beanNamesForTypeIncludingAncestors(beanFactory, this.factoryBeanClass, true, false)) {             names.add(BeanFactoryUtils.transformedBeanName(factoryBeanName)).         }     }     return names. }
false;private,static;2;14;;private static BeanDefinition getBeanDefinition(String beanName, ConfigurableListableBeanFactory beanFactory) {     try {         return beanFactory.getBeanDefinition(beanName).     } catch (NoSuchBeanDefinitionException ex) {         BeanFactory parentBeanFactory = beanFactory.getParentBeanFactory().         if (parentBeanFactory instanceof ConfigurableListableBeanFactory) {             return getBeanDefinition(beanName, (ConfigurableListableBeanFactory) parentBeanFactory).         }         throw ex.     } }
