commented;modifiers;parameterAmount;loc;comment;code
false;public;2;27;;@Bean @ConditionalOnMissingBean @SuppressWarnings("deprecation") public Cluster cassandraCluster(CassandraProperties properties, ObjectProvider<ClusterBuilderCustomizer> builderCustomizers) {     PropertyMapper map = PropertyMapper.get().     Cluster.Builder builder = Cluster.builder().withClusterName(properties.getClusterName()).withPort(properties.getPort()).     map.from(properties::getUsername).whenNonNull().to((username) -> builder.withCredentials(username, properties.getPassword())).     map.from(properties::getCompression).whenNonNull().to(builder::withCompression).     QueryOptions queryOptions = getQueryOptions(properties).     map.from(queryOptions).to(builder::withQueryOptions).     SocketOptions socketOptions = getSocketOptions(properties).     map.from(socketOptions).to(builder::withSocketOptions).     map.from(properties::isSsl).whenTrue().toCall(builder::withSSL).     PoolingOptions poolingOptions = getPoolingOptions(properties).     map.from(poolingOptions).to(builder::withPoolingOptions).     map.from(properties::getContactPoints).as(StringUtils::toStringArray).to(builder::addContactPoints).     map.from(properties::isJmxEnabled).whenFalse().toCall(builder::withoutJMXReporting).     builderCustomizers.orderedStream().forEach((customizer) -> customizer.customize(builder)).     return builder.build(). }
false;private;1;10;;private QueryOptions getQueryOptions(CassandraProperties properties) {     PropertyMapper map = PropertyMapper.get().     QueryOptions options = new QueryOptions().     map.from(properties::getConsistencyLevel).whenNonNull().to(options::setConsistencyLevel).     map.from(properties::getSerialConsistencyLevel).whenNonNull().to(options::setSerialConsistencyLevel).     map.from(properties::getFetchSize).to(options::setFetchSize).     return options. }
false;private;1;9;;private SocketOptions getSocketOptions(CassandraProperties properties) {     PropertyMapper map = PropertyMapper.get().     SocketOptions options = new SocketOptions().     map.from(properties::getConnectTimeout).whenNonNull().asInt(Duration::toMillis).to(options::setConnectTimeoutMillis).     map.from(properties::getReadTimeout).whenNonNull().asInt(Duration::toMillis).to(options::setReadTimeoutMillis).     return options. }
false;private;1;13;;private PoolingOptions getPoolingOptions(CassandraProperties properties) {     PropertyMapper map = PropertyMapper.get().     CassandraProperties.Pool poolProperties = properties.getPool().     PoolingOptions options = new PoolingOptions().     map.from(poolProperties::getIdleTimeout).whenNonNull().asInt(Duration::getSeconds).to(options::setIdleTimeoutSeconds).     map.from(poolProperties::getPoolTimeout).whenNonNull().asInt(Duration::toMillis).to(options::setPoolTimeoutMillis).     map.from(poolProperties::getHeartbeatInterval).whenNonNull().asInt(Duration::getSeconds).to(options::setHeartbeatIntervalSeconds).     map.from(poolProperties::getMaxQueueSize).to(options::setMaxQueueSize).     return options. }
