commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getOrder() {     return 0. }
false;public;1;26;;@Override public void customize(ConfigurableJettyWebServerFactory factory) {     ServerProperties properties = this.serverProperties.     ServerProperties.Jetty jettyProperties = properties.getJetty().     factory.setUseForwardHeaders(getOrDeduceUseForwardHeaders(properties, this.environment)).     PropertyMapper propertyMapper = PropertyMapper.get().     propertyMapper.from(jettyProperties::getAcceptors).whenNonNull().to(factory::setAcceptors).     propertyMapper.from(jettyProperties::getSelectors).whenNonNull().to(factory::setSelectors).     propertyMapper.from(properties::getMaxHttpHeaderSize).whenNonNull().asInt(DataSize::toBytes).when(this::isPositive).to((maxHttpHeaderSize) -> factory.addServerCustomizers(new MaxHttpHeaderSizeCustomizer(maxHttpHeaderSize))).     propertyMapper.from(jettyProperties::getMaxHttpPostSize).asInt(DataSize::toBytes).when(this::isPositive).to((maxHttpPostSize) -> customizeMaxHttpPostSize(factory, maxHttpPostSize)).     propertyMapper.from(properties::getConnectionTimeout).whenNonNull().to((connectionTimeout) -> customizeConnectionTimeout(factory, connectionTimeout)).     propertyMapper.from(jettyProperties::getAccesslog).when(ServerProperties.Jetty.Accesslog::isEnabled).to((accesslog) -> customizeAccessLog(factory, accesslog)). }
false;private;1;3;;private boolean isPositive(Integer value) {     return value > 0. }
false;private;2;8;;private boolean getOrDeduceUseForwardHeaders(ServerProperties serverProperties, Environment environment) {     if (serverProperties.isUseForwardHeaders() != null) {         return serverProperties.isUseForwardHeaders().     }     CloudPlatform platform = CloudPlatform.getActive(environment).     return platform != null && platform.isUsingForwardHeaders(). }
false;private;2;11;;private void customizeConnectionTimeout(ConfigurableJettyWebServerFactory factory, Duration connectionTimeout) {     factory.addServerCustomizers((server) -> {         for (org.eclipse.jetty.server.Connector connector : server.getConnectors()) {             if (connector instanceof AbstractConnector) {                 ((AbstractConnector) connector).setIdleTimeout(connectionTimeout.toMillis()).             }         }     }). }
false;public;1;4;;@Override public void customize(Server server) {     setHandlerMaxHttpPostSize(maxHttpPostSize, server.getHandlers()). }
false;private;2;16;;private void setHandlerMaxHttpPostSize(int maxHttpPostSize, Handler... handlers) {     for (Handler handler : handlers) {         if (handler instanceof ContextHandler) {             ((ContextHandler) handler).setMaxFormContentSize(maxHttpPostSize).         } else if (handler instanceof HandlerWrapper) {             setHandlerMaxHttpPostSize(maxHttpPostSize, ((HandlerWrapper) handler).getHandler()).         } else if (handler instanceof HandlerCollection) {             setHandlerMaxHttpPostSize(maxHttpPostSize, ((HandlerCollection) handler).getHandlers()).         }     } }
false;private;2;28;;private void customizeMaxHttpPostSize(ConfigurableJettyWebServerFactory factory, int maxHttpPostSize) {     factory.addServerCustomizers(new JettyServerCustomizer() {          @Override         public void customize(Server server) {             setHandlerMaxHttpPostSize(maxHttpPostSize, server.getHandlers()).         }          private void setHandlerMaxHttpPostSize(int maxHttpPostSize, Handler... handlers) {             for (Handler handler : handlers) {                 if (handler instanceof ContextHandler) {                     ((ContextHandler) handler).setMaxFormContentSize(maxHttpPostSize).                 } else if (handler instanceof HandlerWrapper) {                     setHandlerMaxHttpPostSize(maxHttpPostSize, ((HandlerWrapper) handler).getHandler()).                 } else if (handler instanceof HandlerCollection) {                     setHandlerMaxHttpPostSize(maxHttpPostSize, ((HandlerCollection) handler).getHandlers()).                 }             }         }     }). }
false;private;2;28;;private void customizeAccessLog(ConfigurableJettyWebServerFactory factory, ServerProperties.Jetty.Accesslog properties) {     factory.addServerCustomizers((server) -> {         NCSARequestLog log = new NCSARequestLog().         if (properties.getFilename() != null) {             log.setFilename(properties.getFilename()).         }         if (properties.getFileDateFormat() != null) {             log.setFilenameDateFormat(properties.getFileDateFormat()).         }         log.setRetainDays(properties.getRetentionPeriod()).         log.setAppend(properties.isAppend()).         log.setExtended(properties.isExtendedFormat()).         if (properties.getDateFormat() != null) {             log.setLogDateFormat(properties.getDateFormat()).         }         if (properties.getLocale() != null) {             log.setLogLocale(properties.getLocale()).         }         if (properties.getTimeZone() != null) {             log.setLogTimeZone(properties.getTimeZone().getID()).         }         log.setLogCookies(properties.isLogCookies()).         log.setLogServer(properties.isLogServer()).         log.setLogLatency(properties.isLogLatency()).         server.setRequestLog(log).     }). }
false;public;1;4;;@Override public void customize(Server server) {     Arrays.stream(server.getConnectors()).forEach(this::customize). }
false;private;1;3;;private void customize(org.eclipse.jetty.server.Connector connector) {     connector.getConnectionFactories().forEach(this::customize). }
false;private;1;6;;private void customize(ConnectionFactory factory) {     if (factory instanceof HttpConfiguration.ConnectionFactory) {         ((HttpConfiguration.ConnectionFactory) factory).getHttpConfiguration().setRequestHeaderSize(this.maxHttpHeaderSize).     } }
