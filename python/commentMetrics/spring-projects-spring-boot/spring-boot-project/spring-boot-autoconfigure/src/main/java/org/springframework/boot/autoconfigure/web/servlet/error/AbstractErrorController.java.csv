commented;modifiers;parameterAmount;loc;comment;code
false;private;1;9;;private List<ErrorViewResolver> sortErrorViewResolvers(List<ErrorViewResolver> resolvers) {     List<ErrorViewResolver> sorted = new ArrayList<>().     if (resolvers != null) {         sorted.addAll(resolvers).         AnnotationAwareOrderComparator.sortIfNecessary(sorted).     }     return sorted. }
false;protected;2;5;;protected Map<String, Object> getErrorAttributes(HttpServletRequest request, boolean includeStackTrace) {     WebRequest webRequest = new ServletWebRequest(request).     return this.errorAttributes.getErrorAttributes(webRequest, includeStackTrace). }
false;protected;1;7;;protected boolean getTraceParameter(HttpServletRequest request) {     String parameter = request.getParameter("trace").     if (parameter == null) {         return false.     }     return !"false".equalsIgnoreCase(parameter). }
false;protected;1;13;;protected HttpStatus getStatus(HttpServletRequest request) {     Integer statusCode = (Integer) request.getAttribute("javax.servlet.error.status_code").     if (statusCode == null) {         return HttpStatus.INTERNAL_SERVER_ERROR.     }     try {         return HttpStatus.valueOf(statusCode).     } catch (Exception ex) {         return HttpStatus.INTERNAL_SERVER_ERROR.     } }
true;protected;4;10;/**  * Resolve any specific error views. By default this method delegates to  * {@link ErrorViewResolver ErrorViewResolvers}.  * @param request the request  * @param response the response  * @param status the HTTP status  * @param model the suggested model  * @return a specific {@link ModelAndView} or {@code null} if the default should be  * used  * @since 1.4.0  */ ;/**  * Resolve any specific error views. By default this method delegates to  * {@link ErrorViewResolver ErrorViewResolvers}.  * @param request the request  * @param response the response  * @param status the HTTP status  * @param model the suggested model  * @return a specific {@link ModelAndView} or {@code null} if the default should be  * used  * @since 1.4.0  */ protected ModelAndView resolveErrorView(HttpServletRequest request, HttpServletResponse response, HttpStatus status, Map<String, Object> model) {     for (ErrorViewResolver resolver : this.errorViewResolvers) {         ModelAndView modelAndView = resolver.resolveErrorView(request, status, model).         if (modelAndView != null) {             return modelAndView.         }     }     return null. }
