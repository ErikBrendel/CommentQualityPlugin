commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@PostConstruct public void checkTemplateLocationExists() {     boolean checkTemplateLocation = this.properties.isCheckTemplateLocation().     if (checkTemplateLocation) {         TemplateLocation location = new TemplateLocation(this.properties.getPrefix()).         if (!location.exists(this.applicationContext)) {             logger.warn("Cannot find template location: " + location + " (please add some templates or check " + "your Thymeleaf configuration)").         }     } }
false;public;0;18;;@Bean public SpringResourceTemplateResolver defaultTemplateResolver() {     SpringResourceTemplateResolver resolver = new SpringResourceTemplateResolver().     resolver.setApplicationContext(this.applicationContext).     resolver.setPrefix(this.properties.getPrefix()).     resolver.setSuffix(this.properties.getSuffix()).     resolver.setTemplateMode(this.properties.getMode()).     if (this.properties.getEncoding() != null) {         resolver.setCharacterEncoding(this.properties.getEncoding().name()).     }     resolver.setCacheable(this.properties.isCache()).     Integer order = this.properties.getTemplateResolverOrder().     if (order != null) {         resolver.setOrder(order).     }     resolver.setCheckExistence(this.properties.isCheckTemplate()).     return resolver. }
false;public;3;13;;@Bean @ConditionalOnMissingBean public SpringTemplateEngine templateEngine(ThymeleafProperties properties, ObjectProvider<ITemplateResolver> templateResolvers, ObjectProvider<IDialect> dialects) {     SpringTemplateEngine engine = new SpringTemplateEngine().     engine.setEnableSpringELCompiler(properties.isEnableSpringElCompiler()).     engine.setRenderHiddenMarkersBeforeCheckboxes(properties.isRenderHiddenMarkersBeforeCheckboxes()).     templateResolvers.orderedStream().forEach(engine::addTemplateResolver).     dialects.orderedStream().forEach(engine::addDialect).     return engine. }
false;public;0;9;;@Bean @ConditionalOnEnabledResourceChain @ConditionalOnMissingFilterBean(ResourceUrlEncodingFilter.class) public FilterRegistrationBean<ResourceUrlEncodingFilter> resourceUrlEncodingFilter() {     FilterRegistrationBean<ResourceUrlEncodingFilter> registration = new FilterRegistrationBean<>(new ResourceUrlEncodingFilter()).     registration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ERROR).     return registration. }
false;public;2;20;;@Bean @ConditionalOnMissingBean(name = "thymeleafViewResolver") public ThymeleafViewResolver thymeleafViewResolver(ThymeleafProperties properties, SpringTemplateEngine templateEngine) {     ThymeleafViewResolver resolver = new ThymeleafViewResolver().     resolver.setTemplateEngine(templateEngine).     resolver.setCharacterEncoding(properties.getEncoding().name()).     resolver.setContentType(appendCharset(properties.getServlet().getContentType(), resolver.getCharacterEncoding())).     resolver.setProducePartialOutputWhileProcessing(properties.getServlet().isProducePartialOutputWhileProcessing()).     resolver.setExcludedViewNames(properties.getExcludedViewNames()).     resolver.setViewNames(properties.getViewNames()).     // This resolver acts as a fallback resolver (e.g. like a     // InternalResourceViewResolver) so it needs to have low precedence     resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5).     resolver.setCache(properties.isCache()).     return resolver. }
false;private;2;9;;private String appendCharset(MimeType type, String charset) {     if (type.getCharset() != null) {         return type.toString().     }     LinkedHashMap<String, String> parameters = new LinkedHashMap<>().     parameters.put("charset", charset).     parameters.putAll(type.getParameters()).     return new MimeType(type, parameters).toString(). }
false;public;3;13;;@Bean @ConditionalOnMissingBean(ISpringWebFluxTemplateEngine.class) public SpringWebFluxTemplateEngine templateEngine(ThymeleafProperties properties, ObjectProvider<ITemplateResolver> templateResolvers, ObjectProvider<IDialect> dialects) {     SpringWebFluxTemplateEngine engine = new SpringWebFluxTemplateEngine().     engine.setEnableSpringELCompiler(properties.isEnableSpringElCompiler()).     engine.setRenderHiddenMarkersBeforeCheckboxes(properties.isRenderHiddenMarkersBeforeCheckboxes()).     templateResolvers.orderedStream().forEach(engine::addTemplateResolver).     dialects.orderedStream().forEach(engine::addDialect).     return engine. }
false;public;2;14;;@Bean @ConditionalOnMissingBean(name = "thymeleafReactiveViewResolver") public ThymeleafReactiveViewResolver thymeleafViewResolver(ISpringWebFluxTemplateEngine templateEngine, ThymeleafProperties properties) {     ThymeleafReactiveViewResolver resolver = new ThymeleafReactiveViewResolver().     resolver.setTemplateEngine(templateEngine).     mapProperties(properties, resolver).     mapReactiveProperties(properties.getReactive(), resolver).     // This resolver acts as a fallback resolver (e.g. like a     // InternalResourceViewResolver) so it needs to have low precedence     resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5).     return resolver. }
false;private;2;7;;private void mapProperties(ThymeleafProperties properties, ThymeleafReactiveViewResolver resolver) {     PropertyMapper map = PropertyMapper.get().     map.from(properties::getEncoding).to(resolver::setDefaultCharset).     resolver.setExcludedViewNames(properties.getExcludedViewNames()).     resolver.setViewNames(properties.getViewNames()). }
false;private;2;11;;private void mapReactiveProperties(Reactive properties, ThymeleafReactiveViewResolver resolver) {     PropertyMapper map = PropertyMapper.get().     map.from(properties::getMediaTypes).whenNonNull().to(resolver::setSupportedMediaTypes).     map.from(properties::getMaxChunkSize).asInt(DataSize::toBytes).when((size) -> size > 0).to(resolver::setResponseMaxChunkSizeBytes).     map.from(properties::getFullModeViewNames).to(resolver::setFullModeViewNames).     map.from(properties::getChunkedModeViewNames).to(resolver::setChunkedModeViewNames). }
false;public;0;5;;@Bean @ConditionalOnMissingBean public LayoutDialect layoutDialect() {     return new LayoutDialect(). }
false;public;0;5;;@Bean @ConditionalOnMissingBean public DataAttributeDialect dialect() {     return new DataAttributeDialect(). }
false;public;0;5;;@Bean @ConditionalOnMissingBean public SpringSecurityDialect securityDialect() {     return new SpringSecurityDialect(). }
false;public;0;5;;@Bean @ConditionalOnMissingBean public Java8TimeDialect java8TimeDialect() {     return new Java8TimeDialect(). }
