commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Bean @ConditionalOnMissingBean public GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {     GsonBuilder builder = new GsonBuilder().     customizers.forEach((c) -> c.customize(builder)).     return builder. }
false;public;1;5;;@Bean @ConditionalOnMissingBean public Gson gson(GsonBuilder gsonBuilder) {     return gsonBuilder.create(). }
false;public;1;5;;@Bean public StandardGsonBuilderCustomizer standardGsonBuilderCustomizer(GsonProperties gsonProperties) {     return new StandardGsonBuilderCustomizer(gsonProperties). }
false;public;0;4;;@Override public int getOrder() {     return 0. }
false;public;1;22;;@Override public void customize(GsonBuilder builder) {     GsonProperties properties = this.properties.     PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull().     map.from(properties::getGenerateNonExecutableJson).toCall(builder::generateNonExecutableJson).     map.from(properties::getExcludeFieldsWithoutExposeAnnotation).toCall(builder::excludeFieldsWithoutExposeAnnotation).     map.from(properties::getSerializeNulls).toCall(builder::serializeNulls).     map.from(properties::getEnableComplexMapKeySerialization).toCall(builder::enableComplexMapKeySerialization).     map.from(properties::getDisableInnerClassSerialization).toCall(builder::disableInnerClassSerialization).     map.from(properties::getLongSerializationPolicy).to(builder::setLongSerializationPolicy).     map.from(properties::getFieldNamingPolicy).to(builder::setFieldNamingPolicy).     map.from(properties::getPrettyPrinting).toCall(builder::setPrettyPrinting).     map.from(properties::getLenient).toCall(builder::setLenient).     map.from(properties::getDisableHtmlEscaping).toCall(builder::disableHtmlEscaping).     map.from(properties::getDateFormat).to(builder::setDateFormat). }
