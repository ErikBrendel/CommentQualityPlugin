commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.beanClassLoader = classLoader. }
false;public;2;6;;@Bean public JCacheCacheManager cacheManager(CacheManagerCustomizers customizers, CacheManager jCacheCacheManager) {     JCacheCacheManager cacheManager = new JCacheCacheManager(jCacheCacheManager).     return customizers.customize(cacheManager). }
false;public;4;20;;@Bean @ConditionalOnMissingBean public CacheManager jCacheCacheManager(CacheProperties cacheProperties, ObjectProvider<javax.cache.configuration.Configuration<?, ?>> defaultCacheConfiguration, ObjectProvider<JCacheManagerCustomizer> cacheManagerCustomizers, ObjectProvider<JCachePropertiesCustomizer> cachePropertiesCustomizers) throws IOException {     CacheManager jCacheCacheManager = createCacheManager(cacheProperties, cachePropertiesCustomizers).     List<String> cacheNames = cacheProperties.getCacheNames().     if (!CollectionUtils.isEmpty(cacheNames)) {         for (String cacheName : cacheNames) {             jCacheCacheManager.createCache(cacheName, defaultCacheConfiguration.getIfAvailable(MutableConfiguration::new)).         }     }     cacheManagerCustomizers.orderedStream().forEach((customizer) -> customizer.customize(jCacheCacheManager)).     return jCacheCacheManager. }
false;private;2;15;;private CacheManager createCacheManager(CacheProperties cacheProperties, ObjectProvider<JCachePropertiesCustomizer> cachePropertiesCustomizers) throws IOException {     CachingProvider cachingProvider = getCachingProvider(cacheProperties.getJcache().getProvider()).     Properties properties = createCacheManagerProperties(cachePropertiesCustomizers, cacheProperties).     Resource configLocation = cacheProperties.resolveConfigLocation(cacheProperties.getJcache().getConfig()).     if (configLocation != null) {         return cachingProvider.getCacheManager(configLocation.getURI(), this.beanClassLoader, properties).     }     return cachingProvider.getCacheManager(null, this.beanClassLoader, properties). }
false;private;1;6;;private CachingProvider getCachingProvider(String cachingProviderFqn) {     if (StringUtils.hasText(cachingProviderFqn)) {         return Caching.getCachingProvider(cachingProviderFqn).     }     return Caching.getCachingProvider(). }
false;private;2;8;;private Properties createCacheManagerProperties(ObjectProvider<JCachePropertiesCustomizer> cachePropertiesCustomizers, CacheProperties cacheProperties) {     Properties properties = new Properties().     cachePropertiesCustomizers.orderedStream().forEach((customizer) -> customizer.customize(cacheProperties, properties)).     return properties. }
false;public;2;24;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     ConditionMessage.Builder message = ConditionMessage.forCondition("JCache").     String providerProperty = "spring.cache.jcache.provider".     if (context.getEnvironment().containsProperty(providerProperty)) {         return ConditionOutcome.match(message.because("JCache provider specified")).     }     Iterator<CachingProvider> providers = Caching.getCachingProviders().iterator().     if (!providers.hasNext()) {         return ConditionOutcome.noMatch(message.didNotFind("JSR-107 provider").atAll()).     }     providers.next().     if (providers.hasNext()) {         return ConditionOutcome.noMatch(message.foundExactly("multiple JSR-107 providers")).     }     return ConditionOutcome.match(message.foundExactly("single JSR-107 provider")). }
