# id;timestamp;commentText;codeText;commentWords;codeWords
TemplateAvailabilityProviders -> protected TemplateAvailabilityProviders( 			Collection<? extends TemplateAvailabilityProvider> providers);1507173536;Create a new {@link TemplateAvailabilityProviders} instance._@param providers the underlying providers;protected TemplateAvailabilityProviders(_			Collection<? extends TemplateAvailabilityProvider> providers) {_		Assert.notNull(providers, "Providers must not be null")__		this.providers = new ArrayList<>(providers)__	};create,a,new,link,template,availability,providers,instance,param,providers,the,underlying,providers;protected,template,availability,providers,collection,extends,template,availability,provider,providers,assert,not,null,providers,providers,must,not,be,null,this,providers,new,array,list,providers
TemplateAvailabilityProviders -> protected TemplateAvailabilityProviders( 			Collection<? extends TemplateAvailabilityProvider> providers);1525376698;Create a new {@link TemplateAvailabilityProviders} instance._@param providers the underlying providers;protected TemplateAvailabilityProviders(_			Collection<? extends TemplateAvailabilityProvider> providers) {_		Assert.notNull(providers, "Providers must not be null")__		this.providers = new ArrayList<>(providers)__	};create,a,new,link,template,availability,providers,instance,param,providers,the,underlying,providers;protected,template,availability,providers,collection,extends,template,availability,provider,providers,assert,not,null,providers,providers,must,not,be,null,this,providers,new,array,list,providers
TemplateAvailabilityProviders -> protected TemplateAvailabilityProviders( 			Collection<? extends TemplateAvailabilityProvider> providers);1532738143;Create a new {@link TemplateAvailabilityProviders} instance._@param providers the underlying providers;protected TemplateAvailabilityProviders(_			Collection<? extends TemplateAvailabilityProvider> providers) {_		Assert.notNull(providers, "Providers must not be null")__		this.providers = new ArrayList<>(providers)__	};create,a,new,link,template,availability,providers,instance,param,providers,the,underlying,providers;protected,template,availability,providers,collection,extends,template,availability,provider,providers,assert,not,null,providers,providers,must,not,be,null,this,providers,new,array,list,providers
TemplateAvailabilityProviders -> public TemplateAvailabilityProviders(ClassLoader classLoader);1507173536;Create a new {@link TemplateAvailabilityProviders} instance._@param classLoader the source class loader;public TemplateAvailabilityProviders(ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.providers = SpringFactoriesLoader_				.loadFactories(TemplateAvailabilityProvider.class, classLoader)__	};create,a,new,link,template,availability,providers,instance,param,class,loader,the,source,class,loader;public,template,availability,providers,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,providers,spring,factories,loader,load,factories,template,availability,provider,class,class,loader
TemplateAvailabilityProviders -> public TemplateAvailabilityProviders(ClassLoader classLoader);1525376698;Create a new {@link TemplateAvailabilityProviders} instance._@param classLoader the source class loader;public TemplateAvailabilityProviders(ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.providers = SpringFactoriesLoader_				.loadFactories(TemplateAvailabilityProvider.class, classLoader)__	};create,a,new,link,template,availability,providers,instance,param,class,loader,the,source,class,loader;public,template,availability,providers,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,providers,spring,factories,loader,load,factories,template,availability,provider,class,class,loader
TemplateAvailabilityProviders -> public TemplateAvailabilityProviders(ClassLoader classLoader);1532738143;Create a new {@link TemplateAvailabilityProviders} instance._@param classLoader the source class loader;public TemplateAvailabilityProviders(ClassLoader classLoader) {_		Assert.notNull(classLoader, "ClassLoader must not be null")__		this.providers = SpringFactoriesLoader_				.loadFactories(TemplateAvailabilityProvider.class, classLoader)__	};create,a,new,link,template,availability,providers,instance,param,class,loader,the,source,class,loader;public,template,availability,providers,class,loader,class,loader,assert,not,null,class,loader,class,loader,must,not,be,null,this,providers,spring,factories,loader,load,factories,template,availability,provider,class,class,loader
TemplateAvailabilityProviders -> public TemplateAvailabilityProvider getProvider(String view, Environment environment, 			ClassLoader classLoader, ResourceLoader resourceLoader);1507173536;Get the provider that can be used to render the given view._@param view the view to render_@param environment the environment_@param classLoader the class loader_@param resourceLoader the resource loader_@return a {@link TemplateAvailabilityProvider} or null;public TemplateAvailabilityProvider getProvider(String view, Environment environment,_			ClassLoader classLoader, ResourceLoader resourceLoader) {_		Assert.notNull(view, "View must not be null")__		Assert.notNull(environment, "Environment must not be null")__		Assert.notNull(classLoader, "ClassLoader must not be null")__		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		Boolean useCache = environment.getProperty("spring.template.provider.cache",_				Boolean.class, true)__		if (!useCache) {_			return findProvider(view, environment, classLoader, resourceLoader)__		}_		TemplateAvailabilityProvider provider = this.resolved.get(view)__		if (provider == null) {_			synchronized (this.cache) {_				provider = findProvider(view, environment, classLoader, resourceLoader)__				provider = (provider == null ? NONE : provider)__				this.resolved.put(view, provider)__				this.cache.put(view, provider)__			}_		}_		return (provider == NONE ? null : provider)__	};get,the,provider,that,can,be,used,to,render,the,given,view,param,view,the,view,to,render,param,environment,the,environment,param,class,loader,the,class,loader,param,resource,loader,the,resource,loader,return,a,link,template,availability,provider,or,null;public,template,availability,provider,get,provider,string,view,environment,environment,class,loader,class,loader,resource,loader,resource,loader,assert,not,null,view,view,must,not,be,null,assert,not,null,environment,environment,must,not,be,null,assert,not,null,class,loader,class,loader,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,boolean,use,cache,environment,get,property,spring,template,provider,cache,boolean,class,true,if,use,cache,return,find,provider,view,environment,class,loader,resource,loader,template,availability,provider,provider,this,resolved,get,view,if,provider,null,synchronized,this,cache,provider,find,provider,view,environment,class,loader,resource,loader,provider,provider,null,none,provider,this,resolved,put,view,provider,this,cache,put,view,provider,return,provider,none,null,provider
TemplateAvailabilityProviders -> public TemplateAvailabilityProvider getProvider(String view, Environment environment, 			ClassLoader classLoader, ResourceLoader resourceLoader);1525376698;Get the provider that can be used to render the given view._@param view the view to render_@param environment the environment_@param classLoader the class loader_@param resourceLoader the resource loader_@return a {@link TemplateAvailabilityProvider} or null;public TemplateAvailabilityProvider getProvider(String view, Environment environment,_			ClassLoader classLoader, ResourceLoader resourceLoader) {_		Assert.notNull(view, "View must not be null")__		Assert.notNull(environment, "Environment must not be null")__		Assert.notNull(classLoader, "ClassLoader must not be null")__		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		Boolean useCache = environment.getProperty("spring.template.provider.cache",_				Boolean.class, true)__		if (!useCache) {_			return findProvider(view, environment, classLoader, resourceLoader)__		}_		TemplateAvailabilityProvider provider = this.resolved.get(view)__		if (provider == null) {_			synchronized (this.cache) {_				provider = findProvider(view, environment, classLoader, resourceLoader)__				provider = (provider != null ? provider : NONE)__				this.resolved.put(view, provider)__				this.cache.put(view, provider)__			}_		}_		return (provider != NONE ? provider : null)__	};get,the,provider,that,can,be,used,to,render,the,given,view,param,view,the,view,to,render,param,environment,the,environment,param,class,loader,the,class,loader,param,resource,loader,the,resource,loader,return,a,link,template,availability,provider,or,null;public,template,availability,provider,get,provider,string,view,environment,environment,class,loader,class,loader,resource,loader,resource,loader,assert,not,null,view,view,must,not,be,null,assert,not,null,environment,environment,must,not,be,null,assert,not,null,class,loader,class,loader,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,boolean,use,cache,environment,get,property,spring,template,provider,cache,boolean,class,true,if,use,cache,return,find,provider,view,environment,class,loader,resource,loader,template,availability,provider,provider,this,resolved,get,view,if,provider,null,synchronized,this,cache,provider,find,provider,view,environment,class,loader,resource,loader,provider,provider,null,provider,none,this,resolved,put,view,provider,this,cache,put,view,provider,return,provider,none,provider,null
TemplateAvailabilityProviders -> public TemplateAvailabilityProvider getProvider(String view, Environment environment, 			ClassLoader classLoader, ResourceLoader resourceLoader);1532738143;Get the provider that can be used to render the given view._@param view the view to render_@param environment the environment_@param classLoader the class loader_@param resourceLoader the resource loader_@return a {@link TemplateAvailabilityProvider} or null;public TemplateAvailabilityProvider getProvider(String view, Environment environment,_			ClassLoader classLoader, ResourceLoader resourceLoader) {_		Assert.notNull(view, "View must not be null")__		Assert.notNull(environment, "Environment must not be null")__		Assert.notNull(classLoader, "ClassLoader must not be null")__		Assert.notNull(resourceLoader, "ResourceLoader must not be null")__		Boolean useCache = environment.getProperty("spring.template.provider.cache",_				Boolean.class, true)__		if (!useCache) {_			return findProvider(view, environment, classLoader, resourceLoader)__		}_		TemplateAvailabilityProvider provider = this.resolved.get(view)__		if (provider == null) {_			synchronized (this.cache) {_				provider = findProvider(view, environment, classLoader, resourceLoader)__				provider = (provider != null) ? provider : NONE__				this.resolved.put(view, provider)__				this.cache.put(view, provider)__			}_		}_		return (provider != NONE) ? provider : null__	};get,the,provider,that,can,be,used,to,render,the,given,view,param,view,the,view,to,render,param,environment,the,environment,param,class,loader,the,class,loader,param,resource,loader,the,resource,loader,return,a,link,template,availability,provider,or,null;public,template,availability,provider,get,provider,string,view,environment,environment,class,loader,class,loader,resource,loader,resource,loader,assert,not,null,view,view,must,not,be,null,assert,not,null,environment,environment,must,not,be,null,assert,not,null,class,loader,class,loader,must,not,be,null,assert,not,null,resource,loader,resource,loader,must,not,be,null,boolean,use,cache,environment,get,property,spring,template,provider,cache,boolean,class,true,if,use,cache,return,find,provider,view,environment,class,loader,resource,loader,template,availability,provider,provider,this,resolved,get,view,if,provider,null,synchronized,this,cache,provider,find,provider,view,environment,class,loader,resource,loader,provider,provider,null,provider,none,this,resolved,put,view,provider,this,cache,put,view,provider,return,provider,none,provider,null
TemplateAvailabilityProviders -> public List<TemplateAvailabilityProvider> getProviders();1507173536;Return the underlying providers being used._@return the providers being used;public List<TemplateAvailabilityProvider> getProviders() {_		return this.providers__	};return,the,underlying,providers,being,used,return,the,providers,being,used;public,list,template,availability,provider,get,providers,return,this,providers
TemplateAvailabilityProviders -> public List<TemplateAvailabilityProvider> getProviders();1525376698;Return the underlying providers being used._@return the providers being used;public List<TemplateAvailabilityProvider> getProviders() {_		return this.providers__	};return,the,underlying,providers,being,used,return,the,providers,being,used;public,list,template,availability,provider,get,providers,return,this,providers
TemplateAvailabilityProviders -> public List<TemplateAvailabilityProvider> getProviders();1532738143;Return the underlying providers being used._@return the providers being used;public List<TemplateAvailabilityProvider> getProviders() {_		return this.providers__	};return,the,underlying,providers,being,used,return,the,providers,being,used;public,list,template,availability,provider,get,providers,return,this,providers
TemplateAvailabilityProviders -> public TemplateAvailabilityProvider getProvider(String view, 			ApplicationContext applicationContext);1507173536;Get the provider that can be used to render the given view._@param view the view to render_@param applicationContext the application context_@return a {@link TemplateAvailabilityProvider} or null;public TemplateAvailabilityProvider getProvider(String view,_			ApplicationContext applicationContext) {_		Assert.notNull(applicationContext, "ApplicationContext must not be null")__		return getProvider(view, applicationContext.getEnvironment(),_				applicationContext.getClassLoader(), applicationContext)__	};get,the,provider,that,can,be,used,to,render,the,given,view,param,view,the,view,to,render,param,application,context,the,application,context,return,a,link,template,availability,provider,or,null;public,template,availability,provider,get,provider,string,view,application,context,application,context,assert,not,null,application,context,application,context,must,not,be,null,return,get,provider,view,application,context,get,environment,application,context,get,class,loader,application,context
TemplateAvailabilityProviders -> public TemplateAvailabilityProvider getProvider(String view, 			ApplicationContext applicationContext);1525376698;Get the provider that can be used to render the given view._@param view the view to render_@param applicationContext the application context_@return a {@link TemplateAvailabilityProvider} or null;public TemplateAvailabilityProvider getProvider(String view,_			ApplicationContext applicationContext) {_		Assert.notNull(applicationContext, "ApplicationContext must not be null")__		return getProvider(view, applicationContext.getEnvironment(),_				applicationContext.getClassLoader(), applicationContext)__	};get,the,provider,that,can,be,used,to,render,the,given,view,param,view,the,view,to,render,param,application,context,the,application,context,return,a,link,template,availability,provider,or,null;public,template,availability,provider,get,provider,string,view,application,context,application,context,assert,not,null,application,context,application,context,must,not,be,null,return,get,provider,view,application,context,get,environment,application,context,get,class,loader,application,context
TemplateAvailabilityProviders -> public TemplateAvailabilityProvider getProvider(String view, 			ApplicationContext applicationContext);1532738143;Get the provider that can be used to render the given view._@param view the view to render_@param applicationContext the application context_@return a {@link TemplateAvailabilityProvider} or null;public TemplateAvailabilityProvider getProvider(String view,_			ApplicationContext applicationContext) {_		Assert.notNull(applicationContext, "ApplicationContext must not be null")__		return getProvider(view, applicationContext.getEnvironment(),_				applicationContext.getClassLoader(), applicationContext)__	};get,the,provider,that,can,be,used,to,render,the,given,view,param,view,the,view,to,render,param,application,context,the,application,context,return,a,link,template,availability,provider,or,null;public,template,availability,provider,get,provider,string,view,application,context,application,context,assert,not,null,application,context,application,context,must,not,be,null,return,get,provider,view,application,context,get,environment,application,context,get,class,loader,application,context
TemplateAvailabilityProviders -> public TemplateAvailabilityProviders(ApplicationContext applicationContext);1507173536;Create a new {@link TemplateAvailabilityProviders} instance._@param applicationContext the source application context;public TemplateAvailabilityProviders(ApplicationContext applicationContext) {_		this(applicationContext == null ? null : applicationContext.getClassLoader())__	};create,a,new,link,template,availability,providers,instance,param,application,context,the,source,application,context;public,template,availability,providers,application,context,application,context,this,application,context,null,null,application,context,get,class,loader
TemplateAvailabilityProviders -> public TemplateAvailabilityProviders(ApplicationContext applicationContext);1525376698;Create a new {@link TemplateAvailabilityProviders} instance._@param applicationContext the source application context;public TemplateAvailabilityProviders(ApplicationContext applicationContext) {_		this(applicationContext != null ? applicationContext.getClassLoader() : null)__	};create,a,new,link,template,availability,providers,instance,param,application,context,the,source,application,context;public,template,availability,providers,application,context,application,context,this,application,context,null,application,context,get,class,loader,null
TemplateAvailabilityProviders -> public TemplateAvailabilityProviders(ApplicationContext applicationContext);1532738143;Create a new {@link TemplateAvailabilityProviders} instance._@param applicationContext the source application context;public TemplateAvailabilityProviders(ApplicationContext applicationContext) {_		this((applicationContext != null) ? applicationContext.getClassLoader() : null)__	};create,a,new,link,template,availability,providers,instance,param,application,context,the,source,application,context;public,template,availability,providers,application,context,application,context,this,application,context,null,application,context,get,class,loader,null
