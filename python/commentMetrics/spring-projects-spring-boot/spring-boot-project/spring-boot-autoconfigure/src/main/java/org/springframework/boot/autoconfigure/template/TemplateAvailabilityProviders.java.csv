commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;9;;@Override protected boolean removeEldestEntry(Map.Entry<String, TemplateAvailabilityProvider> eldest) {     if (size() > CACHE_LIMIT) {         TemplateAvailabilityProviders.this.resolved.remove(eldest.getKey()).         return true.     }     return false. }
true;public;0;3;/**  * Return the underlying providers being used.  * @return the providers being used  */ ;/**  * Return the underlying providers being used.  * @return the providers being used  */ public List<TemplateAvailabilityProvider> getProviders() {     return this.providers. }
true;public;2;6;/**  * Get the provider that can be used to render the given view.  * @param view the view to render  * @param applicationContext the application context  * @return a {@link TemplateAvailabilityProvider} or null  */ ;/**  * Get the provider that can be used to render the given view.  * @param view the view to render  * @param applicationContext the application context  * @return a {@link TemplateAvailabilityProvider} or null  */ public TemplateAvailabilityProvider getProvider(String view, ApplicationContext applicationContext) {     Assert.notNull(applicationContext, "ApplicationContext must not be null").     return getProvider(view, applicationContext.getEnvironment(), applicationContext.getClassLoader(), applicationContext). }
true;public;4;22;/**  * Get the provider that can be used to render the given view.  * @param view the view to render  * @param environment the environment  * @param classLoader the class loader  * @param resourceLoader the resource loader  * @return a {@link TemplateAvailabilityProvider} or null  */ ;/**  * Get the provider that can be used to render the given view.  * @param view the view to render  * @param environment the environment  * @param classLoader the class loader  * @param resourceLoader the resource loader  * @return a {@link TemplateAvailabilityProvider} or null  */ public TemplateAvailabilityProvider getProvider(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) {     Assert.notNull(view, "View must not be null").     Assert.notNull(environment, "Environment must not be null").     Assert.notNull(classLoader, "ClassLoader must not be null").     Assert.notNull(resourceLoader, "ResourceLoader must not be null").     Boolean useCache = environment.getProperty("spring.template.provider.cache", Boolean.class, true).     if (!useCache) {         return findProvider(view, environment, classLoader, resourceLoader).     }     TemplateAvailabilityProvider provider = this.resolved.get(view).     if (provider == null) {         synchronized (this.cache) {             provider = findProvider(view, environment, classLoader, resourceLoader).             provider = (provider != null) ? provider : NONE.             this.resolved.put(view, provider).             this.cache.put(view, provider).         }     }     return (provider != NONE) ? provider : null. }
false;private;4;11;;private TemplateAvailabilityProvider findProvider(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) {     for (TemplateAvailabilityProvider candidate : this.providers) {         if (candidate.isTemplateAvailable(view, environment, classLoader, resourceLoader)) {             return candidate.         }     }     return null. }
false;public;4;5;;@Override public boolean isTemplateAvailable(String view, Environment environment, ClassLoader classLoader, ResourceLoader resourceLoader) {     return false. }
