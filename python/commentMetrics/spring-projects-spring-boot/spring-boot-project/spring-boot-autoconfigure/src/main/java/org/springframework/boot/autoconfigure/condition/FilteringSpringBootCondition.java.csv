commented;modifiers;parameterAmount;loc;comment;code
false;public;2;20;;@Override public boolean[] match(String[] autoConfigurationClasses, AutoConfigurationMetadata autoConfigurationMetadata) {     ConditionEvaluationReport report = ConditionEvaluationReport.find(this.beanFactory).     ConditionOutcome[] outcomes = getOutcomes(autoConfigurationClasses, autoConfigurationMetadata).     boolean[] match = new boolean[outcomes.length].     for (int i = 0. i < outcomes.length. i++) {         match[i] = (outcomes[i] == null || outcomes[i].isMatch()).         if (!match[i] && outcomes[i] != null) {             logOutcome(autoConfigurationClasses[i], outcomes[i]).             if (report != null) {                 report.recordConditionEvaluation(autoConfigurationClasses[i], this, outcomes[i]).             }         }     }     return match. }
false;protected,abstract;2;2;;protected abstract ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses, AutoConfigurationMetadata autoConfigurationMetadata).
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     this.beanFactory = beanFactory. }
false;protected,final;0;3;;protected final BeanFactory getBeanFactory() {     return this.beanFactory. }
false;protected,final;0;3;;protected final ClassLoader getBeanClassLoader() {     return this.beanClassLoader. }
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.beanClassLoader = classLoader. }
false;protected;3;13;;protected List<String> filter(Collection<String> classNames, ClassNameFilter classNameFilter, ClassLoader classLoader) {     if (CollectionUtils.isEmpty(classNames)) {         return Collections.emptyList().     }     List<String> matches = new ArrayList<>(classNames.size()).     for (String candidate : classNames) {         if (classNameFilter.matches(candidate, classLoader)) {             matches.add(candidate).         }     }     return matches. }
false;public;2;4;;@Override public boolean matches(String className, ClassLoader classLoader) {     return isPresent(className, classLoader). }
false;public;2;4;;@Override public boolean matches(String className, ClassLoader classLoader) {     return !isPresent(className, classLoader). }
false;public,abstract;2;1;;public abstract boolean matches(String className, ClassLoader classLoader).
false;public,static;2;12;;public static boolean isPresent(String className, ClassLoader classLoader) {     if (classLoader == null) {         classLoader = ClassUtils.getDefaultClassLoader().     }     try {         forName(className, classLoader).         return true.     } catch (Throwable ex) {         return false.     } }
false;private,static;2;7;;private static Class<?> forName(String className, ClassLoader classLoader) throws ClassNotFoundException {     if (classLoader != null) {         return classLoader.loadClass(className).     }     return Class.forName(className). }
