commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@Bean @ConditionalOnMissingBean @ConfigurationProperties(prefix = "spring.jta.bitronix.properties") public bitronix.tm.Configuration bitronixConfiguration(JtaProperties jtaProperties) {     bitronix.tm.Configuration config = TransactionManagerServices.getConfiguration().     if (StringUtils.hasText(jtaProperties.getTransactionManagerId())) {         config.setServerId(jtaProperties.getTransactionManagerId()).     }     File logBaseDir = getLogBaseDir(jtaProperties).     config.setLogPart1Filename(new File(logBaseDir, "part1.btm").getAbsolutePath()).     config.setLogPart2Filename(new File(logBaseDir, "part2.btm").getAbsolutePath()).     config.setDisableJmx(true).     return config. }
false;private;1;7;;private File getLogBaseDir(JtaProperties jtaProperties) {     if (StringUtils.hasLength(jtaProperties.getLogDir())) {         return new File(jtaProperties.getLogDir()).     }     File home = new ApplicationHome().getDir().     return new File(home, "transaction-logs"). }
false;public;1;7;;@Bean @ConditionalOnMissingBean(TransactionManager.class) public BitronixTransactionManager bitronixTransactionManager(bitronix.tm.Configuration configuration) {     // Inject configuration to force ordering     return TransactionManagerServices.getTransactionManager(). }
false;public;0;5;;@Bean @ConditionalOnMissingBean(XADataSourceWrapper.class) public BitronixXADataSourceWrapper xaDataSourceWrapper() {     return new BitronixXADataSourceWrapper(). }
false;public,static;0;5;;@Bean @ConditionalOnMissingBean public static BitronixDependentBeanFactoryPostProcessor bitronixDependentBeanFactoryPostProcessor() {     return new BitronixDependentBeanFactoryPostProcessor(). }
false;public;3;10;;@Bean public JtaTransactionManager transactionManager(UserTransaction userTransaction, TransactionManager transactionManager, ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {     JtaTransactionManager jtaTransactionManager = new JtaTransactionManager(userTransaction, transactionManager).     transactionManagerCustomizers.ifAvailable((customizers) -> customizers.customize(jtaTransactionManager)).     return jtaTransactionManager. }
false;public;0;5;;@Bean @ConditionalOnMissingBean(XAConnectionFactoryWrapper.class) public BitronixXAConnectionFactoryWrapper xaConnectionFactoryWrapper() {     return new BitronixXAConnectionFactoryWrapper(). }
