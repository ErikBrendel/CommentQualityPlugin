commented;modifiers;parameterAmount;loc;comment;code
false;public;2;14;;@Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME) public DispatcherServlet dispatcherServlet(HttpProperties httpProperties, WebMvcProperties webMvcProperties) {     DispatcherServlet dispatcherServlet = new DispatcherServlet().     dispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest()).     dispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest()).     dispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound()).     dispatcherServlet.setEnableLoggingRequestDetails(httpProperties.isLogRequestDetails()).     return dispatcherServlet. }
false;public;1;7;;@Bean @ConditionalOnBean(MultipartResolver.class) @ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME) public MultipartResolver multipartResolver(MultipartResolver resolver) {     // Detect if the user has created a MultipartResolver but named it incorrectly     return resolver. }
false;public;3;13;;@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME) @ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME) public DispatcherServletRegistrationBean dispatcherServletRegistration(DispatcherServlet dispatcherServlet, WebMvcProperties webMvcProperties, ObjectProvider<MultipartConfigElement> multipartConfig) {     DispatcherServletRegistrationBean registration = new DispatcherServletRegistrationBean(dispatcherServlet, webMvcProperties.getServlet().getPath()).     registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME).     registration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup()).     multipartConfig.ifAvailable(registration::setMultipartConfig).     return registration. }
false;public;2;26;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     ConditionMessage.Builder message = ConditionMessage.forCondition("Default DispatcherServlet").     ConfigurableListableBeanFactory beanFactory = context.getBeanFactory().     List<String> dispatchServletBeans = Arrays.asList(beanFactory.getBeanNamesForType(DispatcherServlet.class, false, false)).     if (dispatchServletBeans.contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {         return ConditionOutcome.noMatch(message.found("dispatcher servlet bean").items(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)).     }     if (beanFactory.containsBean(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {         return ConditionOutcome.noMatch(message.found("non dispatcher servlet bean").items(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)).     }     if (dispatchServletBeans.isEmpty()) {         return ConditionOutcome.match(message.didNotFind("dispatcher servlet beans").atAll()).     }     return ConditionOutcome.match(message.found("dispatcher servlet bean", "dispatcher servlet beans").items(Style.QUOTE, dispatchServletBeans).append("and none is named " + DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)). }
false;public;2;10;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     ConfigurableListableBeanFactory beanFactory = context.getBeanFactory().     ConditionOutcome outcome = checkDefaultDispatcherName(beanFactory).     if (!outcome.isMatch()) {         return outcome.     }     return checkServletRegistration(beanFactory). }
false;private;1;14;;private ConditionOutcome checkDefaultDispatcherName(ConfigurableListableBeanFactory beanFactory) {     List<String> servlets = Arrays.asList(beanFactory.getBeanNamesForType(DispatcherServlet.class, false, false)).     boolean containsDispatcherBean = beanFactory.containsBean(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME).     if (containsDispatcherBean && !servlets.contains(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)) {         return ConditionOutcome.noMatch(startMessage().found("non dispatcher servlet").items(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)).     }     return ConditionOutcome.match(). }
false;private;1;30;;private ConditionOutcome checkServletRegistration(ConfigurableListableBeanFactory beanFactory) {     ConditionMessage.Builder message = startMessage().     List<String> registrations = Arrays.asList(beanFactory.getBeanNamesForType(ServletRegistrationBean.class, false, false)).     boolean containsDispatcherRegistrationBean = beanFactory.containsBean(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME).     if (registrations.isEmpty()) {         if (containsDispatcherRegistrationBean) {             return ConditionOutcome.noMatch(message.found("non servlet registration bean").items(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)).         }         return ConditionOutcome.match(message.didNotFind("servlet registration bean").atAll()).     }     if (registrations.contains(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)) {         return ConditionOutcome.noMatch(message.found("servlet registration bean").items(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)).     }     if (containsDispatcherRegistrationBean) {         return ConditionOutcome.noMatch(message.found("non servlet registration bean").items(DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)).     }     return ConditionOutcome.match(message.found("servlet registration beans").items(Style.QUOTE, registrations).append("and none is named " + DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)). }
false;private;0;3;;private ConditionMessage.Builder startMessage() {     return ConditionMessage.forCondition("DispatcherServlet Registration"). }
