commented;modifiers;parameterAmount;loc;comment;code
false;private;4;20;;private List<HibernatePropertiesCustomizer> determineHibernatePropertiesCustomizers(PhysicalNamingStrategy physicalNamingStrategy, ImplicitNamingStrategy implicitNamingStrategy, ConfigurableListableBeanFactory beanFactory, List<HibernatePropertiesCustomizer> hibernatePropertiesCustomizers) {     List<HibernatePropertiesCustomizer> customizers = new ArrayList<>().     if (ClassUtils.isPresent("org.hibernate.resource.beans.container.spi.BeanContainer", getClass().getClassLoader())) {         customizers.add((properties) -> properties.put(AvailableSettings.BEAN_CONTAINER, new SpringBeanContainer(beanFactory))).     }     if (physicalNamingStrategy != null || implicitNamingStrategy != null) {         customizers.add(new NamingStrategiesHibernatePropertiesCustomizer(physicalNamingStrategy, implicitNamingStrategy)).     }     customizers.addAll(hibernatePropertiesCustomizers).     return customizers. }
false;protected;0;4;;@Override protected AbstractJpaVendorAdapter createJpaVendorAdapter() {     return new HibernateJpaVendorAdapter(). }
false;protected;0;10;;@Override protected Map<String, Object> getVendorProperties() {     Supplier<String> defaultDdlMode = () -> this.defaultDdlAutoProvider.getDefaultDdlAuto(getDataSource()).     return new LinkedHashMap<>(this.hibernateProperties.determineHibernateProperties(getProperties().getProperties(), new HibernateSettings().ddlAuto(defaultDdlMode).hibernatePropertiesCustomizers(this.hibernatePropertiesCustomizers))). }
false;protected;1;10;;@Override protected void customizeVendorProperties(Map<String, Object> vendorProperties) {     super.customizeVendorProperties(vendorProperties).     if (!vendorProperties.containsKey(JTA_PLATFORM)) {         configureJtaPlatform(vendorProperties).     }     if (!vendorProperties.containsKey(PROVIDER_DISABLES_AUTOCOMMIT)) {         configureProviderDisablesAutocommit(vendorProperties).     } }
false;private;1;13;;private void configureJtaPlatform(Map<String, Object> vendorProperties) throws LinkageError {     JtaTransactionManager jtaTransactionManager = getJtaTransactionManager().     // Make sure Hibernate doesn't attempt to auto-detect a JTA platform     if (jtaTransactionManager == null) {         vendorProperties.put(JTA_PLATFORM, getNoJtaPlatformManager()).     } else // transaction manager on its own.     if (!runningOnWebSphere()) {         configureSpringJtaPlatform(vendorProperties, jtaTransactionManager).     } }
false;private;1;6;;private void configureProviderDisablesAutocommit(Map<String, Object> vendorProperties) {     if (isDataSourceAutoCommitDisabled() && !isJta()) {         vendorProperties.put(PROVIDER_DISABLES_AUTOCOMMIT, "true").     } }
false;private;0;6;;private boolean isDataSourceAutoCommitDisabled() {     DataSourcePoolMetadata poolMetadata = this.poolMetadataProvider.getDataSourcePoolMetadata(getDataSource()).     return poolMetadata != null && Boolean.FALSE.equals(poolMetadata.getDefaultAutoCommit()). }
false;private;0;5;;private boolean runningOnWebSphere() {     return ClassUtils.isPresent("com.ibm.websphere.jtaextensions.ExtendedJTATransaction", getClass().getClassLoader()). }
false;private;2;20;;private void configureSpringJtaPlatform(Map<String, Object> vendorProperties, JtaTransactionManager jtaTransactionManager) {     try {         vendorProperties.put(JTA_PLATFORM, new SpringJtaPlatform(jtaTransactionManager)).     } catch (LinkageError ex) {         // containers (e.g. JBoss EAP 6) wrap it in the superclass LinkageError         if (!isUsingJndi()) {             throw new IllegalStateException("Unable to set Hibernate JTA " + "platform, are you using the correct " + "version of Hibernate?", ex).         }         // Assume that Hibernate will use JNDI         if (logger.isDebugEnabled()) {             logger.debug("Unable to set Hibernate JTA platform : " + ex.getMessage()).         }     } }
false;private;0;8;;private boolean isUsingJndi() {     try {         return JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable().     } catch (Error ex) {         return false.     } }
false;private;0;12;;private Object getNoJtaPlatformManager() {     for (String candidate : NO_JTA_PLATFORM_CLASSES) {         try {             return Class.forName(candidate).newInstance().         } catch (Exception ex) {         // Continue searching         }     }     throw new IllegalStateException("No available JtaPlatform candidates amongst " + Arrays.toString(NO_JTA_PLATFORM_CLASSES)). }
false;public;1;11;;@Override public void customize(Map<String, Object> hibernateProperties) {     if (this.physicalNamingStrategy != null) {         hibernateProperties.put("hibernate.physical_naming_strategy", this.physicalNamingStrategy).     }     if (this.implicitNamingStrategy != null) {         hibernateProperties.put("hibernate.implicit_naming_strategy", this.implicitNamingStrategy).     } }
