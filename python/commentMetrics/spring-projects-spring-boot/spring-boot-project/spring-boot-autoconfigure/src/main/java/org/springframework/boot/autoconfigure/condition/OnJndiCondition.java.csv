commented;modifiers;parameterAmount;loc;comment;code
false;public;2;15;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     AnnotationAttributes annotationAttributes = AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(ConditionalOnJndi.class.getName())).     String[] locations = annotationAttributes.getStringArray("value").     try {         return getMatchOutcome(locations).     } catch (NoClassDefFoundError ex) {         return ConditionOutcome.noMatch(ConditionMessage.forCondition(ConditionalOnJndi.class).because("JNDI class not found")).     } }
false;private;1;22;;private ConditionOutcome getMatchOutcome(String[] locations) {     if (!isJndiAvailable()) {         return ConditionOutcome.noMatch(ConditionMessage.forCondition(ConditionalOnJndi.class).notAvailable("JNDI environment")).     }     if (locations.length == 0) {         return ConditionOutcome.match(ConditionMessage.forCondition(ConditionalOnJndi.class).available("JNDI environment")).     }     JndiLocator locator = getJndiLocator(locations).     String location = locator.lookupFirstLocation().     String details = "(" + StringUtils.arrayToCommaDelimitedString(locations) + ")".     if (location != null) {         return ConditionOutcome.match(ConditionMessage.forCondition(ConditionalOnJndi.class, details).foundExactly("\"" + location + "\"")).     }     return ConditionOutcome.noMatch(ConditionMessage.forCondition(ConditionalOnJndi.class, details).didNotFind("any matching JNDI location").atAll()). }
false;protected;0;3;;protected boolean isJndiAvailable() {     return JndiLocatorDelegate.isDefaultJndiEnvironmentAvailable(). }
false;protected;1;3;;protected JndiLocator getJndiLocator(String[] locations) {     return new JndiLocator(locations). }
false;public;0;12;;public String lookupFirstLocation() {     for (String location : this.locations) {         try {             lookup(location).             return location.         } catch (NamingException ex) {         // Swallow and continue         }     }     return null. }
