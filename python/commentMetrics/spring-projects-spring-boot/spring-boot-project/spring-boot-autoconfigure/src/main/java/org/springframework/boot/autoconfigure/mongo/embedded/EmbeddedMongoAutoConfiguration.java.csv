commented;modifiers;parameterAmount;loc;comment;code
false;public;3;11;;@Bean(initMethod = "start", destroyMethod = "stop") @ConditionalOnMissingBean public MongodExecutable embeddedMongoServer(IMongodConfig mongodConfig, IRuntimeConfig runtimeConfig, ApplicationContext context) throws IOException {     Integer configuredPort = this.properties.getPort().     if (configuredPort == null || configuredPort == 0) {         setEmbeddedPort(context, mongodConfig.net().getPort()).     }     MongodStarter mongodStarter = getMongodStarter(runtimeConfig).     return mongodStarter.prepare(mongodConfig). }
false;private;1;6;;private MongodStarter getMongodStarter(IRuntimeConfig runtimeConfig) {     if (runtimeConfig == null) {         return MongodStarter.getDefaultInstance().     }     return MongodStarter.getInstance(runtimeConfig). }
false;public;1;25;;@Bean @ConditionalOnMissingBean public IMongodConfig embeddedMongoConfiguration(EmbeddedMongoProperties embeddedProperties) throws IOException {     MongodConfigBuilder builder = new MongodConfigBuilder().version(determineVersion(embeddedProperties)).     EmbeddedMongoProperties.Storage storage = embeddedProperties.getStorage().     if (storage != null) {         String databaseDir = storage.getDatabaseDir().         String replSetName = storage.getReplSetName().         int oplogSize = (storage.getOplogSize() != null) ? (int) storage.getOplogSize().toMegabytes() : 0.         builder.replication(new Storage(databaseDir, replSetName, oplogSize)).     }     Integer configuredPort = this.properties.getPort().     if (configuredPort != null && configuredPort > 0) {         builder.net(new Net(getHost().getHostAddress(), configuredPort, Network.localhostIsIPv6())).     } else {         builder.net(new Net(getHost().getHostAddress(), Network.getFreeServerPort(getHost()), Network.localhostIsIPv6())).     }     return builder.build(). }
false;private;1;14;;private IFeatureAwareVersion determineVersion(EmbeddedMongoProperties embeddedProperties) {     if (embeddedProperties.getFeatures() == null) {         for (Version version : Version.values()) {             if (version.asInDownloadPath().equals(embeddedProperties.getVersion())) {                 return version.             }         }         return Versions.withFeatures(new GenericVersion(embeddedProperties.getVersion())).     }     return Versions.withFeatures(new GenericVersion(embeddedProperties.getVersion()), embeddedProperties.getFeatures().toArray(new Feature[0])). }
false;private;0;7;;private InetAddress getHost() throws UnknownHostException {     if (this.properties.getHost() == null) {         return InetAddress.getByAddress(Network.localhostIsIPv6() ? IP6_LOOPBACK_ADDRESS : IP4_LOOPBACK_ADDRESS).     }     return InetAddress.getByName(this.properties.getHost()). }
false;private;2;3;;private void setEmbeddedPort(ApplicationContext context, int port) {     setPortProperty(context, port). }
false;private;2;10;;private void setPortProperty(ApplicationContext currentContext, int port) {     if (currentContext instanceof ConfigurableApplicationContext) {         MutablePropertySources sources = ((ConfigurableApplicationContext) currentContext).getEnvironment().getPropertySources().         getMongoPorts(sources).put("local.mongo.port", port).     }     if (currentContext.getParent() != null) {         setPortProperty(currentContext.getParent(), port).     } }
false;private;1;9;;@SuppressWarnings("unchecked") private Map<String, Object> getMongoPorts(MutablePropertySources sources) {     PropertySource<?> propertySource = sources.get("mongo.ports").     if (propertySource == null) {         propertySource = new MapPropertySource("mongo.ports", new HashMap<>()).         sources.addFirst(propertySource).     }     return (Map<String, Object>) propertySource.getSource(). }
false;public;1;15;;@Bean public IRuntimeConfig embeddedMongoRuntimeConfig(ObjectProvider<DownloadConfigBuilderCustomizer> downloadConfigBuilderCustomizers) {     Logger logger = LoggerFactory.getLogger(getClass().getPackage().getName() + ".EmbeddedMongo").     ProcessOutput processOutput = new ProcessOutput(Processors.logTo(logger, Slf4jLevel.INFO), Processors.logTo(logger, Slf4jLevel.ERROR), Processors.named("[console>]", Processors.logTo(logger, Slf4jLevel.DEBUG))).     return new RuntimeConfigBuilder().defaultsWithLogger(Command.MongoD, logger).processOutput(processOutput).artifactStore(getArtifactStore(logger, downloadConfigBuilderCustomizers.orderedStream())).daemonProcess(false).build(). }
false;private;2;11;;private ArtifactStoreBuilder getArtifactStore(Logger logger, Stream<DownloadConfigBuilderCustomizer> downloadConfigBuilderCustomizers) {     DownloadConfigBuilder downloadConfigBuilder = new DownloadConfigBuilder().defaultsForCommand(Command.MongoD).     downloadConfigBuilder.progressListener(new Slf4jProgressListener(logger)).     downloadConfigBuilderCustomizers.forEach((customizer) -> customizer.customize(downloadConfigBuilder)).     IDownloadConfig downloadConfig = downloadConfigBuilder.build().     return new ExtractedArtifactStoreBuilder().defaults(Command.MongoD).download(downloadConfig). }
