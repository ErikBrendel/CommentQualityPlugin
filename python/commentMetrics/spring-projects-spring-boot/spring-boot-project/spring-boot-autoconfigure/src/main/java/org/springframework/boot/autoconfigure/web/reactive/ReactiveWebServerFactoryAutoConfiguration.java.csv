commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Bean public ReactiveWebServerFactoryCustomizer reactiveWebServerFactoryCustomizer(ServerProperties serverProperties) {     return new ReactiveWebServerFactoryCustomizer(serverProperties). }
false;public;1;6;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     if (beanFactory instanceof ConfigurableListableBeanFactory) {         this.beanFactory = (ConfigurableListableBeanFactory) beanFactory.     } }
false;public;2;10;;@Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {     if (this.beanFactory == null) {         return.     }     registerSyntheticBeanIfMissing(registry, "webServerFactoryCustomizerBeanPostProcessor", WebServerFactoryCustomizerBeanPostProcessor.class). }
false;private;3;9;;private void registerSyntheticBeanIfMissing(BeanDefinitionRegistry registry, String name, Class<?> beanClass) {     if (ObjectUtils.isEmpty(this.beanFactory.getBeanNamesForType(beanClass, true, false))) {         RootBeanDefinition beanDefinition = new RootBeanDefinition(beanClass).         beanDefinition.setSynthetic(true).         registry.registerBeanDefinition(name, beanDefinition).     } }
