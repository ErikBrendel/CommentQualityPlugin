commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;3;/**  * Set the {@link MessageConverter} to use or {@code null} if the out-of-the-box  * converter should be used.  * @param messageConverter the {@link MessageConverter}  */ ;/**  * Set the {@link MessageConverter} to use or {@code null} if the out-of-the-box  * converter should be used.  * @param messageConverter the {@link MessageConverter}  */ protected void setMessageConverter(MessageConverter messageConverter) {     this.messageConverter = messageConverter. }
true;protected;1;3;/**  * Set the {@link MessageRecoverer} to use or {@code null} to rely on the default.  * @param messageRecoverer the {@link MessageRecoverer}  */ ;/**  * Set the {@link MessageRecoverer} to use or {@code null} to rely on the default.  * @param messageRecoverer the {@link MessageRecoverer}  */ protected void setMessageRecoverer(MessageRecoverer messageRecoverer) {     this.messageRecoverer = messageRecoverer. }
true;protected;1;4;/**  * Set the {@link RabbitRetryTemplateCustomizer} instances to use.  * @param retryTemplateCustomizers the retry template customizers  */ ;/**  * Set the {@link RabbitRetryTemplateCustomizer} instances to use.  * @param retryTemplateCustomizers the retry template customizers  */ protected void setRetryTemplateCustomizers(List<RabbitRetryTemplateCustomizer> retryTemplateCustomizers) {     this.retryTemplateCustomizers = retryTemplateCustomizers. }
true;protected;1;3;/**  * Set the {@link RabbitProperties} to use.  * @param rabbitProperties the {@link RabbitProperties}  */ ;/**  * Set the {@link RabbitProperties} to use.  * @param rabbitProperties the {@link RabbitProperties}  */ protected void setRabbitProperties(RabbitProperties rabbitProperties) {     this.rabbitProperties = rabbitProperties. }
false;protected,final;0;3;;protected final RabbitProperties getRabbitProperties() {     return this.rabbitProperties. }
true;public,abstract;2;1;/**  * Configure the specified rabbit listener container factory. The factory can be  * further tuned and default settings can be overridden.  * @param factory the {@link AbstractRabbitListenerContainerFactory} instance to  * configure  * @param connectionFactory the {@link ConnectionFactory} to use  */ ;/**  * Configure the specified rabbit listener container factory. The factory can be  * further tuned and default settings can be overridden.  * @param factory the {@link AbstractRabbitListenerContainerFactory} instance to  * configure  * @param connectionFactory the {@link ConnectionFactory} to use  */ public abstract void configure(T factory, ConnectionFactory connectionFactory).
false;protected;3;38;;protected void configure(T factory, ConnectionFactory connectionFactory, RabbitProperties.AmqpContainer configuration) {     Assert.notNull(factory, "Factory must not be null").     Assert.notNull(connectionFactory, "ConnectionFactory must not be null").     Assert.notNull(configuration, "Configuration must not be null").     factory.setConnectionFactory(connectionFactory).     if (this.messageConverter != null) {         factory.setMessageConverter(this.messageConverter).     }     factory.setAutoStartup(configuration.isAutoStartup()).     if (configuration.getAcknowledgeMode() != null) {         factory.setAcknowledgeMode(configuration.getAcknowledgeMode()).     }     if (configuration.getPrefetch() != null) {         factory.setPrefetchCount(configuration.getPrefetch()).     }     if (configuration.getDefaultRequeueRejected() != null) {         factory.setDefaultRequeueRejected(configuration.getDefaultRequeueRejected()).     }     if (configuration.getIdleEventInterval() != null) {         factory.setIdleEventInterval(configuration.getIdleEventInterval().toMillis()).     }     factory.setMissingQueuesFatal(configuration.isMissingQueuesFatal()).     ListenerRetry retryConfig = configuration.getRetry().     if (retryConfig.isEnabled()) {         RetryInterceptorBuilder<?, ?> builder = (retryConfig.isStateless()) ? RetryInterceptorBuilder.stateless() : RetryInterceptorBuilder.stateful().         RetryTemplate retryTemplate = new RetryTemplateFactory(this.retryTemplateCustomizers).createRetryTemplate(retryConfig, RabbitRetryTemplateCustomizer.Target.LISTENER).         builder.retryOperations(retryTemplate).         MessageRecoverer recoverer = (this.messageRecoverer != null) ? this.messageRecoverer : new RejectAndDontRequeueRecoverer().         builder.recoverer(recoverer).         factory.setAdviceChain(builder.build()).     } }
