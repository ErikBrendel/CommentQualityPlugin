commented;modifiers;parameterAmount;loc;comment;code
false;public;2;14;;@Bean(initMethod = "init", destroyMethod = "shutdownWait") @ConditionalOnMissingBean(UserTransactionService.class) public UserTransactionServiceImp userTransactionService(AtomikosProperties atomikosProperties, JtaProperties jtaProperties) {     Properties properties = new Properties().     if (StringUtils.hasText(jtaProperties.getTransactionManagerId())) {         properties.setProperty("com.atomikos.icatch.tm_unique_name", jtaProperties.getTransactionManagerId()).     }     properties.setProperty("com.atomikos.icatch.log_base_dir", getLogBaseDir(jtaProperties)).     properties.putAll(atomikosProperties.asProperties()).     return new UserTransactionServiceImp(properties). }
false;private;1;7;;private String getLogBaseDir(JtaProperties jtaProperties) {     if (StringUtils.hasLength(jtaProperties.getLogDir())) {         return jtaProperties.getLogDir().     }     File home = new ApplicationHome().getDir().     return new File(home, "transaction-logs").getAbsolutePath(). }
false;public;1;9;;@Bean(initMethod = "init", destroyMethod = "close") @ConditionalOnMissingBean public UserTransactionManager atomikosTransactionManager(UserTransactionService userTransactionService) throws Exception {     UserTransactionManager manager = new UserTransactionManager().     manager.setStartupTransactionService(false).     manager.setForceShutdown(true).     return manager. }
false;public;0;5;;@Bean @ConditionalOnMissingBean(XADataSourceWrapper.class) public AtomikosXADataSourceWrapper xaDataSourceWrapper() {     return new AtomikosXADataSourceWrapper(). }
false;public,static;0;5;;@Bean @ConditionalOnMissingBean public static AtomikosDependsOnBeanFactoryPostProcessor atomikosDependsOnBeanFactoryPostProcessor() {     return new AtomikosDependsOnBeanFactoryPostProcessor(). }
false;public;3;10;;@Bean public JtaTransactionManager transactionManager(UserTransaction userTransaction, TransactionManager transactionManager, ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {     JtaTransactionManager jtaTransactionManager = new JtaTransactionManager(userTransaction, transactionManager).     transactionManagerCustomizers.ifAvailable((customizers) -> customizers.customize(jtaTransactionManager)).     return jtaTransactionManager. }
false;public;0;5;;@Bean @ConditionalOnMissingBean(XAConnectionFactoryWrapper.class) public AtomikosXAConnectionFactoryWrapper xaConnectionFactoryWrapper() {     return new AtomikosXAConnectionFactoryWrapper(). }
