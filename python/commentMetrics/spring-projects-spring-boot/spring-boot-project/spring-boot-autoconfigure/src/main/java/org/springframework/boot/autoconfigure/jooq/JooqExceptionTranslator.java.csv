commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public void exception(ExecuteContext context) {     SQLExceptionTranslator translator = getTranslator(context).     // The exception() callback is not only triggered for SQL exceptions but also for     // "normal" exceptions. In those cases sqlException() returns null.     SQLException exception = context.sqlException().     while (exception != null) {         handle(context, translator, exception).         exception = exception.getNextException().     } }
false;private;1;10;;private SQLExceptionTranslator getTranslator(ExecuteContext context) {     SQLDialect dialect = context.configuration().dialect().     if (dialect != null && dialect.thirdParty() != null) {         String dbName = dialect.thirdParty().springDbName().         if (dbName != null) {             return new SQLErrorCodeSQLExceptionTranslator(dbName).         }     }     return new SQLStateSQLExceptionTranslator(). }
true;private;3;10;/**  * Handle a single exception in the chain. SQLExceptions might be nested multiple  * levels deep. The outermost exception is usually the least interesting one ("Call  * getNextException to see the cause."). Therefore the innermost exception is  * propagated and all other exceptions are logged.  * @param context the execute context  * @param translator the exception translator  * @param exception the exception  */ ;/**  * Handle a single exception in the chain. SQLExceptions might be nested multiple  * levels deep. The outermost exception is usually the least interesting one ("Call  * getNextException to see the cause."). Therefore the innermost exception is  * propagated and all other exceptions are logged.  * @param context the execute context  * @param translator the exception translator  * @param exception the exception  */ private void handle(ExecuteContext context, SQLExceptionTranslator translator, SQLException exception) {     DataAccessException translated = translate(context, translator, exception).     if (exception.getNextException() == null) {         context.exception(translated).     } else {         logger.error("Execution of SQL statement failed.", translated).     } }
false;private;3;4;;private DataAccessException translate(ExecuteContext context, SQLExceptionTranslator translator, SQLException exception) {     return translator.translate("jOOQ", context.sql(), exception). }
