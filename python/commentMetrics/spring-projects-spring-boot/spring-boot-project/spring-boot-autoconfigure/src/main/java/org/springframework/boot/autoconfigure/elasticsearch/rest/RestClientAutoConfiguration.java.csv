commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Bean @ConditionalOnMissingBean public RestClient restClient(RestClientBuilder builder) {     return builder.build(). }
false;public;2;20;;@Bean @ConditionalOnMissingBean public RestClientBuilder restClientBuilder(RestClientProperties properties, ObjectProvider<RestClientBuilderCustomizer> builderCustomizers) {     HttpHost[] hosts = properties.getUris().stream().map(HttpHost::create).toArray(HttpHost[]::new).     RestClientBuilder builder = RestClient.builder(hosts).     PropertyMapper map = PropertyMapper.get().     map.from(properties::getUsername).whenHasText().to((username) -> {         CredentialsProvider credentialsProvider = new BasicCredentialsProvider().         Credentials credentials = new UsernamePasswordCredentials(properties.getUsername(), properties.getPassword()).         credentialsProvider.setCredentials(AuthScope.ANY, credentials).         builder.setHttpClientConfigCallback((httpClientBuilder) -> httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider)).     }).     builderCustomizers.orderedStream().forEach((customizer) -> customizer.customize(builder)).     return builder. }
false;public;1;6;;@Bean @ConditionalOnMissingBean public RestHighLevelClient restHighLevelClient(RestClientBuilder restClientBuilder) {     return new RestHighLevelClient(restClientBuilder). }
