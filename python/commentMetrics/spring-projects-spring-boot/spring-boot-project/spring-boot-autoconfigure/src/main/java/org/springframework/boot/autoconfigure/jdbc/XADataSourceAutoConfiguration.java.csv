commented;modifiers;parameterAmount;loc;comment;code
false;public;3;7;;@Bean public DataSource dataSource(XADataSourceWrapper wrapper, DataSourceProperties properties, ObjectProvider<XADataSource> xaDataSource) throws Exception {     return wrapper.wrapDataSource(xaDataSource.getIfAvailable(() -> createXaDataSource(properties))). }
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.classLoader = classLoader. }
false;private;1;12;;private XADataSource createXaDataSource(DataSourceProperties properties) {     String className = properties.getXa().getDataSourceClassName().     if (!StringUtils.hasLength(className)) {         className = DatabaseDriver.fromJdbcUrl(properties.determineUrl()).getXaDataSourceClassName().     }     Assert.state(StringUtils.hasLength(className), "No XA DataSource class name specified").     XADataSource dataSource = createXaDataSourceInstance(className).     bindXaProperties(dataSource, properties).     return dataSource. }
false;private;1;12;;private XADataSource createXaDataSourceInstance(String className) {     try {         Class<?> dataSourceClass = ClassUtils.forName(className, this.classLoader).         Object instance = BeanUtils.instantiateClass(dataSourceClass).         Assert.isInstanceOf(XADataSource.class, instance).         return (XADataSource) instance.     } catch (Exception ex) {         throw new IllegalStateException("Unable to create XADataSource instance from '" + className + "'").     } }
false;private;2;5;;private void bindXaProperties(XADataSource target, DataSourceProperties dataSourceProperties) {     Binder binder = new Binder(getBinderSource(dataSourceProperties)).     binder.bind(ConfigurationPropertyName.EMPTY, Bindable.ofInstance(target)). }
false;private;1;11;;private ConfigurationPropertySource getBinderSource(DataSourceProperties dataSourceProperties) {     MapConfigurationPropertySource source = new MapConfigurationPropertySource().     source.put("user", dataSourceProperties.determineUsername()).     source.put("password", dataSourceProperties.determinePassword()).     source.put("url", dataSourceProperties.determineUrl()).     source.putAll(dataSourceProperties.getXa().getProperties()).     ConfigurationPropertyNameAliases aliases = new ConfigurationPropertyNameAliases().     aliases.addAliases("user", "username").     return source.withAliases(aliases). }
