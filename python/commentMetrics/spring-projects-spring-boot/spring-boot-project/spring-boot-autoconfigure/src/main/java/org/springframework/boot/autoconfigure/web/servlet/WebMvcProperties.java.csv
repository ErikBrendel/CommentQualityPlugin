commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public DefaultMessageCodesResolver.Format getMessageCodesResolverFormat() {     return this.messageCodesResolverFormat. }
false;public;1;4;;public void setMessageCodesResolverFormat(DefaultMessageCodesResolver.Format messageCodesResolverFormat) {     this.messageCodesResolverFormat = messageCodesResolverFormat. }
false;public;0;3;;public Locale getLocale() {     return this.locale. }
false;public;1;3;;public void setLocale(Locale locale) {     this.locale = locale. }
false;public;0;3;;public LocaleResolver getLocaleResolver() {     return this.localeResolver. }
false;public;1;3;;public void setLocaleResolver(LocaleResolver localeResolver) {     this.localeResolver = localeResolver. }
false;public;0;3;;public String getDateFormat() {     return this.dateFormat. }
false;public;1;3;;public void setDateFormat(String dateFormat) {     this.dateFormat = dateFormat. }
false;public;0;3;;public boolean isIgnoreDefaultModelOnRedirect() {     return this.ignoreDefaultModelOnRedirect. }
false;public;1;3;;public void setIgnoreDefaultModelOnRedirect(boolean ignoreDefaultModelOnRedirect) {     this.ignoreDefaultModelOnRedirect = ignoreDefaultModelOnRedirect. }
false;public;0;3;;public boolean isThrowExceptionIfNoHandlerFound() {     return this.throwExceptionIfNoHandlerFound. }
false;public;1;4;;public void setThrowExceptionIfNoHandlerFound(boolean throwExceptionIfNoHandlerFound) {     this.throwExceptionIfNoHandlerFound = throwExceptionIfNoHandlerFound. }
false;public;0;3;;public boolean isLogResolvedException() {     return this.logResolvedException. }
false;public;1;3;;public void setLogResolvedException(boolean logResolvedException) {     this.logResolvedException = logResolvedException. }
false;public;0;3;;public boolean isDispatchOptionsRequest() {     return this.dispatchOptionsRequest. }
false;public;1;3;;public void setDispatchOptionsRequest(boolean dispatchOptionsRequest) {     this.dispatchOptionsRequest = dispatchOptionsRequest. }
false;public;0;3;;public boolean isDispatchTraceRequest() {     return this.dispatchTraceRequest. }
false;public;1;3;;public void setDispatchTraceRequest(boolean dispatchTraceRequest) {     this.dispatchTraceRequest = dispatchTraceRequest. }
false;public;0;3;;public String getStaticPathPattern() {     return this.staticPathPattern. }
false;public;1;3;;public void setStaticPathPattern(String staticPathPattern) {     this.staticPathPattern = staticPathPattern. }
false;public;0;3;;public Async getAsync() {     return this.async. }
false;public;0;3;;public Servlet getServlet() {     return this.servlet. }
false;public;0;3;;public View getView() {     return this.view. }
false;public;0;3;;public Contentnegotiation getContentnegotiation() {     return this.contentnegotiation. }
false;public;0;3;;public Pathmatch getPathmatch() {     return this.pathmatch. }
false;public;0;3;;public Duration getRequestTimeout() {     return this.requestTimeout. }
false;public;1;3;;public void setRequestTimeout(Duration requestTimeout) {     this.requestTimeout = requestTimeout. }
false;public;0;3;;public String getPath() {     return this.path. }
false;public;1;5;;public void setPath(String path) {     Assert.notNull(path, "Path must not be null").     Assert.isTrue(!path.contains("*"), "Path must not contain wildcards").     this.path = path. }
false;public;0;3;;public int getLoadOnStartup() {     return this.loadOnStartup. }
false;public;1;3;;public void setLoadOnStartup(int loadOnStartup) {     this.loadOnStartup = loadOnStartup. }
false;public;0;9;;public String getServletMapping() {     if (this.path.equals("") || this.path.equals("/")) {         return "/".     }     if (this.path.endsWith("/")) {         return this.path + "*".     }     return this.path + "/*". }
false;public;1;7;;public String getPath(String path) {     String prefix = getServletPrefix().     if (!path.startsWith("/")) {         path = "/" + path.     }     return prefix + path. }
false;public;0;11;;public String getServletPrefix() {     String result = this.path.     int index = result.indexOf('*').     if (index != -1) {         result = result.substring(0, index).     }     if (result.endsWith("/")) {         result = result.substring(0, result.length() - 1).     }     return result. }
false;public;0;3;;public String getPrefix() {     return this.prefix. }
false;public;1;3;;public void setPrefix(String prefix) {     this.prefix = prefix. }
false;public;0;3;;public String getSuffix() {     return this.suffix. }
false;public;1;3;;public void setSuffix(String suffix) {     this.suffix = suffix. }
false;public;0;3;;public boolean isFavorPathExtension() {     return this.favorPathExtension. }
false;public;1;3;;public void setFavorPathExtension(boolean favorPathExtension) {     this.favorPathExtension = favorPathExtension. }
false;public;0;3;;public boolean isFavorParameter() {     return this.favorParameter. }
false;public;1;3;;public void setFavorParameter(boolean favorParameter) {     this.favorParameter = favorParameter. }
false;public;0;3;;public Map<String, MediaType> getMediaTypes() {     return this.mediaTypes. }
false;public;1;3;;public void setMediaTypes(Map<String, MediaType> mediaTypes) {     this.mediaTypes = mediaTypes. }
false;public;0;3;;public String getParameterName() {     return this.parameterName. }
false;public;1;3;;public void setParameterName(String parameterName) {     this.parameterName = parameterName. }
false;public;0;3;;public boolean isUseSuffixPattern() {     return this.useSuffixPattern. }
false;public;1;3;;public void setUseSuffixPattern(boolean useSuffixPattern) {     this.useSuffixPattern = useSuffixPattern. }
false;public;0;3;;public boolean isUseRegisteredSuffixPattern() {     return this.useRegisteredSuffixPattern. }
false;public;1;3;;public void setUseRegisteredSuffixPattern(boolean useRegisteredSuffixPattern) {     this.useRegisteredSuffixPattern = useRegisteredSuffixPattern. }
