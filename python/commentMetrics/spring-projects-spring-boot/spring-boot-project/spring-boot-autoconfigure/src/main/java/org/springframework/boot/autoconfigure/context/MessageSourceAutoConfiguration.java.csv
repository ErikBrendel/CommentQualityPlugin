commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Bean @ConfigurationProperties(prefix = "spring.messages") public MessageSourceProperties messageSourceProperties() {     return new MessageSourceProperties(). }
false;public;1;19;;@Bean public MessageSource messageSource(MessageSourceProperties properties) {     ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource().     if (StringUtils.hasText(properties.getBasename())) {         messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename()))).     }     if (properties.getEncoding() != null) {         messageSource.setDefaultEncoding(properties.getEncoding().name()).     }     messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale()).     Duration cacheDuration = properties.getCacheDuration().     if (cacheDuration != null) {         messageSource.setCacheMillis(cacheDuration.toMillis()).     }     messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat()).     messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage()).     return messageSource. }
false;public;2;12;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     String basename = context.getEnvironment().getProperty("spring.messages.basename", "messages").     ConditionOutcome outcome = cache.get(basename).     if (outcome == null) {         outcome = getMatchOutcomeForBasename(context, basename).         cache.put(basename, outcome).     }     return outcome. }
false;private;2;16;;private ConditionOutcome getMatchOutcomeForBasename(ConditionContext context, String basename) {     ConditionMessage.Builder message = ConditionMessage.forCondition("ResourceBundle").     for (String name : StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(basename))) {         for (Resource resource : getResources(context.getClassLoader(), name)) {             if (resource.exists()) {                 return ConditionOutcome.match(message.found("bundle").items(resource)).             }         }     }     return ConditionOutcome.noMatch(message.didNotFind("bundle with basename " + basename).atAll()). }
false;private;2;10;;private Resource[] getResources(ClassLoader classLoader, String name) {     String target = name.replace('.', '/').     try {         return new PathMatchingResourcePatternResolver(classLoader).getResources("classpath*:" + target + ".properties").     } catch (Exception ex) {         return NO_RESOURCES.     } }
