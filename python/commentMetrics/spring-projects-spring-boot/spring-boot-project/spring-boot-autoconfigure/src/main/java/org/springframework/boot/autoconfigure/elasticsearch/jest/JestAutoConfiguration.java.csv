commented;modifiers;parameterAmount;loc;comment;code
false;public;3;9;;@Bean(destroyMethod = "shutdownClient") @ConditionalOnMissingBean public JestClient jestClient(JestProperties properties, ObjectProvider<Gson> gson, ObjectProvider<HttpClientConfigBuilderCustomizer> builderCustomizers) {     JestClientFactory factory = new JestClientFactory().     factory.setHttpClientConfig(createHttpClientConfig(properties, gson, builderCustomizers)).     return factory.getObject(). }
false;protected;3;23;;protected HttpClientConfig createHttpClientConfig(JestProperties properties, ObjectProvider<Gson> gson, ObjectProvider<HttpClientConfigBuilderCustomizer> builderCustomizers) {     HttpClientConfig.Builder builder = new HttpClientConfig.Builder(properties.getUris()).     PropertyMapper map = PropertyMapper.get().     map.from(properties::getUsername).whenHasText().to((username) -> builder.defaultCredentials(username, properties.getPassword())).     Proxy proxy = properties.getProxy().     map.from(proxy::getHost).whenHasText().to((host) -> {         Assert.notNull(proxy.getPort(), "Proxy port must not be null").         builder.proxy(new HttpHost(host, proxy.getPort())).     }).     map.from(gson::getIfUnique).whenNonNull().to(builder::gson).     map.from(properties::isMultiThreaded).to(builder::multiThreaded).     map.from(properties::getConnectionTimeout).whenNonNull().asInt(Duration::toMillis).to(builder::connTimeout).     map.from(properties::getReadTimeout).whenNonNull().asInt(Duration::toMillis).to(builder::readTimeout).     builderCustomizers.orderedStream().forEach((customizer) -> customizer.customize(builder)).     return builder.build(). }
