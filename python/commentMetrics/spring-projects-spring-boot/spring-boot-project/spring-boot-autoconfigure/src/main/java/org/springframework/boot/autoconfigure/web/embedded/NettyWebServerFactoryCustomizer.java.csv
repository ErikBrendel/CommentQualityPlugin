commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getOrder() {     return 0. }
false;public;1;13;;@Override public void customize(NettyReactiveWebServerFactory factory) {     factory.setUseForwardHeaders(getOrDeduceUseForwardHeaders(this.serverProperties, this.environment)).     PropertyMapper propertyMapper = PropertyMapper.get().     propertyMapper.from(this.serverProperties::getMaxHttpHeaderSize).whenNonNull().asInt(DataSize::toBytes).to((maxHttpRequestHeaderSize) -> customizeMaxHttpHeaderSize(factory, maxHttpRequestHeaderSize)).     propertyMapper.from(this.serverProperties::getConnectionTimeout).whenNonNull().asInt(Duration::toMillis).to((duration) -> factory.addServerCustomizers(getConnectionTimeOutCustomizer(duration))). }
false;private;2;8;;private boolean getOrDeduceUseForwardHeaders(ServerProperties serverProperties, Environment environment) {     if (serverProperties.isUseForwardHeaders() != null) {         return serverProperties.isUseForwardHeaders().     }     CloudPlatform platform = CloudPlatform.getActive(environment).     return platform != null && platform.isUsingForwardHeaders(). }
false;private;2;6;;private void customizeMaxHttpHeaderSize(NettyReactiveWebServerFactory factory, Integer maxHttpHeaderSize) {     factory.addServerCustomizers((NettyServerCustomizer) (httpServer) -> httpServer.httpRequestDecoder((httpRequestDecoderSpec) -> httpRequestDecoderSpec.maxHeaderSize(maxHttpHeaderSize))). }
false;private;1;4;;private NettyServerCustomizer getConnectionTimeOutCustomizer(int duration) {     return (httpServer) -> httpServer.tcpConfiguration((tcpServer) -> tcpServer.selectorOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, duration)). }
