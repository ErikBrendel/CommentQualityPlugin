commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the package names specified from all {@link EntityScan @EntityScan}  * annotations.  * @return the entity scan package names  */ ;/**  * Return the package names specified from all {@link EntityScan @EntityScan}  * annotations.  * @return the entity scan package names  */ public List<String> getPackageNames() {     return this.packageNames. }
true;public,static;1;10;/**  * Return the {@link EntityScanPackages} for the given bean factory.  * @param beanFactory the source bean factory  * @return the {@link EntityScanPackages} for the bean factory (never {@code null})  */ ;/**  * Return the {@link EntityScanPackages} for the given bean factory.  * @param beanFactory the source bean factory  * @return the {@link EntityScanPackages} for the bean factory (never {@code null})  */ public static EntityScanPackages get(BeanFactory beanFactory) {     // allow this to change in the future if needed     try {         return beanFactory.getBean(BEAN, EntityScanPackages.class).     } catch (NoSuchBeanDefinitionException ex) {         return NONE.     } }
true;public,static;2;5;/**  * Register the specified entity scan packages with the system.  * @param registry the source registry  * @param packageNames the package names to register  */ ;/**  * Register the specified entity scan packages with the system.  * @param registry the source registry  * @param packageNames the package names to register  */ public static void register(BeanDefinitionRegistry registry, String... packageNames) {     Assert.notNull(registry, "Registry must not be null").     Assert.notNull(packageNames, "PackageNames must not be null").     register(registry, Arrays.asList(packageNames)). }
true;public,static;2;20;/**  * Register the specified entity scan packages with the system.  * @param registry the source registry  * @param packageNames the package names to register  */ ;/**  * Register the specified entity scan packages with the system.  * @param registry the source registry  * @param packageNames the package names to register  */ public static void register(BeanDefinitionRegistry registry, Collection<String> packageNames) {     Assert.notNull(registry, "Registry must not be null").     Assert.notNull(packageNames, "PackageNames must not be null").     if (registry.containsBeanDefinition(BEAN)) {         BeanDefinition beanDefinition = registry.getBeanDefinition(BEAN).         ConstructorArgumentValues constructorArguments = beanDefinition.getConstructorArgumentValues().         constructorArguments.addIndexedArgumentValue(0, addPackageNames(constructorArguments, packageNames)).     } else {         GenericBeanDefinition beanDefinition = new GenericBeanDefinition().         beanDefinition.setBeanClass(EntityScanPackages.class).         beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0, StringUtils.toStringArray(packageNames)).         beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).         registry.registerBeanDefinition(BEAN, beanDefinition).     } }
false;private,static;2;10;;private static String[] addPackageNames(ConstructorArgumentValues constructorArguments, Collection<String> packageNames) {     String[] existing = (String[]) constructorArguments.getIndexedArgumentValue(0, String[].class).getValue().     Set<String> merged = new LinkedHashSet<>().     merged.addAll(Arrays.asList(existing)).     merged.addAll(packageNames).     return StringUtils.toStringArray(merged). }
false;public;2;5;;@Override public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {     register(registry, getPackagesToScan(metadata)). }
false;private;1;18;;private Set<String> getPackagesToScan(AnnotationMetadata metadata) {     AnnotationAttributes attributes = AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(EntityScan.class.getName())).     String[] basePackages = attributes.getStringArray("basePackages").     Class<?>[] basePackageClasses = attributes.getClassArray("basePackageClasses").     Set<String> packagesToScan = new LinkedHashSet<>(Arrays.asList(basePackages)).     for (Class<?> basePackageClass : basePackageClasses) {         packagesToScan.add(ClassUtils.getPackageName(basePackageClass)).     }     if (packagesToScan.isEmpty()) {         String packageName = ClassUtils.getPackageName(metadata.getClassName()).         Assert.state(!StringUtils.isEmpty(packageName), "@EntityScan cannot be used with the default package").         return Collections.singleton(packageName).     }     return packagesToScan. }
