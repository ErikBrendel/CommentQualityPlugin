commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@PostConstruct public void checkTemplateLocationExists() {     if (this.properties.isCheckTemplateLocation() && !isUsingGroovyAllJar()) {         TemplateLocation location = new TemplateLocation(this.properties.getResourceLoaderPath()).         if (!location.exists(this.applicationContext)) {             logger.warn("Cannot find template location: " + location + " (please add some templates, check your Groovy " + "configuration, or set spring.groovy.template." + "check-template-location=false)").         }     } }
true;private;0;15;/**  * MarkupTemplateEngine could be loaded from groovy-templates or groovy-all.  * Unfortunately it's quite common for people to use groovy-all and not actually  * need templating support. This method check attempts to check the source jar so  * that we can skip the {@code /template} folder check for such cases.  * @return true if the groovy-all jar is used  */ ;/**  * MarkupTemplateEngine could be loaded from groovy-templates or groovy-all.  * Unfortunately it's quite common for people to use groovy-all and not actually  * need templating support. This method check attempts to check the source jar so  * that we can skip the {@code /template} folder check for such cases.  * @return true if the groovy-all jar is used  */ private boolean isUsingGroovyAllJar() {     try {         ProtectionDomain domain = MarkupTemplateEngine.class.getProtectionDomain().         CodeSource codeSource = domain.getCodeSource().         if (codeSource != null && codeSource.getLocation().toString().contains("-all")) {             return true.         }         return false.     } catch (Exception ex) {         return false.     } }
false;public;1;11;;@Bean @ConditionalOnMissingBean(GroovyMarkupConfig.class) @ConfigurationProperties(prefix = "spring.groovy.template.configuration") public GroovyMarkupConfigurer groovyMarkupConfigurer(ObjectProvider<MarkupTemplateEngine> templateEngine) {     GroovyMarkupConfigurer configurer = new GroovyMarkupConfigurer().     configurer.setResourceLoaderPath(this.properties.getResourceLoaderPath()).     configurer.setCacheTemplates(this.properties.isCache()).     templateEngine.ifAvailable(configurer::setTemplateEngine).     return configurer. }
false;public;1;8;;@Bean @ConditionalOnMissingBean(name = "groovyMarkupViewResolver") public GroovyMarkupViewResolver groovyMarkupViewResolver(GroovyTemplateProperties properties) {     GroovyMarkupViewResolver resolver = new GroovyMarkupViewResolver().     properties.applyToMvcViewResolver(resolver).     return resolver. }
