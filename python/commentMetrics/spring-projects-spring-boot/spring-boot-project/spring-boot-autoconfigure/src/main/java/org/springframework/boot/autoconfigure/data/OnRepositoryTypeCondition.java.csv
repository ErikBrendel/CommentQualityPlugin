commented;modifiers;parameterAmount;loc;comment;code
false;public;2;18;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     Map<String, Object> attributes = metadata.getAnnotationAttributes(ConditionalOnRepositoryType.class.getName(), true).     RepositoryType configuredType = getTypeProperty(context.getEnvironment(), (String) attributes.get("store")).     RepositoryType requiredType = (RepositoryType) attributes.get("type").     ConditionMessage.Builder message = ConditionMessage.forCondition(ConditionalOnRepositoryType.class).     if (configuredType == requiredType || configuredType == RepositoryType.AUTO) {         return ConditionOutcome.match(message.because("configured type of '" + configuredType.name() + "' matched required type")).     }     return ConditionOutcome.noMatch(message.because("configured type (" + configuredType.name() + ") did not match required type (" + requiredType.name() + ")")). }
false;private;2;6;;private RepositoryType getTypeProperty(Environment environment, String store) {     return RepositoryType.valueOf(environment.getProperty(String.format("spring.data.%s.repositories.type", store), "auto").toUpperCase(Locale.ENGLISH)). }
