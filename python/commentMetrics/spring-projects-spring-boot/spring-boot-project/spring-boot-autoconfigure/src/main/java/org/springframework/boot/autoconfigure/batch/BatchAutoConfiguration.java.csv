commented;modifiers;parameterAmount;loc;comment;code
false;public;2;8;;@Bean @ConditionalOnMissingBean @ConditionalOnBean(DataSource.class) public BatchDataSourceInitializer batchDataSourceInitializer(DataSource dataSource, ResourceLoader resourceLoader) {     return new BatchDataSourceInitializer(dataSource, resourceLoader, this.properties). }
false;public;3;14;;@Bean @ConditionalOnMissingBean @ConditionalOnProperty(prefix = "spring.batch.job", name = "enabled", havingValue = "true", matchIfMissing = true) public JobLauncherCommandLineRunner jobLauncherCommandLineRunner(JobLauncher jobLauncher, JobExplorer jobExplorer, JobRepository jobRepository) {     JobLauncherCommandLineRunner runner = new JobLauncherCommandLineRunner(jobLauncher, jobExplorer, jobRepository).     String jobNames = this.properties.getJob().getNames().     if (StringUtils.hasText(jobNames)) {         runner.setJobNames(jobNames).     }     return runner. }
false;public;0;5;;@Bean @ConditionalOnMissingBean(ExitCodeGenerator.class) public JobExecutionExitCodeGenerator jobExecutionExitCodeGenerator() {     return new JobExecutionExitCodeGenerator(). }
false;public;5;15;;@Bean @ConditionalOnMissingBean(JobOperator.class) public SimpleJobOperator jobOperator(ObjectProvider<JobParametersConverter> jobParametersConverter, JobExplorer jobExplorer, JobLauncher jobLauncher, ListableJobLocator jobRegistry, JobRepository jobRepository) throws Exception {     SimpleJobOperator factory = new SimpleJobOperator().     factory.setJobExplorer(jobExplorer).     factory.setJobLauncher(jobLauncher).     factory.setJobRegistry(jobRegistry).     factory.setJobRepository(jobRepository).     jobParametersConverter.ifAvailable(factory::setJobParametersConverter).     return factory. }
