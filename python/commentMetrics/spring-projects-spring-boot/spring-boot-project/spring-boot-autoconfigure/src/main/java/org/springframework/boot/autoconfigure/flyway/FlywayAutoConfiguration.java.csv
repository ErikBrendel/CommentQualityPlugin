commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Bean @ConfigurationPropertiesBinding public StringOrNumberToMigrationVersionConverter stringOrNumberMigrationVersionConverter() {     return new StringOrNumberToMigrationVersionConverter(). }
false;public;1;5;;@Bean public FlywaySchemaManagementProvider flywayDefaultDdlModeProvider(ObjectProvider<Flyway> flyways) {     return new FlywaySchemaManagementProvider(flyways). }
false;public;8;25;;@Bean public Flyway flyway(FlywayProperties properties, DataSourceProperties dataSourceProperties, ResourceLoader resourceLoader, ObjectProvider<DataSource> dataSource, @FlywayDataSource ObjectProvider<DataSource> flywayDataSource, ObjectProvider<FlywayConfigurationCustomizer> fluentConfigurationCustomizers, ObjectProvider<Callback> callbacks, ObjectProvider<FlywayCallback> flywayCallbacks) {     FluentConfiguration configuration = new FluentConfiguration().     DataSource dataSourceToMigrate = configureDataSource(configuration, properties, dataSourceProperties, flywayDataSource.getIfAvailable(), dataSource.getIfAvailable()).     checkLocationExists(dataSourceToMigrate, properties, resourceLoader).     configureProperties(configuration, properties).     List<Callback> orderedCallbacks = callbacks.orderedStream().collect(Collectors.toList()).     configureCallbacks(configuration, orderedCallbacks).     fluentConfigurationCustomizers.orderedStream().forEach((customizer) -> customizer.customize(configuration)).     Flyway flyway = configuration.load().     List<FlywayCallback> orderedFlywayCallbacks = flywayCallbacks.orderedStream().collect(Collectors.toList()).     configureFlywayCallbacks(flyway, orderedCallbacks, orderedFlywayCallbacks).     return flyway. }
false;private;5;25;;private DataSource configureDataSource(FluentConfiguration configuration, FlywayProperties properties, DataSourceProperties dataSourceProperties, DataSource flywayDataSource, DataSource dataSource) {     if (properties.isCreateDataSource()) {         String url = getProperty(properties::getUrl, dataSourceProperties::getUrl).         String user = getProperty(properties::getUser, dataSourceProperties::getUsername).         String password = getProperty(properties::getPassword, dataSourceProperties::getPassword).         configuration.dataSource(url, user, password).         if (!CollectionUtils.isEmpty(properties.getInitSqls())) {             String initSql = StringUtils.collectionToDelimitedString(properties.getInitSqls(), "\n").             configuration.initSql(initSql).         }     } else if (flywayDataSource != null) {         configuration.dataSource(flywayDataSource).     } else {         configuration.dataSource(dataSource).     }     return configuration.getDataSource(). }
false;private;3;10;;private void checkLocationExists(DataSource dataSource, FlywayProperties properties, ResourceLoader resourceLoader) {     if (properties.isCheckLocation()) {         List<String> locations = new LocationResolver(dataSource).resolveLocations(properties.getLocations()).         if (!hasAtLeastOneLocation(resourceLoader, locations)) {             throw new FlywayMigrationScriptMissingException(locations).         }     } }
false;private;2;54;;private void configureProperties(FluentConfiguration configuration, FlywayProperties properties) {     PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull().     String[] locations = new LocationResolver(configuration.getDataSource()).resolveLocations(properties.getLocations()).toArray(new String[0]).     map.from(locations).to(configuration::locations).     map.from(properties.getEncoding()).to(configuration::encoding).     map.from(properties.getConnectRetries()).to(configuration::connectRetries).     map.from(properties.getSchemas()).as(StringUtils::toStringArray).to(configuration::schemas).     map.from(properties.getTable()).to(configuration::table).     map.from(properties.getBaselineDescription()).to(configuration::baselineDescription).     map.from(properties.getBaselineVersion()).to(configuration::baselineVersion).     map.from(properties.getInstalledBy()).to(configuration::installedBy).     map.from(properties.getPlaceholders()).to(configuration::placeholders).     map.from(properties.getPlaceholderPrefix()).to(configuration::placeholderPrefix).     map.from(properties.getPlaceholderSuffix()).to(configuration::placeholderSuffix).     map.from(properties.isPlaceholderReplacement()).to(configuration::placeholderReplacement).     map.from(properties.getSqlMigrationPrefix()).to(configuration::sqlMigrationPrefix).     map.from(properties.getSqlMigrationSuffixes()).as(StringUtils::toStringArray).to(configuration::sqlMigrationSuffixes).     map.from(properties.getSqlMigrationSeparator()).to(configuration::sqlMigrationSeparator).     map.from(properties.getRepeatableSqlMigrationPrefix()).to(configuration::repeatableSqlMigrationPrefix).     map.from(properties.getTarget()).to(configuration::target).     map.from(properties.isBaselineOnMigrate()).to(configuration::baselineOnMigrate).     map.from(properties.isCleanDisabled()).to(configuration::cleanDisabled).     map.from(properties.isCleanOnValidationError()).to(configuration::cleanOnValidationError).     map.from(properties.isGroup()).to(configuration::group).     map.from(properties.isIgnoreMissingMigrations()).to(configuration::ignoreMissingMigrations).     map.from(properties.isIgnoreIgnoredMigrations()).to(configuration::ignoreIgnoredMigrations).     map.from(properties.isIgnorePendingMigrations()).to(configuration::ignorePendingMigrations).     map.from(properties.isIgnoreFutureMigrations()).to(configuration::ignoreFutureMigrations).     map.from(properties.isMixed()).to(configuration::mixed).     map.from(properties.isOutOfOrder()).to(configuration::outOfOrder).     map.from(properties.isSkipDefaultCallbacks()).to(configuration::skipDefaultCallbacks).     map.from(properties.isSkipDefaultResolvers()).to(configuration::skipDefaultResolvers).     map.from(properties.isValidateOnMigrate()).to(configuration::validateOnMigrate). }
false;private;2;6;;private void configureCallbacks(FluentConfiguration configuration, List<Callback> callbacks) {     if (!callbacks.isEmpty()) {         configuration.callbacks(callbacks.toArray(new Callback[0])).     } }
false;private;3;11;;private void configureFlywayCallbacks(Flyway flyway, List<Callback> callbacks, List<FlywayCallback> flywayCallbacks) {     if (!flywayCallbacks.isEmpty()) {         if (!callbacks.isEmpty()) {             throw new IllegalStateException("Found a mixture of Callback and FlywayCallback beans." + " One type must be used exclusively.").         }         flyway.setCallbacks(flywayCallbacks.toArray(new FlywayCallback[0])).     } }
false;private;2;5;;private String getProperty(Supplier<String> property, Supplier<String> defaultValue) {     String value = property.get().     return (value != null) ? value : defaultValue.get(). }
false;private;2;9;;private boolean hasAtLeastOneLocation(ResourceLoader resourceLoader, Collection<String> locations) {     for (String location : locations) {         if (resourceLoader.getResource(normalizePrefix(location)).exists()) {             return true.         }     }     return false. }
false;private;1;3;;private String normalizePrefix(String location) {     return location.replace("filesystem:", "file:"). }
false;public;2;7;;@Bean @ConditionalOnMissingBean public FlywayMigrationInitializer flywayInitializer(Flyway flyway, ObjectProvider<FlywayMigrationStrategy> migrationStrategy) {     return new FlywayMigrationInitializer(flyway, migrationStrategy.getIfAvailable()). }
false;public;1;7;;public List<String> resolveLocations(List<String> locations) {     if (usesVendorLocation(locations)) {         DatabaseDriver databaseDriver = getDatabaseDriver().         return replaceVendorLocations(locations, databaseDriver).     }     return locations. }
false;private;2;10;;private List<String> replaceVendorLocations(List<String> locations, DatabaseDriver databaseDriver) {     if (databaseDriver == DatabaseDriver.UNKNOWN) {         return locations.     }     String vendor = databaseDriver.getId().     return locations.stream().map((location) -> location.replace(VENDOR_PLACEHOLDER, vendor)).collect(Collectors.toList()). }
false;private;0;10;;private DatabaseDriver getDatabaseDriver() {     try {         String url = JdbcUtils.extractDatabaseMetaData(this.dataSource, "getURL").         return DatabaseDriver.fromJdbcUrl(url).     } catch (MetaDataAccessException ex) {         throw new IllegalStateException(ex).     } }
false;private;1;8;;private boolean usesVendorLocation(Collection<String> locations) {     for (String location : locations) {         if (location.contains(VENDOR_PLACEHOLDER)) {             return true.         }     }     return false. }
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return CONVERTIBLE_TYPES. }
false;public;3;6;;@Override public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     String value = ObjectUtils.nullSafeToString(source).     return MigrationVersion.fromVersion(value). }
