commented;modifiers;parameterAmount;loc;comment;code
true;;1;3;/**  * Set the {@link KafkaProperties} to use.  * @param properties the properties  */ ;/**  * Set the {@link KafkaProperties} to use.  * @param properties the properties  */ void setKafkaProperties(KafkaProperties properties) {     this.properties = properties. }
true;;1;3;/**  * Set the {@link MessageConverter} to use.  * @param messageConverter the message converter  */ ;/**  * Set the {@link MessageConverter} to use.  * @param messageConverter the message converter  */ void setMessageConverter(MessageConverter messageConverter) {     this.messageConverter = messageConverter. }
true;;1;3;/**  * Set the {@link KafkaTemplate} to use to send replies.  * @param replyTemplate the reply template  */ ;/**  * Set the {@link KafkaTemplate} to use to send replies.  * @param replyTemplate the reply template  */ void setReplyTemplate(KafkaTemplate<Object, Object> replyTemplate) {     this.replyTemplate = replyTemplate. }
true;;1;4;/**  * Set the {@link KafkaAwareTransactionManager} to use.  * @param transactionManager the transaction manager  */ ;/**  * Set the {@link KafkaAwareTransactionManager} to use.  * @param transactionManager the transaction manager  */ void setTransactionManager(KafkaAwareTransactionManager<Object, Object> transactionManager) {     this.transactionManager = transactionManager. }
true;;1;3;/**  * Set the {@link ErrorHandler} to use.  * @param errorHandler the error handler  */ ;/**  * Set the {@link ErrorHandler} to use.  * @param errorHandler the error handler  */ void setErrorHandler(ErrorHandler errorHandler) {     this.errorHandler = errorHandler. }
true;;1;4;/**  * Set the {@link AfterRollbackProcessor} to use.  * @param afterRollbackProcessor the after rollback processor  */ ;/**  * Set the {@link AfterRollbackProcessor} to use.  * @param afterRollbackProcessor the after rollback processor  */ void setAfterRollbackProcessor(AfterRollbackProcessor<Object, Object> afterRollbackProcessor) {     this.afterRollbackProcessor = afterRollbackProcessor. }
true;public;2;7;/**  * Configure the specified Kafka listener container factory. The factory can be  * further tuned and default settings can be overridden.  * @param listenerFactory the {@link ConcurrentKafkaListenerContainerFactory} instance  * to configure  * @param consumerFactory the {@link ConsumerFactory} to use  */ ;/**  * Configure the specified Kafka listener container factory. The factory can be  * further tuned and default settings can be overridden.  * @param listenerFactory the {@link ConcurrentKafkaListenerContainerFactory} instance  * to configure  * @param consumerFactory the {@link ConsumerFactory} to use  */ public void configure(ConcurrentKafkaListenerContainerFactory<Object, Object> listenerFactory, ConsumerFactory<Object, Object> consumerFactory) {     listenerFactory.setConsumerFactory(consumerFactory).     configureListenerFactory(listenerFactory).     configureContainer(listenerFactory.getContainerProperties()). }
false;private;1;12;;private void configureListenerFactory(ConcurrentKafkaListenerContainerFactory<Object, Object> factory) {     PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull().     Listener properties = this.properties.getListener().     map.from(properties::getConcurrency).to(factory::setConcurrency).     map.from(this.messageConverter).to(factory::setMessageConverter).     map.from(this.replyTemplate).to(factory::setReplyTemplate).     map.from(properties::getType).whenEqualTo(Listener.Type.BATCH).toCall(() -> factory.setBatchListener(true)).     map.from(this.errorHandler).to(factory::setErrorHandler).     map.from(this.afterRollbackProcessor).to(factory::setAfterRollbackProcessor). }
false;private;1;17;;private void configureContainer(ContainerProperties container) {     PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull().     Listener properties = this.properties.getListener().     map.from(properties::getAckMode).to(container::setAckMode).     map.from(properties::getClientId).to(container::setClientId).     map.from(properties::getAckCount).to(container::setAckCount).     map.from(properties::getAckTime).as(Duration::toMillis).to(container::setAckTime).     map.from(properties::getPollTimeout).as(Duration::toMillis).to(container::setPollTimeout).     map.from(properties::getNoPollThreshold).to(container::setNoPollThreshold).     map.from(properties::getIdleEventInterval).as(Duration::toMillis).to(container::setIdleEventInterval).     map.from(properties::getMonitorInterval).as(Duration::getSeconds).as(Number::intValue).to(container::setMonitorInterval).     map.from(properties::getLogContainerConfig).to(container::setLogContainerConfig).     map.from(this.transactionManager).to(container::setTransactionManager). }
