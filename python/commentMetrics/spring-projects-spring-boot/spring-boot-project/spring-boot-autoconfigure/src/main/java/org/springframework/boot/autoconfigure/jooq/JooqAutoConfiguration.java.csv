commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Bean @ConditionalOnMissingBean public DataSourceConnectionProvider dataSourceConnectionProvider(DataSource dataSource) {     return new DataSourceConnectionProvider(new TransactionAwareDataSourceProxy(dataSource)). }
false;public;1;6;;@Bean @ConditionalOnBean(PlatformTransactionManager.class) public SpringTransactionProvider transactionProvider(PlatformTransactionManager txManager) {     return new SpringTransactionProvider(txManager). }
false;public;0;5;;@Bean @Order(0) public DefaultExecuteListenerProvider jooqExceptionTranslatorExecuteListenerProvider() {     return new DefaultExecuteListenerProvider(new JooqExceptionTranslator()). }
false;public;1;4;;@Bean public DefaultDSLContext dslContext(org.jooq.Configuration configuration) {     return new DefaultDSLContext(configuration). }
false;public;12;31;;@Bean @ConditionalOnMissingBean(org.jooq.Configuration.class) public DefaultConfiguration jooqConfiguration(JooqProperties properties, ConnectionProvider connectionProvider, DataSource dataSource, ObjectProvider<TransactionProvider> transactionProvider, ObjectProvider<RecordMapperProvider> recordMapperProvider, ObjectProvider<RecordUnmapperProvider> recordUnmapperProvider, ObjectProvider<Settings> settings, ObjectProvider<RecordListenerProvider> recordListenerProviders, ObjectProvider<ExecuteListenerProvider> executeListenerProviders, ObjectProvider<VisitListenerProvider> visitListenerProviders, ObjectProvider<TransactionListenerProvider> transactionListenerProviders, ObjectProvider<ExecutorProvider> executorProvider) {     DefaultConfiguration configuration = new DefaultConfiguration().     configuration.set(properties.determineSqlDialect(dataSource)).     configuration.set(connectionProvider).     transactionProvider.ifAvailable(configuration::set).     recordMapperProvider.ifAvailable(configuration::set).     recordUnmapperProvider.ifAvailable(configuration::set).     settings.ifAvailable(configuration::set).     executorProvider.ifAvailable(configuration::set).     configuration.set(recordListenerProviders.orderedStream().toArray(RecordListenerProvider[]::new)).     configuration.set(executeListenerProviders.orderedStream().toArray(ExecuteListenerProvider[]::new)).     configuration.set(visitListenerProviders.orderedStream().toArray(VisitListenerProvider[]::new)).     configuration.setTransactionListenerProvider(transactionListenerProviders.orderedStream().toArray(TransactionListenerProvider[]::new)).     return configuration. }
