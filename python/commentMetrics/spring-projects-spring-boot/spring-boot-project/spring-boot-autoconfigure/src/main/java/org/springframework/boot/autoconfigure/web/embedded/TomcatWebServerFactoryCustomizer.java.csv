commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getOrder() {     return 0. }
false;public;1;44;;@Override public void customize(ConfigurableTomcatWebServerFactory factory) {     ServerProperties properties = this.serverProperties.     ServerProperties.Tomcat tomcatProperties = properties.getTomcat().     PropertyMapper propertyMapper = PropertyMapper.get().     propertyMapper.from(tomcatProperties::getBasedir).whenNonNull().to(factory::setBaseDirectory).     propertyMapper.from(tomcatProperties::getBackgroundProcessorDelay).whenNonNull().as(Duration::getSeconds).as(Long::intValue).to(factory::setBackgroundProcessorDelay).     customizeRemoteIpValve(factory).     propertyMapper.from(tomcatProperties::getMaxThreads).when(this::isPositive).to((maxThreads) -> customizeMaxThreads(factory, tomcatProperties.getMaxThreads())).     propertyMapper.from(tomcatProperties::getMinSpareThreads).when(this::isPositive).to((minSpareThreads) -> customizeMinThreads(factory, minSpareThreads)).     propertyMapper.from(this.serverProperties.getMaxHttpHeaderSize()).whenNonNull().asInt(DataSize::toBytes).when(this::isPositive).to((maxHttpHeaderSize) -> customizeMaxHttpHeaderSize(factory, maxHttpHeaderSize)).     propertyMapper.from(tomcatProperties::getMaxSwallowSize).whenNonNull().asInt(DataSize::toBytes).to((maxSwallowSize) -> customizeMaxSwallowSize(factory, maxSwallowSize)).     propertyMapper.from(tomcatProperties::getMaxHttpPostSize).asInt(DataSize::toBytes).when((maxHttpPostSize) -> maxHttpPostSize != 0).to((maxHttpPostSize) -> customizeMaxHttpPostSize(factory, maxHttpPostSize)).     propertyMapper.from(tomcatProperties::getAccesslog).when(ServerProperties.Tomcat.Accesslog::isEnabled).to((enabled) -> customizeAccessLog(factory)).     propertyMapper.from(tomcatProperties::getUriEncoding).whenNonNull().to(factory::setUriEncoding).     propertyMapper.from(properties::getConnectionTimeout).whenNonNull().to((connectionTimeout) -> customizeConnectionTimeout(factory, connectionTimeout)).     propertyMapper.from(tomcatProperties::getMaxConnections).when(this::isPositive).to((maxConnections) -> customizeMaxConnections(factory, maxConnections)).     propertyMapper.from(tomcatProperties::getAcceptCount).when(this::isPositive).to((acceptCount) -> customizeAcceptCount(factory, acceptCount)).     propertyMapper.from(tomcatProperties::getProcessorCache).when(this::isPositive).to((processorCache) -> customizeProcessorCache(factory, processorCache)).     customizeStaticResources(factory).     customizeErrorReportValve(properties.getError(), factory). }
false;private;1;3;;private boolean isPositive(int value) {     return value > 0. }
false;private;2;10;;private void customizeAcceptCount(ConfigurableTomcatWebServerFactory factory, int acceptCount) {     factory.addConnectorCustomizers((connector) -> {         ProtocolHandler handler = connector.getProtocolHandler().         if (handler instanceof AbstractProtocol) {             AbstractProtocol<?> protocol = (AbstractProtocol<?>) handler.             protocol.setAcceptCount(acceptCount).         }     }). }
false;private;2;6;;private void customizeProcessorCache(ConfigurableTomcatWebServerFactory factory, int processorCache) {     factory.addConnectorCustomizers((connector) -> ((AbstractHttp11Protocol<?>) connector.getProtocolHandler()).setProcessorCache(processorCache)). }
false;private;2;10;;private void customizeMaxConnections(ConfigurableTomcatWebServerFactory factory, int maxConnections) {     factory.addConnectorCustomizers((connector) -> {         ProtocolHandler handler = connector.getProtocolHandler().         if (handler instanceof AbstractProtocol) {             AbstractProtocol<?> protocol = (AbstractProtocol<?>) handler.             protocol.setMaxConnections(maxConnections).         }     }). }
false;private;2;10;;private void customizeConnectionTimeout(ConfigurableTomcatWebServerFactory factory, Duration connectionTimeout) {     factory.addConnectorCustomizers((connector) -> {         ProtocolHandler handler = connector.getProtocolHandler().         if (handler instanceof AbstractProtocol) {             AbstractProtocol<?> protocol = (AbstractProtocol<?>) handler.             protocol.setConnectionTimeout((int) connectionTimeout.toMillis()).         }     }). }
false;private;1;23;;private void customizeRemoteIpValve(ConfigurableTomcatWebServerFactory factory) {     Tomcat tomcatProperties = this.serverProperties.getTomcat().     String protocolHeader = tomcatProperties.getProtocolHeader().     String remoteIpHeader = tomcatProperties.getRemoteIpHeader().     // For back compatibility the valve is also enabled if protocol-header is set     if (StringUtils.hasText(protocolHeader) || StringUtils.hasText(remoteIpHeader) || getOrDeduceUseForwardHeaders()) {         RemoteIpValve valve = new RemoteIpValve().         valve.setProtocolHeader(StringUtils.hasLength(protocolHeader) ? protocolHeader : "X-Forwarded-Proto").         if (StringUtils.hasLength(remoteIpHeader)) {             valve.setRemoteIpHeader(remoteIpHeader).         }         // The internal proxies default to a white list of "safe" internal IP         // addresses         valve.setInternalProxies(tomcatProperties.getInternalProxies()).         valve.setPortHeader(tomcatProperties.getPortHeader()).         valve.setProtocolHeaderHttpsValue(tomcatProperties.getProtocolHeaderHttpsValue()).         // ... so it's safe to add this valve by default.         factory.addEngineValves(valve).     } }
false;private;0;7;;private boolean getOrDeduceUseForwardHeaders() {     if (this.serverProperties.isUseForwardHeaders() != null) {         return this.serverProperties.isUseForwardHeaders().     }     CloudPlatform platform = CloudPlatform.getActive(this.environment).     return platform != null && platform.isUsingForwardHeaders(). }
false;private;2;11;;@SuppressWarnings("rawtypes") private void customizeMaxThreads(ConfigurableTomcatWebServerFactory factory, int maxThreads) {     factory.addConnectorCustomizers((connector) -> {         ProtocolHandler handler = connector.getProtocolHandler().         if (handler instanceof AbstractProtocol) {             AbstractProtocol protocol = (AbstractProtocol) handler.             protocol.setMaxThreads(maxThreads).         }     }). }
false;private;2;11;;@SuppressWarnings("rawtypes") private void customizeMinThreads(ConfigurableTomcatWebServerFactory factory, int minSpareThreads) {     factory.addConnectorCustomizers((connector) -> {         ProtocolHandler handler = connector.getProtocolHandler().         if (handler instanceof AbstractProtocol) {             AbstractProtocol protocol = (AbstractProtocol) handler.             protocol.setMinSpareThreads(minSpareThreads).         }     }). }
false;private;2;11;;@SuppressWarnings("rawtypes") private void customizeMaxHttpHeaderSize(ConfigurableTomcatWebServerFactory factory, int maxHttpHeaderSize) {     factory.addConnectorCustomizers((connector) -> {         ProtocolHandler handler = connector.getProtocolHandler().         if (handler instanceof AbstractHttp11Protocol) {             AbstractHttp11Protocol protocol = (AbstractHttp11Protocol) handler.             protocol.setMaxHttpHeaderSize(maxHttpHeaderSize).         }     }). }
false;private;2;10;;private void customizeMaxSwallowSize(ConfigurableTomcatWebServerFactory factory, int maxSwallowSize) {     factory.addConnectorCustomizers((connector) -> {         ProtocolHandler handler = connector.getProtocolHandler().         if (handler instanceof AbstractHttp11Protocol) {             AbstractHttp11Protocol<?> protocol = (AbstractHttp11Protocol<?>) handler.             protocol.setMaxSwallowSize(maxSwallowSize).         }     }). }
false;private;2;5;;private void customizeMaxHttpPostSize(ConfigurableTomcatWebServerFactory factory, int maxHttpPostSize) {     factory.addConnectorCustomizers((connector) -> connector.setMaxPostSize(maxHttpPostSize)). }
false;private;1;16;;private void customizeAccessLog(ConfigurableTomcatWebServerFactory factory) {     ServerProperties.Tomcat tomcatProperties = this.serverProperties.getTomcat().     AccessLogValve valve = new AccessLogValve().     valve.setPattern(tomcatProperties.getAccesslog().getPattern()).     valve.setDirectory(tomcatProperties.getAccesslog().getDirectory()).     valve.setPrefix(tomcatProperties.getAccesslog().getPrefix()).     valve.setSuffix(tomcatProperties.getAccesslog().getSuffix()).     valve.setRenameOnRotate(tomcatProperties.getAccesslog().isRenameOnRotate()).     valve.setMaxDays(tomcatProperties.getAccesslog().getMaxDays()).     valve.setFileDateFormat(tomcatProperties.getAccesslog().getFileDateFormat()).     valve.setRequestAttributesEnabled(tomcatProperties.getAccesslog().isRequestAttributesEnabled()).     valve.setRotatable(tomcatProperties.getAccesslog().isRotate()).     valve.setBuffered(tomcatProperties.getAccesslog().isBuffered()).     factory.addEngineValves(valve). }
false;private;1;15;;private void customizeStaticResources(ConfigurableTomcatWebServerFactory factory) {     ServerProperties.Tomcat.Resource resource = this.serverProperties.getTomcat().getResource().     factory.addContextCustomizers((context) -> {         context.addLifecycleListener((event) -> {             if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT)) {                 context.getResources().setCachingAllowed(resource.isAllowCaching()).                 if (resource.getCacheTtl() != null) {                     long ttl = resource.getCacheTtl().toMillis().                     context.getResources().setCacheTtl(ttl).                 }             }         }).     }). }
false;private;2;11;;private void customizeErrorReportValve(ErrorProperties error, ConfigurableTomcatWebServerFactory factory) {     if (error.getIncludeStacktrace() == IncludeStacktrace.NEVER) {         factory.addContextCustomizers((context) -> {             ErrorReportValve valve = new ErrorReportValve().             valve.setShowServerInfo(false).             valve.setShowReport(false).             context.getParent().getPipeline().addValve(valve).         }).     } }
