commented;modifiers;parameterAmount;loc;comment;code
false;public;6;33;;@Bean @ConditionalOnMissingBean public SchedulerFactoryBean quartzScheduler(QuartzProperties properties, ObjectProvider<SchedulerFactoryBeanCustomizer> customizers, ObjectProvider<JobDetail> jobDetails, Map<String, Calendar> calendars, ObjectProvider<Trigger> triggers, ApplicationContext applicationContext) {     SchedulerFactoryBean schedulerFactoryBean = new SchedulerFactoryBean().     SpringBeanJobFactory jobFactory = new SpringBeanJobFactory().     jobFactory.setApplicationContext(applicationContext).     schedulerFactoryBean.setJobFactory(jobFactory).     if (properties.getSchedulerName() != null) {         schedulerFactoryBean.setSchedulerName(properties.getSchedulerName()).     }     schedulerFactoryBean.setAutoStartup(properties.isAutoStartup()).     schedulerFactoryBean.setStartupDelay((int) properties.getStartupDelay().getSeconds()).     schedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(properties.isWaitForJobsToCompleteOnShutdown()).     schedulerFactoryBean.setOverwriteExistingJobs(properties.isOverwriteExistingJobs()).     if (!properties.getProperties().isEmpty()) {         schedulerFactoryBean.setQuartzProperties(asProperties(properties.getProperties())).     }     schedulerFactoryBean.setJobDetails(jobDetails.orderedStream().toArray(JobDetail[]::new)).     schedulerFactoryBean.setCalendars(calendars).     schedulerFactoryBean.setTriggers(triggers.orderedStream().toArray(Trigger[]::new)).     customizers.orderedStream().forEach((customizer) -> customizer.customize(schedulerFactoryBean)).     return schedulerFactoryBean. }
false;private;1;5;;private Properties asProperties(Map<String, String> source) {     Properties properties = new Properties().     properties.putAll(source).     return properties. }
false;public;4;19;;@Bean @Order(0) public SchedulerFactoryBeanCustomizer dataSourceCustomizer(QuartzProperties properties, DataSource dataSource, @QuartzDataSource ObjectProvider<DataSource> quartzDataSource, ObjectProvider<PlatformTransactionManager> transactionManager) {     return (schedulerFactoryBean) -> {         if (properties.getJobStoreType() == JobStoreType.JDBC) {             DataSource dataSourceToUse = getDataSource(dataSource, quartzDataSource).             schedulerFactoryBean.setDataSource(dataSourceToUse).             PlatformTransactionManager txManager = transactionManager.getIfUnique().             if (txManager != null) {                 schedulerFactoryBean.setTransactionManager(txManager).             }         }     }. }
false;private;2;5;;private DataSource getDataSource(DataSource dataSource, ObjectProvider<DataSource> quartzDataSource) {     DataSource dataSourceIfAvailable = quartzDataSource.getIfAvailable().     return (dataSourceIfAvailable != null) ? dataSourceIfAvailable : dataSource. }
false;public;4;10;;@Bean @ConditionalOnMissingBean public QuartzDataSourceInitializer quartzDataSourceInitializer(DataSource dataSource, @QuartzDataSource ObjectProvider<DataSource> quartzDataSource, ResourceLoader resourceLoader, QuartzProperties properties) {     DataSource dataSourceToUse = getDataSource(dataSource, quartzDataSource).     return new QuartzDataSourceInitializer(dataSourceToUse, resourceLoader, properties). }
false;public,static;0;4;;@Bean public static DataSourceInitializerSchedulerDependencyPostProcessor dataSourceInitializerSchedulerDependencyPostProcessor() {     return new DataSourceInitializerSchedulerDependencyPostProcessor(). }
