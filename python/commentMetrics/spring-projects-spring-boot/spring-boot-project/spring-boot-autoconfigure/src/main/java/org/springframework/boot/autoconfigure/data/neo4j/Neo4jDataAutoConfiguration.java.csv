commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Bean @ConditionalOnMissingBean public org.neo4j.ogm.config.Configuration configuration(Neo4jProperties properties) {     return properties.createConfiguration(). }
false;public;3;9;;@Bean public SessionFactory sessionFactory(org.neo4j.ogm.config.Configuration configuration, ApplicationContext applicationContext, ObjectProvider<EventListener> eventListeners) {     SessionFactory sessionFactory = new SessionFactory(configuration, getPackagesToScan(applicationContext)).     eventListeners.stream().forEach(sessionFactory::register).     return sessionFactory. }
false;public;3;8;;@Bean @ConditionalOnMissingBean(PlatformTransactionManager.class) public Neo4jTransactionManager transactionManager(SessionFactory sessionFactory, Neo4jProperties properties, ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {     return customize(new Neo4jTransactionManager(sessionFactory), transactionManagerCustomizers.getIfAvailable()). }
false;private;2;7;;private Neo4jTransactionManager customize(Neo4jTransactionManager transactionManager, TransactionManagerCustomizers customizers) {     if (customizers != null) {         customizers.customize(transactionManager).     }     return transactionManager. }
false;private;1;8;;private String[] getPackagesToScan(ApplicationContext applicationContext) {     List<String> packages = EntityScanPackages.get(applicationContext).getPackageNames().     if (packages.isEmpty() && AutoConfigurationPackages.has(applicationContext)) {         packages = AutoConfigurationPackages.get(applicationContext).     }     return StringUtils.toStringArray(packages). }
false;public;0;10;;@Bean public OpenSessionInViewInterceptor neo4jOpenSessionInViewInterceptor() {     if (this.neo4jProperties.getOpenInView() == null) {         logger.warn("spring.data.neo4j.open-in-view is enabled by default." + "Therefore, database queries may be performed during view " + "rendering. Explicitly configure " + "spring.data.neo4j.open-in-view to disable this warning").     }     return new OpenSessionInViewInterceptor(). }
false;public;1;4;;@Override public void addInterceptors(InterceptorRegistry registry) {     registry.addWebRequestInterceptor(neo4jOpenSessionInViewInterceptor()). }
