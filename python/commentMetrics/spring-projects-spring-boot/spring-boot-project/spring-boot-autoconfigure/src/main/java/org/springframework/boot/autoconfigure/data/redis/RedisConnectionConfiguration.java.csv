commented;modifiers;parameterAmount;loc;comment;code
false;protected,final;0;16;;protected final RedisStandaloneConfiguration getStandaloneConfig() {     RedisStandaloneConfiguration config = new RedisStandaloneConfiguration().     if (StringUtils.hasText(this.properties.getUrl())) {         ConnectionInfo connectionInfo = parseUrl(this.properties.getUrl()).         config.setHostName(connectionInfo.getHostName()).         config.setPort(connectionInfo.getPort()).         config.setPassword(RedisPassword.of(connectionInfo.getPassword())).     } else {         config.setHostName(this.properties.getHost()).         config.setPort(this.properties.getPort()).         config.setPassword(RedisPassword.of(this.properties.getPassword())).     }     config.setDatabase(this.properties.getDatabase()).     return config. }
false;protected,final;0;17;;protected final RedisSentinelConfiguration getSentinelConfig() {     if (this.sentinelConfiguration != null) {         return this.sentinelConfiguration.     }     RedisProperties.Sentinel sentinelProperties = this.properties.getSentinel().     if (sentinelProperties != null) {         RedisSentinelConfiguration config = new RedisSentinelConfiguration().         config.master(sentinelProperties.getMaster()).         config.setSentinels(createSentinels(sentinelProperties)).         if (this.properties.getPassword() != null) {             config.setPassword(RedisPassword.of(this.properties.getPassword())).         }         config.setDatabase(this.properties.getDatabase()).         return config.     }     return null. }
true;protected,final;0;18;/**  * Create a {@link RedisClusterConfiguration} if necessary.  * @return {@literal null} if no cluster settings are set.  */ ;/**  * Create a {@link RedisClusterConfiguration} if necessary.  * @return {@literal null} if no cluster settings are set.  */ protected final RedisClusterConfiguration getClusterConfiguration() {     if (this.clusterConfiguration != null) {         return this.clusterConfiguration.     }     if (this.properties.getCluster() == null) {         return null.     }     RedisProperties.Cluster clusterProperties = this.properties.getCluster().     RedisClusterConfiguration config = new RedisClusterConfiguration(clusterProperties.getNodes()).     if (clusterProperties.getMaxRedirects() != null) {         config.setMaxRedirects(clusterProperties.getMaxRedirects()).     }     if (this.properties.getPassword() != null) {         config.setPassword(RedisPassword.of(this.properties.getPassword())).     }     return config. }
false;protected,final;0;3;;protected final RedisProperties getProperties() {     return this.properties. }
false;private;1;15;;private List<RedisNode> createSentinels(RedisProperties.Sentinel sentinel) {     List<RedisNode> nodes = new ArrayList<>().     for (String node : sentinel.getNodes()) {         try {             String[] parts = StringUtils.split(node, ":").             Assert.state(parts.length == 2, "Must be defined as 'host:port'").             nodes.add(new RedisNode(parts[0], Integer.valueOf(parts[1]))).         } catch (RuntimeException ex) {             throw new IllegalStateException("Invalid redis sentinel " + "property '" + node + "'", ex).         }     }     return nodes. }
false;protected;1;18;;protected ConnectionInfo parseUrl(String url) {     try {         URI uri = new URI(url).         boolean useSsl = (url.startsWith("rediss://")).         String password = null.         if (uri.getUserInfo() != null) {             password = uri.getUserInfo().             int index = password.indexOf(':').             if (index >= 0) {                 password = password.substring(index + 1).             }         }         return new ConnectionInfo(uri, useSsl, password).     } catch (URISyntaxException ex) {         throw new IllegalArgumentException("Malformed url '" + url + "'", ex).     } }
false;public;0;3;;public boolean isUseSsl() {     return this.useSsl. }
false;public;0;3;;public String getHostName() {     return this.uri.getHost(). }
false;public;0;3;;public int getPort() {     return this.uri.getPort(). }
false;public;0;3;;public String getPassword() {     return this.password. }
