commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Bean @Primary public DefaultCouchbaseEnvironment couchbaseEnvironment() {     return initializeEnvironmentBuilder(this.properties).build(). }
false;public;0;5;;@Bean @Primary public Cluster couchbaseCluster() {     return CouchbaseCluster.create(couchbaseEnvironment(), determineBootstrapHosts()). }
true;protected;0;3;/**  * Determine the Couchbase nodes to bootstrap from.  * @return the Couchbase nodes to bootstrap from  */ ;/**  * Determine the Couchbase nodes to bootstrap from.  * @return the Couchbase nodes to bootstrap from  */ protected List<String> determineBootstrapHosts() {     return this.properties.getBootstrapHosts(). }
false;public;0;7;;@Bean @Primary @DependsOn("couchbaseClient") public ClusterInfo couchbaseClusterInfo() {     return couchbaseCluster().clusterManager(this.properties.getBucket().getName(), this.properties.getBucket().getPassword()).info(). }
false;public;0;6;;@Bean @Primary public Bucket couchbaseClient() {     return couchbaseCluster().openBucket(this.properties.getBucket().getName(), this.properties.getBucket().getPassword()). }
true;protected;1;38;/**  * Initialize an environment builder based on the specified settings.  * @param properties the couchbase properties to use  * @return the {@link DefaultCouchbaseEnvironment} builder.  */ ;/**  * Initialize an environment builder based on the specified settings.  * @param properties the couchbase properties to use  * @return the {@link DefaultCouchbaseEnvironment} builder.  */ protected DefaultCouchbaseEnvironment.Builder initializeEnvironmentBuilder(CouchbaseProperties properties) {     CouchbaseProperties.Endpoints endpoints = properties.getEnv().getEndpoints().     CouchbaseProperties.Timeouts timeouts = properties.getEnv().getTimeouts().     DefaultCouchbaseEnvironment.Builder builder = DefaultCouchbaseEnvironment.builder().     if (timeouts.getConnect() != null) {         builder = builder.connectTimeout(timeouts.getConnect().toMillis()).     }     builder = builder.keyValueServiceConfig(KeyValueServiceConfig.create(endpoints.getKeyValue())).     if (timeouts.getKeyValue() != null) {         builder = builder.kvTimeout(timeouts.getKeyValue().toMillis()).     }     if (timeouts.getQuery() != null) {         builder = builder.queryTimeout(timeouts.getQuery().toMillis()).         builder = builder.queryServiceConfig(getQueryServiceConfig(endpoints)).         builder = builder.viewServiceConfig(getViewServiceConfig(endpoints)).     }     if (timeouts.getSocketConnect() != null) {         builder = builder.socketConnectTimeout((int) timeouts.getSocketConnect().toMillis()).     }     if (timeouts.getView() != null) {         builder = builder.viewTimeout(timeouts.getView().toMillis()).     }     CouchbaseProperties.Ssl ssl = properties.getEnv().getSsl().     if (ssl.getEnabled()) {         builder = builder.sslEnabled(true).         if (ssl.getKeyStore() != null) {             builder = builder.sslKeystoreFile(ssl.getKeyStore()).         }         if (ssl.getKeyStorePassword() != null) {             builder = builder.sslKeystorePassword(ssl.getKeyStorePassword()).         }     }     return builder. }
false;private;1;4;;private QueryServiceConfig getQueryServiceConfig(Endpoints endpoints) {     return QueryServiceConfig.create(endpoints.getQueryservice().getMinEndpoints(), endpoints.getQueryservice().getMaxEndpoints()). }
false;private;1;4;;private ViewServiceConfig getViewServiceConfig(Endpoints endpoints) {     return ViewServiceConfig.create(endpoints.getViewservice().getMinEndpoints(), endpoints.getViewservice().getMaxEndpoints()). }
