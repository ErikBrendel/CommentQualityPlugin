commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@Bean @ConditionalOnProperty(prefix = "spring.hateoas", name = "use-hal-as-default-json-media-type", matchIfMissing = true) public static HalMessageConverterSupportedMediaTypesCustomizer halMessageConverterSupportedMediaTypeCustomizer() {     return new HalMessageConverterSupportedMediaTypesCustomizer(). }
false;public;0;7;;@PostConstruct public void configureHttpMessageConverters() {     if (this.beanFactory instanceof ListableBeanFactory) {         configureHttpMessageConverters(((ListableBeanFactory) this.beanFactory).getBeansOfType(RequestMappingHandlerAdapter.class).values()).     } }
false;private;1;9;;private void configureHttpMessageConverters(Collection<RequestMappingHandlerAdapter> handlerAdapters) {     for (RequestMappingHandlerAdapter handlerAdapter : handlerAdapters) {         for (HttpMessageConverter<?> messageConverter : handlerAdapter.getMessageConverters()) {             configureHttpMessageConverter(messageConverter).         }     } }
false;private;1;11;;private void configureHttpMessageConverter(HttpMessageConverter<?> converter) {     if (converter instanceof TypeConstrainedMappingJackson2HttpMessageConverter) {         List<MediaType> supportedMediaTypes = new ArrayList<>(converter.getSupportedMediaTypes()).         if (!supportedMediaTypes.contains(MediaType.APPLICATION_JSON)) {             supportedMediaTypes.add(MediaType.APPLICATION_JSON).         }         ((AbstractHttpMessageConverter<?>) converter).setSupportedMediaTypes(supportedMediaTypes).     } }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     this.beanFactory = beanFactory. }
