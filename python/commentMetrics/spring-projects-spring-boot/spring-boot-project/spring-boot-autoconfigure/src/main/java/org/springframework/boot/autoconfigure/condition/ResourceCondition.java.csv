commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     if (context.getEnvironment().containsProperty(this.property)) {         return ConditionOutcome.match(startConditionMessage().foundExactly("property " + this.property)).     }     return getResourceOutcome(context, metadata). }
true;protected;2;19;/**  * Check if one of the default resource locations actually exists.  * @param context the condition context  * @param metadata the annotation metadata  * @return the condition outcome  */ ;/**  * Check if one of the default resource locations actually exists.  * @param context the condition context  * @param metadata the annotation metadata  * @return the condition outcome  */ protected ConditionOutcome getResourceOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     List<String> found = new ArrayList<>().     for (String location : this.resourceLocations) {         Resource resource = context.getResourceLoader().getResource(location).         if (resource != null && resource.exists()) {             found.add(location).         }     }     if (found.isEmpty()) {         ConditionMessage message = startConditionMessage().didNotFind("resource", "resources").items(Style.QUOTE, Arrays.asList(this.resourceLocations)).         return ConditionOutcome.noMatch(message).     }     ConditionMessage message = startConditionMessage().found("resource", "resources").items(Style.QUOTE, found).     return ConditionOutcome.match(message). }
false;protected,final;0;3;;protected final Builder startConditionMessage() {     return ConditionMessage.forCondition("ResourceCondition", "(" + this.name + ")"). }
