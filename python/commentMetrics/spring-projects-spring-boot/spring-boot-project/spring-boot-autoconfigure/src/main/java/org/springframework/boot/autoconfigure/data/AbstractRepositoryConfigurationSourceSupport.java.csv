commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {     new RepositoryConfigurationDelegate(getConfigurationSource(registry), this.resourceLoader, this.environment).registerRepositoriesIn(registry, getRepositoryConfigurationExtension()). }
false;public;0;5;;@Override public Streamable<String> getBasePackages() {     return AbstractRepositoryConfigurationSourceSupport.this.getBasePackages(). }
false;public;0;5;;@Override public BootstrapMode getBootstrapMode() {     return AbstractRepositoryConfigurationSourceSupport.this.getBootstrapMode(). }
false;private;1;20;;private AnnotationRepositoryConfigurationSource getConfigurationSource(BeanDefinitionRegistry beanDefinitionRegistry) {     StandardAnnotationMetadata metadata = new StandardAnnotationMetadata(getConfiguration(), true).     return new AnnotationRepositoryConfigurationSource(metadata, getAnnotation(), this.resourceLoader, this.environment, beanDefinitionRegistry) {          @Override         public Streamable<String> getBasePackages() {             return AbstractRepositoryConfigurationSourceSupport.this.getBasePackages().         }          @Override         public BootstrapMode getBootstrapMode() {             return AbstractRepositoryConfigurationSourceSupport.this.getBootstrapMode().         }     }. }
false;protected;0;3;;protected Streamable<String> getBasePackages() {     return Streamable.of(AutoConfigurationPackages.get(this.beanFactory)). }
true;protected,abstract;0;1;/**  * The Spring Data annotation used to enable the particular repository support.  * @return the annotation class  */ ;/**  * The Spring Data annotation used to enable the particular repository support.  * @return the annotation class  */ protected abstract Class<? extends Annotation> getAnnotation().
true;protected,abstract;0;1;/**  * The configuration class that will be used by Spring Boot as a template.  * @return the configuration class  */ ;/**  * The configuration class that will be used by Spring Boot as a template.  * @return the configuration class  */ protected abstract Class<?> getConfiguration().
true;protected,abstract;0;1;/**  * The {@link RepositoryConfigurationExtension} for the particular repository support.  * @return the repository configuration extension  */ ;/**  * The {@link RepositoryConfigurationExtension} for the particular repository support.  * @return the repository configuration extension  */ protected abstract RepositoryConfigurationExtension getRepositoryConfigurationExtension().
true;protected;0;3;/**  * The {@link BootstrapMode} for the particular repository support. Defaults to  * {@link BootstrapMode#DEFAULT}.  * @return the bootstrap mode  */ ;/**  * The {@link BootstrapMode} for the particular repository support. Defaults to  * {@link BootstrapMode#DEFAULT}.  * @return the bootstrap mode  */ protected BootstrapMode getBootstrapMode() {     return BootstrapMode.DEFAULT. }
false;public;1;4;;@Override public void setResourceLoader(ResourceLoader resourceLoader) {     this.resourceLoader = resourceLoader. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     this.beanFactory = beanFactory. }
false;public;1;4;;@Override public void setEnvironment(Environment environment) {     this.environment = environment. }
