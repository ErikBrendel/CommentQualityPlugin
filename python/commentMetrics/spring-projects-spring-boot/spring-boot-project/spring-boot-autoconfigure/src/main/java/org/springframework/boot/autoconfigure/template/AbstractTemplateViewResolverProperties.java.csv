commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getPrefix() {     return this.prefix. }
false;public;1;3;;public void setPrefix(String prefix) {     this.prefix = prefix. }
false;public;0;3;;public String getSuffix() {     return this.suffix. }
false;public;1;3;;public void setSuffix(String suffix) {     this.suffix = suffix. }
false;public;0;3;;public String getRequestContextAttribute() {     return this.requestContextAttribute. }
false;public;1;3;;public void setRequestContextAttribute(String requestContextAttribute) {     this.requestContextAttribute = requestContextAttribute. }
false;public;0;3;;public boolean isExposeRequestAttributes() {     return this.exposeRequestAttributes. }
false;public;1;3;;public void setExposeRequestAttributes(boolean exposeRequestAttributes) {     this.exposeRequestAttributes = exposeRequestAttributes. }
false;public;0;3;;public boolean isExposeSessionAttributes() {     return this.exposeSessionAttributes. }
false;public;1;3;;public void setExposeSessionAttributes(boolean exposeSessionAttributes) {     this.exposeSessionAttributes = exposeSessionAttributes. }
false;public;0;3;;public boolean isAllowRequestOverride() {     return this.allowRequestOverride. }
false;public;1;3;;public void setAllowRequestOverride(boolean allowRequestOverride) {     this.allowRequestOverride = allowRequestOverride. }
false;public;0;3;;public boolean isAllowSessionOverride() {     return this.allowSessionOverride. }
false;public;1;3;;public void setAllowSessionOverride(boolean allowSessionOverride) {     this.allowSessionOverride = allowSessionOverride. }
false;public;0;3;;public boolean isExposeSpringMacroHelpers() {     return this.exposeSpringMacroHelpers. }
false;public;1;3;;public void setExposeSpringMacroHelpers(boolean exposeSpringMacroHelpers) {     this.exposeSpringMacroHelpers = exposeSpringMacroHelpers. }
true;public;1;22;/**  * Apply the given properties to a {@link AbstractTemplateViewResolver}. Use Object in  * signature to avoid runtime dependency on MVC, which means that the template engine  * can be used in a non-web application.  * @param viewResolver the resolver to apply the properties to.  */ ;/**  * Apply the given properties to a {@link AbstractTemplateViewResolver}. Use Object in  * signature to avoid runtime dependency on MVC, which means that the template engine  * can be used in a non-web application.  * @param viewResolver the resolver to apply the properties to.  */ public void applyToMvcViewResolver(Object viewResolver) {     Assert.isInstanceOf(AbstractTemplateViewResolver.class, viewResolver, "ViewResolver is not an instance of AbstractTemplateViewResolver :" + viewResolver).     AbstractTemplateViewResolver resolver = (AbstractTemplateViewResolver) viewResolver.     resolver.setPrefix(getPrefix()).     resolver.setSuffix(getSuffix()).     resolver.setCache(isCache()).     if (getContentType() != null) {         resolver.setContentType(getContentType().toString()).     }     resolver.setViewNames(getViewNames()).     resolver.setExposeRequestAttributes(isExposeRequestAttributes()).     resolver.setAllowRequestOverride(isAllowRequestOverride()).     resolver.setAllowSessionOverride(isAllowSessionOverride()).     resolver.setExposeSessionAttributes(isExposeSessionAttributes()).     resolver.setExposeSpringMacroHelpers(isExposeSpringMacroHelpers()).     resolver.setRequestContextAttribute(getRequestContextAttribute()).     // The resolver usually acts as a fallback resolver (e.g. like a     // InternalResourceViewResolver) so it needs to have low precedence     resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5). }
