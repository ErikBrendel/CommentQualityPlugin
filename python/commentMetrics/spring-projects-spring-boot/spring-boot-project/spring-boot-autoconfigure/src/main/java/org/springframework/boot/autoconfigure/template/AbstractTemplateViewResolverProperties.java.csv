# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractTemplateViewResolverProperties -> public void applyToViewResolver(Object viewResolver);1507173536;Apply the given properties to a {@link AbstractTemplateViewResolver}. Use Object in_signature to avoid runtime dependency on MVC, which means that the template engine_can be used in a non-web application._@param viewResolver the resolver to apply the properties to.;public void applyToViewResolver(Object viewResolver) {_		Assert.isInstanceOf(AbstractTemplateViewResolver.class, viewResolver,_				"ViewResolver is not an instance of AbstractTemplateViewResolver :"_						+ viewResolver)__		AbstractTemplateViewResolver resolver = (AbstractTemplateViewResolver) viewResolver__		resolver.setPrefix(getPrefix())__		resolver.setSuffix(getSuffix())__		resolver.setCache(isCache())__		if (getContentType() != null) {_			resolver.setContentType(getContentType().toString())__		}_		resolver.setViewNames(getViewNames())__		resolver.setExposeRequestAttributes(isExposeRequestAttributes())__		resolver.setAllowRequestOverride(isAllowRequestOverride())__		resolver.setAllowSessionOverride(isAllowSessionOverride())__		resolver.setExposeSessionAttributes(isExposeSessionAttributes())__		resolver.setExposeSpringMacroHelpers(isExposeSpringMacroHelpers())__		resolver.setRequestContextAttribute(getRequestContextAttribute())__		_		_		resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5)__	};apply,the,given,properties,to,a,link,abstract,template,view,resolver,use,object,in,signature,to,avoid,runtime,dependency,on,mvc,which,means,that,the,template,engine,can,be,used,in,a,non,web,application,param,view,resolver,the,resolver,to,apply,the,properties,to;public,void,apply,to,view,resolver,object,view,resolver,assert,is,instance,of,abstract,template,view,resolver,class,view,resolver,view,resolver,is,not,an,instance,of,abstract,template,view,resolver,view,resolver,abstract,template,view,resolver,resolver,abstract,template,view,resolver,view,resolver,resolver,set,prefix,get,prefix,resolver,set,suffix,get,suffix,resolver,set,cache,is,cache,if,get,content,type,null,resolver,set,content,type,get,content,type,to,string,resolver,set,view,names,get,view,names,resolver,set,expose,request,attributes,is,expose,request,attributes,resolver,set,allow,request,override,is,allow,request,override,resolver,set,allow,session,override,is,allow,session,override,resolver,set,expose,session,attributes,is,expose,session,attributes,resolver,set,expose,spring,macro,helpers,is,expose,spring,macro,helpers,resolver,set,request,context,attribute,get,request,context,attribute,resolver,set,order,ordered,5
AbstractTemplateViewResolverProperties -> public void applyToViewResolver(Object viewResolver);1507661773;Apply the given properties to a {@link AbstractTemplateViewResolver}. Use Object in_signature to avoid runtime dependency on MVC, which means that the template engine_can be used in a non-web application._@param viewResolver the resolver to apply the properties to.;public void applyToViewResolver(Object viewResolver) {_		Assert.isInstanceOf(AbstractTemplateViewResolver.class, viewResolver,_				"ViewResolver is not an instance of AbstractTemplateViewResolver :"_						+ viewResolver)__		AbstractTemplateViewResolver resolver = (AbstractTemplateViewResolver) viewResolver__		resolver.setPrefix(getPrefix())__		resolver.setSuffix(getSuffix())__		resolver.setCache(isCache())__		if (getContentType() != null) {_			resolver.setContentType(getContentType().toString())__		}_		resolver.setViewNames(getViewNames())__		resolver.setExposeRequestAttributes(isExposeRequestAttributes())__		resolver.setAllowRequestOverride(isAllowRequestOverride())__		resolver.setAllowSessionOverride(isAllowSessionOverride())__		resolver.setExposeSessionAttributes(isExposeSessionAttributes())__		resolver.setExposeSpringMacroHelpers(isExposeSpringMacroHelpers())__		resolver.setRequestContextAttribute(getRequestContextAttribute())__		_		_		resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5)__	};apply,the,given,properties,to,a,link,abstract,template,view,resolver,use,object,in,signature,to,avoid,runtime,dependency,on,mvc,which,means,that,the,template,engine,can,be,used,in,a,non,web,application,param,view,resolver,the,resolver,to,apply,the,properties,to;public,void,apply,to,view,resolver,object,view,resolver,assert,is,instance,of,abstract,template,view,resolver,class,view,resolver,view,resolver,is,not,an,instance,of,abstract,template,view,resolver,view,resolver,abstract,template,view,resolver,resolver,abstract,template,view,resolver,view,resolver,resolver,set,prefix,get,prefix,resolver,set,suffix,get,suffix,resolver,set,cache,is,cache,if,get,content,type,null,resolver,set,content,type,get,content,type,to,string,resolver,set,view,names,get,view,names,resolver,set,expose,request,attributes,is,expose,request,attributes,resolver,set,allow,request,override,is,allow,request,override,resolver,set,allow,session,override,is,allow,session,override,resolver,set,expose,session,attributes,is,expose,session,attributes,resolver,set,expose,spring,macro,helpers,is,expose,spring,macro,helpers,resolver,set,request,context,attribute,get,request,context,attribute,resolver,set,order,ordered,5
AbstractTemplateViewResolverProperties -> public void applyToViewResolver(Object viewResolver);1511221881;Apply the given properties to a {@link AbstractTemplateViewResolver}. Use Object in_signature to avoid runtime dependency on MVC, which means that the template engine_can be used in a non-web application._@param viewResolver the resolver to apply the properties to.;public void applyToViewResolver(Object viewResolver) {_		Assert.isInstanceOf(AbstractTemplateViewResolver.class, viewResolver,_				"ViewResolver is not an instance of AbstractTemplateViewResolver :"_						+ viewResolver)__		AbstractTemplateViewResolver resolver = (AbstractTemplateViewResolver) viewResolver__		resolver.setPrefix(getPrefix())__		resolver.setSuffix(getSuffix())__		resolver.setCache(isCache())__		if (getContentType() != null) {_			resolver.setContentType(getContentType().toString())__		}_		resolver.setViewNames(getViewNames())__		resolver.setExposeRequestAttributes(isExposeRequestAttributes())__		resolver.setAllowRequestOverride(isAllowRequestOverride())__		resolver.setAllowSessionOverride(isAllowSessionOverride())__		resolver.setExposeSessionAttributes(isExposeSessionAttributes())__		resolver.setExposeSpringMacroHelpers(isExposeSpringMacroHelpers())__		resolver.setRequestContextAttribute(getRequestContextAttribute())__		_		_		resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 5)__	};apply,the,given,properties,to,a,link,abstract,template,view,resolver,use,object,in,signature,to,avoid,runtime,dependency,on,mvc,which,means,that,the,template,engine,can,be,used,in,a,non,web,application,param,view,resolver,the,resolver,to,apply,the,properties,to;public,void,apply,to,view,resolver,object,view,resolver,assert,is,instance,of,abstract,template,view,resolver,class,view,resolver,view,resolver,is,not,an,instance,of,abstract,template,view,resolver,view,resolver,abstract,template,view,resolver,resolver,abstract,template,view,resolver,view,resolver,resolver,set,prefix,get,prefix,resolver,set,suffix,get,suffix,resolver,set,cache,is,cache,if,get,content,type,null,resolver,set,content,type,get,content,type,to,string,resolver,set,view,names,get,view,names,resolver,set,expose,request,attributes,is,expose,request,attributes,resolver,set,allow,request,override,is,allow,request,override,resolver,set,allow,session,override,is,allow,session,override,resolver,set,expose,session,attributes,is,expose,session,attributes,resolver,set,expose,spring,macro,helpers,is,expose,spring,macro,helpers,resolver,set,request,context,attribute,get,request,context,attribute,resolver,set,order,ordered,5
