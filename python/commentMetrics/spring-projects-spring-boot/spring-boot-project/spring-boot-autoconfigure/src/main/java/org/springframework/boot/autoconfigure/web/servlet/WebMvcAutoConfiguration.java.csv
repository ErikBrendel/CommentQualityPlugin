commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Bean @ConditionalOnMissingBean(HiddenHttpMethodFilter.class) @ConditionalOnProperty(prefix = "spring.mvc.hiddenmethod.filter", name = "enabled", matchIfMissing = true) public OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {     return new OrderedHiddenHttpMethodFilter(). }
false;public;0;6;;@Bean @ConditionalOnMissingBean(FormContentFilter.class) @ConditionalOnProperty(prefix = "spring.mvc.formcontent.filter", name = "enabled", matchIfMissing = true) public OrderedFormContentFilter formContentFilter() {     return new OrderedFormContentFilter(). }
false;public;1;4;;@Override public void setResourceLoader(ResourceLoader resourceLoader) {     this.resourceLoader = resourceLoader. }
false;public;1;5;;@Override public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {     this.messageConvertersProvider.ifAvailable((customConverters) -> converters.addAll(customConverters.getConverters())). }
false;public;1;15;;@Override public void configureAsyncSupport(AsyncSupportConfigurer configurer) {     if (this.beanFactory.containsBean(TaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME)) {         Object taskExecutor = this.beanFactory.getBean(TaskExecutionAutoConfiguration.APPLICATION_TASK_EXECUTOR_BEAN_NAME).         if (taskExecutor instanceof AsyncTaskExecutor) {             configurer.setTaskExecutor(((AsyncTaskExecutor) taskExecutor)).         }     }     Duration timeout = this.mvcProperties.getAsync().getRequestTimeout().     if (timeout != null) {         configurer.setDefaultTimeout(timeout.toMillis()).     } }
false;public;1;7;;@Override public void configurePathMatch(PathMatchConfigurer configurer) {     configurer.setUseSuffixPatternMatch(this.mvcProperties.getPathmatch().isUseSuffixPattern()).     configurer.setUseRegisteredSuffixPatternMatch(this.mvcProperties.getPathmatch().isUseRegisteredSuffixPattern()). }
false;public;1;13;;@Override public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {     WebMvcProperties.Contentnegotiation contentnegotiation = this.mvcProperties.getContentnegotiation().     configurer.favorPathExtension(contentnegotiation.isFavorPathExtension()).     configurer.favorParameter(contentnegotiation.isFavorParameter()).     if (contentnegotiation.getParameterName() != null) {         configurer.parameterName(contentnegotiation.getParameterName()).     }     Map<String, MediaType> mediaTypes = this.mvcProperties.getContentnegotiation().getMediaTypes().     mediaTypes.forEach(configurer::mediaType). }
false;public;0;8;;@Bean @ConditionalOnMissingBean public InternalResourceViewResolver defaultViewResolver() {     InternalResourceViewResolver resolver = new InternalResourceViewResolver().     resolver.setPrefix(this.mvcProperties.getView().getPrefix()).     resolver.setSuffix(this.mvcProperties.getView().getSuffix()).     return resolver. }
false;public;0;8;;@Bean @ConditionalOnBean(View.class) @ConditionalOnMissingBean public BeanNameViewResolver beanNameViewResolver() {     BeanNameViewResolver resolver = new BeanNameViewResolver().     resolver.setOrder(Ordered.LOWEST_PRECEDENCE - 10).     return resolver. }
false;public;1;12;;@Bean @ConditionalOnBean(ViewResolver.class) @ConditionalOnMissingBean(name = "viewResolver", value = ContentNegotiatingViewResolver.class) public ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {     ContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver().     resolver.setContentNegotiationManager(beanFactory.getBean(ContentNegotiationManager.class)).     // ContentNegotiatingViewResolver uses all the other view resolvers to locate     // a view so it should have a high precedence     resolver.setOrder(Ordered.HIGHEST_PRECEDENCE).     return resolver. }
false;public;0;12;;@Bean @ConditionalOnMissingBean @ConditionalOnProperty(prefix = "spring.mvc", name = "locale") public LocaleResolver localeResolver() {     if (this.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {         return new FixedLocaleResolver(this.mvcProperties.getLocale()).     }     AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver().     localeResolver.setDefaultLocale(this.mvcProperties.getLocale()).     return localeResolver. }
false;public;0;10;;@Override public MessageCodesResolver getMessageCodesResolver() {     if (this.mvcProperties.getMessageCodesResolverFormat() != null) {         DefaultMessageCodesResolver resolver = new DefaultMessageCodesResolver().         resolver.setMessageCodeFormatter(this.mvcProperties.getMessageCodesResolverFormat()).         return resolver.     }     return null. }
false;public;1;12;;@Override public void addFormatters(FormatterRegistry registry) {     for (Converter<?, ?> converter : getBeansOfType(Converter.class)) {         registry.addConverter(converter).     }     for (GenericConverter converter : getBeansOfType(GenericConverter.class)) {         registry.addConverter(converter).     }     for (Formatter<?> formatter : getBeansOfType(Formatter.class)) {         registry.addFormatter(formatter).     } }
false;private;1;3;;private <T> Collection<T> getBeansOfType(Class<T> type) {     return this.beanFactory.getBeansOfType(type).values(). }
false;public;1;26;;@Override public void addResourceHandlers(ResourceHandlerRegistry registry) {     if (!this.resourceProperties.isAddMappings()) {         logger.debug("Default resource handling disabled").         return.     }     Duration cachePeriod = this.resourceProperties.getCache().getPeriod().     CacheControl cacheControl = this.resourceProperties.getCache().getCachecontrol().toHttpCacheControl().     if (!registry.hasMappingForPattern("/webjars/**")) {         customizeResourceHandlerRegistration(registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:/META-INF/resources/webjars/").setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl)).     }     String staticPathPattern = this.mvcProperties.getStaticPathPattern().     if (!registry.hasMappingForPattern(staticPathPattern)) {         customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern).addResourceLocations(getResourceLocations(this.resourceProperties.getStaticLocations())).setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl)).     } }
false;private;1;3;;private Integer getSeconds(Duration cachePeriod) {     return (cachePeriod != null) ? (int) cachePeriod.getSeconds() : null. }
false;public;1;8;;@Bean public WelcomePageHandlerMapping welcomePageHandlerMapping(ApplicationContext applicationContext) {     return new WelcomePageHandlerMapping(new TemplateAvailabilityProviders(applicationContext), applicationContext, getWelcomePage(), this.mvcProperties.getStaticPathPattern()). }
false;static;1;8;;static String[] getResourceLocations(String[] staticLocations) {     String[] locations = new String[staticLocations.length + SERVLET_LOCATIONS.length].     System.arraycopy(staticLocations, 0, locations, 0, staticLocations.length).     System.arraycopy(SERVLET_LOCATIONS, 0, locations, staticLocations.length, SERVLET_LOCATIONS.length).     return locations. }
false;private;0;6;;private Optional<Resource> getWelcomePage() {     String[] locations = getResourceLocations(this.resourceProperties.getStaticLocations()).     return Arrays.stream(locations).map(this::getIndexHtml).filter(this::isReadable).findFirst(). }
false;private;1;3;;private Resource getIndexHtml(String location) {     return this.resourceLoader.getResource(location + "index.html"). }
false;private;1;8;;private boolean isReadable(Resource resource) {     try {         return resource.exists() && (resource.getURL() != null).     } catch (Exception ex) {         return false.     } }
false;private;1;6;;private void customizeResourceHandlerRegistration(ResourceHandlerRegistration registration) {     if (this.resourceHandlerRegistrationCustomizer != null) {         this.resourceHandlerRegistrationCustomizer.customize(registration).     } }
false;public,static;0;7;;@Bean @ConditionalOnMissingBean({ RequestContextListener.class, RequestContextFilter.class }) @ConditionalOnMissingFilterBean(RequestContextFilter.class) public static RequestContextFilter requestContextFilter() {     return new OrderedRequestContextFilter(). }
false;public;1;4;;@Override public void setResourceLoader(ResourceLoader resourceLoader) {     this.resourceLoader = resourceLoader. }
false;public;0;8;;@Bean public SimpleUrlHandlerMapping faviconHandlerMapping() {     SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping().     mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1).     mapping.setUrlMap(Collections.singletonMap("**/favicon.ico", faviconRequestHandler())).     return mapping. }
false;public;0;6;;@Bean public ResourceHttpRequestHandler faviconRequestHandler() {     ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler().     requestHandler.setLocations(resolveFaviconLocations()).     return requestHandler. }
false;private;0;9;;private List<Resource> resolveFaviconLocations() {     String[] staticLocations = getResourceLocations(this.resourceProperties.getStaticLocations()).     List<Resource> locations = new ArrayList<>(staticLocations.length + 1).     Arrays.stream(staticLocations).map(this.resourceLoader::getResource).forEach(locations::add).     locations.add(new ClassPathResource("/")).     return Collections.unmodifiableList(locations). }
false;public;0;8;;@Bean @Override public RequestMappingHandlerAdapter requestMappingHandlerAdapter() {     RequestMappingHandlerAdapter adapter = super.requestMappingHandlerAdapter().     adapter.setIgnoreDefaultModelOnRedirect(this.mvcProperties == null || this.mvcProperties.isIgnoreDefaultModelOnRedirect()).     return adapter. }
false;protected;0;8;;@Override protected RequestMappingHandlerAdapter createRequestMappingHandlerAdapter() {     if (this.mvcRegistrations != null && this.mvcRegistrations.getRequestMappingHandlerAdapter() != null) {         return this.mvcRegistrations.getRequestMappingHandlerAdapter().     }     return super.createRequestMappingHandlerAdapter(). }
false;public;0;7;;@Bean @Primary @Override public RequestMappingHandlerMapping requestMappingHandlerMapping() {     // Must be @Primary for MvcUriComponentsBuilder to work     return super.requestMappingHandlerMapping(). }
false;public;0;8;;@Bean @Override public FormattingConversionService mvcConversionService() {     WebConversionService conversionService = new WebConversionService(this.mvcProperties.getDateFormat()).     addFormatters(conversionService).     return conversionService. }
false;public;0;9;;@Bean @Override public Validator mvcValidator() {     if (!ClassUtils.isPresent("javax.validation.Validator", getClass().getClassLoader())) {         return super.mvcValidator().     }     return ValidatorAdapter.get(getApplicationContext(), getValidator()). }
false;protected;0;8;;@Override protected RequestMappingHandlerMapping createRequestMappingHandlerMapping() {     if (this.mvcRegistrations != null && this.mvcRegistrations.getRequestMappingHandlerMapping() != null) {         return this.mvcRegistrations.getRequestMappingHandlerMapping().     }     return super.createRequestMappingHandlerMapping(). }
false;protected;0;9;;@Override protected ConfigurableWebBindingInitializer getConfigurableWebBindingInitializer() {     try {         return this.beanFactory.getBean(ConfigurableWebBindingInitializer.class).     } catch (NoSuchBeanDefinitionException ex) {         return super.getConfigurableWebBindingInitializer().     } }
false;protected;0;8;;@Override protected ExceptionHandlerExceptionResolver createExceptionHandlerExceptionResolver() {     if (this.mvcRegistrations != null && this.mvcRegistrations.getExceptionHandlerExceptionResolver() != null) {         return this.mvcRegistrations.getExceptionHandlerExceptionResolver().     }     return super.createExceptionHandlerExceptionResolver(). }
false;protected;1;16;;@Override protected void configureHandlerExceptionResolvers(List<HandlerExceptionResolver> exceptionResolvers) {     super.configureHandlerExceptionResolvers(exceptionResolvers).     if (exceptionResolvers.isEmpty()) {         addDefaultHandlerExceptionResolvers(exceptionResolvers).     }     if (this.mvcProperties.isLogResolvedException()) {         for (HandlerExceptionResolver resolver : exceptionResolvers) {             if (resolver instanceof AbstractHandlerExceptionResolver) {                 ((AbstractHandlerExceptionResolver) resolver).setWarnLogCategory(resolver.getClass().getName()).             }         }     } }
false;public;0;15;;@Bean @Override public ContentNegotiationManager mvcContentNegotiationManager() {     ContentNegotiationManager manager = super.mvcContentNegotiationManager().     List<ContentNegotiationStrategy> strategies = manager.getStrategies().     ListIterator<ContentNegotiationStrategy> iterator = strategies.listIterator().     while (iterator.hasNext()) {         ContentNegotiationStrategy strategy = iterator.next().         if (strategy instanceof PathExtensionContentNegotiationStrategy) {             iterator.set(new OptionalPathExtensionContentNegotiationStrategy(strategy)).         }     }     return manager. }
false;public;0;4;;@Bean public ResourceChainResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer() {     return new ResourceChainResourceHandlerRegistrationCustomizer(). }
false;;1;1;;void customize(ResourceHandlerRegistration registration).
false;public;1;6;;@Override public void customize(ResourceHandlerRegistration registration) {     ResourceProperties.Chain properties = this.resourceProperties.getChain().     configureResourceChain(properties, registration.resourceChain(properties.isCache())). }
false;private;2;13;;private void configureResourceChain(ResourceProperties.Chain properties, ResourceChainRegistration chain) {     Strategy strategy = properties.getStrategy().     if (properties.isCompressed()) {         chain.addResolver(new EncodedResourceResolver()).     }     if (strategy.getFixed().isEnabled() || strategy.getContent().isEnabled()) {         chain.addResolver(getVersionResourceResolver(strategy)).     }     if (properties.isHtmlApplicationCache()) {         chain.addTransformer(new AppCacheManifestTransformer()).     } }
false;private;1;14;;private ResourceResolver getVersionResourceResolver(ResourceProperties.Strategy properties) {     VersionResourceResolver resolver = new VersionResourceResolver().     if (properties.getFixed().isEnabled()) {         String version = properties.getFixed().getVersion().         String[] paths = properties.getFixed().getPaths().         resolver.addFixedVersionStrategy(version, paths).     }     if (properties.getContent().isEnabled()) {         String[] paths = properties.getContent().getPaths().         resolver.addContentVersionStrategy(paths).     }     return resolver. }
false;public;1;10;;@Override public List<MediaType> resolveMediaTypes(NativeWebRequest webRequest) throws HttpMediaTypeNotAcceptableException {     Object skip = webRequest.getAttribute(SKIP_ATTRIBUTE, RequestAttributes.SCOPE_REQUEST).     if (skip != null && Boolean.parseBoolean(skip.toString())) {         return MEDIA_TYPE_ALL_LIST.     }     return this.delegate.resolveMediaTypes(webRequest). }
