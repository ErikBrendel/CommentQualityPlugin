commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Bean @ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "true", matchIfMissing = true) public CachingConnectionFactory cachingJmsConnectionFactory(JmsProperties jmsProperties) {     JmsProperties.Cache cacheProperties = jmsProperties.getCache().     CachingConnectionFactory connectionFactory = new CachingConnectionFactory(createConnectionFactory()).     connectionFactory.setCacheConsumers(cacheProperties.isConsumers()).     connectionFactory.setCacheProducers(cacheProperties.isProducers()).     connectionFactory.setSessionCacheSize(cacheProperties.getSessionCacheSize()).     return connectionFactory. }
false;public;0;5;;@Bean @ConditionalOnProperty(prefix = "spring.jms.cache", name = "enabled", havingValue = "false") public ActiveMQConnectionFactory jmsConnectionFactory() {     return createConnectionFactory(). }
false;private;0;5;;private ActiveMQConnectionFactory createConnectionFactory() {     return new ActiveMQConnectionFactoryFactory(this.properties, this.connectionFactoryCustomizers).createConnectionFactory(ActiveMQConnectionFactory.class). }
false;public;2;12;;@Bean(destroyMethod = "stop") @ConditionalOnProperty(prefix = "spring.activemq.pool", name = "enabled", havingValue = "true", matchIfMissing = false) public JmsPoolConnectionFactory pooledJmsConnectionFactory(ActiveMQProperties properties, ObjectProvider<ActiveMQConnectionFactoryCustomizer> factoryCustomizers) {     ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactoryFactory(properties, factoryCustomizers.orderedStream().collect(Collectors.toList())).createConnectionFactory(ActiveMQConnectionFactory.class).     return new JmsPoolConnectionFactoryFactory(properties.getPool()).createPooledConnectionFactory(connectionFactory). }
