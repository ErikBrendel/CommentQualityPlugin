commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns a matcher that includes all commonly used {@link StaticResourceLocation  * Locations}. The  * {@link StaticResourceServerWebExchange#excluding(StaticResourceLocation, StaticResourceLocation...)  * excluding} method can be used to remove specific locations if required. For  * example: <pre class="code">  * PathRequest.toStaticResources().atCommonLocations().excluding(StaticResourceLocation.CSS)  * </pre>  * @return the configured {@link ServerWebExchangeMatcher}  */ ;/**  * Returns a matcher that includes all commonly used {@link StaticResourceLocation  * Locations}. The  * {@link StaticResourceServerWebExchange#excluding(StaticResourceLocation, StaticResourceLocation...)  * excluding} method can be used to remove specific locations if required. For  * example: <pre class="code">  * PathRequest.toStaticResources().atCommonLocations().excluding(StaticResourceLocation.CSS)  * </pre>  * @return the configured {@link ServerWebExchangeMatcher}  */ public StaticResourceServerWebExchange atCommonLocations() {     return at(EnumSet.allOf(StaticResourceLocation.class)). }
true;public;2;4;/**  * Returns a matcher that includes the specified {@link StaticResourceLocation  * Locations}. For example: <pre class="code">  * PathRequest.toStaticResources().at(StaticResourceLocation.CSS, StaticResourceLocation.JAVA_SCRIPT)  * </pre>  * @param first the first location to include  * @param rest additional locations to include  * @return the configured {@link ServerWebExchangeMatcher}  */ ;/**  * Returns a matcher that includes the specified {@link StaticResourceLocation  * Locations}. For example: <pre class="code">  * PathRequest.toStaticResources().at(StaticResourceLocation.CSS, StaticResourceLocation.JAVA_SCRIPT)  * </pre>  * @param first the first location to include  * @param rest additional locations to include  * @return the configured {@link ServerWebExchangeMatcher}  */ public StaticResourceServerWebExchange at(StaticResourceLocation first, StaticResourceLocation... rest) {     return at(EnumSet.of(first, rest)). }
true;public;1;4;/**  * Returns a matcher that includes the specified {@link StaticResourceLocation  * Locations}. For example: <pre class="code">  * PathRequest.toStaticResources().at(locations)  * </pre>  * @param locations the locations to include  * @return the configured {@link ServerWebExchangeMatcher}  */ ;/**  * Returns a matcher that includes the specified {@link StaticResourceLocation  * Locations}. For example: <pre class="code">  * PathRequest.toStaticResources().at(locations)  * </pre>  * @param locations the locations to include  * @return the configured {@link ServerWebExchangeMatcher}  */ public StaticResourceServerWebExchange at(Set<StaticResourceLocation> locations) {     Assert.notNull(locations, "Locations must not be null").     return new StaticResourceServerWebExchange(new LinkedHashSet<>(locations)). }
true;public;2;4;/**  * Return a new {@link StaticResourceServerWebExchange} based on this one but  * excluding the specified locations.  * @param first the first location to exclude  * @param rest additional locations to exclude  * @return a new {@link StaticResourceServerWebExchange}  */ ;/**  * Return a new {@link StaticResourceServerWebExchange} based on this one but  * excluding the specified locations.  * @param first the first location to exclude  * @param rest additional locations to exclude  * @return a new {@link StaticResourceServerWebExchange}  */ public StaticResourceServerWebExchange excluding(StaticResourceLocation first, StaticResourceLocation... rest) {     return excluding(EnumSet.of(first, rest)). }
true;public;1;7;/**  * Return a new {@link StaticResourceServerWebExchange} based on this one but  * excluding the specified locations.  * @param locations the locations to exclude  * @return a new {@link StaticResourceServerWebExchange}  */ ;/**  * Return a new {@link StaticResourceServerWebExchange} based on this one but  * excluding the specified locations.  * @param locations the locations to exclude  * @return a new {@link StaticResourceServerWebExchange}  */ public StaticResourceServerWebExchange excluding(Set<StaticResourceLocation> locations) {     Assert.notNull(locations, "Locations must not be null").     Set<StaticResourceLocation> subset = new LinkedHashSet<>(this.locations).     subset.removeAll(locations).     return new StaticResourceServerWebExchange(subset). }
false;private;0;4;;private List<ServerWebExchangeMatcher> getDelegateMatchers() {     return getPatterns().map(PathPatternParserServerWebExchangeMatcher::new).collect(Collectors.toList()). }
false;private;0;3;;private Stream<String> getPatterns() {     return this.locations.stream().flatMap(StaticResourceLocation::getPatterns). }
false;public;1;6;;@Override public Mono<MatchResult> matches(ServerWebExchange exchange) {     OrServerWebExchangeMatcher matcher = new OrServerWebExchangeMatcher(getDelegateMatchers()).     return matcher.matches(exchange). }
