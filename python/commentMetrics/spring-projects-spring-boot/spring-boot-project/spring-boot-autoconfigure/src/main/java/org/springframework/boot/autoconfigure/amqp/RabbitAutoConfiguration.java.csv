commented;modifiers;parameterAmount;loc;comment;code
false;public;2;24;;@Bean public CachingConnectionFactory rabbitConnectionFactory(RabbitProperties properties, ObjectProvider<ConnectionNameStrategy> connectionNameStrategy) throws Exception {     PropertyMapper map = PropertyMapper.get().     CachingConnectionFactory factory = new CachingConnectionFactory(getRabbitConnectionFactoryBean(properties).getObject()).     map.from(properties::determineAddresses).to(factory::setAddresses).     map.from(properties::isPublisherConfirms).to(factory::setPublisherConfirms).     map.from(properties::isPublisherReturns).to(factory::setPublisherReturns).     RabbitProperties.Cache.Channel channel = properties.getCache().getChannel().     map.from(channel::getSize).whenNonNull().to(factory::setChannelCacheSize).     map.from(channel::getCheckoutTimeout).whenNonNull().as(Duration::toMillis).to(factory::setChannelCheckoutTimeout).     RabbitProperties.Cache.Connection connection = properties.getCache().getConnection().     map.from(connection::getMode).whenNonNull().to(factory::setCacheMode).     map.from(connection::getSize).whenNonNull().to(factory::setConnectionCacheSize).     map.from(connectionNameStrategy::getIfUnique).whenNonNull().to(factory::setConnectionNameStrategy).     return factory. }
false;private;1;34;;private RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(RabbitProperties properties) throws Exception {     PropertyMapper map = PropertyMapper.get().     RabbitConnectionFactoryBean factory = new RabbitConnectionFactoryBean().     map.from(properties::determineHost).whenNonNull().to(factory::setHost).     map.from(properties::determinePort).to(factory::setPort).     map.from(properties::determineUsername).whenNonNull().to(factory::setUsername).     map.from(properties::determinePassword).whenNonNull().to(factory::setPassword).     map.from(properties::determineVirtualHost).whenNonNull().to(factory::setVirtualHost).     map.from(properties::getRequestedHeartbeat).whenNonNull().asInt(Duration::getSeconds).to(factory::setRequestedHeartbeat).     RabbitProperties.Ssl ssl = properties.getSsl().     if (ssl.isEnabled()) {         factory.setUseSSL(true).         map.from(ssl::getAlgorithm).whenNonNull().to(factory::setSslAlgorithm).         map.from(ssl::getKeyStoreType).to(factory::setKeyStoreType).         map.from(ssl::getKeyStore).to(factory::setKeyStore).         map.from(ssl::getKeyStorePassword).to(factory::setKeyStorePassphrase).         map.from(ssl::getTrustStoreType).to(factory::setTrustStoreType).         map.from(ssl::getTrustStore).to(factory::setTrustStore).         map.from(ssl::getTrustStorePassword).to(factory::setTrustStorePassphrase).         map.from(ssl::isValidateServerCertificate).to((validate) -> factory.setSkipServerCertificateValidation(!validate)).         map.from(ssl::getVerifyHostname).to(factory::setEnableHostnameVerification).     }     map.from(properties::getConnectionTimeout).whenNonNull().asInt(Duration::toMillis).to(factory::setConnectionTimeout).     factory.afterPropertiesSet().     return factory. }
false;public;4;29;;@Bean @ConditionalOnSingleCandidate(ConnectionFactory.class) @ConditionalOnMissingBean public RabbitTemplate rabbitTemplate(RabbitProperties properties, ObjectProvider<MessageConverter> messageConverter, ObjectProvider<RabbitRetryTemplateCustomizer> retryTemplateCustomizers, ConnectionFactory connectionFactory) {     PropertyMapper map = PropertyMapper.get().     RabbitTemplate template = new RabbitTemplate(connectionFactory).     messageConverter.ifUnique(template::setMessageConverter).     template.setMandatory(determineMandatoryFlag(properties)).     RabbitProperties.Template templateProperties = properties.getTemplate().     if (templateProperties.getRetry().isEnabled()) {         template.setRetryTemplate(new RetryTemplateFactory(retryTemplateCustomizers.orderedStream().collect(Collectors.toList())).createRetryTemplate(templateProperties.getRetry(), RabbitRetryTemplateCustomizer.Target.SENDER)).     }     map.from(templateProperties::getReceiveTimeout).whenNonNull().as(Duration::toMillis).to(template::setReceiveTimeout).     map.from(templateProperties::getReplyTimeout).whenNonNull().as(Duration::toMillis).to(template::setReplyTimeout).     map.from(templateProperties::getExchange).to(template::setExchange).     map.from(templateProperties::getRoutingKey).to(template::setRoutingKey).     map.from(templateProperties::getDefaultReceiveQueue).whenNonNull().to(template::setDefaultReceiveQueue).     return template. }
false;private;1;4;;private boolean determineMandatoryFlag(RabbitProperties properties) {     Boolean mandatory = properties.getTemplate().getMandatory().     return (mandatory != null) ? mandatory : properties.isPublisherReturns(). }
false;public;1;7;;@Bean @ConditionalOnSingleCandidate(ConnectionFactory.class) @ConditionalOnProperty(prefix = "spring.rabbitmq", name = "dynamic", matchIfMissing = true) @ConditionalOnMissingBean public AmqpAdmin amqpAdmin(ConnectionFactory connectionFactory) {     return new RabbitAdmin(connectionFactory). }
false;public;1;6;;@Bean @ConditionalOnSingleCandidate(RabbitTemplate.class) public RabbitMessagingTemplate rabbitMessagingTemplate(RabbitTemplate rabbitTemplate) {     return new RabbitMessagingTemplate(rabbitTemplate). }
