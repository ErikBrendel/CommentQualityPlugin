commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getOrder() {     return 0. }
false;public;1;42;;@Override public void customize(ConfigurableUndertowWebServerFactory factory) {     ServerProperties properties = this.serverProperties.     ServerProperties.Undertow undertowProperties = properties.getUndertow().     ServerProperties.Undertow.Accesslog accesslogProperties = undertowProperties.getAccesslog().     PropertyMapper propertyMapper = PropertyMapper.get().alwaysApplyingWhenNonNull().     propertyMapper.from(undertowProperties::getBufferSize).whenNonNull().asInt(DataSize::toBytes).to(factory::setBufferSize).     propertyMapper.from(undertowProperties::getIoThreads).to(factory::setIoThreads).     propertyMapper.from(undertowProperties::getWorkerThreads).to(factory::setWorkerThreads).     propertyMapper.from(undertowProperties::getDirectBuffers).to(factory::setUseDirectBuffers).     propertyMapper.from(accesslogProperties::isEnabled).to(factory::setAccessLogEnabled).     propertyMapper.from(accesslogProperties::getDir).to(factory::setAccessLogDirectory).     propertyMapper.from(accesslogProperties::getPattern).to(factory::setAccessLogPattern).     propertyMapper.from(accesslogProperties::getPrefix).to(factory::setAccessLogPrefix).     propertyMapper.from(accesslogProperties::getSuffix).to(factory::setAccessLogSuffix).     propertyMapper.from(accesslogProperties::isRotate).to(factory::setAccessLogRotate).     propertyMapper.from(this::getOrDeduceUseForwardHeaders).to(factory::setUseForwardHeaders).     propertyMapper.from(properties::getMaxHttpHeaderSize).whenNonNull().asInt(DataSize::toBytes).when(this::isPositive).to((maxHttpHeaderSize) -> customizeMaxHttpHeaderSize(factory, maxHttpHeaderSize)).     propertyMapper.from(undertowProperties::getMaxHttpPostSize).asInt(DataSize::toBytes).when(this::isPositive).to((maxHttpPostSize) -> customizeMaxHttpPostSize(factory, maxHttpPostSize)).     propertyMapper.from(properties::getConnectionTimeout).to((connectionTimeout) -> customizeConnectionTimeout(factory, connectionTimeout)).     factory.addDeploymentInfoCustomizers((deploymentInfo) -> deploymentInfo.setEagerFilterInit(undertowProperties.isEagerFilterInit())). }
false;private;1;3;;private boolean isPositive(Number value) {     return value.longValue() > 0. }
false;private;2;5;;private void customizeConnectionTimeout(ConfigurableUndertowWebServerFactory factory, Duration connectionTimeout) {     factory.addBuilderCustomizers((builder) -> builder.setServerOption(UndertowOptions.NO_REQUEST_TIMEOUT, (int) connectionTimeout.toMillis())). }
false;private;2;5;;private void customizeMaxHttpHeaderSize(ConfigurableUndertowWebServerFactory factory, int maxHttpHeaderSize) {     factory.addBuilderCustomizers((builder) -> builder.setServerOption(UndertowOptions.MAX_HEADER_SIZE, maxHttpHeaderSize)). }
false;private;2;5;;private void customizeMaxHttpPostSize(ConfigurableUndertowWebServerFactory factory, long maxHttpPostSize) {     factory.addBuilderCustomizers((builder) -> builder.setServerOption(UndertowOptions.MAX_ENTITY_SIZE, maxHttpPostSize)). }
false;private;0;7;;private boolean getOrDeduceUseForwardHeaders() {     if (this.serverProperties.isUseForwardHeaders() != null) {         return this.serverProperties.isUseForwardHeaders().     }     CloudPlatform platform = CloudPlatform.getActive(this.environment).     return platform != null && platform.isUsingForwardHeaders(). }
