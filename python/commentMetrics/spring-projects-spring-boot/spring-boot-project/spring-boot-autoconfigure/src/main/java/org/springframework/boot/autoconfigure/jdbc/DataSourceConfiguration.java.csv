commented;modifiers;parameterAmount;loc;comment;code
false;protected,static;2;5;;@SuppressWarnings("unchecked") protected static <T> T createDataSource(DataSourceProperties properties, Class<? extends DataSource> type) {     return (T) properties.initializeDataSourceBuilder().type(type).build(). }
false;public;1;15;;@Bean @ConfigurationProperties(prefix = "spring.datasource.tomcat") public org.apache.tomcat.jdbc.pool.DataSource dataSource(DataSourceProperties properties) {     org.apache.tomcat.jdbc.pool.DataSource dataSource = createDataSource(properties, org.apache.tomcat.jdbc.pool.DataSource.class).     DatabaseDriver databaseDriver = DatabaseDriver.fromJdbcUrl(properties.determineUrl()).     String validationQuery = databaseDriver.getValidationQuery().     if (validationQuery != null) {         dataSource.setTestOnBorrow(true).         dataSource.setValidationQuery(validationQuery).     }     return dataSource. }
false;public;1;10;;@Bean @ConfigurationProperties(prefix = "spring.datasource.hikari") public HikariDataSource dataSource(DataSourceProperties properties) {     HikariDataSource dataSource = createDataSource(properties, HikariDataSource.class).     if (StringUtils.hasText(properties.getName())) {         dataSource.setPoolName(properties.getName()).     }     return dataSource. }
false;public;1;7;;@Bean @ConfigurationProperties(prefix = "spring.datasource.dbcp2") public org.apache.commons.dbcp2.BasicDataSource dataSource(DataSourceProperties properties) {     return createDataSource(properties, org.apache.commons.dbcp2.BasicDataSource.class). }
false;public;1;4;;@Bean public DataSource dataSource(DataSourceProperties properties) {     return properties.initializeDataSourceBuilder().build(). }
