commented;modifiers;parameterAmount;loc;comment;code
false;public;2;24;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     ConfigurableEnvironment environment = (ConfigurableEnvironment) context.getEnvironment().     boolean fixed = getEnabledProperty(environment, "strategy.fixed.", false).     boolean content = getEnabledProperty(environment, "strategy.content.", false).     Boolean chain = getEnabledProperty(environment, "", null).     Boolean match = ResourceProperties.Chain.getEnabled(fixed, content, chain).     ConditionMessage.Builder message = ConditionMessage.forCondition(ConditionalOnEnabledResourceChain.class).     if (match == null) {         if (ClassUtils.isPresent(WEBJAR_ASSET_LOCATOR, getClass().getClassLoader())) {             return ConditionOutcome.match(message.found("class").items(WEBJAR_ASSET_LOCATOR)).         }         return ConditionOutcome.noMatch(message.didNotFind("class").items(WEBJAR_ASSET_LOCATOR)).     }     if (match) {         return ConditionOutcome.match(message.because("enabled")).     }     return ConditionOutcome.noMatch(message.because("disabled")). }
false;private;3;5;;private Boolean getEnabledProperty(ConfigurableEnvironment environment, String key, Boolean defaultValue) {     String name = "spring.resources.chain." + key + "enabled".     return environment.getProperty(name, Boolean.class, defaultValue). }
