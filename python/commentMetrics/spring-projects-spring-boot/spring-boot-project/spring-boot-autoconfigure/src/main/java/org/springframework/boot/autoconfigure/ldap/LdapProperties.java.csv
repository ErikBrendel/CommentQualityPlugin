commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String[] getUrls() {     return this.urls. }
false;public;1;3;;public void setUrls(String[] urls) {     this.urls = urls. }
false;public;0;3;;public String getBase() {     return this.base. }
false;public;1;3;;public void setBase(String base) {     this.base = base. }
false;public;0;3;;public String getUsername() {     return this.username. }
false;public;1;3;;public void setUsername(String username) {     this.username = username. }
false;public;0;3;;public String getPassword() {     return this.password. }
false;public;1;3;;public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public boolean getAnonymousReadOnly() {     return this.anonymousReadOnly. }
false;public;1;3;;public void setAnonymousReadOnly(boolean anonymousReadOnly) {     this.anonymousReadOnly = anonymousReadOnly. }
false;public;0;3;;public Map<String, String> getBaseEnvironment() {     return this.baseEnvironment. }
false;public;1;6;;public String[] determineUrls(Environment environment) {     if (ObjectUtils.isEmpty(this.urls)) {         return new String[] { "ldap://localhost:" + determinePort(environment) }.     }     return this.urls. }
false;private;1;8;;private int determinePort(Environment environment) {     Assert.notNull(environment, "Environment must not be null").     String localPort = environment.getProperty("local.ldap.port").     if (localPort != null) {         return Integer.valueOf(localPort).     }     return DEFAULT_PORT. }
