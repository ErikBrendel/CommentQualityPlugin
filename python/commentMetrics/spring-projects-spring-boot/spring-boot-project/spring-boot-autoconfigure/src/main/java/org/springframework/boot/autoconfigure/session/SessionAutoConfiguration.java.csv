commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;@Bean @Conditional(DefaultCookieSerializerCondition.class) public DefaultCookieSerializer cookieSerializer(ServerProperties serverProperties) {     Cookie cookie = serverProperties.getServlet().getSession().getCookie().     DefaultCookieSerializer cookieSerializer = new DefaultCookieSerializer().     PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull().     map.from(cookie::getName).to(cookieSerializer::setCookieName).     map.from(cookie::getDomain).to(cookieSerializer::setDomainName).     map.from(cookie::getPath).to(cookieSerializer::setCookiePath).     map.from(cookie::getHttpOnly).to(cookieSerializer::setUseHttpOnlyCookie).     map.from(cookie::getSecure).to(cookieSerializer::setUseSecureCookie).     map.from(cookie::getMaxAge).to((maxAge) -> cookieSerializer.setCookieMaxAge((int) maxAge.getSeconds())).     return cookieSerializer. }
false;protected,final;1;6;;protected final String[] selectImports(WebApplicationType webApplicationType) {     return Arrays.stream(StoreType.values()).map((type) -> SessionStoreMappings.getConfigurationClass(webApplicationType, type)).toArray(String[]::new). }
false;public;1;4;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     return super.selectImports(WebApplicationType.REACTIVE). }
false;public;1;4;;@Override public String[] selectImports(AnnotationMetadata importingClassMetadata) {     return super.selectImports(WebApplicationType.SERVLET). }
false;public;0;11;;@PostConstruct public void checkAvailableImplementations() {     List<Class<?>> availableCandidates = new ArrayList<>().     for (String candidate : this.candidates) {         addCandidateIfAvailable(availableCandidates, candidate).     }     StoreType storeType = this.sessionProperties.getStoreType().     if (availableCandidates.size() > 1 && storeType == null) {         throw new NonUniqueSessionRepositoryException(availableCandidates).     } }
false;private;2;11;;private void addCandidateIfAvailable(List<Class<?>> candidates, String type) {     try {         Class<?> candidate = this.classLoader.loadClass(type).         if (candidate != null) {             candidates.add(candidate).         }     } catch (Throwable ex) {     // Ignore     } }
false;public;0;13;;@PostConstruct public void checkSessionRepository() {     StoreType storeType = this.sessionProperties.getStoreType().     if (storeType != StoreType.NONE && this.sessionRepositoryProvider.getIfAvailable() == null && storeType != null) {         throw new SessionRepositoryUnavailableException("No session repository could be auto-configured, check your " + "configuration (session store type is '" + storeType.name().toLowerCase(Locale.ENGLISH) + "')", storeType).     } }
