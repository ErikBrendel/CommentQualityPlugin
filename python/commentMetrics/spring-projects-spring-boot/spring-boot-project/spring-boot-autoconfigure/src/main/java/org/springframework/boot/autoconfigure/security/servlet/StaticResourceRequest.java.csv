commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns a matcher that includes all commonly used {@link StaticResourceLocation  * Locations}. The  * {@link StaticResourceRequestMatcher#excluding(StaticResourceLocation, StaticResourceLocation...)  * excluding} method can be used to remove specific locations if required. For  * example: <pre class="code">  * PathRequest.toStaticResources().atCommonLocations().excluding(StaticResourceLocation.CSS)  * </pre>  * @return the configured {@link RequestMatcher}  */ ;/**  * Returns a matcher that includes all commonly used {@link StaticResourceLocation  * Locations}. The  * {@link StaticResourceRequestMatcher#excluding(StaticResourceLocation, StaticResourceLocation...)  * excluding} method can be used to remove specific locations if required. For  * example: <pre class="code">  * PathRequest.toStaticResources().atCommonLocations().excluding(StaticResourceLocation.CSS)  * </pre>  * @return the configured {@link RequestMatcher}  */ public StaticResourceRequestMatcher atCommonLocations() {     return at(EnumSet.allOf(StaticResourceLocation.class)). }
true;public;2;4;/**  * Returns a matcher that includes the specified {@link StaticResourceLocation  * Locations}. For example: <pre class="code">  * PathRequest.toStaticResources().at(StaticResourceLocation.CSS, StaticResourceLocation.JAVA_SCRIPT)  * </pre>  * @param first the first location to include  * @param rest additional locations to include  * @return the configured {@link RequestMatcher}  */ ;/**  * Returns a matcher that includes the specified {@link StaticResourceLocation  * Locations}. For example: <pre class="code">  * PathRequest.toStaticResources().at(StaticResourceLocation.CSS, StaticResourceLocation.JAVA_SCRIPT)  * </pre>  * @param first the first location to include  * @param rest additional locations to include  * @return the configured {@link RequestMatcher}  */ public StaticResourceRequestMatcher at(StaticResourceLocation first, StaticResourceLocation... rest) {     return at(EnumSet.of(first, rest)). }
true;public;1;4;/**  * Returns a matcher that includes the specified {@link StaticResourceLocation  * Locations}. For example: <pre class="code">  * PathRequest.toStaticResources().at(locations)  * </pre>  * @param locations the locations to include  * @return the configured {@link RequestMatcher}  */ ;/**  * Returns a matcher that includes the specified {@link StaticResourceLocation  * Locations}. For example: <pre class="code">  * PathRequest.toStaticResources().at(locations)  * </pre>  * @param locations the locations to include  * @return the configured {@link RequestMatcher}  */ public StaticResourceRequestMatcher at(Set<StaticResourceLocation> locations) {     Assert.notNull(locations, "Locations must not be null").     return new StaticResourceRequestMatcher(new LinkedHashSet<>(locations)). }
true;public;2;4;/**  * Return a new {@link StaticResourceRequestMatcher} based on this one but  * excluding the specified locations.  * @param first the first location to exclude  * @param rest additional locations to exclude  * @return a new {@link StaticResourceRequestMatcher}  */ ;/**  * Return a new {@link StaticResourceRequestMatcher} based on this one but  * excluding the specified locations.  * @param first the first location to exclude  * @param rest additional locations to exclude  * @return a new {@link StaticResourceRequestMatcher}  */ public StaticResourceRequestMatcher excluding(StaticResourceLocation first, StaticResourceLocation... rest) {     return excluding(EnumSet.of(first, rest)). }
true;public;1;7;/**  * Return a new {@link StaticResourceRequestMatcher} based on this one but  * excluding the specified locations.  * @param locations the locations to exclude  * @return a new {@link StaticResourceRequestMatcher}  */ ;/**  * Return a new {@link StaticResourceRequestMatcher} based on this one but  * excluding the specified locations.  * @param locations the locations to exclude  * @return a new {@link StaticResourceRequestMatcher}  */ public StaticResourceRequestMatcher excluding(Set<StaticResourceLocation> locations) {     Assert.notNull(locations, "Locations must not be null").     Set<StaticResourceLocation> subset = new LinkedHashSet<>(this.locations).     subset.removeAll(locations).     return new StaticResourceRequestMatcher(subset). }
false;protected;1;6;;@Override protected void initialized(Supplier<DispatcherServletPath> dispatcherServletPath) {     this.delegate = new OrRequestMatcher(getDelegateMatchers(dispatcherServletPath.get())). }
false;private;1;5;;private List<RequestMatcher> getDelegateMatchers(DispatcherServletPath dispatcherServletPath) {     return getPatterns(dispatcherServletPath).map(AntPathRequestMatcher::new).collect(Collectors.toList()). }
false;private;1;4;;private Stream<String> getPatterns(DispatcherServletPath dispatcherServletPath) {     return this.locations.stream().flatMap(StaticResourceLocation::getPatterns).map(dispatcherServletPath::getRelativePath). }
false;protected;2;5;;@Override protected boolean matches(HttpServletRequest request, Supplier<DispatcherServletPath> context) {     return this.delegate.matches(request). }
