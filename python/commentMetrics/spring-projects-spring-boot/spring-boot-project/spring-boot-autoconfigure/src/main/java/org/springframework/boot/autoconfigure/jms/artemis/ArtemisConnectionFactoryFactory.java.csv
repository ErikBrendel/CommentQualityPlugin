commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;public <T extends ActiveMQConnectionFactory> T createConnectionFactory(Class<T> factoryClass) {     try {         startEmbeddedJms().         return doCreateConnectionFactory(factoryClass).     } catch (Exception ex) {         throw new IllegalStateException("Unable to create " + "ActiveMQConnectionFactory", ex).     } }
false;private;0;10;;private void startEmbeddedJms() {     if (ClassUtils.isPresent(EMBEDDED_JMS_CLASS, null)) {         try {             this.beanFactory.getBeansOfType(Class.forName(EMBEDDED_JMS_CLASS)).         } catch (Exception ex) {         // Ignore         }     } }
false;private;1;11;;private <T extends ActiveMQConnectionFactory> T doCreateConnectionFactory(Class<T> factoryClass) throws Exception {     ArtemisMode mode = this.properties.getMode().     if (mode == null) {         mode = deduceMode().     }     if (mode == ArtemisMode.EMBEDDED) {         return createEmbeddedConnectionFactory(factoryClass).     }     return createNativeConnectionFactory(factoryClass). }
true;private;0;7;/**  * Deduce the {@link ArtemisMode} to use if none has been set.  * @return the mode  */ ;/**  * Deduce the {@link ArtemisMode} to use if none has been set.  * @return the mode  */ private ArtemisMode deduceMode() {     if (this.properties.getEmbedded().isEnabled() && ClassUtils.isPresent(EMBEDDED_JMS_CLASS, null)) {         return ArtemisMode.EMBEDDED.     }     return ArtemisMode.NATIVE. }
false;private;1;17;;private <T extends ActiveMQConnectionFactory> T createEmbeddedConnectionFactory(Class<T> factoryClass) throws Exception {     try {         TransportConfiguration transportConfiguration = new TransportConfiguration(InVMConnectorFactory.class.getName(), this.properties.getEmbedded().generateTransportParameters()).         ServerLocator serviceLocator = ActiveMQClient.createServerLocatorWithoutHA(transportConfiguration).         return factoryClass.getConstructor(ServerLocator.class).newInstance(serviceLocator).     } catch (NoClassDefFoundError ex) {         throw new IllegalStateException("Unable to create InVM " + "Artemis connection, ensure that artemis-jms-server.jar " + "is in the classpath", ex).     } }
false;private;1;18;;private <T extends ActiveMQConnectionFactory> T createNativeConnectionFactory(Class<T> factoryClass) throws Exception {     Map<String, Object> params = new HashMap<>().     params.put(TransportConstants.HOST_PROP_NAME, this.properties.getHost()).     params.put(TransportConstants.PORT_PROP_NAME, this.properties.getPort()).     TransportConfiguration transportConfiguration = new TransportConfiguration(NettyConnectorFactory.class.getName(), params).     Constructor<T> constructor = factoryClass.getConstructor(boolean.class, TransportConfiguration[].class).     T connectionFactory = constructor.newInstance(false, new TransportConfiguration[] { transportConfiguration }).     String user = this.properties.getUser().     if (StringUtils.hasText(user)) {         connectionFactory.setUser(user).         connectionFactory.setPassword(this.properties.getPassword()).     }     return connectionFactory. }
