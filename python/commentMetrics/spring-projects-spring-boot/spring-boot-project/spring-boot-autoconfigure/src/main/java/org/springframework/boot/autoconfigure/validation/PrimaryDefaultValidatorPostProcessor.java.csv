commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     if (beanFactory instanceof ConfigurableListableBeanFactory) {         this.beanFactory = (ConfigurableListableBeanFactory) beanFactory.     } }
false;public;2;8;;@Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {     BeanDefinition definition = getAutoConfiguredValidator(registry).     if (definition != null) {         definition.setPrimary(!hasPrimarySpringValidator(registry)).     } }
false;private;1;10;;private BeanDefinition getAutoConfiguredValidator(BeanDefinitionRegistry registry) {     if (registry.containsBeanDefinition(VALIDATOR_BEAN_NAME)) {         BeanDefinition definition = registry.getBeanDefinition(VALIDATOR_BEAN_NAME).         if (definition.getRole() == BeanDefinition.ROLE_INFRASTRUCTURE && isTypeMatch(VALIDATOR_BEAN_NAME, LocalValidatorFactoryBean.class)) {             return definition.         }     }     return null. }
false;private;2;3;;private boolean isTypeMatch(String name, Class<?> type) {     return this.beanFactory != null && this.beanFactory.isTypeMatch(name, type). }
false;private;1;11;;private boolean hasPrimarySpringValidator(BeanDefinitionRegistry registry) {     String[] validatorBeans = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this.beanFactory, Validator.class, false, false).     for (String validatorBean : validatorBeans) {         BeanDefinition definition = registry.getBeanDefinition(validatorBean).         if (definition != null && definition.isPrimary()) {             return true.         }     }     return false. }
