commented;modifiers;parameterAmount;loc;comment;code
false;public;2;15;;@Bean @Primary @ConditionalOnMissingBean(value = MBeanExporter.class, search = SearchStrategy.CURRENT) public AnnotationMBeanExporter mbeanExporter(ObjectNamingStrategy namingStrategy, BeanFactory beanFactory) {     AnnotationMBeanExporter exporter = new AnnotationMBeanExporter().     exporter.setRegistrationPolicy(RegistrationPolicy.FAIL_ON_EXISTING).     exporter.setNamingStrategy(namingStrategy).     String serverBean = this.environment.getProperty("spring.jmx.server", "mbeanServer").     if (StringUtils.hasLength(serverBean)) {         exporter.setServer(beanFactory.getBean(serverBean, MBeanServer.class)).     }     return exporter. }
false;public;0;14;;@Bean @ConditionalOnMissingBean(value = ObjectNamingStrategy.class, search = SearchStrategy.CURRENT) public ParentAwareNamingStrategy objectNamingStrategy() {     ParentAwareNamingStrategy namingStrategy = new ParentAwareNamingStrategy(new AnnotationJmxAttributeSource()).     String defaultDomain = this.environment.getProperty("spring.jmx.default-domain").     if (StringUtils.hasLength(defaultDomain)) {         namingStrategy.setDefaultDomain(defaultDomain).     }     boolean uniqueNames = this.environment.getProperty("spring.jmx.unique-names", Boolean.class, false).     namingStrategy.setEnsureUniqueRuntimeObjectNames(uniqueNames).     return namingStrategy. }
false;public;0;12;;@Bean @ConditionalOnMissingBean public MBeanServer mbeanServer() {     SpecificPlatform platform = SpecificPlatform.get().     if (platform != null) {         return platform.getMBeanServer().     }     MBeanServerFactoryBean factory = new MBeanServerFactoryBean().     factory.setLocateExistingServerIfPossible(true).     factory.afterPropertiesSet().     return factory.getObject(). }
