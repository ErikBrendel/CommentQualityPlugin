commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Bean @ConditionalOnMissingBean public PlatformTransactionManager transactionManager(ObjectProvider<TransactionManagerCustomizers> transactionManagerCustomizers) {     JpaTransactionManager transactionManager = new JpaTransactionManager().     transactionManagerCustomizers.ifAvailable((customizers) -> customizers.customize(transactionManager)).     return transactionManager. }
false;public;0;10;;@Bean @ConditionalOnMissingBean public JpaVendorAdapter jpaVendorAdapter() {     AbstractJpaVendorAdapter adapter = createJpaVendorAdapter().     adapter.setShowSql(this.properties.isShowSql()).     adapter.setDatabase(this.properties.determineDatabase(this.dataSource)).     adapter.setDatabasePlatform(this.properties.getDatabasePlatform()).     adapter.setGenerateDdl(this.properties.isGenerateDdl()).     return adapter. }
false;public;3;13;;@Bean @ConditionalOnMissingBean public EntityManagerFactoryBuilder entityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, ObjectProvider<PersistenceUnitManager> persistenceUnitManager, ObjectProvider<EntityManagerFactoryBuilderCustomizer> customizers) {     EntityManagerFactoryBuilder builder = new EntityManagerFactoryBuilder(jpaVendorAdapter, this.properties.getProperties(), persistenceUnitManager.getIfAvailable()).     customizers.orderedStream().forEach((customizer) -> customizer.customize(builder)).     return builder. }
false;public;1;12;;@Bean @Primary @ConditionalOnMissingBean({ LocalContainerEntityManagerFactoryBean.class, EntityManagerFactory.class }) public LocalContainerEntityManagerFactoryBean entityManagerFactory(EntityManagerFactoryBuilder factoryBuilder) {     Map<String, Object> vendorProperties = getVendorProperties().     customizeVendorProperties(vendorProperties).     return factoryBuilder.dataSource(this.dataSource).packages(getPackagesToScan()).properties(vendorProperties).mappingResources(getMappingResources()).jta(isJta()).build(). }
false;protected,abstract;0;1;;protected abstract AbstractJpaVendorAdapter createJpaVendorAdapter().
false;protected,abstract;0;1;;protected abstract Map<String, Object> getVendorProperties().
true;protected;1;2;/**  * Customize vendor properties before they are used. Allows for post processing (for  * example to configure JTA specific settings).  * @param vendorProperties the vendor properties to customize  */ ;/**  * Customize vendor properties before they are used. Allows for post processing (for  * example to configure JTA specific settings).  * @param vendorProperties the vendor properties to customize  */ protected void customizeVendorProperties(Map<String, Object> vendorProperties) { }
false;protected;0;8;;protected String[] getPackagesToScan() {     List<String> packages = EntityScanPackages.get(this.beanFactory).getPackageNames().     if (packages.isEmpty() && AutoConfigurationPackages.has(this.beanFactory)) {         packages = AutoConfigurationPackages.get(this.beanFactory).     }     return StringUtils.toStringArray(packages). }
false;private;0;5;;private String[] getMappingResources() {     List<String> mappingResources = this.properties.getMappingResources().     return (!ObjectUtils.isEmpty(mappingResources) ? StringUtils.toStringArray(mappingResources) : null). }
true;protected;0;3;/**  * Return the JTA transaction manager.  * @return the transaction manager or {@code null}  */ ;/**  * Return the JTA transaction manager.  * @return the transaction manager or {@code null}  */ protected JtaTransactionManager getJtaTransactionManager() {     return this.jtaTransactionManager. }
true;protected,final;0;3;/**  * Returns if a JTA {@link PlatformTransactionManager} is being used.  * @return if a JTA transaction manager is being used  */ ;/**  * Returns if a JTA {@link PlatformTransactionManager} is being used.  * @return if a JTA transaction manager is being used  */ protected final boolean isJta() {     return (this.jtaTransactionManager != null). }
true;protected,final;0;3;/**  * Return the {@link JpaProperties}.  * @return the properties  */ ;/**  * Return the {@link JpaProperties}.  * @return the properties  */ protected final JpaProperties getProperties() {     return this.properties. }
true;protected,final;0;3;/**  * Return the {@link DataSource}.  * @return the data source  */ ;/**  * Return the {@link DataSource}.  * @return the data source  */ protected final DataSource getDataSource() {     return this.dataSource. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     this.beanFactory = (ConfigurableListableBeanFactory) beanFactory. }
false;public;0;10;;@Bean public OpenEntityManagerInViewInterceptor openEntityManagerInViewInterceptor() {     if (this.jpaProperties.getOpenInView() == null) {         logger.warn("spring.jpa.open-in-view is enabled by default. " + "Therefore, database queries may be performed during view " + "rendering. Explicitly configure " + "spring.jpa.open-in-view to disable this warning").     }     return new OpenEntityManagerInViewInterceptor(). }
false;public;1;4;;@Override public void addInterceptors(InterceptorRegistry registry) {     registry.addWebRequestInterceptor(openEntityManagerInViewInterceptor()). }
