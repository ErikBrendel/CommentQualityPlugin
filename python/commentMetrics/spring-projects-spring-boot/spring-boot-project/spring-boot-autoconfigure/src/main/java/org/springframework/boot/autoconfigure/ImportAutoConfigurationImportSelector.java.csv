commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public Set<Object> determineImports(AnnotationMetadata metadata) {     Set<String> result = new LinkedHashSet<>().     result.addAll(getCandidateConfigurations(metadata, null)).     result.removeAll(getExclusions(metadata, null)).     return Collections.unmodifiableSet(result). }
false;protected;1;4;;@Override protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {     return null. }
false;protected;2;9;;@Override protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {     List<String> candidates = new ArrayList<>().     Map<Class<?>, List<Annotation>> annotations = getAnnotations(metadata).     annotations.forEach((source, sourceAnnotations) -> collectCandidateConfigurations(source, sourceAnnotations, candidates)).     return candidates. }
false;private;3;6;;private void collectCandidateConfigurations(Class<?> source, List<Annotation> annotations, List<String> candidates) {     for (Annotation annotation : annotations) {         candidates.addAll(getConfigurationsForAnnotation(source, annotation)).     } }
false;private;2;9;;private Collection<String> getConfigurationsForAnnotation(Class<?> source, Annotation annotation) {     String[] classes = (String[]) AnnotationUtils.getAnnotationAttributes(annotation, true).get("classes").     if (classes.length > 0) {         return Arrays.asList(classes).     }     return loadFactoryNames(source). }
false;protected;1;4;;protected Collection<String> loadFactoryNames(Class<?> source) {     return SpringFactoriesLoader.loadFactoryNames(source, getClass().getClassLoader()). }
false;protected;2;27;;@Override protected Set<String> getExclusions(AnnotationMetadata metadata, AnnotationAttributes attributes) {     Set<String> exclusions = new LinkedHashSet<>().     Class<?> source = ClassUtils.resolveClassName(metadata.getClassName(), null).     for (String annotationName : ANNOTATION_NAMES) {         AnnotationAttributes merged = AnnotatedElementUtils.getMergedAnnotationAttributes(source, annotationName).         Class<?>[] exclude = (merged != null) ? merged.getClassArray("exclude") : null.         if (exclude != null) {             for (Class<?> excludeClass : exclude) {                 exclusions.add(excludeClass.getName()).             }         }     }     for (List<Annotation> annotations : getAnnotations(metadata).values()) {         for (Annotation annotation : annotations) {             String[] exclude = (String[]) AnnotationUtils.getAnnotationAttributes(annotation, true).get("exclude").             if (!ObjectUtils.isEmpty(exclude)) {                 exclusions.addAll(Arrays.asList(exclude)).             }         }     }     return exclusions. }
false;protected,final;1;7;;protected final Map<Class<?>, List<Annotation>> getAnnotations(AnnotationMetadata metadata) {     MultiValueMap<Class<?>, Annotation> annotations = new LinkedMultiValueMap<>().     Class<?> source = ClassUtils.resolveClassName(metadata.getClassName(), null).     collectAnnotations(source, annotations, new HashSet<>()).     return Collections.unmodifiableMap(annotations). }
false;private;3;15;;private void collectAnnotations(Class<?> source, MultiValueMap<Class<?>, Annotation> annotations, HashSet<Class<?>> seen) {     if (source != null && seen.add(source)) {         for (Annotation annotation : source.getDeclaredAnnotations()) {             if (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation)) {                 if (ANNOTATION_NAMES.contains(annotation.annotationType().getName())) {                     annotations.add(source, annotation).                 }                 collectAnnotations(annotation.annotationType(), annotations, seen).             }         }         collectAnnotations(source.getSuperclass(), annotations, seen).     } }
false;public;0;4;;@Override public int getOrder() {     return super.getOrder() - 1. }
false;protected;1;4;;@Override protected void handleInvalidExcludes(List<String> invalidExcludes) { // Ignore for test }
