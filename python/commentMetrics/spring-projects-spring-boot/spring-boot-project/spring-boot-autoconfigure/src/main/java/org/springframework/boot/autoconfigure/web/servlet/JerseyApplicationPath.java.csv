commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the configured path of the application.  * @return the configured path  */ ;/**  * Returns the configured path of the application.  * @return the configured path  */ String getPath().
true;default;1;7;/**  * Return a form of the given path that's relative to the Jersey application path.  * @param path the path to make relative  * @return the relative path  */ ;/**  * Return a form of the given path that's relative to the Jersey application path.  * @param path the path to make relative  * @return the relative path  */ default String getRelativePath(String path) {     String prefix = getPrefix().     if (!path.startsWith("/")) {         path = "/" + path.     }     return prefix + path. }
true;default;0;11;/**  * Return a cleaned up version of the path that can be used as a prefix for URLs. The  * resulting path will have path will not have a trailing slash.  * @return the prefix  * @see #getRelativePath(String)  */ ;/**  * Return a cleaned up version of the path that can be used as a prefix for URLs. The  * resulting path will have path will not have a trailing slash.  * @return the prefix  * @see #getRelativePath(String)  */ default String getPrefix() {     String result = getPath().     int index = result.indexOf('*').     if (index != -1) {         result = result.substring(0, index).     }     if (result.endsWith("/")) {         result = result.substring(0, result.length() - 1).     }     return result. }
true;default;0;16;/**  * Return a URL mapping pattern that can be used with a  * {@link ServletRegistrationBean} to map Jersey's servlet.  * @return the path as a servlet URL mapping  */ ;/**  * Return a URL mapping pattern that can be used with a  * {@link ServletRegistrationBean} to map Jersey's servlet.  * @return the path as a servlet URL mapping  */ default String getUrlMapping() {     String path = getPath().     if (!path.startsWith("/")) {         path = "/" + path.     }     if (path.equals("/")) {         return "/*".     }     if (path.contains("*")) {         return path.     }     if (path.endsWith("/")) {         return path + "*".     }     return path + "/*". }
