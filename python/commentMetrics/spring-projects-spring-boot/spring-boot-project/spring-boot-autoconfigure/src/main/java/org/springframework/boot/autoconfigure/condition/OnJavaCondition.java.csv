commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     Map<String, Object> attributes = metadata.getAnnotationAttributes(ConditionalOnJava.class.getName()).     Range range = (Range) attributes.get("range").     JavaVersion version = (JavaVersion) attributes.get("value").     return getMatchOutcome(range, JVM_VERSION, version). }
false;protected;3;11;;protected ConditionOutcome getMatchOutcome(Range range, JavaVersion runningVersion, JavaVersion version) {     boolean match = isWithin(runningVersion, range, version).     String expected = String.format((range != Range.EQUAL_OR_NEWER) ? "(older than %s)" : "(%s or newer)", version).     ConditionMessage message = ConditionMessage.forCondition(ConditionalOnJava.class, expected).foundExactly(runningVersion).     return new ConditionOutcome(match, message). }
true;private;3;10;/**  * Determines if the {@code runningVersion} is within the specified range of versions.  * @param runningVersion the current version.  * @param range the range  * @param version the bounds of the range  * @return if this version is within the specified range  */ ;/**  * Determines if the {@code runningVersion} is within the specified range of versions.  * @param runningVersion the current version.  * @param range the range  * @param version the bounds of the range  * @return if this version is within the specified range  */ private boolean isWithin(JavaVersion runningVersion, Range range, JavaVersion version) {     if (range == Range.EQUAL_OR_NEWER) {         return runningVersion.isEqualOrNewerThan(version).     }     if (range == Range.OLDER_THAN) {         return runningVersion.isOlderThan(version).     }     throw new IllegalStateException("Unknown range " + range). }
