commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Bean @ConditionalOnMissingBean public SimpleRabbitListenerContainerFactoryConfigurer simpleRabbitListenerContainerFactoryConfigurer() {     SimpleRabbitListenerContainerFactoryConfigurer configurer = new SimpleRabbitListenerContainerFactoryConfigurer().     configurer.setMessageConverter(this.messageConverter.getIfUnique()).     configurer.setMessageRecoverer(this.messageRecoverer.getIfUnique()).     configurer.setRetryTemplateCustomizers(this.retryTemplateCustomizers.orderedStream().collect(Collectors.toList())).     configurer.setRabbitProperties(this.properties).     return configurer. }
false;public;2;10;;@Bean(name = "rabbitListenerContainerFactory") @ConditionalOnMissingBean(name = "rabbitListenerContainerFactory") @ConditionalOnProperty(prefix = "spring.rabbitmq.listener", name = "type", havingValue = "simple", matchIfMissing = true) public SimpleRabbitListenerContainerFactory simpleRabbitListenerContainerFactory(SimpleRabbitListenerContainerFactoryConfigurer configurer, ConnectionFactory connectionFactory) {     SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory().     configurer.configure(factory, connectionFactory).     return factory. }
false;public;0;11;;@Bean @ConditionalOnMissingBean public DirectRabbitListenerContainerFactoryConfigurer directRabbitListenerContainerFactoryConfigurer() {     DirectRabbitListenerContainerFactoryConfigurer configurer = new DirectRabbitListenerContainerFactoryConfigurer().     configurer.setMessageConverter(this.messageConverter.getIfUnique()).     configurer.setMessageRecoverer(this.messageRecoverer.getIfUnique()).     configurer.setRetryTemplateCustomizers(this.retryTemplateCustomizers.orderedStream().collect(Collectors.toList())).     configurer.setRabbitProperties(this.properties).     return configurer. }
false;public;2;10;;@Bean(name = "rabbitListenerContainerFactory") @ConditionalOnMissingBean(name = "rabbitListenerContainerFactory") @ConditionalOnProperty(prefix = "spring.rabbitmq.listener", name = "type", havingValue = "direct") public DirectRabbitListenerContainerFactory directRabbitListenerContainerFactory(DirectRabbitListenerContainerFactoryConfigurer configurer, ConnectionFactory connectionFactory) {     DirectRabbitListenerContainerFactory factory = new DirectRabbitListenerContainerFactory().     configurer.configure(factory, connectionFactory).     return factory. }
