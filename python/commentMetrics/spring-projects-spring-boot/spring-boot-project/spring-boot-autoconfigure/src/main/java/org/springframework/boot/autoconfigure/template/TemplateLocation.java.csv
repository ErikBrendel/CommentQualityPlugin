commented;modifiers;parameterAmount;loc;comment;code
true;public;1;12;/**  * Determine if this template location exists using the specified  * {@link ResourcePatternResolver}.  * @param resolver the resolver used to test if the location exists  * @return {@code true} if the location exists.  */ ;/**  * Determine if this template location exists using the specified  * {@link ResourcePatternResolver}.  * @param resolver the resolver used to test if the location exists  * @return {@code true} if the location exists.  */ public boolean exists(ResourcePatternResolver resolver) {     Assert.notNull(resolver, "Resolver must not be null").     if (resolver.getResource(this.path).exists()) {         return true.     }     try {         return anyExists(resolver).     } catch (IOException ex) {         return false.     } }
false;private;1;16;;private boolean anyExists(ResourcePatternResolver resolver) throws IOException {     String searchPath = this.path.     if (searchPath.startsWith(ResourceLoader.CLASSPATH_URL_PREFIX)) {         searchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + searchPath.substring(ResourceLoader.CLASSPATH_URL_PREFIX.length()).     }     if (searchPath.startsWith(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX)) {         Resource[] resources = resolver.getResources(searchPath).         for (Resource resource : resources) {             if (resource.exists()) {                 return true.             }         }     }     return false. }
false;public;0;4;;@Override public String toString() {     return this.path. }
