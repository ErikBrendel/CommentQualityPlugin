# id;timestamp;commentText;codeText;commentWords;codeWords
AutoConfigurationPackages -> public static List<String> get(BeanFactory beanFactory);1507173536;Return the auto-configuration base packages for the given bean factory._@param beanFactory the source bean factory_@return a list of auto-configuration packages_@throws IllegalStateException if auto-configuration is not enabled;public static List<String> get(BeanFactory beanFactory) {_		try {_			return beanFactory.getBean(BEAN, BasePackages.class).get()__		}_		catch (NoSuchBeanDefinitionException ex) {_			throw new IllegalStateException(_					"Unable to retrieve @EnableAutoConfiguration base packages")__		}_	};return,the,auto,configuration,base,packages,for,the,given,bean,factory,param,bean,factory,the,source,bean,factory,return,a,list,of,auto,configuration,packages,throws,illegal,state,exception,if,auto,configuration,is,not,enabled;public,static,list,string,get,bean,factory,bean,factory,try,return,bean,factory,get,bean,bean,base,packages,class,get,catch,no,such,bean,definition,exception,ex,throw,new,illegal,state,exception,unable,to,retrieve,enable,auto,configuration,base,packages
AutoConfigurationPackages -> public static List<String> get(BeanFactory beanFactory);1508852929;Return the auto-configuration base packages for the given bean factory._@param beanFactory the source bean factory_@return a list of auto-configuration packages_@throws IllegalStateException if auto-configuration is not enabled;public static List<String> get(BeanFactory beanFactory) {_		try {_			return beanFactory.getBean(BEAN, BasePackages.class).get()__		}_		catch (NoSuchBeanDefinitionException ex) {_			throw new IllegalStateException(_					"Unable to retrieve @EnableAutoConfiguration base packages")__		}_	};return,the,auto,configuration,base,packages,for,the,given,bean,factory,param,bean,factory,the,source,bean,factory,return,a,list,of,auto,configuration,packages,throws,illegal,state,exception,if,auto,configuration,is,not,enabled;public,static,list,string,get,bean,factory,bean,factory,try,return,bean,factory,get,bean,bean,base,packages,class,get,catch,no,such,bean,definition,exception,ex,throw,new,illegal,state,exception,unable,to,retrieve,enable,auto,configuration,base,packages
AutoConfigurationPackages -> public static List<String> get(BeanFactory beanFactory);1516357852;Return the auto-configuration base packages for the given bean factory._@param beanFactory the source bean factory_@return a list of auto-configuration packages_@throws IllegalStateException if auto-configuration is not enabled;public static List<String> get(BeanFactory beanFactory) {_		try {_			return beanFactory.getBean(BEAN, BasePackages.class).get()__		}_		catch (NoSuchBeanDefinitionException ex) {_			throw new IllegalStateException(_					"Unable to retrieve @EnableAutoConfiguration base packages")__		}_	};return,the,auto,configuration,base,packages,for,the,given,bean,factory,param,bean,factory,the,source,bean,factory,return,a,list,of,auto,configuration,packages,throws,illegal,state,exception,if,auto,configuration,is,not,enabled;public,static,list,string,get,bean,factory,bean,factory,try,return,bean,factory,get,bean,bean,base,packages,class,get,catch,no,such,bean,definition,exception,ex,throw,new,illegal,state,exception,unable,to,retrieve,enable,auto,configuration,base,packages
AutoConfigurationPackages -> public static List<String> get(BeanFactory beanFactory);1519362690;Return the auto-configuration base packages for the given bean factory._@param beanFactory the source bean factory_@return a list of auto-configuration packages_@throws IllegalStateException if auto-configuration is not enabled;public static List<String> get(BeanFactory beanFactory) {_		try {_			return beanFactory.getBean(BEAN, BasePackages.class).get()__		}_		catch (NoSuchBeanDefinitionException ex) {_			throw new IllegalStateException(_					"Unable to retrieve @EnableAutoConfiguration base packages")__		}_	};return,the,auto,configuration,base,packages,for,the,given,bean,factory,param,bean,factory,the,source,bean,factory,return,a,list,of,auto,configuration,packages,throws,illegal,state,exception,if,auto,configuration,is,not,enabled;public,static,list,string,get,bean,factory,bean,factory,try,return,bean,factory,get,bean,bean,base,packages,class,get,catch,no,such,bean,definition,exception,ex,throw,new,illegal,state,exception,unable,to,retrieve,enable,auto,configuration,base,packages
AutoConfigurationPackages -> public static List<String> get(BeanFactory beanFactory);1532738143;Return the auto-configuration base packages for the given bean factory._@param beanFactory the source bean factory_@return a list of auto-configuration packages_@throws IllegalStateException if auto-configuration is not enabled;public static List<String> get(BeanFactory beanFactory) {_		try {_			return beanFactory.getBean(BEAN, BasePackages.class).get()__		}_		catch (NoSuchBeanDefinitionException ex) {_			throw new IllegalStateException(_					"Unable to retrieve @EnableAutoConfiguration base packages")__		}_	};return,the,auto,configuration,base,packages,for,the,given,bean,factory,param,bean,factory,the,source,bean,factory,return,a,list,of,auto,configuration,packages,throws,illegal,state,exception,if,auto,configuration,is,not,enabled;public,static,list,string,get,bean,factory,bean,factory,try,return,bean,factory,get,bean,bean,base,packages,class,get,catch,no,such,bean,definition,exception,ex,throw,new,illegal,state,exception,unable,to,retrieve,enable,auto,configuration,base,packages
AutoConfigurationPackages -> public static boolean has(BeanFactory beanFactory);1507173536;Determine if the auto-configuration base packages for the given bean factory are_available._@param beanFactory the source bean factory_@return true if there are auto-config packages available;public static boolean has(BeanFactory beanFactory) {_		return beanFactory.containsBean(BEAN) && !get(beanFactory).isEmpty()__	};determine,if,the,auto,configuration,base,packages,for,the,given,bean,factory,are,available,param,bean,factory,the,source,bean,factory,return,true,if,there,are,auto,config,packages,available;public,static,boolean,has,bean,factory,bean,factory,return,bean,factory,contains,bean,bean,get,bean,factory,is,empty
AutoConfigurationPackages -> public static boolean has(BeanFactory beanFactory);1508852929;Determine if the auto-configuration base packages for the given bean factory are_available._@param beanFactory the source bean factory_@return true if there are auto-config packages available;public static boolean has(BeanFactory beanFactory) {_		return beanFactory.containsBean(BEAN) && !get(beanFactory).isEmpty()__	};determine,if,the,auto,configuration,base,packages,for,the,given,bean,factory,are,available,param,bean,factory,the,source,bean,factory,return,true,if,there,are,auto,config,packages,available;public,static,boolean,has,bean,factory,bean,factory,return,bean,factory,contains,bean,bean,get,bean,factory,is,empty
AutoConfigurationPackages -> public static boolean has(BeanFactory beanFactory);1516357852;Determine if the auto-configuration base packages for the given bean factory are_available._@param beanFactory the source bean factory_@return true if there are auto-config packages available;public static boolean has(BeanFactory beanFactory) {_		return beanFactory.containsBean(BEAN) && !get(beanFactory).isEmpty()__	};determine,if,the,auto,configuration,base,packages,for,the,given,bean,factory,are,available,param,bean,factory,the,source,bean,factory,return,true,if,there,are,auto,config,packages,available;public,static,boolean,has,bean,factory,bean,factory,return,bean,factory,contains,bean,bean,get,bean,factory,is,empty
AutoConfigurationPackages -> public static boolean has(BeanFactory beanFactory);1519362690;Determine if the auto-configuration base packages for the given bean factory are_available._@param beanFactory the source bean factory_@return true if there are auto-config packages available;public static boolean has(BeanFactory beanFactory) {_		return beanFactory.containsBean(BEAN) && !get(beanFactory).isEmpty()__	};determine,if,the,auto,configuration,base,packages,for,the,given,bean,factory,are,available,param,bean,factory,the,source,bean,factory,return,true,if,there,are,auto,config,packages,available;public,static,boolean,has,bean,factory,bean,factory,return,bean,factory,contains,bean,bean,get,bean,factory,is,empty
AutoConfigurationPackages -> public static boolean has(BeanFactory beanFactory);1532738143;Determine if the auto-configuration base packages for the given bean factory are_available._@param beanFactory the source bean factory_@return true if there are auto-config packages available;public static boolean has(BeanFactory beanFactory) {_		return beanFactory.containsBean(BEAN) && !get(beanFactory).isEmpty()__	};determine,if,the,auto,configuration,base,packages,for,the,given,bean,factory,are,available,param,bean,factory,the,source,bean,factory,return,true,if,there,are,auto,config,packages,available;public,static,boolean,has,bean,factory,bean,factory,return,bean,factory,contains,bean,bean,get,bean,factory,is,empty
AutoConfigurationPackages -> public static void register(BeanDefinitionRegistry registry, String... packageNames);1507173536;Programmatically registers the auto-configuration package names. Subsequent_invocations will add the given package names to those that have already been_registered. You can use this method to manually define the base packages that will_be used for a given {@link BeanDefinitionRegistry}. Generally it's recommended that_you don't call this method directly, but instead rely on the default convention_where the package name is set from your {@code @EnableAutoConfiguration}_configuration class or classes._@param registry the bean definition registry_@param packageNames the package names to set;public static void register(BeanDefinitionRegistry registry, String... packageNames) {_		if (registry.containsBeanDefinition(BEAN)) {_			BeanDefinition beanDefinition = registry.getBeanDefinition(BEAN)__			ConstructorArgumentValues constructorArguments = beanDefinition_					.getConstructorArgumentValues()__			constructorArguments.addIndexedArgumentValue(0,_					addBasePackages(constructorArguments, packageNames))__		}_		else {_			GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__			beanDefinition.setBeanClass(BasePackages.class)__			beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0,_					packageNames)__			beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			registry.registerBeanDefinition(BEAN, beanDefinition)__		}_	};programmatically,registers,the,auto,configuration,package,names,subsequent,invocations,will,add,the,given,package,names,to,those,that,have,already,been,registered,you,can,use,this,method,to,manually,define,the,base,packages,that,will,be,used,for,a,given,link,bean,definition,registry,generally,it,s,recommended,that,you,don,t,call,this,method,directly,but,instead,rely,on,the,default,convention,where,the,package,name,is,set,from,your,code,enable,auto,configuration,configuration,class,or,classes,param,registry,the,bean,definition,registry,param,package,names,the,package,names,to,set;public,static,void,register,bean,definition,registry,registry,string,package,names,if,registry,contains,bean,definition,bean,bean,definition,bean,definition,registry,get,bean,definition,bean,constructor,argument,values,constructor,arguments,bean,definition,get,constructor,argument,values,constructor,arguments,add,indexed,argument,value,0,add,base,packages,constructor,arguments,package,names,else,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,base,packages,class,bean,definition,get,constructor,argument,values,add,indexed,argument,value,0,package,names,bean,definition,set,role,bean,definition,registry,register,bean,definition,bean,bean,definition
AutoConfigurationPackages -> public static void register(BeanDefinitionRegistry registry, String... packageNames);1508852929;Programmatically registers the auto-configuration package names. Subsequent_invocations will add the given package names to those that have already been_registered. You can use this method to manually define the base packages that will_be used for a given {@link BeanDefinitionRegistry}. Generally it's recommended that_you don't call this method directly, but instead rely on the default convention_where the package name is set from your {@code @EnableAutoConfiguration}_configuration class or classes._@param registry the bean definition registry_@param packageNames the package names to set;public static void register(BeanDefinitionRegistry registry, String... packageNames) {_		if (registry.containsBeanDefinition(BEAN)) {_			BeanDefinition beanDefinition = registry.getBeanDefinition(BEAN)__			ConstructorArgumentValues constructorArguments = beanDefinition_					.getConstructorArgumentValues()__			constructorArguments.addIndexedArgumentValue(0,_					addBasePackages(constructorArguments, packageNames))__		}_		else {_			GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__			beanDefinition.setBeanClass(BasePackages.class)__			beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0,_					packageNames)__			beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			registry.registerBeanDefinition(BEAN, beanDefinition)__		}_	};programmatically,registers,the,auto,configuration,package,names,subsequent,invocations,will,add,the,given,package,names,to,those,that,have,already,been,registered,you,can,use,this,method,to,manually,define,the,base,packages,that,will,be,used,for,a,given,link,bean,definition,registry,generally,it,s,recommended,that,you,don,t,call,this,method,directly,but,instead,rely,on,the,default,convention,where,the,package,name,is,set,from,your,code,enable,auto,configuration,configuration,class,or,classes,param,registry,the,bean,definition,registry,param,package,names,the,package,names,to,set;public,static,void,register,bean,definition,registry,registry,string,package,names,if,registry,contains,bean,definition,bean,bean,definition,bean,definition,registry,get,bean,definition,bean,constructor,argument,values,constructor,arguments,bean,definition,get,constructor,argument,values,constructor,arguments,add,indexed,argument,value,0,add,base,packages,constructor,arguments,package,names,else,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,base,packages,class,bean,definition,get,constructor,argument,values,add,indexed,argument,value,0,package,names,bean,definition,set,role,bean,definition,registry,register,bean,definition,bean,bean,definition
AutoConfigurationPackages -> public static void register(BeanDefinitionRegistry registry, String... packageNames);1516357852;Programmatically registers the auto-configuration package names. Subsequent_invocations will add the given package names to those that have already been_registered. You can use this method to manually define the base packages that will_be used for a given {@link BeanDefinitionRegistry}. Generally it's recommended that_you don't call this method directly, but instead rely on the default convention_where the package name is set from your {@code @EnableAutoConfiguration}_configuration class or classes._@param registry the bean definition registry_@param packageNames the package names to set;public static void register(BeanDefinitionRegistry registry, String... packageNames) {_		if (registry.containsBeanDefinition(BEAN)) {_			BeanDefinition beanDefinition = registry.getBeanDefinition(BEAN)__			ConstructorArgumentValues constructorArguments = beanDefinition_					.getConstructorArgumentValues()__			constructorArguments.addIndexedArgumentValue(0,_					addBasePackages(constructorArguments, packageNames))__		}_		else {_			GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__			beanDefinition.setBeanClass(BasePackages.class)__			beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0,_					packageNames)__			beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			registry.registerBeanDefinition(BEAN, beanDefinition)__		}_	};programmatically,registers,the,auto,configuration,package,names,subsequent,invocations,will,add,the,given,package,names,to,those,that,have,already,been,registered,you,can,use,this,method,to,manually,define,the,base,packages,that,will,be,used,for,a,given,link,bean,definition,registry,generally,it,s,recommended,that,you,don,t,call,this,method,directly,but,instead,rely,on,the,default,convention,where,the,package,name,is,set,from,your,code,enable,auto,configuration,configuration,class,or,classes,param,registry,the,bean,definition,registry,param,package,names,the,package,names,to,set;public,static,void,register,bean,definition,registry,registry,string,package,names,if,registry,contains,bean,definition,bean,bean,definition,bean,definition,registry,get,bean,definition,bean,constructor,argument,values,constructor,arguments,bean,definition,get,constructor,argument,values,constructor,arguments,add,indexed,argument,value,0,add,base,packages,constructor,arguments,package,names,else,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,base,packages,class,bean,definition,get,constructor,argument,values,add,indexed,argument,value,0,package,names,bean,definition,set,role,bean,definition,registry,register,bean,definition,bean,bean,definition
AutoConfigurationPackages -> public static void register(BeanDefinitionRegistry registry, String... packageNames);1519362690;Programmatically registers the auto-configuration package names. Subsequent_invocations will add the given package names to those that have already been_registered. You can use this method to manually define the base packages that will_be used for a given {@link BeanDefinitionRegistry}. Generally it's recommended that_you don't call this method directly, but instead rely on the default convention_where the package name is set from your {@code @EnableAutoConfiguration}_configuration class or classes._@param registry the bean definition registry_@param packageNames the package names to set;public static void register(BeanDefinitionRegistry registry, String... packageNames) {_		if (registry.containsBeanDefinition(BEAN)) {_			BeanDefinition beanDefinition = registry.getBeanDefinition(BEAN)__			ConstructorArgumentValues constructorArguments = beanDefinition_					.getConstructorArgumentValues()__			constructorArguments.addIndexedArgumentValue(0,_					addBasePackages(constructorArguments, packageNames))__		}_		else {_			GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__			beanDefinition.setBeanClass(BasePackages.class)__			beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0,_					packageNames)__			beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			registry.registerBeanDefinition(BEAN, beanDefinition)__		}_	};programmatically,registers,the,auto,configuration,package,names,subsequent,invocations,will,add,the,given,package,names,to,those,that,have,already,been,registered,you,can,use,this,method,to,manually,define,the,base,packages,that,will,be,used,for,a,given,link,bean,definition,registry,generally,it,s,recommended,that,you,don,t,call,this,method,directly,but,instead,rely,on,the,default,convention,where,the,package,name,is,set,from,your,code,enable,auto,configuration,configuration,class,or,classes,param,registry,the,bean,definition,registry,param,package,names,the,package,names,to,set;public,static,void,register,bean,definition,registry,registry,string,package,names,if,registry,contains,bean,definition,bean,bean,definition,bean,definition,registry,get,bean,definition,bean,constructor,argument,values,constructor,arguments,bean,definition,get,constructor,argument,values,constructor,arguments,add,indexed,argument,value,0,add,base,packages,constructor,arguments,package,names,else,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,base,packages,class,bean,definition,get,constructor,argument,values,add,indexed,argument,value,0,package,names,bean,definition,set,role,bean,definition,registry,register,bean,definition,bean,bean,definition
AutoConfigurationPackages -> public static void register(BeanDefinitionRegistry registry, String... packageNames);1532738143;Programmatically registers the auto-configuration package names. Subsequent_invocations will add the given package names to those that have already been_registered. You can use this method to manually define the base packages that will_be used for a given {@link BeanDefinitionRegistry}. Generally it's recommended that_you don't call this method directly, but instead rely on the default convention_where the package name is set from your {@code @EnableAutoConfiguration}_configuration class or classes._@param registry the bean definition registry_@param packageNames the package names to set;public static void register(BeanDefinitionRegistry registry, String... packageNames) {_		if (registry.containsBeanDefinition(BEAN)) {_			BeanDefinition beanDefinition = registry.getBeanDefinition(BEAN)__			ConstructorArgumentValues constructorArguments = beanDefinition_					.getConstructorArgumentValues()__			constructorArguments.addIndexedArgumentValue(0,_					addBasePackages(constructorArguments, packageNames))__		}_		else {_			GenericBeanDefinition beanDefinition = new GenericBeanDefinition()__			beanDefinition.setBeanClass(BasePackages.class)__			beanDefinition.getConstructorArgumentValues().addIndexedArgumentValue(0,_					packageNames)__			beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE)__			registry.registerBeanDefinition(BEAN, beanDefinition)__		}_	};programmatically,registers,the,auto,configuration,package,names,subsequent,invocations,will,add,the,given,package,names,to,those,that,have,already,been,registered,you,can,use,this,method,to,manually,define,the,base,packages,that,will,be,used,for,a,given,link,bean,definition,registry,generally,it,s,recommended,that,you,don,t,call,this,method,directly,but,instead,rely,on,the,default,convention,where,the,package,name,is,set,from,your,code,enable,auto,configuration,configuration,class,or,classes,param,registry,the,bean,definition,registry,param,package,names,the,package,names,to,set;public,static,void,register,bean,definition,registry,registry,string,package,names,if,registry,contains,bean,definition,bean,bean,definition,bean,definition,registry,get,bean,definition,bean,constructor,argument,values,constructor,arguments,bean,definition,get,constructor,argument,values,constructor,arguments,add,indexed,argument,value,0,add,base,packages,constructor,arguments,package,names,else,generic,bean,definition,bean,definition,new,generic,bean,definition,bean,definition,set,bean,class,base,packages,class,bean,definition,get,constructor,argument,values,add,indexed,argument,value,0,package,names,bean,definition,set,role,bean,definition,registry,register,bean,definition,bean,bean,definition
