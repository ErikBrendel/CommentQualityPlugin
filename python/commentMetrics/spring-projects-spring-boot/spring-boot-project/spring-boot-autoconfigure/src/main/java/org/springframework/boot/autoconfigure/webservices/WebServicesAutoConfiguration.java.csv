commented;modifiers;parameterAmount;loc;comment;code
false;public;2;14;;@Bean public ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet(ApplicationContext applicationContext, WebServicesProperties properties) {     MessageDispatcherServlet servlet = new MessageDispatcherServlet().     servlet.setApplicationContext(applicationContext).     String path = properties.getPath().     String urlMapping = path + (path.endsWith("/") ? "*" : "/*").     ServletRegistrationBean<MessageDispatcherServlet> registration = new ServletRegistrationBean<>(servlet, urlMapping).     WebServicesProperties.Servlet servletProperties = properties.getServlet().     registration.setLoadOnStartup(servletProperties.getLoadOnStartup()).     servletProperties.getInit().forEach(registration::addInitParameter).     return registration. }
false;public,static;0;5;;@Bean @Conditional(OnWsdlLocationsCondition.class) public static WsdlDefinitionBeanFactoryPostProcessor wsdlDefinitionBeanFactoryPostProcessor() {     return new WsdlDefinitionBeanFactoryPostProcessor(). }
false;public;1;4;;@Override public void setApplicationContext(ApplicationContext applicationContext) {     this.applicationContext = applicationContext. }
false;public;1;15;;@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {     Binder binder = Binder.get(this.applicationContext.getEnvironment()).     List<String> wsdlLocations = binder.bind("spring.webservices.wsdl-locations", Bindable.listOf(String.class)).orElse(Collections.emptyList()).     for (String wsdlLocation : wsdlLocations) {         registerBeans(wsdlLocation, "*.wsdl", SimpleWsdl11Definition.class, SimpleWsdl11Definition::new, registry).         registerBeans(wsdlLocation, "*.xsd", SimpleXsdSchema.class, SimpleXsdSchema::new, registry).     } }
false;public;1;4;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { }
false;private;5;11;;private <T> void registerBeans(String location, String pattern, Class<T> type, Function<Resource, T> beanSupplier, BeanDefinitionRegistry registry) {     for (Resource resource : getResources(location, pattern)) {         BeanDefinition beanDefinition = BeanDefinitionBuilder.genericBeanDefinition(type, () -> beanSupplier.apply(resource)).getBeanDefinition().         registry.registerBeanDefinition(StringUtils.stripFilenameExtension(resource.getFilename()), beanDefinition).     } }
false;private;2;9;;private Resource[] getResources(String location, String pattern) {     try {         return this.applicationContext.getResources(ensureTrailingSlash(location) + pattern).     } catch (IOException ex) {         return new Resource[0].     } }
false;private;1;3;;private String ensureTrailingSlash(String path) {     return path.endsWith("/") ? path : path + "/". }
