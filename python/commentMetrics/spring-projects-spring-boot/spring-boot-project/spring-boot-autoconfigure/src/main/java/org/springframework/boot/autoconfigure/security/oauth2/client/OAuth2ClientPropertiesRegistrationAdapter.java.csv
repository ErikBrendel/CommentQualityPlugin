commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;7;;public static Map<String, ClientRegistration> getClientRegistrations(OAuth2ClientProperties properties) {     Map<String, ClientRegistration> clientRegistrations = new HashMap<>().     properties.getRegistration().forEach((key, value) -> clientRegistrations.put(key, getClientRegistration(key, value, properties.getProvider()))).     return clientRegistrations. }
false;private,static;3;21;;private static ClientRegistration getClientRegistration(String registrationId, OAuth2ClientProperties.Registration properties, Map<String, Provider> providers) {     Builder builder = getBuilderFromIssuerIfPossible(registrationId, properties.getProvider(), providers).     if (builder == null) {         builder = getBuilder(registrationId, properties.getProvider(), providers).     }     PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull().     map.from(properties::getClientId).to(builder::clientId).     map.from(properties::getClientSecret).to(builder::clientSecret).     map.from(properties::getClientAuthenticationMethod).as(ClientAuthenticationMethod::new).to(builder::clientAuthenticationMethod).     map.from(properties::getAuthorizationGrantType).as(AuthorizationGrantType::new).to(builder::authorizationGrantType).     map.from(properties::getRedirectUri).to(builder::redirectUriTemplate).     map.from(properties::getScope).as(StringUtils::toStringArray).to(builder::scope).     map.from(properties::getClientName).to(builder::clientName).     return builder.build(). }
false;private,static;3;15;;private static Builder getBuilderFromIssuerIfPossible(String registrationId, String configuredProviderId, Map<String, Provider> providers) {     String providerId = (configuredProviderId != null) ? configuredProviderId : registrationId.     if (providers.containsKey(providerId)) {         Provider provider = providers.get(providerId).         String issuer = provider.getIssuerUri().         if (issuer != null) {             Builder builder = ClientRegistrations.fromOidcIssuerLocation(issuer).registrationId(registrationId).             return getBuilder(builder, provider).         }     }     return null. }
false;private,static;3;16;;private static Builder getBuilder(String registrationId, String configuredProviderId, Map<String, Provider> providers) {     String providerId = (configuredProviderId != null) ? configuredProviderId : registrationId.     CommonOAuth2Provider provider = getCommonProvider(providerId).     if (provider == null && !providers.containsKey(providerId)) {         throw new IllegalStateException(getErrorMessage(configuredProviderId, registrationId)).     }     Builder builder = (provider != null) ? provider.getBuilder(registrationId) : ClientRegistration.withRegistrationId(registrationId).     if (providers.containsKey(providerId)) {         return getBuilder(builder, providers.get(providerId)).     }     return builder. }
false;private,static;2;7;;private static String getErrorMessage(String configuredProviderId, String registrationId) {     return ((configuredProviderId != null) ? "Unknown provider ID '" + configuredProviderId + "'" : "Provider ID must be specified for client registration '" + registrationId + "'"). }
false;private,static;2;11;;private static Builder getBuilder(Builder builder, Provider provider) {     PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull().     map.from(provider::getAuthorizationUri).to(builder::authorizationUri).     map.from(provider::getTokenUri).to(builder::tokenUri).     map.from(provider::getUserInfoUri).to(builder::userInfoUri).     map.from(provider::getUserInfoAuthenticationMethod).as(AuthenticationMethod::new).to(builder::userInfoAuthenticationMethod).     map.from(provider::getJwkSetUri).to(builder::jwkSetUri).     map.from(provider::getUserNameAttribute).to(builder::userNameAttributeName).     return builder. }
false;private,static;1;9;;private static CommonOAuth2Provider getCommonProvider(String providerId) {     try {         return ApplicationConversionService.getSharedInstance().convert(providerId, CommonOAuth2Provider.class).     } catch (ConversionException ex) {         return null.     } }
