commented;modifiers;parameterAmount;loc;comment;code
false;public;3;9;;@Override public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status, Map<String, Object> model) {     ModelAndView modelAndView = resolve(String.valueOf(status.value()), model).     if (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {         modelAndView = resolve(SERIES_VIEWS.get(status.series()), model).     }     return modelAndView. }
false;private;2;9;;private ModelAndView resolve(String viewName, Map<String, Object> model) {     String errorViewName = "error/" + viewName.     TemplateAvailabilityProvider provider = this.templateAvailabilityProviders.getProvider(errorViewName, this.applicationContext).     if (provider != null) {         return new ModelAndView(errorViewName, model).     }     return resolveResource(errorViewName, model). }
false;private;2;14;;private ModelAndView resolveResource(String viewName, Map<String, Object> model) {     for (String location : this.resourceProperties.getStaticLocations()) {         try {             Resource resource = this.applicationContext.getResource(location).             resource = resource.createRelative(viewName + ".html").             if (resource.exists()) {                 return new ModelAndView(new HtmlResourceView(resource), model).             }         } catch (Exception ex) {         }     }     return null. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public String getContentType() {     return MediaType.TEXT_HTML_VALUE. }
false;public;3;7;;@Override public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     response.setContentType(getContentType()).     FileCopyUtils.copy(this.resource.getInputStream(), response.getOutputStream()). }
