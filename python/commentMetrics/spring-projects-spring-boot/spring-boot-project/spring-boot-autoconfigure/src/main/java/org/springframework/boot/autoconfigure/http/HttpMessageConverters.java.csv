commented;modifiers;parameterAmount;loc;comment;code
false;private;2;24;;private List<HttpMessageConverter<?>> getCombinedConverters(Collection<HttpMessageConverter<?>> converters, List<HttpMessageConverter<?>> defaultConverters) {     List<HttpMessageConverter<?>> combined = new ArrayList<>().     List<HttpMessageConverter<?>> processing = new ArrayList<>(converters).     for (HttpMessageConverter<?> defaultConverter : defaultConverters) {         Iterator<HttpMessageConverter<?>> iterator = processing.iterator().         while (iterator.hasNext()) {             HttpMessageConverter<?> candidate = iterator.next().             if (isReplacement(defaultConverter, candidate)) {                 combined.add(candidate).                 iterator.remove().             }         }         combined.add(defaultConverter).         if (defaultConverter instanceof AllEncompassingFormHttpMessageConverter) {             configurePartConverters((AllEncompassingFormHttpMessageConverter) defaultConverter, converters).         }     }     combined.addAll(0, processing).     return combined. }
false;private;2;9;;private boolean isReplacement(HttpMessageConverter<?> defaultConverter, HttpMessageConverter<?> candidate) {     for (Class<?> nonReplacingConverter : NON_REPLACING_CONVERTERS) {         if (nonReplacingConverter.isInstance(candidate)) {             return false.         }     }     return ClassUtils.isAssignableValue(defaultConverter.getClass(), candidate). }
false;private;2;10;;private void configurePartConverters(AllEncompassingFormHttpMessageConverter formConverter, Collection<HttpMessageConverter<?>> converters) {     List<HttpMessageConverter<?>> partConverters = extractPartConverters(formConverter).     List<HttpMessageConverter<?>> combinedConverters = getCombinedConverters(converters, partConverters).     combinedConverters = postProcessPartConverters(combinedConverters).     formConverter.setPartConverters(combinedConverters). }
false;private;1;9;;@SuppressWarnings("unchecked") private List<HttpMessageConverter<?>> extractPartConverters(FormHttpMessageConverter formConverter) {     Field field = ReflectionUtils.findField(FormHttpMessageConverter.class, "partConverters").     ReflectionUtils.makeAccessible(field).     return (List<HttpMessageConverter<?>>) ReflectionUtils.getField(field, formConverter). }
true;protected;1;4;/**  * Method that can be used to post-process the {@link HttpMessageConverter} list  * before it is used.  * @param converters a mutable list of the converters that will be used.  * @return the final converts list to use  */ ;/**  * Method that can be used to post-process the {@link HttpMessageConverter} list  * before it is used.  * @param converters a mutable list of the converters that will be used.  * @return the final converts list to use  */ protected List<HttpMessageConverter<?>> postProcessConverters(List<HttpMessageConverter<?>> converters) {     return converters. }
true;protected;1;4;/**  * Method that can be used to post-process the {@link HttpMessageConverter} list  * before it is used to configure the part converters of  * {@link AllEncompassingFormHttpMessageConverter}.  * @param converters a mutable list of the converters that will be used.  * @return the final converts list to use  * @since 1.3.0  */ ;/**  * Method that can be used to post-process the {@link HttpMessageConverter} list  * before it is used to configure the part converters of  * {@link AllEncompassingFormHttpMessageConverter}.  * @param converters a mutable list of the converters that will be used.  * @return the final converts list to use  * @since 1.3.0  */ protected List<HttpMessageConverter<?>> postProcessPartConverters(List<HttpMessageConverter<?>> converters) {     return converters. }
false;public;0;3;;public List<HttpMessageConverter<?>> defaultMessageConverters() {     return super.getMessageConverters(). }
false;private;0;18;;private List<HttpMessageConverter<?>> getDefaultConverters() {     List<HttpMessageConverter<?>> converters = new ArrayList<>().     if (ClassUtils.isPresent("org.springframework.web.servlet.config.annotation." + "WebMvcConfigurationSupport", null)) {         converters.addAll(new WebMvcConfigurationSupport() {              public List<HttpMessageConverter<?>> defaultMessageConverters() {                 return super.getMessageConverters().             }         }.defaultMessageConverters()).     } else {         converters.addAll(new RestTemplate().getMessageConverters()).     }     reorderXmlConvertersToEnd(converters).     return converters. }
false;private;1;13;;private void reorderXmlConvertersToEnd(List<HttpMessageConverter<?>> converters) {     List<HttpMessageConverter<?>> xml = new ArrayList<>().     for (Iterator<HttpMessageConverter<?>> iterator = converters.iterator(). iterator.hasNext(). ) {         HttpMessageConverter<?> converter = iterator.next().         if ((converter instanceof AbstractXmlHttpMessageConverter) || (converter instanceof MappingJackson2XmlHttpMessageConverter)) {             xml.add(converter).             iterator.remove().         }     }     converters.addAll(xml). }
false;public;0;4;;@Override public Iterator<HttpMessageConverter<?>> iterator() {     return getConverters().iterator(). }
true;public;0;3;/**  * Return an immutable list of the converters in the order that they will be  * registered.  * @return the converters  */ ;/**  * Return an immutable list of the converters in the order that they will be  * registered.  * @return the converters  */ public List<HttpMessageConverter<?>> getConverters() {     return this.converters. }
false;private,static;2;8;;private static void addClassIfExists(List<Class<?>> list, String className) {     try {         list.add(Class.forName(className)).     } catch (ClassNotFoundException | NoClassDefFoundError ex) {     // Ignore     } }
