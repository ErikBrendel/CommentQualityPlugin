# id;timestamp;commentText;codeText;commentWords;codeWords
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1507173536;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1514278423;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1515014644;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1515486892;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1519362690;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1521018142;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1521030870;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1522079995;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1522370495;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1525376698;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1532002090;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1532617589;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1532646217;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1532738143;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1533019713;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1533114559;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1533121940;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1533282038;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1537798484;Return the auto-configuration class names that should be considered. By default_this method will load candidates using {@link SpringFactoriesLoader} with_{@link #getSpringFactoriesLoaderFactoryClass()}._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return a list of candidate configurations;protected List<String> getCandidateConfigurations(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		List<String> configurations = SpringFactoriesLoader.loadFactoryNames(_				getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())__		Assert.notEmpty(configurations,_				"No auto configuration classes found in META-INF/spring.factories. If you "_						+ "are using a custom packaging, make sure that file is correct.")__		return configurations__	};return,the,auto,configuration,class,names,that,should,be,considered,by,default,this,method,will,load,candidates,using,link,spring,factories,loader,with,link,get,spring,factories,loader,factory,class,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,a,list,of,candidate,configurations;protected,list,string,get,candidate,configurations,annotation,metadata,metadata,annotation,attributes,attributes,list,string,configurations,spring,factories,loader,load,factory,names,get,spring,factories,loader,factory,class,get,bean,class,loader,assert,not,empty,configurations,no,auto,configuration,classes,found,in,meta,inf,spring,factories,if,you,are,using,a,custom,packaging,make,sure,that,file,is,correct,return,configurations
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1507173536;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				"No auto-configuration attributes found. Is " + metadata.getClassName()_						+ " annotated with " + ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1514278423;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				"No auto-configuration attributes found. Is " + metadata.getClassName()_						+ " annotated with " + ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1515014644;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				"No auto-configuration attributes found. Is " + metadata.getClassName()_						+ " annotated with " + ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1515486892;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				"No auto-configuration attributes found. Is " + metadata.getClassName()_						+ " annotated with " + ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1519362690;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				"No auto-configuration attributes found. Is " + metadata.getClassName()_						+ " annotated with " + ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1521018142;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				"No auto-configuration attributes found. Is " + metadata.getClassName()_						+ " annotated with " + ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1521030870;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				"No auto-configuration attributes found. Is " + metadata.getClassName()_						+ " annotated with " + ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1522079995;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				() -> "No auto-configuration attributes found. Is "_						+ metadata.getClassName() + " annotated with "_						+ ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1522370495;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				() -> "No auto-configuration attributes found. Is "_						+ metadata.getClassName() + " annotated with "_						+ ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1525376698;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				() -> "No auto-configuration attributes found. Is "_						+ metadata.getClassName() + " annotated with "_						+ ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1532002090;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				() -> "No auto-configuration attributes found. Is "_						+ metadata.getClassName() + " annotated with "_						+ ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1532617589;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				() -> "No auto-configuration attributes found. Is "_						+ metadata.getClassName() + " annotated with "_						+ ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1532646217;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				() -> "No auto-configuration attributes found. Is "_						+ metadata.getClassName() + " annotated with "_						+ ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1532738143;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				() -> "No auto-configuration attributes found. Is "_						+ metadata.getClassName() + " annotated with "_						+ ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1533019713;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				() -> "No auto-configuration attributes found. Is "_						+ metadata.getClassName() + " annotated with "_						+ ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1533114559;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				() -> "No auto-configuration attributes found. Is "_						+ metadata.getClassName() + " annotated with "_						+ ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1533121940;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				() -> "No auto-configuration attributes found. Is "_						+ metadata.getClassName() + " annotated with "_						+ ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1533282038;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				() -> "No auto-configuration attributes found. Is "_						+ metadata.getClassName() + " annotated with "_						+ ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> protected AnnotationAttributes getAttributes(AnnotationMetadata metadata);1537798484;Return the appropriate {@link AnnotationAttributes} from the_{@link AnnotationMetadata}. By default this method will return attributes for_{@link #getAnnotationClass()}._@param metadata the annotation metadata_@return annotation attributes;protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {_		String name = getAnnotationClass().getName()__		AnnotationAttributes attributes = AnnotationAttributes_				.fromMap(metadata.getAnnotationAttributes(name, true))__		Assert.notNull(attributes,_				() -> "No auto-configuration attributes found. Is "_						+ metadata.getClassName() + " annotated with "_						+ ClassUtils.getShortName(name) + "?")__		return attributes__	};return,the,appropriate,link,annotation,attributes,from,the,link,annotation,metadata,by,default,this,method,will,return,attributes,for,link,get,annotation,class,param,metadata,the,annotation,metadata,return,annotation,attributes;protected,annotation,attributes,get,attributes,annotation,metadata,metadata,string,name,get,annotation,class,get,name,annotation,attributes,attributes,annotation,attributes,from,map,metadata,get,annotation,attributes,name,true,assert,not,null,attributes,no,auto,configuration,attributes,found,is,metadata,get,class,name,annotated,with,class,utils,get,short,name,name,return,attributes
AutoConfigurationImportSelector -> AutoConfigurationEntry -> AutoConfigurationEntry(Collection<String> configurations, 				Collection<String> exclusions);1532002090;Create an entry with the configurations that were contributed and their_exclusions._@param configurations the configurations that should be imported_@param exclusions the exclusions that were applied to the original list;AutoConfigurationEntry(Collection<String> configurations,_				Collection<String> exclusions) {_			this.configurations = new ArrayList<>(configurations)__			this.exclusions = new HashSet<>(exclusions)__		};create,an,entry,with,the,configurations,that,were,contributed,and,their,exclusions,param,configurations,the,configurations,that,should,be,imported,param,exclusions,the,exclusions,that,were,applied,to,the,original,list;auto,configuration,entry,collection,string,configurations,collection,string,exclusions,this,configurations,new,array,list,configurations,this,exclusions,new,hash,set,exclusions
AutoConfigurationImportSelector -> AutoConfigurationEntry -> AutoConfigurationEntry(Collection<String> configurations, 				Collection<String> exclusions);1532617589;Create an entry with the configurations that were contributed and their_exclusions._@param configurations the configurations that should be imported_@param exclusions the exclusions that were applied to the original list;AutoConfigurationEntry(Collection<String> configurations,_				Collection<String> exclusions) {_			this.configurations = new ArrayList<>(configurations)__			this.exclusions = new HashSet<>(exclusions)__		};create,an,entry,with,the,configurations,that,were,contributed,and,their,exclusions,param,configurations,the,configurations,that,should,be,imported,param,exclusions,the,exclusions,that,were,applied,to,the,original,list;auto,configuration,entry,collection,string,configurations,collection,string,exclusions,this,configurations,new,array,list,configurations,this,exclusions,new,hash,set,exclusions
AutoConfigurationImportSelector -> AutoConfigurationEntry -> AutoConfigurationEntry(Collection<String> configurations, 				Collection<String> exclusions);1532646217;Create an entry with the configurations that were contributed and their_exclusions._@param configurations the configurations that should be imported_@param exclusions the exclusions that were applied to the original list;AutoConfigurationEntry(Collection<String> configurations,_				Collection<String> exclusions) {_			this.configurations = new ArrayList<>(configurations)__			this.exclusions = new HashSet<>(exclusions)__		};create,an,entry,with,the,configurations,that,were,contributed,and,their,exclusions,param,configurations,the,configurations,that,should,be,imported,param,exclusions,the,exclusions,that,were,applied,to,the,original,list;auto,configuration,entry,collection,string,configurations,collection,string,exclusions,this,configurations,new,array,list,configurations,this,exclusions,new,hash,set,exclusions
AutoConfigurationImportSelector -> AutoConfigurationEntry -> AutoConfigurationEntry(Collection<String> configurations, 				Collection<String> exclusions);1532738143;Create an entry with the configurations that were contributed and their_exclusions._@param configurations the configurations that should be imported_@param exclusions the exclusions that were applied to the original list;AutoConfigurationEntry(Collection<String> configurations,_				Collection<String> exclusions) {_			this.configurations = new ArrayList<>(configurations)__			this.exclusions = new HashSet<>(exclusions)__		};create,an,entry,with,the,configurations,that,were,contributed,and,their,exclusions,param,configurations,the,configurations,that,should,be,imported,param,exclusions,the,exclusions,that,were,applied,to,the,original,list;auto,configuration,entry,collection,string,configurations,collection,string,exclusions,this,configurations,new,array,list,configurations,this,exclusions,new,hash,set,exclusions
AutoConfigurationImportSelector -> AutoConfigurationEntry -> AutoConfigurationEntry(Collection<String> configurations, 				Collection<String> exclusions);1533019713;Create an entry with the configurations that were contributed and their_exclusions._@param configurations the configurations that should be imported_@param exclusions the exclusions that were applied to the original list;AutoConfigurationEntry(Collection<String> configurations,_				Collection<String> exclusions) {_			this.configurations = new ArrayList<>(configurations)__			this.exclusions = new HashSet<>(exclusions)__		};create,an,entry,with,the,configurations,that,were,contributed,and,their,exclusions,param,configurations,the,configurations,that,should,be,imported,param,exclusions,the,exclusions,that,were,applied,to,the,original,list;auto,configuration,entry,collection,string,configurations,collection,string,exclusions,this,configurations,new,array,list,configurations,this,exclusions,new,hash,set,exclusions
AutoConfigurationImportSelector -> AutoConfigurationEntry -> AutoConfigurationEntry(Collection<String> configurations, 				Collection<String> exclusions);1533114559;Create an entry with the configurations that were contributed and their_exclusions._@param configurations the configurations that should be imported_@param exclusions the exclusions that were applied to the original list;AutoConfigurationEntry(Collection<String> configurations,_				Collection<String> exclusions) {_			this.configurations = new ArrayList<>(configurations)__			this.exclusions = new HashSet<>(exclusions)__		};create,an,entry,with,the,configurations,that,were,contributed,and,their,exclusions,param,configurations,the,configurations,that,should,be,imported,param,exclusions,the,exclusions,that,were,applied,to,the,original,list;auto,configuration,entry,collection,string,configurations,collection,string,exclusions,this,configurations,new,array,list,configurations,this,exclusions,new,hash,set,exclusions
AutoConfigurationImportSelector -> AutoConfigurationEntry -> AutoConfigurationEntry(Collection<String> configurations, 				Collection<String> exclusions);1533121940;Create an entry with the configurations that were contributed and their_exclusions._@param configurations the configurations that should be imported_@param exclusions the exclusions that were applied to the original list;AutoConfigurationEntry(Collection<String> configurations,_				Collection<String> exclusions) {_			this.configurations = new ArrayList<>(configurations)__			this.exclusions = new HashSet<>(exclusions)__		};create,an,entry,with,the,configurations,that,were,contributed,and,their,exclusions,param,configurations,the,configurations,that,should,be,imported,param,exclusions,the,exclusions,that,were,applied,to,the,original,list;auto,configuration,entry,collection,string,configurations,collection,string,exclusions,this,configurations,new,array,list,configurations,this,exclusions,new,hash,set,exclusions
AutoConfigurationImportSelector -> AutoConfigurationEntry -> AutoConfigurationEntry(Collection<String> configurations, 				Collection<String> exclusions);1533282038;Create an entry with the configurations that were contributed and their_exclusions._@param configurations the configurations that should be imported_@param exclusions the exclusions that were applied to the original list;AutoConfigurationEntry(Collection<String> configurations,_				Collection<String> exclusions) {_			this.configurations = new ArrayList<>(configurations)__			this.exclusions = new HashSet<>(exclusions)__		};create,an,entry,with,the,configurations,that,were,contributed,and,their,exclusions,param,configurations,the,configurations,that,should,be,imported,param,exclusions,the,exclusions,that,were,applied,to,the,original,list;auto,configuration,entry,collection,string,configurations,collection,string,exclusions,this,configurations,new,array,list,configurations,this,exclusions,new,hash,set,exclusions
AutoConfigurationImportSelector -> AutoConfigurationEntry -> AutoConfigurationEntry(Collection<String> configurations, 				Collection<String> exclusions);1537798484;Create an entry with the configurations that were contributed and their_exclusions._@param configurations the configurations that should be imported_@param exclusions the exclusions that were applied to the original list;AutoConfigurationEntry(Collection<String> configurations,_				Collection<String> exclusions) {_			this.configurations = new ArrayList<>(configurations)__			this.exclusions = new HashSet<>(exclusions)__		};create,an,entry,with,the,configurations,that,were,contributed,and,their,exclusions,param,configurations,the,configurations,that,should,be,imported,param,exclusions,the,exclusions,that,were,applied,to,the,original,list;auto,configuration,entry,collection,string,configurations,collection,string,exclusions,this,configurations,new,array,list,configurations,this,exclusions,new,hash,set,exclusions
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1507173536;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1514278423;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1515014644;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1515486892;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1519362690;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1521018142;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1521030870;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1522079995;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1522370495;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1525376698;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1532002090;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1532617589;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1532646217;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1532738143;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1533019713;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1533114559;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1533121940;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1533282038;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getSpringFactoriesLoaderFactoryClass();1537798484;Return the class used by {@link SpringFactoriesLoader} to load configuration_candidates._@return the factory class;protected Class<?> getSpringFactoriesLoaderFactoryClass() {_		return EnableAutoConfiguration.class__	};return,the,class,used,by,link,spring,factories,loader,to,load,configuration,candidates,return,the,factory,class;protected,class,get,spring,factories,loader,factory,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1507173536;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1514278423;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1515014644;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1515486892;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1519362690;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1521018142;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1521030870;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1522079995;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1522370495;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1525376698;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1532002090;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1532617589;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1532646217;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1532738143;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1533019713;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1533114559;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1533121940;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1533282038;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected void handleInvalidExcludes(List<String> invalidExcludes);1537798484;Handle any invalid excludes that have been specified._@param invalidExcludes the list of invalid excludes (will always have at least one_element);protected void handleInvalidExcludes(List<String> invalidExcludes) {_		StringBuilder message = new StringBuilder()__		for (String exclude : invalidExcludes) {_			message.append("\t- ").append(exclude).append(String.format("%n"))__		}_		throw new IllegalStateException(String_				.format("The following classes could not be excluded because they are"_						+ " not auto-configuration classes:%n%s", message))__	};handle,any,invalid,excludes,that,have,been,specified,param,invalid,excludes,the,list,of,invalid,excludes,will,always,have,at,least,one,element;protected,void,handle,invalid,excludes,list,string,invalid,excludes,string,builder,message,new,string,builder,for,string,exclude,invalid,excludes,message,append,t,append,exclude,append,string,format,n,throw,new,illegal,state,exception,string,format,the,following,classes,could,not,be,excluded,because,they,are,not,auto,configuration,classes,n,s,message
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1507173536;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1514278423;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1515014644;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1515486892;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1519362690;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1521018142;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1521030870;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1522079995;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1522370495;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1525376698;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1532002090;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1532617589;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1532646217;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1532738143;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1533019713;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1533114559;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1533121940;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1533282038;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Class<?> getAnnotationClass();1537798484;Return the source annotation class used by the selector._@return the annotation class;protected Class<?> getAnnotationClass() {_		return EnableAutoConfiguration.class__	};return,the,source,annotation,class,used,by,the,selector,return,the,annotation,class;protected,class,get,annotation,class,return,enable,auto,configuration,class
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1507173536;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1514278423;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1515014644;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1515486892;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1519362690;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1521018142;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1521030870;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1522079995;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1522370495;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1525376698;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1532002090;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1532617589;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1532646217;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1532738143;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1533019713;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1533114559;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1533121940;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1533282038;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected Set<String> getExclusions(AnnotationMetadata metadata, 			AnnotationAttributes attributes);1537798484;Return any exclusions that limit the candidate configurations._@param metadata the source metadata_@param attributes the {@link #getAttributes(AnnotationMetadata) annotation_attributes}_@return exclusions or an empty set;protected Set<String> getExclusions(AnnotationMetadata metadata,_			AnnotationAttributes attributes) {_		Set<String> excluded = new LinkedHashSet<>()__		excluded.addAll(asList(attributes, "exclude"))__		excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName")))__		excluded.addAll(getExcludeAutoConfigurationsProperty())__		return excluded__	};return,any,exclusions,that,limit,the,candidate,configurations,param,metadata,the,source,metadata,param,attributes,the,link,get,attributes,annotation,metadata,annotation,attributes,return,exclusions,or,an,empty,set;protected,set,string,get,exclusions,annotation,metadata,metadata,annotation,attributes,attributes,set,string,excluded,new,linked,hash,set,excluded,add,all,as,list,attributes,exclude,excluded,add,all,arrays,as,list,attributes,get,string,array,exclude,name,excluded,add,all,get,exclude,auto,configurations,property,return,excluded
AutoConfigurationImportSelector -> protected AutoConfigurationEntry getAutoConfigurationEntry( 			AutoConfigurationMetadata autoConfigurationMetadata, 			AnnotationMetadata annotationMetadata);1532002090;Return the {@link AutoConfigurationEntry} based on the {@link AnnotationMetadata}_of the importing @{@link Configuration} class._@param autoConfigurationMetadata the auto-configuration metadata_@param annotationMetadata the annotation metadata of the configuration class_@return the auto-configurations that should be imported;protected AutoConfigurationEntry getAutoConfigurationEntry(_			AutoConfigurationMetadata autoConfigurationMetadata,_			AnnotationMetadata annotationMetadata) {_		if (!isEnabled(annotationMetadata)) {_			return EMPTY_ENTRY__		}_		AnnotationAttributes attributes = getAttributes(annotationMetadata)__		List<String> configurations = getCandidateConfigurations(annotationMetadata,_				attributes)__		configurations = removeDuplicates(configurations)__		Set<String> exclusions = getExclusions(annotationMetadata, attributes)__		checkExcludedClasses(configurations, exclusions)__		configurations.removeAll(exclusions)__		configurations = filter(configurations, autoConfigurationMetadata)__		fireAutoConfigurationImportEvents(configurations, exclusions)__		return new AutoConfigurationEntry(configurations, exclusions)__	};return,the,link,auto,configuration,entry,based,on,the,link,annotation,metadata,of,the,importing,link,configuration,class,param,auto,configuration,metadata,the,auto,configuration,metadata,param,annotation,metadata,the,annotation,metadata,of,the,configuration,class,return,the,auto,configurations,that,should,be,imported;protected,auto,configuration,entry,get,auto,configuration,entry,auto,configuration,metadata,auto,configuration,metadata,annotation,metadata,annotation,metadata,if,is,enabled,annotation,metadata,return,annotation,attributes,attributes,get,attributes,annotation,metadata,list,string,configurations,get,candidate,configurations,annotation,metadata,attributes,configurations,remove,duplicates,configurations,set,string,exclusions,get,exclusions,annotation,metadata,attributes,check,excluded,classes,configurations,exclusions,configurations,remove,all,exclusions,configurations,filter,configurations,auto,configuration,metadata,fire,auto,configuration,import,events,configurations,exclusions,return,new,auto,configuration,entry,configurations,exclusions
AutoConfigurationImportSelector -> protected AutoConfigurationEntry getAutoConfigurationEntry( 			AutoConfigurationMetadata autoConfigurationMetadata, 			AnnotationMetadata annotationMetadata);1532617589;Return the {@link AutoConfigurationEntry} based on the {@link AnnotationMetadata}_of the importing @{@link Configuration} class._@param autoConfigurationMetadata the auto-configuration metadata_@param annotationMetadata the annotation metadata of the configuration class_@return the auto-configurations that should be imported;protected AutoConfigurationEntry getAutoConfigurationEntry(_			AutoConfigurationMetadata autoConfigurationMetadata,_			AnnotationMetadata annotationMetadata) {_		if (!isEnabled(annotationMetadata)) {_			return EMPTY_ENTRY__		}_		AnnotationAttributes attributes = getAttributes(annotationMetadata)__		List<String> configurations = getCandidateConfigurations(annotationMetadata,_				attributes)__		configurations = removeDuplicates(configurations)__		Set<String> exclusions = getExclusions(annotationMetadata, attributes)__		checkExcludedClasses(configurations, exclusions)__		configurations.removeAll(exclusions)__		configurations = filter(configurations, autoConfigurationMetadata)__		fireAutoConfigurationImportEvents(configurations, exclusions)__		return new AutoConfigurationEntry(configurations, exclusions)__	};return,the,link,auto,configuration,entry,based,on,the,link,annotation,metadata,of,the,importing,link,configuration,class,param,auto,configuration,metadata,the,auto,configuration,metadata,param,annotation,metadata,the,annotation,metadata,of,the,configuration,class,return,the,auto,configurations,that,should,be,imported;protected,auto,configuration,entry,get,auto,configuration,entry,auto,configuration,metadata,auto,configuration,metadata,annotation,metadata,annotation,metadata,if,is,enabled,annotation,metadata,return,annotation,attributes,attributes,get,attributes,annotation,metadata,list,string,configurations,get,candidate,configurations,annotation,metadata,attributes,configurations,remove,duplicates,configurations,set,string,exclusions,get,exclusions,annotation,metadata,attributes,check,excluded,classes,configurations,exclusions,configurations,remove,all,exclusions,configurations,filter,configurations,auto,configuration,metadata,fire,auto,configuration,import,events,configurations,exclusions,return,new,auto,configuration,entry,configurations,exclusions
AutoConfigurationImportSelector -> protected AutoConfigurationEntry getAutoConfigurationEntry( 			AutoConfigurationMetadata autoConfigurationMetadata, 			AnnotationMetadata annotationMetadata);1532646217;Return the {@link AutoConfigurationEntry} based on the {@link AnnotationMetadata}_of the importing @{@link Configuration} class._@param autoConfigurationMetadata the auto-configuration metadata_@param annotationMetadata the annotation metadata of the configuration class_@return the auto-configurations that should be imported;protected AutoConfigurationEntry getAutoConfigurationEntry(_			AutoConfigurationMetadata autoConfigurationMetadata,_			AnnotationMetadata annotationMetadata) {_		if (!isEnabled(annotationMetadata)) {_			return EMPTY_ENTRY__		}_		AnnotationAttributes attributes = getAttributes(annotationMetadata)__		List<String> configurations = getCandidateConfigurations(annotationMetadata,_				attributes)__		configurations = removeDuplicates(configurations)__		Set<String> exclusions = getExclusions(annotationMetadata, attributes)__		checkExcludedClasses(configurations, exclusions)__		configurations.removeAll(exclusions)__		configurations = filter(configurations, autoConfigurationMetadata)__		fireAutoConfigurationImportEvents(configurations, exclusions)__		return new AutoConfigurationEntry(configurations, exclusions)__	};return,the,link,auto,configuration,entry,based,on,the,link,annotation,metadata,of,the,importing,link,configuration,class,param,auto,configuration,metadata,the,auto,configuration,metadata,param,annotation,metadata,the,annotation,metadata,of,the,configuration,class,return,the,auto,configurations,that,should,be,imported;protected,auto,configuration,entry,get,auto,configuration,entry,auto,configuration,metadata,auto,configuration,metadata,annotation,metadata,annotation,metadata,if,is,enabled,annotation,metadata,return,annotation,attributes,attributes,get,attributes,annotation,metadata,list,string,configurations,get,candidate,configurations,annotation,metadata,attributes,configurations,remove,duplicates,configurations,set,string,exclusions,get,exclusions,annotation,metadata,attributes,check,excluded,classes,configurations,exclusions,configurations,remove,all,exclusions,configurations,filter,configurations,auto,configuration,metadata,fire,auto,configuration,import,events,configurations,exclusions,return,new,auto,configuration,entry,configurations,exclusions
AutoConfigurationImportSelector -> protected AutoConfigurationEntry getAutoConfigurationEntry( 			AutoConfigurationMetadata autoConfigurationMetadata, 			AnnotationMetadata annotationMetadata);1532738143;Return the {@link AutoConfigurationEntry} based on the {@link AnnotationMetadata}_of the importing @{@link Configuration} class._@param autoConfigurationMetadata the auto-configuration metadata_@param annotationMetadata the annotation metadata of the configuration class_@return the auto-configurations that should be imported;protected AutoConfigurationEntry getAutoConfigurationEntry(_			AutoConfigurationMetadata autoConfigurationMetadata,_			AnnotationMetadata annotationMetadata) {_		if (!isEnabled(annotationMetadata)) {_			return EMPTY_ENTRY__		}_		AnnotationAttributes attributes = getAttributes(annotationMetadata)__		List<String> configurations = getCandidateConfigurations(annotationMetadata,_				attributes)__		configurations = removeDuplicates(configurations)__		Set<String> exclusions = getExclusions(annotationMetadata, attributes)__		checkExcludedClasses(configurations, exclusions)__		configurations.removeAll(exclusions)__		configurations = filter(configurations, autoConfigurationMetadata)__		fireAutoConfigurationImportEvents(configurations, exclusions)__		return new AutoConfigurationEntry(configurations, exclusions)__	};return,the,link,auto,configuration,entry,based,on,the,link,annotation,metadata,of,the,importing,link,configuration,class,param,auto,configuration,metadata,the,auto,configuration,metadata,param,annotation,metadata,the,annotation,metadata,of,the,configuration,class,return,the,auto,configurations,that,should,be,imported;protected,auto,configuration,entry,get,auto,configuration,entry,auto,configuration,metadata,auto,configuration,metadata,annotation,metadata,annotation,metadata,if,is,enabled,annotation,metadata,return,annotation,attributes,attributes,get,attributes,annotation,metadata,list,string,configurations,get,candidate,configurations,annotation,metadata,attributes,configurations,remove,duplicates,configurations,set,string,exclusions,get,exclusions,annotation,metadata,attributes,check,excluded,classes,configurations,exclusions,configurations,remove,all,exclusions,configurations,filter,configurations,auto,configuration,metadata,fire,auto,configuration,import,events,configurations,exclusions,return,new,auto,configuration,entry,configurations,exclusions
AutoConfigurationImportSelector -> protected AutoConfigurationEntry getAutoConfigurationEntry( 			AutoConfigurationMetadata autoConfigurationMetadata, 			AnnotationMetadata annotationMetadata);1533019713;Return the {@link AutoConfigurationEntry} based on the {@link AnnotationMetadata}_of the importing @{@link Configuration} class._@param autoConfigurationMetadata the auto-configuration metadata_@param annotationMetadata the annotation metadata of the configuration class_@return the auto-configurations that should be imported;protected AutoConfigurationEntry getAutoConfigurationEntry(_			AutoConfigurationMetadata autoConfigurationMetadata,_			AnnotationMetadata annotationMetadata) {_		if (!isEnabled(annotationMetadata)) {_			return EMPTY_ENTRY__		}_		AnnotationAttributes attributes = getAttributes(annotationMetadata)__		List<String> configurations = getCandidateConfigurations(annotationMetadata,_				attributes)__		configurations = removeDuplicates(configurations)__		Set<String> exclusions = getExclusions(annotationMetadata, attributes)__		checkExcludedClasses(configurations, exclusions)__		configurations.removeAll(exclusions)__		configurations = filter(configurations, autoConfigurationMetadata)__		fireAutoConfigurationImportEvents(configurations, exclusions)__		return new AutoConfigurationEntry(configurations, exclusions)__	};return,the,link,auto,configuration,entry,based,on,the,link,annotation,metadata,of,the,importing,link,configuration,class,param,auto,configuration,metadata,the,auto,configuration,metadata,param,annotation,metadata,the,annotation,metadata,of,the,configuration,class,return,the,auto,configurations,that,should,be,imported;protected,auto,configuration,entry,get,auto,configuration,entry,auto,configuration,metadata,auto,configuration,metadata,annotation,metadata,annotation,metadata,if,is,enabled,annotation,metadata,return,annotation,attributes,attributes,get,attributes,annotation,metadata,list,string,configurations,get,candidate,configurations,annotation,metadata,attributes,configurations,remove,duplicates,configurations,set,string,exclusions,get,exclusions,annotation,metadata,attributes,check,excluded,classes,configurations,exclusions,configurations,remove,all,exclusions,configurations,filter,configurations,auto,configuration,metadata,fire,auto,configuration,import,events,configurations,exclusions,return,new,auto,configuration,entry,configurations,exclusions
AutoConfigurationImportSelector -> protected AutoConfigurationEntry getAutoConfigurationEntry( 			AutoConfigurationMetadata autoConfigurationMetadata, 			AnnotationMetadata annotationMetadata);1533114559;Return the {@link AutoConfigurationEntry} based on the {@link AnnotationMetadata}_of the importing @{@link Configuration} class._@param autoConfigurationMetadata the auto-configuration metadata_@param annotationMetadata the annotation metadata of the configuration class_@return the auto-configurations that should be imported;protected AutoConfigurationEntry getAutoConfigurationEntry(_			AutoConfigurationMetadata autoConfigurationMetadata,_			AnnotationMetadata annotationMetadata) {_		if (!isEnabled(annotationMetadata)) {_			return EMPTY_ENTRY__		}_		AnnotationAttributes attributes = getAttributes(annotationMetadata)__		List<String> configurations = getCandidateConfigurations(annotationMetadata,_				attributes)__		configurations = removeDuplicates(configurations)__		Set<String> exclusions = getExclusions(annotationMetadata, attributes)__		checkExcludedClasses(configurations, exclusions)__		configurations.removeAll(exclusions)__		configurations = filter(configurations, autoConfigurationMetadata)__		fireAutoConfigurationImportEvents(configurations, exclusions)__		return new AutoConfigurationEntry(configurations, exclusions)__	};return,the,link,auto,configuration,entry,based,on,the,link,annotation,metadata,of,the,importing,link,configuration,class,param,auto,configuration,metadata,the,auto,configuration,metadata,param,annotation,metadata,the,annotation,metadata,of,the,configuration,class,return,the,auto,configurations,that,should,be,imported;protected,auto,configuration,entry,get,auto,configuration,entry,auto,configuration,metadata,auto,configuration,metadata,annotation,metadata,annotation,metadata,if,is,enabled,annotation,metadata,return,annotation,attributes,attributes,get,attributes,annotation,metadata,list,string,configurations,get,candidate,configurations,annotation,metadata,attributes,configurations,remove,duplicates,configurations,set,string,exclusions,get,exclusions,annotation,metadata,attributes,check,excluded,classes,configurations,exclusions,configurations,remove,all,exclusions,configurations,filter,configurations,auto,configuration,metadata,fire,auto,configuration,import,events,configurations,exclusions,return,new,auto,configuration,entry,configurations,exclusions
AutoConfigurationImportSelector -> protected AutoConfigurationEntry getAutoConfigurationEntry( 			AutoConfigurationMetadata autoConfigurationMetadata, 			AnnotationMetadata annotationMetadata);1533121940;Return the {@link AutoConfigurationEntry} based on the {@link AnnotationMetadata}_of the importing @{@link Configuration} class._@param autoConfigurationMetadata the auto-configuration metadata_@param annotationMetadata the annotation metadata of the configuration class_@return the auto-configurations that should be imported;protected AutoConfigurationEntry getAutoConfigurationEntry(_			AutoConfigurationMetadata autoConfigurationMetadata,_			AnnotationMetadata annotationMetadata) {_		if (!isEnabled(annotationMetadata)) {_			return EMPTY_ENTRY__		}_		AnnotationAttributes attributes = getAttributes(annotationMetadata)__		List<String> configurations = getCandidateConfigurations(annotationMetadata,_				attributes)__		configurations = removeDuplicates(configurations)__		Set<String> exclusions = getExclusions(annotationMetadata, attributes)__		checkExcludedClasses(configurations, exclusions)__		configurations.removeAll(exclusions)__		configurations = filter(configurations, autoConfigurationMetadata)__		fireAutoConfigurationImportEvents(configurations, exclusions)__		return new AutoConfigurationEntry(configurations, exclusions)__	};return,the,link,auto,configuration,entry,based,on,the,link,annotation,metadata,of,the,importing,link,configuration,class,param,auto,configuration,metadata,the,auto,configuration,metadata,param,annotation,metadata,the,annotation,metadata,of,the,configuration,class,return,the,auto,configurations,that,should,be,imported;protected,auto,configuration,entry,get,auto,configuration,entry,auto,configuration,metadata,auto,configuration,metadata,annotation,metadata,annotation,metadata,if,is,enabled,annotation,metadata,return,annotation,attributes,attributes,get,attributes,annotation,metadata,list,string,configurations,get,candidate,configurations,annotation,metadata,attributes,configurations,remove,duplicates,configurations,set,string,exclusions,get,exclusions,annotation,metadata,attributes,check,excluded,classes,configurations,exclusions,configurations,remove,all,exclusions,configurations,filter,configurations,auto,configuration,metadata,fire,auto,configuration,import,events,configurations,exclusions,return,new,auto,configuration,entry,configurations,exclusions
AutoConfigurationImportSelector -> protected AutoConfigurationEntry getAutoConfigurationEntry( 			AutoConfigurationMetadata autoConfigurationMetadata, 			AnnotationMetadata annotationMetadata);1533282038;Return the {@link AutoConfigurationEntry} based on the {@link AnnotationMetadata}_of the importing {@link Configuration @Configuration} class._@param autoConfigurationMetadata the auto-configuration metadata_@param annotationMetadata the annotation metadata of the configuration class_@return the auto-configurations that should be imported;protected AutoConfigurationEntry getAutoConfigurationEntry(_			AutoConfigurationMetadata autoConfigurationMetadata,_			AnnotationMetadata annotationMetadata) {_		if (!isEnabled(annotationMetadata)) {_			return EMPTY_ENTRY__		}_		AnnotationAttributes attributes = getAttributes(annotationMetadata)__		List<String> configurations = getCandidateConfigurations(annotationMetadata,_				attributes)__		configurations = removeDuplicates(configurations)__		Set<String> exclusions = getExclusions(annotationMetadata, attributes)__		checkExcludedClasses(configurations, exclusions)__		configurations.removeAll(exclusions)__		configurations = filter(configurations, autoConfigurationMetadata)__		fireAutoConfigurationImportEvents(configurations, exclusions)__		return new AutoConfigurationEntry(configurations, exclusions)__	};return,the,link,auto,configuration,entry,based,on,the,link,annotation,metadata,of,the,importing,link,configuration,configuration,class,param,auto,configuration,metadata,the,auto,configuration,metadata,param,annotation,metadata,the,annotation,metadata,of,the,configuration,class,return,the,auto,configurations,that,should,be,imported;protected,auto,configuration,entry,get,auto,configuration,entry,auto,configuration,metadata,auto,configuration,metadata,annotation,metadata,annotation,metadata,if,is,enabled,annotation,metadata,return,annotation,attributes,attributes,get,attributes,annotation,metadata,list,string,configurations,get,candidate,configurations,annotation,metadata,attributes,configurations,remove,duplicates,configurations,set,string,exclusions,get,exclusions,annotation,metadata,attributes,check,excluded,classes,configurations,exclusions,configurations,remove,all,exclusions,configurations,filter,configurations,auto,configuration,metadata,fire,auto,configuration,import,events,configurations,exclusions,return,new,auto,configuration,entry,configurations,exclusions
AutoConfigurationImportSelector -> protected AutoConfigurationEntry getAutoConfigurationEntry( 			AutoConfigurationMetadata autoConfigurationMetadata, 			AnnotationMetadata annotationMetadata);1537798484;Return the {@link AutoConfigurationEntry} based on the {@link AnnotationMetadata}_of the importing {@link Configuration @Configuration} class._@param autoConfigurationMetadata the auto-configuration metadata_@param annotationMetadata the annotation metadata of the configuration class_@return the auto-configurations that should be imported;protected AutoConfigurationEntry getAutoConfigurationEntry(_			AutoConfigurationMetadata autoConfigurationMetadata,_			AnnotationMetadata annotationMetadata) {_		if (!isEnabled(annotationMetadata)) {_			return EMPTY_ENTRY__		}_		AnnotationAttributes attributes = getAttributes(annotationMetadata)__		List<String> configurations = getCandidateConfigurations(annotationMetadata,_				attributes)__		configurations = removeDuplicates(configurations)__		Set<String> exclusions = getExclusions(annotationMetadata, attributes)__		checkExcludedClasses(configurations, exclusions)__		configurations.removeAll(exclusions)__		configurations = filter(configurations, autoConfigurationMetadata)__		fireAutoConfigurationImportEvents(configurations, exclusions)__		return new AutoConfigurationEntry(configurations, exclusions)__	};return,the,link,auto,configuration,entry,based,on,the,link,annotation,metadata,of,the,importing,link,configuration,configuration,class,param,auto,configuration,metadata,the,auto,configuration,metadata,param,annotation,metadata,the,annotation,metadata,of,the,configuration,class,return,the,auto,configurations,that,should,be,imported;protected,auto,configuration,entry,get,auto,configuration,entry,auto,configuration,metadata,auto,configuration,metadata,annotation,metadata,annotation,metadata,if,is,enabled,annotation,metadata,return,annotation,attributes,attributes,get,attributes,annotation,metadata,list,string,configurations,get,candidate,configurations,annotation,metadata,attributes,configurations,remove,duplicates,configurations,set,string,exclusions,get,exclusions,annotation,metadata,attributes,check,excluded,classes,configurations,exclusions,configurations,remove,all,exclusions,configurations,filter,configurations,auto,configuration,metadata,fire,auto,configuration,import,events,configurations,exclusions,return,new,auto,configuration,entry,configurations,exclusions
