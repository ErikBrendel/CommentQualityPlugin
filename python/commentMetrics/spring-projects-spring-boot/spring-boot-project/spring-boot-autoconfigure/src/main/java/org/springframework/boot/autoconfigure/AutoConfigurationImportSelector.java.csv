commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public String[] selectImports(AnnotationMetadata annotationMetadata) {     if (!isEnabled(annotationMetadata)) {         return NO_IMPORTS.     }     AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader).     AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata).     return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations()). }
true;protected;2;17;/**  * Return the {@link AutoConfigurationEntry} based on the {@link AnnotationMetadata}  * of the importing {@link Configuration @Configuration} class.  * @param autoConfigurationMetadata the auto-configuration metadata  * @param annotationMetadata the annotation metadata of the configuration class  * @return the auto-configurations that should be imported  */ ;/**  * Return the {@link AutoConfigurationEntry} based on the {@link AnnotationMetadata}  * of the importing {@link Configuration @Configuration} class.  * @param autoConfigurationMetadata the auto-configuration metadata  * @param annotationMetadata the annotation metadata of the configuration class  * @return the auto-configurations that should be imported  */ protected AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) {     if (!isEnabled(annotationMetadata)) {         return EMPTY_ENTRY.     }     AnnotationAttributes attributes = getAttributes(annotationMetadata).     List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes).     configurations = removeDuplicates(configurations).     Set<String> exclusions = getExclusions(annotationMetadata, attributes).     checkExcludedClasses(configurations, exclusions).     configurations.removeAll(exclusions).     configurations = filter(configurations, autoConfigurationMetadata).     fireAutoConfigurationImportEvents(configurations, exclusions).     return new AutoConfigurationEntry(configurations, exclusions). }
false;public;0;4;;@Override public Class<? extends Group> getImportGroup() {     return AutoConfigurationGroup.class. }
false;protected;1;8;;protected boolean isEnabled(AnnotationMetadata metadata) {     if (getClass() == AutoConfigurationImportSelector.class) {         return getEnvironment().getProperty(EnableAutoConfiguration.ENABLED_OVERRIDE_PROPERTY, Boolean.class, true).     }     return true. }
true;protected;1;10;/**  * Return the appropriate {@link AnnotationAttributes} from the  * {@link AnnotationMetadata}. By default this method will return attributes for  * {@link #getAnnotationClass()}.  * @param metadata the annotation metadata  * @return annotation attributes  */ ;/**  * Return the appropriate {@link AnnotationAttributes} from the  * {@link AnnotationMetadata}. By default this method will return attributes for  * {@link #getAnnotationClass()}.  * @param metadata the annotation metadata  * @return annotation attributes  */ protected AnnotationAttributes getAttributes(AnnotationMetadata metadata) {     String name = getAnnotationClass().getName().     AnnotationAttributes attributes = AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(name, true)).     Assert.notNull(attributes, () -> "No auto-configuration attributes found. Is " + metadata.getClassName() + " annotated with " + ClassUtils.getShortName(name) + "?").     return attributes. }
true;protected;0;3;/**  * Return the source annotation class used by the selector.  * @return the annotation class  */ ;/**  * Return the source annotation class used by the selector.  * @return the annotation class  */ protected Class<?> getAnnotationClass() {     return EnableAutoConfiguration.class. }
true;protected;2;9;/**  * Return the auto-configuration class names that should be considered. By default  * this method will load candidates using {@link SpringFactoriesLoader} with  * {@link #getSpringFactoriesLoaderFactoryClass()}.  * @param metadata the source metadata  * @param attributes the {@link #getAttributes(AnnotationMetadata) annotation  * attributes}  * @return a list of candidate configurations  */ ;/**  * Return the auto-configuration class names that should be considered. By default  * this method will load candidates using {@link SpringFactoriesLoader} with  * {@link #getSpringFactoriesLoaderFactoryClass()}.  * @param metadata the source metadata  * @param attributes the {@link #getAttributes(AnnotationMetadata) annotation  * attributes}  * @return a list of candidate configurations  */ protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {     List<String> configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()).     Assert.notEmpty(configurations, "No auto configuration classes found in META-INF/spring.factories. If you " + "are using a custom packaging, make sure that file is correct.").     return configurations. }
true;protected;0;3;/**  * Return the class used by {@link SpringFactoriesLoader} to load configuration  * candidates.  * @return the factory class  */ ;/**  * Return the class used by {@link SpringFactoriesLoader} to load configuration  * candidates.  * @return the factory class  */ protected Class<?> getSpringFactoriesLoaderFactoryClass() {     return EnableAutoConfiguration.class. }
false;private;2;13;;private void checkExcludedClasses(List<String> configurations, Set<String> exclusions) {     List<String> invalidExcludes = new ArrayList<>(exclusions.size()).     for (String exclusion : exclusions) {         if (ClassUtils.isPresent(exclusion, getClass().getClassLoader()) && !configurations.contains(exclusion)) {             invalidExcludes.add(exclusion).         }     }     if (!invalidExcludes.isEmpty()) {         handleInvalidExcludes(invalidExcludes).     } }
true;protected;1;9;/**  * Handle any invalid excludes that have been specified.  * @param invalidExcludes the list of invalid excludes (will always have at least one  * element)  */ ;/**  * Handle any invalid excludes that have been specified.  * @param invalidExcludes the list of invalid excludes (will always have at least one  * element)  */ protected void handleInvalidExcludes(List<String> invalidExcludes) {     StringBuilder message = new StringBuilder().     for (String exclude : invalidExcludes) {         message.append("\t- ").append(exclude).append(String.format("%n")).     }     throw new IllegalStateException(String.format("The following classes could not be excluded because they are" + " not auto-configuration classes:%n%s", message)). }
true;protected;2;8;/**  * Return any exclusions that limit the candidate configurations.  * @param metadata the source metadata  * @param attributes the {@link #getAttributes(AnnotationMetadata) annotation  * attributes}  * @return exclusions or an empty set  */ ;/**  * Return any exclusions that limit the candidate configurations.  * @param metadata the source metadata  * @param attributes the {@link #getAttributes(AnnotationMetadata) annotation  * attributes}  * @return exclusions or an empty set  */ protected Set<String> getExclusions(AnnotationMetadata metadata, AnnotationAttributes attributes) {     Set<String> excluded = new LinkedHashSet<>().     excluded.addAll(asList(attributes, "exclude")).     excluded.addAll(Arrays.asList(attributes.getStringArray("excludeName"))).     excluded.addAll(getExcludeAutoConfigurationsProperty()).     return excluded. }
false;private;0;10;;private List<String> getExcludeAutoConfigurationsProperty() {     if (getEnvironment() instanceof ConfigurableEnvironment) {         Binder binder = Binder.get(getEnvironment()).         return binder.bind(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class).map(Arrays::asList).orElse(Collections.emptyList()).     }     String[] excludes = getEnvironment().getProperty(PROPERTY_NAME_AUTOCONFIGURE_EXCLUDE, String[].class).     return (excludes != null) ? Arrays.asList(excludes) : Collections.emptyList(). }
false;private;2;34;;private List<String> filter(List<String> configurations, AutoConfigurationMetadata autoConfigurationMetadata) {     long startTime = System.nanoTime().     String[] candidates = StringUtils.toStringArray(configurations).     boolean[] skip = new boolean[candidates.length].     boolean skipped = false.     for (AutoConfigurationImportFilter filter : getAutoConfigurationImportFilters()) {         invokeAwareMethods(filter).         boolean[] match = filter.match(candidates, autoConfigurationMetadata).         for (int i = 0. i < match.length. i++) {             if (!match[i]) {                 skip[i] = true.                 candidates[i] = null.                 skipped = true.             }         }     }     if (!skipped) {         return configurations.     }     List<String> result = new ArrayList<>(candidates.length).     for (int i = 0. i < candidates.length. i++) {         if (!skip[i]) {             result.add(candidates[i]).         }     }     if (logger.isTraceEnabled()) {         int numberFiltered = configurations.size() - result.size().         logger.trace("Filtered " + numberFiltered + " auto configuration class in " + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime) + " ms").     }     return new ArrayList<>(result). }
false;protected;0;4;;protected List<AutoConfigurationImportFilter> getAutoConfigurationImportFilters() {     return SpringFactoriesLoader.loadFactories(AutoConfigurationImportFilter.class, this.beanClassLoader). }
false;protected,final;1;3;;protected final <T> List<T> removeDuplicates(List<T> list) {     return new ArrayList<>(new LinkedHashSet<>(list)). }
false;protected,final;2;4;;protected final List<String> asList(AnnotationAttributes attributes, String name) {     String[] value = attributes.getStringArray(name).     return Arrays.asList((value != null) ? value : new String[0]). }
false;private;2;12;;private void fireAutoConfigurationImportEvents(List<String> configurations, Set<String> exclusions) {     List<AutoConfigurationImportListener> listeners = getAutoConfigurationImportListeners().     if (!listeners.isEmpty()) {         AutoConfigurationImportEvent event = new AutoConfigurationImportEvent(this, configurations, exclusions).         for (AutoConfigurationImportListener listener : listeners) {             invokeAwareMethods(listener).             listener.onAutoConfigurationImportEvent(event).         }     } }
false;protected;0;4;;protected List<AutoConfigurationImportListener> getAutoConfigurationImportListeners() {     return SpringFactoriesLoader.loadFactories(AutoConfigurationImportListener.class, this.beanClassLoader). }
false;private;1;17;;private void invokeAwareMethods(Object instance) {     if (instance instanceof Aware) {         if (instance instanceof BeanClassLoaderAware) {             ((BeanClassLoaderAware) instance).setBeanClassLoader(this.beanClassLoader).         }         if (instance instanceof BeanFactoryAware) {             ((BeanFactoryAware) instance).setBeanFactory(this.beanFactory).         }         if (instance instanceof EnvironmentAware) {             ((EnvironmentAware) instance).setEnvironment(this.environment).         }         if (instance instanceof ResourceLoaderAware) {             ((ResourceLoaderAware) instance).setResourceLoader(this.resourceLoader).         }     } }
false;public;1;5;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     Assert.isInstanceOf(ConfigurableListableBeanFactory.class, beanFactory).     this.beanFactory = (ConfigurableListableBeanFactory) beanFactory. }
false;protected,final;0;3;;protected final ConfigurableListableBeanFactory getBeanFactory() {     return this.beanFactory. }
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.beanClassLoader = classLoader. }
false;protected;0;3;;protected ClassLoader getBeanClassLoader() {     return this.beanClassLoader. }
false;public;1;4;;@Override public void setEnvironment(Environment environment) {     this.environment = environment. }
false;protected,final;0;3;;protected final Environment getEnvironment() {     return this.environment. }
false;public;1;4;;@Override public void setResourceLoader(ResourceLoader resourceLoader) {     this.resourceLoader = resourceLoader. }
false;protected,final;0;3;;protected final ResourceLoader getResourceLoader() {     return this.resourceLoader. }
false;public;0;4;;@Override public int getOrder() {     return Ordered.LOWEST_PRECEDENCE - 1. }
false;public;1;4;;@Override public void setBeanClassLoader(ClassLoader classLoader) {     this.beanClassLoader = classLoader. }
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) {     this.beanFactory = beanFactory. }
false;public;1;4;;@Override public void setResourceLoader(ResourceLoader resourceLoader) {     this.resourceLoader = resourceLoader. }
false;public;2;16;;@Override public void process(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector) {     Assert.state(deferredImportSelector instanceof AutoConfigurationImportSelector, () -> String.format("Only %s implementations are supported, got %s", AutoConfigurationImportSelector.class.getSimpleName(), deferredImportSelector.getClass().getName())).     AutoConfigurationEntry autoConfigurationEntry = ((AutoConfigurationImportSelector) deferredImportSelector).getAutoConfigurationEntry(getAutoConfigurationMetadata(), annotationMetadata).     this.autoConfigurationEntries.add(autoConfigurationEntry).     for (String importClassName : autoConfigurationEntry.getConfigurations()) {         this.entries.putIfAbsent(importClassName, annotationMetadata).     } }
false;public;0;21;;@Override public Iterable<Entry> selectImports() {     if (this.autoConfigurationEntries.isEmpty()) {         return Collections.emptyList().     }     Set<String> allExclusions = this.autoConfigurationEntries.stream().map(AutoConfigurationEntry::getExclusions).flatMap(Collection::stream).collect(Collectors.toSet()).     Set<String> processedConfigurations = this.autoConfigurationEntries.stream().map(AutoConfigurationEntry::getConfigurations).flatMap(Collection::stream).collect(Collectors.toCollection(LinkedHashSet::new)).     processedConfigurations.removeAll(allExclusions).     return sortAutoConfigurations(processedConfigurations, getAutoConfigurationMetadata()).stream().map((importClassName) -> new Entry(this.entries.get(importClassName), importClassName)).collect(Collectors.toList()). }
false;private;0;7;;private AutoConfigurationMetadata getAutoConfigurationMetadata() {     if (this.autoConfigurationMetadata == null) {         this.autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(this.beanClassLoader).     }     return this.autoConfigurationMetadata. }
false;private;2;5;;private List<String> sortAutoConfigurations(Set<String> configurations, AutoConfigurationMetadata autoConfigurationMetadata) {     return new AutoConfigurationSorter(getMetadataReaderFactory(), autoConfigurationMetadata).getInPriorityOrder(configurations). }
false;private;0;10;;private MetadataReaderFactory getMetadataReaderFactory() {     try {         return this.beanFactory.getBean(SharedMetadataReaderFactoryContextInitializer.BEAN_NAME, MetadataReaderFactory.class).     } catch (NoSuchBeanDefinitionException ex) {         return new CachingMetadataReaderFactory(this.resourceLoader).     } }
false;public;0;3;;public List<String> getConfigurations() {     return this.configurations. }
false;public;0;3;;public Set<String> getExclusions() {     return this.exclusions. }
