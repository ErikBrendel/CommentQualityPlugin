commented;modifiers;parameterAmount;loc;comment;code
false;public;2;25;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     ConditionMessage.Builder message = ConditionMessage.forCondition("Session Condition").     Environment environment = context.getEnvironment().     StoreType required = SessionStoreMappings.getType(this.webApplicationType, ((AnnotationMetadata) metadata).getClassName()).     if (!environment.containsProperty("spring.session.store-type")) {         return ConditionOutcome.match(message.didNotFind("property", "properties").items(ConditionMessage.Style.QUOTE, "spring.session.store-type")).     }     try {         Binder binder = Binder.get(environment).         return binder.bind("spring.session.store-type", StoreType.class).map((t) -> new ConditionOutcome(t == required, message.found("spring.session.store-type property").items(t))).orElse(ConditionOutcome.noMatch(message.didNotFind("spring.session.store-type property").atAll())).     } catch (BindException ex) {         return ConditionOutcome.noMatch(message.found("invalid spring.session.store-type property").atAll()).     } }
