commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@PostConstruct public void path() {     customize(). }
false;private;0;4;;private void customize() {     this.customizers.orderedStream().forEach((customizer) -> customizer.customize(this.config)). }
false;public;0;9;;@Bean @ConditionalOnMissingFilterBean(RequestContextFilter.class) public FilterRegistrationBean<RequestContextFilter> requestContextFilter() {     FilterRegistrationBean<RequestContextFilter> registration = new FilterRegistrationBean<>().     registration.setFilter(new RequestContextFilter()).     registration.setOrder(this.jersey.getFilter().getOrder() - 1).     registration.setName("requestContextFilter").     return registration. }
false;public;0;6;;@Bean @ConditionalOnMissingBean public JerseyApplicationPath jerseyApplicationPath() {     return new DefaultJerseyApplicationPath(this.jersey.getApplicationPath(), this.config). }
false;public;1;17;;@Bean @ConditionalOnMissingBean(name = "jerseyFilterRegistration") @ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "filter") public FilterRegistrationBean<ServletContainer> jerseyFilterRegistration(JerseyApplicationPath applicationPath) {     FilterRegistrationBean<ServletContainer> registration = new FilterRegistrationBean<>().     registration.setFilter(new ServletContainer(this.config)).     registration.setUrlPatterns(Collections.singletonList(applicationPath.getUrlMapping())).     registration.setOrder(this.jersey.getFilter().getOrder()).     registration.addInitParameter(ServletProperties.FILTER_CONTEXT_PATH, stripPattern(applicationPath.getPath())).     addInitParameters(registration).     registration.setName("jerseyFilter").     registration.setDispatcherTypes(EnumSet.allOf(DispatcherType.class)).     return registration. }
false;private;1;6;;private String stripPattern(String path) {     if (path.endsWith("/*")) {         path = path.substring(0, path.lastIndexOf("/*")).     }     return path. }
false;public;1;12;;@Bean @ConditionalOnMissingBean(name = "jerseyServletRegistration") @ConditionalOnProperty(prefix = "spring.jersey", name = "type", havingValue = "servlet", matchIfMissing = true) public ServletRegistrationBean<ServletContainer> jerseyServletRegistration(JerseyApplicationPath applicationPath) {     ServletRegistrationBean<ServletContainer> registration = new ServletRegistrationBean<>(new ServletContainer(this.config), applicationPath.getUrlMapping()).     addInitParameters(registration).     registration.setName(getServletRegistrationName()).     registration.setLoadOnStartup(this.jersey.getServlet().getLoadOnStartup()).     return registration. }
false;private;0;3;;private String getServletRegistrationName() {     return ClassUtils.getUserClass(this.config.getClass()).getName(). }
false;private;1;3;;private void addInitParameters(DynamicRegistrationBean<?> registration) {     this.jersey.getInit().forEach(registration::addInitParameter). }
false;public;1;13;;@Override public void setServletContext(ServletContext servletContext) {     String servletRegistrationName = getServletRegistrationName().     ServletRegistration registration = servletContext.getServletRegistration(servletRegistrationName).     if (registration != null) {         if (logger.isInfoEnabled()) {             logger.info("Configuring existing registration for Jersey servlet '" + servletRegistrationName + "'").         }         registration.setInitParameters(this.jersey.getInit()).     } }
false;public;1;6;;@Override public void onStartup(ServletContext servletContext) throws ServletException {     // We need to switch *off* the Jersey WebApplicationInitializer because it     // will try and register a ContextLoaderListener which we don't need     servletContext.setInitParameter("contextConfigLocation", "<NONE>"). }
false;public;1;10;;@Bean public ResourceConfigCustomizer resourceConfigCustomizer(final ObjectMapper objectMapper) {     addJaxbAnnotationIntrospectorIfPresent(objectMapper).     return (ResourceConfig config) -> {         config.register(JacksonFeature.class).         config.register(new ObjectMapperContextResolver(objectMapper), ContextResolver.class).     }. }
false;private;1;6;;private void addJaxbAnnotationIntrospectorIfPresent(ObjectMapper objectMapper) {     if (ClassUtils.isPresent(JAXB_ANNOTATION_INTROSPECTOR_CLASS_NAME, getClass().getClassLoader())) {         new ObjectMapperCustomizer().addJaxbAnnotationIntrospector(objectMapper).     } }
false;private;1;9;;private void addJaxbAnnotationIntrospector(ObjectMapper objectMapper) {     JaxbAnnotationIntrospector jaxbAnnotationIntrospector = new JaxbAnnotationIntrospector(objectMapper.getTypeFactory()).     objectMapper.setAnnotationIntrospectors(createPair(objectMapper.getSerializationConfig(), jaxbAnnotationIntrospector), createPair(objectMapper.getDeserializationConfig(), jaxbAnnotationIntrospector)). }
false;private;2;5;;private AnnotationIntrospector createPair(MapperConfig<?> config, JaxbAnnotationIntrospector jaxbAnnotationIntrospector) {     return AnnotationIntrospector.pair(config.getAnnotationIntrospector(), jaxbAnnotationIntrospector). }
false;public;1;4;;@Override public ObjectMapper getContext(Class<?> type) {     return this.objectMapper. }
