commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Conditional(GitResourceAvailableCondition.class) @ConditionalOnMissingBean @Bean public GitProperties gitProperties() throws Exception {     return new GitProperties(loadFrom(this.properties.getGit().getLocation(), "git", this.properties.getGit().getEncoding())). }
false;public;0;7;;@ConditionalOnResource(resources = "${spring.info.build.location:classpath:META-INF/build-info.properties}") @ConditionalOnMissingBean @Bean public BuildProperties buildProperties() throws Exception {     return new BuildProperties(loadFrom(this.properties.getBuild().getLocation(), "build", this.properties.getBuild().getEncoding())). }
false;protected;3;12;;protected Properties loadFrom(Resource location, String prefix, Charset encoding) throws IOException {     prefix = prefix.endsWith(".") ? prefix : prefix + ".".     Properties source = loadSource(location, encoding).     Properties target = new Properties().     for (String key : source.stringPropertyNames()) {         if (key.startsWith(prefix)) {             target.put(key.substring(prefix.length()), source.get(key)).         }     }     return target. }
false;private;2;8;;private Properties loadSource(Resource location, Charset encoding) throws IOException {     if (encoding != null) {         return PropertiesLoaderUtils.loadProperties(new EncodedResource(location, encoding)).     }     return PropertiesLoaderUtils.loadProperties(location). }
false;public;2;19;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     ResourceLoader loader = context.getResourceLoader().     loader = (loader != null) ? loader : this.defaultResourceLoader.     Environment environment = context.getEnvironment().     String location = environment.getProperty("spring.info.git.location").     if (location == null) {         location = "classpath:git.properties".     }     ConditionMessage.Builder message = ConditionMessage.forCondition("GitResource").     if (loader.getResource(location).exists()) {         return ConditionOutcome.match(message.found("git info at").items(location)).     }     return ConditionOutcome.noMatch(message.didNotFind("git info at").items(location)). }
