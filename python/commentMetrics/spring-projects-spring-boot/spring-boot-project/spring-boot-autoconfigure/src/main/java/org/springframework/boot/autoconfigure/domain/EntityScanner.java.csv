# id;timestamp;commentText;codeText;commentWords;codeWords
EntityScanner -> public EntityScanner(ApplicationContext context);1507173536;Create a new {@link EntityScanner} instance._@param context the source application context;public EntityScanner(ApplicationContext context) {_		Assert.notNull(context, "Context must not be null")__		this.context = context__	};create,a,new,link,entity,scanner,instance,param,context,the,source,application,context;public,entity,scanner,application,context,context,assert,not,null,context,context,must,not,be,null,this,context,context
EntityScanner -> public EntityScanner(ApplicationContext context);1508852929;Create a new {@link EntityScanner} instance._@param context the source application context;public EntityScanner(ApplicationContext context) {_		Assert.notNull(context, "Context must not be null")__		this.context = context__	};create,a,new,link,entity,scanner,instance,param,context,the,source,application,context;public,entity,scanner,application,context,context,assert,not,null,context,context,must,not,be,null,this,context,context
EntityScanner -> public EntityScanner(ApplicationContext context);1516665807;Create a new {@link EntityScanner} instance._@param context the source application context;public EntityScanner(ApplicationContext context) {_		Assert.notNull(context, "Context must not be null")__		this.context = context__	};create,a,new,link,entity,scanner,instance,param,context,the,source,application,context;public,entity,scanner,application,context,context,assert,not,null,context,context,must,not,be,null,this,context,context
EntityScanner -> public EntityScanner(ApplicationContext context);1527493301;Create a new {@link EntityScanner} instance._@param context the source application context;public EntityScanner(ApplicationContext context) {_		Assert.notNull(context, "Context must not be null")__		this.context = context__	};create,a,new,link,entity,scanner,instance,param,context,the,source,application,context;public,entity,scanner,application,context,context,assert,not,null,context,context,must,not,be,null,this,context,context
EntityScanner -> @SafeVarargs 	public final Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes) 			throws ClassNotFoundException;1507173536;Scan for entities with the specified annotations._@param annotationTypes the annotation types used on the entities_@return a set of entity classes_@throws ClassNotFoundException if an entity class cannot be loaded;@SafeVarargs_	public final Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes)_			throws ClassNotFoundException {_		List<String> packages = getPackages()__		if (packages.isEmpty()) {_			return Collections.<Class<?>>emptySet()__		}_		Set<Class<?>> entitySet = new HashSet<>()__		ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(_				false)__		scanner.setEnvironment(this.context.getEnvironment())__		scanner.setResourceLoader(this.context)__		for (Class<? extends Annotation> annotationType : annotationTypes) {_			scanner.addIncludeFilter(new AnnotationTypeFilter(annotationType))__		}_		for (String basePackage : packages) {_			if (StringUtils.hasText(basePackage)) {_				for (BeanDefinition candidate : scanner_						.findCandidateComponents(basePackage)) {_					entitySet.add(ClassUtils.forName(candidate.getBeanClassName(),_							this.context.getClassLoader()))__				}_			}_		}_		return entitySet__	};scan,for,entities,with,the,specified,annotations,param,annotation,types,the,annotation,types,used,on,the,entities,return,a,set,of,entity,classes,throws,class,not,found,exception,if,an,entity,class,cannot,be,loaded;safe,varargs,public,final,set,class,scan,class,extends,annotation,annotation,types,throws,class,not,found,exception,list,string,packages,get,packages,if,packages,is,empty,return,collections,class,empty,set,set,class,entity,set,new,hash,set,class,path,scanning,candidate,component,provider,scanner,new,class,path,scanning,candidate,component,provider,false,scanner,set,environment,this,context,get,environment,scanner,set,resource,loader,this,context,for,class,extends,annotation,annotation,type,annotation,types,scanner,add,include,filter,new,annotation,type,filter,annotation,type,for,string,base,package,packages,if,string,utils,has,text,base,package,for,bean,definition,candidate,scanner,find,candidate,components,base,package,entity,set,add,class,utils,for,name,candidate,get,bean,class,name,this,context,get,class,loader,return,entity,set
EntityScanner -> @SafeVarargs 	public final Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes) 			throws ClassNotFoundException;1508852929;Scan for entities with the specified annotations._@param annotationTypes the annotation types used on the entities_@return a set of entity classes_@throws ClassNotFoundException if an entity class cannot be loaded;@SafeVarargs_	public final Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes)_			throws ClassNotFoundException {_		List<String> packages = getPackages()__		if (packages.isEmpty()) {_			return Collections.emptySet()__		}_		Set<Class<?>> entitySet = new HashSet<>()__		ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(_				false)__		scanner.setEnvironment(this.context.getEnvironment())__		scanner.setResourceLoader(this.context)__		for (Class<? extends Annotation> annotationType : annotationTypes) {_			scanner.addIncludeFilter(new AnnotationTypeFilter(annotationType))__		}_		for (String basePackage : packages) {_			if (StringUtils.hasText(basePackage)) {_				for (BeanDefinition candidate : scanner_						.findCandidateComponents(basePackage)) {_					entitySet.add(ClassUtils.forName(candidate.getBeanClassName(),_							this.context.getClassLoader()))__				}_			}_		}_		return entitySet__	};scan,for,entities,with,the,specified,annotations,param,annotation,types,the,annotation,types,used,on,the,entities,return,a,set,of,entity,classes,throws,class,not,found,exception,if,an,entity,class,cannot,be,loaded;safe,varargs,public,final,set,class,scan,class,extends,annotation,annotation,types,throws,class,not,found,exception,list,string,packages,get,packages,if,packages,is,empty,return,collections,empty,set,set,class,entity,set,new,hash,set,class,path,scanning,candidate,component,provider,scanner,new,class,path,scanning,candidate,component,provider,false,scanner,set,environment,this,context,get,environment,scanner,set,resource,loader,this,context,for,class,extends,annotation,annotation,type,annotation,types,scanner,add,include,filter,new,annotation,type,filter,annotation,type,for,string,base,package,packages,if,string,utils,has,text,base,package,for,bean,definition,candidate,scanner,find,candidate,components,base,package,entity,set,add,class,utils,for,name,candidate,get,bean,class,name,this,context,get,class,loader,return,entity,set
EntityScanner -> @SafeVarargs 	public final Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes) 			throws ClassNotFoundException;1516665807;Scan for entities with the specified annotations._@param annotationTypes the annotation types used on the entities_@return a set of entity classes_@throws ClassNotFoundException if an entity class cannot be loaded;@SafeVarargs_	public final Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes)_			throws ClassNotFoundException {_		List<String> packages = getPackages()__		if (packages.isEmpty()) {_			return Collections.emptySet()__		}_		ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(_				false)__		scanner.setEnvironment(this.context.getEnvironment())__		scanner.setResourceLoader(this.context)__		for (Class<? extends Annotation> annotationType : annotationTypes) {_			scanner.addIncludeFilter(new AnnotationTypeFilter(annotationType))__		}_		Set<Class<?>> entitySet = new HashSet<>()__		for (String basePackage : packages) {_			if (StringUtils.hasText(basePackage)) {_				for (BeanDefinition candidate : scanner_						.findCandidateComponents(basePackage)) {_					entitySet.add(ClassUtils.forName(candidate.getBeanClassName(),_							this.context.getClassLoader()))__				}_			}_		}_		return entitySet__	};scan,for,entities,with,the,specified,annotations,param,annotation,types,the,annotation,types,used,on,the,entities,return,a,set,of,entity,classes,throws,class,not,found,exception,if,an,entity,class,cannot,be,loaded;safe,varargs,public,final,set,class,scan,class,extends,annotation,annotation,types,throws,class,not,found,exception,list,string,packages,get,packages,if,packages,is,empty,return,collections,empty,set,class,path,scanning,candidate,component,provider,scanner,new,class,path,scanning,candidate,component,provider,false,scanner,set,environment,this,context,get,environment,scanner,set,resource,loader,this,context,for,class,extends,annotation,annotation,type,annotation,types,scanner,add,include,filter,new,annotation,type,filter,annotation,type,set,class,entity,set,new,hash,set,for,string,base,package,packages,if,string,utils,has,text,base,package,for,bean,definition,candidate,scanner,find,candidate,components,base,package,entity,set,add,class,utils,for,name,candidate,get,bean,class,name,this,context,get,class,loader,return,entity,set
EntityScanner -> @SafeVarargs 	public final Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes) 			throws ClassNotFoundException;1527493301;Scan for entities with the specified annotations._@param annotationTypes the annotation types used on the entities_@return a set of entity classes_@throws ClassNotFoundException if an entity class cannot be loaded;@SafeVarargs_	public final Set<Class<?>> scan(Class<? extends Annotation>... annotationTypes)_			throws ClassNotFoundException {_		List<String> packages = getPackages()__		if (packages.isEmpty()) {_			return Collections.emptySet()__		}_		ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(_				false)__		scanner.setEnvironment(this.context.getEnvironment())__		scanner.setResourceLoader(this.context)__		for (Class<? extends Annotation> annotationType : annotationTypes) {_			scanner.addIncludeFilter(new AnnotationTypeFilter(annotationType))__		}_		Set<Class<?>> entitySet = new HashSet<>()__		for (String basePackage : packages) {_			if (StringUtils.hasText(basePackage)) {_				for (BeanDefinition candidate : scanner_						.findCandidateComponents(basePackage)) {_					entitySet.add(ClassUtils.forName(candidate.getBeanClassName(),_							this.context.getClassLoader()))__				}_			}_		}_		return entitySet__	};scan,for,entities,with,the,specified,annotations,param,annotation,types,the,annotation,types,used,on,the,entities,return,a,set,of,entity,classes,throws,class,not,found,exception,if,an,entity,class,cannot,be,loaded;safe,varargs,public,final,set,class,scan,class,extends,annotation,annotation,types,throws,class,not,found,exception,list,string,packages,get,packages,if,packages,is,empty,return,collections,empty,set,class,path,scanning,candidate,component,provider,scanner,new,class,path,scanning,candidate,component,provider,false,scanner,set,environment,this,context,get,environment,scanner,set,resource,loader,this,context,for,class,extends,annotation,annotation,type,annotation,types,scanner,add,include,filter,new,annotation,type,filter,annotation,type,set,class,entity,set,new,hash,set,for,string,base,package,packages,if,string,utils,has,text,base,package,for,bean,definition,candidate,scanner,find,candidate,components,base,package,entity,set,add,class,utils,for,name,candidate,get,bean,class,name,this,context,get,class,loader,return,entity,set
