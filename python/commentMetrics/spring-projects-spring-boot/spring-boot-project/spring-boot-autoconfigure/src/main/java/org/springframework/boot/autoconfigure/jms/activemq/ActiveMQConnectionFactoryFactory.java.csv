commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;public <T extends ActiveMQConnectionFactory> T createConnectionFactory(Class<T> factoryClass) {     try {         return doCreateConnectionFactory(factoryClass).     } catch (Exception ex) {         throw new IllegalStateException("Unable to create " + "ActiveMQConnectionFactory", ex).     } }
false;private;1;20;;private <T extends ActiveMQConnectionFactory> T doCreateConnectionFactory(Class<T> factoryClass) throws Exception {     T factory = createConnectionFactoryInstance(factoryClass).     if (this.properties.getCloseTimeout() != null) {         factory.setCloseTimeout((int) this.properties.getCloseTimeout().toMillis()).     }     factory.setNonBlockingRedelivery(this.properties.isNonBlockingRedelivery()).     if (this.properties.getSendTimeout() != null) {         factory.setSendTimeout((int) this.properties.getSendTimeout().toMillis()).     }     Packages packages = this.properties.getPackages().     if (packages.getTrustAll() != null) {         factory.setTrustAllPackages(packages.getTrustAll()).     }     if (!packages.getTrusted().isEmpty()) {         factory.setTrustedPackages(packages.getTrusted()).     }     customize(factory).     return factory. }
false;private;1;12;;private <T extends ActiveMQConnectionFactory> T createConnectionFactoryInstance(Class<T> factoryClass) throws InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {     String brokerUrl = determineBrokerUrl().     String user = this.properties.getUser().     String password = this.properties.getPassword().     if (StringUtils.hasLength(user) && StringUtils.hasLength(password)) {         return factoryClass.getConstructor(String.class, String.class, String.class).newInstance(user, password, brokerUrl).     }     return factoryClass.getConstructor(String.class).newInstance(brokerUrl). }
false;private;1;5;;private void customize(ActiveMQConnectionFactory connectionFactory) {     for (ActiveMQConnectionFactoryCustomizer factoryCustomizer : this.factoryCustomizers) {         factoryCustomizer.customize(connectionFactory).     } }
false;;0;9;;String determineBrokerUrl() {     if (this.properties.getBrokerUrl() != null) {         return this.properties.getBrokerUrl().     }     if (this.properties.isInMemory()) {         return DEFAULT_EMBEDDED_BROKER_URL.     }     return DEFAULT_NETWORK_BROKER_URL. }
