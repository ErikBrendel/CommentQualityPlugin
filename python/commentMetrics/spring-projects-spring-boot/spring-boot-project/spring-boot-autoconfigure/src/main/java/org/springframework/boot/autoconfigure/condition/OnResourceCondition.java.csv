commented;modifiers;parameterAmount;loc;comment;code
false;public;2;28;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     MultiValueMap<String, Object> attributes = metadata.getAllAnnotationAttributes(ConditionalOnResource.class.getName(), true).     ResourceLoader loader = (context.getResourceLoader() != null) ? context.getResourceLoader() : this.defaultResourceLoader.     List<String> locations = new ArrayList<>().     collectValues(locations, attributes.get("resources")).     Assert.isTrue(!locations.isEmpty(), "@ConditionalOnResource annotations must specify at " + "least one resource location").     List<String> missing = new ArrayList<>().     for (String location : locations) {         String resource = context.getEnvironment().resolvePlaceholders(location).         if (!loader.getResource(resource).exists()) {             missing.add(location).         }     }     if (!missing.isEmpty()) {         return ConditionOutcome.noMatch(ConditionMessage.forCondition(ConditionalOnResource.class).didNotFind("resource", "resources").items(Style.QUOTE, missing)).     }     return ConditionOutcome.match(ConditionMessage.forCondition(ConditionalOnResource.class).found("location", "locations").items(locations)). }
false;private;2;7;;private void collectValues(List<String> names, List<Object> values) {     for (Object value : values) {         for (Object item : (Object[]) value) {             names.add((String) item).         }     } }
