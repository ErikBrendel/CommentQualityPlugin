# id;timestamp;commentText;codeText;commentWords;codeWords
OnExpressionCondition -> private String wrapIfNecessary(String expression);1507173536;Allow user to provide bare expression with no '#{}' wrapper._@param expression source expression_@return wrapped expression;private String wrapIfNecessary(String expression) {_		if (!expression.startsWith("#{")) {_			return "#{" + expression + "}"__		}_		return expression__	};allow,user,to,provide,bare,expression,with,no,wrapper,param,expression,source,expression,return,wrapped,expression;private,string,wrap,if,necessary,string,expression,if,expression,starts,with,return,expression,return,expression
OnExpressionCondition -> private String wrapIfNecessary(String expression);1525376698;Allow user to provide bare expression with no '#{}' wrapper._@param expression source expression_@return wrapped expression;private String wrapIfNecessary(String expression) {_		if (!expression.startsWith("#{")) {_			return "#{" + expression + "}"__		}_		return expression__	};allow,user,to,provide,bare,expression,with,no,wrapper,param,expression,source,expression,return,wrapped,expression;private,string,wrap,if,necessary,string,expression,if,expression,starts,with,return,expression,return,expression
OnExpressionCondition -> private String wrapIfNecessary(String expression);1527510540;Allow user to provide bare expression with no '#{}' wrapper._@param expression source expression_@return wrapped expression;private String wrapIfNecessary(String expression) {_		if (!expression.startsWith("#{")) {_			return "#{" + expression + "}"__		}_		return expression__	};allow,user,to,provide,bare,expression,with,no,wrapper,param,expression,source,expression,return,wrapped,expression;private,string,wrap,if,necessary,string,expression,if,expression,starts,with,return,expression,return,expression
OnExpressionCondition -> private String wrapIfNecessary(String expression);1527709308;Allow user to provide bare expression with no '#{}' wrapper._@param expression source expression_@return wrapped expression;private String wrapIfNecessary(String expression) {_		if (!expression.startsWith("#{")) {_			return "#{" + expression + "}"__		}_		return expression__	};allow,user,to,provide,bare,expression,with,no,wrapper,param,expression,source,expression,return,wrapped,expression;private,string,wrap,if,necessary,string,expression,if,expression,starts,with,return,expression,return,expression
OnExpressionCondition -> private String wrapIfNecessary(String expression);1531126218;Allow user to provide bare expression with no '#{}' wrapper._@param expression source expression_@return wrapped expression;private String wrapIfNecessary(String expression) {_		if (!expression.startsWith("#{")) {_			return "#{" + expression + "}"__		}_		return expression__	};allow,user,to,provide,bare,expression,with,no,wrapper,param,expression,source,expression,return,wrapped,expression;private,string,wrap,if,necessary,string,expression,if,expression,starts,with,return,expression,return,expression
