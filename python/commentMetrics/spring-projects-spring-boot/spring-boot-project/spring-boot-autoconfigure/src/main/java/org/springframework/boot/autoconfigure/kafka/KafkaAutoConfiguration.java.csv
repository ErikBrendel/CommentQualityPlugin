commented;modifiers;parameterAmount;loc;comment;code
false;public;3;13;;@Bean @ConditionalOnMissingBean(KafkaTemplate.class) public KafkaTemplate<?, ?> kafkaTemplate(ProducerFactory<Object, Object> kafkaProducerFactory, ProducerListener<Object, Object> kafkaProducerListener, ObjectProvider<RecordMessageConverter> messageConverter) {     KafkaTemplate<Object, Object> kafkaTemplate = new KafkaTemplate<>(kafkaProducerFactory).     messageConverter.ifUnique(kafkaTemplate::setMessageConverter).     kafkaTemplate.setProducerListener(kafkaProducerListener).     kafkaTemplate.setDefaultTopic(this.properties.getTemplate().getDefaultTopic()).     return kafkaTemplate. }
false;public;0;5;;@Bean @ConditionalOnMissingBean(ProducerListener.class) public ProducerListener<Object, Object> kafkaProducerListener() {     return new LoggingProducerListener<>(). }
false;public;0;6;;@Bean @ConditionalOnMissingBean(ConsumerFactory.class) public ConsumerFactory<?, ?> kafkaConsumerFactory() {     return new DefaultKafkaConsumerFactory<>(this.properties.buildConsumerProperties()). }
false;public;0;12;;@Bean @ConditionalOnMissingBean(ProducerFactory.class) public ProducerFactory<?, ?> kafkaProducerFactory() {     DefaultKafkaProducerFactory<?, ?> factory = new DefaultKafkaProducerFactory<>(this.properties.buildProducerProperties()).     String transactionIdPrefix = this.properties.getProducer().getTransactionIdPrefix().     if (transactionIdPrefix != null) {         factory.setTransactionIdPrefix(transactionIdPrefix).     }     return factory. }
false;public;1;7;;@Bean @ConditionalOnProperty(name = "spring.kafka.producer.transaction-id-prefix") @ConditionalOnMissingBean public KafkaTransactionManager<?, ?> kafkaTransactionManager(ProducerFactory<?, ?> producerFactory) {     return new KafkaTransactionManager<>(producerFactory). }
false;public;0;15;;@Bean @ConditionalOnProperty(name = "spring.kafka.jaas.enabled") @ConditionalOnMissingBean public KafkaJaasLoginModuleInitializer kafkaJaasInitializer() throws IOException {     KafkaJaasLoginModuleInitializer jaas = new KafkaJaasLoginModuleInitializer().     Jaas jaasProperties = this.properties.getJaas().     if (jaasProperties.getControlFlag() != null) {         jaas.setControlFlag(jaasProperties.getControlFlag()).     }     if (jaasProperties.getLoginModule() != null) {         jaas.setLoginModule(jaasProperties.getLoginModule()).     }     jaas.setOptions(jaasProperties.getOptions()).     return jaas. }
false;public;0;7;;@Bean @ConditionalOnMissingBean public KafkaAdmin kafkaAdmin() {     KafkaAdmin kafkaAdmin = new KafkaAdmin(this.properties.buildAdminProperties()).     kafkaAdmin.setFatalIfBrokerNotAvailable(this.properties.getAdmin().isFailFast()).     return kafkaAdmin. }
