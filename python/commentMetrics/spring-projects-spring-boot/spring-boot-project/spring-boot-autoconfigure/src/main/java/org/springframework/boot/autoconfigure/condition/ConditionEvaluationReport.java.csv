commented;modifiers;parameterAmount;loc;comment;code
true;public;3;12;/**  * Record the occurrence of condition evaluation.  * @param source the source of the condition (class or method name)  * @param condition the condition evaluated  * @param outcome the condition outcome  */ ;/**  * Record the occurrence of condition evaluation.  * @param source the source of the condition (class or method name)  * @param condition the condition evaluated  * @param outcome the condition outcome  */ public void recordConditionEvaluation(String source, Condition condition, ConditionOutcome outcome) {     Assert.notNull(source, "Source must not be null").     Assert.notNull(condition, "Condition must not be null").     Assert.notNull(outcome, "Outcome must not be null").     this.unconditionalClasses.remove(source).     if (!this.outcomes.containsKey(source)) {         this.outcomes.put(source, new ConditionAndOutcomes()).     }     this.outcomes.get(source).add(condition, outcome).     this.addedAncestorOutcomes = false. }
true;public;1;4;/**  * Records the names of the classes that have been excluded from condition evaluation.  * @param exclusions the names of the excluded classes  */ ;/**  * Records the names of the classes that have been excluded from condition evaluation.  * @param exclusions the names of the excluded classes  */ public void recordExclusions(Collection<String> exclusions) {     Assert.notNull(exclusions, "exclusions must not be null").     this.exclusions.addAll(exclusions). }
true;public;1;4;/**  * Records the names of the classes that are candidates for condition evaluation.  * @param evaluationCandidates the names of the classes whose conditions will be  * evaluated  */ ;/**  * Records the names of the classes that are candidates for condition evaluation.  * @param evaluationCandidates the names of the classes whose conditions will be  * evaluated  */ public void recordEvaluationCandidates(List<String> evaluationCandidates) {     Assert.notNull(evaluationCandidates, "evaluationCandidates must not be null").     this.unconditionalClasses.addAll(evaluationCandidates). }
true;public;0;11;/**  * Returns condition outcomes from this report, grouped by the source.  * @return the condition outcomes  */ ;/**  * Returns condition outcomes from this report, grouped by the source.  * @return the condition outcomes  */ public Map<String, ConditionAndOutcomes> getConditionAndOutcomesBySource() {     if (!this.addedAncestorOutcomes) {         this.outcomes.forEach((source, sourceOutcomes) -> {             if (!sourceOutcomes.isFullMatch()) {                 addNoMatchOutcomeToAncestors(source).             }         }).         this.addedAncestorOutcomes = true.     }     return Collections.unmodifiableMap(this.outcomes). }
false;private;1;10;;private void addNoMatchOutcomeToAncestors(String source) {     String prefix = source + "$".     this.outcomes.forEach((candidateSource, sourceOutcomes) -> {         if (candidateSource.startsWith(prefix)) {             ConditionOutcome outcome = ConditionOutcome.noMatch(ConditionMessage.forCondition("Ancestor " + source).because("did not match")).             sourceOutcomes.add(ANCESTOR_CONDITION, outcome).         }     }). }
true;public;0;3;/**  * Returns the names of the classes that have been excluded from condition evaluation.  * @return the names of the excluded classes  */ ;/**  * Returns the names of the classes that have been excluded from condition evaluation.  * @return the names of the excluded classes  */ public List<String> getExclusions() {     return Collections.unmodifiableList(this.exclusions). }
true;public;0;5;/**  * Returns the names of the classes that were evaluated but were not conditional.  * @return the names of the unconditional classes  */ ;/**  * Returns the names of the classes that were evaluated but were not conditional.  * @return the names of the unconditional classes  */ public Set<String> getUnconditionalClasses() {     Set<String> filtered = new HashSet<>(this.unconditionalClasses).     filtered.removeAll(this.exclusions).     return Collections.unmodifiableSet(filtered). }
true;public;0;3;/**  * The parent report (from a parent BeanFactory if there is one).  * @return the parent report (or null if there isn't one)  */ ;/**  * The parent report (from a parent BeanFactory if there is one).  * @return the parent report (or null if there isn't one)  */ public ConditionEvaluationReport getParent() {     return this.parent. }
true;public,static;1;7;/**  * Attempt to find the {@link ConditionEvaluationReport} for the specified bean  * factory.  * @param beanFactory the bean factory (may be {@code null})  * @return the {@link ConditionEvaluationReport} or {@code null}  */ ;/**  * Attempt to find the {@link ConditionEvaluationReport} for the specified bean  * factory.  * @param beanFactory the bean factory (may be {@code null})  * @return the {@link ConditionEvaluationReport} or {@code null}  */ public static ConditionEvaluationReport find(BeanFactory beanFactory) {     if (beanFactory != null && beanFactory instanceof ConfigurableBeanFactory) {         return ConditionEvaluationReport.get((ConfigurableListableBeanFactory) beanFactory).     }     return null. }
true;public,static;1;15;/**  * Obtain a {@link ConditionEvaluationReport} for the specified bean factory.  * @param beanFactory the bean factory  * @return an existing or new {@link ConditionEvaluationReport}  */ ;/**  * Obtain a {@link ConditionEvaluationReport} for the specified bean factory.  * @param beanFactory the bean factory  * @return an existing or new {@link ConditionEvaluationReport}  */ public static ConditionEvaluationReport get(ConfigurableListableBeanFactory beanFactory) {     synchronized (beanFactory) {         ConditionEvaluationReport report.         if (beanFactory.containsSingleton(BEAN_NAME)) {             report = beanFactory.getBean(BEAN_NAME, ConditionEvaluationReport.class).         } else {             report = new ConditionEvaluationReport().             beanFactory.registerSingleton(BEAN_NAME, report).         }         locateParent(beanFactory.getParentBeanFactory(), report).         return report.     } }
false;private,static;2;8;;private static void locateParent(BeanFactory beanFactory, ConditionEvaluationReport report) {     if (beanFactory != null && report.parent == null && beanFactory.containsBean(BEAN_NAME)) {         report.parent = beanFactory.getBean(BEAN_NAME, ConditionEvaluationReport.class).     } }
false;public;1;20;;public ConditionEvaluationReport getDelta(ConditionEvaluationReport previousReport) {     ConditionEvaluationReport delta = new ConditionEvaluationReport().     this.outcomes.forEach((source, sourceOutcomes) -> {         ConditionAndOutcomes previous = previousReport.outcomes.get(source).         if (previous == null || previous.isFullMatch() != sourceOutcomes.isFullMatch()) {             sourceOutcomes.forEach((conditionAndOutcome) -> delta.recordConditionEvaluation(source, conditionAndOutcome.getCondition(), conditionAndOutcome.getOutcome())).         }     }).     List<String> newExclusions = new ArrayList<>(this.exclusions).     newExclusions.removeAll(previousReport.getExclusions()).     delta.recordExclusions(newExclusions).     List<String> newUnconditionalClasses = new ArrayList<>(this.unconditionalClasses).     newUnconditionalClasses.removeAll(previousReport.unconditionalClasses).     delta.unconditionalClasses.addAll(newUnconditionalClasses).     return delta. }
false;public;2;3;;public void add(Condition condition, ConditionOutcome outcome) {     this.outcomes.add(new ConditionAndOutcome(condition, outcome)). }
true;public;0;8;/**  * Return {@code true} if all outcomes match.  * @return {@code true} if a full match  */ ;/**  * Return {@code true} if all outcomes match.  * @return {@code true} if a full match  */ public boolean isFullMatch() {     for (ConditionAndOutcome conditionAndOutcomes : this) {         if (!conditionAndOutcomes.getOutcome().isMatch()) {             return false.         }     }     return true. }
false;public;0;4;;@Override public Iterator<ConditionAndOutcome> iterator() {     return Collections.unmodifiableSet(this.outcomes).iterator(). }
false;public;0;3;;public Condition getCondition() {     return this.condition. }
false;public;0;3;;public ConditionOutcome getOutcome() {     return this.outcome. }
false;public;1;13;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     ConditionAndOutcome other = (ConditionAndOutcome) obj.     return (ObjectUtils.nullSafeEquals(this.condition.getClass(), other.condition.getClass()) && ObjectUtils.nullSafeEquals(this.outcome, other.outcome)). }
false;public;0;4;;@Override public int hashCode() {     return this.condition.getClass().hashCode() * 31 + this.outcome.hashCode(). }
false;public;0;4;;@Override public String toString() {     return this.condition.getClass() + " " + this.outcome. }
false;public;2;4;;@Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {     throw new UnsupportedOperationException(). }
