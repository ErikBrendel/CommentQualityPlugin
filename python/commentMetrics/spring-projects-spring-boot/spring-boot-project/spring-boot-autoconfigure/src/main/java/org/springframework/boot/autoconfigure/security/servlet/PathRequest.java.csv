commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Returns a {@link StaticResourceRequest} that can be used to create a matcher for  * {@link StaticResourceLocation locations}.  * @return a {@link StaticResourceRequest}  */ ;/**  * Returns a {@link StaticResourceRequest} that can be used to create a matcher for  * {@link StaticResourceLocation locations}.  * @return a {@link StaticResourceRequest}  */ public static StaticResourceRequest toStaticResources() {     return StaticResourceRequest.INSTANCE. }
true;public,static;0;3;/**  * Returns a matcher that includes the H2 console location. For example:  * <pre class="code">  * PathRequest.toH2Console()  * </pre>  * @return the configured {@link RequestMatcher}  */ ;/**  * Returns a matcher that includes the H2 console location. For example:  * <pre class="code">  * PathRequest.toH2Console()  * </pre>  * @return the configured {@link RequestMatcher}  */ public static H2ConsoleRequestMatcher toH2Console() {     return new H2ConsoleRequestMatcher(). }
false;protected;1;5;;@Override protected void initialized(Supplier<H2ConsoleProperties> h2ConsoleProperties) {     this.delegate = new AntPathRequestMatcher(h2ConsoleProperties.get().getPath() + "/**"). }
false;protected;2;5;;@Override protected boolean matches(HttpServletRequest request, Supplier<H2ConsoleProperties> context) {     return this.delegate.matches(request). }
