commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Bean @ConditionalOnMissingBean(HiddenHttpMethodFilter.class) @ConditionalOnProperty(prefix = "spring.webflux.hiddenmethod.filter", name = "enabled", matchIfMissing = true) public OrderedHiddenHttpMethodFilter hiddenHttpMethodFilter() {     return new OrderedHiddenHttpMethodFilter(). }
false;public;1;4;;@Override public void configureArgumentResolvers(ArgumentResolverConfigurer configurer) {     this.argumentResolvers.orderedStream().forEach(configurer::addCustomResolver). }
false;public;1;5;;@Override public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) {     this.codecCustomizers.orderedStream().forEach((customizer) -> customizer.customize(configurer)). }
false;public;1;22;;@Override public void addResourceHandlers(ResourceHandlerRegistry registry) {     if (!this.resourceProperties.isAddMappings()) {         logger.debug("Default resource handling disabled").         return.     }     if (!registry.hasMappingForPattern("/webjars/**")) {         ResourceHandlerRegistration registration = registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:/META-INF/resources/webjars/").         configureResourceCaching(registration).         customizeResourceHandlerRegistration(registration).     }     String staticPathPattern = this.webFluxProperties.getStaticPathPattern().     if (!registry.hasMappingForPattern(staticPathPattern)) {         ResourceHandlerRegistration registration = registry.addResourceHandler(staticPathPattern).addResourceLocations(this.resourceProperties.getStaticLocations()).         configureResourceCaching(registration).         customizeResourceHandlerRegistration(registration).     } }
false;private;1;9;;private void configureResourceCaching(ResourceHandlerRegistration registration) {     Duration cachePeriod = this.resourceProperties.getCache().getPeriod().     ResourceProperties.Cache.Cachecontrol cacheControl = this.resourceProperties.getCache().getCachecontrol().     if (cachePeriod != null && cacheControl.getMaxAge() == null) {         cacheControl.setMaxAge(cachePeriod).     }     registration.setCacheControl(cacheControl.toHttpCacheControl()). }
false;public;1;4;;@Override public void configureViewResolvers(ViewResolverRegistry registry) {     this.viewResolvers.orderedStream().forEach(registry::viewResolver). }
false;public;1;12;;@Override public void addFormatters(FormatterRegistry registry) {     for (Converter<?, ?> converter : getBeansOfType(Converter.class)) {         registry.addConverter(converter).     }     for (GenericConverter converter : getBeansOfType(GenericConverter.class)) {         registry.addConverter(converter).     }     for (Formatter<?> formatter : getBeansOfType(Formatter.class)) {         registry.addFormatter(formatter).     } }
false;private;1;3;;private <T> Collection<T> getBeansOfType(Class<T> type) {     return this.beanFactory.getBeansOfType(type).values(). }
false;private;1;7;;private void customizeResourceHandlerRegistration(ResourceHandlerRegistration registration) {     if (this.resourceHandlerRegistrationCustomizer != null) {         this.resourceHandlerRegistrationCustomizer.customize(registration).     } }
false;public;0;8;;@Bean @Override public FormattingConversionService webFluxConversionService() {     WebConversionService conversionService = new WebConversionService(this.webFluxProperties.getDateFormat()).     addFormatters(conversionService).     return conversionService. }
false;public;0;9;;@Bean @Override public Validator webFluxValidator() {     if (!ClassUtils.isPresent("javax.validation.Validator", getClass().getClassLoader())) {         return super.webFluxValidator().     }     return ValidatorAdapter.get(getApplicationContext(), getValidator()). }
false;protected;0;8;;@Override protected RequestMappingHandlerAdapter createRequestMappingHandlerAdapter() {     if (this.webFluxRegistrations != null && this.webFluxRegistrations.getRequestMappingHandlerAdapter() != null) {         return this.webFluxRegistrations.getRequestMappingHandlerAdapter().     }     return super.createRequestMappingHandlerAdapter(). }
false;protected;0;8;;@Override protected RequestMappingHandlerMapping createRequestMappingHandlerMapping() {     if (this.webFluxRegistrations != null && this.webFluxRegistrations.getRequestMappingHandlerMapping() != null) {         return this.webFluxRegistrations.getRequestMappingHandlerMapping().     }     return super.createRequestMappingHandlerMapping(). }
false;public;0;4;;@Bean public ResourceChainResourceHandlerRegistrationCustomizer resourceHandlerRegistrationCustomizer() {     return new ResourceChainResourceHandlerRegistrationCustomizer(). }
