commented;modifiers;parameterAmount;loc;comment;code
false;public;2;13;;@Bean @DependsOn("directoryServer") @ConditionalOnMissingBean public LdapContextSource ldapContextSource(Environment environment, LdapProperties properties) {     LdapContextSource source = new LdapContextSource().     if (hasCredentials(this.embeddedProperties.getCredential())) {         source.setUserDn(this.embeddedProperties.getCredential().getUsername()).         source.setPassword(this.embeddedProperties.getCredential().getPassword()).     }     source.setUrls(properties.determineUrls(environment)).     return source. }
false;public;1;20;;@Bean public InMemoryDirectoryServer directoryServer(ApplicationContext applicationContext) throws LDAPException {     String[] baseDn = StringUtils.toStringArray(this.embeddedProperties.getBaseDn()).     InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(baseDn).     if (hasCredentials(this.embeddedProperties.getCredential())) {         config.addAdditionalBindCredentials(this.embeddedProperties.getCredential().getUsername(), this.embeddedProperties.getCredential().getPassword()).     }     setSchema(config).     InMemoryListenerConfig listenerConfig = InMemoryListenerConfig.createLDAPConfig("LDAP", this.embeddedProperties.getPort()).     config.setListenerConfigs(listenerConfig).     this.server = new InMemoryDirectoryServer(config).     importLdif(applicationContext).     this.server.startListening().     setPortProperty(applicationContext, this.server.getListenPort()).     return this.server. }
false;private;1;10;;private void setSchema(InMemoryDirectoryServerConfig config) {     if (!this.embeddedProperties.getValidation().isEnabled()) {         config.setSchema(null).         return.     }     Resource schema = this.embeddedProperties.getValidation().getSchema().     if (schema != null) {         setSchema(config, schema).     } }
false;private;2;11;;private void setSchema(InMemoryDirectoryServerConfig config, Resource resource) {     try {         Schema defaultSchema = Schema.getDefaultStandardSchema().         Schema schema = Schema.getSchema(resource.getInputStream()).         config.setSchema(Schema.mergeSchemas(defaultSchema, schema)).     } catch (Exception ex) {         throw new IllegalStateException("Unable to load schema " + resource.getDescription(), ex).     } }
false;private;1;4;;private boolean hasCredentials(Credential credential) {     return StringUtils.hasText(credential.getUsername()) && StringUtils.hasText(credential.getPassword()). }
false;private;1;16;;private void importLdif(ApplicationContext applicationContext) throws LDAPException {     String location = this.embeddedProperties.getLdif().     if (StringUtils.hasText(location)) {         try {             Resource resource = applicationContext.getResource(location).             if (resource.exists()) {                 try (InputStream inputStream = resource.getInputStream()) {                     this.server.importFromLDIF(true, new LDIFReader(inputStream)).                 }             }         } catch (Exception ex) {             throw new IllegalStateException("Unable to load LDIF " + location, ex).         }     } }
false;private;2;10;;private void setPortProperty(ApplicationContext context, int port) {     if (context instanceof ConfigurableApplicationContext) {         MutablePropertySources sources = ((ConfigurableApplicationContext) context).getEnvironment().getPropertySources().         getLdapPorts(sources).put("local.ldap.port", port).     }     if (context.getParent() != null) {         setPortProperty(context.getParent(), port).     } }
false;private;1;9;;@SuppressWarnings("unchecked") private Map<String, Object> getLdapPorts(MutablePropertySources sources) {     PropertySource<?> propertySource = sources.get(PROPERTY_SOURCE_NAME).     if (propertySource == null) {         propertySource = new MapPropertySource(PROPERTY_SOURCE_NAME, new HashMap<>()).         sources.addFirst(propertySource).     }     return (Map<String, Object>) propertySource.getSource(). }
false;public;0;6;;@PreDestroy public void close() {     if (this.server != null) {         this.server.shutDown(true).     } }
false;public;2;12;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     Builder message = ConditionMessage.forCondition("Embedded LDAP").     Environment environment = context.getEnvironment().     if (environment != null && !Binder.get(environment).bind("spring.ldap.embedded.base-dn", STRING_LIST).orElseGet(Collections::emptyList).isEmpty()) {         return ConditionOutcome.match(message.because("Found base-dn property")).     }     return ConditionOutcome.noMatch(message.because("No base-dn property found")). }
