commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public DataSource getDataSource() {     return this.dataSource. }
true;public;0;14;/**  * Create the schema if necessary.  * @return {@code true} if the schema was created  * @see DataSourceProperties#getSchema()  */ ;/**  * Create the schema if necessary.  * @return {@code true} if the schema was created  * @see DataSourceProperties#getSchema()  */ public boolean createSchema() {     List<Resource> scripts = getScripts("spring.datasource.schema", this.properties.getSchema(), "schema").     if (!scripts.isEmpty()) {         if (!isEnabled()) {             logger.debug("Initialization disabled (not running DDL scripts)").             return false.         }         String username = this.properties.getSchemaUsername().         String password = this.properties.getSchemaPassword().         runScripts(scripts, username, password).     }     return !scripts.isEmpty(). }
true;public;0;13;/**  * Initialize the schema if necessary.  * @see DataSourceProperties#getData()  */ ;/**  * Initialize the schema if necessary.  * @see DataSourceProperties#getData()  */ public void initSchema() {     List<Resource> scripts = getScripts("spring.datasource.data", this.properties.getData(), "data").     if (!scripts.isEmpty()) {         if (!isEnabled()) {             logger.debug("Initialization disabled (not running data scripts)").             return.         }         String username = this.properties.getDataUsername().         String password = this.properties.getDataPassword().         runScripts(scripts, username, password).     } }
false;private;0;10;;private boolean isEnabled() {     DataSourceInitializationMode mode = this.properties.getInitializationMode().     if (mode == DataSourceInitializationMode.NEVER) {         return false.     }     if (mode == DataSourceInitializationMode.EMBEDDED && !isEmbedded()) {         return false.     }     return true. }
false;private;0;9;;private boolean isEmbedded() {     try {         return EmbeddedDatabaseConnection.isEmbedded(this.dataSource).     } catch (Exception ex) {         logger.debug("Could not determine if datasource is embedded", ex).         return false.     } }
false;private;3;11;;private List<Resource> getScripts(String propertyName, List<String> resources, String fallback) {     if (resources != null) {         return getResources(propertyName, resources, true).     }     String platform = this.properties.getPlatform().     List<String> fallbackResources = new ArrayList<>().     fallbackResources.add("classpath*:" + fallback + "-" + platform + ".sql").     fallbackResources.add("classpath*:" + fallback + ".sql").     return getResources(propertyName, fallbackResources, false). }
false;private;3;16;;private List<Resource> getResources(String propertyName, List<String> locations, boolean validate) {     List<Resource> resources = new ArrayList<>().     for (String location : locations) {         for (Resource resource : doGetResources(location)) {             if (resource.exists()) {                 resources.add(resource).             } else if (validate) {                 throw new InvalidConfigurationPropertyValueException(propertyName, resource, "The specified resource does not exist.").             }         }     }     return resources. }
false;private;1;12;;private Resource[] doGetResources(String location) {     try {         SortedResourcesFactoryBean factory = new SortedResourcesFactoryBean(this.resourceLoader, Collections.singletonList(location)).         factory.afterPropertiesSet().         return factory.getObject().     } catch (Exception ex) {         throw new IllegalStateException("Unable to load resources from " + location, ex).     } }
false;private;3;22;;private void runScripts(List<Resource> resources, String username, String password) {     if (resources.isEmpty()) {         return.     }     ResourceDatabasePopulator populator = new ResourceDatabasePopulator().     populator.setContinueOnError(this.properties.isContinueOnError()).     populator.setSeparator(this.properties.getSeparator()).     if (this.properties.getSqlScriptEncoding() != null) {         populator.setSqlScriptEncoding(this.properties.getSqlScriptEncoding().name()).     }     for (Resource resource : resources) {         populator.addScript(resource).     }     DataSource dataSource = this.dataSource.     if (StringUtils.hasText(username) && StringUtils.hasText(password)) {         dataSource = DataSourceBuilder.create(this.properties.getClassLoader()).driverClassName(this.properties.determineDriverClassName()).url(this.properties.determineUrl()).username(username).password(password).build().     }     DatabasePopulatorUtils.execute(populator, dataSource). }
