commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Bean public SpringEmbeddedCacheManager cacheManager(CacheManagerCustomizers customizers, EmbeddedCacheManager embeddedCacheManager) {     SpringEmbeddedCacheManager cacheManager = new SpringEmbeddedCacheManager(embeddedCacheManager).     return customizers.customize(cacheManager). }
false;public;2;14;;@Bean(destroyMethod = "stop") @ConditionalOnMissingBean public EmbeddedCacheManager infinispanCacheManager(CacheProperties cacheProperties, ObjectProvider<ConfigurationBuilder> defaultConfigurationBuilder) throws IOException {     EmbeddedCacheManager cacheManager = createEmbeddedCacheManager(cacheProperties).     List<String> cacheNames = cacheProperties.getCacheNames().     if (!CollectionUtils.isEmpty(cacheNames)) {         cacheNames.forEach((cacheName) -> cacheManager.defineConfiguration(cacheName, getDefaultCacheConfiguration(defaultConfigurationBuilder.getIfAvailable()))).     }     return cacheManager. }
false;private;1;11;;private EmbeddedCacheManager createEmbeddedCacheManager(CacheProperties cacheProperties) throws IOException {     Resource location = cacheProperties.resolveConfigLocation(cacheProperties.getInfinispan().getConfig()).     if (location != null) {         try (InputStream in = location.getInputStream()) {             return new DefaultCacheManager(in).         }     }     return new DefaultCacheManager(). }
false;private;1;7;;private org.infinispan.configuration.cache.Configuration getDefaultCacheConfiguration(ConfigurationBuilder defaultConfigurationBuilder) {     if (defaultConfigurationBuilder != null) {         return defaultConfigurationBuilder.build().     }     return new ConfigurationBuilder().build(). }
