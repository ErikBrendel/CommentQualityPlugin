commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public JobRepository getJobRepository() {     return this.jobRepository. }
false;public;0;4;;@Override public PlatformTransactionManager getTransactionManager() {     return this.transactionManager. }
false;public;0;4;;@Override public JobLauncher getJobLauncher() {     return this.jobLauncher. }
false;public;0;4;;@Override public JobExplorer getJobExplorer() throws Exception {     return this.jobExplorer. }
false;public;0;12;;@PostConstruct public void initialize() {     try {         this.transactionManager = buildTransactionManager().         this.jobRepository = createJobRepository().         this.jobLauncher = createJobLauncher().         this.jobExplorer = createJobExplorer().     } catch (Exception ex) {         throw new IllegalStateException("Unable to initialize Spring Batch", ex).     } }
false;protected;0;9;;protected JobExplorer createJobExplorer() throws Exception {     PropertyMapper map = PropertyMapper.get().     JobExplorerFactoryBean factory = new JobExplorerFactoryBean().     factory.setDataSource(this.dataSource).     map.from(this.properties::getTablePrefix).whenHasText().to(factory::setTablePrefix).     factory.afterPropertiesSet().     return factory.getObject(). }
false;protected;0;6;;protected JobLauncher createJobLauncher() throws Exception {     SimpleJobLauncher jobLauncher = new SimpleJobLauncher().     jobLauncher.setJobRepository(getJobRepository()).     jobLauncher.afterPropertiesSet().     return jobLauncher. }
false;protected;0;12;;protected JobRepository createJobRepository() throws Exception {     JobRepositoryFactoryBean factory = new JobRepositoryFactoryBean().     PropertyMapper map = PropertyMapper.get().     map.from(this.dataSource).to(factory::setDataSource).     map.from(this::determineIsolationLevel).whenNonNull().to(factory::setIsolationLevelForCreate).     map.from(this.properties::getTablePrefix).whenHasText().to(factory::setTablePrefix).     map.from(this::getTransactionManager).to(factory::setTransactionManager).     factory.afterPropertiesSet().     return factory.getObject(). }
true;protected;0;3;/**  * Determine the isolation level for create* operation of the {@link JobRepository}.  * @return the isolation level or {@code null} to use the default  */ ;/**  * Determine the isolation level for create* operation of the {@link JobRepository}.  * @return the isolation level or {@code null} to use the default  */ protected String determineIsolationLevel() {     return null. }
false;protected;0;3;;protected PlatformTransactionManager createTransactionManager() {     return new DataSourceTransactionManager(this.dataSource). }
false;private;0;7;;private PlatformTransactionManager buildTransactionManager() {     PlatformTransactionManager transactionManager = createTransactionManager().     if (this.transactionManagerCustomizers != null) {         this.transactionManagerCustomizers.customize(transactionManager).     }     return transactionManager. }
