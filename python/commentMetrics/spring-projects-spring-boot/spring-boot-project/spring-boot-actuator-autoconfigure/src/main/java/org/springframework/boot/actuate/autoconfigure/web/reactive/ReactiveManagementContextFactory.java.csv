commented;modifiers;parameterAmount;loc;comment;code
false;public;2;11;;@Override public ConfigurableWebServerApplicationContext createManagementContext(ApplicationContext parent, Class<?>... configClasses) {     AnnotationConfigReactiveWebServerApplicationContext child = new AnnotationConfigReactiveWebServerApplicationContext().     child.setParent(parent).     Class<?>[] combinedClasses = ObjectUtils.addObjectToArray(configClasses, ReactiveWebServerFactoryAutoConfiguration.class).     child.register(combinedClasses).     registerReactiveWebServerFactory(parent, child).     return child. }
false;private;2;15;;private void registerReactiveWebServerFactory(ApplicationContext parent, AnnotationConfigReactiveWebServerApplicationContext childContext) {     try {         ConfigurableListableBeanFactory beanFactory = childContext.getBeanFactory().         if (beanFactory instanceof BeanDefinitionRegistry) {             BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory.             registry.registerBeanDefinition("ReactiveWebServerFactory", new RootBeanDefinition(determineReactiveWebServerFactoryClass(parent))).         }     } catch (NoSuchBeanDefinitionException ex) {     // Ignore and assume auto-configuration     } }
false;private;1;11;;private Class<?> determineReactiveWebServerFactoryClass(ApplicationContext parent) throws NoSuchBeanDefinitionException {     Class<?> factoryClass = parent.getBean(ReactiveWebServerFactory.class).getClass().     if (cannotBeInstantiated(factoryClass)) {         throw new FatalBeanException("ReactiveWebServerFactory implementation " + factoryClass.getName() + " cannot be instantiated. " + "To allow a separate management port to be used, a top-level class " + "or static inner class should be used instead").     }     return factoryClass. }
false;private;1;6;;private boolean cannotBeInstantiated(Class<?> factoryClass) {     return factoryClass.isLocalClass() || (factoryClass.isMemberClass() && !Modifier.isStatic(factoryClass.getModifiers())) || factoryClass.isAnonymousClass(). }
