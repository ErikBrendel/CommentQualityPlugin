commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;9;;protected HealthIndicator createHealthIndicator(Map<String, S> beans) {     if (beans.size() == 1) {         return createHealthIndicator(beans.values().iterator().next()).     }     HealthIndicatorRegistry registry = new DefaultHealthIndicatorRegistry().     beans.forEach((name, source) -> registry.register(name, createHealthIndicator(source))).     return new CompositeHealthIndicator(this.healthAggregator, registry). }
false;protected;1;15;;@SuppressWarnings("unchecked") protected H createHealthIndicator(S source) {     Class<?>[] generics = ResolvableType.forClass(CompositeHealthIndicatorConfiguration.class, getClass()).resolveGenerics().     Class<H> indicatorClass = (Class<H>) generics[0].     Class<S> sourceClass = (Class<S>) generics[1].     try {         return indicatorClass.getConstructor(sourceClass).newInstance(source).     } catch (Exception ex) {         throw new IllegalStateException("Unable to create indicator " + indicatorClass + " for source " + sourceClass, ex).     } }
