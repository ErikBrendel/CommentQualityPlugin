commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Bean public ServletManagementWebServerFactoryCustomizer servletManagementWebServerFactoryCustomizer(ListableBeanFactory beanFactory) {     return new ServletManagementWebServerFactoryCustomizer(beanFactory). }
false;public;0;5;;@Bean @ConditionalOnClass(name = "io.undertow.Undertow") public UndertowAccessLogCustomizer undertowManagementAccessLogCustomizer() {     return new UndertowAccessLogCustomizer(). }
false;public;0;5;;@Bean @ConditionalOnClass(name = "org.apache.catalina.valves.AccessLogValve") public TomcatAccessLogCustomizer tomcatManagementAccessLogCustomizer() {     return new TomcatAccessLogCustomizer(). }
false;public;0;5;;@Bean @ConditionalOnClass(name = "org.eclipse.jetty.server.Server") public JettyAccessLogCustomizer jettyManagementAccessLogCustomizer() {     return new JettyAccessLogCustomizer(). }
false;public;1;5;;@Bean public Filter springSecurityFilterChain(HierarchicalBeanFactory beanFactory) {     BeanFactory parent = beanFactory.getParentBeanFactory().     return parent.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN, Filter.class). }
false;protected;3;9;;@Override protected void customize(ConfigurableServletWebServerFactory webServerFactory, ManagementServerProperties managementServerProperties, ServerProperties serverProperties) {     super.customize(webServerFactory, managementServerProperties, serverProperties).     webServerFactory.setContextPath(managementServerProperties.getServlet().getContextPath()). }
false;protected;1;7;;protected String customizePrefix(String prefix) {     prefix = (prefix != null) ? prefix : "".     if (prefix.startsWith(MANAGEMENT_PREFIX)) {         return prefix.     }     return MANAGEMENT_PREFIX + prefix. }
false;public;0;4;;@Override public int getOrder() {     return 1. }
false;public;1;8;;@Override public void customize(TomcatServletWebServerFactory factory) {     AccessLogValve accessLogValve = findAccessLogValve(factory).     if (accessLogValve == null) {         return.     }     accessLogValve.setPrefix(customizePrefix(accessLogValve.getPrefix())). }
false;private;1;8;;private AccessLogValve findAccessLogValve(TomcatServletWebServerFactory factory) {     for (Valve engineValve : factory.getEngineValves()) {         if (engineValve instanceof AccessLogValve) {             return (AccessLogValve) engineValve.         }     }     return null. }
false;public;1;4;;@Override public void customize(UndertowServletWebServerFactory factory) {     factory.setAccessLogPrefix(customizePrefix(factory.getAccessLogPrefix())). }
false;public;1;4;;@Override public void customize(JettyServletWebServerFactory factory) {     factory.addServerCustomizers(this::customizeServer). }
false;private;1;6;;private void customizeServer(Server server) {     RequestLog requestLog = server.getRequestLog().     if (requestLog != null && requestLog instanceof NCSARequestLog) {         customizeRequestLog((NCSARequestLog) requestLog).     } }
false;private;1;8;;private void customizeRequestLog(NCSARequestLog requestLog) {     String filename = requestLog.getFilename().     if (StringUtils.hasLength(filename)) {         File file = new File(filename).         file = new File(file.getParentFile(), customizePrefix(file.getName())).         requestLog.setFilename(file.getPath()).     } }
