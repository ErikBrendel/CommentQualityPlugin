commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Bean @ConditionalOnMissingBean public PrometheusConfig prometheusConfig(PrometheusProperties prometheusProperties) {     return new PrometheusPropertiesConfigAdapter(prometheusProperties). }
false;public;3;7;;@Bean @ConditionalOnMissingBean public PrometheusMeterRegistry prometheusMeterRegistry(PrometheusConfig prometheusConfig, CollectorRegistry collectorRegistry, Clock clock) {     return new PrometheusMeterRegistry(prometheusConfig, collectorRegistry, clock). }
false;public;0;5;;@Bean @ConditionalOnMissingBean public CollectorRegistry collectorRegistry() {     return new CollectorRegistry(true). }
false;public;1;6;;@Bean @ConditionalOnMissingBean public PrometheusScrapeEndpoint prometheusEndpoint(CollectorRegistry collectorRegistry) {     return new PrometheusScrapeEndpoint(collectorRegistry). }
false;public;3;15;;@Bean @ConditionalOnMissingBean public PrometheusPushGatewayManager prometheusPushGatewayManager(CollectorRegistry collectorRegistry, PrometheusProperties prometheusProperties, Environment environment) {     PrometheusProperties.Pushgateway properties = prometheusProperties.getPushgateway().     PushGateway pushGateway = new PushGateway(properties.getBaseUrl()).     Duration pushRate = properties.getPushRate().     String job = getJob(properties, environment).     Map<String, String> groupingKey = properties.getGroupingKey().     ShutdownOperation shutdownOperation = properties.getShutdownOperation().     return new PrometheusPushGatewayManager(pushGateway, collectorRegistry, pushRate, job, groupingKey, shutdownOperation). }
false;private;2;7;;private String getJob(PrometheusProperties.Pushgateway properties, Environment environment) {     String job = properties.getJob().     job = (job != null) ? job : environment.getProperty("spring.application.name").     return (job != null) ? job : FALLBACK_JOB. }
