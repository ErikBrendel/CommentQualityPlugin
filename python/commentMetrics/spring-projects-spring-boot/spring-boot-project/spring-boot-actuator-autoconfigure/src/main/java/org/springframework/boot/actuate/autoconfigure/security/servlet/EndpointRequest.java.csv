commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Returns a matcher that includes all {@link Endpoint actuator endpoints}. It also  * includes the links endpoint which is present at the base path of the actuator  * endpoints. The {@link EndpointRequestMatcher#excluding(Class...) excluding} method  * can be used to further remove specific endpoints if required. For example:  * <pre class="code">  * EndpointRequest.toAnyEndpoint().excluding(ShutdownEndpoint.class)  * </pre>  * @return the configured {@link RequestMatcher}  */ ;/**  * Returns a matcher that includes all {@link Endpoint actuator endpoints}. It also  * includes the links endpoint which is present at the base path of the actuator  * endpoints. The {@link EndpointRequestMatcher#excluding(Class...) excluding} method  * can be used to further remove specific endpoints if required. For example:  * <pre class="code">  * EndpointRequest.toAnyEndpoint().excluding(ShutdownEndpoint.class)  * </pre>  * @return the configured {@link RequestMatcher}  */ public static EndpointRequestMatcher toAnyEndpoint() {     return new EndpointRequestMatcher(true). }
true;public,static;1;3;/**  * Returns a matcher that includes the specified {@link Endpoint actuator endpoints}.  * For example: <pre class="code">  * EndpointRequest.to(ShutdownEndpoint.class, HealthEndpoint.class)  * </pre>  * @param endpoints the endpoints to include  * @return the configured {@link RequestMatcher}  */ ;/**  * Returns a matcher that includes the specified {@link Endpoint actuator endpoints}.  * For example: <pre class="code">  * EndpointRequest.to(ShutdownEndpoint.class, HealthEndpoint.class)  * </pre>  * @param endpoints the endpoints to include  * @return the configured {@link RequestMatcher}  */ public static EndpointRequestMatcher to(Class<?>... endpoints) {     return new EndpointRequestMatcher(endpoints, false). }
true;public,static;1;3;/**  * Returns a matcher that includes the specified {@link Endpoint actuator endpoints}.  * For example: <pre class="code">  * EndpointRequest.to("shutdown", "health")  * </pre>  * @param endpoints the endpoints to include  * @return the configured {@link RequestMatcher}  */ ;/**  * Returns a matcher that includes the specified {@link Endpoint actuator endpoints}.  * For example: <pre class="code">  * EndpointRequest.to("shutdown", "health")  * </pre>  * @param endpoints the endpoints to include  * @return the configured {@link RequestMatcher}  */ public static EndpointRequestMatcher to(String... endpoints) {     return new EndpointRequestMatcher(endpoints, false). }
true;public,static;0;3;/**  * Returns a matcher that matches only on the links endpoint. It can be used when  * security configuration for the links endpoint is different from the other  * {@link Endpoint actuator endpoints}. The  * {@link EndpointRequestMatcher#excludingLinks() excludingLinks} method can be used  * in combination with this to remove the links endpoint from  * {@link EndpointRequest#toAnyEndpoint() toAnyEndpoint}. For example:  * <pre class="code">  * EndpointRequest.toLinks()  * </pre>  * @return the configured {@link RequestMatcher}  */ ;/**  * Returns a matcher that matches only on the links endpoint. It can be used when  * security configuration for the links endpoint is different from the other  * {@link Endpoint actuator endpoints}. The  * {@link EndpointRequestMatcher#excludingLinks() excludingLinks} method can be used  * in combination with this to remove the links endpoint from  * {@link EndpointRequest#toAnyEndpoint() toAnyEndpoint}. For example:  * <pre class="code">  * EndpointRequest.toLinks()  * </pre>  * @return the configured {@link RequestMatcher}  */ public static LinksRequestMatcher toLinks() {     return new LinksRequestMatcher(). }
false;protected,final;1;4;;@Override protected final void initialized(Supplier<WebApplicationContext> context) {     this.delegate = createDelegate(context.get()). }
false;protected,final;2;18;;@Override protected final boolean matches(HttpServletRequest request, Supplier<WebApplicationContext> context) {     WebApplicationContext applicationContext = WebApplicationContextUtils.getRequiredWebApplicationContext(request.getServletContext()).     if (ManagementPortType.get(applicationContext.getEnvironment()) == ManagementPortType.DIFFERENT) {         if (applicationContext.getParent() == null) {             return false.         }         String managementContextId = applicationContext.getParent().getId() + ":management".         if (!managementContextId.equals(applicationContext.getId())) {             return false.         }     }     return this.delegate.matches(request). }
false;private;1;8;;private RequestMatcher createDelegate(WebApplicationContext context) {     try {         return createDelegate(context, new RequestMatcherFactory()).     } catch (NoSuchBeanDefinitionException ex) {         return EMPTY_MATCHER.     } }
false;protected,abstract;2;2;;protected abstract RequestMatcher createDelegate(WebApplicationContext context, RequestMatcherFactory requestMatcherFactory).
false;protected;3;9;;protected List<RequestMatcher> getLinksMatchers(RequestMatcherFactory requestMatcherFactory, RequestMatcherProvider matcherProvider, String basePath) {     List<RequestMatcher> linksMatchers = new ArrayList<>().     linksMatchers.add(requestMatcherFactory.antPath(matcherProvider, basePath)).     linksMatchers.add(requestMatcherFactory.antPath(matcherProvider, basePath, "/")).     return linksMatchers. }
false;protected;1;9;;protected RequestMatcherProvider getRequestMatcherProvider(WebApplicationContext context) {     try {         return context.getBean(RequestMatcherProvider.class).     } catch (NoSuchBeanDefinitionException ex) {         return AntPathRequestMatcher::new.     } }
false;public;1;5;;public EndpointRequestMatcher excluding(Class<?>... endpoints) {     List<Object> excludes = new ArrayList<>(this.excludes).     excludes.addAll(Arrays.asList((Object[]) endpoints)).     return new EndpointRequestMatcher(this.includes, excludes, this.includeLinks). }
false;public;1;5;;public EndpointRequestMatcher excluding(String... endpoints) {     List<Object> excludes = new ArrayList<>(this.excludes).     excludes.addAll(Arrays.asList((Object[]) endpoints)).     return new EndpointRequestMatcher(this.includes, excludes, this.includeLinks). }
false;public;0;3;;public EndpointRequestMatcher excludingLinks() {     return new EndpointRequestMatcher(this.includes, this.excludes, false). }
false;protected;2;21;;@Override protected RequestMatcher createDelegate(WebApplicationContext context, RequestMatcherFactory requestMatcherFactory) {     PathMappedEndpoints pathMappedEndpoints = context.getBean(PathMappedEndpoints.class).     RequestMatcherProvider matcherProvider = getRequestMatcherProvider(context).     Set<String> paths = new LinkedHashSet<>().     if (this.includes.isEmpty()) {         paths.addAll(pathMappedEndpoints.getAllPaths()).     }     streamPaths(this.includes, pathMappedEndpoints).forEach(paths::add).     streamPaths(this.excludes, pathMappedEndpoints).forEach(paths::remove).     List<RequestMatcher> delegateMatchers = getDelegateMatchers(requestMatcherFactory, matcherProvider, paths).     String basePath = pathMappedEndpoints.getBasePath().     if (this.includeLinks && StringUtils.hasText(basePath)) {         delegateMatchers.addAll(getLinksMatchers(requestMatcherFactory, matcherProvider, basePath)).     }     return new OrRequestMatcher(delegateMatchers). }
false;private;2;5;;private Stream<String> streamPaths(List<Object> source, PathMappedEndpoints pathMappedEndpoints) {     return source.stream().filter(Objects::nonNull).map(this::getEndpointId).map(pathMappedEndpoints::getPath). }
false;private;1;12;;private EndpointId getEndpointId(Object source) {     if (source instanceof EndpointId) {         return (EndpointId) source.     }     if (source instanceof String) {         return (EndpointId.of((String) source)).     }     if (source instanceof Class) {         return getEndpointId((Class<?>) source).     }     throw new IllegalStateException("Unsupported source " + source). }
false;private;1;7;;private EndpointId getEndpointId(Class<?> source) {     Endpoint annotation = AnnotatedElementUtils.getMergedAnnotation(source, Endpoint.class).     Assert.state(annotation != null, () -> "Class " + source + " is not annotated with @Endpoint").     return EndpointId.of(annotation.id()). }
false;private;3;7;;private List<RequestMatcher> getDelegateMatchers(RequestMatcherFactory requestMatcherFactory, RequestMatcherProvider matcherProvider, Set<String> paths) {     return paths.stream().map((path) -> requestMatcherFactory.antPath(matcherProvider, path, "/**")).collect(Collectors.toList()). }
false;protected;2;12;;@Override protected RequestMatcher createDelegate(WebApplicationContext context, RequestMatcherFactory requestMatcherFactory) {     WebEndpointProperties properties = context.getBean(WebEndpointProperties.class).     String basePath = properties.getBasePath().     if (StringUtils.hasText(basePath)) {         return new OrRequestMatcher(getLinksMatchers(requestMatcherFactory, getRequestMatcherProvider(context), basePath)).     }     return EMPTY_MATCHER. }
false;public;2;8;;public RequestMatcher antPath(RequestMatcherProvider matcherProvider, String... parts) {     StringBuilder pattern = new StringBuilder().     for (String part : parts) {         pattern.append(part).     }     return matcherProvider.getRequestMatcher(pattern.toString()). }
