commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;6;;@Override protected ServletWebOperation wrapServletWebOperation(ExposableWebEndpoint endpoint, WebOperation operation, ServletWebOperation servletWebOperation) {     return new SecureServletWebOperation(servletWebOperation, this.securityInterceptor, endpoint.getEndpointId()). }
false;protected;0;4;;@Override protected LinksHandler getLinksHandler() {     return new CloudFoundryLinksHandler(). }
false;public;2;23;;@Override @ResponseBody public Map<String, Map<String, Link>> links(HttpServletRequest request, HttpServletResponse response) {     SecurityResponse securityResponse = CloudFoundryWebEndpointServletHandlerMapping.this.securityInterceptor.preHandle(request, null).     if (!securityResponse.getStatus().equals(HttpStatus.OK)) {         sendFailureResponse(response, securityResponse).     }     AccessLevel accessLevel = (AccessLevel) request.getAttribute(AccessLevel.REQUEST_ATTRIBUTE).     Map<String, Link> filteredLinks = new LinkedHashMap<>().     if (accessLevel == null) {         return Collections.singletonMap("_links", filteredLinks).     }     Map<String, Link> links = CloudFoundryWebEndpointServletHandlerMapping.this.linksResolver.resolveLinks(request.getRequestURL().toString()).     filteredLinks = links.entrySet().stream().filter((e) -> e.getKey().equals("self") || accessLevel.isAccessAllowed(e.getKey())).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)).     return Collections.singletonMap("_links", filteredLinks). }
false;public;0;4;;@Override public String toString() {     return "Actuator root web endpoint". }
false;private;2;10;;private void sendFailureResponse(HttpServletResponse response, SecurityResponse securityResponse) {     try {         response.sendError(securityResponse.getStatus().value(), securityResponse.getMessage()).     } catch (Exception ex) {         logger.debug("Failed to send error response", ex).     } }
false;public;2;10;;@Override public Object handle(HttpServletRequest request, Map<String, String> body) {     SecurityResponse securityResponse = this.securityInterceptor.preHandle(request, this.endpointId).     if (!securityResponse.getStatus().equals(HttpStatus.OK)) {         return new ResponseEntity<Object>(securityResponse.getMessage(), securityResponse.getStatus()).     }     return this.delegate.handle(request, body). }
