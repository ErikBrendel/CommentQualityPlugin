commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Bean @ConditionalOnMissingBean @ConditionalOnEnabledEndpoint @ConditionalOnBean({ HealthEndpoint.class, HealthEndpointWebExtension.class }) public CloudFoundryHealthEndpointWebExtension cloudFoundryHealthEndpointWebExtension(HealthEndpointWebExtension healthEndpointWebExtension) {     return new CloudFoundryHealthEndpointWebExtension(healthEndpointWebExtension). }
false;public;6;22;;@Bean public CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(ParameterValueMapper parameterMapper, EndpointMediaTypes endpointMediaTypes, RestTemplateBuilder restTemplateBuilder, ServletEndpointsSupplier servletEndpointsSupplier, ControllerEndpointsSupplier controllerEndpointsSupplier, ApplicationContext applicationContext) {     CloudFoundryWebEndpointDiscoverer discoverer = new CloudFoundryWebEndpointDiscoverer(applicationContext, parameterMapper, endpointMediaTypes, null, Collections.emptyList(), Collections.emptyList()).     CloudFoundrySecurityInterceptor securityInterceptor = getSecurityInterceptor(restTemplateBuilder, applicationContext.getEnvironment()).     Collection<ExposableWebEndpoint> webEndpoints = discoverer.getEndpoints().     List<ExposableEndpoint<?>> allEndpoints = new ArrayList<>().     allEndpoints.addAll(webEndpoints).     allEndpoints.addAll(servletEndpointsSupplier.getEndpoints()).     allEndpoints.addAll(controllerEndpointsSupplier.getEndpoints()).     return new CloudFoundryWebEndpointServletHandlerMapping(new EndpointMapping("/cloudfoundryapplication"), webEndpoints, endpointMediaTypes, getCorsConfiguration(), securityInterceptor, new EndpointLinksResolver(allEndpoints)). }
false;private;2;9;;private CloudFoundrySecurityInterceptor getSecurityInterceptor(RestTemplateBuilder restTemplateBuilder, Environment environment) {     CloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(restTemplateBuilder, environment).     TokenValidator tokenValidator = new TokenValidator(cloudfoundrySecurityService).     return new CloudFoundrySecurityInterceptor(tokenValidator, cloudfoundrySecurityService, environment.getProperty("vcap.application.application_id")). }
false;private;2;8;;private CloudFoundrySecurityService getCloudFoundrySecurityService(RestTemplateBuilder restTemplateBuilder, Environment environment) {     String cloudControllerUrl = environment.getProperty("vcap.application.cf_api").     boolean skipSslValidation = environment.getProperty("management.cloudfoundry.skip-ssl-validation", Boolean.class, false).     return (cloudControllerUrl != null) ? new CloudFoundrySecurityService(restTemplateBuilder, cloudControllerUrl, skipSslValidation) : null. }
false;private;0;9;;private CorsConfiguration getCorsConfiguration() {     CorsConfiguration corsConfiguration = new CorsConfiguration().     corsConfiguration.addAllowedOrigin(CorsConfiguration.ALL).     corsConfiguration.setAllowedMethods(Arrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name())).     corsConfiguration.setAllowedHeaders(Arrays.asList("Authorization", "X-Cf-App-Instance", "Content-Type")).     return corsConfiguration. }
false;public;1;5;;@Override public void init(WebSecurity builder) throws Exception {     builder.ignoring().requestMatchers(new AntPathRequestMatcher("/cloudfoundryapplication/**")). }
false;public;1;3;;@Override public void configure(WebSecurity builder) throws Exception { }
