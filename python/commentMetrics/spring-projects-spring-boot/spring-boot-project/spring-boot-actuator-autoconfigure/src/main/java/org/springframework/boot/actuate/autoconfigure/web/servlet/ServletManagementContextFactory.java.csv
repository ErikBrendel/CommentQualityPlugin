commented;modifiers;parameterAmount;loc;comment;code
false;public;2;11;;@Override public ConfigurableWebServerApplicationContext createManagementContext(ApplicationContext parent, Class<?>... configClasses) {     AnnotationConfigServletWebServerApplicationContext child = new AnnotationConfigServletWebServerApplicationContext().     child.setParent(parent).     List<Class<?>> combinedClasses = new ArrayList<>(Arrays.asList(configClasses)).     combinedClasses.add(ServletWebServerFactoryAutoConfiguration.class).     child.register(ClassUtils.toClassArray(combinedClasses)).     registerServletWebServerFactory(parent, child).     return child. }
false;private;2;15;;private void registerServletWebServerFactory(ApplicationContext parent, AnnotationConfigServletWebServerApplicationContext childContext) {     try {         ConfigurableListableBeanFactory beanFactory = childContext.getBeanFactory().         if (beanFactory instanceof BeanDefinitionRegistry) {             BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory.             registry.registerBeanDefinition("ServletWebServerFactory", new RootBeanDefinition(determineServletWebServerFactoryClass(parent))).         }     } catch (NoSuchBeanDefinitionException ex) {     // Ignore and assume auto-configuration     } }
false;private;1;11;;private Class<?> determineServletWebServerFactoryClass(ApplicationContext parent) throws NoSuchBeanDefinitionException {     Class<?> factoryClass = parent.getBean(ServletWebServerFactory.class).getClass().     if (cannotBeInstantiated(factoryClass)) {         throw new FatalBeanException("ServletWebServerFactory implementation " + factoryClass.getName() + " cannot be instantiated. " + "To allow a separate management port to be used, a top-level class " + "or static inner class should be used instead").     }     return factoryClass. }
false;private;1;6;;private boolean cannotBeInstantiated(Class<?> factoryClass) {     return factoryClass.isLocalClass() || (factoryClass.isMemberClass() && !Modifier.isStatic(factoryClass.getModifiers())) || factoryClass.isAnonymousClass(). }
