commented;modifiers;parameterAmount;loc;comment;code
true;public;2;25;/**  * Return the access level that should be granted to the given token.  * @param token the token  * @param applicationId the cloud foundry application ID  * @return the access level that should be granted  * @throws CloudFoundryAuthorizationException if the token is not authorized  */ ;/**  * Return the access level that should be granted to the given token.  * @param token the token  * @param applicationId the cloud foundry application ID  * @return the access level that should be granted  * @throws CloudFoundryAuthorizationException if the token is not authorized  */ public AccessLevel getAccessLevel(String token, String applicationId) throws CloudFoundryAuthorizationException {     try {         URI uri = getPermissionsUri(applicationId).         RequestEntity<?> request = RequestEntity.get(uri).header("Authorization", "bearer " + token).build().         Map<?, ?> body = this.restTemplate.exchange(request, Map.class).getBody().         if (Boolean.TRUE.equals(body.get("read_sensitive_data"))) {             return AccessLevel.FULL.         }         return AccessLevel.RESTRICTED.     } catch (HttpClientErrorException ex) {         if (ex.getStatusCode().equals(HttpStatus.FORBIDDEN)) {             throw new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED, "Access denied").         }         throw new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN, "Invalid token", ex).     } catch (HttpServerErrorException ex) {         throw new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE, "Cloud controller not reachable").     } }
false;private;1;9;;private URI getPermissionsUri(String applicationId) {     try {         return new URI(this.cloudControllerUrl + "/v2/apps/" + applicationId + "/permissions").     } catch (URISyntaxException ex) {         throw new IllegalStateException(ex).     } }
true;public;0;10;/**  * Return all token keys known by the UAA.  * @return a list of token keys  */ ;/**  * Return all token keys known by the UAA.  * @return a list of token keys  */ public Map<String, String> fetchTokenKeys() {     try {         return extractTokenKeys(this.restTemplate.getForObject(getUaaUrl() + "/token_keys", Map.class)).     } catch (HttpStatusCodeException ex) {         throw new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE, "UAA not reachable").     } }
false;private;1;8;;private Map<String, String> extractTokenKeys(Map<?, ?> response) {     Map<String, String> tokenKeys = new HashMap<>().     for (Object key : (List<?>) response.get("keys")) {         Map<?, ?> tokenKey = (Map<?, ?>) key.         tokenKeys.put((String) tokenKey.get("kid"), (String) tokenKey.get("value")).     }     return tokenKeys. }
true;public;0;14;/**  * Return the URL of the UAA.  * @return the UAA url  */ ;/**  * Return the URL of the UAA.  * @return the UAA url  */ public String getUaaUrl() {     if (this.uaaUrl == null) {         try {             Map<?, ?> response = this.restTemplate.getForObject(this.cloudControllerUrl + "/info", Map.class).             this.uaaUrl = (String) response.get("token_endpoint").         } catch (HttpStatusCodeException ex) {             throw new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE, "Unable to fetch token keys from UAA").         }     }     return this.uaaUrl. }
