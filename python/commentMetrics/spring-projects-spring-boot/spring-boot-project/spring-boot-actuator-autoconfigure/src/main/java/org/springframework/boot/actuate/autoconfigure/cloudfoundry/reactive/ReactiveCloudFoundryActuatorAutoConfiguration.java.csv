commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Bean @ConditionalOnMissingBean @ConditionalOnEnabledEndpoint @ConditionalOnBean({ HealthEndpoint.class, ReactiveHealthEndpointWebExtension.class }) public CloudFoundryReactiveHealthEndpointWebExtension cloudFoundryReactiveHealthEndpointWebExtension(ReactiveHealthEndpointWebExtension reactiveHealthEndpointWebExtension) {     return new CloudFoundryReactiveHealthEndpointWebExtension(reactiveHealthEndpointWebExtension). }
false;public;5;20;;@Bean public CloudFoundryWebFluxEndpointHandlerMapping cloudFoundryWebFluxEndpointHandlerMapping(ParameterValueMapper parameterMapper, EndpointMediaTypes endpointMediaTypes, WebClient.Builder webClientBuilder, ControllerEndpointsSupplier controllerEndpointsSupplier, ApplicationContext applicationContext) {     CloudFoundryWebEndpointDiscoverer endpointDiscoverer = new CloudFoundryWebEndpointDiscoverer(applicationContext, parameterMapper, endpointMediaTypes, null, Collections.emptyList(), Collections.emptyList()).     CloudFoundrySecurityInterceptor securityInterceptor = getSecurityInterceptor(webClientBuilder, applicationContext.getEnvironment()).     Collection<ExposableWebEndpoint> webEndpoints = endpointDiscoverer.getEndpoints().     List<ExposableEndpoint<?>> allEndpoints = new ArrayList<>().     allEndpoints.addAll(webEndpoints).     allEndpoints.addAll(controllerEndpointsSupplier.getEndpoints()).     return new CloudFoundryWebFluxEndpointHandlerMapping(new EndpointMapping("/cloudfoundryapplication"), webEndpoints, endpointMediaTypes, getCorsConfiguration(), securityInterceptor, new EndpointLinksResolver(allEndpoints)). }
false;private;2;10;;private CloudFoundrySecurityInterceptor getSecurityInterceptor(WebClient.Builder webClientBuilder, Environment environment) {     ReactiveCloudFoundrySecurityService cloudfoundrySecurityService = getCloudFoundrySecurityService(webClientBuilder, environment).     ReactiveTokenValidator tokenValidator = new ReactiveTokenValidator(cloudfoundrySecurityService).     return new CloudFoundrySecurityInterceptor(tokenValidator, cloudfoundrySecurityService, environment.getProperty("vcap.application.application_id")). }
false;private;2;8;;private ReactiveCloudFoundrySecurityService getCloudFoundrySecurityService(WebClient.Builder webClientBuilder, Environment environment) {     String cloudControllerUrl = environment.getProperty("vcap.application.cf_api").     boolean skipSslValidation = environment.getProperty("management.cloudfoundry.skip-ssl-validation", Boolean.class, false).     return (cloudControllerUrl != null) ? new ReactiveCloudFoundrySecurityService(webClientBuilder, cloudControllerUrl, skipSslValidation) : null. }
false;private;0;9;;private CorsConfiguration getCorsConfiguration() {     CorsConfiguration corsConfiguration = new CorsConfiguration().     corsConfiguration.addAllowedOrigin(CorsConfiguration.ALL).     corsConfiguration.setAllowedMethods(Arrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name())).     corsConfiguration.setAllowedHeaders(Arrays.asList("Authorization", "X-Cf-App-Instance", "Content-Type")).     return corsConfiguration. }
false;public;0;4;;@Bean public WebFilterChainPostProcessor webFilterChainPostProcessor() {     return new WebFilterChainPostProcessor(). }
false;public;2;8;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     if (bean instanceof WebFilterChainProxy) {         return postProcess((WebFilterChainProxy) bean).     }     return bean. }
false;private;1;12;;private WebFilterChainProxy postProcess(WebFilterChainProxy existing) {     ServerWebExchangeMatcher cloudFoundryRequestMatcher = ServerWebExchangeMatchers.pathMatchers("/cloudfoundryapplication/**").     WebFilter noOpFilter = (exchange, chain) -> chain.filter(exchange).     MatcherSecurityWebFilterChain ignoredRequestFilterChain = new MatcherSecurityWebFilterChain(cloudFoundryRequestMatcher, Collections.singletonList(noOpFilter)).     MatcherSecurityWebFilterChain allRequestsFilterChain = new MatcherSecurityWebFilterChain(ServerWebExchangeMatchers.anyExchange(), Collections.singletonList(existing)).     return new WebFilterChainProxy(ignoredRequestFilterChain, allRequestsFilterChain). }
