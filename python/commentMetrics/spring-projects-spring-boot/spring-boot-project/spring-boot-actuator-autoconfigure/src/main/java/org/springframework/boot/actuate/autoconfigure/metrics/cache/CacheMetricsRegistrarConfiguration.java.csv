commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Bean public CacheMetricsRegistrar cacheMetricsRegistrar() {     return new CacheMetricsRegistrar(this.registry, this.binderProviders). }
false;public;0;4;;@PostConstruct public void bindCachesToRegistry() {     this.cacheManagers.forEach(this::bindCacheManagerToRegistry). }
false;private;2;4;;private void bindCacheManagerToRegistry(String beanName, CacheManager cacheManager) {     cacheManager.getCacheNames().forEach((cacheName) -> bindCacheToRegistry(beanName, cacheManager.getCache(cacheName))). }
false;private;2;4;;private void bindCacheToRegistry(String beanName, Cache cache) {     Tag cacheManagerTag = Tag.of("cacheManager", getCacheManagerName(beanName)).     cacheMetricsRegistrar().bindCacheToRegistry(cache, cacheManagerTag). }
true;private;1;8;/**  * Get the name of a {@link CacheManager} based on its {@code beanName}.  * @param beanName the name of the {@link CacheManager} bean  * @return a name for the given cache manager  */ ;/**  * Get the name of a {@link CacheManager} based on its {@code beanName}.  * @param beanName the name of the {@link CacheManager} bean  * @return a name for the given cache manager  */ private String getCacheManagerName(String beanName) {     if (beanName.length() > CACHE_MANAGER_SUFFIX.length() && StringUtils.endsWithIgnoreCase(beanName, CACHE_MANAGER_SUFFIX)) {         return beanName.substring(0, beanName.length() - CACHE_MANAGER_SUFFIX.length()).     }     return beanName. }
