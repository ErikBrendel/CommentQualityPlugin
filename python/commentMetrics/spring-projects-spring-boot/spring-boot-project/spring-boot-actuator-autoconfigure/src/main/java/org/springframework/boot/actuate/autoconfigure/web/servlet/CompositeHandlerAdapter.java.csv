commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean supports(Object handler) {     return getAdapter(handler).isPresent(). }
false;public;3;9;;@Override public ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {     Optional<HandlerAdapter> adapter = getAdapter(handler).     if (adapter.isPresent()) {         return adapter.get().handle(request, response, handler).     }     return null. }
false;public;2;7;;@Override public long getLastModified(HttpServletRequest request, Object handler) {     Optional<HandlerAdapter> adapter = getAdapter(handler).     return adapter.map((handlerAdapter) -> handlerAdapter.getLastModified(request, handler)).orElse(0L). }
false;private;1;6;;private Optional<HandlerAdapter> getAdapter(Object handler) {     if (this.adapters == null) {         this.adapters = extractAdapters().     }     return this.adapters.stream().filter((a) -> a.supports(handler)).findFirst(). }
false;private;0;7;;private List<HandlerAdapter> extractAdapters() {     List<HandlerAdapter> list = new ArrayList<>().     list.addAll(this.beanFactory.getBeansOfType(HandlerAdapter.class).values()).     list.remove(this).     AnnotationAwareOrderComparator.sort(list).     return list. }
