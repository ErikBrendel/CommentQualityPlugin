commented;modifiers;parameterAmount;loc;comment;code
true;public;1;9;/**  * Return the underlying value of the SLA in form suitable to apply to the given meter  * type.  * @param meterType the meter type  * @return the value or {@code null} if the value cannot be applied  */ ;/**  * Return the underlying value of the SLA in form suitable to apply to the given meter  * type.  * @param meterType the meter type  * @return the value or {@code null} if the value cannot be applied  */ public Long getValue(Type meterType) {     if (meterType == Type.DISTRIBUTION_SUMMARY) {         return getDistributionSummaryValue().     }     if (meterType == Type.TIMER) {         return getTimerValue().     }     return null. }
false;private;0;6;;private Long getDistributionSummaryValue() {     if (this.value instanceof Long) {         return (Long) this.value.     }     return null. }
false;private;0;9;;private Long getTimerValue() {     if (this.value instanceof Long) {         return TimeUnit.MILLISECONDS.toNanos((long) this.value).     }     if (this.value instanceof Duration) {         return ((Duration) this.value).toNanos().     }     return null. }
true;public,static;1;6;/**  * Return a new {@link MeterValue} instance for the given String value. The value may  * contain a simple number, or a {@link DurationStyle duration style string}.  * @param value the source value  * @return a {@link MeterValue} instance  */ ;/**  * Return a new {@link MeterValue} instance for the given String value. The value may  * contain a simple number, or a {@link DurationStyle duration style string}.  * @param value the source value  * @return a {@link MeterValue} instance  */ public static MeterValue valueOf(String value) {     if (isNumber(value)) {         return new MeterValue(Long.parseLong(value)).     }     return new MeterValue(DurationStyle.detectAndParse(value)). }
true;public,static;1;3;/**  * Return a new {@link MeterValue} instance for the given long value.  * @param value the source value  * @return a {@link MeterValue} instance  */ ;/**  * Return a new {@link MeterValue} instance for the given long value.  * @param value the source value  * @return a {@link MeterValue} instance  */ public static MeterValue valueOf(long value) {     return new MeterValue(value). }
false;private,static;1;3;;private static boolean isNumber(String value) {     return value.chars().allMatch(Character::isDigit). }
