commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;10;;private static MeterFilter createMapFilter(Map<String, String> tags) {     if (tags.isEmpty()) {         return new MeterFilter() {         }.     }     Tags commonTags = Tags.of(tags.entrySet().stream().map((entry) -> Tag.of(entry.getKey(), entry.getValue())).collect(Collectors.toList())).     return MeterFilter.commonTags(commonTags). }
false;public;1;5;;@Override public MeterFilterReply accept(Meter.Id id) {     boolean enabled = lookupWithFallbackToAll(this.properties.getEnable(), id, true).     return enabled ? MeterFilterReply.NEUTRAL : MeterFilterReply.DENY. }
false;public;1;4;;@Override public Id map(Id id) {     return this.mapFilter.map(id). }
false;public;2;16;;@Override public DistributionStatisticConfig configure(Meter.Id id, DistributionStatisticConfig config) {     Distribution distribution = this.properties.getDistribution().     return DistributionStatisticConfig.builder().percentilesHistogram(lookupWithFallbackToAll(distribution.getPercentilesHistogram(), id, null)).percentiles(lookupWithFallbackToAll(distribution.getPercentiles(), id, null)).sla(convertSla(id.getType(), lookup(distribution.getSla(), id, null))).minimumExpectedValue(convertMeterValue(id.getType(), lookup(distribution.getMinimumExpectedValue(), id, null))).maximumExpectedValue(convertMeterValue(id.getType(), lookup(distribution.getMaximumExpectedValue(), id, null))).build().merge(config). }
false;private;2;9;;private long[] convertSla(Meter.Type meterType, ServiceLevelAgreementBoundary[] sla) {     if (sla == null) {         return null.     }     long[] converted = Arrays.stream(sla).map((candidate) -> candidate.getValue(meterType)).filter(Objects::nonNull).mapToLong(Long::longValue).toArray().     return (converted.length != 0) ? converted : null. }
false;private;2;3;;private Long convertMeterValue(Meter.Type meterType, String value) {     return (value != null) ? MeterValue.valueOf(value).getValue(meterType) : null. }
false;private;3;6;;private <T> T lookup(Map<String, T> values, Id id, T defaultValue) {     if (values.isEmpty()) {         return defaultValue.     }     return doLookup(values, id, () -> defaultValue). }
false;private;3;6;;private <T> T lookupWithFallbackToAll(Map<String, T> values, Id id, T defaultValue) {     if (values.isEmpty()) {         return defaultValue.     }     return doLookup(values, id, () -> values.getOrDefault("all", defaultValue)). }
false;private;3;13;;private <T> T doLookup(Map<String, T> values, Id id, Supplier<T> defaultValue) {     String name = id.getName().     while (StringUtils.hasLength(name)) {         T result = values.get(name).         if (result != null) {             return result.         }         int lastDot = name.lastIndexOf('.').         name = (lastDot != -1) ? name.substring(0, lastDot) : "".     }     return defaultValue.get(). }
