commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Bean public PathMapper webEndpointPathMapper() {     return new MappingWebEndpointPathMapper(this.properties.getPathMapping()). }
false;public;0;5;;@Bean @ConditionalOnMissingBean public EndpointMediaTypes endpointMediaTypes() {     return new EndpointMediaTypes(MEDIA_TYPES, MEDIA_TYPES). }
false;public;5;14;;@Bean @ConditionalOnMissingBean(WebEndpointsSupplier.class) public WebEndpointDiscoverer webEndpointDiscoverer(ParameterValueMapper parameterValueMapper, EndpointMediaTypes endpointMediaTypes, ObjectProvider<PathMapper> endpointPathMappers, ObjectProvider<OperationInvokerAdvisor> invokerAdvisors, ObjectProvider<EndpointFilter<ExposableWebEndpoint>> filters) {     return new WebEndpointDiscoverer(this.applicationContext, parameterValueMapper, endpointMediaTypes, endpointPathMappers.orderedStream().collect(Collectors.toList()), invokerAdvisors.orderedStream().collect(Collectors.toList()), filters.orderedStream().collect(Collectors.toList())). }
false;public;2;9;;@Bean @ConditionalOnMissingBean(ControllerEndpointsSupplier.class) public ControllerEndpointDiscoverer controllerEndpointDiscoverer(ObjectProvider<PathMapper> endpointPathMappers, ObjectProvider<Collection<EndpointFilter<ExposableControllerEndpoint>>> filters) {     return new ControllerEndpointDiscoverer(this.applicationContext, endpointPathMappers.orderedStream().collect(Collectors.toList()), filters.getIfAvailable(Collections::emptyList)). }
false;public;2;8;;@Bean @ConditionalOnMissingBean public PathMappedEndpoints pathMappedEndpoints(Collection<EndpointsSupplier<?>> endpointSuppliers, WebEndpointProperties webEndpointProperties) {     return new PathMappedEndpoints(webEndpointProperties.getBasePath(), endpointSuppliers). }
false;public;0;6;;@Bean public ExposeExcludePropertyEndpointFilter<ExposableWebEndpoint> webExposeExcludePropertyEndpointFilter() {     WebEndpointProperties.Exposure exposure = this.properties.getExposure().     return new ExposeExcludePropertyEndpointFilter<>(ExposableWebEndpoint.class, exposure.getInclude(), exposure.getExclude(), "info", "health"). }
false;public;0;7;;@Bean public ExposeExcludePropertyEndpointFilter<ExposableControllerEndpoint> controllerExposeExcludePropertyEndpointFilter() {     WebEndpointProperties.Exposure exposure = this.properties.getExposure().     return new ExposeExcludePropertyEndpointFilter<>(ExposableControllerEndpoint.class, exposure.getInclude(), exposure.getExclude()). }
false;public;3;10;;@Bean @ConditionalOnMissingBean(ServletEndpointsSupplier.class) public ServletEndpointDiscoverer servletEndpointDiscoverer(ApplicationContext applicationContext, ObjectProvider<PathMapper> endpointPathMappers, ObjectProvider<EndpointFilter<ExposableServletEndpoint>> filters) {     return new ServletEndpointDiscoverer(applicationContext, endpointPathMappers.orderedStream().collect(Collectors.toList()), filters.orderedStream().collect(Collectors.toList())). }
