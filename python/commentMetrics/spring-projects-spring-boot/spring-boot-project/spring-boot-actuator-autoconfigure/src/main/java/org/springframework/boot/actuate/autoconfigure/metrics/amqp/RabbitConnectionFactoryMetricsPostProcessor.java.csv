commented;modifiers;parameterAmount;loc;comment;code
false;public;2;8;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) {     if (bean instanceof AbstractConnectionFactory) {         bindConnectionFactoryToRegistry(getMeterRegistry(), beanName, (AbstractConnectionFactory) bean).     }     return bean. }
false;private;3;8;;private void bindConnectionFactoryToRegistry(MeterRegistry registry, String beanName, AbstractConnectionFactory connectionFactory) {     ConnectionFactory rabbitConnectionFactory = connectionFactory.getRabbitConnectionFactory().     String connectionFactoryName = getConnectionFactoryName(beanName).     new RabbitMetrics(rabbitConnectionFactory, Tags.of("name", connectionFactoryName)).bindTo(registry). }
true;private;1;8;/**  * Get the name of a ConnectionFactory based on its {@code beanName}.  * @param beanName the name of the connection factory bean  * @return a name for the given connection factory  */ ;/**  * Get the name of a ConnectionFactory based on its {@code beanName}.  * @param beanName the name of the connection factory bean  * @return a name for the given connection factory  */ private String getConnectionFactoryName(String beanName) {     if (beanName.length() > CONNECTION_FACTORY_SUFFIX.length() && StringUtils.endsWithIgnoreCase(beanName, CONNECTION_FACTORY_SUFFIX)) {         return beanName.substring(0, beanName.length() - CONNECTION_FACTORY_SUFFIX.length()).     }     return beanName. }
false;private;0;6;;private MeterRegistry getMeterRegistry() {     if (this.meterRegistry == null) {         this.meterRegistry = this.context.getBean(MeterRegistry.class).     }     return this.meterRegistry. }
false;public;0;4;;@Override public int getOrder() {     return Ordered.HIGHEST_PRECEDENCE. }
