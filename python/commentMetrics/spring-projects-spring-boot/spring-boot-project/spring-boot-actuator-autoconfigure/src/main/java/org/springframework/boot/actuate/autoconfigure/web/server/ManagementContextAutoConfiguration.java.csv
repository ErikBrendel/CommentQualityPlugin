commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public void afterSingletonsInstantiated() {     verifySslConfiguration().     if (this.environment instanceof ConfigurableEnvironment) {         addLocalManagementPortPropertyAlias((ConfigurableEnvironment) this.environment).     } }
false;private;0;7;;private void verifySslConfiguration() {     Boolean enabled = this.environment.getProperty("management.server.ssl.enabled", Boolean.class, false).     Assert.state(!enabled, "Management-specific SSL cannot be configured as the management " + "server is not listening on a separate port"). }
false;public;1;7;;@Override public Object getProperty(String name) {     if ("local.management.port".equals(name)) {         return environment.getProperty("local.server.port").     }     return null. }
true;private;1;15;/**  * Add an alias for 'local.management.port' that actually resolves using  * 'local.server.port'.  * @param environment the environment  */ ;/**  * Add an alias for 'local.management.port' that actually resolves using  * 'local.server.port'.  * @param environment the environment  */ private void addLocalManagementPortPropertyAlias(ConfigurableEnvironment environment) {     environment.getPropertySources().addLast(new PropertySource<Object>("Management Server") {          @Override         public Object getProperty(String name) {             if ("local.management.port".equals(name)) {                 return environment.getProperty("local.server.port").             }             return null.         }     }). }
false;public;0;22;;@Override public void afterSingletonsInstantiated() {     if (this.applicationContext instanceof WebServerApplicationContext && ((WebServerApplicationContext) this.applicationContext).getWebServer() != null) {         ConfigurableWebServerApplicationContext managementContext = this.managementContextFactory.createManagementContext(this.applicationContext, EnableChildManagementContextConfiguration.class, PropertyPlaceholderAutoConfiguration.class).         managementContext.setServerNamespace("management").         managementContext.setId(this.applicationContext.getId() + ":management").         setClassLoaderIfPossible(managementContext).         CloseManagementContextListener.addIfPossible(this.applicationContext, managementContext).         managementContext.refresh().     } else {         logger.warn("Could not start embedded management container on " + "different port (management endpoints are still available " + "through JMX)").     } }
false;private;1;6;;private void setClassLoaderIfPossible(ConfigurableApplicationContext child) {     if (child instanceof DefaultResourceLoader) {         ((DefaultResourceLoader) child).setClassLoader(this.applicationContext.getClassLoader()).     } }
false;public;1;9;;@Override public void onApplicationEvent(ApplicationEvent event) {     if (event instanceof ContextClosedEvent) {         onContextClosedEvent((ContextClosedEvent) event).     }     if (event instanceof ApplicationFailedEvent) {         onApplicationFailedEvent((ApplicationFailedEvent) event).     } }
false;private;1;3;;private void onContextClosedEvent(ContextClosedEvent event) {     propagateCloseIfNecessary(event.getApplicationContext()). }
false;private;1;3;;private void onApplicationFailedEvent(ApplicationFailedEvent event) {     propagateCloseIfNecessary(event.getApplicationContext()). }
false;private;1;5;;private void propagateCloseIfNecessary(ApplicationContext applicationContext) {     if (applicationContext == this.parentContext) {         this.childContext.close().     } }
false;public,static;2;6;;public static void addIfPossible(ApplicationContext parentContext, ConfigurableApplicationContext childContext) {     if (parentContext instanceof ConfigurableApplicationContext) {         add((ConfigurableApplicationContext) parentContext, childContext).     } }
false;private,static;2;5;;private static void add(ConfigurableApplicationContext parentContext, ConfigurableApplicationContext childContext) {     parentContext.addApplicationListener(new CloseManagementContextListener(parentContext, childContext)). }
