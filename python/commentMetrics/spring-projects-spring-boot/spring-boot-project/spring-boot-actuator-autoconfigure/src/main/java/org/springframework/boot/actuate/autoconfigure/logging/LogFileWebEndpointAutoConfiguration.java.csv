commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Bean @ConditionalOnMissingBean @Conditional(LogFileCondition.class) public LogFileWebEndpoint logFileWebEndpoint(Environment environment, LogFileWebEndpointProperties properties) {     return new LogFileWebEndpoint(environment, properties.getExternalFile()). }
false;public;2;26;;@SuppressWarnings("deprecation") @Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     Environment environment = context.getEnvironment().     String config = getLogFileConfig(environment, LogFile.FILE_NAME_PROPERTY, LogFile.FILE_PROPERTY).     ConditionMessage.Builder message = ConditionMessage.forCondition("Log File").     if (StringUtils.hasText(config)) {         return ConditionOutcome.match(message.found(LogFile.FILE_NAME_PROPERTY).items(config)).     }     config = getLogFileConfig(environment, LogFile.FILE_PATH_PROPERTY, LogFile.PATH_PROPERTY).     if (StringUtils.hasText(config)) {         return ConditionOutcome.match(message.found(LogFile.FILE_PATH_PROPERTY).items(config)).     }     config = environment.getProperty("management.endpoint.logfile.external-file").     if (StringUtils.hasText(config)) {         return ConditionOutcome.match(message.found("management.endpoint.logfile.external-file").items(config)).     }     return ConditionOutcome.noMatch(message.didNotFind("logging file").atAll()). }
false;private;3;8;;private String getLogFileConfig(Environment environment, String configName, String deprecatedConfigName) {     String config = environment.resolvePlaceholders("${" + configName + ":}").     if (StringUtils.hasText(config)) {         return config.     }     return environment.resolvePlaceholders("${" + deprecatedConfigName + ":}"). }
