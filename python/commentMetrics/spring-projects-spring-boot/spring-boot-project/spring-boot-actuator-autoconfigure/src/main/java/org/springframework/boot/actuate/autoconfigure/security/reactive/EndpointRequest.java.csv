commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Returns a matcher that includes all {@link Endpoint actuator endpoints}. It also  * includes the links endpoint which is present at the base path of the actuator  * endpoints. The {@link EndpointServerWebExchangeMatcher#excluding(Class...)  * excluding} method can be used to further remove specific endpoints if required. For  * example: <pre class="code">  * EndpointRequest.toAnyEndpoint().excluding(ShutdownEndpoint.class)  * </pre>  * @return the configured {@link ServerWebExchangeMatcher}  */ ;/**  * Returns a matcher that includes all {@link Endpoint actuator endpoints}. It also  * includes the links endpoint which is present at the base path of the actuator  * endpoints. The {@link EndpointServerWebExchangeMatcher#excluding(Class...)  * excluding} method can be used to further remove specific endpoints if required. For  * example: <pre class="code">  * EndpointRequest.toAnyEndpoint().excluding(ShutdownEndpoint.class)  * </pre>  * @return the configured {@link ServerWebExchangeMatcher}  */ public static EndpointServerWebExchangeMatcher toAnyEndpoint() {     return new EndpointServerWebExchangeMatcher(true). }
true;public,static;1;3;/**  * Returns a matcher that includes the specified {@link Endpoint actuator endpoints}.  * For example: <pre class="code">  * EndpointRequest.to(ShutdownEndpoint.class, HealthEndpoint.class)  * </pre>  * @param endpoints the endpoints to include  * @return the configured {@link ServerWebExchangeMatcher}  */ ;/**  * Returns a matcher that includes the specified {@link Endpoint actuator endpoints}.  * For example: <pre class="code">  * EndpointRequest.to(ShutdownEndpoint.class, HealthEndpoint.class)  * </pre>  * @param endpoints the endpoints to include  * @return the configured {@link ServerWebExchangeMatcher}  */ public static EndpointServerWebExchangeMatcher to(Class<?>... endpoints) {     return new EndpointServerWebExchangeMatcher(endpoints, false). }
true;public,static;1;3;/**  * Returns a matcher that includes the specified {@link Endpoint actuator endpoints}.  * For example: <pre class="code">  * EndpointRequest.to("shutdown", "health")  * </pre>  * @param endpoints the endpoints to include  * @return the configured {@link ServerWebExchangeMatcher}  */ ;/**  * Returns a matcher that includes the specified {@link Endpoint actuator endpoints}.  * For example: <pre class="code">  * EndpointRequest.to("shutdown", "health")  * </pre>  * @param endpoints the endpoints to include  * @return the configured {@link ServerWebExchangeMatcher}  */ public static EndpointServerWebExchangeMatcher to(String... endpoints) {     return new EndpointServerWebExchangeMatcher(endpoints, false). }
true;public,static;0;3;/**  * Returns a matcher that matches only on the links endpoint. It can be used when  * security configuration for the links endpoint is different from the other  * {@link Endpoint actuator endpoints}. The  * {@link EndpointServerWebExchangeMatcher#excludingLinks() excludingLinks} method can  * be used in combination with this to remove the links endpoint from  * {@link EndpointRequest#toAnyEndpoint() toAnyEndpoint}. For example:  * <pre class="code">  * EndpointRequest.toLinks()  * </pre>  * @return the configured {@link ServerWebExchangeMatcher}  */ ;/**  * Returns a matcher that matches only on the links endpoint. It can be used when  * security configuration for the links endpoint is different from the other  * {@link Endpoint actuator endpoints}. The  * {@link EndpointServerWebExchangeMatcher#excludingLinks() excludingLinks} method can  * be used in combination with this to remove the links endpoint from  * {@link EndpointRequest#toAnyEndpoint() toAnyEndpoint}. For example:  * <pre class="code">  * EndpointRequest.toLinks()  * </pre>  * @return the configured {@link ServerWebExchangeMatcher}  */ public static LinksServerWebExchangeMatcher toLinks() {     return new LinksServerWebExchangeMatcher(). }
false;public;1;6;;public EndpointServerWebExchangeMatcher excluding(Class<?>... endpoints) {     List<Object> excludes = new ArrayList<>(this.excludes).     excludes.addAll(Arrays.asList((Object[]) endpoints)).     return new EndpointServerWebExchangeMatcher(this.includes, excludes, this.includeLinks). }
false;public;1;6;;public EndpointServerWebExchangeMatcher excluding(String... endpoints) {     List<Object> excludes = new ArrayList<>(this.excludes).     excludes.addAll(Arrays.asList((Object[]) endpoints)).     return new EndpointServerWebExchangeMatcher(this.includes, excludes, this.includeLinks). }
false;public;0;4;;public EndpointServerWebExchangeMatcher excludingLinks() {     return new EndpointServerWebExchangeMatcher(this.includes, this.excludes, false). }
false;protected;1;4;;@Override protected void initialized(Supplier<PathMappedEndpoints> pathMappedEndpoints) {     this.delegate = createDelegate(pathMappedEndpoints). }
false;private;1;9;;private ServerWebExchangeMatcher createDelegate(Supplier<PathMappedEndpoints> pathMappedEndpoints) {     try {         return createDelegate(pathMappedEndpoints.get()).     } catch (NoSuchBeanDefinitionException ex) {         return EMPTY_MATCHER.     } }
false;private;1;16;;private ServerWebExchangeMatcher createDelegate(PathMappedEndpoints pathMappedEndpoints) {     Set<String> paths = new LinkedHashSet<>().     if (this.includes.isEmpty()) {         paths.addAll(pathMappedEndpoints.getAllPaths()).     }     streamPaths(this.includes, pathMappedEndpoints).forEach(paths::add).     streamPaths(this.excludes, pathMappedEndpoints).forEach(paths::remove).     List<ServerWebExchangeMatcher> delegateMatchers = getDelegateMatchers(paths).     if (this.includeLinks && StringUtils.hasText(pathMappedEndpoints.getBasePath())) {         delegateMatchers.add(new PathPatternParserServerWebExchangeMatcher(pathMappedEndpoints.getBasePath())).     }     return new OrServerWebExchangeMatcher(delegateMatchers). }
false;private;2;5;;private Stream<String> streamPaths(List<Object> source, PathMappedEndpoints pathMappedEndpoints) {     return source.stream().filter(Objects::nonNull).map(this::getEndpointId).map(pathMappedEndpoints::getPath). }
false;private;1;12;;private EndpointId getEndpointId(Object source) {     if (source instanceof EndpointId) {         return (EndpointId) source.     }     if (source instanceof String) {         return (EndpointId.of((String) source)).     }     if (source instanceof Class) {         return getEndpointId((Class<?>) source).     }     throw new IllegalStateException("Unsupported source " + source). }
false;private;1;7;;private EndpointId getEndpointId(Class<?> source) {     Endpoint annotation = AnnotatedElementUtils.getMergedAnnotation(source, Endpoint.class).     Assert.state(annotation != null, () -> "Class " + source + " is not annotated with @Endpoint").     return EndpointId.of(annotation.id()). }
false;private;1;5;;private List<ServerWebExchangeMatcher> getDelegateMatchers(Set<String> paths) {     return paths.stream().map((path) -> new PathPatternParserServerWebExchangeMatcher(path + "/**")).collect(Collectors.toList()). }
false;protected;2;8;;@Override protected Mono<MatchResult> matches(ServerWebExchange exchange, Supplier<PathMappedEndpoints> context) {     if (!isManagementContext(exchange)) {         return MatchResult.notMatch().     }     return this.delegate.matches(exchange). }
false;static;1;15;;static boolean isManagementContext(ServerWebExchange exchange) {     ApplicationContext applicationContext = exchange.getApplicationContext().     if (ManagementPortType.get(applicationContext.getEnvironment()) == ManagementPortType.DIFFERENT) {         if (applicationContext.getParent() == null) {             return false.         }         String managementContextId = applicationContext.getParent().getId() + ":management".         if (!managementContextId.equals(applicationContext.getId())) {             return false.         }     }     return true. }
false;protected;1;4;;@Override protected void initialized(Supplier<WebEndpointProperties> properties) {     this.delegate = createDelegate(properties.get()). }
false;private;1;8;;private ServerWebExchangeMatcher createDelegate(WebEndpointProperties properties) {     if (StringUtils.hasText(properties.getBasePath())) {         return new PathPatternParserServerWebExchangeMatcher(properties.getBasePath()).     }     return EMPTY_MATCHER. }
false;protected;2;8;;@Override protected Mono<MatchResult> matches(ServerWebExchange exchange, Supplier<WebEndpointProperties> context) {     if (!EndpointServerWebExchangeMatcher.isManagementContext(exchange)) {         return MatchResult.notMatch().     }     return this.delegate.matches(exchange). }
