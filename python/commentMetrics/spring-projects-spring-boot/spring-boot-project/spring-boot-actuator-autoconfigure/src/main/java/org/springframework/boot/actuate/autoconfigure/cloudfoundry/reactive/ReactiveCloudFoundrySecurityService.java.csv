# id;timestamp;commentText;codeText;commentWords;codeWords
ReactiveCloudFoundrySecurityService -> public Mono<String> getUaaUrl();1509670855;Return a Mono of URL of the UAA._@return the UAA url Mono;public Mono<String> getUaaUrl() {_		this.uaaUrl	= this.webClient_				.get().uri(this.cloudControllerUrl + "/info")_				.retrieve().bodyToMono(Map.class)_				.map(response -> (String) response.get("token_endpoint")).cache()_				.onErrorMap(throwable -> new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE,_						"Unable to fetch token keys from UAA."))__		return this.uaaUrl__	};return,a,mono,of,url,of,the,uaa,return,the,uaa,url,mono;public,mono,string,get,uaa,url,this,uaa,url,this,web,client,get,uri,this,cloud,controller,url,info,retrieve,body,to,mono,map,class,map,response,string,response,get,cache,on,error,map,throwable,new,cloud,foundry,authorization,exception,reason,unable,to,fetch,token,keys,from,uaa,return,this,uaa,url
ReactiveCloudFoundrySecurityService -> public Mono<String> getUaaUrl();1509693182;Return a Mono of URL of the UAA._@return the UAA url Mono;public Mono<String> getUaaUrl() {_		this.uaaUrl = this.webClient.get().uri(this.cloudControllerUrl + "/info")_				.retrieve().bodyToMono(Map.class)_				.map((response) -> (String) response.get("token_endpoint")).cache()_				.onErrorMap((ex) -> new CloudFoundryAuthorizationException(_						Reason.SERVICE_UNAVAILABLE,_						"Unable to fetch token keys from UAA."))__		return this.uaaUrl__	};return,a,mono,of,url,of,the,uaa,return,the,uaa,url,mono;public,mono,string,get,uaa,url,this,uaa,url,this,web,client,get,uri,this,cloud,controller,url,info,retrieve,body,to,mono,map,class,map,response,string,response,get,cache,on,error,map,ex,new,cloud,foundry,authorization,exception,reason,unable,to,fetch,token,keys,from,uaa,return,this,uaa,url
ReactiveCloudFoundrySecurityService -> public Mono<String> getUaaUrl();1518194789;Return a Mono of URL of the UAA._@return the UAA url Mono;public Mono<String> getUaaUrl() {_		this.uaaUrl = this.webClient.get().uri(this.cloudControllerUrl + "/info")_				.retrieve().bodyToMono(Map.class)_				.map((response) -> (String) response.get("token_endpoint")).cache()_				.onErrorMap((ex) -> new CloudFoundryAuthorizationException(_						Reason.SERVICE_UNAVAILABLE,_						"Unable to fetch token keys from UAA."))__		return this.uaaUrl__	};return,a,mono,of,url,of,the,uaa,return,the,uaa,url,mono;public,mono,string,get,uaa,url,this,uaa,url,this,web,client,get,uri,this,cloud,controller,url,info,retrieve,body,to,mono,map,class,map,response,string,response,get,cache,on,error,map,ex,new,cloud,foundry,authorization,exception,reason,unable,to,fetch,token,keys,from,uaa,return,this,uaa,url
ReactiveCloudFoundrySecurityService -> public Mono<String> getUaaUrl();1518204713;Return a Mono of URL of the UAA._@return the UAA url Mono;public Mono<String> getUaaUrl() {_		this.uaaUrl = this.webClient.get().uri(this.cloudControllerUrl + "/info")_				.retrieve().bodyToMono(Map.class)_				.map((response) -> (String) response.get("token_endpoint")).cache()_				.onErrorMap((ex) -> new CloudFoundryAuthorizationException(_						Reason.SERVICE_UNAVAILABLE,_						"Unable to fetch token keys from UAA."))__		return this.uaaUrl__	};return,a,mono,of,url,of,the,uaa,return,the,uaa,url,mono;public,mono,string,get,uaa,url,this,uaa,url,this,web,client,get,uri,this,cloud,controller,url,info,retrieve,body,to,mono,map,class,map,response,string,response,get,cache,on,error,map,ex,new,cloud,foundry,authorization,exception,reason,unable,to,fetch,token,keys,from,uaa,return,this,uaa,url
ReactiveCloudFoundrySecurityService -> public Mono<String> getUaaUrl();1521300485;Return a Mono of URL of the UAA._@return the UAA url Mono;public Mono<String> getUaaUrl() {_		this.uaaUrl = this.webClient.get().uri(this.cloudControllerUrl + "/info")_				.retrieve().bodyToMono(Map.class)_				.map((response) -> (String) response.get("token_endpoint")).cache()_				.onErrorMap((ex) -> new CloudFoundryAuthorizationException(_						Reason.SERVICE_UNAVAILABLE,_						"Unable to fetch token keys from UAA."))__		return this.uaaUrl__	};return,a,mono,of,url,of,the,uaa,return,the,uaa,url,mono;public,mono,string,get,uaa,url,this,uaa,url,this,web,client,get,uri,this,cloud,controller,url,info,retrieve,body,to,mono,map,class,map,response,string,response,get,cache,on,error,map,ex,new,cloud,foundry,authorization,exception,reason,unable,to,fetch,token,keys,from,uaa,return,this,uaa,url
ReactiveCloudFoundrySecurityService -> public Mono<String> getUaaUrl();1528131557;Return a Mono of URL of the UAA._@return the UAA url Mono;public Mono<String> getUaaUrl() {_		this.uaaUrl = this.webClient.get().uri(this.cloudControllerUrl + "/info")_				.retrieve().bodyToMono(Map.class)_				.map((response) -> (String) response.get("token_endpoint")).cache()_				.onErrorMap((ex) -> new CloudFoundryAuthorizationException(_						Reason.SERVICE_UNAVAILABLE,_						"Unable to fetch token keys from UAA."))__		return this.uaaUrl__	};return,a,mono,of,url,of,the,uaa,return,the,uaa,url,mono;public,mono,string,get,uaa,url,this,uaa,url,this,web,client,get,uri,this,cloud,controller,url,info,retrieve,body,to,mono,map,class,map,response,string,response,get,cache,on,error,map,ex,new,cloud,foundry,authorization,exception,reason,unable,to,fetch,token,keys,from,uaa,return,this,uaa,url
ReactiveCloudFoundrySecurityService -> public Mono<String> getUaaUrl();1528245891;Return a Mono of URL of the UAA._@return the UAA url Mono;public Mono<String> getUaaUrl() {_		this.uaaUrl = this.webClient.get().uri(this.cloudControllerUrl + "/info")_				.retrieve().bodyToMono(Map.class)_				.map((response) -> (String) response.get("token_endpoint")).cache()_				.onErrorMap((ex) -> new CloudFoundryAuthorizationException(_						Reason.SERVICE_UNAVAILABLE,_						"Unable to fetch token keys from UAA."))__		return this.uaaUrl__	};return,a,mono,of,url,of,the,uaa,return,the,uaa,url,mono;public,mono,string,get,uaa,url,this,uaa,url,this,web,client,get,uri,this,cloud,controller,url,info,retrieve,body,to,mono,map,class,map,response,string,response,get,cache,on,error,map,ex,new,cloud,foundry,authorization,exception,reason,unable,to,fetch,token,keys,from,uaa,return,this,uaa,url
ReactiveCloudFoundrySecurityService -> public Mono<String> getUaaUrl();1530881147;Return a Mono of URL of the UAA._@return the UAA url Mono;public Mono<String> getUaaUrl() {_		this.uaaUrl = this.webClient.get().uri(this.cloudControllerUrl + "/info")_				.retrieve().bodyToMono(Map.class)_				.map((response) -> (String) response.get("token_endpoint")).cache()_				.onErrorMap((ex) -> new CloudFoundryAuthorizationException(_						Reason.SERVICE_UNAVAILABLE,_						"Unable to fetch token keys from UAA."))__		return this.uaaUrl__	};return,a,mono,of,url,of,the,uaa,return,the,uaa,url,mono;public,mono,string,get,uaa,url,this,uaa,url,this,web,client,get,uri,this,cloud,controller,url,info,retrieve,body,to,mono,map,class,map,response,string,response,get,cache,on,error,map,ex,new,cloud,foundry,authorization,exception,reason,unable,to,fetch,token,keys,from,uaa,return,this,uaa,url
ReactiveCloudFoundrySecurityService -> public Mono<Map<String, String>> fetchTokenKeys();1509670855;Return a Mono of all token keys known by the UAA._@return a Mono of token keys;public Mono<Map<String, String>> fetchTokenKeys() {_		return getUaaUrl()_					.flatMap(url -> this.webClient.get()_						.uri(url + "/token_keys")_						.retrieve().bodyToMono(new ParameterizedTypeReference<Map<String, Object>>() { })_						.map(this::extractTokenKeys)_						.onErrorMap((throwable -> new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE,_								throwable.getMessage()))))___	};return,a,mono,of,all,token,keys,known,by,the,uaa,return,a,mono,of,token,keys;public,mono,map,string,string,fetch,token,keys,return,get,uaa,url,flat,map,url,this,web,client,get,uri,url,retrieve,body,to,mono,new,parameterized,type,reference,map,string,object,map,this,extract,token,keys,on,error,map,throwable,new,cloud,foundry,authorization,exception,reason,throwable,get,message
ReactiveCloudFoundrySecurityService -> public Mono<Map<String, String>> fetchTokenKeys();1509693182;Return a Mono of all token keys known by the UAA._@return a Mono of token keys;public Mono<Map<String, String>> fetchTokenKeys() {_		return getUaaUrl().flatMap(this::fetchTokenKeys)__	};return,a,mono,of,all,token,keys,known,by,the,uaa,return,a,mono,of,token,keys;public,mono,map,string,string,fetch,token,keys,return,get,uaa,url,flat,map,this,fetch,token,keys
ReactiveCloudFoundrySecurityService -> public Mono<Map<String, String>> fetchTokenKeys();1518194789;Return a Mono of all token keys known by the UAA._@return a Mono of token keys;public Mono<Map<String, String>> fetchTokenKeys() {_		return getUaaUrl().flatMap(this::fetchTokenKeys)__	};return,a,mono,of,all,token,keys,known,by,the,uaa,return,a,mono,of,token,keys;public,mono,map,string,string,fetch,token,keys,return,get,uaa,url,flat,map,this,fetch,token,keys
ReactiveCloudFoundrySecurityService -> public Mono<Map<String, String>> fetchTokenKeys();1518204713;Return a Mono of all token keys known by the UAA._@return a Mono of token keys;public Mono<Map<String, String>> fetchTokenKeys() {_		return getUaaUrl().flatMap(this::fetchTokenKeys)__	};return,a,mono,of,all,token,keys,known,by,the,uaa,return,a,mono,of,token,keys;public,mono,map,string,string,fetch,token,keys,return,get,uaa,url,flat,map,this,fetch,token,keys
ReactiveCloudFoundrySecurityService -> public Mono<Map<String, String>> fetchTokenKeys();1521300485;Return a Mono of all token keys known by the UAA._@return a Mono of token keys;public Mono<Map<String, String>> fetchTokenKeys() {_		return getUaaUrl().flatMap(this::fetchTokenKeys)__	};return,a,mono,of,all,token,keys,known,by,the,uaa,return,a,mono,of,token,keys;public,mono,map,string,string,fetch,token,keys,return,get,uaa,url,flat,map,this,fetch,token,keys
ReactiveCloudFoundrySecurityService -> public Mono<Map<String, String>> fetchTokenKeys();1528131557;Return a Mono of all token keys known by the UAA._@return a Mono of token keys;public Mono<Map<String, String>> fetchTokenKeys() {_		return getUaaUrl().flatMap(this::fetchTokenKeys)__	};return,a,mono,of,all,token,keys,known,by,the,uaa,return,a,mono,of,token,keys;public,mono,map,string,string,fetch,token,keys,return,get,uaa,url,flat,map,this,fetch,token,keys
ReactiveCloudFoundrySecurityService -> public Mono<Map<String, String>> fetchTokenKeys();1528245891;Return a Mono of all token keys known by the UAA._@return a Mono of token keys;public Mono<Map<String, String>> fetchTokenKeys() {_		return getUaaUrl().flatMap(this::fetchTokenKeys)__	};return,a,mono,of,all,token,keys,known,by,the,uaa,return,a,mono,of,token,keys;public,mono,map,string,string,fetch,token,keys,return,get,uaa,url,flat,map,this,fetch,token,keys
ReactiveCloudFoundrySecurityService -> public Mono<Map<String, String>> fetchTokenKeys();1530881147;Return a Mono of all token keys known by the UAA._@return a Mono of token keys;public Mono<Map<String, String>> fetchTokenKeys() {_		return getUaaUrl().flatMap(this::fetchTokenKeys)__	};return,a,mono,of,all,token,keys,known,by,the,uaa,return,a,mono,of,token,keys;public,mono,map,string,string,fetch,token,keys,return,get,uaa,url,flat,map,this,fetch,token,keys
ReactiveCloudFoundrySecurityService -> public Mono<AccessLevel> getAccessLevel(String token, String applicationId) 			throws CloudFoundryAuthorizationException;1509670855;Return a Mono of the access level that should be granted to the given token._@param token the token_@param applicationId the cloud foundry application ID_@return a Mono of the access level that should be granted_@throws CloudFoundryAuthorizationException if the token is not authorized;public Mono<AccessLevel> getAccessLevel(String token, String applicationId)_			throws CloudFoundryAuthorizationException {_		String uri = getPermissionsUri(applicationId)__		return this.webClient.get().uri(uri)_				.header("Authorization", "bearer " + token)_				.retrieve().bodyToMono(Map.class)_				.map(this::getAccessLevel)_				.onErrorMap(throwable -> {_					if (throwable instanceof WebClientResponseException) {_						HttpStatus statusCode = ((WebClientResponseException) throwable).getStatusCode()__						if (statusCode.equals(HttpStatus.FORBIDDEN)) {_							return new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED,_									"Access denied")__						}_						if (statusCode.is4xxClientError()) {_							return new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN,_									"Invalid token", throwable)__						}_					}_					return new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE,_							"Cloud controller not reachable")__				})__	};return,a,mono,of,the,access,level,that,should,be,granted,to,the,given,token,param,token,the,token,param,application,id,the,cloud,foundry,application,id,return,a,mono,of,the,access,level,that,should,be,granted,throws,cloud,foundry,authorization,exception,if,the,token,is,not,authorized;public,mono,access,level,get,access,level,string,token,string,application,id,throws,cloud,foundry,authorization,exception,string,uri,get,permissions,uri,application,id,return,this,web,client,get,uri,uri,header,authorization,bearer,token,retrieve,body,to,mono,map,class,map,this,get,access,level,on,error,map,throwable,if,throwable,instanceof,web,client,response,exception,http,status,status,code,web,client,response,exception,throwable,get,status,code,if,status,code,equals,http,status,forbidden,return,new,cloud,foundry,authorization,exception,reason,access,denied,if,status,code,is4xx,client,error,return,new,cloud,foundry,authorization,exception,reason,invalid,token,throwable,return,new,cloud,foundry,authorization,exception,reason,cloud,controller,not,reachable
ReactiveCloudFoundrySecurityService -> public Mono<AccessLevel> getAccessLevel(String token, String applicationId) 			throws CloudFoundryAuthorizationException;1509693182;Return a Mono of the access level that should be granted to the given token._@param token the token_@param applicationId the cloud foundry application ID_@return a Mono of the access level that should be granted_@throws CloudFoundryAuthorizationException if the token is not authorized;public Mono<AccessLevel> getAccessLevel(String token, String applicationId)_			throws CloudFoundryAuthorizationException {_		String uri = getPermissionsUri(applicationId)__		return this.webClient.get().uri(uri).header("Authorization", "bearer " + token)_				.retrieve().bodyToMono(Map.class).map(this::getAccessLevel)_				.onErrorMap(this::mapError)__	};return,a,mono,of,the,access,level,that,should,be,granted,to,the,given,token,param,token,the,token,param,application,id,the,cloud,foundry,application,id,return,a,mono,of,the,access,level,that,should,be,granted,throws,cloud,foundry,authorization,exception,if,the,token,is,not,authorized;public,mono,access,level,get,access,level,string,token,string,application,id,throws,cloud,foundry,authorization,exception,string,uri,get,permissions,uri,application,id,return,this,web,client,get,uri,uri,header,authorization,bearer,token,retrieve,body,to,mono,map,class,map,this,get,access,level,on,error,map,this,map,error
ReactiveCloudFoundrySecurityService -> public Mono<AccessLevel> getAccessLevel(String token, String applicationId) 			throws CloudFoundryAuthorizationException;1518194789;Return a Mono of the access level that should be granted to the given token._@param token the token_@param applicationId the cloud foundry application ID_@return a Mono of the access level that should be granted_@throws CloudFoundryAuthorizationException if the token is not authorized;public Mono<AccessLevel> getAccessLevel(String token, String applicationId)_			throws CloudFoundryAuthorizationException {_		String uri = getPermissionsUri(applicationId)__		return this.webClient.get().uri(uri).header("Authorization", "bearer " + token)_				.retrieve().bodyToMono(Map.class).map(this::getAccessLevel)_				.onErrorMap(this::mapError)__	};return,a,mono,of,the,access,level,that,should,be,granted,to,the,given,token,param,token,the,token,param,application,id,the,cloud,foundry,application,id,return,a,mono,of,the,access,level,that,should,be,granted,throws,cloud,foundry,authorization,exception,if,the,token,is,not,authorized;public,mono,access,level,get,access,level,string,token,string,application,id,throws,cloud,foundry,authorization,exception,string,uri,get,permissions,uri,application,id,return,this,web,client,get,uri,uri,header,authorization,bearer,token,retrieve,body,to,mono,map,class,map,this,get,access,level,on,error,map,this,map,error
ReactiveCloudFoundrySecurityService -> public Mono<AccessLevel> getAccessLevel(String token, String applicationId) 			throws CloudFoundryAuthorizationException;1518204713;Return a Mono of the access level that should be granted to the given token._@param token the token_@param applicationId the cloud foundry application ID_@return a Mono of the access level that should be granted_@throws CloudFoundryAuthorizationException if the token is not authorized;public Mono<AccessLevel> getAccessLevel(String token, String applicationId)_			throws CloudFoundryAuthorizationException {_		String uri = getPermissionsUri(applicationId)__		return this.webClient.get().uri(uri).header("Authorization", "bearer " + token)_				.retrieve().bodyToMono(Map.class).map(this::getAccessLevel)_				.onErrorMap(this::mapError)__	};return,a,mono,of,the,access,level,that,should,be,granted,to,the,given,token,param,token,the,token,param,application,id,the,cloud,foundry,application,id,return,a,mono,of,the,access,level,that,should,be,granted,throws,cloud,foundry,authorization,exception,if,the,token,is,not,authorized;public,mono,access,level,get,access,level,string,token,string,application,id,throws,cloud,foundry,authorization,exception,string,uri,get,permissions,uri,application,id,return,this,web,client,get,uri,uri,header,authorization,bearer,token,retrieve,body,to,mono,map,class,map,this,get,access,level,on,error,map,this,map,error
ReactiveCloudFoundrySecurityService -> public Mono<AccessLevel> getAccessLevel(String token, String applicationId) 			throws CloudFoundryAuthorizationException;1521300485;Return a Mono of the access level that should be granted to the given token._@param token the token_@param applicationId the cloud foundry application ID_@return a Mono of the access level that should be granted_@throws CloudFoundryAuthorizationException if the token is not authorized;public Mono<AccessLevel> getAccessLevel(String token, String applicationId)_			throws CloudFoundryAuthorizationException {_		String uri = getPermissionsUri(applicationId)__		return this.webClient.get().uri(uri).header("Authorization", "bearer " + token)_				.retrieve().bodyToMono(Map.class).map(this::getAccessLevel)_				.onErrorMap(this::mapError)__	};return,a,mono,of,the,access,level,that,should,be,granted,to,the,given,token,param,token,the,token,param,application,id,the,cloud,foundry,application,id,return,a,mono,of,the,access,level,that,should,be,granted,throws,cloud,foundry,authorization,exception,if,the,token,is,not,authorized;public,mono,access,level,get,access,level,string,token,string,application,id,throws,cloud,foundry,authorization,exception,string,uri,get,permissions,uri,application,id,return,this,web,client,get,uri,uri,header,authorization,bearer,token,retrieve,body,to,mono,map,class,map,this,get,access,level,on,error,map,this,map,error
ReactiveCloudFoundrySecurityService -> public Mono<AccessLevel> getAccessLevel(String token, String applicationId) 			throws CloudFoundryAuthorizationException;1528131557;Return a Mono of the access level that should be granted to the given token._@param token the token_@param applicationId the cloud foundry application ID_@return a Mono of the access level that should be granted_@throws CloudFoundryAuthorizationException if the token is not authorized;public Mono<AccessLevel> getAccessLevel(String token, String applicationId)_			throws CloudFoundryAuthorizationException {_		String uri = getPermissionsUri(applicationId)__		return this.webClient.get().uri(uri).header("Authorization", "bearer " + token)_				.retrieve().bodyToMono(Map.class).map(this::getAccessLevel)_				.onErrorMap(this::mapError)__	};return,a,mono,of,the,access,level,that,should,be,granted,to,the,given,token,param,token,the,token,param,application,id,the,cloud,foundry,application,id,return,a,mono,of,the,access,level,that,should,be,granted,throws,cloud,foundry,authorization,exception,if,the,token,is,not,authorized;public,mono,access,level,get,access,level,string,token,string,application,id,throws,cloud,foundry,authorization,exception,string,uri,get,permissions,uri,application,id,return,this,web,client,get,uri,uri,header,authorization,bearer,token,retrieve,body,to,mono,map,class,map,this,get,access,level,on,error,map,this,map,error
ReactiveCloudFoundrySecurityService -> public Mono<AccessLevel> getAccessLevel(String token, String applicationId) 			throws CloudFoundryAuthorizationException;1528245891;Return a Mono of the access level that should be granted to the given token._@param token the token_@param applicationId the cloud foundry application ID_@return a Mono of the access level that should be granted_@throws CloudFoundryAuthorizationException if the token is not authorized;public Mono<AccessLevel> getAccessLevel(String token, String applicationId)_			throws CloudFoundryAuthorizationException {_		String uri = getPermissionsUri(applicationId)__		return this.webClient.get().uri(uri).header("Authorization", "bearer " + token)_				.retrieve().bodyToMono(Map.class).map(this::getAccessLevel)_				.onErrorMap(this::mapError)__	};return,a,mono,of,the,access,level,that,should,be,granted,to,the,given,token,param,token,the,token,param,application,id,the,cloud,foundry,application,id,return,a,mono,of,the,access,level,that,should,be,granted,throws,cloud,foundry,authorization,exception,if,the,token,is,not,authorized;public,mono,access,level,get,access,level,string,token,string,application,id,throws,cloud,foundry,authorization,exception,string,uri,get,permissions,uri,application,id,return,this,web,client,get,uri,uri,header,authorization,bearer,token,retrieve,body,to,mono,map,class,map,this,get,access,level,on,error,map,this,map,error
ReactiveCloudFoundrySecurityService -> public Mono<AccessLevel> getAccessLevel(String token, String applicationId) 			throws CloudFoundryAuthorizationException;1530881147;Return a Mono of the access level that should be granted to the given token._@param token the token_@param applicationId the cloud foundry application ID_@return a Mono of the access level that should be granted_@throws CloudFoundryAuthorizationException if the token is not authorized;public Mono<AccessLevel> getAccessLevel(String token, String applicationId)_			throws CloudFoundryAuthorizationException {_		String uri = getPermissionsUri(applicationId)__		return this.webClient.get().uri(uri).header("Authorization", "bearer " + token)_				.retrieve().bodyToMono(Map.class).map(this::getAccessLevel)_				.onErrorMap(this::mapError)__	};return,a,mono,of,the,access,level,that,should,be,granted,to,the,given,token,param,token,the,token,param,application,id,the,cloud,foundry,application,id,return,a,mono,of,the,access,level,that,should,be,granted,throws,cloud,foundry,authorization,exception,if,the,token,is,not,authorized;public,mono,access,level,get,access,level,string,token,string,application,id,throws,cloud,foundry,authorization,exception,string,uri,get,permissions,uri,application,id,return,this,web,client,get,uri,uri,header,authorization,bearer,token,retrieve,body,to,mono,map,class,map,this,get,access,level,on,error,map,this,map,error
