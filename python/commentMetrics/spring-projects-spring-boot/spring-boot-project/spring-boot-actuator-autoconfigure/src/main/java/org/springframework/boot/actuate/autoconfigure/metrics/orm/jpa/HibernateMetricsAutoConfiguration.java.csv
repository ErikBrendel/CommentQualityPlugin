commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@Autowired public void bindEntityManagerFactoriesToRegistry(Map<String, EntityManagerFactory> entityManagerFactories, MeterRegistry registry) {     entityManagerFactories.forEach((name, factory) -> bindEntityManagerFactoryToRegistry(name, factory, registry)). }
false;private;3;11;;private void bindEntityManagerFactoryToRegistry(String beanName, EntityManagerFactory entityManagerFactory, MeterRegistry registry) {     String entityManagerFactoryName = getEntityManagerFactoryName(beanName).     try {         new HibernateMetrics(entityManagerFactory.unwrap(SessionFactory.class), entityManagerFactoryName, Collections.emptyList()).bindTo(registry).     } catch (PersistenceException ex) {     // Continue     } }
true;private;1;8;/**  * Get the name of an {@link EntityManagerFactory} based on its {@code beanName}.  * @param beanName the name of the {@link EntityManagerFactory} bean  * @return a name for the given entity manager factory  */ ;/**  * Get the name of an {@link EntityManagerFactory} based on its {@code beanName}.  * @param beanName the name of the {@link EntityManagerFactory} bean  * @return a name for the given entity manager factory  */ private String getEntityManagerFactoryName(String beanName) {     if (beanName.length() > ENTITY_MANAGER_FACTORY_SUFFIX.length() && StringUtils.endsWithIgnoreCase(beanName, ENTITY_MANAGER_FACTORY_SUFFIX)) {         return beanName.substring(0, beanName.length() - ENTITY_MANAGER_FACTORY_SUFFIX.length()).     }     return beanName. }
