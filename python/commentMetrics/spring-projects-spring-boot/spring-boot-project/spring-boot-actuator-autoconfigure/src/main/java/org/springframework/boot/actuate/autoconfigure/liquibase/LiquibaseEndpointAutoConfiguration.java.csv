commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Bean @ConditionalOnBean(SpringLiquibase.class) @ConditionalOnMissingBean public LiquibaseEndpoint liquibaseEndpoint(ApplicationContext context) {     return new LiquibaseEndpoint(context). }
false;public;2;9;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     if (bean instanceof DataSourceClosingSpringLiquibase) {         ((DataSourceClosingSpringLiquibase) bean).setCloseDataSourceOnceMigrated(false).     }     return bean. }
false;public;2;5;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     return bean. }
false;public,static;0;23;;@Bean @ConditionalOnBean(SpringLiquibase.class) public static BeanPostProcessor preventDataSourceCloseBeanPostProcessor() {     return new BeanPostProcessor() {          @Override         public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {             if (bean instanceof DataSourceClosingSpringLiquibase) {                 ((DataSourceClosingSpringLiquibase) bean).setCloseDataSourceOnceMigrated(false).             }             return bean.         }          @Override         public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {             return bean.         }     }. }
