commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Bean @ConditionalOnMissingBean(WebFluxTagsProvider.class) public DefaultWebFluxTagsProvider webfluxTagConfigurer() {     return new DefaultWebFluxTagsProvider(). }
false;public;2;7;;@Bean public MetricsWebFilter webfluxMetrics(MeterRegistry registry, WebFluxTagsProvider tagConfigurer) {     return new MetricsWebFilter(registry, tagConfigurer, this.properties.getWeb().getServer().getRequestsMetricName(), this.properties.getWeb().getServer().isAutoTimeRequests()). }
false;public;0;9;;@Bean @Order(0) public MeterFilter metricsHttpServerUriTagFilter() {     String metricName = this.properties.getWeb().getServer().getRequestsMetricName().     MeterFilter filter = new OnlyOnceLoggingDenyMeterFilter(() -> String.format("Reached the maximum number of URI tags for '%s'.", metricName)).     return MeterFilter.maximumAllowableTags(metricName, "uri", this.properties.getWeb().getServer().getMaxUriTags(), filter). }
