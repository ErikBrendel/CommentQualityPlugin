commented;modifiers;parameterAmount;loc;comment;code
false;public;2;27;;@Override public ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {     Environment environment = context.getEnvironment().     AnnotationAttributes attributes = getEndpointAttributes(context, metadata).     EndpointId id = EndpointId.of(attributes.getString("id")).     String key = "management.endpoint." + id.toLowerCaseString() + ".enabled".     Boolean userDefinedEnabled = environment.getProperty(key, Boolean.class).     if (userDefinedEnabled != null) {         return new ConditionOutcome(userDefinedEnabled, ConditionMessage.forCondition(ConditionalOnEnabledEndpoint.class).because("found property " + key + " with value " + userDefinedEnabled)).     }     Boolean userDefinedDefault = isEnabledByDefault(environment).     if (userDefinedDefault != null) {         return new ConditionOutcome(userDefinedDefault, ConditionMessage.forCondition(ConditionalOnEnabledEndpoint.class).because("no property " + key + " found so using user defined default from " + ENABLED_BY_DEFAULT_KEY)).     }     boolean endpointDefault = attributes.getBoolean("enableByDefault").     return new ConditionOutcome(endpointDefault, ConditionMessage.forCondition(ConditionalOnEnabledEndpoint.class).because("no property " + key + " found so using endpoint default")). }
false;private;1;9;;private Boolean isEnabledByDefault(Environment environment) {     Optional<Boolean> enabledByDefault = enabledByDefaultCache.get(environment).     if (enabledByDefault == null) {         enabledByDefault = Optional.ofNullable(environment.getProperty(ENABLED_BY_DEFAULT_KEY, Boolean.class)).         enabledByDefaultCache.put(environment, enabledByDefault).     }     return enabledByDefault.orElse(null). }
false;private;2;4;;private AnnotationAttributes getEndpointAttributes(ConditionContext context, AnnotatedTypeMetadata metadata) {     return getEndpointAttributes(getEndpointType(context, metadata)). }
false;private;2;25;;private Class<?> getEndpointType(ConditionContext context, AnnotatedTypeMetadata metadata) {     Map<String, Object> attributes = metadata.getAnnotationAttributes(ConditionalOnEnabledEndpoint.class.getName()).     if (attributes != null && attributes.containsKey("endpoint")) {         Class<?> target = (Class<?>) attributes.get("endpoint").         if (target != Void.class) {             return target.         }     }     Assert.state(metadata instanceof MethodMetadata && metadata.isAnnotated(Bean.class.getName()), "OnEnabledEndpointCondition must be used on @Bean methods when the endpoint is not specified").     MethodMetadata methodMetadata = (MethodMetadata) metadata.     try {         return ClassUtils.forName(methodMetadata.getReturnTypeName(), context.getClassLoader()).     } catch (Throwable ex) {         throw new IllegalStateException("Failed to extract endpoint id for " + methodMetadata.getDeclaringClassName() + "." + methodMetadata.getMethodName(), ex).     } }
false;protected;1;13;;protected AnnotationAttributes getEndpointAttributes(Class<?> type) {     AnnotationAttributes attributes = AnnotatedElementUtils.findMergedAnnotationAttributes(type, Endpoint.class, true, true).     if (attributes != null) {         return attributes.     }     attributes = AnnotatedElementUtils.findMergedAnnotationAttributes(type, EndpointExtension.class, false, true).     Assert.state(attributes != null, "No endpoint is specified and the return type of the @Bean method is " + "neither an @Endpoint, nor an @EndpointExtension").     return getEndpointAttributes(attributes.getClass("endpoint")). }
