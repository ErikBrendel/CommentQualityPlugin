commented;modifiers;parameterAmount;loc;comment;code
false;public;1;18;;@Override public ObjectName getObjectName(ExposableJmxEndpoint endpoint) throws MalformedObjectNameException {     StringBuilder builder = new StringBuilder(this.properties.getDomain()).     builder.append(":type=Endpoint").     builder.append(",name=").append(StringUtils.capitalize(endpoint.getEndpointId().toString())).     String baseName = builder.toString().     if (this.mBeanServer != null && hasMBean(baseName)) {         builder.append(",context=").append(this.contextId).     }     if (this.uniqueNames) {         String identity = ObjectUtils.getIdentityHexString(endpoint).         builder.append(",identity=").append(identity).     }     builder.append(getStaticNames()).     return ObjectNameManager.getInstance(builder.toString()). }
false;private;1;4;;private boolean hasMBean(String baseObjectName) throws MalformedObjectNameException {     ObjectName query = new ObjectName(baseObjectName + ",*").     return !this.mBeanServer.queryNames(query, null).isEmpty(). }
false;private;0;9;;private String getStaticNames() {     if (this.properties.getStaticNames().isEmpty()) {         return "".     }     StringBuilder builder = new StringBuilder().     this.properties.getStaticNames().forEach((name, value) -> builder.append(",").append(name).append("=").append(value)).     return builder.toString(). }
