commented;modifiers;parameterAmount;loc;comment;code
false;;2;16;;Mono<SecurityResponse> preHandle(ServerWebExchange exchange, String id) {     ServerHttpRequest request = exchange.getRequest().     if (CorsUtils.isPreFlightRequest(request)) {         return SUCCESS.     }     if (!StringUtils.hasText(this.applicationId)) {         return Mono.error(new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE, "Application id is not available")).     }     if (this.cloudFoundrySecurityService == null) {         return Mono.error(new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE, "Cloud controller URL is not available")).     }     return check(exchange, id).then(SUCCESS).doOnError(this::logError).onErrorResume(this::getErrorResponse). }
false;private;1;3;;private void logError(Throwable ex) {     logger.error(ex.getMessage(), ex). }
false;private;2;17;;private Mono<Void> check(ServerWebExchange exchange, String id) {     try {         Token token = getToken(exchange.getRequest()).         return this.tokenValidator.validate(token).then(this.cloudFoundrySecurityService.getAccessLevel(token.toString(), this.applicationId)).filter((accessLevel) -> accessLevel.isAccessAllowed(id)).switchIfEmpty(Mono.error(new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED, "Access denied"))).doOnSuccess((accessLevel) -> exchange.getAttributes().put("cloudFoundryAccessLevel", accessLevel)).then().     } catch (CloudFoundryAuthorizationException ex) {         return Mono.error(ex).     } }
false;private;1;9;;private Mono<SecurityResponse> getErrorResponse(Throwable throwable) {     if (throwable instanceof CloudFoundryAuthorizationException) {         CloudFoundryAuthorizationException cfException = (CloudFoundryAuthorizationException) throwable.         return Mono.just(new SecurityResponse(cfException.getStatusCode(), "{\"security_error\":\"" + cfException.getMessage() + "\"}")).     }     return Mono.just(new SecurityResponse(HttpStatus.INTERNAL_SERVER_ERROR, throwable.getMessage())). }
false;private;1;10;;private Token getToken(ServerHttpRequest request) {     String authorization = request.getHeaders().getFirst("Authorization").     String bearerPrefix = "bearer ".     if (authorization == null || !authorization.toLowerCase(Locale.ENGLISH).startsWith(bearerPrefix)) {         throw new CloudFoundryAuthorizationException(Reason.MISSING_AUTHORIZATION, "Authorization header is missing or invalid").     }     return new Token(authorization.substring(bearerPrefix.length())). }
