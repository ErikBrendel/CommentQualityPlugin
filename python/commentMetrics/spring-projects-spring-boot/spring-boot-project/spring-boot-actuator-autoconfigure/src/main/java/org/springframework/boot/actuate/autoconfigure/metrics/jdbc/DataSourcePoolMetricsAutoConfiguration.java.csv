commented;modifiers;parameterAmount;loc;comment;code
false;public;3;9;;@Autowired public void bindDataSourcesToRegistry(Map<String, DataSource> dataSources, MeterRegistry registry, ObjectProvider<DataSourcePoolMetadataProvider> metadataProviders) {     List<DataSourcePoolMetadataProvider> metadataProvidersList = metadataProviders.stream().collect(Collectors.toList()).     dataSources.forEach((name, dataSource) -> bindDataSourceToRegistry(name, dataSource, metadataProvidersList, registry)). }
false;private;4;7;;private void bindDataSourceToRegistry(String beanName, DataSource dataSource, Collection<DataSourcePoolMetadataProvider> metadataProviders, MeterRegistry registry) {     String dataSourceName = getDataSourceName(beanName).     new DataSourcePoolMetrics(dataSource, metadataProviders, dataSourceName, Collections.emptyList()).bindTo(registry). }
true;private;1;8;/**  * Get the name of a DataSource based on its {@code beanName}.  * @param beanName the name of the data source bean  * @return a name for the given data source  */ ;/**  * Get the name of a DataSource based on its {@code beanName}.  * @param beanName the name of the data source bean  * @return a name for the given data source  */ private String getDataSourceName(String beanName) {     if (beanName.length() > DATASOURCE_SUFFIX.length() && StringUtils.endsWithIgnoreCase(beanName, DATASOURCE_SUFFIX)) {         return beanName.substring(0, beanName.length() - DATASOURCE_SUFFIX.length()).     }     return beanName. }
false;public;1;11;;@Autowired public void bindMetricsRegistryToHikariDataSources(Collection<DataSource> dataSources) {     for (DataSource dataSource : dataSources) {         HikariDataSource hikariDataSource = DataSourceUnwrapper.unwrap(dataSource, HikariDataSource.class).         if (hikariDataSource != null) {             bindMetricsRegistryToHikariDataSource(hikariDataSource).         }     } }
false;private;1;12;;private void bindMetricsRegistryToHikariDataSource(HikariDataSource hikari) {     if (hikari.getMetricRegistry() == null && hikari.getMetricsTrackerFactory() == null) {         try {             hikari.setMetricsTrackerFactory(new MicrometerMetricsTrackerFactory(this.registry)).         } catch (Exception ex) {             logger.warn("Failed to bind Hikari metrics: " + ex.getMessage()).         }     } }
