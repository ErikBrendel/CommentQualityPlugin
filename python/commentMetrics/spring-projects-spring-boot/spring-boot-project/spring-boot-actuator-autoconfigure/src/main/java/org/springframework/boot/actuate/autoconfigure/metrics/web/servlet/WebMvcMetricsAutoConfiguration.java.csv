commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Bean @ConditionalOnMissingBean(WebMvcTagsProvider.class) public DefaultWebMvcTagsProvider webMvcTagsProvider() {     return new DefaultWebMvcTagsProvider(). }
false;public;2;13;;@Bean public FilterRegistrationBean<WebMvcMetricsFilter> webMvcMetricsFilter(MeterRegistry registry, WebMvcTagsProvider tagsProvider) {     Server serverProperties = this.properties.getWeb().getServer().     WebMvcMetricsFilter filter = new WebMvcMetricsFilter(registry, tagsProvider, serverProperties.getRequestsMetricName(), serverProperties.isAutoTimeRequests()).     FilterRegistrationBean<WebMvcMetricsFilter> registration = new FilterRegistrationBean<>(filter).     registration.setOrder(Ordered.HIGHEST_PRECEDENCE + 1).     registration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.ASYNC).     return registration. }
false;public;0;9;;@Bean @Order(0) public MeterFilter metricsHttpServerUriTagFilter() {     String metricName = this.properties.getWeb().getServer().getRequestsMetricName().     MeterFilter filter = new OnlyOnceLoggingDenyMeterFilter(() -> String.format("Reached the maximum number of URI tags for '%s'.", metricName)).     return MeterFilter.maximumAllowableTags(metricName, "uri", this.properties.getWeb().getServer().getMaxUriTags(), filter). }
false;public;2;5;;@Bean public MetricsWebMvcConfigurer metricsWebMvcConfigurer(MeterRegistry meterRegistry, WebMvcTagsProvider tagsProvider) {     return new MetricsWebMvcConfigurer(meterRegistry, tagsProvider). }
false;public;1;5;;@Override public void addInterceptors(InterceptorRegistry registry) {     registry.addInterceptor(new LongTaskTimingHandlerInterceptor(this.meterRegistry, this.tagsProvider)). }
