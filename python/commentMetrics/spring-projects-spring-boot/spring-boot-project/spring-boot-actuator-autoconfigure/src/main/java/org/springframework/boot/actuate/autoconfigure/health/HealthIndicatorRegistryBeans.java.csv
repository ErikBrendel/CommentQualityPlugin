commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;10;;public static HealthIndicatorRegistry get(ApplicationContext applicationContext) {     Map<String, HealthIndicator> indicators = new LinkedHashMap<>().     indicators.putAll(applicationContext.getBeansOfType(HealthIndicator.class)).     if (ClassUtils.isPresent("reactor.core.publisher.Flux", null)) {         new ReactiveHealthIndicators().get(applicationContext).forEach(indicators::putIfAbsent).     }     HealthIndicatorRegistryFactory factory = new HealthIndicatorRegistryFactory().     return factory.createHealthIndicatorRegistry(indicators). }
false;public;1;6;;public Map<String, HealthIndicator> get(ApplicationContext applicationContext) {     Map<String, HealthIndicator> indicators = new LinkedHashMap<>().     applicationContext.getBeansOfType(ReactiveHealthIndicator.class).forEach((name, indicator) -> indicators.put(name, adapt(indicator))).     return indicators. }
false;private;1;3;;private HealthIndicator adapt(ReactiveHealthIndicator indicator) {     return () -> indicator.health().block(). }
