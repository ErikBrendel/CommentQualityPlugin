commented;modifiers;parameterAmount;loc;comment;code
false;;2;30;;SecurityResponse preHandle(HttpServletRequest request, EndpointId endpointId) {     if (CorsUtils.isPreFlightRequest(request)) {         return SecurityResponse.success().     }     try {         if (!StringUtils.hasText(this.applicationId)) {             throw new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE, "Application id is not available").         }         if (this.cloudFoundrySecurityService == null) {             throw new CloudFoundryAuthorizationException(Reason.SERVICE_UNAVAILABLE, "Cloud controller URL is not available").         }         if (HttpMethod.OPTIONS.matches(request.getMethod())) {             return SUCCESS.         }         check(request, endpointId).     } catch (Exception ex) {         logger.error(ex).         if (ex instanceof CloudFoundryAuthorizationException) {             CloudFoundryAuthorizationException cfException = (CloudFoundryAuthorizationException) ex.             return new SecurityResponse(cfException.getStatusCode(), "{\"security_error\":\"" + cfException.getMessage() + "\"}").         }         return new SecurityResponse(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage()).     }     return SecurityResponse.success(). }
false;private;2;13;;private void check(HttpServletRequest request, EndpointId endpointId) throws Exception {     Token token = getToken(request).     this.tokenValidator.validate(token).     AccessLevel accessLevel = this.cloudFoundrySecurityService.getAccessLevel(token.toString(), this.applicationId).     if (!accessLevel.isAccessAllowed((endpointId != null) ? endpointId.toLowerCaseString() : "")) {         throw new CloudFoundryAuthorizationException(Reason.ACCESS_DENIED, "Access denied").     }     request.setAttribute(AccessLevel.REQUEST_ATTRIBUTE, accessLevel). }
false;private;1;10;;private Token getToken(HttpServletRequest request) {     String authorization = request.getHeader("Authorization").     String bearerPrefix = "bearer ".     if (authorization == null || !authorization.toLowerCase(Locale.ENGLISH).startsWith(bearerPrefix)) {         throw new CloudFoundryAuthorizationException(Reason.MISSING_AUTHORIZATION, "Authorization header is missing or invalid").     }     return new Token(authorization.substring(bearerPrefix.length())). }
