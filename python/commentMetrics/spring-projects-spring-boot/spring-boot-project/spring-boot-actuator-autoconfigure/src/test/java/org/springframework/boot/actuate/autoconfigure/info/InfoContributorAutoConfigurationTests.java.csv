commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;7;;@Test public void disableEnvContributor() {     load("management.info.env.enabled:false").     Map<String, InfoContributor> beans = this.context.getBeansOfType(InfoContributor.class).     assertThat(beans).hasSize(0). }
false;public;0;7;;@Test public void defaultInfoContributorsDisabled() {     load("management.info.defaults.enabled:false").     Map<String, InfoContributor> beans = this.context.getBeansOfType(InfoContributor.class).     assertThat(beans).hasSize(0). }
false;public;0;10;;@Test public void defaultInfoContributorsDisabledWithCustomOne() {     load(CustomInfoContributorConfiguration.class, "management.info.defaults.enabled:false").     Map<String, InfoContributor> beans = this.context.getBeansOfType(InfoContributor.class).     assertThat(beans).hasSize(1).     assertThat(this.context.getBean("customInfoContributor")).isSameAs(beans.values().iterator().next()). }
false;public;0;14;;@SuppressWarnings("unchecked") @Test public void gitPropertiesDefaultMode() {     load(GitPropertiesConfiguration.class).     Map<String, InfoContributor> beans = this.context.getBeansOfType(InfoContributor.class).     assertThat(beans).containsKeys("gitInfoContributor").     Map<String, Object> content = invokeContributor(this.context.getBean("gitInfoContributor", InfoContributor.class)).     Object git = content.get("git").     assertThat(git).isInstanceOf(Map.class).     Map<String, Object> gitInfo = (Map<String, Object>) git.     assertThat(gitInfo).containsOnlyKeys("branch", "commit"). }
false;public;0;12;;@SuppressWarnings("unchecked") @Test public void gitPropertiesFullMode() {     load(GitPropertiesConfiguration.class, "management.info.git.mode=full").     Map<String, Object> content = invokeContributor(this.context.getBean("gitInfoContributor", InfoContributor.class)).     Object git = content.get("git").     assertThat(git).isInstanceOf(Map.class).     Map<String, Object> gitInfo = (Map<String, Object>) git.     assertThat(gitInfo).containsOnlyKeys("branch", "commit", "foo").     assertThat(gitInfo.get("foo")).isEqualTo("bar"). }
false;public;0;6;;@Test public void customGitInfoContributor() {     load(CustomGitInfoContributorConfiguration.class).     assertThat(this.context.getBean(GitInfoContributor.class)).isSameAs(this.context.getBean("customGitInfoContributor")). }
false;public;0;15;;@SuppressWarnings("unchecked") @Test public void buildProperties() {     load(BuildPropertiesConfiguration.class).     Map<String, InfoContributor> beans = this.context.getBeansOfType(InfoContributor.class).     assertThat(beans).containsKeys("buildInfoContributor").     Map<String, Object> content = invokeContributor(this.context.getBean("buildInfoContributor", InfoContributor.class)).     Object build = content.get("build").     assertThat(build).isInstanceOf(Map.class).     Map<String, Object> buildInfo = (Map<String, Object>) build.     assertThat(buildInfo).containsOnlyKeys("group", "artifact", "foo").     assertThat(buildInfo.get("foo")).isEqualTo("bar"). }
false;public;0;6;;@Test public void customBuildInfoContributor() {     load(CustomBuildInfoContributorConfiguration.class).     assertThat(this.context.getBean(BuildInfoContributor.class)).isSameAs(this.context.getBean("customBuildInfoContributor")). }
false;private;1;5;;private Map<String, Object> invokeContributor(InfoContributor contributor) {     Info.Builder builder = new Info.Builder().     contributor.contribute(builder).     return builder.build().getDetails(). }
false;private;1;3;;private void load(String... environment) {     load(null, environment). }
false;private;2;10;;private void load(Class<?> config, String... environment) {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     if (config != null) {         context.register(config).     }     context.register(InfoContributorAutoConfiguration.class).     TestPropertyValues.of(environment).applyTo(context).     context.refresh().     this.context = context. }
false;public;0;8;;@Bean public GitProperties gitProperties() {     Properties properties = new Properties().     properties.put("branch", "master").     properties.put("commit.id", "abcdefg").     properties.put("foo", "bar").     return new GitProperties(properties). }
false;public;0;8;;@Bean public BuildProperties buildProperties() {     Properties properties = new Properties().     properties.put("group", "com.example").     properties.put("artifact", "demo").     properties.put("foo", "bar").     return new BuildProperties(properties). }
false;public;0;5;;@Bean public InfoContributor customInfoContributor() {     return (builder) -> {     }. }
false;public;0;4;;@Bean public GitInfoContributor customGitInfoContributor() {     return new GitInfoContributor(new GitProperties(new Properties())). }
false;public;0;4;;@Bean public BuildInfoContributor customBuildInfoContributor() {     return new BuildInfoContributor(new BuildProperties(new Properties())). }
