commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;6;;protected String describeEnumValues(Class<? extends Enum<?>> enumType) {     return StringUtils.collectionToDelimitedString(Stream.of(enumType.getEnumConstants()).map((constant) -> "`" + constant.name() + "`").collect(Collectors.toList()), ", "). }
false;protected;1;3;;protected OperationPreprocessor limit(String... keys) {     return limit((candidate) -> true, keys). }
false;protected;2;33;;@SuppressWarnings("unchecked") protected <T> OperationPreprocessor limit(Predicate<T> filter, String... keys) {     return new ContentModifyingOperationPreprocessor((content, mediaType) -> {         ObjectMapper objectMapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT).         try {             Map<String, Object> payload = objectMapper.readValue(content, Map.class).             Object target = payload.             Map<Object, Object> parent = null.             for (String key : keys) {                 if (target instanceof Map) {                     parent = (Map<Object, Object>) target.                     target = parent.get(key).                 } else {                     throw new IllegalStateException().                 }             }             if (target instanceof Map) {                 parent.put(keys[keys.length - 1], select((Map<String, Object>) target, filter)).             } else {                 parent.put(keys[keys.length - 1], select((List<Object>) target, filter)).             }             return objectMapper.writeValueAsBytes(payload).         } catch (IOException ex) {             throw new IllegalStateException(ex).         }     }). }
false;protected;0;5;;protected FieldDescriptor parentIdField() {     return fieldWithPath("contexts.*.parentId").description("Id of the parent application context, if any.").optional().type(JsonFieldType.STRING). }
false;private;2;9;;@SuppressWarnings("unchecked") private <T> Map<String, Object> select(Map<String, Object> candidates, Predicate<T> filter) {     Map<String, Object> selected = new HashMap<>().     candidates.entrySet().stream().filter((candidate) -> filter.test((T) candidate)).limit(3).forEach((entry) -> selected.put(entry.getKey(), entry.getValue())).     return selected. }
false;private;2;5;;@SuppressWarnings("unchecked") private <T> List<Object> select(List<Object> candidates, Predicate<T> filter) {     return candidates.stream().filter((candidate) -> filter.test((T) candidate)).limit(3).collect(Collectors.toList()). }
