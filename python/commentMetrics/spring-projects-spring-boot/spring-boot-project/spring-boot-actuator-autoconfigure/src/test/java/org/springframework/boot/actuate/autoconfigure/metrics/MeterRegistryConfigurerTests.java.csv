commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     given(this.mockRegistry.config()).willReturn(this.mockConfig). }
false;public;0;11;;@Test public void configureWhenCompositeShouldApplyCustomizer() {     this.customizers.add(this.mockCustomizer).     MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false).     CompositeMeterRegistry composite = new CompositeMeterRegistry().     configurer.configure(composite).     verify(this.mockCustomizer).customize(composite). }
false;public;0;10;;@Test public void configureShouldApplyCustomizer() {     this.customizers.add(this.mockCustomizer).     MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false).     configurer.configure(this.mockRegistry).     verify(this.mockCustomizer).customize(this.mockRegistry). }
false;public;0;10;;@Test public void configureShouldApplyFilter() {     this.filters.add(this.mockFilter).     MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false).     configurer.configure(this.mockRegistry).     verify(this.mockConfig).meterFilter(this.mockFilter). }
false;public;0;10;;@Test public void configureShouldApplyBinder() {     this.binders.add(this.mockBinder).     MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false).     configurer.configure(this.mockRegistry).     verify(this.mockBinder).bindTo(this.mockRegistry). }
false;public;0;15;;@Test public void configureShouldBeCalledInOrderCustomizerFilterBinder() {     this.customizers.add(this.mockCustomizer).     this.filters.add(this.mockFilter).     this.binders.add(this.mockBinder).     MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false).     configurer.configure(this.mockRegistry).     InOrder ordered = inOrder(this.mockBinder, this.mockConfig, this.mockCustomizer).     ordered.verify(this.mockCustomizer).customize(this.mockRegistry).     ordered.verify(this.mockConfig).meterFilter(this.mockFilter).     ordered.verify(this.mockBinder).bindTo(this.mockRegistry). }
false;public;0;15;;@Test public void configureWhenAddToGlobalRegistryShouldAddToGlobalRegistry() {     MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), true).     try {         configurer.configure(this.mockRegistry).         assertThat(Metrics.globalRegistry.getRegistries()).contains(this.mockRegistry).     } finally {         Metrics.removeRegistry(this.mockRegistry).     } }
false;public;0;10;;@Test public void configureWhenNotAddToGlobalRegistryShouldAddToGlobalRegistry() {     MeterRegistryConfigurer configurer = new MeterRegistryConfigurer(createObjectProvider(this.customizers), createObjectProvider(this.filters), createObjectProvider(this.binders), false).     configurer.configure(this.mockRegistry).     assertThat(Metrics.globalRegistry.getRegistries()).doesNotContain(this.mockRegistry). }
false;private;1;6;;@SuppressWarnings("unchecked") private <T> ObjectProvider<T> createObjectProvider(List<T> objects) {     ObjectProvider<T> objectProvider = mock(ObjectProvider.class).     given(objectProvider.orderedStream()).willReturn(objects.stream()).     return objectProvider. }
