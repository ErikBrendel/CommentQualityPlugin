commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void runShouldCreateExtensionBeans() {     this.contextRunner.run((context) -> assertThat(context).hasSingleBean(HealthEndpointWebExtension.class)). }
false;public;0;6;;@Test public void runWhenHealthEndpointIsDisabledShouldNotCreateExtensionBeans() {     this.contextRunner.withPropertyValues("management.endpoint.health.enabled:false").run((context) -> assertThat(context).doesNotHaveBean(HealthEndpointWebExtension.class)). }
false;public;0;19;;@Test public void runWithCustomHealthMappingShouldMapStatusCode() {     this.contextRunner.withPropertyValues("management.health.status.http-mapping.CUSTOM=500").run((context) -> {         Object extension = context.getBean(HealthEndpointWebExtension.class).         HealthWebEndpointResponseMapper responseMapper = (HealthWebEndpointResponseMapper) ReflectionTestUtils.getField(extension, "responseMapper").         Class<SecurityContext> securityContext = SecurityContext.class.         assertThat(responseMapper.map(Health.down().build(), mock(securityContext)).getStatus()).isEqualTo(503).         assertThat(responseMapper.map(Health.status("OUT_OF_SERVICE").build(), mock(securityContext)).getStatus()).isEqualTo(503).         assertThat(responseMapper.map(Health.status("CUSTOM").build(), mock(securityContext)).getStatus()).isEqualTo(500).     }). }
false;public;0;10;;@Test public void unauthenticatedUsersAreNotShownDetailsByDefault() {     this.contextRunner.run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         assertThat(extension.health(mock(SecurityContext.class)).getBody().getDetails()).isEmpty().     }). }
false;public;0;11;;@Test public void authenticatedUsersAreNotShownDetailsByDefault() {     this.contextRunner.run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         assertThat(extension.health(securityContext).getBody().getDetails()).isEmpty().     }). }
false;public;0;15;;@Test public void authenticatedUsersWhenAuthorizedCanBeShownDetails() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         assertThat(extension.health(securityContext).getBody().getDetails()).isNotEmpty().     }). }
false;public;0;11;;@Test public void unauthenticatedUsersCanBeShownDetails() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=always").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         assertThat(extension.health(null).getBody().getDetails()).isNotEmpty().     }). }
false;public;0;11;;@Test public void detailsCanBeHiddenFromAuthenticatedUsers() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=never").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         assertThat(extension.health(mock(SecurityContext.class)).getBody().getDetails()).isEmpty().     }). }
false;public;0;15;;@Test public void detailsCanBeHiddenFromUnauthorizedUsers() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized", "management.endpoint.health.roles=ACTUATOR").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         given(securityContext.isUserInRole("ACTUATOR")).willReturn(false).         assertThat(extension.health(securityContext).getBody().getDetails()).isEmpty().     }). }
false;public;0;15;;@Test public void detailsCanBeShownToAuthorizedUsers() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized", "management.endpoint.health.roles=ACTUATOR").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         given(securityContext.isUserInRole("ACTUATOR")).willReturn(true).         assertThat(extension.health(securityContext).getBody().getDetails()).isNotEmpty().     }). }
false;public;0;9;;@Test public void unauthenticatedUsersAreNotShownComponentByDefault() {     this.contextRunner.run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         assertDetailsNotFound(extension.healthForComponent(mock(SecurityContext.class), "simple")).     }). }
false;public;0;11;;@Test public void authenticatedUsersAreNotShownComponentByDefault() {     this.contextRunner.run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         assertDetailsNotFound(extension.healthForComponent(securityContext, "simple")).     }). }
false;public;0;15;;@Test public void authenticatedUsersWhenAuthorizedCanBeShownComponent() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         assertSimpleComponent(extension.healthForComponent(securityContext, "simple")).     }). }
false;public;0;10;;@Test public void unauthenticatedUsersCanBeShownComponent() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=always").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         assertSimpleComponent(extension.healthForComponent(null, "simple")).     }). }
false;public;0;11;;@Test public void componentCanBeHiddenFromAuthenticatedUsers() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=never").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         assertDetailsNotFound(extension.healthForComponent(mock(SecurityContext.class), "simple")).     }). }
false;public;0;15;;@Test public void componentCanBeHiddenFromUnauthorizedUsers() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized", "management.endpoint.health.roles=ACTUATOR").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         given(securityContext.isUserInRole("ACTUATOR")).willReturn(false).         assertDetailsNotFound(extension.healthForComponent(securityContext, "simple")).     }). }
false;public;0;15;;@Test public void componentCanBeShownToAuthorizedUsers() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized", "management.endpoint.health.roles=ACTUATOR").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         given(securityContext.isUserInRole("ACTUATOR")).willReturn(true).         assertSimpleComponent(extension.healthForComponent(securityContext, "simple")).     }). }
false;public;0;11;;@Test public void componentThatDoesNotExistMapTo404() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=always").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         assertDetailsNotFound(extension.healthForComponent(null, "does-not-exist")).     }). }
false;public;0;9;;@Test public void unauthenticatedUsersAreNotShownComponentInstanceByDefault() {     this.contextRunner.run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         assertDetailsNotFound(extension.healthForComponentInstance(mock(SecurityContext.class), "composite", "one")).     }). }
false;public;0;11;;@Test public void authenticatedUsersAreNotShownComponentInstanceByDefault() {     this.contextRunner.run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         assertDetailsNotFound(extension.healthForComponentInstance(securityContext, "composite", "one")).     }). }
false;public;0;15;;@Test public void authenticatedUsersWhenAuthorizedCanBeShownComponentInstance() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         assertSimpleComponent(extension.healthForComponentInstance(securityContext, "composite", "one")).     }). }
false;public;0;11;;@Test public void unauthenticatedUsersCanBeShownComponentInstance() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=always").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         assertSimpleComponent(extension.healthForComponentInstance(null, "composite", "one")).     }). }
false;public;0;11;;@Test public void componentInstanceCanBeHiddenFromAuthenticatedUsers() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=never").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         assertDetailsNotFound(extension.healthForComponentInstance(mock(SecurityContext.class), "composite", "one")).     }). }
false;public;0;15;;@Test public void componentInstanceCanBeHiddenFromUnauthorizedUsers() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized", "management.endpoint.health.roles=ACTUATOR").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         given(securityContext.isUserInRole("ACTUATOR")).willReturn(false).         assertDetailsNotFound(extension.healthForComponentInstance(securityContext, "composite", "one")).     }). }
false;public;0;15;;@Test public void componentInstanceCanBeShownToAuthorizedUsers() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized", "management.endpoint.health.roles=ACTUATOR").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         given(securityContext.isUserInRole("ACTUATOR")).willReturn(true).         assertSimpleComponent(extension.healthForComponentInstance(securityContext, "composite", "one")).     }). }
false;public;0;11;;@Test public void componentInstanceThatDoesNotExistMapTo404() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=always").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         assertDetailsNotFound(extension.healthForComponentInstance(null, "composite", "does-not-exist")).     }). }
false;private;1;4;;private void assertDetailsNotFound(WebEndpointResponse<?> response) {     assertThat(response.getStatus()).isEqualTo(HttpStatus.NOT_FOUND.value()).     assertThat(response.getBody()).isNull(). }
false;private;1;4;;private void assertSimpleComponent(WebEndpointResponse<Health> response) {     assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value()).     assertThat(response.getBody().getDetails()).containsOnly(entry("counter", 42)). }
false;public;0;15;;@Test public void roleCanBeCustomized() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized", "management.endpoint.health.roles=ADMIN").run((context) -> {         HealthEndpointWebExtension extension = context.getBean(HealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         given(securityContext.isUserInRole("ADMIN")).willReturn(true).         assertThat(extension.health(securityContext).getBody().getDetails()).isNotEmpty().     }). }
false;public;0;4;;@Bean public HealthIndicator simpleHealthIndicator() {     return () -> Health.up().withDetail("counter", 42).build(). }
false;public;0;8;;@Bean public HealthIndicator compositeHealthIndicator() {     Map<String, HealthIndicator> nestedIndicators = new HashMap<>().     nestedIndicators.put("one", simpleHealthIndicator()).     nestedIndicators.put("two", () -> Health.up().build()).     return new CompositeHealthIndicator(new OrderedHealthAggregator(), nestedIndicators). }
