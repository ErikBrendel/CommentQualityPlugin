commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void getEndpointsShouldAddCloudFoundryHealthExtension() {     load(TestConfiguration.class, (discoverer) -> {         Collection<ExposableWebEndpoint> endpoints = discoverer.getEndpoints().         assertThat(endpoints.size()).isEqualTo(2).         for (ExposableWebEndpoint endpoint : endpoints) {             if (endpoint.getEndpointId().equals(EndpointId.of("health"))) {                 WebOperation operation = findMainReadOperation(endpoint).                 assertThat(operation.invoke(new InvocationContext(mock(SecurityContext.class), Collections.emptyMap()))).isEqualTo("cf").             }         }     }). }
false;private;1;9;;private WebOperation findMainReadOperation(ExposableWebEndpoint endpoint) {     for (WebOperation operation : endpoint.getOperations()) {         if (operation.getRequestPredicate().getPath().equals("health")) {             return operation.         }     }     throw new IllegalStateException("No main read operation found from " + endpoint.getOperations()). }
false;private;2;4;;private void load(Class<?> configuration, Consumer<CloudFoundryWebEndpointDiscoverer> consumer) {     this.load((id) -> null, EndpointId::toString, configuration, consumer). }
false;private;4;18;;private void load(Function<EndpointId, Long> timeToLive, PathMapper endpointPathMapper, Class<?> configuration, Consumer<CloudFoundryWebEndpointDiscoverer> consumer) {     try (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(configuration)) {         ConversionServiceParameterValueMapper parameterMapper = new ConversionServiceParameterValueMapper(DefaultConversionService.getSharedInstance()).         EndpointMediaTypes mediaTypes = new EndpointMediaTypes(Collections.singletonList("application/json"), Collections.singletonList("application/json")).         CloudFoundryWebEndpointDiscoverer discoverer = new CloudFoundryWebEndpointDiscoverer(context, parameterMapper, mediaTypes, Collections.singletonList(endpointPathMapper), Collections.singleton(new CachingOperationInvokerAdvisor(timeToLive)), Collections.emptyList()).         consumer.accept(discoverer).     } }
false;public;0;4;;@Bean public TestEndpoint testEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@Bean public TestEndpointWebExtension testEndpointWebExtension() {     return new TestEndpointWebExtension(). }
false;public;0;4;;@Bean public HealthEndpoint healthEndpoint() {     return new HealthEndpoint(mock(HealthIndicator.class)). }
false;public;0;4;;@Bean public HealthEndpointWebExtension healthEndpointWebExtension() {     return new HealthEndpointWebExtension(). }
false;public;0;4;;@Bean public TestHealthEndpointCloudFoundryExtension testHealthEndpointCloudFoundryExtension() {     return new TestHealthEndpointCloudFoundryExtension(). }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;public;0;4;;@ReadOperation public Object getAll() {     return "cf". }
