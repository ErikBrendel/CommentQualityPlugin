commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void selectImportsShouldOrderResult() {     String[] imports = new TestManagementContextConfigurationsImportSelector(C.class, A.class, D.class, B.class).selectImports(new StandardAnnotationMetadata(EnableChildContext.class)).     assertThat(imports).containsExactly(A.class.getName(), B.class.getName(), C.class.getName(), D.class.getName()). }
false;public;0;8;;@Test public void selectImportsFiltersChildOnlyConfigurationWhenUsingSameContext() {     String[] imports = new TestManagementContextConfigurationsImportSelector(ChildOnly.class, SameOnly.class, A.class).selectImports(new StandardAnnotationMetadata(EnableSameContext.class)).     assertThat(imports).containsExactlyInAnyOrder(SameOnly.class.getName(), A.class.getName()). }
false;public;0;8;;@Test public void selectImportsFiltersSameOnlyConfigurationWhenUsingChildContext() {     String[] imports = new TestManagementContextConfigurationsImportSelector(ChildOnly.class, SameOnly.class, A.class).selectImports(new StandardAnnotationMetadata(EnableChildContext.class)).     assertThat(imports).containsExactlyInAnyOrder(ChildOnly.class.getName(), A.class.getName()). }
false;protected;0;4;;@Override protected List<String> loadFactoryNames() {     return this.factoryNames. }
