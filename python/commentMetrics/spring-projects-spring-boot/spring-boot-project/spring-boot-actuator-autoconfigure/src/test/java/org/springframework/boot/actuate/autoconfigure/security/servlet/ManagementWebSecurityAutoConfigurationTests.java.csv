commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void permitAllForHealth() {     this.contextRunner.run((context) -> {         HttpStatus status = getResponseStatus(context, "/actuator/health").         assertThat(status).isEqualTo(HttpStatus.OK).     }). }
false;public;0;7;;@Test public void permitAllForInfo() {     this.contextRunner.run((context) -> {         HttpStatus status = getResponseStatus(context, "/actuator/info").         assertThat(status).isEqualTo(HttpStatus.OK).     }). }
false;public;0;9;;@Test public void securesEverythingElse() {     this.contextRunner.run((context) -> {         HttpStatus status = getResponseStatus(context, "/actuator").         assertThat(status).isEqualTo(HttpStatus.UNAUTHORIZED).         status = getResponseStatus(context, "/foo").         assertThat(status).isEqualTo(HttpStatus.UNAUTHORIZED).     }). }
false;public;0;8;;@Test public void usesMatchersBasedOffConfiguredActuatorBasePath() {     this.contextRunner.withPropertyValues("management.endpoints.web.base-path=/").run((context) -> {         HttpStatus status = getResponseStatus(context, "/health").         assertThat(status).isEqualTo(HttpStatus.OK).     }). }
false;public;0;10;;@Test public void backOffIfCustomSecurityIsAdded() {     this.contextRunner.withUserConfiguration(CustomSecurityConfiguration.class).run((context) -> {         HttpStatus status = getResponseStatus(context, "/actuator/health").         assertThat(status).isEqualTo(HttpStatus.UNAUTHORIZED).         status = getResponseStatus(context, "/foo").         assertThat(status).isEqualTo(HttpStatus.OK).     }). }
false;public;0;10;;@Test public void backOffIfOAuth2ResourceServerAutoConfigurationPresent() {     this.contextRunner.withConfiguration(AutoConfigurations.of(OAuth2ResourceServerAutoConfiguration.class)).withPropertyValues("spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://authserver").run((context) -> assertThat(context).doesNotHaveBean(ManagementWebSecurityConfigurerAdapter.class)). }
false;private;2;13;;private HttpStatus getResponseStatus(AssertableWebApplicationContext context, String path) throws IOException, javax.servlet.ServletException {     FilterChainProxy filterChainProxy = context.getBean(FilterChainProxy.class).     MockServletContext servletContext = new MockServletContext().     MockHttpServletResponse response = new MockHttpServletResponse().     servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, context).     MockHttpServletRequest request = new MockHttpServletRequest(servletContext).     request.setServletPath(path).     request.setMethod("GET").     filterChainProxy.doFilter(request, response, new MockFilterChain()).     return HttpStatus.valueOf(response.getStatus()). }
false;protected;1;5;;@Override protected void configure(HttpSecurity http) throws Exception {     http.authorizeRequests().antMatchers("/foo").permitAll().anyRequest().authenticated().and().formLogin().and().httpBasic(). }
