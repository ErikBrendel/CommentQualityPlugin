commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void toAnyEndpointShouldMatchEndpointPath() {     RequestMatcher matcher = EndpointRequest.toAnyEndpoint().     assertMatcher(matcher, "/actuator").matches("/actuator/foo").     assertMatcher(matcher, "/actuator").matches("/actuator/foo/zoo/").     assertMatcher(matcher, "/actuator").matches("/actuator/bar").     assertMatcher(matcher, "/actuator").matches("/actuator/bar/baz").     assertMatcher(matcher, "/actuator").matches("/actuator"). }
false;public;0;7;;@Test public void toAnyEndpointShouldMatchEndpointPathWithTrailingSlash() {     RequestMatcher matcher = EndpointRequest.toAnyEndpoint().     assertMatcher(matcher, "/actuator").matches("/actuator/foo/").     assertMatcher(matcher, "/actuator").matches("/actuator/bar/").     assertMatcher(matcher, "/actuator").matches("/actuator/"). }
false;public;0;8;;@Test public void toAnyEndpointWhenBasePathIsEmptyShouldNotMatchLinks() {     RequestMatcher matcher = EndpointRequest.toAnyEndpoint().     RequestMatcherAssert assertMatcher = assertMatcher(matcher, "").     assertMatcher.doesNotMatch("/").     assertMatcher.matches("/foo").     assertMatcher.matches("/bar"). }
false;public;0;5;;@Test public void toAnyEndpointShouldNotMatchOtherPath() {     RequestMatcher matcher = EndpointRequest.toAnyEndpoint().     assertMatcher(matcher).doesNotMatch("/actuator/baz"). }
false;public;0;8;;@Test public void toAnyEndpointWhenDispatcherServletPathProviderNotAvailableUsesEmptyPath() {     RequestMatcher matcher = EndpointRequest.toAnyEndpoint().     assertMatcher(matcher, "/actuator").matches("/actuator/foo").     assertMatcher(matcher, "/actuator").matches("/actuator/bar").     assertMatcher(matcher, "/actuator").matches("/actuator").     assertMatcher(matcher, "/actuator").doesNotMatch("/actuator/baz"). }
false;public;0;5;;@Test public void toEndpointClassShouldMatchEndpointPath() {     RequestMatcher matcher = EndpointRequest.to(FooEndpoint.class).     assertMatcher(matcher).matches("/actuator/foo"). }
false;public;0;6;;@Test public void toEndpointClassShouldNotMatchOtherPath() {     RequestMatcher matcher = EndpointRequest.to(FooEndpoint.class).     assertMatcher(matcher).doesNotMatch("/actuator/bar").     assertMatcher(matcher).doesNotMatch("/actuator"). }
false;public;0;5;;@Test public void toEndpointIdShouldMatchEndpointPath() {     RequestMatcher matcher = EndpointRequest.to("foo").     assertMatcher(matcher).matches("/actuator/foo"). }
false;public;0;6;;@Test public void toEndpointIdShouldNotMatchOtherPath() {     RequestMatcher matcher = EndpointRequest.to("foo").     assertMatcher(matcher).doesNotMatch("/actuator/bar").     assertMatcher(matcher).doesNotMatch("/actuator"). }
false;public;0;8;;@Test public void toLinksShouldOnlyMatchLinks() {     RequestMatcher matcher = EndpointRequest.toLinks().     assertMatcher(matcher).doesNotMatch("/actuator/foo").     assertMatcher(matcher).doesNotMatch("/actuator/bar").     assertMatcher(matcher).matches("/actuator").     assertMatcher(matcher).matches("/actuator/"). }
false;public;0;8;;@Test public void toLinksWhenBasePathEmptyShouldNotMatch() {     RequestMatcher matcher = EndpointRequest.toLinks().     RequestMatcherAssert assertMatcher = assertMatcher(matcher, "").     assertMatcher.doesNotMatch("/actuator/foo").     assertMatcher.doesNotMatch("/actuator/bar").     assertMatcher.doesNotMatch("/"). }
false;public;0;15;;@Test public void excludeByClassShouldNotMatchExcluded() {     RequestMatcher matcher = EndpointRequest.toAnyEndpoint().excluding(FooEndpoint.class, BazServletEndpoint.class).     List<ExposableEndpoint<?>> endpoints = new ArrayList<>().     endpoints.add(mockEndpoint(EndpointId.of("foo"), "foo")).     endpoints.add(mockEndpoint(EndpointId.of("bar"), "bar")).     endpoints.add(mockEndpoint(EndpointId.of("baz"), "baz")).     PathMappedEndpoints pathMappedEndpoints = new PathMappedEndpoints("/actuator", () -> endpoints).     assertMatcher(matcher, pathMappedEndpoints).doesNotMatch("/actuator/foo").     assertMatcher(matcher, pathMappedEndpoints).doesNotMatch("/actuator/baz").     assertMatcher(matcher).matches("/actuator/bar").     assertMatcher(matcher).matches("/actuator"). }
false;public;0;7;;@Test public void excludeByClassShouldNotMatchLinksIfExcluded() {     RequestMatcher matcher = EndpointRequest.toAnyEndpoint().excludingLinks().excluding(FooEndpoint.class).     assertMatcher(matcher).doesNotMatch("/actuator/foo").     assertMatcher(matcher).doesNotMatch("/actuator"). }
false;public;0;7;;@Test public void excludeByIdShouldNotMatchExcluded() {     RequestMatcher matcher = EndpointRequest.toAnyEndpoint().excluding("foo").     assertMatcher(matcher).doesNotMatch("/actuator/foo").     assertMatcher(matcher).matches("/actuator/bar").     assertMatcher(matcher).matches("/actuator"). }
false;public;0;7;;@Test public void excludeByIdShouldNotMatchLinksIfExcluded() {     RequestMatcher matcher = EndpointRequest.toAnyEndpoint().excludingLinks().excluding("foo").     assertMatcher(matcher).doesNotMatch("/actuator/foo").     assertMatcher(matcher).doesNotMatch("/actuator"). }
false;public;0;7;;@Test public void excludeLinksShouldNotMatchBasePath() {     RequestMatcher matcher = EndpointRequest.toAnyEndpoint().excludingLinks().     assertMatcher(matcher).doesNotMatch("/actuator").     assertMatcher(matcher).matches("/actuator/foo").     assertMatcher(matcher).matches("/actuator/bar"). }
false;public;0;8;;@Test public void excludeLinksShouldNotMatchBasePathIfEmptyAndExcluded() {     RequestMatcher matcher = EndpointRequest.toAnyEndpoint().excludingLinks().     RequestMatcherAssert assertMatcher = assertMatcher(matcher, "").     assertMatcher.doesNotMatch("/").     assertMatcher.matches("/foo").     assertMatcher.matches("/bar"). }
false;public;0;9;;@Test public void endpointRequestMatcherShouldUseCustomRequestMatcherProvider() {     RequestMatcher matcher = EndpointRequest.toAnyEndpoint().     RequestMatcher mockRequestMatcher = (request) -> false.     RequestMatcherAssert assertMatcher = assertMatcher(matcher, mockPathMappedEndpoints(""), (pattern) -> mockRequestMatcher).     assertMatcher.doesNotMatch("/foo").     assertMatcher.doesNotMatch("/bar"). }
false;public;0;8;;@Test public void linksRequestMatcherShouldUseCustomRequestMatcherProvider() {     RequestMatcher matcher = EndpointRequest.toLinks().     RequestMatcher mockRequestMatcher = (request) -> false.     RequestMatcherAssert assertMatcher = assertMatcher(matcher, mockPathMappedEndpoints("/actuator"), (pattern) -> mockRequestMatcher).     assertMatcher.doesNotMatch("/actuator"). }
false;public;0;6;;@Test public void noEndpointPathsBeansShouldNeverMatch() {     RequestMatcher matcher = EndpointRequest.toAnyEndpoint().     assertMatcher(matcher, (PathMappedEndpoints) null).doesNotMatch("/actuator/foo").     assertMatcher(matcher, (PathMappedEndpoints) null).doesNotMatch("/actuator/bar"). }
false;private;1;3;;private RequestMatcherAssert assertMatcher(RequestMatcher matcher) {     return assertMatcher(matcher, mockPathMappedEndpoints("/actuator")). }
false;private;2;3;;private RequestMatcherAssert assertMatcher(RequestMatcher matcher, String basePath) {     return assertMatcher(matcher, mockPathMappedEndpoints(basePath), null). }
false;private;1;6;;private PathMappedEndpoints mockPathMappedEndpoints(String basePath) {     List<ExposableEndpoint<?>> endpoints = new ArrayList<>().     endpoints.add(mockEndpoint(EndpointId.of("foo"), "foo")).     endpoints.add(mockEndpoint(EndpointId.of("bar"), "bar")).     return new PathMappedEndpoints(basePath, () -> endpoints). }
false;private;2;6;;private TestEndpoint mockEndpoint(EndpointId id, String rootPath) {     TestEndpoint endpoint = mock(TestEndpoint.class).     given(endpoint.getEndpointId()).willReturn(id).     given(endpoint.getRootPath()).willReturn(rootPath).     return endpoint. }
false;private;2;4;;private RequestMatcherAssert assertMatcher(RequestMatcher matcher, PathMappedEndpoints pathMappedEndpoints) {     return assertMatcher(matcher, pathMappedEndpoints, null). }
false;private;3;18;;private RequestMatcherAssert assertMatcher(RequestMatcher matcher, PathMappedEndpoints pathMappedEndpoints, RequestMatcherProvider matcherProvider) {     StaticWebApplicationContext context = new StaticWebApplicationContext().     context.registerBean(WebEndpointProperties.class).     if (pathMappedEndpoints != null) {         context.registerBean(PathMappedEndpoints.class, () -> pathMappedEndpoints).         WebEndpointProperties properties = context.getBean(WebEndpointProperties.class).         if (!properties.getBasePath().equals(pathMappedEndpoints.getBasePath())) {             properties.setBasePath(pathMappedEndpoints.getBasePath()).         }     }     if (matcherProvider != null) {         context.registerBean(RequestMatcherProvider.class, () -> matcherProvider).     }     return assertThat(new RequestMatcherAssert(context, matcher)). }
false;public;1;3;;public void matches(String servletPath) {     matches(mockRequest(servletPath)). }
false;private;1;4;;private void matches(HttpServletRequest request) {     assertThat(this.matcher.matches(request)).as("Matches " + getRequestPath(request)).isTrue(). }
false;public;1;3;;public void doesNotMatch(String servletPath) {     doesNotMatch(mockRequest(servletPath)). }
false;private;1;4;;private void doesNotMatch(HttpServletRequest request) {     assertThat(this.matcher.matches(request)).as("Does not match " + getRequestPath(request)).isFalse(). }
false;private;1;11;;private MockHttpServletRequest mockRequest(String servletPath) {     MockServletContext servletContext = new MockServletContext().     servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context).     MockHttpServletRequest request = new MockHttpServletRequest(servletContext).     if (servletPath != null) {         request.setServletPath(servletPath).     }     return request. }
false;private;1;7;;private String getRequestPath(HttpServletRequest request) {     String url = request.getServletPath().     if (request.getPathInfo() != null) {         url += request.getPathInfo().     }     return url. }
