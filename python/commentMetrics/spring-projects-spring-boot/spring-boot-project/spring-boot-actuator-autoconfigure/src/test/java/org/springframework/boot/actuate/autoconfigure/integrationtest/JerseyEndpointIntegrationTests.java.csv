commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void linksAreProvidedToAllEndpointTypes() {     testJerseyEndpoints(new Class[] { EndpointsConfiguration.class, ResourceConfigConfiguration.class }). }
false;public;0;4;;@Test public void actuatorEndpointsWhenUserProvidedResourceConfigBeanNotAvailable() {     testJerseyEndpoints(new Class[] { EndpointsConfiguration.class }). }
false;protected;1;29;;protected void testJerseyEndpoints(Class<?>[] userConfigurations) {     FilteredClassLoader classLoader = new FilteredClassLoader(DispatcherServlet.class).     new WebApplicationContextRunner(AnnotationConfigServletWebServerApplicationContext::new).withClassLoader(classLoader).withConfiguration(AutoConfigurations.of(JacksonAutoConfiguration.class, JerseyAutoConfiguration.class, EndpointAutoConfiguration.class, ServletWebServerFactoryAutoConfiguration.class, WebEndpointAutoConfiguration.class, ManagementContextAutoConfiguration.class, BeansEndpointAutoConfiguration.class)).withUserConfiguration(userConfigurations).withPropertyValues("management.endpoints.web.exposure.include:*", "server.port:0").run((context) -> {         int port = context.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class).getWebServer().getPort().         WebTestClient client = WebTestClient.bindToServer().baseUrl("http://localhost:" + port).build().         client.get().uri("/actuator").exchange().expectStatus().isOk().expectBody().jsonPath("_links.beans").isNotEmpty().jsonPath("_links.restcontroller").doesNotExist().jsonPath("_links.controller").doesNotExist().     }). }
false;;0;4;;@Bean TestControllerEndpoint testControllerEndpoint() {     return new TestControllerEndpoint(). }
false;;0;4;;@Bean TestRestControllerEndpoint testRestControllerEndpoint() {     return new TestRestControllerEndpoint(). }
false;;0;4;;@Bean ResourceConfig testResourceConfig() {     return new ResourceConfig(). }
