commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void contextShouldContainServletEndpointRegistrar() {     FilteredClassLoader classLoader = new FilteredClassLoader(ResourceConfig.class).     this.contextRunner.withClassLoader(classLoader).run((context) -> {         assertThat(context).hasSingleBean(ServletEndpointRegistrar.class).         ServletEndpointRegistrar bean = context.getBean(ServletEndpointRegistrar.class).         assertThat(bean).hasFieldOrPropertyWithValue("basePath", "/test/actuator").     }). }
false;public;0;11;;@Test public void contextWhenJerseyShouldContainServletEndpointRegistrar() {     FilteredClassLoader classLoader = new FilteredClassLoader(DispatcherServlet.class).     this.contextRunner.withClassLoader(classLoader).run((context) -> {         assertThat(context).hasSingleBean(ServletEndpointRegistrar.class).         ServletEndpointRegistrar bean = context.getBean(ServletEndpointRegistrar.class).         assertThat(bean).hasFieldOrPropertyWithValue("basePath", "/jersey/actuator").     }). }
false;public;0;6;;@Test public void contextWhenNoServletBasedShouldNotContainServletEndpointRegistrar() {     new ApplicationContextRunner().withUserConfiguration(TestConfig.class).run((context) -> assertThat(context).doesNotHaveBean(ServletEndpointRegistrar.class)). }
false;public;0;4;;@Bean public ServletEndpointsSupplier servletEndpointsSupplier() {     return Collections::emptyList. }
false;public;0;4;;@Bean public DispatcherServletPath dispatcherServletPath() {     return () -> "/test". }
false;public;0;4;;@Bean public JerseyApplicationPath jerseyApplicationPath() {     return () -> "/jersey". }
