commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void backsOffWithoutAClock() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(NewRelicMeterRegistry.class)). }
false;public;0;6;;@Test public void failsWithoutAnApiKey() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.newrelic.account-id=12345").run((context) -> assertThat(context).hasFailed()). }
false;public;0;6;;@Test public void failsWithoutAnAccountId() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.newrelic.api-key=abcde").run((context) -> assertThat(context).hasFailed()). }
false;public;0;9;;@Test public void autoConfiguresWithAccountIdAndApiKey() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.newrelic.api-key=abcde", "management.metrics.export.newrelic.account-id=12345").run((context) -> assertThat(context).hasSingleBean(NewRelicMeterRegistry.class).hasSingleBean(Clock.class).hasSingleBean(NewRelicConfig.class)). }
false;public;0;8;;@Test public void autoConfigurationCanBeDisabled() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.newrelic.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(NewRelicMeterRegistry.class).doesNotHaveBean(NewRelicConfig.class)). }
false;public;0;8;;@Test public void allowsConfigToBeCustomized() {     this.contextRunner.withUserConfiguration(CustomConfigConfiguration.class).withPropertyValues("management.metrics.export.newrelic.api-key=abcde", "management.metrics.export.newrelic.account-id=12345").run((context) -> assertThat(context).hasSingleBean(NewRelicConfig.class).hasBean("customConfig")). }
false;public;0;9;;@Test public void allowsRegistryToBeCustomized() {     this.contextRunner.withUserConfiguration(CustomRegistryConfiguration.class).withPropertyValues("management.metrics.export.newrelic.api-key=abcde", "management.metrics.export.newrelic.account-id=12345").run((context) -> assertThat(context).hasSingleBean(NewRelicMeterRegistry.class).hasBean("customRegistry")). }
false;public;0;13;;@Test public void stopsMeterRegistryWhenContextIsClosed() {     this.contextRunner.withPropertyValues("management.metrics.export.newrelic.api-key=abcde", "management.metrics.export.newrelic.account-id=abcde").withUserConfiguration(BaseConfiguration.class).run((context) -> {         NewRelicMeterRegistry registry = context.getBean(NewRelicMeterRegistry.class).         assertThat(registry.isClosed()).isFalse().         context.close().         assertThat(registry.isClosed()).isTrue().     }). }
false;public;0;4;;@Bean public Clock customClock() {     return Clock.SYSTEM. }
false;public;0;12;;@Bean public NewRelicConfig customConfig() {     return (key) -> {         if ("newrelic.accountId".equals(key)) {             return "abcde".         }         if ("newrelic.apiKey".equals(key)) {             return "12345".         }         return null.     }. }
false;public;2;4;;@Bean public NewRelicMeterRegistry customRegistry(NewRelicConfig config, Clock clock) {     return new NewRelicMeterRegistry(config, clock). }
