commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void backsOffWithoutAClock() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(GraphiteMeterRegistry.class)). }
false;public;0;14;;@Test public void autoConfiguresUseTagsAsPrefix() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.graphite.tags-as-prefix=app").run((context) -> {         assertThat(context).hasSingleBean(GraphiteMeterRegistry.class).         GraphiteMeterRegistry registry = context.getBean(GraphiteMeterRegistry.class).         registry.counter("test.count", Tags.of("app", "myapp")).         assertThat(registry.getDropwizardRegistry().getMeters()).containsOnlyKeys("myapp.testCount").     }). }
false;public;0;7;;@Test public void autoConfiguresItsConfigAndMeterRegistry() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> assertThat(context).hasSingleBean(GraphiteMeterRegistry.class).hasSingleBean(GraphiteConfig.class)). }
false;public;0;8;;@Test public void autoConfigurationCanBeDisabled() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.graphite.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(GraphiteMeterRegistry.class).doesNotHaveBean(GraphiteConfig.class)). }
false;public;0;7;;@Test public void allowsCustomConfigToBeUsed() {     this.contextRunner.withUserConfiguration(CustomConfigConfiguration.class).run((context) -> assertThat(context).hasSingleBean(GraphiteMeterRegistry.class).hasSingleBean(GraphiteConfig.class).hasBean("customConfig")). }
false;public;0;7;;@Test public void allowsCustomRegistryToBeUsed() {     this.contextRunner.withUserConfiguration(CustomRegistryConfiguration.class).run((context) -> assertThat(context).hasSingleBean(GraphiteMeterRegistry.class).hasBean("customRegistry").hasSingleBean(GraphiteConfig.class)). }
false;public;0;11;;@Test public void stopsMeterRegistryWhenContextIsClosed() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> {         GraphiteMeterRegistry registry = context.getBean(GraphiteMeterRegistry.class).         assertThat(registry.isClosed()).isFalse().         context.close().         assertThat(registry.isClosed()).isTrue().     }). }
false;public;0;4;;@Bean public Clock clock() {     return Clock.SYSTEM. }
false;public;0;9;;@Bean public GraphiteConfig customConfig() {     return (key) -> {         if ("Graphite.apiKey".equals(key)) {             return "12345".         }         return null.     }. }
false;public;2;4;;@Bean public GraphiteMeterRegistry customRegistry(GraphiteConfig config, Clock clock) {     return new GraphiteMeterRegistry(config, clock). }
