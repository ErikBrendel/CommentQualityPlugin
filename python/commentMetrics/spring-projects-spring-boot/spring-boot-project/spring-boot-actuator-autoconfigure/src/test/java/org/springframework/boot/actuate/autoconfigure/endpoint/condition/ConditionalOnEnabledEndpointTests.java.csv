commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void outcomeWhenEndpointEnabledPropertyIsTrueShouldMatch() {     this.contextRunner.withPropertyValues("management.endpoint.foo.enabled=true").withUserConfiguration(FooEndpointEnabledByDefaultFalseConfiguration.class).run((context) -> assertThat(context).hasBean("foo")). }
false;public;0;6;;@Test public void outcomeWhenEndpointEnabledPropertyIsFalseShouldNotMatch() {     this.contextRunner.withPropertyValues("management.endpoint.foo.enabled=false").withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean("foo")). }
false;public;0;8;;@Test public void outcomeWhenNoEndpointPropertyAndUserDefinedDefaultIsTrueShouldMatch() {     this.contextRunner.withPropertyValues("management.endpoints.enabled-by-default=true").withUserConfiguration(FooEndpointEnabledByDefaultFalseConfiguration.class).run((context) -> assertThat(context).hasBean("foo")). }
false;public;0;7;;@Test public void outcomeWhenNoEndpointPropertyAndUserDefinedDefaultIsFalseShouldNotMatch() {     this.contextRunner.withPropertyValues("management.endpoints.enabled-by-default=false").withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean("foo")). }
false;public;0;6;;@Test public void outcomeWhenNoPropertiesAndAnnotationIsEnabledByDefaultShouldMatch() {     this.contextRunner.withUserConfiguration(FooEndpointEnabledByDefaultTrueConfiguration.class).run((context) -> assertThat(context).hasBean("foo")). }
false;public;0;7;;@Test public void outcomeWhenNoPropertiesAndAnnotationIsNotEnabledByDefaultShouldNotMatch() {     this.contextRunner.withUserConfiguration(FooEndpointEnabledByDefaultFalseConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean("foo")). }
false;public;0;7;;@Test public void outcomeWhenNoPropertiesAndExtensionAnnotationIsEnabledByDefaultShouldMatch() {     this.contextRunner.withUserConfiguration(FooEndpointAndExtensionEnabledByDefaultTrueConfiguration.class).run((context) -> assertThat(context).hasBean("foo").hasBean("fooExt")). }
false;public;0;8;;@Test public void outcomeWhenNoPropertiesAndExtensionAnnotationIsNotEnabledByDefaultShouldNotMatch() {     this.contextRunner.withUserConfiguration(FooEndpointAndExtensionEnabledByDefaultFalseConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean("foo").doesNotHaveBean("fooExt")). }
false;public;0;7;;@Test public void outcomeWithReferenceWhenNoPropertiesShouldMatch() {     this.contextRunner.withUserConfiguration(FooEndpointEnabledByDefaultTrue.class, ComponentEnabledIfEndpointIsEnabledConfiguration.class).run((context) -> assertThat(context).hasBean("fooComponent")). }
false;public;0;7;;@Test public void outcomeWithReferenceWhenEndpointEnabledPropertyIsTrueShouldMatch() {     this.contextRunner.withPropertyValues("management.endpoint.foo.enabled=true").withUserConfiguration(FooEndpointEnabledByDefaultTrue.class, ComponentEnabledIfEndpointIsEnabledConfiguration.class).run((context) -> assertThat(context).hasBean("fooComponent")). }
false;public;0;7;;@Test public void outcomeWithReferenceWhenEndpointEnabledPropertyIsFalseShouldNotMatch() {     this.contextRunner.withPropertyValues("management.endpoint.foo.enabled=false").withUserConfiguration(FooEndpointEnabledByDefaultTrue.class, ComponentEnabledIfEndpointIsEnabledConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean("fooComponent")). }
false;public;0;13;;@Test public void outcomeWithNoReferenceShouldFail() {     this.contextRunner.withUserConfiguration(ComponentWithNoEndpointReferenceConfiguration.class).run((context) -> {         assertThat(context).hasFailed().         assertThat(context.getStartupFailure().getCause().getMessage()).contains("No endpoint is specified and the return type of the @Bean method " + "is neither an @Endpoint, nor an @EndpointExtension").     }). }
false;public;0;7;;@Test public void outcomeWhenEndpointEnabledPropertyIsTrueAndMixedCaseShouldMatch() {     this.contextRunner.withPropertyValues("management.endpoint.foo-bar.enabled=true").withUserConfiguration(FooBarEndpointEnabledByDefaultFalseConfiguration.class).run((context) -> assertThat(context).hasBean("fooBar")). }
false;public;0;7;;@Test public void outcomeWhenEndpointEnabledPropertyIsFalseOnClassShouldNotMatch() {     this.contextRunner.withPropertyValues("management.endpoint.foo.enabled=false").withUserConfiguration(FooEndpointEnabledByDefaultTrueOnConfigurationConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean("foo")). }
false;public;1;4;;@Override public boolean match(ExposableEndpoint<?> endpoint) {     return true. }
false;public;0;5;;@Bean @ConditionalOnEnabledEndpoint public FooEndpointEnabledByDefaultTrue foo() {     return new FooEndpointEnabledByDefaultTrue(). }
false;public;0;4;;@Bean public FooEndpointEnabledByDefaultTrue foo() {     return new FooEndpointEnabledByDefaultTrue(). }
false;public;0;5;;@Bean @ConditionalOnEnabledEndpoint public FooEndpointEnabledByDefaultFalse foo() {     return new FooEndpointEnabledByDefaultFalse(). }
false;public;0;5;;@Bean @ConditionalOnEnabledEndpoint public FooBarEndpointEnabledByDefaultFalse fooBar() {     return new FooBarEndpointEnabledByDefaultFalse(). }
false;public;0;5;;@Bean @ConditionalOnEnabledEndpoint public FooEndpointEnabledByDefaultTrue foo() {     return new FooEndpointEnabledByDefaultTrue(). }
false;public;0;5;;@Bean @ConditionalOnEnabledEndpoint public FooEndpointExtensionEnabledByDefaultTrue fooExt() {     return new FooEndpointExtensionEnabledByDefaultTrue(). }
false;public;0;5;;@Bean @ConditionalOnEnabledEndpoint public FooEndpointEnabledByDefaultFalse foo() {     return new FooEndpointEnabledByDefaultFalse(). }
false;public;0;5;;@Bean @ConditionalOnEnabledEndpoint public FooEndpointExtensionEnabledByDefaultFalse fooExt() {     return new FooEndpointExtensionEnabledByDefaultFalse(). }
false;public;0;5;;@Bean @ConditionalOnEnabledEndpoint(endpoint = FooEndpointEnabledByDefaultTrue.class) public String fooComponent() {     return "foo". }
false;public;0;5;;@Bean @ConditionalOnEnabledEndpoint public String fooComponent() {     return "foo". }
