commented;modifiers;parameterAmount;loc;comment;code
false;public;0;33;;@Test public void scheduledTasks() throws Exception {     this.mockMvc.perform(get("/actuator/scheduledtasks")).andExpect(status().isOk()).andDo(document("scheduled-tasks", preprocessResponse(replacePattern(Pattern.compile("org.*\\.ScheduledTasksEndpointDocumentationTests\\$" + "TestConfiguration"), "com.example.Processor")), responseFields(fieldWithPath("cron").description("Cron tasks, if any."), targetFieldWithPrefix("cron.[]."), fieldWithPath("cron.[].expression").description("Cron expression."), fieldWithPath("fixedDelay").description("Fixed delay tasks, if any."), targetFieldWithPrefix("fixedDelay.[]."), initialDelayWithPrefix("fixedDelay.[]."), fieldWithPath("fixedDelay.[].interval").description("Interval, in milliseconds, between the end of the last" + " execution and the start of the next."), fieldWithPath("fixedRate").description("Fixed rate tasks, if any."), targetFieldWithPrefix("fixedRate.[]."), fieldWithPath("fixedRate.[].interval").description("Interval, in milliseconds, between the start of each execution."), initialDelayWithPrefix("fixedRate.[]."), fieldWithPath("custom").description("Tasks with custom triggers, if any."), targetFieldWithPrefix("custom.[]."), fieldWithPath("custom.[].trigger").description("Trigger for the task.")))).andDo(MockMvcResultHandlers.print()). }
false;private;1;4;;private FieldDescriptor targetFieldWithPrefix(String prefix) {     return fieldWithPath(prefix + "runnable.target").description("Target that will be executed."). }
false;private;1;4;;private FieldDescriptor initialDelayWithPrefix(String prefix) {     return fieldWithPath(prefix + "initialDelay").description("Delay, in milliseconds, before first execution."). }
false;public;1;4;;@Bean public ScheduledTasksEndpoint endpoint(Collection<ScheduledTaskHolder> holders) {     return new ScheduledTasksEndpoint(holders). }
false;public;0;4;;@Scheduled(cron = "0 0 0/3 1/1 * ?") public void processOrders() { }
false;public;0;4;;@Scheduled(fixedDelay = 5000, initialDelay = 5000) public void purge() { }
false;public;0;4;;@Scheduled(fixedRate = 3000, initialDelay = 10000) public void retrieveIssues() { }
false;public;0;5;;@Bean public SchedulingConfigurer schedulingConfigurer() {     return (registrar) -> registrar.addTriggerTask(new CustomTriggeredRunnable(), new CustomTrigger()). }
false;public;1;4;;@Override public Date nextExecutionTime(TriggerContext triggerContext) {     return new Date(). }
false;public;0;4;;@Override public void run() { }
