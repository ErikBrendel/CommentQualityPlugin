commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void flyway() throws Exception {     this.mockMvc.perform(get("/actuator/flyway")).andExpect(status().isOk()).andDo(MockMvcRestDocumentation.document("flyway", responseFields(fieldWithPath("contexts").description("Application contexts keyed by id"), fieldWithPath("contexts.*.flywayBeans.*.migrations").description("Migrations performed by the Flyway instance, keyed by" + " Flyway bean name.")).andWithPrefix("contexts.*.flywayBeans.*.migrations.[].", migrationFieldDescriptors()).and(parentIdField()))). }
false;private;0;33;;private List<FieldDescriptor> migrationFieldDescriptors() {     return Arrays.asList(fieldWithPath("checksum").description("Checksum of the migration, if any.").optional(), fieldWithPath("description").description("Description of the migration, if any.").optional(), fieldWithPath("executionTime").description("Execution time in milliseconds of an applied migration.").optional(), fieldWithPath("installedBy").description("User that installed the applied migration, if any.").optional(), fieldWithPath("installedOn").description("Timestamp of when the applied migration was installed, " + "if any.").optional(), fieldWithPath("installedRank").description("Rank of the applied migration, if any. Later migrations have " + "higher ranks.").optional(), fieldWithPath("script").description("Name of the script used to execute the migration, if any.").optional(), fieldWithPath("state").description("State of the migration. (" + describeEnumValues(MigrationState.class) + ")"), fieldWithPath("type").description("Type of the migration. (" + describeEnumValues(MigrationType.class) + ")"), fieldWithPath("version").description("Version of the database after applying the migration, " + "if any.").optional()). }
false;public;0;6;;@Bean public DataSource dataSource() {     return new EmbeddedDatabaseBuilder().generateUniqueName(true).setType(EmbeddedDatabaseConnection.get(getClass().getClassLoader()).getType()).build(). }
false;public;1;4;;@Bean public FlywayEndpoint endpoint(ApplicationContext context) {     return new FlywayEndpoint(context). }
