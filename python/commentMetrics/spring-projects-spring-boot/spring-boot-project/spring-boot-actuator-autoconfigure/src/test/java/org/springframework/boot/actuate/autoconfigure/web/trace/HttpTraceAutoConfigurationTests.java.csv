commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void configuresRepository() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).run((context) -> assertThat(context).hasSingleBean(InMemoryHttpTraceRepository.class)). }
false;public;0;12;;@Test public void usesUserProvidedRepository() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).withUserConfiguration(CustomRepositoryConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(HttpTraceRepository.class).         assertThat(context.getBean(HttpTraceRepository.class)).isInstanceOf(CustomHttpTraceRepository.class).     }). }
false;public;0;8;;@Test public void configuresTracer() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).run((context) -> assertThat(context).hasSingleBean(HttpExchangeTracer.class)). }
false;public;0;11;;@Test public void usesUserProvidedTracer() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).withUserConfiguration(CustomTracerConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(HttpExchangeTracer.class).         assertThat(context.getBean(HttpExchangeTracer.class)).isInstanceOf(CustomHttpExchangeTracer.class).     }). }
false;public;0;8;;@Test public void configuresWebFilter() {     new ReactiveWebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).run((context) -> assertThat(context).hasSingleBean(HttpTraceWebFilter.class)). }
false;public;0;12;;@Test public void usesUserProvidedWebFilter() {     new ReactiveWebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).withUserConfiguration(CustomWebFilterConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(HttpTraceWebFilter.class).         assertThat(context.getBean(HttpTraceWebFilter.class)).isInstanceOf(CustomHttpTraceWebFilter.class).     }). }
false;public;0;8;;@Test public void configuresServletFilter() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).run((context) -> assertThat(context).hasSingleBean(HttpTraceFilter.class)). }
false;public;0;11;;@Test public void usesUserProvidedServletFilter() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).withUserConfiguration(CustomFilterConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(HttpTraceFilter.class).         assertThat(context.getBean(HttpTraceFilter.class)).isInstanceOf(CustomHttpTraceFilter.class).     }). }
false;public;0;11;;@Test public void backsOffWhenDisabled() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(HttpTraceAutoConfiguration.class)).withPropertyValues("management.trace.http.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(InMemoryHttpTraceRepository.class).doesNotHaveBean(HttpExchangeTracer.class).doesNotHaveBean(HttpTraceFilter.class)). }
false;public;0;4;;@Override public List<HttpTrace> findAll() {     return null. }
false;public;1;4;;@Override public void add(HttpTrace trace) { }
false;public;0;4;;@Bean public CustomHttpTraceRepository customRepository() {     return new CustomHttpTraceRepository(). }
false;public;1;4;;@Bean public CustomHttpExchangeTracer customTracer(HttpTraceProperties properties) {     return new CustomHttpExchangeTracer(properties.getInclude()). }
false;public;3;6;;@Bean public CustomHttpTraceWebFilter customWebFilter(HttpTraceRepository repository, HttpExchangeTracer tracer, HttpTraceProperties properties) {     return new CustomHttpTraceWebFilter(repository, tracer, properties.getInclude()). }
false;public;2;5;;@Bean public CustomHttpTraceFilter customWebFilter(HttpTraceRepository repository, HttpExchangeTracer tracer) {     return new CustomHttpTraceFilter(repository, tracer). }
