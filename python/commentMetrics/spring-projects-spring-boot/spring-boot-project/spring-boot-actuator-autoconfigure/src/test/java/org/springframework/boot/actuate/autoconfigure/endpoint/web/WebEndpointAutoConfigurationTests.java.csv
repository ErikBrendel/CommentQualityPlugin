commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void webApplicationConfiguresEndpointMediaTypes() {     this.contextRunner.run((context) -> {         EndpointMediaTypes endpointMediaTypes = context.getBean(EndpointMediaTypes.class).         assertThat(endpointMediaTypes.getConsumed()).containsExactly(ActuatorMediaType.V2_JSON, "application/json").     }). }
false;public;0;12;;@Test public void webApplicationConfiguresPathMapper() {     this.contextRunner.withPropertyValues("management.endpoints.web.path-mapping.health=healthcheck").run((context) -> {         assertThat(context).hasSingleBean(PathMapper.class).         String pathMapping = context.getBean(PathMapper.class).getRootPath(EndpointId.of("health")).         assertThat(pathMapping).isEqualTo("healthcheck").     }). }
false;public;0;20;;@Test public void webApplicationSupportCustomPathMatcher() {     this.contextRunner.withPropertyValues("management.endpoints.web.exposure.include=*", "management.endpoints.web.path-mapping.testanotherone=foo").withUserConfiguration(TestPathMatcher.class, TestOneEndpoint.class, TestAnotherOneEndpoint.class, TestTwoEndpoint.class).run((context) -> {         WebEndpointDiscoverer discoverer = context.getBean(WebEndpointDiscoverer.class).         Collection<ExposableWebEndpoint> endpoints = discoverer.getEndpoints().         ExposableWebEndpoint[] webEndpoints = endpoints.toArray(new ExposableWebEndpoint[0]).         List<String> paths = Arrays.stream(webEndpoints).map(PathMappedEndpoint::getRootPath).collect(Collectors.toList()).         assertThat(paths).containsOnly("1/testone", "foo", "testtwo").     }). }
false;public;0;7;;@Test public void webApplicationConfiguresEndpointDiscoverer() {     this.contextRunner.run((context) -> {         assertThat(context).hasSingleBean(ControllerEndpointDiscoverer.class).         assertThat(context).hasSingleBean(WebEndpointDiscoverer.class).     }). }
false;public;0;7;;@Test public void webApplicationConfiguresExposeExcludePropertyEndpointFilter() {     this.contextRunner.run((context) -> assertThat(context).getBeans(ExposeExcludePropertyEndpointFilter.class).containsKeys("webExposeExcludePropertyEndpointFilter", "controllerExposeExcludePropertyEndpointFilter")). }
false;public;0;5;;@Test public void contextShouldConfigureServletEndpointDiscoverer() {     this.contextRunner.run((context) -> assertThat(context).hasSingleBean(ServletEndpointDiscoverer.class)). }
false;public;0;6;;@Test public void contextWhenNotServletShouldNotConfigureServletEndpointDiscoverer() {     new ApplicationContextRunner().withConfiguration(CONFIGURATIONS).run((context) -> assertThat(context).doesNotHaveBean(ServletEndpointDiscoverer.class)). }
false;public;1;7;;@Override public String getRootPath(EndpointId endpointId) {     if (endpointId.toString().endsWith("one")) {         return "1/" + endpointId.toString().     }     return null. }
