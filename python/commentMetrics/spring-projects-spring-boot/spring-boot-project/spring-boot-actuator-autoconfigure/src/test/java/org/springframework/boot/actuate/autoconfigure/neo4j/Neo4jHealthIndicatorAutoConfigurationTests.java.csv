commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void runShouldCreateIndicator() {     this.contextRunner.run((context) -> assertThat(context).hasSingleBean(Neo4jHealthIndicator.class).doesNotHaveBean(ApplicationHealthIndicator.class)). }
false;public;0;7;;@Test public void runWhenDisabledShouldNotCreateIndicator() {     this.contextRunner.withPropertyValues("management.health.neo4j.enabled:false").run((context) -> assertThat(context).doesNotHaveBean(Neo4jHealthIndicator.class).hasSingleBean(ApplicationHealthIndicator.class)). }
false;public;0;10;;@Test public void defaultIndicatorCanBeReplaced() {     this.contextRunner.withUserConfiguration(CustomIndicatorConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(Neo4jHealthIndicator.class).         assertThat(context).doesNotHaveBean(ApplicationHealthIndicator.class).         Health health = context.getBean(Neo4jHealthIndicator.class).health().         assertThat(health.getDetails()).containsOnly(entry("test", true)).     }). }
false;public;0;4;;@Bean public SessionFactory sessionFactory() {     return mock(SessionFactory.class). }
false;protected;2;4;;@Override protected void extractResult(Session session, Health.Builder builder) {     builder.up().withDetail("test", true). }
false;public;1;11;;@Bean public Neo4jHealthIndicator neo4jHealthIndicator(SessionFactory sessionFactory) {     return new Neo4jHealthIndicator(sessionFactory) {          @Override         protected void extractResult(Session session, Health.Builder builder) {             builder.up().withDetail("test", true).         }     }. }
