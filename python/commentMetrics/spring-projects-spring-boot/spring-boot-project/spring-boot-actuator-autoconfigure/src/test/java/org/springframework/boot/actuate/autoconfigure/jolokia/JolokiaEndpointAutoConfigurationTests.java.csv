commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void jolokiaServletShouldBeEnabledByDefault() {     this.contextRunner.run((context) -> {         ExposableServletEndpoint endpoint = getEndpoint(context).         assertThat(endpoint.getRootPath()).isEqualTo("jolokia").         Object servlet = ReflectionTestUtils.getField(endpoint.getEndpointServlet(), "servlet").         assertThat(servlet).isInstanceOf(AgentServlet.class).     }). }
false;public;0;9;;@Test public void jolokiaServletWhenDisabledShouldNotBeDiscovered() {     this.contextRunner.withPropertyValues("management.endpoint.jolokia.enabled=false").run((context) -> {         Collection<ExposableServletEndpoint> endpoints = context.getBean(ServletEndpointsSupplier.class).getEndpoints().         assertThat(endpoints).isEmpty().     }). }
false;public;0;10;;@Test public void jolokiaServletWhenHasCustomConfigShouldApplyInitParams() {     this.contextRunner.withPropertyValues("management.endpoint.jolokia.config.debug=true").run((context) -> {         ExposableServletEndpoint endpoint = getEndpoint(context).         assertThat(endpoint.getEndpointServlet()).extracting("initParameters").containsOnly(Collections.singletonMap("debug", "true")).     }). }
false;private;1;6;;private ExposableServletEndpoint getEndpoint(AssertableWebApplicationContext context) {     Collection<ExposableServletEndpoint> endpoints = context.getBean(ServletEndpointsSupplier.class).getEndpoints().     return endpoints.iterator().next(). }
false;public;1;6;;@Bean public ServletEndpointDiscoverer servletEndpointDiscoverer(ApplicationContext applicationContext) {     return new ServletEndpointDiscoverer(applicationContext, null, Collections.emptyList()). }
