commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void autoConfiguredEntityManagerFactoryWithStatsIsInstrumented() {     this.contextRunner.withPropertyValues("spring.jpa.properties.hibernate.generate_statistics:true").run((context) -> {         MeterRegistry registry = context.getBean(MeterRegistry.class).         registry.get("hibernate.statements").tags("entityManagerFactory", "entityManagerFactory").meter().     }). }
false;public;0;12;;@Test public void autoConfiguredEntityManagerFactoryWithoutStatsIsNotInstrumented() {     this.contextRunner.withPropertyValues("spring.jpa.properties.hibernate.generate_statistics:false").run((context) -> {         context.getBean(EntityManagerFactory.class).unwrap(SessionFactory.class).         MeterRegistry registry = context.getBean(MeterRegistry.class).         assertThat(registry.find("hibernate.statements").meter()).isNull().     }). }
false;public;0;12;;@Test public void entityManagerFactoryInstrumentationCanBeDisabled() {     this.contextRunner.withPropertyValues("management.metrics.enable.hibernate=false", "spring.jpa.properties.hibernate.generate_statistics:true").run((context) -> {         context.getBean(EntityManagerFactory.class).unwrap(SessionFactory.class).         MeterRegistry registry = context.getBean(MeterRegistry.class).         assertThat(registry.find("hibernate.statements").meter()).isNull().     }). }
false;public;0;18;;@Test public void allEntityManagerFactoriesCanBeInstrumented() {     this.contextRunner.withPropertyValues("spring.jpa.properties.hibernate.generate_statistics:true").withUserConfiguration(TwoEntityManagerFactoriesConfiguration.class).run((context) -> {         context.getBean("firstEntityManagerFactory", EntityManagerFactory.class).unwrap(SessionFactory.class).         context.getBean("secondOne", EntityManagerFactory.class).unwrap(SessionFactory.class).         MeterRegistry registry = context.getBean(MeterRegistry.class).         registry.get("hibernate.statements").tags("entityManagerFactory", "first").meter().         registry.get("hibernate.statements").tags("entityManagerFactory", "secondOne").meter().     }). }
false;public;0;16;;@Test public void entityManagerFactoryInstrumentationIsDisabledIfNotHibernateSessionFactory() {     this.contextRunner.withPropertyValues("spring.jpa.properties.hibernate.generate_statistics:true").withUserConfiguration(NonHibernateEntityManagerFactoryConfiguration.class).run((context) -> {         // ensure EntityManagerFactory is not a Hibernate SessionFactory         assertThatThrownBy(() -> context.getBean(EntityManagerFactory.class).unwrap(SessionFactory.class)).isInstanceOf(PersistenceException.class).         MeterRegistry registry = context.getBean(MeterRegistry.class).         assertThat(registry.find("hibernate.statements").meter()).isNull().     }). }
false;public;0;12;;@Test public void entityManagerFactoryInstrumentationIsDisabledIfHibernateIsNotAvailable() {     this.contextRunner.withClassLoader(new FilteredClassLoader(SessionFactory.class)).withUserConfiguration(NonHibernateEntityManagerFactoryConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean(HibernateMetricsAutoConfiguration.class).         MeterRegistry registry = context.getBean(MeterRegistry.class).         assertThat(registry.find("hibernate.statements").meter()).isNull().     }). }
false;public;0;4;;@Bean public SimpleMeterRegistry simpleMeterRegistry() {     return new SimpleMeterRegistry(). }
false;public;1;6;;@Primary @Bean public LocalContainerEntityManagerFactoryBean firstEntityManagerFactory(DataSource ds) {     return createSessionFactory(ds). }
false;public;1;4;;@Bean public LocalContainerEntityManagerFactoryBean secondOne(DataSource ds) {     return createSessionFactory(ds). }
false;private;1;7;;private LocalContainerEntityManagerFactoryBean createSessionFactory(DataSource ds) {     Map<String, String> jpaProperties = new HashMap<>().     jpaProperties.put("hibernate.generate_statistics", "true").     return new EntityManagerFactoryBuilder(new HibernateJpaVendorAdapter(), jpaProperties, null).dataSource(ds).packages(PACKAGE_CLASSES).build(). }
false;public;0;8;;@Bean public EntityManagerFactory entityManagerFactory() {     EntityManagerFactory mockedFactory = mock(EntityManagerFactory.class).     // enforces JPA contract     given(mockedFactory.unwrap(ArgumentMatchers.<Class<SessionFactory>>any())).willThrow(PersistenceException.class).     return mockedFactory. }
