commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;0;1;;protected abstract WebApplicationContextRunner getContextRunner().
false;public;0;7;;@Test public void toEndpointShouldMatch() {     getContextRunner().run((context) -> {         WebTestClient webTestClient = getWebTestClient(context).         webTestClient.get().uri("/actuator/e1").exchange().expectStatus().isOk().     }). }
false;public;0;15;;@Test public void toAllEndpointsShouldMatch() {     getContextRunner().withInitializer(new ConditionEvaluationReportLoggingListener(LogLevel.INFO)).withPropertyValues("spring.security.user.password=password").run((context) -> {         WebTestClient webTestClient = getWebTestClient(context).         webTestClient.get().uri("/actuator/e2").exchange().expectStatus().isUnauthorized().         webTestClient.get().uri("/actuator/e2").header("Authorization", getBasicAuth()).exchange().expectStatus().isOk().     }). }
false;public;0;8;;@Test public void toLinksShouldMatch() {     getContextRunner().run((context) -> {         WebTestClient webTestClient = getWebTestClient(context).         webTestClient.get().uri("/actuator").exchange().expectStatus().isOk().         webTestClient.get().uri("/actuator/").exchange().expectStatus().isOk().     }). }
false;protected;1;7;;protected WebTestClient getWebTestClient(AssertableWebApplicationContext context) {     int port = context.getSourceApplicationContext(AnnotationConfigServletWebServerApplicationContext.class).getWebServer().getPort().     return WebTestClient.bindToServer().baseUrl("http://localhost:" + port).build(). }
false;;0;3;;String getBasicAuth() {     return "Basic " + Base64.getEncoder().encodeToString("user:password".getBytes()). }
false;public;0;4;;@Bean public TestEndpoint1 endpoint1() {     return new TestEndpoint1(). }
false;public;0;4;;@Bean public TestEndpoint2 endpoint2() {     return new TestEndpoint2(). }
false;public;0;4;;@Bean public TestEndpoint3 endpoint3() {     return new TestEndpoint3(). }
false;public;0;8;;@Bean public PathMappedEndpoints pathMappedEndpoints() {     List<ExposableEndpoint<?>> endpoints = new ArrayList<>().     endpoints.add(mockEndpoint("e1")).     endpoints.add(mockEndpoint("e2")).     endpoints.add(mockEndpoint("e3")).     return new PathMappedEndpoints("/actuator", () -> endpoints). }
false;private;1;6;;private TestPathMappedEndpoint mockEndpoint(String id) {     TestPathMappedEndpoint endpoint = mock(TestPathMappedEndpoint.class).     given(endpoint.getEndpointId()).willReturn(EndpointId.of(id)).     given(endpoint.getRootPath()).willReturn(id).     return endpoint. }
false;public;0;4;;@ReadOperation public Object getAll() {     return "endpoint 1". }
false;public;0;4;;@ReadOperation public Object getAll() {     return "endpoint 2". }
false;public;0;4;;@ReadOperation public Object getAll() {     return null. }
false;protected;1;9;;@Override protected void configure(HttpSecurity http) throws Exception {     http.authorizeRequests().requestMatchers(EndpointRequest.toLinks()).permitAll().requestMatchers(EndpointRequest.to(TestEndpoint1.class)).permitAll().requestMatchers(EndpointRequest.toAnyEndpoint()).authenticated().anyRequest().hasRole("ADMIN").and().httpBasic(). }
false;public;0;14;;@Bean public WebSecurityConfigurerAdapter webSecurityConfigurerAdapter() {     return new WebSecurityConfigurerAdapter() {          @Override         protected void configure(HttpSecurity http) throws Exception {             http.authorizeRequests().requestMatchers(EndpointRequest.toLinks()).permitAll().requestMatchers(EndpointRequest.to(TestEndpoint1.class)).permitAll().requestMatchers(EndpointRequest.toAnyEndpoint()).authenticated().anyRequest().hasRole("ADMIN").and().httpBasic().         }     }. }
