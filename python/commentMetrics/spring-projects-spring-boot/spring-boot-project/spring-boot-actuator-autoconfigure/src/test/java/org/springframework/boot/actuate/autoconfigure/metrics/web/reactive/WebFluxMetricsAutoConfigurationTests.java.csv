commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void shouldProvideWebFluxMetricsBeans() {     this.contextRunner.run((context) -> {         assertThat(context).getBeans(MetricsWebFilter.class).hasSize(1).         assertThat(context).getBeans(DefaultWebFluxTagsProvider.class).hasSize(1).     }). }
false;public;0;6;;@Test public void shouldNotOverrideCustomTagsProvider() {     this.contextRunner.withUserConfiguration(CustomWebFluxTagsProviderConfig.class).run((context) -> assertThat(context).getBeans(WebFluxTagsProvider.class).hasSize(1).containsKey("customWebFluxTagsProvider")). }
false;public;0;14;;@Test public void afterMaxUrisReachedFurtherUrisAreDenied() {     this.contextRunner.withConfiguration(AutoConfigurations.of(WebFluxAutoConfiguration.class)).withUserConfiguration(TestController.class).withPropertyValues("management.metrics.web.server.max-uri-tags=2").run((context) -> {         MeterRegistry registry = getInitializedMeterRegistry(context).         assertThat(registry.get("http.server.requests").meters()).hasSize(2).         assertThat(this.output.toString()).contains("Reached the maximum number of URI tags " + "for 'http.server.requests'").     }). }
false;public;0;13;;@Test public void shouldNotDenyNorLogIfMaxUrisIsNotReached() {     this.contextRunner.withConfiguration(AutoConfigurations.of(WebFluxAutoConfiguration.class)).withUserConfiguration(TestController.class).withPropertyValues("management.metrics.web.server.max-uri-tags=5").run((context) -> {         MeterRegistry registry = getInitializedMeterRegistry(context).         assertThat(registry.get("http.server.requests").meters()).hasSize(3).         assertThat(this.output.toString()).doesNotContain("Reached the maximum number of URI tags for 'http.server.requests'").     }). }
false;public;0;12;;@Test public void metricsAreNotRecordedIfAutoTimeRequestsIsDisabled() {     this.contextRunner.withConfiguration(AutoConfigurations.of(WebFluxAutoConfiguration.class)).withUserConfiguration(TestController.class).withPropertyValues("management.metrics.web.server.auto-time-requests=false").run((context) -> {         MeterRegistry registry = getInitializedMeterRegistry(context).         assertThat(registry.find("http.server.requests").meter()).isNull().     }). }
false;private;1;9;;private MeterRegistry getInitializedMeterRegistry(AssertableReactiveWebApplicationContext context) {     WebTestClient webTestClient = WebTestClient.bindToApplicationContext(context).build().     for (int i = 0. i < 3. i++) {         webTestClient.get().uri("/test" + i).exchange().expectStatus().isOk().     }     return context.getBean(MeterRegistry.class). }
false;public;0;4;;@Bean public WebFluxTagsProvider customWebFluxTagsProvider() {     return mock(WebFluxTagsProvider.class). }
