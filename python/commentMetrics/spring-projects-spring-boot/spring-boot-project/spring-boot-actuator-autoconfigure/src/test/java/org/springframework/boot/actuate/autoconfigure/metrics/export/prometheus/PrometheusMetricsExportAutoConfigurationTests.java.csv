commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void backsOffWithoutAClock() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(PrometheusMeterRegistry.class)). }
false;public;0;8;;@Test public void autoConfiguresItsConfigCollectorRegistryAndMeterRegistry() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> assertThat(context).hasSingleBean(PrometheusMeterRegistry.class).hasSingleBean(CollectorRegistry.class).hasSingleBean(PrometheusConfig.class)). }
false;public;0;9;;@Test public void autoConfigurationCanBeDisabled() {     this.contextRunner.withPropertyValues("management.metrics.export.prometheus.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(PrometheusMeterRegistry.class).doesNotHaveBean(CollectorRegistry.class).doesNotHaveBean(PrometheusConfig.class)). }
false;public;0;8;;@Test public void allowsCustomConfigToBeUsed() {     this.contextRunner.withUserConfiguration(CustomConfigConfiguration.class).run((context) -> assertThat(context).hasSingleBean(PrometheusMeterRegistry.class).hasSingleBean(CollectorRegistry.class).hasSingleBean(PrometheusConfig.class).hasBean("customConfig")). }
false;public;0;8;;@Test public void allowsCustomRegistryToBeUsed() {     this.contextRunner.withUserConfiguration(CustomRegistryConfiguration.class).run((context) -> assertThat(context).hasSingleBean(PrometheusMeterRegistry.class).hasBean("customRegistry").hasSingleBean(CollectorRegistry.class).hasSingleBean(PrometheusConfig.class)). }
false;public;0;10;;@Test public void allowsCustomCollectorRegistryToBeUsed() {     this.contextRunner.withUserConfiguration(CustomCollectorRegistryConfiguration.class).run((context) -> assertThat(context).hasSingleBean(PrometheusMeterRegistry.class).hasBean("customCollectorRegistry").hasSingleBean(CollectorRegistry.class).hasSingleBean(PrometheusConfig.class)). }
false;public;0;9;;@Test public void addsScrapeEndpointToManagementContext() {     this.contextRunner.withConfiguration(AutoConfigurations.of(ManagementContextAutoConfiguration.class)).withUserConfiguration(BaseConfiguration.class).run((context) -> assertThat(context).hasSingleBean(PrometheusScrapeEndpoint.class)). }
false;public;0;10;;@Test public void scrapeEndpointCanBeDisabled() {     this.contextRunner.withConfiguration(AutoConfigurations.of(ManagementContextAutoConfiguration.class)).withPropertyValues("management.endpoint.prometheus.enabled=false").withUserConfiguration(BaseConfiguration.class).run((context) -> assertThat(context).doesNotHaveBean(PrometheusScrapeEndpoint.class)). }
false;public;0;9;;@Test public void allowsCustomScrapeEndpointToBeUsed() {     this.contextRunner.withConfiguration(AutoConfigurations.of(ManagementContextAutoConfiguration.class)).withUserConfiguration(CustomEndpointConfiguration.class).run((context) -> assertThat(context).hasBean("customEndpoint").hasSingleBean(PrometheusScrapeEndpoint.class)). }
false;public;0;11;;@Test public void withPushGatewayEnabled() {     this.contextRunner.withConfiguration(AutoConfigurations.of(ManagementContextAutoConfiguration.class)).withPropertyValues("management.metrics.export.prometheus.pushgateway.enabled=true").withUserConfiguration(BaseConfiguration.class).run((context) -> assertThat(context).hasSingleBean(PrometheusPushGatewayManager.class)). }
false;public;0;4;;@Bean public Clock clock() {     return Clock.SYSTEM. }
false;public;0;4;;@Bean public PrometheusConfig customConfig() {     return (key) -> null. }
false;public;3;5;;@Bean public PrometheusMeterRegistry customRegistry(PrometheusConfig config, CollectorRegistry collectorRegistry, Clock clock) {     return new PrometheusMeterRegistry(config, collectorRegistry, clock). }
false;public;0;4;;@Bean public CollectorRegistry customCollectorRegistry() {     return new CollectorRegistry(). }
false;public;1;5;;@Bean public PrometheusScrapeEndpoint customEndpoint(CollectorRegistry collectorRegistry) {     return new PrometheusScrapeEndpoint(collectorRegistry). }
