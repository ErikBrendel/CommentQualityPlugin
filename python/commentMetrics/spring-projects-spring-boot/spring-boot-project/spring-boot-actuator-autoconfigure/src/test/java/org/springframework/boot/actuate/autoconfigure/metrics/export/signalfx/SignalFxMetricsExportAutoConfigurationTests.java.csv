commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void backsOffWithoutAClock() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(SignalFxMeterRegistry.class)). }
false;public;0;5;;@Test public void failsWithoutAnAccessToken() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> assertThat(context).hasFailed()). }
false;public;0;9;;@Test public void autoConfiguresWithAnAccessToken() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.signalfx.access-token=abcde").run((context) -> assertThat(context).hasSingleBean(SignalFxMeterRegistry.class).hasSingleBean(Clock.class).hasSingleBean(SignalFxConfig.class)). }
false;public;0;8;;@Test public void autoConfigurationCanBeDisabled() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.signalfx.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(SignalFxMeterRegistry.class).doesNotHaveBean(SignalFxConfig.class)). }
false;public;0;10;;@Test public void allowsConfigToBeCustomized() {     this.contextRunner.withPropertyValues("management.metrics.export.signalfx.access-token=abcde").withUserConfiguration(CustomConfigConfiguration.class).run((context) -> assertThat(context).hasSingleBean(Clock.class).hasSingleBean(SignalFxMeterRegistry.class).hasSingleBean(SignalFxConfig.class).hasBean("customConfig")). }
false;public;0;11;;@Test public void allowsRegistryToBeCustomized() {     this.contextRunner.withPropertyValues("management.metrics.export.signalfx.access-token=abcde").withUserConfiguration(CustomRegistryConfiguration.class).run((context) -> assertThat(context).hasSingleBean(Clock.class).hasSingleBean(SignalFxConfig.class).hasSingleBean(SignalFxMeterRegistry.class).hasBean("customRegistry")). }
false;public;0;13;;@Test public void stopsMeterRegistryWhenContextIsClosed() {     this.contextRunner.withPropertyValues("management.metrics.export.signalfx.access-token=abcde").withUserConfiguration(BaseConfiguration.class).run((context) -> {         SignalFxMeterRegistry registry = context.getBean(SignalFxMeterRegistry.class).         assertThat(registry.isClosed()).isFalse().         context.close().         assertThat(registry.isClosed()).isTrue().     }). }
false;public;0;4;;@Bean public Clock customClock() {     return Clock.SYSTEM. }
false;public;0;9;;@Bean public SignalFxConfig customConfig() {     return (key) -> {         if ("signalfx.accessToken".equals(key)) {             return "abcde".         }         return null.     }. }
false;public;2;4;;@Bean public SignalFxMeterRegistry customRegistry(SignalFxConfig config, Clock clock) {     return new SignalFxMeterRegistry(config, clock). }
