commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void backsOffWithoutAClock() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(DynatraceMeterRegistry.class)). }
false;public;0;5;;@Test public void failsWithoutAUri() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> assertThat(context).hasFailed()). }
false;public;0;8;;@Test public void autoConfiguresConfigAndMeterRegistry() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).with(mandatoryProperties()).run((context) -> assertThat(context).hasSingleBean(DynatraceMeterRegistry.class).hasSingleBean(DynatraceConfig.class)). }
false;public;0;8;;@Test public void autoConfigurationCanBeDisabled() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.dynatrace.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(DynatraceMeterRegistry.class).doesNotHaveBean(DynatraceConfig.class)). }
false;public;0;7;;@Test public void allowsCustomConfigToBeUsed() {     this.contextRunner.withUserConfiguration(CustomConfigConfiguration.class).run((context) -> assertThat(context).hasSingleBean(DynatraceMeterRegistry.class).hasSingleBean(DynatraceConfig.class).hasBean("customConfig")). }
false;public;0;8;;@Test public void allowsCustomRegistryToBeUsed() {     this.contextRunner.withUserConfiguration(CustomRegistryConfiguration.class).with(mandatoryProperties()).run((context) -> assertThat(context).hasSingleBean(DynatraceMeterRegistry.class).hasBean("customRegistry").hasSingleBean(DynatraceConfig.class)). }
false;public;0;11;;@Test public void stopsMeterRegistryWhenContextIsClosed() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).with(mandatoryProperties()).run((context) -> {         DynatraceMeterRegistry registry = context.getBean(DynatraceMeterRegistry.class).         assertThat(registry.isClosed()).isFalse().         context.close().         assertThat(registry.isClosed()).isTrue().     }). }
false;private;0;6;;private Function<ApplicationContextRunner, ApplicationContextRunner> mandatoryProperties() {     return (runner) -> runner.withPropertyValues("management.metrics.export.dynatrace.uri=https://dynatrace.example.com", "management.metrics.export.dynatrace.api-token=abcde", "management.metrics.export.dynatrace.device-id=test"). }
false;public;0;4;;@Bean public Clock clock() {     return Clock.SYSTEM. }
false;public;0;15;;@Bean public DynatraceConfig customConfig() {     return (key) -> {         if ("dynatrace.uri".equals(key)) {             return "https://dynatrace.example.com".         }         if ("dynatrace.apiToken".equals(key)) {             return "abcde".         }         if ("dynatrace.deviceId".equals(key)) {             return "test".         }         return null.     }. }
false;public;2;5;;@Bean public DynatraceMeterRegistry customRegistry(DynatraceConfig config, Clock clock) {     return new DynatraceMeterRegistry(config, clock). }
