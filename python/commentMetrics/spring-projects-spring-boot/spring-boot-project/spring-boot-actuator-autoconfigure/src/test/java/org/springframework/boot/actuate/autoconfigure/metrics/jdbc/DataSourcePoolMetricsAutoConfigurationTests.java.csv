commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void autoConfiguredDataSourceIsInstrumented() {     this.contextRunner.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {         context.getBean(DataSource.class).getConnection().getMetaData().         MeterRegistry registry = context.getBean(MeterRegistry.class).         registry.get("jdbc.connections.max").tags("name", "dataSource").meter().     }). }
false;public;0;13;;@Test public void dataSourceInstrumentationCanBeDisabled() {     this.contextRunner.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).withPropertyValues("management.metrics.enable.jdbc=false").run((context) -> {         context.getBean(DataSource.class).getConnection().getMetaData().         MeterRegistry registry = context.getBean(MeterRegistry.class).         assertThat(registry.find("jdbc.connections.max").tags("name", "dataSource").meter()).isNull().     }). }
false;public;0;17;;@Test public void allDataSourcesCanBeInstrumented() {     this.contextRunner.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).withUserConfiguration(TwoDataSourcesConfiguration.class).run((context) -> {         context.getBean("firstDataSource", DataSource.class).getConnection().getMetaData().         context.getBean("secondOne", DataSource.class).getConnection().getMetaData().         MeterRegistry registry = context.getBean(MeterRegistry.class).         registry.get("jdbc.connections.max").tags("name", "first").meter().         registry.get("jdbc.connections.max").tags("name", "secondOne").meter().     }). }
false;public;0;11;;@Test public void autoConfiguredHikariDataSourceIsInstrumented() {     this.contextRunner.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {         context.getBean(DataSource.class).getConnection().         MeterRegistry registry = context.getBean(MeterRegistry.class).         registry.get("hikaricp.connections").meter().     }). }
false;public;0;13;;@Test public void autoConfiguredHikariDataSourceIsInstrumentedWhenUsingDataSourceInitialization() {     this.contextRunner.withPropertyValues("spring.datasource.schema:db/create-custom-schema.sql").withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {         context.getBean(DataSource.class).getConnection().         MeterRegistry registry = context.getBean(MeterRegistry.class).         registry.get("hikaricp.connections").meter().     }). }
false;public;0;12;;@Test public void hikariCanBeInstrumentedAfterThePoolHasBeenSealed() {     this.contextRunner.withUserConfiguration(HikariSealingConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {         assertThat(context).hasNotFailed().         context.getBean(DataSource.class).getConnection().         MeterRegistry registry = context.getBean(MeterRegistry.class).         assertThat(registry.find("hikaricp.connections").meter()).isNotNull().     }). }
false;public;0;11;;@Test public void hikariDataSourceInstrumentationCanBeDisabled() {     this.contextRunner.withPropertyValues("management.metrics.enable.hikaricp=false").withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {         context.getBean(DataSource.class).getConnection().         MeterRegistry registry = context.getBean(MeterRegistry.class).         assertThat(registry.find("hikaricp.connections").meter()).isNull().     }). }
false;public;0;15;;@Test public void allHikariDataSourcesCanBeInstrumented() {     this.contextRunner.withUserConfiguration(TwoHikariDataSourcesConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {         context.getBean("firstDataSource", DataSource.class).getConnection().         context.getBean("secondOne", DataSource.class).getConnection().         MeterRegistry registry = context.getBean(MeterRegistry.class).         registry.get("hikaricp.connections").tags("pool", "firstDataSource").meter().         registry.get("hikaricp.connections").tags("pool", "secondOne").meter().     }). }
false;public;0;14;;@Test public void someHikariDataSourcesCanBeInstrumented() {     this.contextRunner.withUserConfiguration(MixedDataSourcesConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {         context.getBean("firstDataSource", DataSource.class).getConnection().         context.getBean("secondOne", DataSource.class).getConnection().         MeterRegistry registry = context.getBean(MeterRegistry.class).         assertThat(registry.get("hikaricp.connections").meter().getId().getTags()).containsExactly(Tag.of("pool", "firstDataSource")).     }). }
false;public;0;18;;@Test public void hikariProxiedDataSourceCanBeInstrumented() {     this.contextRunner.withUserConfiguration(ProxiedHikariDataSourcesConfiguration.class).withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class)).run((context) -> {         context.getBean("proxiedDataSource", DataSource.class).getConnection().         context.getBean("delegateDataSource", DataSource.class).getConnection().         MeterRegistry registry = context.getBean(MeterRegistry.class).         registry.get("hikaricp.connections").tags("pool", "firstDataSource").meter().         registry.get("hikaricp.connections").tags("pool", "secondOne").meter().     }). }
false;public;0;13;;@Test public void hikariDataSourceIsInstrumentedWithoutMetadataProvider() {     this.contextRunner.withUserConfiguration(OneHikariDataSourceConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean(DataSourcePoolMetadataProvider.class).         context.getBean("hikariDataSource", DataSource.class).getConnection().         MeterRegistry registry = context.getBean(MeterRegistry.class).         assertThat(registry.get("hikaricp.connections").meter().getId().getTags()).containsExactly(Tag.of("pool", "hikariDataSource")).     }). }
false;private,static;1;7;;private static HikariDataSource createHikariDataSource(String poolName) {     String url = "jdbc:hsqldb:mem:test-" + UUID.randomUUID().     HikariDataSource hikariDataSource = DataSourceBuilder.create().url(url).type(HikariDataSource.class).build().     hikariDataSource.setPoolName(poolName).     return hikariDataSource. }
false;public;0;4;;@Bean public SimpleMeterRegistry simpleMeterRegistry() {     return new SimpleMeterRegistry(). }
false;public;0;4;;@Bean public DataSource firstDataSource() {     return createDataSource(). }
false;public;0;4;;@Bean public DataSource secondOne() {     return createDataSource(). }
false;private;0;4;;private DataSource createDataSource() {     String url = "jdbc:hsqldb:mem:test-" + UUID.randomUUID().     return DataSourceBuilder.create().url(url).build(). }
false;public;0;4;;@Bean public DataSource firstDataSource() {     return createHikariDataSource("firstDataSource"). }
false;public;0;4;;@Bean public DataSource secondOne() {     return createHikariDataSource("secondOne"). }
false;public;0;5;;@Bean public DataSource proxiedDataSource() {     return (DataSource) new ProxyFactory(createHikariDataSource("firstDataSource")).getProxy(). }
false;public;0;4;;@Bean public DataSource delegateDataSource() {     return new DelegatingDataSource(createHikariDataSource("secondOne")). }
false;public;0;4;;@Bean public DataSource hikariDataSource() {     return createHikariDataSource("hikariDataSource"). }
false;public;0;4;;@Bean public DataSource firstDataSource() {     return createHikariDataSource("firstDataSource"). }
false;public;0;4;;@Bean public DataSource secondOne() {     return createTomcatDataSource(). }
false;private;1;7;;private HikariDataSource createHikariDataSource(String poolName) {     String url = "jdbc:hsqldb:mem:test-" + UUID.randomUUID().     HikariDataSource hikariDataSource = DataSourceBuilder.create().url(url).type(HikariDataSource.class).build().     hikariDataSource.setPoolName(poolName).     return hikariDataSource. }
false;private;0;5;;private org.apache.tomcat.jdbc.pool.DataSource createTomcatDataSource() {     String url = "jdbc:hsqldb:mem:test-" + UUID.randomUUID().     return DataSourceBuilder.create().url(url).type(org.apache.tomcat.jdbc.pool.DataSource.class).build(). }
false;public,static;0;4;;@Bean public static HikariSealer hikariSealer() {     return new HikariSealer(). }
false;public;0;4;;@Override public int getOrder() {     return Ordered.HIGHEST_PRECEDENCE. }
false;public;2;13;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     if (bean instanceof HikariDataSource) {         try {             ((HikariDataSource) bean).getConnection().close().         } catch (SQLException ex) {             throw new IllegalStateException(ex).         }     }     return bean. }
