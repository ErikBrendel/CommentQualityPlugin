commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@After public void close() {     TestSecurityContextHolder.clearContext().     this.context.close(). }
false;public;0;8;;@Test public void endpointsAreSecureByDefault() throws Exception {     this.context = new AnnotationConfigWebApplicationContext().     this.context.register(SecureConfiguration.class).     MockMvc mockMvc = createSecureMockMvc().     mockMvc.perform(get("/actuator/beans").accept(MediaType.APPLICATION_JSON)).andExpect(status().isUnauthorized()). }
false;public;0;10;;@Test public void endpointsAreSecureByDefaultWithCustomBasePath() throws Exception {     this.context = new AnnotationConfigWebApplicationContext().     this.context.register(SecureConfiguration.class).     TestPropertyValues.of("management.endpoints.web.base-path:/management").applyTo(this.context).     MockMvc mockMvc = createSecureMockMvc().     mockMvc.perform(get("/management/beans").accept(MediaType.APPLICATION_JSON)).andExpect(status().isUnauthorized()). }
false;public;0;13;;@Test public void endpointsAreSecureWithActuatorRoleWithCustomBasePath() throws Exception {     TestSecurityContextHolder.getContext().setAuthentication(new TestingAuthenticationToken("user", "N/A", "ROLE_ACTUATOR")).     this.context = new AnnotationConfigWebApplicationContext().     this.context.register(SecureConfiguration.class).     TestPropertyValues.of("management.endpoints.web.base-path:/management", "management.endpoints.web.exposure.include=*").applyTo(this.context).     MockMvc mockMvc = createSecureMockMvc().     mockMvc.perform(get("/management/beans")).andExpect(status().isOk()). }
false;public;0;11;;@Test public void linksAreProvidedToAllEndpointTypes() throws Exception {     this.context = new AnnotationConfigWebApplicationContext().     this.context.register(DefaultConfiguration.class, EndpointsConfiguration.class).     TestPropertyValues.of("management.endpoints.web.exposure.include=*").applyTo(this.context).     MockMvc mockMvc = doCreateMockMvc().     mockMvc.perform(get("/actuator").accept("*/*")).andExpect(status().isOk()).andExpect(jsonPath("_links", both(hasKey("beans")).and(hasKey("servlet")).and(hasKey("restcontroller")).and(hasKey("controller")))). }
false;private;0;3;;private MockMvc createSecureMockMvc() {     return doCreateMockMvc(springSecurity()). }
false;private;1;9;;private MockMvc doCreateMockMvc(MockMvcConfigurer... configurers) {     this.context.setServletContext(new MockServletContext()).     this.context.refresh().     DefaultMockMvcBuilder builder = MockMvcBuilders.webAppContextSetup(this.context).     for (MockMvcConfigurer configurer : configurers) {         builder.apply(configurer).     }     return builder.build(). }
false;public;0;5;;@Override public EndpointServlet get() {     return new EndpointServlet(new HttpServlet() {     }). }
false;;0;4;;@Bean TestServletEndpoint testServletEndpoint() {     return new TestServletEndpoint(). }
false;;0;4;;@Bean TestControllerEndpoint testControllerEndpoint() {     return new TestControllerEndpoint(). }
false;;0;4;;@Bean TestRestControllerEndpoint testRestControllerEndpoint() {     return new TestRestControllerEndpoint(). }
