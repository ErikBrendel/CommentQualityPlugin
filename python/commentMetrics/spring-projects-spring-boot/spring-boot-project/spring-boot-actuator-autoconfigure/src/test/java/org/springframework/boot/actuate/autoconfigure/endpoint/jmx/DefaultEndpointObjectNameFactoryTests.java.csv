commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void generateObjectName() {     ObjectName objectName = generateObjectName(endpoint(EndpointId.of("test"))).     assertThat(objectName.toString()).isEqualTo("org.springframework.boot:type=Endpoint,name=Test"). }
false;public;0;7;;@Test public void generateObjectNameWithCapitalizedId() {     ObjectName objectName = generateObjectName(endpoint(EndpointId.of("testEndpoint"))).     assertThat(objectName.toString()).isEqualTo("org.springframework.boot:type=Endpoint,name=TestEndpoint"). }
false;public;0;7;;@Test public void generateObjectNameWithCustomDomain() {     this.properties.setDomain("com.example.acme").     ObjectName objectName = generateObjectName(endpoint(EndpointId.of("test"))).     assertThat(objectName.toString()).isEqualTo("com.example.acme:type=Endpoint,name=Test"). }
false;public;0;5;;@Test public void generateObjectNameWithUniqueNames() {     this.environment.setProperty("spring.jmx.unique-names", "true").     assertUniqueObjectName(). }
false;private;0;7;;private void assertUniqueObjectName() {     ExposableJmxEndpoint endpoint = endpoint(EndpointId.of("test")).     String id = ObjectUtils.getIdentityHexString(endpoint).     ObjectName objectName = generateObjectName(endpoint).     assertThat(objectName.toString()).isEqualTo("org.springframework.boot:type=Endpoint,name=Test,identity=" + id). }
false;public;0;10;;@Test public void generateObjectNameWithStaticNames() {     this.properties.getStaticNames().setProperty("counter", "42").     this.properties.getStaticNames().setProperty("foo", "bar").     ObjectName objectName = generateObjectName(endpoint(EndpointId.of("test"))).     assertThat(objectName.getKeyProperty("counter")).isEqualTo("42").     assertThat(objectName.getKeyProperty("foo")).isEqualTo("bar").     assertThat(objectName.toString()).startsWith("org.springframework.boot:type=Endpoint,name=Test,"). }
false;public;0;13;;@Test public void generateObjectNameWithDuplicate() throws MalformedObjectNameException {     this.contextId = "testContext".     given(this.mBeanServer.queryNames(new ObjectName("org.springframework.boot:type=Endpoint,name=Test,*"), null)).willReturn(Collections.singleton(new ObjectName("org.springframework.boot:type=Endpoint,name=Test"))).     ObjectName objectName = generateObjectName(endpoint(EndpointId.of("test"))).     assertThat(objectName.toString()).isEqualTo("org.springframework.boot:type=Endpoint,name=Test,context=testContext"). }
false;private;1;9;;private ObjectName generateObjectName(ExposableJmxEndpoint endpoint) {     try {         return new DefaultEndpointObjectNameFactory(this.properties, this.environment, this.mBeanServer, this.contextId).getObjectName(endpoint).     } catch (MalformedObjectNameException ex) {         throw new AssertionError("Invalid object name", ex).     } }
false;private;1;5;;private ExposableJmxEndpoint endpoint(EndpointId id) {     ExposableJmxEndpoint endpoint = mock(ExposableJmxEndpoint.class).     given(endpoint.getEndpointId()).willReturn(id).     return endpoint. }
