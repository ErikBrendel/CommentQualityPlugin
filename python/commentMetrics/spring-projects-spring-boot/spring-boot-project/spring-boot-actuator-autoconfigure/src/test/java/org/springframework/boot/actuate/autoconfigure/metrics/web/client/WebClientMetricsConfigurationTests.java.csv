commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void webClientCreatedWithBuilderIsInstrumented() {     this.contextRunner.run((context) -> {         MeterRegistry registry = context.getBean(MeterRegistry.class).         WebClient.Builder builder = context.getBean(WebClient.Builder.class).         validateWebClient(builder, registry).     }). }
false;public;0;7;;@Test public void shouldNotOverrideCustomTagsProvider() {     this.contextRunner.withUserConfiguration(CustomTagsProviderConfig.class).run((context) -> assertThat(context).getBeans(WebClientExchangeTagsProvider.class).hasSize(1).containsKey("customTagsProvider")). }
false;public;0;12;;@Test public void afterMaxUrisReachedFurtherUrisAreDenied() {     this.contextRunner.withPropertyValues("management.metrics.web.client.max-uri-tags=2").run((context) -> {         MeterRegistry registry = getInitializedMeterRegistry(context).         assertThat(registry.get("http.client.requests").meters()).hasSize(2).         assertThat(this.output.toString()).contains("Reached the maximum number of URI tags for 'http.client.requests'.").contains("Are you using 'uriVariables'?").     }). }
false;public;0;12;;@Test public void shouldNotDenyNorLogIfMaxUrisIsNotReached() {     this.contextRunner.withPropertyValues("management.metrics.web.client.max-uri-tags=5").run((context) -> {         MeterRegistry registry = getInitializedMeterRegistry(context).         assertThat(registry.get("http.client.requests").meters()).hasSize(3).         assertThat(this.output.toString()).doesNotContain("Reached the maximum number of URI tags for 'http.client.requests'.").doesNotContain("Are you using 'uriVariables'?").     }). }
false;private;1;10;;private MeterRegistry getInitializedMeterRegistry(AssertableApplicationContext context) {     WebClient webClient = mockWebClient(context.getBean(WebClient.Builder.class)).     MeterRegistry registry = context.getBean(MeterRegistry.class).     for (int i = 0. i < 3. i++) {         webClient.get().uri("http://example.org/projects/" + i).exchange().block(Duration.ofSeconds(30)).     }     return registry. }
false;private;2;8;;private void validateWebClient(WebClient.Builder builder, MeterRegistry registry) {     WebClient webClient = mockWebClient(builder).     assertThat(registry.find("http.client.requests").meter()).isNull().     webClient.get().uri("http://example.org/projects/{project}", "spring-boot").exchange().block(Duration.ofSeconds(30)).     assertThat(registry.find("http.client.requests").tags("uri", "/projects/{project}").meter()).isNotNull(). }
false;private;1;6;;private WebClient mockWebClient(WebClient.Builder builder) {     ClientHttpConnector connector = mock(ClientHttpConnector.class).     given(connector.connect(any(), any(), any())).willReturn(Mono.just(new MockClientHttpResponse(HttpStatus.OK))).     return builder.clientConnector(connector).build(). }
false;public;0;4;;@Bean public WebClientExchangeTagsProvider customTagsProvider() {     return mock(WebClientExchangeTagsProvider.class). }
