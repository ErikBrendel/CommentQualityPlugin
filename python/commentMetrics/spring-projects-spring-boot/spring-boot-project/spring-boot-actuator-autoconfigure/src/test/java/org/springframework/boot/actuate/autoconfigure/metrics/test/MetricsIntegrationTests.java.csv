commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@SuppressWarnings("unchecked") @Test public void restTemplateIsInstrumented() {     MockRestServiceServer server = MockRestServiceServer.bindTo(this.external).build().     server.expect(once(), requestTo("/api/external")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess("{\"message\": \"hello\"}", MediaType.APPLICATION_JSON)).     assertThat(this.external.getForObject("/api/external", Map.class)).containsKey("message").     assertThat(this.registry.get("http.client.requests").timer().count()).isEqualTo(1). }
false;public;0;6;;@Test public void requestMappingIsInstrumented() {     this.loopback.getForObject("/api/people", Set.class).     assertThat(this.registry.get("http.server.requests").timer().count()).isEqualTo(1). }
false;public;0;6;;@Test public void automaticallyRegisteredBinders() {     assertThat(this.context.getBeansOfType(MeterBinder.class).values()).hasAtLeastOneElementOfType(LogbackMetrics.class).hasAtLeastOneElementOfType(JvmMemoryMetrics.class). }
false;public;0;13;;@Test @SuppressWarnings({ "rawtypes", "unchecked" }) public void metricsFilterRegisteredForAsyncDispatches() {     Map<String, FilterRegistrationBean> filterRegistrations = this.context.getBeansOfType(FilterRegistrationBean.class).     assertThat(filterRegistrations).containsKey("webMvcMetricsFilter").     FilterRegistrationBean registration = filterRegistrations.get("webMvcMetricsFilter").     assertThat(registration.getFilter()).isInstanceOf(WebMvcMetricsFilter.class).     assertThat((Set<DispatcherType>) ReflectionTestUtils.getField(registration, "dispatcherTypes")).containsExactlyInAnyOrder(DispatcherType.REQUEST, DispatcherType.ASYNC). }
false;public;0;5;;@Primary @Bean public MeterRegistry registry() {     return new SimpleMeterRegistry(SimpleConfig.DEFAULT, new MockClock()). }
false;public;1;4;;@Bean public RestTemplate restTemplate(RestTemplateBuilder restTemplateBuilder) {     return restTemplateBuilder.build(). }
false;public;0;4;;@Bean public CyclicBarrier cyclicBarrier() {     return new CyclicBarrier(2). }
false;;0;4;;@GetMapping("/api/people") Set<String> personName() {     return Collections.singleton("Jon"). }
