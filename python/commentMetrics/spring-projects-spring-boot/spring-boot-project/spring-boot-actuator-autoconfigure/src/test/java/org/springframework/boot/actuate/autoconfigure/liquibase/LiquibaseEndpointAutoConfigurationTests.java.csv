commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void runShouldHaveEndpointBean() {     this.contextRunner.withUserConfiguration(LiquibaseConfiguration.class).run((context) -> assertThat(context).hasSingleBean(LiquibaseEndpoint.class)). }
false;public;0;7;;@Test public void runWhenEnabledPropertyIsFalseShouldNotHaveEndpointBean() {     this.contextRunner.withUserConfiguration(LiquibaseConfiguration.class).withPropertyValues("management.endpoint.liquibase.enabled:false").run((context) -> assertThat(context).doesNotHaveBean(LiquibaseEndpoint.class)). }
false;public;0;11;;@Test public void disablesCloseOfDataSourceWhenEndpointIsEnabled() {     this.contextRunner.withUserConfiguration(DataSourceClosingLiquibaseConfiguration.class).run((context) -> {         assertThat(context).hasSingleBean(LiquibaseEndpoint.class).         assertThat(context.getBean(DataSourceClosingSpringLiquibase.class)).hasFieldOrPropertyWithValue("closeDataSourceOnceMigrated", false).     }). }
false;public;0;13;;@Test public void doesNotDisableCloseOfDataSourceWhenEndpointIsDisabled() {     this.contextRunner.withUserConfiguration(DataSourceClosingLiquibaseConfiguration.class).withPropertyValues("management.endpoint.liquibase.enabled:false").run((context) -> {         assertThat(context).doesNotHaveBean(LiquibaseEndpoint.class).         DataSourceClosingSpringLiquibase bean = context.getBean(DataSourceClosingSpringLiquibase.class).         assertThat(bean).hasFieldOrPropertyWithValue("closeDataSourceOnceMigrated", true).     }). }
false;public;0;4;;@Bean public SpringLiquibase liquibase() {     return mock(SpringLiquibase.class). }
false;public;1;9;;@Override public void setCloseDataSourceOnceMigrated(boolean closeDataSourceOnceMigrated) {     if (this.propertiesSet) {         throw new IllegalStateException("setCloseDataSourceOnceMigrated " + "invoked after afterPropertiesSet").     }     super.setCloseDataSourceOnceMigrated(closeDataSourceOnceMigrated). }
false;public;0;4;;@Override public void afterPropertiesSet() throws LiquibaseException {     this.propertiesSet = true. }
false;public;0;23;;@Bean public SpringLiquibase liquibase() {     return new DataSourceClosingSpringLiquibase() {          private boolean propertiesSet = false.          @Override         public void setCloseDataSourceOnceMigrated(boolean closeDataSourceOnceMigrated) {             if (this.propertiesSet) {                 throw new IllegalStateException("setCloseDataSourceOnceMigrated " + "invoked after afterPropertiesSet").             }             super.setCloseDataSourceOnceMigrated(closeDataSourceOnceMigrated).         }          @Override         public void afterPropertiesSet() throws LiquibaseException {             this.propertiesSet = true.         }     }. }
