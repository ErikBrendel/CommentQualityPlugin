commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     MockitoAnnotations.initMocks(this). }
false;public;0;7;;@Test public void createWhenEndpointTypeIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new ExposeExcludePropertyEndpointFilter<>(null, new MockEnvironment(), "foo")).withMessageContaining("EndpointType must not be null"). }
false;public;0;7;;@Test public void createWhenEnvironmentIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new ExposeExcludePropertyEndpointFilter<>(ExposableEndpoint.class, null, "foo")).withMessageContaining("Environment must not be null"). }
false;public;0;7;;@Test public void createWhenPrefixIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new ExposeExcludePropertyEndpointFilter<>(ExposableEndpoint.class, new MockEnvironment(), null)).withMessageContaining("Prefix must not be empty"). }
false;public;0;7;;@Test public void createWhenPrefixIsEmptyShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new ExposeExcludePropertyEndpointFilter<>(ExposableEndpoint.class, new MockEnvironment(), "")).withMessageContaining("Prefix must not be empty"). }
false;public;0;5;;@Test public void matchWhenExposeIsEmptyAndExcludeIsEmptyAndInDefaultShouldMatch() {     setupFilter("", "").     assertThat(match(EndpointId.of("def"))).isTrue(). }
false;public;0;5;;@Test public void matchWhenExposeIsEmptyAndExcludeIsEmptyAndNotInDefaultShouldNotMatch() {     setupFilter("", "").     assertThat(match(EndpointId.of("bar"))).isFalse(). }
false;public;0;5;;@Test public void matchWhenExposeMatchesAndExcludeIsEmptyShouldMatch() {     setupFilter("bar", "").     assertThat(match(EndpointId.of("bar"))).isTrue(). }
false;public;0;5;;@Test public void matchWhenExposeDoesNotMatchAndExcludeIsEmptyShouldNotMatch() {     setupFilter("bar", "").     assertThat(match(EndpointId.of("baz"))).isFalse(). }
false;public;0;5;;@Test public void matchWhenExposeMatchesAndExcludeMatchesShouldNotMatch() {     setupFilter("bar,baz", "baz").     assertThat(match(EndpointId.of("baz"))).isFalse(). }
false;public;0;5;;@Test public void matchWhenExposeMatchesAndExcludeDoesNotMatchShouldMatch() {     setupFilter("bar,baz", "buz").     assertThat(match(EndpointId.of("baz"))).isTrue(). }
false;public;0;5;;@Test public void matchWhenExposeMatchesWithDifferentCaseShouldMatch() {     setupFilter("bar", "").     assertThat(match(EndpointId.of("bAr"))).isTrue(). }
false;public;0;9;;@Test public void matchWhenDiscovererDoesNotMatchShouldMatch() {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("foo.include", "bar").     environment.setProperty("foo.exclude", "").     this.filter = new ExposeExcludePropertyEndpointFilter<>(DifferentTestExposableWebEndpoint.class, environment, "foo").     assertThat(match(EndpointId.of("baz"))).isTrue(). }
false;public;0;7;;@Test public void matchWhenIncludeIsAsteriskShouldMatchAll() {     setupFilter("*", "buz").     assertThat(match(EndpointId.of("bar"))).isTrue().     assertThat(match(EndpointId.of("baz"))).isTrue().     assertThat(match(EndpointId.of("buz"))).isFalse(). }
false;public;0;7;;@Test public void matchWhenExcludeIsAsteriskShouldMatchNone() {     setupFilter("bar,baz,buz", "*").     assertThat(match(EndpointId.of("bar"))).isFalse().     assertThat(match(EndpointId.of("baz"))).isFalse().     assertThat(match(EndpointId.of("buz"))).isFalse(). }
false;public;0;5;;@Test public void matchWhenMixedCaseShouldMatch() {     setupFilter("foo-bar", "").     assertThat(match(EndpointId.of("fooBar"))).isTrue(). }
false;private;2;7;;private void setupFilter(String include, String exclude) {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("foo.include", include).     environment.setProperty("foo.exclude", exclude).     this.filter = new ExposeExcludePropertyEndpointFilter<>(TestExposableWebEndpoint.class, environment, "foo", "def"). }
false;private;1;6;;@SuppressWarnings({ "rawtypes", "unchecked" }) private boolean match(EndpointId id) {     ExposableEndpoint<?> endpoint = mock(TestExposableWebEndpoint.class).     given(endpoint.getEndpointId()).willReturn(id).     return ((EndpointFilter) this.filter).match(endpoint). }
