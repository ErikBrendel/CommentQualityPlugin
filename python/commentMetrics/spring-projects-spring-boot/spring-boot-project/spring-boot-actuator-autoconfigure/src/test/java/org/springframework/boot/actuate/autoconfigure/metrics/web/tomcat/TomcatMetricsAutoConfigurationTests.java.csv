commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void autoConfiguresTomcatMetricsWithEmbeddedServletTomcat() {     new WebApplicationContextRunner(AnnotationConfigServletWebServerApplicationContext::new).withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class, ServletWebServerFactoryAutoConfiguration.class)).withUserConfiguration(ServletWebServerConfiguration.class, MeterRegistryConfiguration.class).run((context) -> {         context.publishEvent(new ApplicationStartedEvent(new SpringApplication(), null, context.getSourceApplicationContext())).         assertThat(context).hasSingleBean(TomcatMetricsBinder.class).         SimpleMeterRegistry registry = context.getBean(SimpleMeterRegistry.class).         assertThat(registry.find("tomcat.sessions.active.max").meter()).isNotNull().         assertThat(registry.find("tomcat.threads.current").meter()).isNotNull().     }). }
false;public;0;22;;@Test public void autoConfiguresTomcatMetricsWithEmbeddedReactiveTomcat() {     new ReactiveWebApplicationContextRunner(AnnotationConfigReactiveWebServerApplicationContext::new).withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class, ReactiveWebServerFactoryAutoConfiguration.class)).withUserConfiguration(ReactiveWebServerConfiguration.class, MeterRegistryConfiguration.class).run((context) -> {         context.publishEvent(new ApplicationStartedEvent(new SpringApplication(), null, context.getSourceApplicationContext())).         SimpleMeterRegistry registry = context.getBean(SimpleMeterRegistry.class).         assertThat(registry.find("tomcat.sessions.active.max").meter()).isNotNull().         assertThat(registry.find("tomcat.threads.current").meter()).isNotNull().     }). }
false;public;0;9;;@Test public void autoConfiguresTomcatMetricsWithStandaloneTomcat() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class)).withUserConfiguration(MeterRegistryConfiguration.class).run((context) -> assertThat(context).hasSingleBean(TomcatMetricsBinder.class)). }
false;public;0;11;;@Test public void allowsCustomTomcatMetricsBinderToBeUsed() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class)).withUserConfiguration(MeterRegistryConfiguration.class, CustomTomcatMetricsBinder.class).run((context) -> assertThat(context).hasSingleBean(TomcatMetricsBinder.class).hasBean("customTomcatMetricsBinder")). }
false;public;0;11;;@Test public void allowsCustomTomcatMetricsToBeUsed() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(TomcatMetricsAutoConfiguration.class)).withUserConfiguration(MeterRegistryConfiguration.class, CustomTomcatMetrics.class).run((context) -> assertThat(context).doesNotHaveBean(TomcatMetricsBinder.class).hasBean("customTomcatMetrics")). }
false;public;0;4;;@Bean public SimpleMeterRegistry meterRegistry() {     return new SimpleMeterRegistry(). }
false;public;0;4;;@Bean public TomcatServletWebServerFactory tomcatFactory() {     return new TomcatServletWebServerFactory(0). }
false;public;0;4;;@Bean public TomcatReactiveWebServerFactory tomcatFactory() {     return new TomcatReactiveWebServerFactory(0). }
false;public;0;4;;@Bean public HttpHandler httpHandler() {     return mock(HttpHandler.class). }
false;public;0;4;;@Bean public TomcatMetrics customTomcatMetrics() {     return new TomcatMetrics(null, Collections.emptyList()). }
false;public;1;5;;@Bean public TomcatMetricsBinder customTomcatMetricsBinder(MeterRegistry meterRegistry) {     return new TomcatMetricsBinder(meterRegistry). }
