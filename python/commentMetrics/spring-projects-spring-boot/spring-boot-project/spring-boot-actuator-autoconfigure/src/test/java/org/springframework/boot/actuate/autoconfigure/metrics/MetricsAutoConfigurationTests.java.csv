commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void autoConfiguresAClock() {     this.contextRunner.run((context) -> assertThat(context).hasSingleBean(Clock.class)). }
false;public;0;6;;@Test public void allowsACustomClockToBeUsed() {     this.contextRunner.withUserConfiguration(CustomClockConfiguration.class).run((context) -> assertThat(context).hasSingleBean(Clock.class).hasBean("customClock")). }
false;public;0;20;;@SuppressWarnings("unchecked") @Test public void configuresMeterRegistries() {     this.contextRunner.withUserConfiguration(MeterRegistryConfiguration.class).run((context) -> {         MeterRegistry meterRegistry = context.getBean(MeterRegistry.class).         MeterFilter[] filters = (MeterFilter[]) ReflectionTestUtils.getField(meterRegistry, "filters").         assertThat(filters).hasSize(3).         assertThat(filters[0].accept((Meter.Id) null)).isEqualTo(MeterFilterReply.DENY).         assertThat(filters[1]).isInstanceOf(PropertiesMeterFilter.class).         assertThat(filters[2].accept((Meter.Id) null)).isEqualTo(MeterFilterReply.ACCEPT).         verify((MeterBinder) context.getBean("meterBinder")).bindTo(meterRegistry).         verify(context.getBean(MeterRegistryCustomizer.class)).customize(meterRegistry).     }). }
false;;0;4;;@Bean Clock customClock() {     return Clock.SYSTEM. }
false;;0;4;;@Bean MeterRegistry meterRegistry() {     return new SimpleMeterRegistry(). }
false;;0;5;;@Bean @SuppressWarnings("rawtypes") MeterRegistryCustomizer meterRegistryCustomizer() {     return mock(MeterRegistryCustomizer.class). }
false;;0;4;;@Bean MeterBinder meterBinder() {     return mock(MeterBinder.class). }
false;;0;5;;@Bean @Order(1) MeterFilter acceptMeterFilter() {     return MeterFilter.accept(). }
false;;0;5;;@Bean @Order(-1) MeterFilter denyMeterFilter() {     return MeterFilter.deny(). }
