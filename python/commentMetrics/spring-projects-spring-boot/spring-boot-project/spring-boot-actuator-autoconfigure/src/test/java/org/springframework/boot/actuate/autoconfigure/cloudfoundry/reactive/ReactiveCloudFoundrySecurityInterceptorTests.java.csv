commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator, this.securityService, "my-app-id"). }
false;public;0;9;;@Test public void preHandleWhenRequestIsPreFlightShouldBeOk() {     MockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest.options("/a").header(HttpHeaders.ORIGIN, "http://example.com").header(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, "GET").build()).     StepVerifier.create(this.interceptor.preHandle(request, "/a")).consumeNextWith((response) -> assertThat(response.getStatus()).isEqualTo(HttpStatus.OK)).verifyComplete(). }
false;public;0;9;;@Test public void preHandleWhenTokenIsMissingShouldReturnMissingAuthorization() {     MockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest.get("/a").build()).     StepVerifier.create(this.interceptor.preHandle(request, "/a")).consumeNextWith((response) -> assertThat(response.getStatus()).isEqualTo(Reason.MISSING_AUTHORIZATION.getStatus())).verifyComplete(). }
false;public;0;9;;@Test public void preHandleWhenTokenIsNotBearerShouldReturnMissingAuthorization() {     MockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest.get("/a").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build()).     StepVerifier.create(this.interceptor.preHandle(request, "/a")).consumeNextWith((response) -> assertThat(response.getStatus()).isEqualTo(Reason.MISSING_AUTHORIZATION.getStatus())).verifyComplete(). }
false;public;0;13;;@Test public void preHandleWhenApplicationIdIsNullShouldReturnError() {     this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator, this.securityService, null).     MockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest.get("/a").header(HttpHeaders.AUTHORIZATION, "bearer " + mockAccessToken()).build()).     StepVerifier.create(this.interceptor.preHandle(request, "/a")).consumeErrorWith((ex) -> assertThat(((CloudFoundryAuthorizationException) ex).getReason()).isEqualTo(Reason.SERVICE_UNAVAILABLE)).verify(). }
false;public;0;11;;@Test public void preHandleWhenCloudFoundrySecurityServiceIsNullShouldReturnError() {     this.interceptor = new CloudFoundrySecurityInterceptor(this.tokenValidator, null, "my-app-id").     MockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest.get("/a").header(HttpHeaders.AUTHORIZATION, mockAccessToken()).build()).     StepVerifier.create(this.interceptor.preHandle(request, "/a")).consumeErrorWith((ex) -> assertThat(((CloudFoundryAuthorizationException) ex).getReason()).isEqualTo(Reason.SERVICE_UNAVAILABLE)).verify(). }
false;public;0;14;;@Test public void preHandleWhenAccessIsNotAllowedShouldReturnAccessDenied() {     given(this.securityService.getAccessLevel(mockAccessToken(), "my-app-id")).willReturn(Mono.just(AccessLevel.RESTRICTED)).     given(this.tokenValidator.validate(any())).willReturn(Mono.empty()).     MockServerWebExchange request = MockServerWebExchange.from(MockServerHttpRequest.get("/a").header(HttpHeaders.AUTHORIZATION, "bearer " + mockAccessToken()).build()).     StepVerifier.create(this.interceptor.preHandle(request, "/a")).consumeNextWith((response) -> assertThat(response.getStatus()).isEqualTo(Reason.ACCESS_DENIED.getStatus())).verifyComplete(). }
false;public;0;18;;@Test public void preHandleSuccessfulWithFullAccess() {     String accessToken = mockAccessToken().     given(this.securityService.getAccessLevel(accessToken, "my-app-id")).willReturn(Mono.just(AccessLevel.FULL)).     given(this.tokenValidator.validate(any())).willReturn(Mono.empty()).     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/a").header(HttpHeaders.AUTHORIZATION, "bearer " + mockAccessToken()).build()).     StepVerifier.create(this.interceptor.preHandle(exchange, "/a")).consumeNextWith((response) -> {         assertThat(response.getStatus()).isEqualTo(HttpStatus.OK).         assertThat((AccessLevel) exchange.getAttribute("cloudFoundryAccessLevel")).isEqualTo(AccessLevel.FULL).     }).verifyComplete(). }
false;public;0;18;;@Test public void preHandleSuccessfulWithRestrictedAccess() {     String accessToken = mockAccessToken().     given(this.securityService.getAccessLevel(accessToken, "my-app-id")).willReturn(Mono.just(AccessLevel.RESTRICTED)).     given(this.tokenValidator.validate(any())).willReturn(Mono.empty()).     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/info").header(HttpHeaders.AUTHORIZATION, "bearer " + mockAccessToken()).build()).     StepVerifier.create(this.interceptor.preHandle(exchange, "info")).consumeNextWith((response) -> {         assertThat(response.getStatus()).isEqualTo(HttpStatus.OK).         assertThat((AccessLevel) exchange.getAttribute("cloudFoundryAccessLevel")).isEqualTo(AccessLevel.RESTRICTED).     }).verifyComplete(). }
false;private;0;5;;private String mockAccessToken() {     return "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwu" + "Y29tIiwiZXhwIjoxNDI2NDIwODAwLCJhd2Vzb21lIjp0cnVlfQ." + Base64Utils.encodeToString("signature".getBytes()). }
