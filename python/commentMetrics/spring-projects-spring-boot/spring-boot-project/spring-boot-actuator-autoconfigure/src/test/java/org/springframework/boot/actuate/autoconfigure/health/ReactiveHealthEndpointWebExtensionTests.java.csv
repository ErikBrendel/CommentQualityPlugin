commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void runShouldCreateExtensionBeans() {     this.contextRunner.run((context) -> assertThat(context).hasSingleBean(ReactiveHealthEndpointWebExtension.class)). }
false;public;0;6;;@Test public void runWhenHealthEndpointIsDisabledShouldNotCreateExtensionBeans() {     this.contextRunner.withPropertyValues("management.endpoint.health.enabled:false").run((context) -> assertThat(context).doesNotHaveBean(ReactiveHealthEndpointWebExtension.class)). }
false;public;0;20;;@Test public void runWithCustomHealthMappingShouldMapStatusCode() {     this.contextRunner.withPropertyValues("management.health.status.http-mapping.CUSTOM=500").run((context) -> {         Object extension = context.getBean(ReactiveHealthEndpointWebExtension.class).         HealthWebEndpointResponseMapper responseMapper = (HealthWebEndpointResponseMapper) ReflectionTestUtils.getField(extension, "responseMapper").         Class<SecurityContext> securityContext = SecurityContext.class.         assertThat(responseMapper.map(Health.down().build(), mock(securityContext)).getStatus()).isEqualTo(503).         assertThat(responseMapper.map(Health.status("OUT_OF_SERVICE").build(), mock(securityContext)).getStatus()).isEqualTo(503).         assertThat(responseMapper.map(Health.status("CUSTOM").build(), mock(securityContext)).getStatus()).isEqualTo(500).     }). }
false;public;0;21;;@Test public void regularAndReactiveHealthIndicatorsMatch() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=always").withUserConfiguration(HealthIndicatorsConfiguration.class).run((context) -> {         HealthEndpoint endpoint = context.getBean(HealthEndpoint.class).         ReactiveHealthEndpointWebExtension extension = context.getBean(ReactiveHealthEndpointWebExtension.class).         Health endpointHealth = endpoint.health().         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         Health extensionHealth = extension.health(securityContext).block(Duration.ofSeconds(30)).getBody().         assertThat(endpointHealth.getDetails()).containsOnlyKeys("application", "first", "second").         assertThat(extensionHealth.getDetails()).containsOnlyKeys("application", "first", "second").     }). }
false;public;0;9;;@Test public void unauthenticatedUsersAreNotShownDetailsByDefault() {     this.contextRunner.run((context) -> {         ReactiveHealthEndpointWebExtension extension = context.getBean(ReactiveHealthEndpointWebExtension.class).         assertThat(extension.health(mock(SecurityContext.class)).block(Duration.ofSeconds(30)).getBody().getDetails()).isEmpty().     }). }
false;public;0;11;;@Test public void authenticatedUsersAreNotShownDetailsByDefault() {     this.contextRunner.run((context) -> {         ReactiveHealthEndpointWebExtension extension = context.getBean(ReactiveHealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         assertThat(extension.health(securityContext).block(Duration.ofSeconds(30)).getBody().getDetails()).isEmpty().     }). }
false;public;0;16;;@Test public void authenticatedUsersWhenAuthorizedCanBeShownDetails() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized").run((context) -> {         ReactiveHealthEndpointWebExtension extension = context.getBean(ReactiveHealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         assertThat(extension.health(securityContext).block(Duration.ofSeconds(30)).getBody().getDetails()).isNotEmpty().     }). }
false;public;0;11;;@Test public void unauthenticatedUsersCanBeShownDetails() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=always").run((context) -> {         ReactiveHealthEndpointWebExtension extension = context.getBean(ReactiveHealthEndpointWebExtension.class).         assertThat(extension.health(null).block(Duration.ofSeconds(30)).getBody().getDetails()).isNotEmpty().     }). }
false;public;0;13;;@Test public void detailsCanBeHiddenFromAuthenticatedUsers() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=never").run((context) -> {         ReactiveHealthEndpointWebExtension extension = context.getBean(ReactiveHealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         assertThat(extension.health(securityContext).block(Duration.ofSeconds(30)).getBody().getDetails()).isEmpty().     }). }
false;public;0;16;;@Test public void detailsCanBeHiddenFromUnauthorizedUsers() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized", "management.endpoint.health.roles=ACTUATOR").run((context) -> {         ReactiveHealthEndpointWebExtension extension = context.getBean(ReactiveHealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         given(securityContext.isUserInRole("ACTUATOR")).willReturn(false).         assertThat(extension.health(securityContext).block(Duration.ofSeconds(30)).getBody().getDetails()).isEmpty().     }). }
false;public;0;16;;@Test public void detailsCanBeShownToAuthorizedUsers() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized", "management.endpoint.health.roles=ACTUATOR").run((context) -> {         ReactiveHealthEndpointWebExtension extension = context.getBean(ReactiveHealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         given(securityContext.isUserInRole("ACTUATOR")).willReturn(true).         assertThat(extension.health(securityContext).block(Duration.ofSeconds(30)).getBody().getDetails()).isNotEmpty().     }). }
false;public;0;16;;@Test public void roleCanBeCustomized() {     this.contextRunner.withPropertyValues("management.endpoint.health.show-details=when-authorized", "management.endpoint.health.roles=ADMIN").run((context) -> {         ReactiveHealthEndpointWebExtension extension = context.getBean(ReactiveHealthEndpointWebExtension.class).         SecurityContext securityContext = mock(SecurityContext.class).         given(securityContext.getPrincipal()).willReturn(mock(Principal.class)).         given(securityContext.isUserInRole("ADMIN")).willReturn(true).         assertThat(extension.health(securityContext).block(Duration.ofSeconds(30)).getBody().getDetails()).isNotEmpty().     }). }
false;public;0;17;;@Test public void registryCanBeAltered() {     this.contextRunner.withUserConfiguration(HealthIndicatorsConfiguration.class).withPropertyValues("management.endpoint.health.show-details=always").run((context) -> {         ReactiveHealthIndicatorRegistry registry = context.getBean(ReactiveHealthIndicatorRegistry.class).         ReactiveHealthEndpointWebExtension extension = context.getBean(ReactiveHealthEndpointWebExtension.class).         assertThat(extension.health(null).block(Duration.ofSeconds(30)).getBody().getDetails()).containsOnlyKeys("application", "first", "second").         assertThat(registry.unregister("second")).isNotNull().         assertThat(extension.health(null).block(Duration.ofSeconds(30)).getBody().getDetails()).containsKeys("application", "first").     }). }
false;public;0;4;;@Bean public HealthIndicator firstHealthIndicator() {     return () -> Health.up().build(). }
false;public;0;4;;@Bean public ReactiveHealthIndicator secondHealthIndicator() {     return () -> Mono.just(Health.up().build()). }
