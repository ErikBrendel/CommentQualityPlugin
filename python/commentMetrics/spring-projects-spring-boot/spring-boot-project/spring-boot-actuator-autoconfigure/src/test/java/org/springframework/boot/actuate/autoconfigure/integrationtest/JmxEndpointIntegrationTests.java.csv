commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void jmxEndpointsAreExposed() {     this.contextRunner.run((context) -> {         MBeanServer mBeanServer = context.getBean(MBeanServer.class).         checkEndpointMBeans(mBeanServer, new String[] { "beans", "conditions", "configprops", "env", "health", "info", "mappings", "threaddump", "httptrace" }, new String[] { "shutdown" }).     }). }
false;public;0;13;;@Test public void jmxEndpointsCanBeExcluded() {     this.contextRunner.withPropertyValues("management.endpoints.jmx.exposure.exclude:*").run((context) -> {         MBeanServer mBeanServer = context.getBean(MBeanServer.class).         checkEndpointMBeans(mBeanServer, new String[0], new String[] { "beans", "conditions", "configprops", "env", "health", "mappings", "shutdown", "threaddump", "httptrace" }).     }). }
false;public;0;11;;@Test public void singleJmxEndpointCanBeExposed() {     this.contextRunner.withPropertyValues("management.endpoints.jmx.exposure.include=beans").run((context) -> {         MBeanServer mBeanServer = context.getBean(MBeanServer.class).         checkEndpointMBeans(mBeanServer, new String[] { "beans" }, new String[] { "conditions", "configprops", "env", "health", "mappings", "shutdown", "threaddump", "httptrace" }).     }). }
false;private;3;11;;private void checkEndpointMBeans(MBeanServer mBeanServer, String[] enabledEndpoints, String[] disabledEndpoints) {     for (String enabledEndpoint : enabledEndpoints) {         assertThat(isRegistered(mBeanServer, getDefaultObjectName(enabledEndpoint))).as(String.format("Endpoint %s", enabledEndpoint)).isTrue().     }     for (String disabledEndpoint : disabledEndpoints) {         assertThat(isRegistered(mBeanServer, getDefaultObjectName(disabledEndpoint))).as(String.format("Endpoint %s", disabledEndpoint)).isFalse().     } }
false;private;2;9;;private boolean isRegistered(MBeanServer mBeanServer, ObjectName objectName) {     try {         getMBeanInfo(mBeanServer, objectName).         return true.     } catch (InstanceNotFoundException ex) {         return false.     } }
false;private;2;10;;private MBeanInfo getMBeanInfo(MBeanServer mBeanServer, ObjectName objectName) throws InstanceNotFoundException {     try {         return mBeanServer.getMBeanInfo(objectName).     } catch (ReflectionException | IntrospectionException ex) {         throw new IllegalStateException("Failed to retrieve MBeanInfo for ObjectName " + objectName, ex).     } }
false;private;1;3;;private ObjectName getDefaultObjectName(String endpointId) {     return getObjectName("org.springframework.boot", endpointId). }
false;private;2;10;;private ObjectName getObjectName(String domain, String endpointId) {     try {         return new ObjectName(String.format("%s:type=Endpoint,name=%s", domain, StringUtils.capitalize(endpointId))).     } catch (MalformedObjectNameException ex) {         throw new IllegalStateException("Invalid object name", ex).     } }
