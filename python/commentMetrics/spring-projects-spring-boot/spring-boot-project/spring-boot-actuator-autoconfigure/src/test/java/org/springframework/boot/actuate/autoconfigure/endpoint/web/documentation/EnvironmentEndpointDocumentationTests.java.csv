commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void env() throws Exception {     this.mockMvc.perform(get("/actuator/env")).andExpect(status().isOk()).andDo(document("env/all", preprocessResponse(replacePattern(Pattern.compile("org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/"), ""), filterProperties()), responseFields(activeProfiles, propertySources, propertySourceName, fieldWithPath("propertySources.[].properties").description("Properties in the property source keyed by property name."), fieldWithPath("propertySources.[].properties.*.value").description("Value of the property."), fieldWithPath("propertySources.[].properties.*.origin").description("Origin of the property, if any.").optional()))). }
false;public;0;26;;@Test public void singlePropertyFromEnv() throws Exception {     this.mockMvc.perform(get("/actuator/env/com.example.cache.max-size")).andExpect(status().isOk()).andDo(document("env/single", preprocessResponse(replacePattern(Pattern.compile("org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/"), "")), responseFields(fieldWithPath("property").description("Property from the environment, if found.").optional(), fieldWithPath("property.source").description("Name of the source of the property."), fieldWithPath("property.value").description("Value of the property."), activeProfiles, propertySources, propertySourceName, fieldWithPath("propertySources.[].property").description("Property in the property source, if any.").optional(), fieldWithPath("propertySources.[].property.value").description("Value of the property."), fieldWithPath("propertySources.[].property.origin").description("Origin of the property, if any.").optional()))). }
false;private;0;3;;private OperationPreprocessor filterProperties() {     return new ContentModifyingOperationPreprocessor(this::filterProperties). }
false;private;2;21;;@SuppressWarnings("unchecked") private byte[] filterProperties(byte[] content, MediaType mediaType) {     ObjectMapper objectMapper = new ObjectMapper().enable(SerializationFeature.INDENT_OUTPUT).     try {         Map<String, Object> payload = objectMapper.readValue(content, Map.class).         List<Map<String, Object>> propertySources = (List<Map<String, Object>>) payload.get("propertySources").         for (Map<String, Object> propertySource : propertySources) {             Map<String, String> properties = (Map<String, String>) propertySource.get("properties").             Set<String> filteredKeys = properties.keySet().stream().filter(this::retainKey).limit(3).collect(Collectors.toSet()).             properties.keySet().retainAll(filteredKeys).         }         return objectMapper.writeValueAsBytes(payload).     } catch (IOException ex) {         throw new IllegalStateException(ex).     } }
false;private;1;4;;private boolean retainKey(String key) {     return key.startsWith("java.") || key.equals("JAVA_HOME") || key.startsWith("com.example"). }
false;protected;1;7;;@Override protected void customizePropertySources(MutablePropertySources propertySources) {     environment.getPropertySources().stream().filter(this::includedPropertySource).forEach(propertySources::addLast). }
false;private;1;5;;private boolean includedPropertySource(PropertySource<?> propertySource) {     return propertySource instanceof EnumerablePropertySource && !"Inlined Test Properties".equals(propertySource.getName()). }
false;public;1;20;;@Bean public EnvironmentEndpoint endpoint(ConfigurableEnvironment environment) {     return new EnvironmentEndpoint(new AbstractEnvironment() {          @Override         protected void customizePropertySources(MutablePropertySources propertySources) {             environment.getPropertySources().stream().filter(this::includedPropertySource).forEach(propertySources::addLast).         }          private boolean includedPropertySource(PropertySource<?> propertySource) {             return propertySource instanceof EnumerablePropertySource && !"Inlined Test Properties".equals(propertySource.getName()).         }     }). }
