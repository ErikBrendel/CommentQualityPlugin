commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void cloudFoundryPlatformActive() {     this.contextRunner.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id", "vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {         CloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(context).         EndpointMapping endpointMapping = (EndpointMapping) ReflectionTestUtils.getField(handlerMapping, "endpointMapping").         assertThat(endpointMapping.getPath()).isEqualTo("/cloudfoundryapplication").         CorsConfiguration corsConfiguration = (CorsConfiguration) ReflectionTestUtils.getField(handlerMapping, "corsConfiguration").         assertThat(corsConfiguration.getAllowedOrigins()).contains("*").         assertThat(corsConfiguration.getAllowedMethods()).containsAll(Arrays.asList(HttpMethod.GET.name(), HttpMethod.POST.name())).         assertThat(corsConfiguration.getAllowedHeaders()).containsAll(Arrays.asList("Authorization", "X-Cf-App-Instance", "Content-Type")).     }). }
false;public;0;13;;@Test public void cloudfoundryapplicationProducesActuatorMediaType() throws Exception {     this.contextRunner.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id", "vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {         MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(context).build().         mockMvc.perform(get("/cloudfoundryapplication")).andExpect(header().string("Content-Type", ActuatorMediaType.V2_JSON + ".charset=UTF-8")).     }). }
false;public;0;16;;@Test public void cloudFoundryPlatformActiveSetsApplicationId() {     this.contextRunner.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id", "vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {         CloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(context).         Object interceptor = ReflectionTestUtils.getField(handlerMapping, "securityInterceptor").         String applicationId = (String) ReflectionTestUtils.getField(interceptor, "applicationId").         assertThat(applicationId).isEqualTo("my-app-id").     }). }
false;public;0;19;;@Test public void cloudFoundryPlatformActiveSetsCloudControllerUrl() {     this.contextRunner.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id", "vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {         CloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(context).         Object interceptor = ReflectionTestUtils.getField(handlerMapping, "securityInterceptor").         Object interceptorSecurityService = ReflectionTestUtils.getField(interceptor, "cloudFoundrySecurityService").         String cloudControllerUrl = (String) ReflectionTestUtils.getField(interceptorSecurityService, "cloudControllerUrl").         assertThat(cloudControllerUrl).isEqualTo("http://my-cloud-controller.com").     }). }
false;public;0;20;;@Test public void skipSslValidation() {     this.contextRunner.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id", "vcap.application.cf_api:http://my-cloud-controller.com", "management.cloudfoundry.skip-ssl-validation:true").run((context) -> {         CloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(context).         Object interceptor = ReflectionTestUtils.getField(handlerMapping, "securityInterceptor").         Object interceptorSecurityService = ReflectionTestUtils.getField(interceptor, "cloudFoundrySecurityService").         RestTemplate restTemplate = (RestTemplate) ReflectionTestUtils.getField(interceptorSecurityService, "restTemplate").         assertThat(restTemplate.getRequestFactory()).isInstanceOf(SkipSslVerificationHttpRequestFactory.class).     }). }
false;public;0;13;;@Test public void cloudFoundryPlatformActiveAndCloudControllerUrlNotPresent() {     this.contextRunner.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id").run((context) -> {         CloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(context).         Object securityInterceptor = ReflectionTestUtils.getField(handlerMapping, "securityInterceptor").         Object interceptorSecurityService = ReflectionTestUtils.getField(securityInterceptor, "cloudFoundrySecurityService").         assertThat(interceptorSecurityService).isNull().     }). }
false;public;0;16;;@Test public void cloudFoundryPathsIgnoredBySpringSecurity() {     this.contextRunner.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id").run((context) -> {         FilterChainProxy securityFilterChain = (FilterChainProxy) context.getBean(BeanIds.SPRING_SECURITY_FILTER_CHAIN).         SecurityFilterChain chain = securityFilterChain.getFilterChains().get(0).         MockHttpServletRequest request = new MockHttpServletRequest().         request.setServletPath("/cloudfoundryapplication/my-path").         assertThat(chain.getFilters()).isEmpty().         assertThat(chain.matches(request)).isTrue().         request.setServletPath("/some-other-path").         assertThat(chain.matches(request)).isFalse().     }). }
false;public;0;7;;@Test public void cloudFoundryPlatformInactive() {     this.contextRunner.withPropertyValues().run((context) -> assertThat(context.containsBean("cloudFoundryWebEndpointServletHandlerMapping")).isFalse()). }
false;public;0;9;;@Test public void cloudFoundryManagementEndpointsDisabled() {     this.contextRunner.withPropertyValues("VCAP_APPLICATION=---", "management.cloudfoundry.enabled:false").run((context) -> assertThat(context.containsBean("cloudFoundryEndpointHandlerMapping")).isFalse()). }
false;public;0;17;;@Test public void allEndpointsAvailableUnderCloudFoundryWithoutExposeAllOnWeb() {     this.contextRunner.withUserConfiguration(TestConfiguration.class).withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id", "vcap.application.cf_api:http://my-cloud-controller.com").run((context) -> {         CloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(context).         Collection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints().         assertThat(endpoints.stream().filter((candidate) -> EndpointId.of("test").equals(candidate.getEndpointId())).findFirst()).isNotEmpty().     }). }
false;public;0;23;;@Test public void endpointPathCustomizationIsNotApplied() {     this.contextRunner.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id", "vcap.application.cf_api:http://my-cloud-controller.com", "management.endpoints.web.path-mapping.test=custom").withUserConfiguration(TestConfiguration.class).run((context) -> {         CloudFoundryWebEndpointServletHandlerMapping handlerMapping = getHandlerMapping(context).         Collection<ExposableWebEndpoint> endpoints = handlerMapping.getEndpoints().         ExposableWebEndpoint endpoint = endpoints.stream().filter((candidate) -> EndpointId.of("test").equals(candidate.getEndpointId())).findFirst().get().         Collection<WebOperation> operations = endpoint.getOperations().         assertThat(operations).hasSize(1).         assertThat(operations.iterator().next().getRequestPredicate().getPath()).isEqualTo("test").     }). }
false;public;0;24;;@Test public void healthEndpointInvokerShouldBeCloudFoundryWebExtension() {     this.contextRunner.withPropertyValues("VCAP_APPLICATION:---", "vcap.application.application_id:my-app-id", "vcap.application.cf_api:http://my-cloud-controller.com").withConfiguration(AutoConfigurations.of(HealthIndicatorAutoConfiguration.class, HealthEndpointAutoConfiguration.class)).run((context) -> {         Collection<ExposableWebEndpoint> endpoints = context.getBean("cloudFoundryWebEndpointServletHandlerMapping", CloudFoundryWebEndpointServletHandlerMapping.class).getEndpoints().         ExposableWebEndpoint endpoint = endpoints.iterator().next().         assertThat(endpoint.getOperations()).hasSize(3).         WebOperation webOperation = findOperationWithRequestPath(endpoint, "health").         Object invoker = ReflectionTestUtils.getField(webOperation, "invoker").         assertThat(ReflectionTestUtils.getField(invoker, "target")).isInstanceOf(CloudFoundryHealthEndpointWebExtension.class).     }). }
false;private;1;5;;private CloudFoundryWebEndpointServletHandlerMapping getHandlerMapping(ApplicationContext context) {     return context.getBean("cloudFoundryWebEndpointServletHandlerMapping", CloudFoundryWebEndpointServletHandlerMapping.class). }
false;private;2;10;;private WebOperation findOperationWithRequestPath(ExposableWebEndpoint endpoint, String requestPath) {     for (WebOperation operation : endpoint.getOperations()) {         if (operation.getRequestPredicate().getPath().equals(requestPath)) {             return operation.         }     }     throw new IllegalStateException("No operation found with request path " + requestPath + " from " + endpoint.getOperations()). }
false;public;0;4;;@Bean public TestEndpoint testEndpoint() {     return new TestEndpoint(). }
false;public;0;4;;@ReadOperation public String hello() {     return "hello world". }
