commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void allAuditEvents() throws Exception {     String queryTimestamp = "2017-11-07T09:37Z".     given(this.repository.find(any(), any(), any())).willReturn(Arrays.asList(new AuditEvent("alice", "logout", Collections.emptyMap()))).     this.mockMvc.perform(get("/actuator/auditevents").param("after", queryTimestamp)).andExpect(status().isOk()).andDo(document("auditevents/all", responseFields(fieldWithPath("events").description("An array of audit events."), fieldWithPath("events.[].timestamp").description("The timestamp of when the event occurred."), fieldWithPath("events.[].principal").description("The principal that triggered the event."), fieldWithPath("events.[].type").description("The type of the event.")))). }
false;public;0;23;;@Test public void filteredAuditEvents() throws Exception {     OffsetDateTime now = OffsetDateTime.now().     String queryTimestamp = DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(now).     given(this.repository.find("alice", now.toInstant(), "logout")).willReturn(Arrays.asList(new AuditEvent("alice", "logout", Collections.emptyMap()))).     this.mockMvc.perform(get("/actuator/auditevents").param("principal", "alice").param("after", queryTimestamp).param("type", "logout")).andExpect(status().isOk()).andDo(document("auditevents/filtered", requestParameters(parameterWithName("after").description("Restricts the events to those that occurred " + "after the given time. Optional."), parameterWithName("principal").description("Restricts the events to those with the given " + "principal. Optional."), parameterWithName("type").description("Restricts the events to those with the given " + "type. Optional.")))).     verify(this.repository).find("alice", now.toInstant(), "logout"). }
false;public;1;4;;@Bean public AuditEventsEndpoint auditEventsEndpoint(AuditEventRepository repository) {     return new AuditEventsEndpoint(repository). }
