commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void resolverShouldDelegateToOtherResolversInContext() {     load(TestConfiguration.class).     CompositeHandlerExceptionResolver resolver = (CompositeHandlerExceptionResolver) this.context.getBean(DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME).     ModelAndView resolved = resolver.resolveException(this.request, this.response, null, new HttpRequestMethodNotSupportedException("POST")).     assertThat(resolved.getViewName()).isEqualTo("test-view"). }
false;public;0;9;;@Test public void resolverShouldAddDefaultResolverIfNonePresent() {     load(BaseConfiguration.class).     CompositeHandlerExceptionResolver resolver = (CompositeHandlerExceptionResolver) this.context.getBean(DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME).     ModelAndView resolved = resolver.resolveException(this.request, this.response, null, new HttpRequestMethodNotSupportedException("POST")).     assertThat(resolved).isNotNull(). }
false;private;1;6;;private void load(Class<?>... configs) {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(configs).     context.refresh().     this.context = context. }
false;public;0;4;;@Bean(name = DispatcherServlet.HANDLER_EXCEPTION_RESOLVER_BEAN_NAME) public CompositeHandlerExceptionResolver compositeHandlerExceptionResolver() {     return new CompositeHandlerExceptionResolver(). }
false;public;0;4;;@Bean public HandlerExceptionResolver testResolver() {     return new TestHandlerExceptionResolver(). }
false;public;4;5;;@Override public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {     return new ModelAndView("test-view"). }
