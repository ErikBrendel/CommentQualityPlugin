commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void backsOffWithoutAClock() {     this.contextRunner.run((context) -> assertThat(context).doesNotHaveBean(JmxMeterRegistry.class)). }
false;public;0;7;;@Test public void autoConfiguresItsConfigAndMeterRegistry() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> assertThat(context).hasSingleBean(JmxMeterRegistry.class).hasSingleBean(JmxConfig.class)). }
false;public;0;8;;@Test public void autoConfigurationCanBeDisabled() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).withPropertyValues("management.metrics.export.jmx.enabled=false").run((context) -> assertThat(context).doesNotHaveBean(JmxMeterRegistry.class).doesNotHaveBean(JmxConfig.class)). }
false;public;0;7;;@Test public void allowsCustomConfigToBeUsed() {     this.contextRunner.withUserConfiguration(CustomConfigConfiguration.class).run((context) -> assertThat(context).hasSingleBean(JmxMeterRegistry.class).hasSingleBean(JmxConfig.class).hasBean("customConfig")). }
false;public;0;7;;@Test public void allowsCustomRegistryToBeUsed() {     this.contextRunner.withUserConfiguration(CustomRegistryConfiguration.class).run((context) -> assertThat(context).hasSingleBean(JmxMeterRegistry.class).hasBean("customRegistry").hasSingleBean(JmxConfig.class)). }
false;public;0;10;;@Test public void stopsMeterRegistryWhenContextIsClosed() {     this.contextRunner.withUserConfiguration(BaseConfiguration.class).run((context) -> {         JmxMeterRegistry registry = context.getBean(JmxMeterRegistry.class).         assertThat(registry.isClosed()).isFalse().         context.close().         assertThat(registry.isClosed()).isTrue().     }). }
false;public;0;4;;@Bean public Clock clock() {     return Clock.SYSTEM. }
false;public;0;4;;@Bean public JmxConfig customConfig() {     return (key) -> null. }
false;public;2;4;;@Bean public JmxMeterRegistry customRegistry(JmxConfig config, Clock clock) {     return new JmxMeterRegistry(config, clock). }
