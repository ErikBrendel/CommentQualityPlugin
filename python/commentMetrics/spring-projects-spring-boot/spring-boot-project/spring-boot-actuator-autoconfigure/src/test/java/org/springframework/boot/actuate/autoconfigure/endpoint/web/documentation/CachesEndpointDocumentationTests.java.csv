commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void allCaches() throws Exception {     this.mockMvc.perform(get("/actuator/caches")).andExpect(status().isOk()).andDo(MockMvcRestDocumentation.document("caches/all", responseFields(fieldWithPath("cacheManagers").description("Cache managers keyed by id."), fieldWithPath("cacheManagers.*.caches").description("Caches in the application context keyed by " + "name.")).andWithPrefix("cacheManagers.*.caches.*.", fieldWithPath("target").description("Fully qualified name of the native cache.")))). }
false;public;0;7;;@Test public void namedCache() throws Exception {     this.mockMvc.perform(get("/actuator/caches/cities")).andExpect(status().isOk()).andDo(MockMvcRestDocumentation.document("caches/named", requestParameters(requestParameters), responseFields(levelFields))). }
false;public;0;5;;@Test public void evictAllCaches() throws Exception {     this.mockMvc.perform(delete("/actuator/caches")).andExpect(status().isNoContent()).andDo(MockMvcRestDocumentation.document("caches/evict-all")). }
false;public;0;9;;@Test public void evictNamedCache() throws Exception {     this.mockMvc.perform(delete("/actuator/caches/countries?cacheManager=anotherCacheManager")).andExpect(status().isNoContent()).andDo(MockMvcRestDocumentation.document("caches/evict-named", requestParameters(requestParameters))). }
false;public;0;9;;@Bean public CachesEndpoint endpoint() {     Map<String, CacheManager> cacheManagers = new HashMap<>().     cacheManagers.put("cacheManager", new ConcurrentMapCacheManager("countries", "cities")).     cacheManagers.put("anotherCacheManager", new ConcurrentMapCacheManager("countries")).     return new CachesEndpoint(cacheManagers). }
false;public;0;4;;@Bean public CachesEndpointWebExtension endpointWebExtension() {     return new CachesEndpointWebExtension(endpoint()). }
