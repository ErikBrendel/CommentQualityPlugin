commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void autoConfiguredCacheManagerIsInstrumented() {     this.contextRunner.withPropertyValues("spring.cache.type=caffeine", "spring.cache.cache-names=cache1,cache2").run((context) -> {         MeterRegistry registry = context.getBean(MeterRegistry.class).         registry.get("cache.gets").tags("name", "cache1").tags("cacheManager", "cacheManager").meter().         registry.get("cache.gets").tags("name", "cache2").tags("cacheManager", "cacheManager").meter().     }). }
false;public;0;11;;@Test public void autoConfiguredNonSupportedCacheManagerIsIgnored() {     this.contextRunner.withPropertyValues("spring.cache.type=simple", "spring.cache.cache-names=cache1,cache2").run((context) -> {         MeterRegistry registry = context.getBean(MeterRegistry.class).         assertThat(registry.find("cache.gets").tags("name", "cache1").tags("cacheManager", "cacheManager").meter()).isNull().         assertThat(registry.find("cache.gets").tags("name", "cache2").tags("cacheManager", "cacheManager").meter()).isNull().     }). }
false;public;0;11;;@Test public void cacheInstrumentationCanBeDisabled() {     this.contextRunner.withPropertyValues("management.metrics.enable.cache=false", "spring.cache.type=caffeine", "spring.cache.cache-names=cache1").run((context) -> {         MeterRegistry registry = context.getBean(MeterRegistry.class).         assertThat(registry.find("cache.requests").tags("name", "cache1").tags("cacheManager", "cacheManager").meter()).isNull().     }). }
