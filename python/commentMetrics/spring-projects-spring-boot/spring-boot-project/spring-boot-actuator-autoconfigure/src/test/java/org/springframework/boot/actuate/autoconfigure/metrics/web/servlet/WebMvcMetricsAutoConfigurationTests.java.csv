commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void backsOffWhenMeterRegistryIsMissing() {     new WebApplicationContextRunner().withConfiguration(AutoConfigurations.of(WebMvcMetricsAutoConfiguration.class)).run((context) -> assertThat(context).doesNotHaveBean(WebMvcTagsProvider.class)). }
false;public;0;9;;@Test public void definesTagsProviderAndFilterWhenMeterRegistryIsPresent() {     this.contextRunner.run((context) -> {         assertThat(context).hasSingleBean(DefaultWebMvcTagsProvider.class).         assertThat(context).hasSingleBean(FilterRegistrationBean.class).         assertThat(context.getBean(FilterRegistrationBean.class).getFilter()).isInstanceOf(WebMvcMetricsFilter.class).     }). }
false;public;0;8;;@Test public void tagsProviderBacksOff() {     this.contextRunner.withUserConfiguration(TagsProviderConfiguration.class).run((context) -> {         assertThat(context).doesNotHaveBean(DefaultWebMvcTagsProvider.class).         assertThat(context).hasSingleBean(TestWebMvcTagsProvider.class).     }). }
false;public;0;10;;@Test public void filterRegistrationHasExpectedDispatcherTypesAndOrder() {     this.contextRunner.run((context) -> {         FilterRegistrationBean<?> registration = context.getBean(FilterRegistrationBean.class).         assertThat(registration).hasFieldOrPropertyWithValue("dispatcherTypes", EnumSet.of(DispatcherType.REQUEST, DispatcherType.ASYNC)).         assertThat(registration.getOrder()).isEqualTo(Ordered.HIGHEST_PRECEDENCE + 1).     }). }
false;public;0;14;;@Test public void afterMaxUrisReachedFurtherUrisAreDenied() {     this.contextRunner.withUserConfiguration(TestController.class).withConfiguration(AutoConfigurations.of(MetricsAutoConfiguration.class, WebMvcAutoConfiguration.class)).withPropertyValues("management.metrics.web.server.max-uri-tags=2").run((context) -> {         MeterRegistry registry = getInitializedMeterRegistry(context).         assertThat(registry.get("http.server.requests").meters()).hasSize(2).         assertThat(this.output.toString()).contains("Reached the maximum number of URI tags " + "for 'http.server.requests'").     }). }
false;public;0;14;;@Test public void shouldNotDenyNorLogIfMaxUrisIsNotReached() {     this.contextRunner.withUserConfiguration(TestController.class).withConfiguration(AutoConfigurations.of(MetricsAutoConfiguration.class, WebMvcAutoConfiguration.class)).withPropertyValues("management.metrics.web.server.max-uri-tags=5").run((context) -> {         MeterRegistry registry = getInitializedMeterRegistry(context).         assertThat(registry.get("http.server.requests").meters()).hasSize(3).         assertThat(this.output.toString()).doesNotContain("Reached the maximum number of URI tags " + "for 'http.server.requests'").     }). }
false;public;0;12;;@Test @SuppressWarnings("rawtypes") public void longTaskTimingInterceptorIsRegistered() {     this.contextRunner.withUserConfiguration(TestController.class).withConfiguration(AutoConfigurations.of(MetricsAutoConfiguration.class, WebMvcAutoConfiguration.class)).run((context) -> assertThat(context.getBean(RequestMappingHandlerMapping.class)).extracting("interceptors").element(0).asList().extracting((item) -> (Class) item.getClass()).contains(LongTaskTimingHandlerInterceptor.class)). }
false;private;1;13;;private MeterRegistry getInitializedMeterRegistry(AssertableWebApplicationContext context) throws Exception {     assertThat(context).hasSingleBean(FilterRegistrationBean.class).     Filter filter = context.getBean(FilterRegistrationBean.class).getFilter().     assertThat(filter).isInstanceOf(WebMvcMetricsFilter.class).     MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(context).addFilters(filter).build().     for (int i = 0. i < 3. i++) {         mockMvc.perform(MockMvcRequestBuilders.get("/test" + i)).andExpect(status().isOk()).     }     return context.getBean(MeterRegistry.class). }
false;public;0;4;;@Bean public TestWebMvcTagsProvider tagsProvider() {     return new TestWebMvcTagsProvider(). }
false;public;4;5;;@Override public Iterable<Tag> getTags(HttpServletRequest request, HttpServletResponse response, Object handler, Throwable exception) {     return Collections.emptyList(). }
false;public;2;5;;@Override public Iterable<Tag> getLongRequestTags(HttpServletRequest request, Object handler) {     return Collections.emptyList(). }
