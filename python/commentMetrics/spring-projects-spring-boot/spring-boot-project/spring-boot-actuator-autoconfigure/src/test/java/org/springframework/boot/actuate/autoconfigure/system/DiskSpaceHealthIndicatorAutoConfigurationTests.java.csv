commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void runShouldCreateIndicator() {     this.contextRunner.run((context) -> assertThat(context).hasSingleBean(DiskSpaceHealthIndicator.class).doesNotHaveBean(ApplicationHealthIndicator.class)). }
false;public;0;8;;@Test public void thresholdMustBePositive() {     this.contextRunner.withPropertyValues("management.health.diskspace.threshold=-10MB").run((context) -> assertThat(context).hasFailed().getFailure().hasMessageContaining("Failed to bind properties under 'management.health.diskspace'")). }
false;public;0;11;;@Test public void thresholdCanBeCustomized() {     this.contextRunner.withPropertyValues("management.health.diskspace.threshold=20MB").run((context) -> {         assertThat(context).hasSingleBean(DiskSpaceHealthIndicator.class).         assertThat(context.getBean(DiskSpaceHealthIndicator.class)).hasFieldOrPropertyWithValue("threshold", DataSize.ofMegabytes(20)).     }). }
false;public;0;7;;@Test public void runWhenDisabledShouldNotCreateIndicator() {     this.contextRunner.withPropertyValues("management.health.diskspace.enabled:false").run((context) -> assertThat(context).doesNotHaveBean(DiskSpaceHealthIndicator.class).hasSingleBean(ApplicationHealthIndicator.class)). }
