commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void operationWithSecurityInterceptorForbidden() {     given(securityService.getAccessLevel(any(), eq("app-id"))).willReturn(AccessLevel.RESTRICTED).     load(TestEndpointConfiguration.class, (client) -> client.get().uri("/cfApplication/test").accept(MediaType.APPLICATION_JSON).header("Authorization", "bearer " + mockAccessToken()).exchange().expectStatus().isEqualTo(HttpStatus.FORBIDDEN)). }
false;public;0;10;;@Test public void operationWithSecurityInterceptorSuccess() {     given(securityService.getAccessLevel(any(), eq("app-id"))).willReturn(AccessLevel.FULL).     load(TestEndpointConfiguration.class, (client) -> client.get().uri("/cfApplication/test").accept(MediaType.APPLICATION_JSON).header("Authorization", "bearer " + mockAccessToken()).exchange().expectStatus().isEqualTo(HttpStatus.OK)). }
false;public;0;10;;@Test public void responseToOptionsRequestIncludesCorsHeaders() {     load(TestEndpointConfiguration.class, (client) -> client.options().uri("/cfApplication/test").accept(MediaType.APPLICATION_JSON).header("Access-Control-Request-Method", "POST").header("Origin", "http://example.com").exchange().expectStatus().isOk().expectHeader().valueEquals("Access-Control-Allow-Origin", "http://example.com").expectHeader().valueEquals("Access-Control-Allow-Methods", "GET,POST")). }
false;public;0;18;;@Test public void linksToOtherEndpointsWithFullAccess() {     given(securityService.getAccessLevel(any(), eq("app-id"))).willReturn(AccessLevel.FULL).     load(TestEndpointConfiguration.class, (client) -> client.get().uri("/cfApplication").accept(MediaType.APPLICATION_JSON).header("Authorization", "bearer " + mockAccessToken()).exchange().expectStatus().isOk().expectBody().jsonPath("_links.length()").isEqualTo(5).jsonPath("_links.self.href").isNotEmpty().jsonPath("_links.self.templated").isEqualTo(false).jsonPath("_links.info.href").isNotEmpty().jsonPath("_links.info.templated").isEqualTo(false).jsonPath("_links.env.href").isNotEmpty().jsonPath("_links.env.templated").isEqualTo(false).jsonPath("_links.test.href").isNotEmpty().jsonPath("_links.test.templated").isEqualTo(false).jsonPath("_links.test-part.href").isNotEmpty().jsonPath("_links.test-part.templated").isEqualTo(true)). }
false;public;0;11;;@Test public void linksToOtherEndpointsForbidden() {     CloudFoundryAuthorizationException exception = new CloudFoundryAuthorizationException(Reason.INVALID_TOKEN, "invalid-token").     willThrow(exception).given(tokenValidator).validate(any()).     load(TestEndpointConfiguration.class, (client) -> client.get().uri("/cfApplication").accept(MediaType.APPLICATION_JSON).header("Authorization", "bearer " + mockAccessToken()).exchange().expectStatus().isUnauthorized()). }
false;public;0;16;;@Test public void linksToOtherEndpointsWithRestrictedAccess() {     given(securityService.getAccessLevel(any(), eq("app-id"))).willReturn(AccessLevel.RESTRICTED).     load(TestEndpointConfiguration.class, (client) -> client.get().uri("/cfApplication").accept(MediaType.APPLICATION_JSON).header("Authorization", "bearer " + mockAccessToken()).exchange().expectStatus().isOk().expectBody().jsonPath("_links.length()").isEqualTo(2).jsonPath("_links.self.href").isNotEmpty().jsonPath("_links.self.templated").isEqualTo(false).jsonPath("_links.info.href").isNotEmpty().jsonPath("_links.info.templated").isEqualTo(false).jsonPath("_links.env").doesNotExist().jsonPath("_links.test").doesNotExist().jsonPath("_links.test-part").doesNotExist()). }
false;private;1;4;;private AnnotationConfigServletWebServerApplicationContext createApplicationContext(Class<?>... config) {     return new AnnotationConfigServletWebServerApplicationContext(config). }
false;private;1;3;;private int getPort(AnnotationConfigServletWebServerApplicationContext context) {     return context.getWebServer().getPort(). }
false;private;2;9;;private void load(Class<?> configuration, Consumer<WebTestClient> clientConsumer) {     BiConsumer<ApplicationContext, WebTestClient> consumer = (context, client) -> clientConsumer.accept(client).     try (AnnotationConfigServletWebServerApplicationContext context = createApplicationContext(configuration, CloudFoundryMvcConfiguration.class)) {         consumer.accept(context, WebTestClient.bindToServer().baseUrl("http://localhost:" + getPort(context)).build()).     } }
false;private;0;5;;private String mockAccessToken() {     return "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ0b3B0YWwu" + "Y29tIiwiZXhwIjoxNDI2NDIwODAwLCJhd2Vzb21lIjp0cnVlfQ." + Base64Utils.encodeToString("signature".getBytes()). }
false;public;0;5;;@Bean public CloudFoundrySecurityInterceptor interceptor() {     return new CloudFoundrySecurityInterceptor(tokenValidator, securityService, "app-id"). }
false;public;0;5;;@Bean public EndpointMediaTypes EndpointMediaTypes() {     return new EndpointMediaTypes(Collections.singletonList("application/json"), Collections.singletonList("application/json")). }
false;public;3;14;;@Bean public CloudFoundryWebEndpointServletHandlerMapping cloudFoundryWebEndpointServletHandlerMapping(WebEndpointDiscoverer webEndpointDiscoverer, EndpointMediaTypes endpointMediaTypes, CloudFoundrySecurityInterceptor interceptor) {     CorsConfiguration corsConfiguration = new CorsConfiguration().     corsConfiguration.setAllowedOrigins(Arrays.asList("http://example.com")).     corsConfiguration.setAllowedMethods(Arrays.asList("GET", "POST")).     return new CloudFoundryWebEndpointServletHandlerMapping(new EndpointMapping("/cfApplication"), webEndpointDiscoverer.getEndpoints(), endpointMediaTypes, corsConfiguration, interceptor, new EndpointLinksResolver(webEndpointDiscoverer.getEndpoints())). }
false;public;2;10;;@Bean public WebEndpointDiscoverer webEndpointDiscoverer(ApplicationContext applicationContext, EndpointMediaTypes endpointMediaTypes) {     ParameterValueMapper parameterMapper = new ConversionServiceParameterValueMapper(DefaultConversionService.getSharedInstance()).     return new WebEndpointDiscoverer(applicationContext, parameterMapper, endpointMediaTypes, null, Collections.emptyList(), Collections.emptyList()). }
false;public;0;4;;@Bean public EndpointDelegate endpointDelegate() {     return mock(EndpointDelegate.class). }
false;public;0;4;;@Bean public TomcatServletWebServerFactory tomcat() {     return new TomcatServletWebServerFactory(0). }
false;public;0;4;;@Bean public DispatcherServlet dispatcherServlet() {     return new DispatcherServlet(). }
false;public;0;4;;@ReadOperation public Map<String, Object> readAll() {     return Collections.singletonMap("All", true). }
false;public;1;4;;@ReadOperation public Map<String, Object> readPart(@Selector String part) {     return Collections.singletonMap("part", part). }
false;public;2;4;;@WriteOperation public void write(String foo, String bar) {     this.endpointDelegate.write(foo, bar). }
false;public;0;4;;@ReadOperation public Map<String, Object> readAll() {     return Collections.singletonMap("All", true). }
false;public;0;4;;@ReadOperation public Map<String, Object> readAll() {     return Collections.singletonMap("All", true). }
false;public;1;4;;@Bean public TestEndpoint testEndpoint(EndpointDelegate endpointDelegate) {     return new TestEndpoint(endpointDelegate). }
false;public;0;4;;@Bean public TestInfoEndpoint testInfoEnvEndpoint() {     return new TestInfoEndpoint(). }
false;public;0;4;;@Bean public TestEnvEndpoint testEnvEndpoint() {     return new TestEnvEndpoint(). }
false;;0;1;;void write().
false;;2;1;;void write(String foo, String bar).
