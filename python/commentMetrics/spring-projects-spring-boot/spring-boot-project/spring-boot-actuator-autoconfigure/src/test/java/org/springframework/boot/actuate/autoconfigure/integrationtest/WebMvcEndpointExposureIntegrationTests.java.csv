commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void webEndpointsAreDisabledByDefault() {     this.contextRunner.run((context) -> {         WebTestClient client = createClient(context).         assertThat(isExposed(client, HttpMethod.GET, "beans")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "conditions")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "configprops")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "custommvc")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "customservlet")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "env")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "health")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "info")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "mappings")).isFalse().         assertThat(isExposed(client, HttpMethod.POST, "shutdown")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "threaddump")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "httptrace")).isFalse().     }). }
false;public;0;20;;@Test public void webEndpointsCanBeExposed() {     WebApplicationContextRunner contextRunner = this.contextRunner.withPropertyValues("management.endpoints.web.exposure.include=*").     contextRunner.run((context) -> {         WebTestClient client = createClient(context).         assertThat(isExposed(client, HttpMethod.GET, "beans")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "conditions")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "configprops")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "custommvc")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "customservlet")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "env")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "health")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "info")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "mappings")).isTrue().         assertThat(isExposed(client, HttpMethod.POST, "shutdown")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "threaddump")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "httptrace")).isTrue().     }). }
false;public;0;20;;@Test public void singleWebEndpointCanBeExposed() {     WebApplicationContextRunner contextRunner = this.contextRunner.withPropertyValues("management.endpoints.web.exposure.include=beans").     contextRunner.run((context) -> {         WebTestClient client = createClient(context).         assertThat(isExposed(client, HttpMethod.GET, "beans")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "conditions")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "configprops")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "custommvc")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "customservlet")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "env")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "health")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "info")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "mappings")).isFalse().         assertThat(isExposed(client, HttpMethod.POST, "shutdown")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "threaddump")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "httptrace")).isFalse().     }). }
false;public;0;21;;@Test public void singleWebEndpointCanBeExcluded() {     WebApplicationContextRunner contextRunner = this.contextRunner.withPropertyValues("management.endpoints.web.exposure.include=*", "management.endpoints.web.exposure.exclude=shutdown").     contextRunner.run((context) -> {         WebTestClient client = createClient(context).         assertThat(isExposed(client, HttpMethod.GET, "beans")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "conditions")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "configprops")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "custommvc")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "customservlet")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "env")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "health")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "info")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "mappings")).isTrue().         assertThat(isExposed(client, HttpMethod.POST, "shutdown")).isFalse().         assertThat(isExposed(client, HttpMethod.GET, "threaddump")).isTrue().         assertThat(isExposed(client, HttpMethod.GET, "httptrace")).isTrue().     }). }
false;private;1;6;;private WebTestClient createClient(AssertableWebApplicationContext context) {     int port = context.getSourceApplicationContext(ServletWebServerApplicationContext.class).getWebServer().getPort().     return WebTestClient.bindToServer().baseUrl("http://localhost:" + port).build(). }
false;private;3;15;;private boolean isExposed(WebTestClient client, HttpMethod method, String path) throws Exception {     path = "/actuator/" + path.     EntityExchangeResult<byte[]> result = client.method(method).uri(path).exchange().expectBody().returnResult().     if (result.getStatus() == HttpStatus.OK) {         return true.     }     if (result.getStatus() == HttpStatus.NOT_FOUND) {         return false.     }     throw new IllegalStateException(String.format("Unexpected %s HTTP status for " + "endpoint %s", result.getStatus(), path)). }
false;public;0;4;;@GetMapping("/") public String main() {     return "test". }
false;protected;2;4;;@Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { }
false;public;0;11;;@Override public EndpointServlet get() {     return new EndpointServlet(new HttpServlet() {          @Override         protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {         }     }). }
