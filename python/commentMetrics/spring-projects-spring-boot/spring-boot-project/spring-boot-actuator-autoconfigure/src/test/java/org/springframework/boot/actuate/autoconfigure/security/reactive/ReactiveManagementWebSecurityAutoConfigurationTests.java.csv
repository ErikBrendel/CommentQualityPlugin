commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void permitAllForHealth() {     this.contextRunner.run((context) -> assertThat(getAuthenticateHeader(context, "/actuator/health")).isNull()). }
false;public;0;6;;@Test public void permitAllForInfo() {     this.contextRunner.run((context) -> assertThat(getAuthenticateHeader(context, "/actuator/info")).isNull()). }
false;public;0;9;;@Test public void securesEverythingElse() {     this.contextRunner.run((context) -> {         assertThat(getAuthenticateHeader(context, "/actuator").get(0)).contains("Basic realm=").         assertThat(getAuthenticateHeader(context, "/foo").toString()).contains("Basic realm=").     }). }
false;public;0;9;;@Test public void usesMatchersBasedOffConfiguredActuatorBasePath() {     this.contextRunner.withPropertyValues("management.endpoints.web.base-path=/").run((context) -> {         assertThat(getAuthenticateHeader(context, "/health")).isNull().         assertThat(getAuthenticateHeader(context, "/foo").get(0)).contains("Basic realm=").     }). }
false;public;0;9;;@Test public void backsOffIfCustomSecurityIsAdded() {     this.contextRunner.withUserConfiguration(CustomSecurityConfiguration.class).run((context) -> {         assertThat(getLocationHeader(context, "/actuator/health").toString()).contains("/login").         assertThat(getLocationHeader(context, "/foo")).isNull().     }). }
false;public;0;10;;@Test public void backOffIfReactiveOAuth2ResourceServerAutoConfigurationPresent() {     this.contextRunner.withConfiguration(AutoConfigurations.of(ReactiveOAuth2ResourceServerAutoConfiguration.class)).withPropertyValues("spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://authserver").run((context) -> assertThat(context).doesNotHaveBean(ReactiveManagementWebSecurityAutoConfiguration.class)). }
false;public;0;10;;@Test public void backsOffWhenWebFilterChainProxyBeanPresent() {     this.contextRunner.withUserConfiguration(WebFilterChainProxyConfiguration.class).run((context) -> {         assertThat(getLocationHeader(context, "/actuator/health").toString()).contains("/login").         assertThat(getLocationHeader(context, "/foo").toString()).contains("/login").     }). }
false;private;2;5;;private List<String> getAuthenticateHeader(AssertableReactiveWebApplicationContext context, String path) {     ServerWebExchange exchange = performFilter(context, path).     return exchange.getResponse().getHeaders().get(HttpHeaders.WWW_AUTHENTICATE). }
false;private;2;9;;private ServerWebExchange performFilter(AssertableReactiveWebApplicationContext context, String path) {     ServerWebExchange exchange = webHandler(context).createExchange(MockServerHttpRequest.get(path).build(), new MockServerHttpResponse()).     WebFilterChainProxy proxy = context.getBean(WebFilterChainProxy.class).     proxy.filter(exchange, (serverWebExchange) -> Mono.empty()).block(Duration.ofSeconds(30)).     return exchange. }
false;private;2;5;;private URI getLocationHeader(AssertableReactiveWebApplicationContext context, String path) {     ServerWebExchange exchange = performFilter(context, path).     return exchange.getResponse().getHeaders().getLocation(). }
false;private;1;7;;private TestHttpWebHandlerAdapter webHandler(AssertableReactiveWebApplicationContext context) {     TestHttpWebHandlerAdapter adapter = new TestHttpWebHandlerAdapter(mock(WebHandler.class)).     adapter.setApplicationContext(context).     return adapter. }
false;protected;2;5;;@Override protected ServerWebExchange createExchange(ServerHttpRequest request, ServerHttpResponse response) {     return super.createExchange(request, response). }
false;public;1;5;;@Bean public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {     return http.authorizeExchange().pathMatchers("/foo").permitAll().anyExchange().authenticated().and().formLogin().and().build(). }
false;public;0;4;;@Bean public ReactiveAuthenticationManager authenticationManager() {     return mock(ReactiveAuthenticationManager.class). }
false;public;1;4;;@Bean public WebFilterChainProxy webFilterChainProxy(ServerHttpSecurity http) {     return new WebFilterChainProxy(getFilterChains(http)). }
false;public;1;7;;@Bean public TestServerHttpSecurity http(ReactiveAuthenticationManager authenticationManager) {     TestServerHttpSecurity httpSecurity = new TestServerHttpSecurity().     httpSecurity.authenticationManager(authenticationManager).     return httpSecurity. }
false;private;1;4;;private List<SecurityWebFilterChain> getFilterChains(ServerHttpSecurity http) {     return Collections.singletonList(http.authorizeExchange().anyExchange().authenticated().and().formLogin().and().build()). }
false;public;1;5;;@Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {     super.setApplicationContext(applicationContext). }
