commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void statusCodeForInvalidTokenReasonShouldBe401() {     assertThat(createException(Reason.INVALID_TOKEN).getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;5;;@Test public void statusCodeForInvalidIssuerReasonShouldBe401() {     assertThat(createException(Reason.INVALID_ISSUER).getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;5;;@Test public void statusCodeForInvalidAudienceReasonShouldBe401() {     assertThat(createException(Reason.INVALID_AUDIENCE).getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;5;;@Test public void statusCodeForInvalidSignatureReasonShouldBe401() {     assertThat(createException(Reason.INVALID_SIGNATURE).getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;5;;@Test public void statusCodeForMissingAuthorizationReasonShouldBe401() {     assertThat(createException(Reason.MISSING_AUTHORIZATION).getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;5;;@Test public void statusCodeForUnsupportedSignatureAlgorithmReasonShouldBe401() {     assertThat(createException(Reason.UNSUPPORTED_TOKEN_SIGNING_ALGORITHM).getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;5;;@Test public void statusCodeForTokenExpiredReasonShouldBe401() {     assertThat(createException(Reason.TOKEN_EXPIRED).getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED). }
false;public;0;5;;@Test public void statusCodeForAccessDeniedReasonShouldBe403() {     assertThat(createException(Reason.ACCESS_DENIED).getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN). }
false;public;0;5;;@Test public void statusCodeForServiceUnavailableReasonShouldBe503() {     assertThat(createException(Reason.SERVICE_UNAVAILABLE).getStatusCode()).isEqualTo(HttpStatus.SERVICE_UNAVAILABLE). }
false;private;1;3;;private CloudFoundryAuthorizationException createException(Reason reason) {     return new CloudFoundryAuthorizationException(reason, "message"). }
