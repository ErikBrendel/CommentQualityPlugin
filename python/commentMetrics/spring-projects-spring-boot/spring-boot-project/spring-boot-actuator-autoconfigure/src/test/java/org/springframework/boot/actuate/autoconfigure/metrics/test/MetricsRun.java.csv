commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * Return a function that configures the run to be limited to the {@code simple}  * implementation.  * @return the function to apply  */ ;/**  * Return a function that configures the run to be limited to the {@code simple}  * implementation.  * @return the function to apply  */ public static <T extends AbstractApplicationContextRunner<?, ?, ?>> Function<T, T> simple() {     return limitedTo(SimpleMetricsExportAutoConfiguration.class). }
true;public,static;1;4;/**  * Return a function that configures the run to be limited to the specified  * implementations.  * @param exportAutoConfigurations the export auto-configurations to include  * @return the function to apply  */ ;/**  * Return a function that configures the run to be limited to the specified  * implementations.  * @param exportAutoConfigurations the export auto-configurations to include  * @return the function to apply  */ public static <T extends AbstractApplicationContextRunner<?, ?, ?>> Function<T, T> limitedTo(Class<?>... exportAutoConfigurations) {     return (contextRunner) -> apply(contextRunner, exportAutoConfigurations). }
false;private,static;2;12;;@SuppressWarnings("unchecked") private static <T extends AbstractApplicationContextRunner<?, ?, ?>> T apply(T contextRunner, Class<?>[] exportAutoConfigurations) {     for (Class<?> configuration : exportAutoConfigurations) {         Assert.state(EXPORT_AUTO_CONFIGURATIONS.contains(configuration), () -> "Unknown export auto-configuration " + configuration.getName()).     }     return (T) contextRunner.withPropertyValues("management.metrics.use-global-registry=false").withConfiguration(AUTO_CONFIGURATIONS).withConfiguration(AutoConfigurations.of(exportAutoConfigurations)). }
