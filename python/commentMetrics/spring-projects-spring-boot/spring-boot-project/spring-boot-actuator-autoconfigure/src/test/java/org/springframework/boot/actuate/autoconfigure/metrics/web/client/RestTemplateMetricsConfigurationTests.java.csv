commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void restTemplateCreatedWithBuilderIsInstrumented() {     this.contextRunner.run((context) -> {         MeterRegistry registry = context.getBean(MeterRegistry.class).         RestTemplateBuilder builder = context.getBean(RestTemplateBuilder.class).         validateRestTemplate(builder, registry).     }). }
false;public;0;10;;@Test public void restTemplateCanBeCustomizedManually() {     this.contextRunner.run((context) -> {         assertThat(context).hasSingleBean(MetricsRestTemplateCustomizer.class).         RestTemplateBuilder customBuilder = new RestTemplateBuilder().customizers(context.getBean(MetricsRestTemplateCustomizer.class)).         MeterRegistry registry = context.getBean(MeterRegistry.class).         validateRestTemplate(customBuilder, registry).     }). }
false;public;0;12;;@Test public void afterMaxUrisReachedFurtherUrisAreDenied() {     this.contextRunner.withPropertyValues("management.metrics.web.client.max-uri-tags=2").run((context) -> {         MeterRegistry registry = getInitializedMeterRegistry(context).         assertThat(registry.get("http.client.requests").meters()).hasSize(2).         assertThat(this.output.toString()).contains("Reached the maximum number of URI tags for 'http.client.requests'.").contains("Are you using 'uriVariables'?").     }). }
false;public;0;12;;@Test public void shouldNotDenyNorLogIfMaxUrisIsNotReached() {     this.contextRunner.withPropertyValues("management.metrics.web.client.max-uri-tags=5").run((context) -> {         MeterRegistry registry = getInitializedMeterRegistry(context).         assertThat(registry.get("http.client.requests").meters()).hasSize(3).         assertThat(this.output.toString()).doesNotContain("Reached the maximum number of URI tags for 'http.client.requests'.").doesNotContain("Are you using 'uriVariables'?").     }). }
false;public;0;9;;@Test public void backsOffWhenRestTemplateBuilderIsMissing() {     new ApplicationContextRunner().with(MetricsRun.simple()).withConfiguration(AutoConfigurations.of(HttpClientMetricsAutoConfiguration.class)).run((context) -> assertThat(context).doesNotHaveBean(DefaultRestTemplateExchangeTagsProvider.class).doesNotHaveBean(MetricsRestTemplateCustomizer.class)). }
false;private;1;13;;private MeterRegistry getInitializedMeterRegistry(AssertableApplicationContext context) {     MeterRegistry registry = context.getBean(MeterRegistry.class).     RestTemplate restTemplate = context.getBean(RestTemplateBuilder.class).build().     MockRestServiceServer server = MockRestServiceServer.createServer(restTemplate).     for (int i = 0. i < 3. i++) {         server.expect(requestTo("/test/" + i)).andRespond(withStatus(HttpStatus.OK)).     }     for (int i = 0. i < 3. i++) {         restTemplate.getForObject("/test/" + i, String.class).     }     return registry. }
false;private;2;10;;private void validateRestTemplate(RestTemplateBuilder builder, MeterRegistry registry) {     RestTemplate restTemplate = mockRestTemplate(builder).     assertThat(registry.find("http.client.requests").meter()).isNull().     assertThat(restTemplate.getForEntity("/projects/{project}", Void.class, "spring-boot").getStatusCode()).isEqualTo(HttpStatus.OK).     assertThat(registry.get("http.client.requests").tags("uri", "/projects/{project}").meter()).isNotNull(). }
false;private;1;7;;private RestTemplate mockRestTemplate(RestTemplateBuilder builder) {     RestTemplate restTemplate = builder.build().     MockRestServiceServer server = MockRestServiceServer.createServer(restTemplate).     server.expect(requestTo("/projects/spring-boot")).andRespond(withStatus(HttpStatus.OK)).     return restTemplate. }
