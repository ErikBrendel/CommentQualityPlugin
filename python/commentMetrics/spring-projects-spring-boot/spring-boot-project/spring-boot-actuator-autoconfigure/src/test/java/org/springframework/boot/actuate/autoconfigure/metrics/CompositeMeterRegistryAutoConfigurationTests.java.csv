commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void registerWhenHasNoMeterRegistryShouldRegisterEmptyNoOpComposite() {     this.contextRunner.withUserConfiguration(NoMeterRegistryConfig.class).run((context) -> {         assertThat(context).hasSingleBean(MeterRegistry.class).         CompositeMeterRegistry registry = context.getBean("noOpMeterRegistry", CompositeMeterRegistry.class).         assertThat(registry.getRegistries()).isEmpty().     }). }
false;public;0;9;;@Test public void registerWhenHasSingleMeterRegistryShouldDoNothing() {     this.contextRunner.withUserConfiguration(SingleMeterRegistryConfig.class).run((context) -> {         assertThat(context).hasSingleBean(MeterRegistry.class).         MeterRegistry registry = context.getBean(MeterRegistry.class).         assertThat(registry).isInstanceOf(TestMeterRegistry.class).     }). }
false;public;0;14;;@Test public void registerWhenHasMultipleMeterRegistriesShouldAddPrimaryComposite() {     this.contextRunner.withUserConfiguration(MultipleMeterRegistriesConfig.class).run((context) -> {         assertThat(context.getBeansOfType(MeterRegistry.class)).hasSize(3).containsKeys("meterRegistryOne", "meterRegistryTwo", COMPOSITE_NAME).         MeterRegistry primary = context.getBean(MeterRegistry.class).         assertThat(primary).isInstanceOf(CompositeMeterRegistry.class).         assertThat(((CompositeMeterRegistry) primary).getRegistries()).hasSize(2).         assertThat(primary.config().clock()).isNotNull().     }). }
false;public;0;11;;@Test public void registerWhenHasMultipleRegistriesAndOneIsPrimaryShouldDoNothing() {     this.contextRunner.withUserConfiguration(MultipleMeterRegistriesWithOnePrimaryConfig.class).run((context) -> {         assertThat(context.getBeansOfType(MeterRegistry.class)).hasSize(2).containsKeys("meterRegistryOne", "meterRegistryTwo").         MeterRegistry primary = context.getBean(MeterRegistry.class).         assertThat(primary).isInstanceOf(TestMeterRegistry.class).     }). }
false;public;0;5;;@Bean @ConditionalOnMissingBean public Clock micrometerClock() {     return Clock.SYSTEM. }
false;public;0;4;;@Bean public MeterRegistry meterRegistry() {     return new TestMeterRegistry(). }
false;public;0;4;;@Bean public MeterRegistry meterRegistryOne() {     return new TestMeterRegistry(). }
false;public;0;4;;@Bean public MeterRegistry meterRegistryTwo() {     return new SimpleMeterRegistry(). }
false;public;0;5;;@Bean @Primary public MeterRegistry meterRegistryOne() {     return new TestMeterRegistry(). }
false;public;0;4;;@Bean public MeterRegistry meterRegistryTwo() {     return new SimpleMeterRegistry(). }
