commented;modifiers;parameterAmount;loc;comment;code
false;private;2;8;;private Set<TypeExcludeFilter> instantiateTypeExcludeFilters(Class<?> testClass, Set<Class<? extends TypeExcludeFilter>> filterClasses) {     Set<TypeExcludeFilter> filters = new LinkedHashSet<>().     for (Class<? extends TypeExcludeFilter> filterClass : filterClasses) {         filters.add(instantiateTypeExcludeFilter(testClass, filterClass)).     }     return Collections.unmodifiableSet(filters). }
false;private;2;15;;private TypeExcludeFilter instantiateTypeExcludeFilter(Class<?> testClass, Class<?> filterClass) {     try {         Constructor<?> constructor = getTypeExcludeFilterConstructor(filterClass).         ReflectionUtils.makeAccessible(constructor).         if (constructor.getParameterCount() == 1) {             return (TypeExcludeFilter) constructor.newInstance(testClass).         }         return (TypeExcludeFilter) constructor.newInstance().     } catch (Exception ex) {         throw new IllegalStateException("Unable to create filter for " + filterClass, ex).     } }
false;public;1;5;;@Override public boolean equals(Object obj) {     return (obj != null && getClass() == obj.getClass() && this.filters.equals(((TypeExcludeFiltersContextCustomizer) obj).filters)). }
false;public;0;4;;@Override public int hashCode() {     return this.filters.hashCode(). }
false;public;2;8;;@Override public void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedContextConfiguration) {     if (!this.filters.isEmpty()) {         context.getBeanFactory().registerSingleton(EXCLUDE_FILTER_BEAN_NAME, createDelegatingTypeExcludeFilter()).     } }
false;public;2;10;;@Override public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {     for (TypeExcludeFilter filter : TypeExcludeFiltersContextCustomizer.this.filters) {         if (filter.match(metadataReader, metadataReaderFactory)) {             return true.         }     }     return false. }
false;private;0;16;;private TypeExcludeFilter createDelegatingTypeExcludeFilter() {     return new TypeExcludeFilter() {          @Override         public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {             for (TypeExcludeFilter filter : TypeExcludeFiltersContextCustomizer.this.filters) {                 if (filter.match(metadataReader, metadataReaderFactory)) {                     return true.                 }             }             return false.         }     }. }
false;private;1;9;;private Constructor<?> getTypeExcludeFilterConstructor(Class<?> type) throws NoSuchMethodException {     try {         return type.getDeclaredConstructor(Class.class).     } catch (Exception ex) {         return type.getDeclaredConstructor().     } }
