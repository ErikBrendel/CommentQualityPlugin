commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public void customize(ConfigurableMockMvcBuilder<?> builder) {     if (this.addFilters) {         addFilters(builder).     }     ResultHandler printHandler = getPrintHandler().     if (printHandler != null) {         builder.alwaysDo(printHandler).     } }
false;private;0;10;;private ResultHandler getPrintHandler() {     LinesWriter writer = getLinesWriter().     if (writer == null) {         return null.     }     if (this.printOnlyOnFailure) {         writer = new DeferredLinesWriter(this.context, writer).     }     return new LinesWritingResultHandler(writer). }
false;private;0;10;;private LinesWriter getLinesWriter() {     if (this.print == MockMvcPrint.NONE) {         return null.     }     if (this.print == MockMvcPrint.LOG_DEBUG) {         return new LoggingLinesWriter().     }     return new SystemLinesWriter(this.print). }
false;private;1;6;;private void addFilters(ConfigurableMockMvcBuilder<?> builder) {     FilterRegistrationBeans registrations = new FilterRegistrationBeans(this.context).     registrations.stream().map(AbstractFilterRegistrationBean.class::cast).filter(AbstractFilterRegistrationBean::isEnabled).forEach((registration) -> addFilter(builder, registration)). }
false;private;2;11;;private void addFilter(ConfigurableMockMvcBuilder<?> builder, AbstractFilterRegistrationBean<?> registration) {     Filter filter = registration.getFilter().     Collection<String> urls = registration.getUrlPatterns().     if (urls.isEmpty()) {         builder.addFilters(filter).     } else {         builder.addFilter(filter, StringUtils.toStringArray(urls)).     } }
false;public;1;3;;public void setAddFilters(boolean addFilters) {     this.addFilters = addFilters. }
false;public;0;3;;public boolean isAddFilters() {     return this.addFilters. }
false;public;1;3;;public void setPrint(MockMvcPrint print) {     this.print = print. }
false;public;0;3;;public MockMvcPrint getPrint() {     return this.print. }
false;public;1;3;;public void setPrintOnlyOnFailure(boolean printOnlyOnFailure) {     this.printOnlyOnFailure = printOnlyOnFailure. }
false;public;0;3;;public boolean isPrintOnlyOnFailure() {     return this.printOnlyOnFailure. }
false;public;1;6;;@Override public void handle(MvcResult result) throws Exception {     LinesPrintingResultHandler delegate = new LinesPrintingResultHandler().     delegate.handle(result).     delegate.write(this.writer). }
false;public;1;3;;public void write(LinesWriter writer) {     writer.write(((Printer) getPrinter()).getLines()). }
false;public;1;5;;@Override public void printHeading(String heading) {     this.lines.add("").     this.lines.add(String.format("%s:", heading)). }
false;public;2;7;;@Override public void printValue(String label, Object value) {     if (value != null && value.getClass().isArray()) {         value = CollectionUtils.arrayToList(value).     }     this.lines.add(String.format("%17s = %s", label, value)). }
false;public;0;3;;public List<String> getLines() {     return this.lines. }
false;;1;1;;void write(List<String> lines).
false;public;1;4;;@Override public void write(List<String> lines) {     this.lines.addAll(lines). }
false;public;0;3;;public void writeDeferredResult() {     this.delegate.write(this.lines). }
false;public,static;1;8;;public static DeferredLinesWriter get(ApplicationContext applicationContext) {     try {         return applicationContext.getBean(BEAN_NAME, DeferredLinesWriter.class).     } catch (NoSuchBeanDefinitionException ex) {         return null.     } }
false;public;1;11;;@Override public void write(List<String> lines) {     if (logger.isDebugEnabled()) {         StringWriter stringWriter = new StringWriter().         PrintWriter printWriter = new PrintWriter(stringWriter).         for (String line : lines) {             printWriter.println(line).         }         logger.debug("MvcResult details:\n" + stringWriter).     } }
false;public;1;7;;@Override public void write(List<String> lines) {     PrintStream printStream = getPrintStream().     for (String line : lines) {         printStream.println(line).     } }
false;private;0;6;;private PrintStream getPrintStream() {     if (this.print == MockMvcPrint.SYSTEM_ERR) {         return System.err.     }     return System.out. }
false;protected;1;5;;@Override protected void addAdaptableBeans(ListableBeanFactory beanFactory) {     addAsRegistrationBean(beanFactory, Filter.class, new FilterRegistrationBeanAdapter()). }
false;public;3;8;;@Override public RegistrationBean createRegistrationBean(String name, Filter source, int totalNumberOfSourceBeans) {     FilterRegistrationBean<Filter> bean = new FilterRegistrationBean<>(source).     bean.setName(name).     return bean. }
