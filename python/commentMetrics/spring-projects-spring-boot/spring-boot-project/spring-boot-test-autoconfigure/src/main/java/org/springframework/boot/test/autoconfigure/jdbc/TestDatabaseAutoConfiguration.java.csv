commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Bean @ConditionalOnProperty(prefix = "spring.test.database", name = "replace", havingValue = "AUTO_CONFIGURED") @ConditionalOnMissingBean public DataSource dataSource(Environment environment) {     return new EmbeddedDataSourceFactory(environment).getEmbeddedDatabase(). }
false;public,static;0;5;;@Bean @ConditionalOnProperty(prefix = "spring.test.database", name = "replace", havingValue = "ANY", matchIfMissing = true) public static EmbeddedDataSourceBeanFactoryPostProcessor embeddedDataSourceBeanFactoryPostProcessor() {     return new EmbeddedDataSourceBeanFactoryPostProcessor(). }
false;public;1;8;;@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {     Assert.isInstanceOf(ConfigurableListableBeanFactory.class, registry, "Test Database Auto-configuration can only be " + "used with a ConfigurableListableBeanFactory").     process(registry, (ConfigurableListableBeanFactory) registry). }
false;public;1;4;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { }
false;private;2;13;;private void process(BeanDefinitionRegistry registry, ConfigurableListableBeanFactory beanFactory) {     BeanDefinitionHolder holder = getDataSourceBeanDefinition(beanFactory).     if (holder != null) {         String beanName = holder.getBeanName().         boolean primary = holder.getBeanDefinition().isPrimary().         logger.info("Replacing '" + beanName + "' DataSource bean with " + (primary ? "primary " : "") + "embedded version").         registry.removeBeanDefinition(beanName).         registry.registerBeanDefinition(beanName, createEmbeddedBeanDefinition(primary)).     } }
false;private;1;6;;private BeanDefinition createEmbeddedBeanDefinition(boolean primary) {     BeanDefinition beanDefinition = new RootBeanDefinition(EmbeddedDataSourceFactoryBean.class).     beanDefinition.setPrimary(primary).     return beanDefinition. }
false;private;1;23;;private BeanDefinitionHolder getDataSourceBeanDefinition(ConfigurableListableBeanFactory beanFactory) {     String[] beanNames = beanFactory.getBeanNamesForType(DataSource.class).     if (ObjectUtils.isEmpty(beanNames)) {         logger.warn("No DataSource beans found, " + "embedded version will not be used").         return null.     }     if (beanNames.length == 1) {         String beanName = beanNames[0].         BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName).         return new BeanDefinitionHolder(beanDefinition, beanName).     }     for (String beanName : beanNames) {         BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName).         if (beanDefinition.isPrimary()) {             return new BeanDefinitionHolder(beanDefinition, beanName).         }     }     logger.warn("No primary DataSource found, " + "embedded version will not be used").     return null. }
false;public;1;4;;@Override public void setEnvironment(Environment environment) {     this.factory = new EmbeddedDataSourceFactory(environment). }
false;public;0;4;;@Override public void afterPropertiesSet() throws Exception {     this.embeddedDatabase = this.factory.getEmbeddedDatabase(). }
false;public;0;4;;@Override public DataSource getObject() throws Exception {     return this.embeddedDatabase. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return EmbeddedDatabase.class. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;15;;public EmbeddedDatabase getEmbeddedDatabase() {     EmbeddedDatabaseConnection connection = this.environment.getProperty("spring.test.database.connection", EmbeddedDatabaseConnection.class, EmbeddedDatabaseConnection.NONE).     if (EmbeddedDatabaseConnection.NONE.equals(connection)) {         connection = EmbeddedDatabaseConnection.get(getClass().getClassLoader()).     }     Assert.state(connection != EmbeddedDatabaseConnection.NONE, "Failed to replace DataSource with an embedded database for tests. If " + "you want an embedded database please put a supported one " + "on the classpath or tune the replace attribute of " + "@AutoConfigureTestDatabase.").     return new EmbeddedDatabaseBuilder().generateUniqueName(true).setType(connection.getType()).build(). }
