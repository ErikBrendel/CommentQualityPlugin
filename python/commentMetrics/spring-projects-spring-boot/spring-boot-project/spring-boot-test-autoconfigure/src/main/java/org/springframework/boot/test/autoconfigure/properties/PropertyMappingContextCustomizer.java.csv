commented;modifiers;parameterAmount;loc;comment;code
false;public;2;10;;@Override public void customizeContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedContextConfiguration) {     if (!this.propertySource.isEmpty()) {         context.getEnvironment().getPropertySources().addFirst(this.propertySource).     }     context.getBeanFactory().registerSingleton(PropertyMappingCheckBeanPostProcessor.class.getName(), new PropertyMappingCheckBeanPostProcessor()). }
false;public;1;5;;@Override public boolean equals(Object obj) {     return (obj != null && getClass() == obj.getClass() && this.propertySource.equals(((PropertyMappingContextCustomizer) obj).propertySource)). }
false;public;0;4;;@Override public int hashCode() {     return this.propertySource.hashCode(). }
false;public;2;28;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     Class<?> beanClass = bean.getClass().     Set<Class<?>> components = new LinkedHashSet<>().     Set<Class<?>> propertyMappings = new LinkedHashSet<>().     while (beanClass != null) {         Annotation[] annotations = AnnotationUtils.getAnnotations(beanClass).         if (annotations != null) {             for (Annotation annotation : annotations) {                 if (isAnnotated(annotation, Component.class)) {                     components.add(annotation.annotationType()).                 }                 if (isAnnotated(annotation, PropertyMapping.class)) {                     propertyMappings.add(annotation.annotationType()).                 }             }         }         beanClass = beanClass.getSuperclass().     }     if (!components.isEmpty() && !propertyMappings.isEmpty()) {         throw new IllegalStateException("The @PropertyMapping " + getAnnotationsDescription(propertyMappings) + " cannot be used in combination with the @Component " + getAnnotationsDescription(components)).     }     return bean. }
false;private;2;10;;private boolean isAnnotated(Annotation element, Class<? extends Annotation> annotationType) {     try {         return element.annotationType().equals(annotationType) || AnnotationUtils.findAnnotation(element.annotationType(), annotationType) != null.     } catch (Throwable ex) {         return false.     } }
false;private;1;11;;private String getAnnotationsDescription(Set<Class<?>> annotations) {     StringBuilder result = new StringBuilder().     for (Class<?> annotation : annotations) {         if (result.length() != 0) {             result.append(", ").         }         result.append('@').append(ClassUtils.getShortName(annotation)).     }     result.insert(0, (annotations.size() != 1) ? "annotations " : "annotation ").     return result.toString(). }
false;public;2;5;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     return bean. }
