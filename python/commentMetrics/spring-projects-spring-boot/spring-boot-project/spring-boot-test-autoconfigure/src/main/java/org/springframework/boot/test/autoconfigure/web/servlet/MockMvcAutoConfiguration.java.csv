commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Bean @ConditionalOnMissingBean public DispatcherServletPath dispatcherServletPath() {     return () -> this.webMvcProperties.getServlet().getPath(). }
false;public;1;12;;@Bean @ConditionalOnMissingBean(MockMvcBuilder.class) public DefaultMockMvcBuilder mockMvcBuilder(List<MockMvcBuilderCustomizer> customizers) {     DefaultMockMvcBuilder builder = MockMvcBuilders.webAppContextSetup(this.context).     builder.addDispatcherServletCustomizer(new MockMvcDispatcherServletCustomizer(this.webMvcProperties)).     for (MockMvcBuilderCustomizer customizer : customizers) {         customizer.customize(builder).     }     return builder. }
false;public;0;5;;@Bean @ConfigurationProperties(prefix = "spring.test.mockmvc") public SpringBootMockMvcBuilderCustomizer springBootMockMvcBuilderCustomizer() {     return new SpringBootMockMvcBuilderCustomizer(this.context). }
false;public;1;5;;@Bean @ConditionalOnMissingBean public MockMvc mockMvc(MockMvcBuilder builder) {     return builder.build(). }
false;public;1;5;;@Bean @ConditionalOnMissingBean public DispatcherServlet dispatcherServlet(MockMvc mockMvc) {     return mockMvc.getDispatcherServlet(). }
false;public;1;9;;@Override public void customize(DispatcherServlet dispatcherServlet) {     dispatcherServlet.setDispatchOptionsRequest(this.webMvcProperties.isDispatchOptionsRequest()).     dispatcherServlet.setDispatchTraceRequest(this.webMvcProperties.isDispatchTraceRequest()).     dispatcherServlet.setThrowExceptionIfNoHandlerFound(this.webMvcProperties.isThrowExceptionIfNoHandlerFound()). }
