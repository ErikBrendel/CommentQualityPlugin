commented;modifiers;parameterAmount;loc;comment;code
false;public;2;11;;@Override public Object get(String name, ObjectFactory<?> objectFactory) {     synchronized (this.instances) {         Object instance = this.instances.get(name).         if (instance == null) {             instance = objectFactory.getObject().             this.instances.put(name, instance).         }         return instance.     } }
false;public;1;6;;@Override public Object remove(String name) {     synchronized (this.instances) {         return this.instances.remove(name).     } }
false;public;2;3;;@Override public void registerDestructionCallback(String name, Runnable callback) { }
false;public;1;4;;@Override public Object resolveContextualObject(String key) {     return null. }
false;public;0;4;;@Override public String getConversationId() {     return null. }
true;public;0;13;/**  * Reset all instances in the scope.  * @return {@code true} if items were reset  */ ;/**  * Reset all instances in the scope.  * @return {@code true} if items were reset  */ public boolean reset() {     boolean reset = false.     synchronized (this.instances) {         for (Object instance : this.instances.values()) {             reset = true.             if (instance instanceof WebDriver) {                 ((WebDriver) instance).quit().             }         }         this.instances.clear().     }     return reset. }
true;public,static;1;10;/**  * Register this scope with the specified context and reassign appropriate bean  * definitions to used it.  * @param context the application context  */ ;/**  * Register this scope with the specified context and reassign appropriate bean  * definitions to used it.  * @param context the application context  */ public static void registerWith(ConfigurableApplicationContext context) {     if (!ClassUtils.isPresent(WEB_DRIVER_CLASS, null)) {         return.     }     ConfigurableListableBeanFactory beanFactory = context.getBeanFactory().     if (beanFactory.getRegisteredScope(NAME) == null) {         beanFactory.registerScope(NAME, new WebDriverScope()).     }     context.addBeanFactoryPostProcessor(WebDriverScope::postProcessBeanFactory). }
false;private,static;1;12;;private static void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {     for (String beanClass : BEAN_CLASSES) {         for (String beanName : beanFactory.getBeanNamesForType(ClassUtils.resolveClassName(beanClass, null))) {             BeanDefinition definition = beanFactory.getBeanDefinition(beanName).             if (!StringUtils.hasLength(definition.getScope())) {                 definition.setScope(NAME).             }         }     } }
true;public,static;1;8;/**  * Return the {@link WebDriverScope} being used by the specified context (if any).  * @param context the application context  * @return the web driver scope or {@code null}  */ ;/**  * Return the {@link WebDriverScope} being used by the specified context (if any).  * @param context the application context  * @return the web driver scope or {@code null}  */ public static WebDriverScope getFrom(ApplicationContext context) {     if (context instanceof ConfigurableApplicationContext) {         Scope scope = ((ConfigurableApplicationContext) context).getBeanFactory().getRegisteredScope(NAME).         return (scope instanceof WebDriverScope) ? (WebDriverScope) scope : null.     }     return null. }
