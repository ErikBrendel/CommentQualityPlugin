commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void matchWhenHasNoControllers() throws Exception {     WebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithNoControllers.class).     assertThat(excludes(filter, Controller1.class)).isFalse().     assertThat(excludes(filter, Controller2.class)).isFalse().     assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse().     assertThat(excludes(filter, ExampleWeb.class)).isFalse().     assertThat(excludes(filter, ExampleService.class)).isTrue().     assertThat(excludes(filter, ExampleRepository.class)).isTrue().     assertThat(excludes(filter, ExampleServerHttpSecurity.class)).isFalse(). }
false;public;0;12;;@Test public void matchWhenHasController() throws Exception {     WebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithController.class).     assertThat(excludes(filter, Controller1.class)).isFalse().     assertThat(excludes(filter, Controller2.class)).isTrue().     assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse().     assertThat(excludes(filter, ExampleWeb.class)).isFalse().     assertThat(excludes(filter, ExampleService.class)).isTrue().     assertThat(excludes(filter, ExampleRepository.class)).isTrue().     assertThat(excludes(filter, ExampleServerHttpSecurity.class)).isFalse(). }
false;public;0;12;;@Test public void matchNotUsingDefaultFilters() throws Exception {     WebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(NotUsingDefaultFilters.class).     assertThat(excludes(filter, Controller1.class)).isTrue().     assertThat(excludes(filter, Controller2.class)).isTrue().     assertThat(excludes(filter, ExampleControllerAdvice.class)).isTrue().     assertThat(excludes(filter, ExampleWeb.class)).isTrue().     assertThat(excludes(filter, ExampleService.class)).isTrue().     assertThat(excludes(filter, ExampleRepository.class)).isTrue().     assertThat(excludes(filter, ExampleServerHttpSecurity.class)).isTrue(). }
false;public;0;12;;@Test public void matchWithIncludeFilter() throws Exception {     WebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithIncludeFilter.class).     assertThat(excludes(filter, Controller1.class)).isFalse().     assertThat(excludes(filter, Controller2.class)).isFalse().     assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse().     assertThat(excludes(filter, ExampleWeb.class)).isFalse().     assertThat(excludes(filter, ExampleService.class)).isTrue().     assertThat(excludes(filter, ExampleRepository.class)).isFalse().     assertThat(excludes(filter, ExampleServerHttpSecurity.class)).isFalse(). }
false;public;0;12;;@Test public void matchWithExcludeFilter() throws Exception {     WebFluxTypeExcludeFilter filter = new WebFluxTypeExcludeFilter(WithExcludeFilter.class).     assertThat(excludes(filter, Controller1.class)).isTrue().     assertThat(excludes(filter, Controller2.class)).isFalse().     assertThat(excludes(filter, ExampleControllerAdvice.class)).isFalse().     assertThat(excludes(filter, ExampleWeb.class)).isFalse().     assertThat(excludes(filter, ExampleService.class)).isTrue().     assertThat(excludes(filter, ExampleRepository.class)).isTrue().     assertThat(excludes(filter, ExampleServerHttpSecurity.class)).isFalse(). }
false;private;2;6;;private boolean excludes(WebFluxTypeExcludeFilter filter, Class<?> type) throws IOException {     MetadataReader metadataReader = this.metadataReaderFactory.getMetadataReader(type.getName()).     return filter.match(metadataReader, this.metadataReaderFactory). }
