commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testEntityManager() {     ExampleEntity entity = this.entities.persist(new ExampleEntity("spring", "123")).     this.entities.flush().     Object id = this.entities.getId(entity).     ExampleEntity found = this.entities.find(ExampleEntity.class, id).     assertThat(found.getName()).isEqualTo("spring"). }
false;public;0;10;;@Test public void testEntityManagerPersistAndGetId() {     Long id = this.entities.persistAndGetId(new ExampleEntity("spring", "123"), Long.class).     assertThat(id).isNotNull().     String reference = this.jdbcTemplate.queryForObject("SELECT REFERENCE FROM EXAMPLE_ENTITY WHERE ID = ?", new Object[] { id }, String.class).     assertThat(reference).isEqualTo("123"). }
false;public;0;8;;@Test public void testRepository() {     this.entities.persist(new ExampleEntity("spring", "123")).     this.entities.persist(new ExampleEntity("boot", "124")).     this.entities.flush().     ExampleEntity found = this.repository.findByReference("124").     assertThat(found.getName()).isEqualTo("boot"). }
false;public;0;6;;@Test public void replacesDefinedDataSourceWithEmbeddedDefault() throws Exception {     String product = this.dataSource.getConnection().getMetaData().getDatabaseProductName().     assertThat(product).isEqualTo("H2"). }
false;public;0;5;;@Test public void didNotInjectExampleComponent() {     assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(() -> this.applicationContext.getBean(ExampleComponent.class)). }
false;public;0;5;;@Test public void flywayAutoConfigurationWasImported() {     assertThat(this.applicationContext).has(importedAutoConfiguration(FlywayAutoConfiguration.class)). }
false;public;0;5;;@Test public void liquibaseAutoConfigurationWasImported() {     assertThat(this.applicationContext).has(importedAutoConfiguration(LiquibaseAutoConfiguration.class)). }
