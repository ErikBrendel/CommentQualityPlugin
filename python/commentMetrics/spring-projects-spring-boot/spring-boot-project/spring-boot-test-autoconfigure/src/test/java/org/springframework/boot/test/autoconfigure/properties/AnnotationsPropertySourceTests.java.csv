commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void createWhenSourceIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new AnnotationsPropertySource(null)).withMessageContaining("Property source must not be null"). }
false;public;0;7;;@Test public void propertiesWhenHasNoAnnotationShouldBeEmpty() {     AnnotationsPropertySource source = new AnnotationsPropertySource(NoAnnotation.class).     assertThat(source.getPropertyNames()).isEmpty().     assertThat(source.getProperty("value")).isNull(). }
false;public;0;6;;@Test public void propertiesWhenHasTypeLevelAnnotationShouldUseAttributeName() {     AnnotationsPropertySource source = new AnnotationsPropertySource(TypeLevel.class).     assertThat(source.getPropertyNames()).containsExactly("value").     assertThat(source.getProperty("value")).isEqualTo("abc"). }
false;public;0;7;;@Test public void propertiesWhenHasTypeLevelWithPrefixShouldUsePrefixedName() {     AnnotationsPropertySource source = new AnnotationsPropertySource(TypeLevelWithPrefix.class).     assertThat(source.getPropertyNames()).containsExactly("test.value").     assertThat(source.getProperty("test.value")).isEqualTo("abc"). }
false;public;0;7;;@Test public void propertiesWhenHasAttributeLevelWithPrefixShouldUsePrefixedName() {     AnnotationsPropertySource source = new AnnotationsPropertySource(AttributeLevelWithPrefix.class).     assertThat(source.getPropertyNames()).containsExactly("test").     assertThat(source.getProperty("test")).isEqualTo("abc"). }
false;public;0;7;;@Test public void propertiesWhenHasTypeAndAttributeLevelWithPrefixShouldUsePrefixedName() {     AnnotationsPropertySource source = new AnnotationsPropertySource(TypeAndAttributeLevelWithPrefix.class).     assertThat(source.getPropertyNames()).containsExactly("test.example").     assertThat(source.getProperty("test.example")).isEqualTo("abc"). }
false;public;0;7;;@Test public void propertiesWhenNotMappedAtTypeLevelShouldIgnoreAttributes() {     AnnotationsPropertySource source = new AnnotationsPropertySource(NotMappedAtTypeLevel.class).     assertThat(source.getPropertyNames()).containsExactly("value").     assertThat(source.getProperty("ignore")).isNull(). }
false;public;0;7;;@Test public void propertiesWhenNotMappedAtAttributeLevelShouldIgnoreAttributes() {     AnnotationsPropertySource source = new AnnotationsPropertySource(NotMappedAtAttributeLevel.class).     assertThat(source.getPropertyNames()).containsExactly("value").     assertThat(source.getProperty("ignore")).isNull(). }
false;public;0;22;;@Test public void propertiesWhenContainsArraysShouldExpandNames() {     AnnotationsPropertySource source = new AnnotationsPropertySource(Arrays.class).     assertThat(source.getPropertyNames()).contains("strings[0]", "strings[1]", "classes[0]", "classes[1]", "ints[0]", "ints[1]", "longs[0]", "longs[1]", "floats[0]", "floats[1]", "doubles[0]", "doubles[1]", "booleans[0]", "booleans[1]").     assertThat(source.getProperty("strings[0]")).isEqualTo("a").     assertThat(source.getProperty("strings[1]")).isEqualTo("b").     assertThat(source.getProperty("classes[0]")).isEqualTo(Integer.class).     assertThat(source.getProperty("classes[1]")).isEqualTo(Long.class).     assertThat(source.getProperty("ints[0]")).isEqualTo(1).     assertThat(source.getProperty("ints[1]")).isEqualTo(2).     assertThat(source.getProperty("longs[0]")).isEqualTo(1L).     assertThat(source.getProperty("longs[1]")).isEqualTo(2L).     assertThat(source.getProperty("floats[0]")).isEqualTo(1.0f).     assertThat(source.getProperty("floats[1]")).isEqualTo(2.0f).     assertThat(source.getProperty("doubles[0]")).isEqualTo(1.0).     assertThat(source.getProperty("doubles[1]")).isEqualTo(2.0).     assertThat(source.getProperty("booleans[0]")).isEqualTo(false).     assertThat(source.getProperty("booleans[1]")).isEqualTo(true). }
false;public;0;6;;@Test public void propertiesWhenHasCamelCaseShouldConvertToKebabCase() {     AnnotationsPropertySource source = new AnnotationsPropertySource(CamelCaseToKebabCase.class).     assertThat(source.getPropertyNames()).contains("camel-case-to-kebab-case"). }
false;public;0;7;;@Test public void propertiesFromMetaAnnotationsAreMapped() {     AnnotationsPropertySource source = new AnnotationsPropertySource(PropertiesFromSingleMetaAnnotation.class).     assertThat(source.getPropertyNames()).containsExactly("value").     assertThat(source.getProperty("value")).isEqualTo("foo"). }
false;public;0;10;;@Test public void propertiesFromMultipleMetaAnnotationsAreMappedUsingTheirOwnPropertyMapping() {     AnnotationsPropertySource source = new AnnotationsPropertySource(PropertiesFromMultipleMetaAnnotations.class).     assertThat(source.getPropertyNames()).containsExactly("value", "test.value", "test.example").     assertThat(source.getProperty("value")).isEqualTo("alpha").     assertThat(source.getProperty("test.value")).isEqualTo("bravo").     assertThat(source.getProperty("test.example")).isEqualTo("charlie"). }
false;public;0;7;;@Test public void propertyMappedAttributesCanBeAliased() {     AnnotationsPropertySource source = new AnnotationsPropertySource(PropertyMappedAttributeWithAnAlias.class).     assertThat(source.getPropertyNames()).containsExactly("aliasing.value").     assertThat(source.getProperty("aliasing.value")).isEqualTo("baz"). }
false;public;0;4;;@Test public void selfAnnotatingAnnotationDoesNotCauseStackOverflow() {     new AnnotationsPropertySource(PropertyMappedWithSelfAnnotatingAnnotation.class). }
false;public;0;7;;@Test public void typeLevelAnnotationOnSuperClass() {     AnnotationsPropertySource source = new AnnotationsPropertySource(PropertyMappedAnnotationOnSuperClass.class).     assertThat(source.getPropertyNames()).containsExactly("value").     assertThat(source.getProperty("value")).isEqualTo("abc"). }
false;public;0;7;;@Test public void aliasedPropertyMappedAttributeOnSuperClass() {     AnnotationsPropertySource source = new AnnotationsPropertySource(AliasedPropertyMappedAnnotationOnSuperClass.class).     assertThat(source.getPropertyNames()).containsExactly("aliasing.value").     assertThat(source.getProperty("aliasing.value")).isEqualTo("baz"). }
false;public;0;6;;@Test public void enumValueMapped() {     AnnotationsPropertySource source = new AnnotationsPropertySource(EnumValueMapped.class).     assertThat(source.getProperty("testenum.value")).isEqualTo(EnumItem.TWO). }
false;public;0;6;;@Test public void enumValueNotMapped() {     AnnotationsPropertySource source = new AnnotationsPropertySource(EnumValueNotMapped.class).     assertThat(source.containsProperty("testenum.value")).isFalse(). }
