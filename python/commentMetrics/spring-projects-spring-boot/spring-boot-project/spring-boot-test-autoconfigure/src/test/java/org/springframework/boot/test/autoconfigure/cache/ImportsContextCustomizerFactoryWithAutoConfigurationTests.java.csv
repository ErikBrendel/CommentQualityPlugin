commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testClassesThatHaveSameAnnotationsShareAContext() throws InitializationError {     RunNotifier notifier = new RunNotifier().     new SpringJUnit4ClassRunner(DataJpaTest1.class).run(notifier).     ApplicationContext test1Context = contextFromTest.     new SpringJUnit4ClassRunner(DataJpaTest3.class).run(notifier).     ApplicationContext test2Context = contextFromTest.     assertThat(test1Context).isSameAs(test2Context). }
false;public;0;10;;@Test public void testClassesThatOnlyHaveDifferingUnrelatedAnnotationsShareAContext() throws InitializationError {     RunNotifier notifier = new RunNotifier().     new SpringJUnit4ClassRunner(DataJpaTest1.class).run(notifier).     ApplicationContext test1Context = contextFromTest.     new SpringJUnit4ClassRunner(DataJpaTest2.class).run(notifier).     ApplicationContext test2Context = contextFromTest.     assertThat(test1Context).isSameAs(test2Context). }
false;public;0;10;;@Test public void testClassesThatOnlyHaveDifferingPropertyMappedAnnotationAttributesDoNotShareAContext() throws InitializationError {     RunNotifier notifier = new RunNotifier().     new SpringJUnit4ClassRunner(DataJpaTest1.class).run(notifier).     ApplicationContext test1Context = contextFromTest.     new SpringJUnit4ClassRunner(DataJpaTest4.class).run(notifier).     ApplicationContext test2Context = contextFromTest.     assertThat(test1Context).isNotSameAs(test2Context). }
false;public;0;4;;@Test public void test() {     contextFromTest = this.context. }
false;public;0;4;;@Test public void test() {     contextFromTest = this.context. }
false;public;0;4;;@Test public void test() {     contextFromTest = this.context. }
false;public;0;4;;@Test public void test() {     contextFromTest = this.context. }
