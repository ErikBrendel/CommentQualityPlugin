commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Set the listener that will be registered.  * @param listener the listener to register  */ ;/**  * Set the listener that will be registered.  * @param listener the listener to register  */ public void setListener(T listener) {     Assert.notNull(listener, "Listener must not be null").     Assert.isTrue(isSupportedType(listener), "Listener is not of a supported type").     this.listener = listener. }
true;public;0;3;/**  * Return the listener to be registered.  * @return the listener to be registered  */ ;/**  * Return the listener to be registered.  * @return the listener to be registered  */ public T getListener() {     return this.listener. }
false;protected;0;5;;@Override protected String getDescription() {     Assert.notNull(this.listener, "Listener must not be null").     return "listener " + this.listener. }
false;protected;2;11;;@Override protected void register(String description, ServletContext servletContext) {     try {         servletContext.addListener(this.listener).     } catch (RuntimeException ex) {         throw new IllegalStateException("Failed to add listener '" + this.listener + "' to servlet context", ex).     } }
true;public,static;1;8;/**  * Returns {@code true} if the specified listener is one of the supported types.  * @param listener the listener to test  * @return if the listener is of a supported type  */ ;/**  * Returns {@code true} if the specified listener is one of the supported types.  * @param listener the listener to test  * @return if the listener is of a supported type  */ public static boolean isSupportedType(EventListener listener) {     for (Class<?> type : SUPPORTED_TYPES) {         if (ClassUtils.isAssignableValue(type, listener)) {             return true.         }     }     return false. }
true;public,static;0;3;/**  * Return the supported types for this registration.  * @return the supported types  */ ;/**  * Return the supported types for this registration.  * @return the supported types  */ public static Set<Class<?>> getSupportedTypes() {     return SUPPORTED_TYPES. }
