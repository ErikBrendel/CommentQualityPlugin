commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void setBeanFactory(BeanFactory beanFactory) {     Assert.isInstanceOf(ListableBeanFactory.class, beanFactory, "WebServerCustomizerBeanPostProcessor can only be used " + "with a ListableBeanFactory").     this.beanFactory = (ListableBeanFactory) beanFactory. }
false;public;2;8;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     if (bean instanceof WebServerFactory) {         postProcessBeforeInitialization((WebServerFactory) bean).     }     return bean. }
false;public;2;5;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     return bean. }
false;private;1;8;;@SuppressWarnings("unchecked") private void postProcessBeforeInitialization(WebServerFactory webServerFactory) {     LambdaSafe.callbacks(WebServerFactoryCustomizer.class, getCustomizers(), webServerFactory).withLogger(WebServerFactoryCustomizerBeanPostProcessor.class).invoke((customizer) -> customizer.customize(webServerFactory)). }
false;private;0;9;;private Collection<WebServerFactoryCustomizer<?>> getCustomizers() {     if (this.customizers == null) {         // Look up does not include the parent context         this.customizers = new ArrayList<>(getWebServerFactoryCustomizerBeans()).         this.customizers.sort(AnnotationAwareOrderComparator.INSTANCE).         this.customizers = Collections.unmodifiableList(this.customizers).     }     return this.customizers. }
false;private;0;5;;@SuppressWarnings({ "unchecked", "rawtypes" }) private Collection<WebServerFactoryCustomizer<?>> getWebServerFactoryCustomizerBeans() {     return (Collection) this.beanFactory.getBeansOfType(WebServerFactoryCustomizer.class, false, false).values(). }
