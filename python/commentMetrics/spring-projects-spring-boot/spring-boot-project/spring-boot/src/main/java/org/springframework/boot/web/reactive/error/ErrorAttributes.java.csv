commented;modifiers;parameterAmount;loc;comment;code
true;;2;2;/**  * Return a {@link Map} of the error attributes. The map can be used as the model of  * an error page, or returned as a {@link ServerResponse} body.  * @param request the source request  * @param includeStackTrace if stack trace elements should be included  * @return a map of error attributes  */ ;/**  * Return a {@link Map} of the error attributes. The map can be used as the model of  * an error page, or returned as a {@link ServerResponse} body.  * @param request the source request  * @param includeStackTrace if stack trace elements should be included  * @return a map of error attributes  */ Map<String, Object> getErrorAttributes(ServerRequest request, boolean includeStackTrace).
true;;1;1;/**  * Return the underlying cause of the error or {@code null} if the error cannot be  * extracted.  * @param request the source ServerRequest  * @return the {@link Exception} that caused the error or {@code null}  */ ;/**  * Return the underlying cause of the error or {@code null} if the error cannot be  * extracted.  * @param request the source ServerRequest  * @return the {@link Exception} that caused the error or {@code null}  */ Throwable getError(ServerRequest request).
true;;2;1;/**  * Store the given error information in the current {@link ServerWebExchange}.  * @param error the {@link Exception} that caused the error  * @param exchange the source exchange  */ ;/**  * Store the given error information in the current {@link ServerWebExchange}.  * @param error the {@link Exception} that caused the error  * @param exchange the source exchange  */ void storeErrorInformation(Throwable error, ServerWebExchange exchange).
