commented;modifiers;parameterAmount;loc;comment;code
false;private;0;11;;private void assertEnumerablePropertySource() {     if (getPropertySource() instanceof MapPropertySource) {         try {             ((MapPropertySource) getPropertySource()).getSource().size().         } catch (UnsupportedOperationException ex) {             throw new IllegalArgumentException("PropertySource must be fully enumerable").         }     } }
false;public;1;10;;@Override public ConfigurationProperty getConfigurationProperty(ConfigurationPropertyName name) {     ConfigurationProperty configurationProperty = super.getConfigurationProperty(name).     if (configurationProperty == null) {         configurationProperty = find(getPropertyMappings(getCache()), name).     }     return configurationProperty. }
false;public;0;4;;@Override public Stream<ConfigurationPropertyName> stream() {     return getConfigurationPropertyNames().stream(). }
false;public;0;4;;@Override public Iterator<ConfigurationPropertyName> iterator() {     return getConfigurationPropertyNames().iterator(). }
false;public;1;5;;@Override public ConfigurationPropertyState containsDescendantOf(ConfigurationPropertyName name) {     return ConfigurationPropertyState.search(this, name::isAncestorOf). }
false;private;0;17;;private List<ConfigurationPropertyName> getConfigurationPropertyNames() {     Cache cache = getCache().     List<ConfigurationPropertyName> names = (cache != null) ? cache.getNames() : null.     if (names != null) {         return names.     }     PropertyMapping[] mappings = getPropertyMappings(cache).     names = new ArrayList<>(mappings.length).     for (PropertyMapping mapping : mappings) {         names.add(mapping.getConfigurationPropertyName()).     }     names = Collections.unmodifiableList(names).     if (cache != null) {         cache.setNames(names).     }     return names. }
false;private;1;18;;private PropertyMapping[] getPropertyMappings(Cache cache) {     PropertyMapping[] result = (cache != null) ? cache.getMappings() : null.     if (result != null) {         return result.     }     String[] names = getPropertySource().getPropertyNames().     List<PropertyMapping> mappings = new ArrayList<>(names.length * 2).     for (String name : names) {         for (PropertyMapping mapping : getMapper().map(name)) {             mappings.add(mapping).         }     }     result = mappings.toArray(new PropertyMapping[0]).     if (cache != null) {         cache.setMappings(result).     }     return result. }
false;private;0;9;;private Cache getCache() {     CacheKey cacheKey = CacheKey.get(getPropertySource()).     if (ObjectUtils.nullSafeEquals(cacheKey, this.cacheKey)) {         return this.cache.     }     this.cache = new Cache().     this.cacheKey = cacheKey.copy().     return this.cache. }
false;protected;0;4;;@Override protected EnumerablePropertySource<?> getPropertySource() {     return (EnumerablePropertySource<?>) super.getPropertySource(). }
false;public;0;3;;public List<ConfigurationPropertyName> getNames() {     return this.names. }
false;public;1;3;;public void setNames(List<ConfigurationPropertyName> names) {     this.names = names. }
false;public;0;3;;public PropertyMapping[] getMappings() {     return this.mappings. }
false;public;1;3;;public void setMappings(PropertyMapping[] mappings) {     this.mappings = mappings. }
false;public;0;3;;public CacheKey copy() {     return new CacheKey(copyKey(this.key)). }
false;private;1;6;;private Object copyKey(Object key) {     if (key instanceof Set) {         return new HashSet<Object>((Set<?>) key).     }     return ((String[]) key).clone(). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     return ObjectUtils.nullSafeEquals(this.key, ((CacheKey) obj).key). }
false;public;0;4;;@Override public int hashCode() {     return this.key.hashCode(). }
false;public,static;1;6;;public static CacheKey get(EnumerablePropertySource<?> source) {     if (source instanceof MapPropertySource) {         return new CacheKey(((MapPropertySource) source).getSource().keySet()).     }     return new CacheKey(source.getPropertyNames()). }
