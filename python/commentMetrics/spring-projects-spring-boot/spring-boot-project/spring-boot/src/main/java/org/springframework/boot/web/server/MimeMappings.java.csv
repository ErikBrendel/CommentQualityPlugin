commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Iterator<Mapping> iterator() {     return getAll().iterator(). }
true;public;0;3;/**  * Returns all defined mappings.  * @return the mappings.  */ ;/**  * Returns all defined mappings.  * @return the mappings.  */ public Collection<Mapping> getAll() {     return this.map.values(). }
true;public;2;4;/**  * Add a new mime mapping.  * @param extension the file extension (excluding '.')  * @param mimeType the mime type to map  * @return any previous mapping or {@code null}  */ ;/**  * Add a new mime mapping.  * @param extension the file extension (excluding '.')  * @param mimeType the mime type to map  * @return any previous mapping or {@code null}  */ public String add(String extension, String mimeType) {     Mapping previous = this.map.put(extension, new Mapping(extension, mimeType)).     return (previous != null) ? previous.getMimeType() : null. }
true;public;1;4;/**  * Get a mime mapping for the given extension.  * @param extension the file extension (excluding '.')  * @return a mime mapping or {@code null}  */ ;/**  * Get a mime mapping for the given extension.  * @param extension the file extension (excluding '.')  * @return a mime mapping or {@code null}  */ public String get(String extension) {     Mapping mapping = this.map.get(extension).     return (mapping != null) ? mapping.getMimeType() : null. }
true;public;1;4;/**  * Remove an existing mapping.  * @param extension the file extension (excluding '.')  * @return the removed mime mapping or {@code null} if no item was removed  */ ;/**  * Remove an existing mapping.  * @param extension the file extension (excluding '.')  * @return the removed mime mapping or {@code null} if no item was removed  */ public String remove(String extension) {     Mapping previous = this.map.remove(extension).     return (previous != null) ? previous.getMimeType() : null. }
false;public;1;14;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj == this) {         return true.     }     if (obj instanceof MimeMappings) {         MimeMappings other = (MimeMappings) obj.         return this.map.equals(other.map).     }     return false. }
false;public;0;4;;@Override public int hashCode() {     return this.map.hashCode(). }
true;public,static;1;3;/**  * Create a new unmodifiable view of the specified mapping. Methods that attempt to  * modify the returned map will throw {@link UnsupportedOperationException}s.  * @param mappings the mappings  * @return an unmodifiable view of the specified mappings.  */ ;/**  * Create a new unmodifiable view of the specified mapping. Methods that attempt to  * modify the returned map will throw {@link UnsupportedOperationException}s.  * @param mappings the mappings  * @return an unmodifiable view of the specified mappings.  */ public static MimeMappings unmodifiableMappings(MimeMappings mappings) {     return new MimeMappings(mappings, false). }
false;public;0;3;;public String getExtension() {     return this.extension. }
false;public;0;3;;public String getMimeType() {     return this.mimeType. }
false;public;1;15;;@Override public boolean equals(Object obj) {     if (obj == null) {         return false.     }     if (obj == this) {         return true.     }     if (obj instanceof Mapping) {         Mapping other = (Mapping) obj.         return this.extension.equals(other.extension) && this.mimeType.equals(other.mimeType).     }     return false. }
false;public;0;4;;@Override public int hashCode() {     return this.extension.hashCode(). }
false;public;0;5;;@Override public String toString() {     return "Mapping [extension=" + this.extension + ", mimeType=" + this.mimeType + "]". }
