# id;timestamp;commentText;codeText;commentWords;codeWords
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1507173536;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, Function.identity())__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,function,identity
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1514004947;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, Function.identity())__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,function,identity
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1515257429;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, Function.identity())__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,function,identity
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1517593684;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, Function.identity())__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,function,identity
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1517626745;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, Function.identity())__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,function,identity
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1519362690;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, Function.identity())__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,function,identity
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1525416882;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, Function.identity())__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,function,identity
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1532738143;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, Function.identity())__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,function,identity
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1532852936;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, Function.identity())__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,function,identity
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1533106089;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, Function.identity())__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,function,identity
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1534881387;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, Function.identity())__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,function,identity
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1537507626;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, null)__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,null
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1538514022;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, null)__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,null
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1542318500;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, null)__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,null
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1548675274;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, null)__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,null
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator);1548675624;Create a {@link ConfigurationPropertyName} by adapting the given source. See_{@link #adapt(CharSequence, char, Function)} for details._@param name the name to parse_@param separator the separator used to split the name_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator) {_		return adapt(name, separator, null)__	};create,a,link,configuration,property,name,by,adapting,the,given,source,see,link,adapt,char,sequence,char,function,for,details,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,return,adapt,name,separator,null
ConfigurationPropertyName -> static ConfigurationPropertyName of(CharSequence name, boolean returnNullIfInvalid);1537507626;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@param returnNullIfInvalid if null should be returned if the name is not valid_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid and_{@code returnNullIfInvalid} is {@code false};static ConfigurationPropertyName of(CharSequence name, boolean returnNullIfInvalid) {_		if (name == null) {_			Assert.isTrue(returnNullIfInvalid, "Name must not be null")__			return null__		}_		if (name.length() == 0) {_			return EMPTY__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			if (returnNullIfInvalid) {_				return null__			}_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		Elements elements = new ElementsParser(name, '.').parse()__		for (int i = 0_ i < elements.getSize()_ i++) {_			if (elements.getType(i) == ElementType.NON_UNIFORM) {_				if (returnNullIfInvalid) {_					return null__				}_				throw new InvalidConfigurationPropertyNameException(name,_						getInvalidChars(elements, i))__			}_		}_		return new ConfigurationPropertyName(elements)__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,param,return,null,if,invalid,if,null,should,be,returned,if,the,name,is,not,valid,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid,and,code,return,null,if,invalid,is,code,false;static,configuration,property,name,of,char,sequence,name,boolean,return,null,if,invalid,if,name,null,assert,is,true,return,null,if,invalid,name,must,not,be,null,return,null,if,name,length,0,return,empty,if,name,char,at,0,name,char,at,name,length,1,if,return,null,if,invalid,return,null,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,elements,elements,new,elements,parser,name,parse,for,int,i,0,i,elements,get,size,i,if,elements,get,type,i,element,type,if,return,null,if,invalid,return,null,throw,new,invalid,configuration,property,name,exception,name,get,invalid,chars,elements,i,return,new,configuration,property,name,elements
ConfigurationPropertyName -> static ConfigurationPropertyName of(CharSequence name, boolean returnNullIfInvalid);1538514022;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@param returnNullIfInvalid if null should be returned if the name is not valid_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid and_{@code returnNullIfInvalid} is {@code false};static ConfigurationPropertyName of(CharSequence name, boolean returnNullIfInvalid) {_		if (name == null) {_			Assert.isTrue(returnNullIfInvalid, "Name must not be null")__			return null__		}_		if (name.length() == 0) {_			return EMPTY__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			if (returnNullIfInvalid) {_				return null__			}_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		Elements elements = new ElementsParser(name, '.').parse()__		for (int i = 0_ i < elements.getSize()_ i++) {_			if (elements.getType(i) == ElementType.NON_UNIFORM) {_				if (returnNullIfInvalid) {_					return null__				}_				throw new InvalidConfigurationPropertyNameException(name,_						getInvalidChars(elements, i))__			}_		}_		return new ConfigurationPropertyName(elements)__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,param,return,null,if,invalid,if,null,should,be,returned,if,the,name,is,not,valid,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid,and,code,return,null,if,invalid,is,code,false;static,configuration,property,name,of,char,sequence,name,boolean,return,null,if,invalid,if,name,null,assert,is,true,return,null,if,invalid,name,must,not,be,null,return,null,if,name,length,0,return,empty,if,name,char,at,0,name,char,at,name,length,1,if,return,null,if,invalid,return,null,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,elements,elements,new,elements,parser,name,parse,for,int,i,0,i,elements,get,size,i,if,elements,get,type,i,element,type,if,return,null,if,invalid,return,null,throw,new,invalid,configuration,property,name,exception,name,get,invalid,chars,elements,i,return,new,configuration,property,name,elements
ConfigurationPropertyName -> static ConfigurationPropertyName of(CharSequence name, boolean returnNullIfInvalid);1542318500;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@param returnNullIfInvalid if null should be returned if the name is not valid_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid and_{@code returnNullIfInvalid} is {@code false};static ConfigurationPropertyName of(CharSequence name, boolean returnNullIfInvalid) {_		if (name == null) {_			Assert.isTrue(returnNullIfInvalid, "Name must not be null")__			return null__		}_		if (name.length() == 0) {_			return EMPTY__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			if (returnNullIfInvalid) {_				return null__			}_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		Elements elements = new ElementsParser(name, '.').parse()__		for (int i = 0_ i < elements.getSize()_ i++) {_			if (elements.getType(i) == ElementType.NON_UNIFORM) {_				if (returnNullIfInvalid) {_					return null__				}_				throw new InvalidConfigurationPropertyNameException(name,_						getInvalidChars(elements, i))__			}_		}_		return new ConfigurationPropertyName(elements)__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,param,return,null,if,invalid,if,null,should,be,returned,if,the,name,is,not,valid,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid,and,code,return,null,if,invalid,is,code,false;static,configuration,property,name,of,char,sequence,name,boolean,return,null,if,invalid,if,name,null,assert,is,true,return,null,if,invalid,name,must,not,be,null,return,null,if,name,length,0,return,empty,if,name,char,at,0,name,char,at,name,length,1,if,return,null,if,invalid,return,null,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,elements,elements,new,elements,parser,name,parse,for,int,i,0,i,elements,get,size,i,if,elements,get,type,i,element,type,if,return,null,if,invalid,return,null,throw,new,invalid,configuration,property,name,exception,name,get,invalid,chars,elements,i,return,new,configuration,property,name,elements
ConfigurationPropertyName -> static ConfigurationPropertyName of(CharSequence name, boolean returnNullIfInvalid);1548675274;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@param returnNullIfInvalid if null should be returned if the name is not valid_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid and_{@code returnNullIfInvalid} is {@code false};static ConfigurationPropertyName of(CharSequence name, boolean returnNullIfInvalid) {_		Elements elements = elementsOf(name, returnNullIfInvalid)__		return (elements != null) ? new ConfigurationPropertyName(elements) : null__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,param,return,null,if,invalid,if,null,should,be,returned,if,the,name,is,not,valid,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid,and,code,return,null,if,invalid,is,code,false;static,configuration,property,name,of,char,sequence,name,boolean,return,null,if,invalid,elements,elements,elements,of,name,return,null,if,invalid,return,elements,null,new,configuration,property,name,elements,null
ConfigurationPropertyName -> static ConfigurationPropertyName of(CharSequence name, boolean returnNullIfInvalid);1548675624;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@param returnNullIfInvalid if null should be returned if the name is not valid_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid and_{@code returnNullIfInvalid} is {@code false};static ConfigurationPropertyName of(CharSequence name, boolean returnNullIfInvalid) {_		Elements elements = elementsOf(name, returnNullIfInvalid)__		return (elements != null) ? new ConfigurationPropertyName(elements) : null__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,param,return,null,if,invalid,if,null,should,be,returned,if,the,name,is,not,valid,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid,and,code,return,null,if,invalid,is,code,false;static,configuration,property,name,of,char,sequence,name,boolean,return,null,if,invalid,elements,elements,elements,of,name,return,null,if,invalid,return,elements,null,new,configuration,property,name,elements,null
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1507173536;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() >= 1_				&& (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.')) {_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>(10)__		process(name, '.', (elementValue, start, end, indexed) -> {_			if (elementValue.length() > 0) {_				if (!indexed) {_					InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(name,_							ElementValidator.getInvalidChars(elementValue))__				}_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(_				elements.toArray(new CharSequence[elements.size()]))__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,assert,not,null,name,name,must,not,be,null,if,name,length,1,name,char,at,0,name,char,at,name,length,1,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,10,process,name,element,value,start,end,indexed,if,element,value,length,0,if,indexed,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,name,element,validator,get,invalid,chars,element,value,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,elements,size
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1514004947;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() >= 1_				&& (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.')) {_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>(10)__		process(name, '.', (elementValue, start, end, indexed) -> {_			if (elementValue.length() > 0) {_				if (!indexed) {_					InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(name,_							ElementValidator.getInvalidChars(elementValue))__				}_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(_				elements.toArray(new CharSequence[elements.size()]))__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,assert,not,null,name,name,must,not,be,null,if,name,length,1,name,char,at,0,name,char,at,name,length,1,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,10,process,name,element,value,start,end,indexed,if,element,value,length,0,if,indexed,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,name,element,validator,get,invalid,chars,element,value,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,elements,size
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1515257429;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() >= 1_				&& (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.')) {_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>(10)__		process(name, '.', (elementValue, start, end, indexed) -> {_			if (elementValue.length() > 0) {_				if (!indexed) {_					InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(name,_							ElementValidator.getInvalidChars(elementValue))__				}_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(_				elements.toArray(new CharSequence[elements.size()]))__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,assert,not,null,name,name,must,not,be,null,if,name,length,1,name,char,at,0,name,char,at,name,length,1,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,10,process,name,element,value,start,end,indexed,if,element,value,length,0,if,indexed,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,name,element,validator,get,invalid,chars,element,value,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,elements,size
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1517593684;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() >= 1_				&& (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.')) {_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>(10)__		process(name, '.', (elementValue, start, end, indexed) -> {_			if (elementValue.length() > 0) {_				if (!indexed) {_					InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(name,_							ElementValidator.getInvalidChars(elementValue))__				}_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(_				elements.toArray(new CharSequence[elements.size()]))__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,assert,not,null,name,name,must,not,be,null,if,name,length,1,name,char,at,0,name,char,at,name,length,1,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,10,process,name,element,value,start,end,indexed,if,element,value,length,0,if,indexed,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,name,element,validator,get,invalid,chars,element,value,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,elements,size
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1517626745;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() >= 1_				&& (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.')) {_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>(10)__		process(name, '.', (elementValue, start, end, indexed) -> {_			if (elementValue.length() > 0) {_				if (!indexed) {_					InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(name,_							ElementValidator.getInvalidChars(elementValue))__				}_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(_				elements.toArray(new CharSequence[elements.size()]))__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,assert,not,null,name,name,must,not,be,null,if,name,length,1,name,char,at,0,name,char,at,name,length,1,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,10,process,name,element,value,start,end,indexed,if,element,value,length,0,if,indexed,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,name,element,validator,get,invalid,chars,element,value,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,elements,size
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1519362690;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() >= 1_				&& (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.')) {_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>(10)__		process(name, '.', (elementValue, start, end, indexed) -> {_			if (elementValue.length() > 0) {_				if (!indexed) {_					InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(name,_							ElementValidator.getInvalidChars(elementValue))__				}_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(elements.toArray(new CharSequence[0]))__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,assert,not,null,name,name,must,not,be,null,if,name,length,1,name,char,at,0,name,char,at,name,length,1,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,10,process,name,element,value,start,end,indexed,if,element,value,length,0,if,indexed,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,name,element,validator,get,invalid,chars,element,value,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,0
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1525416882;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() >= 1_				&& (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.')) {_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>(10)__		process(name, '.', (elementValue, start, end, indexed) -> {_			if (elementValue.length() > 0) {_				if (!indexed) {_					InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(name,_							ElementValidator.getInvalidChars(elementValue))__				}_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(elements.toArray(new CharSequence[0]))__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,assert,not,null,name,name,must,not,be,null,if,name,length,1,name,char,at,0,name,char,at,name,length,1,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,10,process,name,element,value,start,end,indexed,if,element,value,length,0,if,indexed,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,name,element,validator,get,invalid,chars,element,value,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,0
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1532738143;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() >= 1_				&& (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.')) {_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>(10)__		process(name, '.', (elementValue, start, end, indexed) -> {_			if (elementValue.length() > 0) {_				if (!indexed) {_					InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(name,_							ElementValidator.getInvalidChars(elementValue))__				}_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(elements.toArray(new CharSequence[0]))__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,assert,not,null,name,name,must,not,be,null,if,name,length,1,name,char,at,0,name,char,at,name,length,1,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,10,process,name,element,value,start,end,indexed,if,element,value,length,0,if,indexed,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,name,element,validator,get,invalid,chars,element,value,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,0
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1532852936;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() >= 1_				&& (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.')) {_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>(10)__		process(name, '.', (elementValue, start, end, indexed) -> {_			if (elementValue.length() > 0) {_				if (!indexed) {_					InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(name,_							ElementValidator.getInvalidChars(elementValue))__				}_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(elements.toArray(new CharSequence[0]))__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,assert,not,null,name,name,must,not,be,null,if,name,length,1,name,char,at,0,name,char,at,name,length,1,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,10,process,name,element,value,start,end,indexed,if,element,value,length,0,if,indexed,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,name,element,validator,get,invalid,chars,element,value,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,0
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1533106089;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() >= 1_				&& (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.')) {_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>(10)__		process(name, '.', (elementValue, start, end, indexed) -> {_			if (elementValue.length() > 0) {_				if (!indexed) {_					InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(name,_							ElementValidator.getInvalidChars(elementValue))__				}_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(elements.toArray(new CharSequence[0]))__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,assert,not,null,name,name,must,not,be,null,if,name,length,1,name,char,at,0,name,char,at,name,length,1,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,10,process,name,element,value,start,end,indexed,if,element,value,length,0,if,indexed,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,name,element,validator,get,invalid,chars,element,value,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,0
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1534881387;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() >= 1_				&& (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.')) {_			throw new InvalidConfigurationPropertyNameException(name,_					Collections.singletonList('.'))__		}_		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>(10)__		process(name, '.', (elementValue, start, end, indexed) -> {_			if (elementValue.length() > 0) {_				if (!indexed) {_					InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(name,_							ElementValidator.getInvalidChars(elementValue))__				}_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(elements.toArray(new CharSequence[0]))__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,assert,not,null,name,name,must,not,be,null,if,name,length,1,name,char,at,0,name,char,at,name,length,1,throw,new,invalid,configuration,property,name,exception,name,collections,singleton,list,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,10,process,name,element,value,start,end,indexed,if,element,value,length,0,if,indexed,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,name,element,validator,get,invalid,chars,element,value,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,0
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1537507626;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		return of(name, false)__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,return,of,name,false
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1538514022;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		return of(name, false)__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,return,of,name,false
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1542318500;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		return of(name, false)__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,return,of,name,false
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1548675274;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		return of(name, false)__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,return,of,name,false
ConfigurationPropertyName -> public static ConfigurationPropertyName of(CharSequence name);1548675624;Return a {@link ConfigurationPropertyName} for the specified string._@param name the source name_@return a {@link ConfigurationPropertyName} instance_@throws InvalidConfigurationPropertyNameException if the name is not valid;public static ConfigurationPropertyName of(CharSequence name) {_		return of(name, false)__	};return,a,link,configuration,property,name,for,the,specified,string,param,name,the,source,name,return,a,link,configuration,property,name,instance,throws,invalid,configuration,property,name,exception,if,the,name,is,not,valid;public,static,configuration,property,name,of,char,sequence,name,return,of,name,false
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1507173536;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1514004947;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1515257429;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1517593684;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1517626745;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1519362690;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1525416882;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1532738143;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1532852936;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1533106089;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1534881387;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1537507626;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1538514022;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1542318500;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1548675274;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public boolean isParentOf(ConfigurationPropertyName name);1548675624;Returns {@code true} if this element is an immediate parent of the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isParentOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() != name.getNumberOfElements() - 1) {_			return false__		}_		return isAncestorOf(name)__	};returns,code,true,if,this,element,is,an,immediate,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,parent,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,1,return,false,return,is,ancestor,of,name
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1507173536;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		if (name == null) {_			return false__		}_		if (name.equals(EMPTY_STRING)) {_			return true__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			return false__		}_		ElementValidator validator = new ElementValidator()__		process(name, '.', validator)__		return validator.isValid()__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,if,name,null,return,false,if,name,equals,return,true,if,name,char,at,0,name,char,at,name,length,1,return,false,element,validator,validator,new,element,validator,process,name,validator,return,validator,is,valid
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1514004947;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		if (name == null) {_			return false__		}_		if (name.equals(EMPTY_STRING)) {_			return true__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			return false__		}_		ElementValidator validator = new ElementValidator()__		process(name, '.', validator)__		return validator.isValid()__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,if,name,null,return,false,if,name,equals,return,true,if,name,char,at,0,name,char,at,name,length,1,return,false,element,validator,validator,new,element,validator,process,name,validator,return,validator,is,valid
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1515257429;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		if (name == null) {_			return false__		}_		if (name.equals(EMPTY_STRING)) {_			return true__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			return false__		}_		ElementValidator validator = new ElementValidator()__		process(name, '.', validator)__		return validator.isValid()__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,if,name,null,return,false,if,name,equals,return,true,if,name,char,at,0,name,char,at,name,length,1,return,false,element,validator,validator,new,element,validator,process,name,validator,return,validator,is,valid
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1517593684;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		if (name == null) {_			return false__		}_		if (name.equals(EMPTY_STRING)) {_			return true__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			return false__		}_		ElementValidator validator = new ElementValidator()__		process(name, '.', validator)__		return validator.isValid()__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,if,name,null,return,false,if,name,equals,return,true,if,name,char,at,0,name,char,at,name,length,1,return,false,element,validator,validator,new,element,validator,process,name,validator,return,validator,is,valid
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1517626745;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		if (name == null) {_			return false__		}_		if (name.equals(EMPTY_STRING)) {_			return true__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			return false__		}_		ElementValidator validator = new ElementValidator()__		process(name, '.', validator)__		return validator.isValid()__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,if,name,null,return,false,if,name,equals,return,true,if,name,char,at,0,name,char,at,name,length,1,return,false,element,validator,validator,new,element,validator,process,name,validator,return,validator,is,valid
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1519362690;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		if (name == null) {_			return false__		}_		if (name.equals(EMPTY_STRING)) {_			return true__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			return false__		}_		ElementValidator validator = new ElementValidator()__		process(name, '.', validator)__		return validator.isValid()__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,if,name,null,return,false,if,name,equals,return,true,if,name,char,at,0,name,char,at,name,length,1,return,false,element,validator,validator,new,element,validator,process,name,validator,return,validator,is,valid
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1525416882;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		if (name == null) {_			return false__		}_		if (name.equals(EMPTY_STRING)) {_			return true__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			return false__		}_		ElementValidator validator = new ElementValidator()__		process(name, '.', validator)__		return validator.isValid()__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,if,name,null,return,false,if,name,equals,return,true,if,name,char,at,0,name,char,at,name,length,1,return,false,element,validator,validator,new,element,validator,process,name,validator,return,validator,is,valid
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1532738143;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		if (name == null) {_			return false__		}_		if (name.equals(EMPTY_STRING)) {_			return true__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			return false__		}_		ElementValidator validator = new ElementValidator()__		process(name, '.', validator)__		return validator.isValid()__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,if,name,null,return,false,if,name,equals,return,true,if,name,char,at,0,name,char,at,name,length,1,return,false,element,validator,validator,new,element,validator,process,name,validator,return,validator,is,valid
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1532852936;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		if (name == null) {_			return false__		}_		if (name.equals(EMPTY_STRING)) {_			return true__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			return false__		}_		ElementValidator validator = new ElementValidator()__		process(name, '.', validator)__		return validator.isValid()__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,if,name,null,return,false,if,name,equals,return,true,if,name,char,at,0,name,char,at,name,length,1,return,false,element,validator,validator,new,element,validator,process,name,validator,return,validator,is,valid
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1533106089;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		if (name == null) {_			return false__		}_		if (name.equals(EMPTY_STRING)) {_			return true__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			return false__		}_		ElementValidator validator = new ElementValidator()__		process(name, '.', validator)__		return validator.isValid()__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,if,name,null,return,false,if,name,equals,return,true,if,name,char,at,0,name,char,at,name,length,1,return,false,element,validator,validator,new,element,validator,process,name,validator,return,validator,is,valid
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1534881387;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		if (name == null) {_			return false__		}_		if (name.equals(EMPTY_STRING)) {_			return true__		}_		if (name.charAt(0) == '.' || name.charAt(name.length() - 1) == '.') {_			return false__		}_		ElementValidator validator = new ElementValidator()__		process(name, '.', validator)__		return validator.isValid()__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,if,name,null,return,false,if,name,equals,return,true,if,name,char,at,0,name,char,at,name,length,1,return,false,element,validator,validator,new,element,validator,process,name,validator,return,validator,is,valid
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1537507626;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		return of(name, true) != null__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,return,of,name,true,null
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1538514022;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		return of(name, true) != null__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,return,of,name,true,null
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1542318500;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		return of(name, true) != null__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,return,of,name,true,null
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1548675274;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		return of(name, true) != null__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,return,of,name,true,null
ConfigurationPropertyName -> public static boolean isValid(CharSequence name);1548675624;Returns if the given name is valid. If this method returns {@code true} then the_name may be used with {@link #of(CharSequence)} without throwing an exception._@param name the name to test_@return {@code true} if the name is valid;public static boolean isValid(CharSequence name) {_		return of(name, true) != null__	};returns,if,the,given,name,is,valid,if,this,method,returns,code,true,then,the,name,may,be,used,with,link,of,char,sequence,without,throwing,an,exception,param,name,the,name,to,test,return,code,true,if,the,name,is,valid;public,static,boolean,is,valid,char,sequence,name,return,of,name,true,null
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1507173536;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		if (form == Form.ORIGINAL) {_			CharSequence result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			return result.toString()__		}_		CharSequence result = this.uniformElements[elementIndex]__		if (result == null) {_			result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			else {_				result = cleanupCharSequence(result, (c, i) -> c == '-' || c == '_',_						CharProcessor.LOWERCASE)__			}_			this.uniformElements[elementIndex] = result__		}_		return result.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,if,form,form,original,char,sequence,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,return,result,to,string,char,sequence,result,this,uniform,elements,element,index,if,result,null,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,else,result,cleanup,char,sequence,result,c,i,c,c,char,processor,lowercase,this,uniform,elements,element,index,result,return,result,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1514004947;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		if (form == Form.ORIGINAL) {_			CharSequence result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			return result.toString()__		}_		CharSequence result = this.uniformElements[elementIndex]__		if (result == null) {_			result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			else {_				result = cleanupCharSequence(result, (c, i) -> c == '-' || c == '_',_						CharProcessor.LOWERCASE)__			}_			this.uniformElements[elementIndex] = result__		}_		return result.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,if,form,form,original,char,sequence,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,return,result,to,string,char,sequence,result,this,uniform,elements,element,index,if,result,null,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,else,result,cleanup,char,sequence,result,c,i,c,c,char,processor,lowercase,this,uniform,elements,element,index,result,return,result,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1515257429;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		if (form == Form.ORIGINAL) {_			CharSequence result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			return result.toString()__		}_		CharSequence result = this.uniformElements[elementIndex]__		if (result == null) {_			result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			else {_				result = cleanupCharSequence(result, (c, i) -> c == '-' || c == '_',_						CharProcessor.LOWERCASE)__			}_			this.uniformElements[elementIndex] = result__		}_		return result.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,if,form,form,original,char,sequence,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,return,result,to,string,char,sequence,result,this,uniform,elements,element,index,if,result,null,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,else,result,cleanup,char,sequence,result,c,i,c,c,char,processor,lowercase,this,uniform,elements,element,index,result,return,result,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1517593684;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		if (form == Form.ORIGINAL) {_			CharSequence result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			return result.toString()__		}_		CharSequence result = this.uniformElements[elementIndex]__		if (result == null) {_			result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			else {_				result = cleanupCharSequence(result, (c, i) -> c == '-' || c == '_',_						CharProcessor.LOWERCASE)__			}_			this.uniformElements[elementIndex] = result__		}_		return result.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,if,form,form,original,char,sequence,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,return,result,to,string,char,sequence,result,this,uniform,elements,element,index,if,result,null,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,else,result,cleanup,char,sequence,result,c,i,c,c,char,processor,lowercase,this,uniform,elements,element,index,result,return,result,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1517626745;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		if (form == Form.ORIGINAL) {_			CharSequence result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			return result.toString()__		}_		CharSequence result = this.uniformElements[elementIndex]__		if (result == null) {_			result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			else {_				result = cleanupCharSequence(result, (c, i) -> c == '-' || c == '_',_						CharProcessor.LOWERCASE)__			}_			this.uniformElements[elementIndex] = result__		}_		return result.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,if,form,form,original,char,sequence,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,return,result,to,string,char,sequence,result,this,uniform,elements,element,index,if,result,null,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,else,result,cleanup,char,sequence,result,c,i,c,c,char,processor,lowercase,this,uniform,elements,element,index,result,return,result,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1519362690;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		if (form == Form.ORIGINAL) {_			CharSequence result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			return result.toString()__		}_		CharSequence result = this.uniformElements[elementIndex]__		if (result == null) {_			result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			else {_				result = cleanupCharSequence(result, (c, i) -> c == '-' || c == '_',_						CharProcessor.LOWERCASE)__			}_			this.uniformElements[elementIndex] = result__		}_		return result.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,if,form,form,original,char,sequence,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,return,result,to,string,char,sequence,result,this,uniform,elements,element,index,if,result,null,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,else,result,cleanup,char,sequence,result,c,i,c,c,char,processor,lowercase,this,uniform,elements,element,index,result,return,result,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1525416882;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		if (form == Form.ORIGINAL) {_			CharSequence result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			return result.toString()__		}_		CharSequence result = this.uniformElements[elementIndex]__		if (result == null) {_			result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			else {_				result = cleanupCharSequence(result, (c, i) -> c == '-' || c == '_',_						CharProcessor.LOWERCASE)__			}_			this.uniformElements[elementIndex] = result__		}_		return result.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,if,form,form,original,char,sequence,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,return,result,to,string,char,sequence,result,this,uniform,elements,element,index,if,result,null,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,else,result,cleanup,char,sequence,result,c,i,c,c,char,processor,lowercase,this,uniform,elements,element,index,result,return,result,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1532738143;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		if (form == Form.ORIGINAL) {_			CharSequence result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			return result.toString()__		}_		CharSequence result = this.uniformElements[elementIndex]__		if (result == null) {_			result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			else {_				result = cleanupCharSequence(result, (c, i) -> c == '-' || c == '_',_						CharProcessor.LOWERCASE)__			}_			this.uniformElements[elementIndex] = result__		}_		return result.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,if,form,form,original,char,sequence,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,return,result,to,string,char,sequence,result,this,uniform,elements,element,index,if,result,null,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,else,result,cleanup,char,sequence,result,c,i,c,c,char,processor,lowercase,this,uniform,elements,element,index,result,return,result,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1532852936;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		if (form == Form.ORIGINAL) {_			CharSequence result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			return result.toString()__		}_		CharSequence result = this.uniformElements[elementIndex]__		if (result == null) {_			result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			else {_				result = cleanupCharSequence(result, (c, i) -> c == '-' || c == '_',_						CharProcessor.LOWERCASE)__			}_			this.uniformElements[elementIndex] = result__		}_		return result.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,if,form,form,original,char,sequence,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,return,result,to,string,char,sequence,result,this,uniform,elements,element,index,if,result,null,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,else,result,cleanup,char,sequence,result,c,i,c,c,char,processor,lowercase,this,uniform,elements,element,index,result,return,result,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1533106089;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		if (form == Form.ORIGINAL) {_			CharSequence result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			return result.toString()__		}_		CharSequence result = this.uniformElements[elementIndex]__		if (result == null) {_			result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			else {_				result = cleanupCharSequence(result, (c, i) -> c == '-' || c == '_',_						CharProcessor.LOWERCASE)__			}_			this.uniformElements[elementIndex] = result__		}_		return result.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,if,form,form,original,char,sequence,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,return,result,to,string,char,sequence,result,this,uniform,elements,element,index,if,result,null,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,else,result,cleanup,char,sequence,result,c,i,c,c,char,processor,lowercase,this,uniform,elements,element,index,result,return,result,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1534881387;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		if (form == Form.ORIGINAL) {_			CharSequence result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			return result.toString()__		}_		CharSequence result = this.uniformElements[elementIndex]__		if (result == null) {_			result = this.elements[elementIndex]__			if (isIndexed(result)) {_				result = result.subSequence(1, result.length() - 1)__			}_			else {_				result = cleanupCharSequence(result, (c, i) -> c == '-' || c == '_',_						CharProcessor.LOWERCASE)__			}_			this.uniformElements[elementIndex] = result__		}_		return result.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,if,form,form,original,char,sequence,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,return,result,to,string,char,sequence,result,this,uniform,elements,element,index,if,result,null,result,this,elements,element,index,if,is,indexed,result,result,result,sub,sequence,1,result,length,1,else,result,cleanup,char,sequence,result,c,i,c,c,char,processor,lowercase,this,uniform,elements,element,index,result,return,result,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1537507626;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		CharSequence element = this.elements.get(elementIndex)__		ElementType type = this.elements.getType(elementIndex)__		if (type.isIndexed()) {_			return element.toString()__		}_		if (form == Form.ORIGINAL) {_			if (type != ElementType.NON_UNIFORM) {_				return element.toString()__			}_			return convertToOriginalForm(element).toString()__		}_		if (form == Form.DASHED) {_			if (type == ElementType.UNIFORM || type == ElementType.DASHED) {_				return element.toString()__			}_			return convertToDashedElement(element).toString()__		}_		CharSequence uniformElement = this.uniformElements[elementIndex]__		if (uniformElement == null) {_			uniformElement = (type != ElementType.UNIFORM)_					? convertToUniformElement(element) : element__			this.uniformElements[elementIndex] = uniformElement.toString()__		}_		return uniformElement.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,char,sequence,element,this,elements,get,element,index,element,type,type,this,elements,get,type,element,index,if,type,is,indexed,return,element,to,string,if,form,form,original,if,type,element,type,return,element,to,string,return,convert,to,original,form,element,to,string,if,form,form,dashed,if,type,element,type,uniform,type,element,type,dashed,return,element,to,string,return,convert,to,dashed,element,element,to,string,char,sequence,uniform,element,this,uniform,elements,element,index,if,uniform,element,null,uniform,element,type,element,type,uniform,convert,to,uniform,element,element,element,this,uniform,elements,element,index,uniform,element,to,string,return,uniform,element,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1538514022;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		CharSequence element = this.elements.get(elementIndex)__		ElementType type = this.elements.getType(elementIndex)__		if (type.isIndexed()) {_			return element.toString()__		}_		if (form == Form.ORIGINAL) {_			if (type != ElementType.NON_UNIFORM) {_				return element.toString()__			}_			return convertToOriginalForm(element).toString()__		}_		if (form == Form.DASHED) {_			if (type == ElementType.UNIFORM || type == ElementType.DASHED) {_				return element.toString()__			}_			return convertToDashedElement(element).toString()__		}_		CharSequence uniformElement = this.uniformElements[elementIndex]__		if (uniformElement == null) {_			uniformElement = (type != ElementType.UNIFORM)_					? convertToUniformElement(element) : element__			this.uniformElements[elementIndex] = uniformElement.toString()__		}_		return uniformElement.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,char,sequence,element,this,elements,get,element,index,element,type,type,this,elements,get,type,element,index,if,type,is,indexed,return,element,to,string,if,form,form,original,if,type,element,type,return,element,to,string,return,convert,to,original,form,element,to,string,if,form,form,dashed,if,type,element,type,uniform,type,element,type,dashed,return,element,to,string,return,convert,to,dashed,element,element,to,string,char,sequence,uniform,element,this,uniform,elements,element,index,if,uniform,element,null,uniform,element,type,element,type,uniform,convert,to,uniform,element,element,element,this,uniform,elements,element,index,uniform,element,to,string,return,uniform,element,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1542318500;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		CharSequence element = this.elements.get(elementIndex)__		ElementType type = this.elements.getType(elementIndex)__		if (type.isIndexed()) {_			return element.toString()__		}_		if (form == Form.ORIGINAL) {_			if (type != ElementType.NON_UNIFORM) {_				return element.toString()__			}_			return convertToOriginalForm(element).toString()__		}_		if (form == Form.DASHED) {_			if (type == ElementType.UNIFORM || type == ElementType.DASHED) {_				return element.toString()__			}_			return convertToDashedElement(element).toString()__		}_		CharSequence uniformElement = this.uniformElements[elementIndex]__		if (uniformElement == null) {_			uniformElement = (type != ElementType.UNIFORM)_					? convertToUniformElement(element) : element__			this.uniformElements[elementIndex] = uniformElement.toString()__		}_		return uniformElement.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,char,sequence,element,this,elements,get,element,index,element,type,type,this,elements,get,type,element,index,if,type,is,indexed,return,element,to,string,if,form,form,original,if,type,element,type,return,element,to,string,return,convert,to,original,form,element,to,string,if,form,form,dashed,if,type,element,type,uniform,type,element,type,dashed,return,element,to,string,return,convert,to,dashed,element,element,to,string,char,sequence,uniform,element,this,uniform,elements,element,index,if,uniform,element,null,uniform,element,type,element,type,uniform,convert,to,uniform,element,element,element,this,uniform,elements,element,index,uniform,element,to,string,return,uniform,element,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1548675274;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		CharSequence element = this.elements.get(elementIndex)__		ElementType type = this.elements.getType(elementIndex)__		if (type.isIndexed()) {_			return element.toString()__		}_		if (form == Form.ORIGINAL) {_			if (type != ElementType.NON_UNIFORM) {_				return element.toString()__			}_			return convertToOriginalForm(element).toString()__		}_		if (form == Form.DASHED) {_			if (type == ElementType.UNIFORM || type == ElementType.DASHED) {_				return element.toString()__			}_			return convertToDashedElement(element).toString()__		}_		CharSequence uniformElement = this.uniformElements[elementIndex]__		if (uniformElement == null) {_			uniformElement = (type != ElementType.UNIFORM)_					? convertToUniformElement(element) : element__			this.uniformElements[elementIndex] = uniformElement.toString()__		}_		return uniformElement.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,char,sequence,element,this,elements,get,element,index,element,type,type,this,elements,get,type,element,index,if,type,is,indexed,return,element,to,string,if,form,form,original,if,type,element,type,return,element,to,string,return,convert,to,original,form,element,to,string,if,form,form,dashed,if,type,element,type,uniform,type,element,type,dashed,return,element,to,string,return,convert,to,dashed,element,element,to,string,char,sequence,uniform,element,this,uniform,elements,element,index,if,uniform,element,null,uniform,element,type,element,type,uniform,convert,to,uniform,element,element,element,this,uniform,elements,element,index,uniform,element,to,string,return,uniform,element,to,string
ConfigurationPropertyName -> public String getElement(int elementIndex, Form form);1548675624;Return an element in the name in the given form._@param elementIndex the element index_@param form the form to return_@return the last element;public String getElement(int elementIndex, Form form) {_		CharSequence element = this.elements.get(elementIndex)__		ElementType type = this.elements.getType(elementIndex)__		if (type.isIndexed()) {_			return element.toString()__		}_		if (form == Form.ORIGINAL) {_			if (type != ElementType.NON_UNIFORM) {_				return element.toString()__			}_			return convertToOriginalForm(element).toString()__		}_		if (form == Form.DASHED) {_			if (type == ElementType.UNIFORM || type == ElementType.DASHED) {_				return element.toString()__			}_			return convertToDashedElement(element).toString()__		}_		CharSequence uniformElement = this.uniformElements[elementIndex]__		if (uniformElement == null) {_			uniformElement = (type != ElementType.UNIFORM)_					? convertToUniformElement(element) : element__			this.uniformElements[elementIndex] = uniformElement.toString()__		}_		return uniformElement.toString()__	};return,an,element,in,the,name,in,the,given,form,param,element,index,the,element,index,param,form,the,form,to,return,return,the,last,element;public,string,get,element,int,element,index,form,form,char,sequence,element,this,elements,get,element,index,element,type,type,this,elements,get,type,element,index,if,type,is,indexed,return,element,to,string,if,form,form,original,if,type,element,type,return,element,to,string,return,convert,to,original,form,element,to,string,if,form,form,dashed,if,type,element,type,uniform,type,element,type,dashed,return,element,to,string,return,convert,to,dashed,element,element,to,string,char,sequence,uniform,element,this,uniform,elements,element,index,if,uniform,element,null,uniform,element,type,element,type,uniform,convert,to,uniform,element,element,element,this,uniform,elements,element,index,uniform,element,to,string,return,uniform,element,to,string
ConfigurationPropertyName -> public boolean isLastElementIndexed();1507173536;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(this.elements[size - 1]))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,this,elements,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1514004947;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(this.elements[size - 1]))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,this,elements,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1515257429;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(this.elements[size - 1]))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,this,elements,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1517593684;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(this.elements[size - 1]))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,this,elements,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1517626745;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(this.elements[size - 1]))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,this,elements,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1519362690;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(this.elements[size - 1]))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,this,elements,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1525416882;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(this.elements[size - 1]))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,this,elements,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1532738143;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(this.elements[size - 1]))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,this,elements,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1532852936;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(this.elements[size - 1]))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,this,elements,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1533106089;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(this.elements[size - 1]))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,this,elements,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1534881387;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(this.elements[size - 1]))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,this,elements,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1537507626;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(size - 1))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1538514022;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(size - 1))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1542318500;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(size - 1))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1548675274;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(size - 1))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,size,1
ConfigurationPropertyName -> public boolean isLastElementIndexed();1548675624;Return if the last element in the name is indexed._@return {@code true} if the last element is indexed;public boolean isLastElementIndexed() {_		int size = getNumberOfElements()__		return (size > 0 && isIndexed(size - 1))__	};return,if,the,last,element,in,the,name,is,indexed,return,code,true,if,the,last,element,is,indexed;public,boolean,is,last,element,indexed,int,size,get,number,of,elements,return,size,0,is,indexed,size,1
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1507173536;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.length_ i++) {_			if (!elementEquals(this.elements[i], name.elements[i])) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,length,i,if,element,equals,this,elements,i,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1514004947;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.length_ i++) {_			if (!elementEquals(this.elements[i], name.elements[i])) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,length,i,if,element,equals,this,elements,i,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1515257429;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.length_ i++) {_			if (!elementEquals(this.elements[i], name.elements[i])) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,length,i,if,element,equals,this,elements,i,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1517593684;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.length_ i++) {_			if (!elementEquals(this.elements[i], name.elements[i])) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,length,i,if,element,equals,this,elements,i,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1517626745;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.length_ i++) {_			if (!elementEquals(this.elements[i], name.elements[i])) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,length,i,if,element,equals,this,elements,i,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1519362690;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.length_ i++) {_			if (!elementEquals(this.elements[i], name.elements[i])) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,length,i,if,element,equals,this,elements,i,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1525416882;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.length_ i++) {_			if (!elementEquals(this.elements[i], name.elements[i])) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,length,i,if,element,equals,this,elements,i,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1532738143;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.length_ i++) {_			if (!elementEquals(this.elements[i], name.elements[i])) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,length,i,if,element,equals,this,elements,i,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1532852936;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.length_ i++) {_			if (!elementEquals(this.elements[i], name.elements[i])) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,length,i,if,element,equals,this,elements,i,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1533106089;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.length_ i++) {_			if (!elementEquals(this.elements[i], name.elements[i])) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,length,i,if,element,equals,this,elements,i,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1534881387;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.length_ i++) {_			if (!elementEquals(this.elements[i], name.elements[i])) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,length,i,if,element,equals,this,elements,i,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1537507626;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.getSize()_ i++) {_			if (!elementEquals(this.elements, name.elements, i)) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,get,size,i,if,element,equals,this,elements,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1538514022;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.getSize()_ i++) {_			if (!elementEquals(this.elements, name.elements, i)) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,get,size,i,if,element,equals,this,elements,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1542318500;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.getSize()_ i++) {_			if (!elementEquals(this.elements, name.elements, i)) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,get,size,i,if,element,equals,this,elements,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1548675274;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = 0_ i < this.elements.getSize()_ i++) {_			if (!elementEquals(this.elements, name.elements, i)) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,0,i,this,elements,get,size,i,if,element,equals,this,elements,name,elements,i,return,false,return,true
ConfigurationPropertyName -> public boolean isAncestorOf(ConfigurationPropertyName name);1548675624;Returns {@code true} if this element is an ancestor (immediate or nested parent) of_the specified name._@param name the name to check_@return {@code true} if this name is an ancestor;public boolean isAncestorOf(ConfigurationPropertyName name) {_		Assert.notNull(name, "Name must not be null")__		if (this.getNumberOfElements() >= name.getNumberOfElements()) {_			return false__		}_		for (int i = this.elements.getSize() - 1_ i >= 0_ i--) {_			if (!elementEquals(this.elements, name.elements, i)) {_				return false__			}_		}_		return true__	};returns,code,true,if,this,element,is,an,ancestor,immediate,or,nested,parent,of,the,specified,name,param,name,the,name,to,check,return,code,true,if,this,name,is,an,ancestor;public,boolean,is,ancestor,of,configuration,property,name,name,assert,not,null,name,name,must,not,be,null,if,this,get,number,of,elements,name,get,number,of,elements,return,false,for,int,i,this,elements,get,size,1,i,0,i,if,element,equals,this,elements,name,elements,i,return,false,return,true
ConfigurationPropertyName -> Elements -> public boolean canShortcutWithSource(ElementType requiredType);1537507626;Returns if the element source can be used as a shortcut for an operation such_as {@code equals} or {@code toString}._@param requiredType the required type_@return {@code true} if all elements match at least one of the types;public boolean canShortcutWithSource(ElementType requiredType) {_			return canShortcutWithSource(requiredType, requiredType)__		};returns,if,the,element,source,can,be,used,as,a,shortcut,for,an,operation,such,as,code,equals,or,code,to,string,param,required,type,the,required,type,return,code,true,if,all,elements,match,at,least,one,of,the,types;public,boolean,can,shortcut,with,source,element,type,required,type,return,can,shortcut,with,source,required,type,required,type
ConfigurationPropertyName -> Elements -> public boolean canShortcutWithSource(ElementType requiredType);1538514022;Returns if the element source can be used as a shortcut for an operation such_as {@code equals} or {@code toString}._@param requiredType the required type_@return {@code true} if all elements match at least one of the types;public boolean canShortcutWithSource(ElementType requiredType) {_			return canShortcutWithSource(requiredType, requiredType)__		};returns,if,the,element,source,can,be,used,as,a,shortcut,for,an,operation,such,as,code,equals,or,code,to,string,param,required,type,the,required,type,return,code,true,if,all,elements,match,at,least,one,of,the,types;public,boolean,can,shortcut,with,source,element,type,required,type,return,can,shortcut,with,source,required,type,required,type
ConfigurationPropertyName -> Elements -> public boolean canShortcutWithSource(ElementType requiredType);1542318500;Returns if the element source can be used as a shortcut for an operation such_as {@code equals} or {@code toString}._@param requiredType the required type_@return {@code true} if all elements match at least one of the types;public boolean canShortcutWithSource(ElementType requiredType) {_			return canShortcutWithSource(requiredType, requiredType)__		};returns,if,the,element,source,can,be,used,as,a,shortcut,for,an,operation,such,as,code,equals,or,code,to,string,param,required,type,the,required,type,return,code,true,if,all,elements,match,at,least,one,of,the,types;public,boolean,can,shortcut,with,source,element,type,required,type,return,can,shortcut,with,source,required,type,required,type
ConfigurationPropertyName -> Elements -> public boolean canShortcutWithSource(ElementType requiredType);1548675274;Returns if the element source can be used as a shortcut for an operation such_as {@code equals} or {@code toString}._@param requiredType the required type_@return {@code true} if all elements match at least one of the types;public boolean canShortcutWithSource(ElementType requiredType) {_			return canShortcutWithSource(requiredType, requiredType)__		};returns,if,the,element,source,can,be,used,as,a,shortcut,for,an,operation,such,as,code,equals,or,code,to,string,param,required,type,the,required,type,return,code,true,if,all,elements,match,at,least,one,of,the,types;public,boolean,can,shortcut,with,source,element,type,required,type,return,can,shortcut,with,source,required,type,required,type
ConfigurationPropertyName -> Elements -> public boolean canShortcutWithSource(ElementType requiredType);1548675624;Returns if the element source can be used as a shortcut for an operation such_as {@code equals} or {@code toString}._@param requiredType the required type_@return {@code true} if all elements match at least one of the types;public boolean canShortcutWithSource(ElementType requiredType) {_			return canShortcutWithSource(requiredType, requiredType)__		};returns,if,the,element,source,can,be,used,as,a,shortcut,for,an,operation,such,as,code,equals,or,code,to,string,param,required,type,the,required,type,return,code,true,if,all,elements,match,at,least,one,of,the,types;public,boolean,can,shortcut,with,source,element,type,required,type,return,can,shortcut,with,source,required,type,required,type
ConfigurationPropertyName -> public int getNumberOfElements();1507173536;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.length__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,length
ConfigurationPropertyName -> public int getNumberOfElements();1514004947;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.length__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,length
ConfigurationPropertyName -> public int getNumberOfElements();1515257429;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.length__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,length
ConfigurationPropertyName -> public int getNumberOfElements();1517593684;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.length__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,length
ConfigurationPropertyName -> public int getNumberOfElements();1517626745;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.length__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,length
ConfigurationPropertyName -> public int getNumberOfElements();1519362690;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.length__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,length
ConfigurationPropertyName -> public int getNumberOfElements();1525416882;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.length__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,length
ConfigurationPropertyName -> public int getNumberOfElements();1532738143;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.length__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,length
ConfigurationPropertyName -> public int getNumberOfElements();1532852936;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.length__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,length
ConfigurationPropertyName -> public int getNumberOfElements();1533106089;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.length__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,length
ConfigurationPropertyName -> public int getNumberOfElements();1534881387;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.length__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,length
ConfigurationPropertyName -> public int getNumberOfElements();1537507626;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.getSize()__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,get,size
ConfigurationPropertyName -> public int getNumberOfElements();1538514022;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.getSize()__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,get,size
ConfigurationPropertyName -> public int getNumberOfElements();1542318500;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.getSize()__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,get,size
ConfigurationPropertyName -> public int getNumberOfElements();1548675274;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.getSize()__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,get,size
ConfigurationPropertyName -> public int getNumberOfElements();1548675624;Return the total number of elements in the name._@return the number of elements;public int getNumberOfElements() {_		return this.elements.getSize()__	};return,the,total,number,of,elements,in,the,name,return,the,number,of,elements;public,int,get,number,of,elements,return,this,elements,get,size
ConfigurationPropertyName -> Elements -> public boolean canShortcutWithSource(ElementType requiredType, 				ElementType alternativeType);1537507626;Returns if the element source can be used as a shortcut for an operation such_as {@code equals} or {@code toString}._@param requiredType the required type_@param alternativeType and alternative required type_@return {@code true} if all elements match at least one of the types;public boolean canShortcutWithSource(ElementType requiredType,_				ElementType alternativeType) {_			if (this.resolved != null) {_				return false__			}_			for (int i = 0_ i < this.size_ i++) {_				ElementType type = this.type[i]__				if (type != requiredType && type != alternativeType) {_					return false__				}_				if (i > 0 && this.end[i - 1] + 1 != this.start[i]) {_					return false__				}_			}_			return true__		};returns,if,the,element,source,can,be,used,as,a,shortcut,for,an,operation,such,as,code,equals,or,code,to,string,param,required,type,the,required,type,param,alternative,type,and,alternative,required,type,return,code,true,if,all,elements,match,at,least,one,of,the,types;public,boolean,can,shortcut,with,source,element,type,required,type,element,type,alternative,type,if,this,resolved,null,return,false,for,int,i,0,i,this,size,i,element,type,type,this,type,i,if,type,required,type,type,alternative,type,return,false,if,i,0,this,end,i,1,1,this,start,i,return,false,return,true
ConfigurationPropertyName -> Elements -> public boolean canShortcutWithSource(ElementType requiredType, 				ElementType alternativeType);1538514022;Returns if the element source can be used as a shortcut for an operation such_as {@code equals} or {@code toString}._@param requiredType the required type_@param alternativeType and alternative required type_@return {@code true} if all elements match at least one of the types;public boolean canShortcutWithSource(ElementType requiredType,_				ElementType alternativeType) {_			if (this.resolved != null) {_				return false__			}_			for (int i = 0_ i < this.size_ i++) {_				ElementType type = this.type[i]__				if (type != requiredType && type != alternativeType) {_					return false__				}_				if (i > 0 && this.end[i - 1] + 1 != this.start[i]) {_					return false__				}_			}_			return true__		};returns,if,the,element,source,can,be,used,as,a,shortcut,for,an,operation,such,as,code,equals,or,code,to,string,param,required,type,the,required,type,param,alternative,type,and,alternative,required,type,return,code,true,if,all,elements,match,at,least,one,of,the,types;public,boolean,can,shortcut,with,source,element,type,required,type,element,type,alternative,type,if,this,resolved,null,return,false,for,int,i,0,i,this,size,i,element,type,type,this,type,i,if,type,required,type,type,alternative,type,return,false,if,i,0,this,end,i,1,1,this,start,i,return,false,return,true
ConfigurationPropertyName -> Elements -> public boolean canShortcutWithSource(ElementType requiredType, 				ElementType alternativeType);1542318500;Returns if the element source can be used as a shortcut for an operation such_as {@code equals} or {@code toString}._@param requiredType the required type_@param alternativeType and alternative required type_@return {@code true} if all elements match at least one of the types;public boolean canShortcutWithSource(ElementType requiredType,_				ElementType alternativeType) {_			if (this.resolved != null) {_				return false__			}_			for (int i = 0_ i < this.size_ i++) {_				ElementType type = this.type[i]__				if (type != requiredType && type != alternativeType) {_					return false__				}_				if (i > 0 && this.end[i - 1] + 1 != this.start[i]) {_					return false__				}_			}_			return true__		};returns,if,the,element,source,can,be,used,as,a,shortcut,for,an,operation,such,as,code,equals,or,code,to,string,param,required,type,the,required,type,param,alternative,type,and,alternative,required,type,return,code,true,if,all,elements,match,at,least,one,of,the,types;public,boolean,can,shortcut,with,source,element,type,required,type,element,type,alternative,type,if,this,resolved,null,return,false,for,int,i,0,i,this,size,i,element,type,type,this,type,i,if,type,required,type,type,alternative,type,return,false,if,i,0,this,end,i,1,1,this,start,i,return,false,return,true
ConfigurationPropertyName -> Elements -> public boolean canShortcutWithSource(ElementType requiredType, 				ElementType alternativeType);1548675274;Returns if the element source can be used as a shortcut for an operation such_as {@code equals} or {@code toString}._@param requiredType the required type_@param alternativeType and alternative required type_@return {@code true} if all elements match at least one of the types;public boolean canShortcutWithSource(ElementType requiredType,_				ElementType alternativeType) {_			if (this.resolved != null) {_				return false__			}_			for (int i = 0_ i < this.size_ i++) {_				ElementType type = this.type[i]__				if (type != requiredType && type != alternativeType) {_					return false__				}_				if (i > 0 && this.end[i - 1] + 1 != this.start[i]) {_					return false__				}_			}_			return true__		};returns,if,the,element,source,can,be,used,as,a,shortcut,for,an,operation,such,as,code,equals,or,code,to,string,param,required,type,the,required,type,param,alternative,type,and,alternative,required,type,return,code,true,if,all,elements,match,at,least,one,of,the,types;public,boolean,can,shortcut,with,source,element,type,required,type,element,type,alternative,type,if,this,resolved,null,return,false,for,int,i,0,i,this,size,i,element,type,type,this,type,i,if,type,required,type,type,alternative,type,return,false,if,i,0,this,end,i,1,1,this,start,i,return,false,return,true
ConfigurationPropertyName -> Elements -> public boolean canShortcutWithSource(ElementType requiredType, 				ElementType alternativeType);1548675624;Returns if the element source can be used as a shortcut for an operation such_as {@code equals} or {@code toString}._@param requiredType the required type_@param alternativeType and alternative required type_@return {@code true} if all elements match at least one of the types;public boolean canShortcutWithSource(ElementType requiredType,_				ElementType alternativeType) {_			if (this.resolved != null) {_				return false__			}_			for (int i = 0_ i < this.size_ i++) {_				ElementType type = this.type[i]__				if (type != requiredType && type != alternativeType) {_					return false__				}_				if (i > 0 && this.end[i - 1] + 1 != this.start[i]) {_					return false__				}_			}_			return true__		};returns,if,the,element,source,can,be,used,as,a,shortcut,for,an,operation,such,as,code,equals,or,code,to,string,param,required,type,the,required,type,param,alternative,type,and,alternative,required,type,return,code,true,if,all,elements,match,at,least,one,of,the,types;public,boolean,can,shortcut,with,source,element,type,required,type,element,type,alternative,type,if,this,resolved,null,return,false,for,int,i,0,i,this,size,i,element,type,type,this,type,i,if,type,required,type,type,alternative,type,return,false,if,i,0,this,end,i,1,1,this,start,i,return,false,return,true
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1507173536;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return isIndexed(this.elements[elementIndex])__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,is,indexed,this,elements,element,index
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1514004947;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return isIndexed(this.elements[elementIndex])__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,is,indexed,this,elements,element,index
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1515257429;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return isIndexed(this.elements[elementIndex])__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,is,indexed,this,elements,element,index
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1517593684;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return isIndexed(this.elements[elementIndex])__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,is,indexed,this,elements,element,index
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1517626745;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return isIndexed(this.elements[elementIndex])__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,is,indexed,this,elements,element,index
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1519362690;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return isIndexed(this.elements[elementIndex])__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,is,indexed,this,elements,element,index
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1525416882;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return isIndexed(this.elements[elementIndex])__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,is,indexed,this,elements,element,index
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1532738143;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return isIndexed(this.elements[elementIndex])__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,is,indexed,this,elements,element,index
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1532852936;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return isIndexed(this.elements[elementIndex])__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,is,indexed,this,elements,element,index
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1533106089;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return isIndexed(this.elements[elementIndex])__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,is,indexed,this,elements,element,index
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1534881387;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return isIndexed(this.elements[elementIndex])__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,is,indexed,this,elements,element,index
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1537507626;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return this.elements.getType(elementIndex).isIndexed()__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,this,elements,get,type,element,index,is,indexed
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1538514022;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return this.elements.getType(elementIndex).isIndexed()__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,this,elements,get,type,element,index,is,indexed
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1542318500;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return this.elements.getType(elementIndex).isIndexed()__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,this,elements,get,type,element,index,is,indexed
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1548675274;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return this.elements.getType(elementIndex).isIndexed()__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,this,elements,get,type,element,index,is,indexed
ConfigurationPropertyName -> boolean isIndexed(int elementIndex);1548675624;Return if the element in the name is indexed._@param elementIndex the index of the element_@return {@code true} if the element is indexed;boolean isIndexed(int elementIndex) {_		return this.elements.getType(elementIndex).isIndexed()__	};return,if,the,element,in,the,name,is,indexed,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed;boolean,is,indexed,int,element,index,return,this,elements,get,type,element,index,is,indexed
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1507173536;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		CharSequence[] elements = new CharSequence[size]__		System.arraycopy(this.elements, 0, elements, 0, size)__		CharSequence[] uniformElements = new CharSequence[size]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, size)__		return new ConfigurationPropertyName(elements, uniformElements)__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,char,sequence,elements,new,char,sequence,size,system,arraycopy,this,elements,0,elements,0,size,char,sequence,uniform,elements,new,char,sequence,size,system,arraycopy,this,uniform,elements,0,uniform,elements,0,size,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1514004947;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		CharSequence[] elements = new CharSequence[size]__		System.arraycopy(this.elements, 0, elements, 0, size)__		CharSequence[] uniformElements = new CharSequence[size]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, size)__		return new ConfigurationPropertyName(elements, uniformElements)__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,char,sequence,elements,new,char,sequence,size,system,arraycopy,this,elements,0,elements,0,size,char,sequence,uniform,elements,new,char,sequence,size,system,arraycopy,this,uniform,elements,0,uniform,elements,0,size,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1515257429;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		CharSequence[] elements = new CharSequence[size]__		System.arraycopy(this.elements, 0, elements, 0, size)__		CharSequence[] uniformElements = new CharSequence[size]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, size)__		return new ConfigurationPropertyName(elements, uniformElements)__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,char,sequence,elements,new,char,sequence,size,system,arraycopy,this,elements,0,elements,0,size,char,sequence,uniform,elements,new,char,sequence,size,system,arraycopy,this,uniform,elements,0,uniform,elements,0,size,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1517593684;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		CharSequence[] elements = new CharSequence[size]__		System.arraycopy(this.elements, 0, elements, 0, size)__		CharSequence[] uniformElements = new CharSequence[size]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, size)__		return new ConfigurationPropertyName(elements, uniformElements)__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,char,sequence,elements,new,char,sequence,size,system,arraycopy,this,elements,0,elements,0,size,char,sequence,uniform,elements,new,char,sequence,size,system,arraycopy,this,uniform,elements,0,uniform,elements,0,size,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1517626745;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		CharSequence[] elements = new CharSequence[size]__		System.arraycopy(this.elements, 0, elements, 0, size)__		CharSequence[] uniformElements = new CharSequence[size]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, size)__		return new ConfigurationPropertyName(elements, uniformElements)__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,char,sequence,elements,new,char,sequence,size,system,arraycopy,this,elements,0,elements,0,size,char,sequence,uniform,elements,new,char,sequence,size,system,arraycopy,this,uniform,elements,0,uniform,elements,0,size,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1519362690;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		CharSequence[] elements = new CharSequence[size]__		System.arraycopy(this.elements, 0, elements, 0, size)__		CharSequence[] uniformElements = new CharSequence[size]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, size)__		return new ConfigurationPropertyName(elements, uniformElements)__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,char,sequence,elements,new,char,sequence,size,system,arraycopy,this,elements,0,elements,0,size,char,sequence,uniform,elements,new,char,sequence,size,system,arraycopy,this,uniform,elements,0,uniform,elements,0,size,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1525416882;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		CharSequence[] elements = new CharSequence[size]__		System.arraycopy(this.elements, 0, elements, 0, size)__		CharSequence[] uniformElements = new CharSequence[size]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, size)__		return new ConfigurationPropertyName(elements, uniformElements)__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,char,sequence,elements,new,char,sequence,size,system,arraycopy,this,elements,0,elements,0,size,char,sequence,uniform,elements,new,char,sequence,size,system,arraycopy,this,uniform,elements,0,uniform,elements,0,size,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1532738143;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		CharSequence[] elements = new CharSequence[size]__		System.arraycopy(this.elements, 0, elements, 0, size)__		CharSequence[] uniformElements = new CharSequence[size]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, size)__		return new ConfigurationPropertyName(elements, uniformElements)__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,char,sequence,elements,new,char,sequence,size,system,arraycopy,this,elements,0,elements,0,size,char,sequence,uniform,elements,new,char,sequence,size,system,arraycopy,this,uniform,elements,0,uniform,elements,0,size,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1532852936;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		CharSequence[] elements = new CharSequence[size]__		System.arraycopy(this.elements, 0, elements, 0, size)__		CharSequence[] uniformElements = new CharSequence[size]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, size)__		return new ConfigurationPropertyName(elements, uniformElements)__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,char,sequence,elements,new,char,sequence,size,system,arraycopy,this,elements,0,elements,0,size,char,sequence,uniform,elements,new,char,sequence,size,system,arraycopy,this,uniform,elements,0,uniform,elements,0,size,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1533106089;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		CharSequence[] elements = new CharSequence[size]__		System.arraycopy(this.elements, 0, elements, 0, size)__		CharSequence[] uniformElements = new CharSequence[size]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, size)__		return new ConfigurationPropertyName(elements, uniformElements)__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,char,sequence,elements,new,char,sequence,size,system,arraycopy,this,elements,0,elements,0,size,char,sequence,uniform,elements,new,char,sequence,size,system,arraycopy,this,uniform,elements,0,uniform,elements,0,size,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1534881387;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		CharSequence[] elements = new CharSequence[size]__		System.arraycopy(this.elements, 0, elements, 0, size)__		CharSequence[] uniformElements = new CharSequence[size]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, size)__		return new ConfigurationPropertyName(elements, uniformElements)__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,char,sequence,elements,new,char,sequence,size,system,arraycopy,this,elements,0,elements,0,size,char,sequence,uniform,elements,new,char,sequence,size,system,arraycopy,this,uniform,elements,0,uniform,elements,0,size,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1537507626;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		return new ConfigurationPropertyName(this.elements.chop(size))__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,return,new,configuration,property,name,this,elements,chop,size
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1538514022;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		return new ConfigurationPropertyName(this.elements.chop(size))__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,return,new,configuration,property,name,this,elements,chop,size
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1542318500;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		return new ConfigurationPropertyName(this.elements.chop(size))__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,return,new,configuration,property,name,this,elements,chop,size
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1548675274;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		return new ConfigurationPropertyName(this.elements.chop(size))__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,return,new,configuration,property,name,this,elements,chop,size
ConfigurationPropertyName -> public ConfigurationPropertyName chop(int size);1548675624;Return a new {@link ConfigurationPropertyName} by chopping this name to the given_{@code size}. For example, {@code chop(1)} on the name {@code foo.bar} will return_{@code foo}._@param size the size to chop_@return the chopped name;public ConfigurationPropertyName chop(int size) {_		if (size >= getNumberOfElements()) {_			return this__		}_		return new ConfigurationPropertyName(this.elements.chop(size))__	};return,a,new,link,configuration,property,name,by,chopping,this,name,to,the,given,code,size,for,example,code,chop,1,on,the,name,code,foo,bar,will,return,code,foo,param,size,the,size,to,chop,return,the,chopped,name;public,configuration,property,name,chop,int,size,if,size,get,number,of,elements,return,this,return,new,configuration,property,name,this,elements,chop,size
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1507173536;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return isIndexed(elementIndex)_				&& isNumeric(getElement(elementIndex, Form.ORIGINAL))__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,is,indexed,element,index,is,numeric,get,element,element,index,form,original
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1514004947;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return isIndexed(elementIndex)_				&& isNumeric(getElement(elementIndex, Form.ORIGINAL))__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,is,indexed,element,index,is,numeric,get,element,element,index,form,original
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1515257429;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return isIndexed(elementIndex)_				&& isNumeric(getElement(elementIndex, Form.ORIGINAL))__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,is,indexed,element,index,is,numeric,get,element,element,index,form,original
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1517593684;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return isIndexed(elementIndex)_				&& isNumeric(getElement(elementIndex, Form.ORIGINAL))__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,is,indexed,element,index,is,numeric,get,element,element,index,form,original
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1517626745;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return isIndexed(elementIndex)_				&& isNumeric(getElement(elementIndex, Form.ORIGINAL))__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,is,indexed,element,index,is,numeric,get,element,element,index,form,original
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1519362690;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return isIndexed(elementIndex)_				&& isNumeric(getElement(elementIndex, Form.ORIGINAL))__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,is,indexed,element,index,is,numeric,get,element,element,index,form,original
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1525416882;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return isIndexed(elementIndex)_				&& isNumeric(getElement(elementIndex, Form.ORIGINAL))__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,is,indexed,element,index,is,numeric,get,element,element,index,form,original
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1532738143;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return isIndexed(elementIndex)_				&& isNumeric(getElement(elementIndex, Form.ORIGINAL))__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,is,indexed,element,index,is,numeric,get,element,element,index,form,original
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1532852936;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return isIndexed(elementIndex)_				&& isNumeric(getElement(elementIndex, Form.ORIGINAL))__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,is,indexed,element,index,is,numeric,get,element,element,index,form,original
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1533106089;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return isIndexed(elementIndex)_				&& isNumeric(getElement(elementIndex, Form.ORIGINAL))__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,is,indexed,element,index,is,numeric,get,element,element,index,form,original
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1534881387;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return isIndexed(elementIndex)_				&& isNumeric(getElement(elementIndex, Form.ORIGINAL))__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,is,indexed,element,index,is,numeric,get,element,element,index,form,original
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1537507626;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return this.elements.getType(elementIndex) == ElementType.NUMERICALLY_INDEXED__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,this,elements,get,type,element,index,element,type
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1538514022;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return this.elements.getType(elementIndex) == ElementType.NUMERICALLY_INDEXED__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,this,elements,get,type,element,index,element,type
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1542318500;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return this.elements.getType(elementIndex) == ElementType.NUMERICALLY_INDEXED__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,this,elements,get,type,element,index,element,type
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1548675274;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return this.elements.getType(elementIndex) == ElementType.NUMERICALLY_INDEXED__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,this,elements,get,type,element,index,element,type
ConfigurationPropertyName -> public boolean isNumericIndex(int elementIndex);1548675624;Return if the element in the name is indexed and numeric._@param elementIndex the index of the element_@return {@code true} if the element is indexed and numeric;public boolean isNumericIndex(int elementIndex) {_		return this.elements.getType(elementIndex) == ElementType.NUMERICALLY_INDEXED__	};return,if,the,element,in,the,name,is,indexed,and,numeric,param,element,index,the,index,of,the,element,return,code,true,if,the,element,is,indexed,and,numeric;public,boolean,is,numeric,index,int,element,index,return,this,elements,get,type,element,index,element,type
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1507173536;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		process(elementValue, '.', (value, start, end, indexed) -> Assert.isTrue(_				start == 0,_				() -> "Element value '" + elementValue + "' must be a single item"))__		if (!isIndexed(elementValue)) {_			InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(elementValue,_					ElementValidator.getInvalidChars(elementValue))__		}_		int length = this.elements.length__		CharSequence[] elements = new CharSequence[length + 1]__		System.arraycopy(this.elements, 0, elements, 0, length)__		elements[length] = elementValue__		CharSequence[] uniformElements = new CharSequence[length + 1]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, length)__		return new ConfigurationPropertyName(elements, uniformElements)__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,process,element,value,value,start,end,indexed,assert,is,true,start,0,element,value,element,value,must,be,a,single,item,if,is,indexed,element,value,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,element,value,element,validator,get,invalid,chars,element,value,int,length,this,elements,length,char,sequence,elements,new,char,sequence,length,1,system,arraycopy,this,elements,0,elements,0,length,elements,length,element,value,char,sequence,uniform,elements,new,char,sequence,length,1,system,arraycopy,this,uniform,elements,0,uniform,elements,0,length,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1514004947;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		process(elementValue, '.', (value, start, end, indexed) -> Assert.isTrue(_				start == 0,_				() -> "Element value '" + elementValue + "' must be a single item"))__		if (!isIndexed(elementValue)) {_			InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(elementValue,_					ElementValidator.getInvalidChars(elementValue))__		}_		int length = this.elements.length__		CharSequence[] elements = new CharSequence[length + 1]__		System.arraycopy(this.elements, 0, elements, 0, length)__		elements[length] = elementValue__		CharSequence[] uniformElements = new CharSequence[length + 1]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, length)__		return new ConfigurationPropertyName(elements, uniformElements)__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,process,element,value,value,start,end,indexed,assert,is,true,start,0,element,value,element,value,must,be,a,single,item,if,is,indexed,element,value,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,element,value,element,validator,get,invalid,chars,element,value,int,length,this,elements,length,char,sequence,elements,new,char,sequence,length,1,system,arraycopy,this,elements,0,elements,0,length,elements,length,element,value,char,sequence,uniform,elements,new,char,sequence,length,1,system,arraycopy,this,uniform,elements,0,uniform,elements,0,length,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1515257429;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		process(elementValue, '.', (value, start, end, indexed) -> Assert.isTrue(_				start == 0,_				() -> "Element value '" + elementValue + "' must be a single item"))__		if (!isIndexed(elementValue)) {_			InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(elementValue,_					ElementValidator.getInvalidChars(elementValue))__		}_		int length = this.elements.length__		CharSequence[] elements = new CharSequence[length + 1]__		System.arraycopy(this.elements, 0, elements, 0, length)__		elements[length] = elementValue__		CharSequence[] uniformElements = new CharSequence[length + 1]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, length)__		return new ConfigurationPropertyName(elements, uniformElements)__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,process,element,value,value,start,end,indexed,assert,is,true,start,0,element,value,element,value,must,be,a,single,item,if,is,indexed,element,value,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,element,value,element,validator,get,invalid,chars,element,value,int,length,this,elements,length,char,sequence,elements,new,char,sequence,length,1,system,arraycopy,this,elements,0,elements,0,length,elements,length,element,value,char,sequence,uniform,elements,new,char,sequence,length,1,system,arraycopy,this,uniform,elements,0,uniform,elements,0,length,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1517593684;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		process(elementValue, '.', (value, start, end, indexed) -> Assert.isTrue(_				start == 0,_				() -> "Element value '" + elementValue + "' must be a single item"))__		if (!isIndexed(elementValue)) {_			InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(elementValue,_					ElementValidator.getInvalidChars(elementValue))__		}_		int length = this.elements.length__		CharSequence[] elements = new CharSequence[length + 1]__		System.arraycopy(this.elements, 0, elements, 0, length)__		elements[length] = elementValue__		CharSequence[] uniformElements = new CharSequence[length + 1]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, length)__		return new ConfigurationPropertyName(elements, uniformElements)__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,process,element,value,value,start,end,indexed,assert,is,true,start,0,element,value,element,value,must,be,a,single,item,if,is,indexed,element,value,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,element,value,element,validator,get,invalid,chars,element,value,int,length,this,elements,length,char,sequence,elements,new,char,sequence,length,1,system,arraycopy,this,elements,0,elements,0,length,elements,length,element,value,char,sequence,uniform,elements,new,char,sequence,length,1,system,arraycopy,this,uniform,elements,0,uniform,elements,0,length,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1517626745;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		process(elementValue, '.', (value, start, end, indexed) -> Assert.isTrue(_				start == 0,_				() -> "Element value '" + elementValue + "' must be a single item"))__		if (!isIndexed(elementValue)) {_			InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(elementValue,_					ElementValidator.getInvalidChars(elementValue))__		}_		int length = this.elements.length__		CharSequence[] elements = new CharSequence[length + 1]__		System.arraycopy(this.elements, 0, elements, 0, length)__		elements[length] = elementValue__		CharSequence[] uniformElements = new CharSequence[length + 1]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, length)__		return new ConfigurationPropertyName(elements, uniformElements)__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,process,element,value,value,start,end,indexed,assert,is,true,start,0,element,value,element,value,must,be,a,single,item,if,is,indexed,element,value,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,element,value,element,validator,get,invalid,chars,element,value,int,length,this,elements,length,char,sequence,elements,new,char,sequence,length,1,system,arraycopy,this,elements,0,elements,0,length,elements,length,element,value,char,sequence,uniform,elements,new,char,sequence,length,1,system,arraycopy,this,uniform,elements,0,uniform,elements,0,length,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1519362690;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		process(elementValue, '.', (value, start, end, indexed) -> Assert.isTrue(_				start == 0,_				() -> "Element value '" + elementValue + "' must be a single item"))__		if (!isIndexed(elementValue)) {_			InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(elementValue,_					ElementValidator.getInvalidChars(elementValue))__		}_		int length = this.elements.length__		CharSequence[] elements = new CharSequence[length + 1]__		System.arraycopy(this.elements, 0, elements, 0, length)__		elements[length] = elementValue__		CharSequence[] uniformElements = new CharSequence[length + 1]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, length)__		return new ConfigurationPropertyName(elements, uniformElements)__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,process,element,value,value,start,end,indexed,assert,is,true,start,0,element,value,element,value,must,be,a,single,item,if,is,indexed,element,value,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,element,value,element,validator,get,invalid,chars,element,value,int,length,this,elements,length,char,sequence,elements,new,char,sequence,length,1,system,arraycopy,this,elements,0,elements,0,length,elements,length,element,value,char,sequence,uniform,elements,new,char,sequence,length,1,system,arraycopy,this,uniform,elements,0,uniform,elements,0,length,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1525416882;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		process(elementValue, '.', (value, start, end, indexed) -> Assert.isTrue(_				start == 0,_				() -> "Element value '" + elementValue + "' must be a single item"))__		if (!isIndexed(elementValue)) {_			InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(elementValue,_					ElementValidator.getInvalidChars(elementValue))__		}_		int length = this.elements.length__		CharSequence[] elements = new CharSequence[length + 1]__		System.arraycopy(this.elements, 0, elements, 0, length)__		elements[length] = elementValue__		CharSequence[] uniformElements = new CharSequence[length + 1]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, length)__		return new ConfigurationPropertyName(elements, uniformElements)__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,process,element,value,value,start,end,indexed,assert,is,true,start,0,element,value,element,value,must,be,a,single,item,if,is,indexed,element,value,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,element,value,element,validator,get,invalid,chars,element,value,int,length,this,elements,length,char,sequence,elements,new,char,sequence,length,1,system,arraycopy,this,elements,0,elements,0,length,elements,length,element,value,char,sequence,uniform,elements,new,char,sequence,length,1,system,arraycopy,this,uniform,elements,0,uniform,elements,0,length,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1532738143;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		process(elementValue, '.', (value, start, end, indexed) -> Assert.isTrue(_				start == 0,_				() -> "Element value '" + elementValue + "' must be a single item"))__		if (!isIndexed(elementValue)) {_			InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(elementValue,_					ElementValidator.getInvalidChars(elementValue))__		}_		int length = this.elements.length__		CharSequence[] elements = new CharSequence[length + 1]__		System.arraycopy(this.elements, 0, elements, 0, length)__		elements[length] = elementValue__		CharSequence[] uniformElements = new CharSequence[length + 1]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, length)__		return new ConfigurationPropertyName(elements, uniformElements)__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,process,element,value,value,start,end,indexed,assert,is,true,start,0,element,value,element,value,must,be,a,single,item,if,is,indexed,element,value,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,element,value,element,validator,get,invalid,chars,element,value,int,length,this,elements,length,char,sequence,elements,new,char,sequence,length,1,system,arraycopy,this,elements,0,elements,0,length,elements,length,element,value,char,sequence,uniform,elements,new,char,sequence,length,1,system,arraycopy,this,uniform,elements,0,uniform,elements,0,length,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1532852936;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		process(elementValue, '.', (value, start, end, indexed) -> Assert.isTrue(_				start == 0,_				() -> "Element value '" + elementValue + "' must be a single item"))__		if (!isIndexed(elementValue)) {_			InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(elementValue,_					ElementValidator.getInvalidChars(elementValue))__		}_		int length = this.elements.length__		CharSequence[] elements = new CharSequence[length + 1]__		System.arraycopy(this.elements, 0, elements, 0, length)__		elements[length] = elementValue__		CharSequence[] uniformElements = new CharSequence[length + 1]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, length)__		return new ConfigurationPropertyName(elements, uniformElements)__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,process,element,value,value,start,end,indexed,assert,is,true,start,0,element,value,element,value,must,be,a,single,item,if,is,indexed,element,value,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,element,value,element,validator,get,invalid,chars,element,value,int,length,this,elements,length,char,sequence,elements,new,char,sequence,length,1,system,arraycopy,this,elements,0,elements,0,length,elements,length,element,value,char,sequence,uniform,elements,new,char,sequence,length,1,system,arraycopy,this,uniform,elements,0,uniform,elements,0,length,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1533106089;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		process(elementValue, '.', (value, start, end, indexed) -> Assert.isTrue(_				start == 0,_				() -> "Element value '" + elementValue + "' must be a single item"))__		if (!isIndexed(elementValue)) {_			InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(elementValue,_					ElementValidator.getInvalidChars(elementValue))__		}_		int length = this.elements.length__		CharSequence[] elements = new CharSequence[length + 1]__		System.arraycopy(this.elements, 0, elements, 0, length)__		elements[length] = elementValue__		CharSequence[] uniformElements = new CharSequence[length + 1]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, length)__		return new ConfigurationPropertyName(elements, uniformElements)__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,process,element,value,value,start,end,indexed,assert,is,true,start,0,element,value,element,value,must,be,a,single,item,if,is,indexed,element,value,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,element,value,element,validator,get,invalid,chars,element,value,int,length,this,elements,length,char,sequence,elements,new,char,sequence,length,1,system,arraycopy,this,elements,0,elements,0,length,elements,length,element,value,char,sequence,uniform,elements,new,char,sequence,length,1,system,arraycopy,this,uniform,elements,0,uniform,elements,0,length,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1534881387;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		process(elementValue, '.', (value, start, end, indexed) -> Assert.isTrue(_				start == 0,_				() -> "Element value '" + elementValue + "' must be a single item"))__		if (!isIndexed(elementValue)) {_			InvalidConfigurationPropertyNameException.throwIfHasInvalidChars(elementValue,_					ElementValidator.getInvalidChars(elementValue))__		}_		int length = this.elements.length__		CharSequence[] elements = new CharSequence[length + 1]__		System.arraycopy(this.elements, 0, elements, 0, length)__		elements[length] = elementValue__		CharSequence[] uniformElements = new CharSequence[length + 1]__		System.arraycopy(this.uniformElements, 0, uniformElements, 0, length)__		return new ConfigurationPropertyName(elements, uniformElements)__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,process,element,value,value,start,end,indexed,assert,is,true,start,0,element,value,element,value,must,be,a,single,item,if,is,indexed,element,value,invalid,configuration,property,name,exception,throw,if,has,invalid,chars,element,value,element,validator,get,invalid,chars,element,value,int,length,this,elements,length,char,sequence,elements,new,char,sequence,length,1,system,arraycopy,this,elements,0,elements,0,length,elements,length,element,value,char,sequence,uniform,elements,new,char,sequence,length,1,system,arraycopy,this,uniform,elements,0,uniform,elements,0,length,return,new,configuration,property,name,elements,uniform,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1537507626;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		Elements additionalElements = of(elementValue).elements__		return new ConfigurationPropertyName(this.elements.append(additionalElements))__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,elements,additional,elements,of,element,value,elements,return,new,configuration,property,name,this,elements,append,additional,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1538514022;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		Elements additionalElements = of(elementValue).elements__		return new ConfigurationPropertyName(this.elements.append(additionalElements))__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,elements,additional,elements,of,element,value,elements,return,new,configuration,property,name,this,elements,append,additional,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1542318500;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		Elements additionalElements = of(elementValue).elements__		return new ConfigurationPropertyName(this.elements.append(additionalElements))__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,elements,additional,elements,of,element,value,elements,return,new,configuration,property,name,this,elements,append,additional,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1548675274;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		Elements additionalElements = probablySingleElementOf(elementValue)__		return new ConfigurationPropertyName(this.elements.append(additionalElements))__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,elements,additional,elements,probably,single,element,of,element,value,return,new,configuration,property,name,this,elements,append,additional,elements
ConfigurationPropertyName -> public ConfigurationPropertyName append(String elementValue);1548675624;Create a new {@link ConfigurationPropertyName} by appending the given element_value._@param elementValue the single element value to append_@return a new {@link ConfigurationPropertyName}_@throws InvalidConfigurationPropertyNameException if elementValue is not valid;public ConfigurationPropertyName append(String elementValue) {_		if (elementValue == null) {_			return this__		}_		Elements additionalElements = probablySingleElementOf(elementValue)__		return new ConfigurationPropertyName(this.elements.append(additionalElements))__	};create,a,new,link,configuration,property,name,by,appending,the,given,element,value,param,element,value,the,single,element,value,to,append,return,a,new,link,configuration,property,name,throws,invalid,configuration,property,name,exception,if,element,value,is,not,valid;public,configuration,property,name,append,string,element,value,if,element,value,null,return,this,elements,additional,elements,probably,single,element,of,element,value,return,new,configuration,property,name,this,elements,append,additional,elements
ConfigurationPropertyName -> public String getLastElement(Form form);1507173536;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size == 0 ? EMPTY_STRING : getElement(size - 1, form))__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1514004947;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size == 0 ? EMPTY_STRING : getElement(size - 1, form))__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1515257429;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size == 0 ? EMPTY_STRING : getElement(size - 1, form))__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1517593684;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size == 0 ? EMPTY_STRING : getElement(size - 1, form))__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1517626745;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size == 0 ? EMPTY_STRING : getElement(size - 1, form))__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1519362690;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size == 0 ? EMPTY_STRING : getElement(size - 1, form))__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1525416882;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size != 0 ? getElement(size - 1, form) : EMPTY_STRING)__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1532738143;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size != 0) ? getElement(size - 1, form) : EMPTY_STRING__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1532852936;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size != 0) ? getElement(size - 1, form) : EMPTY_STRING__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1533106089;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size != 0) ? getElement(size - 1, form) : EMPTY_STRING__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1534881387;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size != 0) ? getElement(size - 1, form) : EMPTY_STRING__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1537507626;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size != 0) ? getElement(size - 1, form) : EMPTY_STRING__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1538514022;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size != 0) ? getElement(size - 1, form) : EMPTY_STRING__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1542318500;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size != 0) ? getElement(size - 1, form) : EMPTY_STRING__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1548675274;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size != 0) ? getElement(size - 1, form) : EMPTY_STRING__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> public String getLastElement(Form form);1548675624;Return the last element in the name in the given form._@param form the form to return_@return the last element;public String getLastElement(Form form) {_		int size = getNumberOfElements()__		return (size != 0) ? getElement(size - 1, form) : EMPTY_STRING__	};return,the,last,element,in,the,name,in,the,given,form,param,form,the,form,to,return,return,the,last,element;public,string,get,last,element,form,form,int,size,get,number,of,elements,return,size,0,get,element,size,1,form
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1507173536;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(elementValueProcessor, "ElementValueProcessor must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>(10)__		process(name, separator, (elementValue, start, end, indexed) -> {_			elementValue = elementValueProcessor.apply(elementValue)__			if (!isIndexed(elementValue)) {_				elementValue = cleanupCharSequence(elementValue,_						(ch, index) -> ch != '_' && !ElementValidator_								.isValidChar(Character.toLowerCase(ch), index),_						CharProcessor.NONE)__			}_			if (elementValue.length() > 0) {_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(_				elements.toArray(new CharSequence[elements.size()]))__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,assert,not,null,element,value,processor,element,value,processor,must,not,be,null,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,10,process,name,separator,element,value,start,end,indexed,element,value,element,value,processor,apply,element,value,if,is,indexed,element,value,element,value,cleanup,char,sequence,element,value,ch,index,ch,element,validator,is,valid,char,character,to,lower,case,ch,index,char,processor,none,if,element,value,length,0,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,elements,size
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1514004947;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(elementValueProcessor, "ElementValueProcessor must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>()__		process(name, separator, (elementValue, start, end, indexed) -> {_			elementValue = elementValueProcessor.apply(elementValue)__			if (!isIndexed(elementValue)) {_				elementValue = cleanupCharSequence(elementValue,_						(ch, index) -> ch != '_' && !ElementValidator_								.isValidChar(Character.toLowerCase(ch), index),_						CharProcessor.NONE)__			}_			if (elementValue.length() > 0) {_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(_				elements.toArray(new CharSequence[elements.size()]))__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,assert,not,null,element,value,processor,element,value,processor,must,not,be,null,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,process,name,separator,element,value,start,end,indexed,element,value,element,value,processor,apply,element,value,if,is,indexed,element,value,element,value,cleanup,char,sequence,element,value,ch,index,ch,element,validator,is,valid,char,character,to,lower,case,ch,index,char,processor,none,if,element,value,length,0,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,elements,size
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1515257429;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(elementValueProcessor, "ElementValueProcessor must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>()__		process(name, separator, (elementValue, start, end, indexed) -> {_			elementValue = elementValueProcessor.apply(elementValue)__			if (!isIndexed(elementValue)) {_				elementValue = cleanupCharSequence(elementValue,_						(ch, index) -> ch != '_' && !ElementValidator_								.isValidChar(Character.toLowerCase(ch), index),_						CharProcessor.NONE)__			}_			if (elementValue.length() > 0) {_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(_				elements.toArray(new CharSequence[elements.size()]))__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,assert,not,null,element,value,processor,element,value,processor,must,not,be,null,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,process,name,separator,element,value,start,end,indexed,element,value,element,value,processor,apply,element,value,if,is,indexed,element,value,element,value,cleanup,char,sequence,element,value,ch,index,ch,element,validator,is,valid,char,character,to,lower,case,ch,index,char,processor,none,if,element,value,length,0,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,elements,size
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1517593684;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(elementValueProcessor, "ElementValueProcessor must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>()__		process(name, separator, (elementValue, start, end, indexed) -> {_			elementValue = elementValueProcessor.apply(elementValue)__			if (!isIndexed(elementValue)) {_				elementValue = cleanupCharSequence(elementValue,_						(ch, index) -> ch != '_' && !ElementValidator_								.isValidChar(Character.toLowerCase(ch), index),_						CharProcessor.NONE)__			}_			if (elementValue.length() > 0) {_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(_				elements.toArray(new CharSequence[elements.size()]))__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,assert,not,null,element,value,processor,element,value,processor,must,not,be,null,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,process,name,separator,element,value,start,end,indexed,element,value,element,value,processor,apply,element,value,if,is,indexed,element,value,element,value,cleanup,char,sequence,element,value,ch,index,ch,element,validator,is,valid,char,character,to,lower,case,ch,index,char,processor,none,if,element,value,length,0,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,elements,size
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1517626745;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(elementValueProcessor, "ElementValueProcessor must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>()__		process(name, separator, (elementValue, start, end, indexed) -> {_			elementValue = elementValueProcessor.apply(elementValue)__			if (!isIndexed(elementValue)) {_				elementValue = cleanupCharSequence(elementValue,_						(ch, index) -> ch != '_' && !ElementValidator_								.isValidChar(Character.toLowerCase(ch), index),_						CharProcessor.NONE)__			}_			if (elementValue.length() > 0) {_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(_				elements.toArray(new CharSequence[elements.size()]))__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,assert,not,null,element,value,processor,element,value,processor,must,not,be,null,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,process,name,separator,element,value,start,end,indexed,element,value,element,value,processor,apply,element,value,if,is,indexed,element,value,element,value,cleanup,char,sequence,element,value,ch,index,ch,element,validator,is,valid,char,character,to,lower,case,ch,index,char,processor,none,if,element,value,length,0,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,elements,size
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1519362690;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(elementValueProcessor, "ElementValueProcessor must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>()__		process(name, separator, (elementValue, start, end, indexed) -> {_			elementValue = elementValueProcessor.apply(elementValue)__			if (!isIndexed(elementValue)) {_				elementValue = cleanupCharSequence(elementValue,_						(ch, index) -> ch != '_' && !ElementValidator_								.isValidChar(Character.toLowerCase(ch), index),_						CharProcessor.NONE)__			}_			if (elementValue.length() > 0) {_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(elements.toArray(new CharSequence[0]))__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,assert,not,null,element,value,processor,element,value,processor,must,not,be,null,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,process,name,separator,element,value,start,end,indexed,element,value,element,value,processor,apply,element,value,if,is,indexed,element,value,element,value,cleanup,char,sequence,element,value,ch,index,ch,element,validator,is,valid,char,character,to,lower,case,ch,index,char,processor,none,if,element,value,length,0,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,0
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1525416882;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(elementValueProcessor, "ElementValueProcessor must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>()__		process(name, separator, (elementValue, start, end, indexed) -> {_			elementValue = elementValueProcessor.apply(elementValue)__			if (!isIndexed(elementValue)) {_				elementValue = cleanupCharSequence(elementValue,_						(ch, index) -> ch != '_' && !ElementValidator_								.isValidChar(Character.toLowerCase(ch), index),_						CharProcessor.NONE)__			}_			if (elementValue.length() > 0) {_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(elements.toArray(new CharSequence[0]))__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,assert,not,null,element,value,processor,element,value,processor,must,not,be,null,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,process,name,separator,element,value,start,end,indexed,element,value,element,value,processor,apply,element,value,if,is,indexed,element,value,element,value,cleanup,char,sequence,element,value,ch,index,ch,element,validator,is,valid,char,character,to,lower,case,ch,index,char,processor,none,if,element,value,length,0,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,0
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1532738143;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(elementValueProcessor, "ElementValueProcessor must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>()__		process(name, separator, (elementValue, start, end, indexed) -> {_			elementValue = elementValueProcessor.apply(elementValue)__			if (!isIndexed(elementValue)) {_				elementValue = cleanupCharSequence(elementValue,_						(ch, index) -> ch != '_' && !ElementValidator_								.isValidChar(Character.toLowerCase(ch), index),_						CharProcessor.NONE)__			}_			if (elementValue.length() > 0) {_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(elements.toArray(new CharSequence[0]))__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,assert,not,null,element,value,processor,element,value,processor,must,not,be,null,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,process,name,separator,element,value,start,end,indexed,element,value,element,value,processor,apply,element,value,if,is,indexed,element,value,element,value,cleanup,char,sequence,element,value,ch,index,ch,element,validator,is,valid,char,character,to,lower,case,ch,index,char,processor,none,if,element,value,length,0,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,0
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1532852936;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(elementValueProcessor, "ElementValueProcessor must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>()__		process(name, separator, (elementValue, start, end, indexed) -> {_			elementValue = elementValueProcessor.apply(elementValue)__			if (!isIndexed(elementValue)) {_				elementValue = cleanupCharSequence(elementValue,_						(ch, index) -> ch != '_' && !ElementValidator_								.isValidChar(Character.toLowerCase(ch), index),_						CharProcessor.NONE)__			}_			if (elementValue.length() > 0) {_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(elements.toArray(new CharSequence[0]))__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,assert,not,null,element,value,processor,element,value,processor,must,not,be,null,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,process,name,separator,element,value,start,end,indexed,element,value,element,value,processor,apply,element,value,if,is,indexed,element,value,element,value,cleanup,char,sequence,element,value,ch,index,ch,element,validator,is,valid,char,character,to,lower,case,ch,index,char,processor,none,if,element,value,length,0,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,0
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1533106089;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(elementValueProcessor, "ElementValueProcessor must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>()__		process(name, separator, (elementValue, start, end, indexed) -> {_			elementValue = elementValueProcessor.apply(elementValue)__			if (!isIndexed(elementValue)) {_				elementValue = cleanupCharSequence(elementValue,_						(ch, index) -> ch != '_' && !ElementValidator_								.isValidChar(Character.toLowerCase(ch), index),_						CharProcessor.NONE)__			}_			if (elementValue.length() > 0) {_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(elements.toArray(new CharSequence[0]))__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,assert,not,null,element,value,processor,element,value,processor,must,not,be,null,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,process,name,separator,element,value,start,end,indexed,element,value,element,value,processor,apply,element,value,if,is,indexed,element,value,element,value,cleanup,char,sequence,element,value,ch,index,ch,element,validator,is,valid,char,character,to,lower,case,ch,index,char,processor,none,if,element,value,length,0,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,0
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1534881387;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		Assert.notNull(elementValueProcessor, "ElementValueProcessor must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		List<CharSequence> elements = new ArrayList<>()__		process(name, separator, (elementValue, start, end, indexed) -> {_			elementValue = elementValueProcessor.apply(elementValue)__			if (!isIndexed(elementValue)) {_				elementValue = cleanupCharSequence(elementValue,_						(ch, index) -> ch != '_' && !ElementValidator_								.isValidChar(Character.toLowerCase(ch), index),_						CharProcessor.NONE)__			}_			if (elementValue.length() > 0) {_				elements.add(elementValue)__			}_		})__		return new ConfigurationPropertyName(elements.toArray(new CharSequence[0]))__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,assert,not,null,element,value,processor,element,value,processor,must,not,be,null,if,name,length,0,return,empty,list,char,sequence,elements,new,array,list,process,name,separator,element,value,start,end,indexed,element,value,element,value,processor,apply,element,value,if,is,indexed,element,value,element,value,cleanup,char,sequence,element,value,ch,index,ch,element,validator,is,valid,char,character,to,lower,case,ch,index,char,processor,none,if,element,value,length,0,elements,add,element,value,return,new,configuration,property,name,elements,to,array,new,char,sequence,0
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1537507626;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		Elements elements = new ElementsParser(name, separator)_				.parse(elementValueProcessor)__		if (elements.getSize() == 0) {_			return EMPTY__		}_		return new ConfigurationPropertyName(elements)__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,if,name,length,0,return,empty,elements,elements,new,elements,parser,name,separator,parse,element,value,processor,if,elements,get,size,0,return,empty,return,new,configuration,property,name,elements
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1538514022;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		Elements elements = new ElementsParser(name, separator)_				.parse(elementValueProcessor)__		if (elements.getSize() == 0) {_			return EMPTY__		}_		return new ConfigurationPropertyName(elements)__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,if,name,length,0,return,empty,elements,elements,new,elements,parser,name,separator,parse,element,value,processor,if,elements,get,size,0,return,empty,return,new,configuration,property,name,elements
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1542318500;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		Elements elements = new ElementsParser(name, separator)_				.parse(elementValueProcessor)__		if (elements.getSize() == 0) {_			return EMPTY__		}_		return new ConfigurationPropertyName(elements)__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,if,name,length,0,return,empty,elements,elements,new,elements,parser,name,separator,parse,element,value,processor,if,elements,get,size,0,return,empty,return,new,configuration,property,name,elements
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1548675274;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		Elements elements = new ElementsParser(name, separator)_				.parse(elementValueProcessor)__		if (elements.getSize() == 0) {_			return EMPTY__		}_		return new ConfigurationPropertyName(elements)__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,if,name,length,0,return,empty,elements,elements,new,elements,parser,name,separator,parse,element,value,processor,if,elements,get,size,0,return,empty,return,new,configuration,property,name,elements
ConfigurationPropertyName -> static ConfigurationPropertyName adapt(CharSequence name, char separator, 			Function<CharSequence, CharSequence> elementValueProcessor);1548675624;Create a {@link ConfigurationPropertyName} by adapting the given source. The name_is split into elements around the given {@code separator}. This method is more_lenient than {@link #of} in that it allows mixed case names and '{@code _}'_characters. Other invalid characters are stripped out during parsing._<p>_The {@code elementValueProcessor} function may be used if additional processing is_required on the extracted element values._@param name the name to parse_@param separator the separator used to split the name_@param elementValueProcessor a function to process element values_@return a {@link ConfigurationPropertyName};static ConfigurationPropertyName adapt(CharSequence name, char separator,_			Function<CharSequence, CharSequence> elementValueProcessor) {_		Assert.notNull(name, "Name must not be null")__		if (name.length() == 0) {_			return EMPTY__		}_		Elements elements = new ElementsParser(name, separator)_				.parse(elementValueProcessor)__		if (elements.getSize() == 0) {_			return EMPTY__		}_		return new ConfigurationPropertyName(elements)__	};create,a,link,configuration,property,name,by,adapting,the,given,source,the,name,is,split,into,elements,around,the,given,code,separator,this,method,is,more,lenient,than,link,of,in,that,it,allows,mixed,case,names,and,code,characters,other,invalid,characters,are,stripped,out,during,parsing,p,the,code,element,value,processor,function,may,be,used,if,additional,processing,is,required,on,the,extracted,element,values,param,name,the,name,to,parse,param,separator,the,separator,used,to,split,the,name,param,element,value,processor,a,function,to,process,element,values,return,a,link,configuration,property,name;static,configuration,property,name,adapt,char,sequence,name,char,separator,function,char,sequence,char,sequence,element,value,processor,assert,not,null,name,name,must,not,be,null,if,name,length,0,return,empty,elements,elements,new,elements,parser,name,separator,parse,element,value,processor,if,elements,get,size,0,return,empty,return,new,configuration,property,name,elements
ConfigurationPropertyName -> public boolean isEmpty();1507173536;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.length == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,length,0
ConfigurationPropertyName -> public boolean isEmpty();1514004947;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.length == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,length,0
ConfigurationPropertyName -> public boolean isEmpty();1515257429;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.length == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,length,0
ConfigurationPropertyName -> public boolean isEmpty();1517593684;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.length == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,length,0
ConfigurationPropertyName -> public boolean isEmpty();1517626745;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.length == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,length,0
ConfigurationPropertyName -> public boolean isEmpty();1519362690;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.length == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,length,0
ConfigurationPropertyName -> public boolean isEmpty();1525416882;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.length == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,length,0
ConfigurationPropertyName -> public boolean isEmpty();1532738143;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.length == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,length,0
ConfigurationPropertyName -> public boolean isEmpty();1532852936;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.length == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,length,0
ConfigurationPropertyName -> public boolean isEmpty();1533106089;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.length == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,length,0
ConfigurationPropertyName -> public boolean isEmpty();1534881387;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.length == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,length,0
ConfigurationPropertyName -> public boolean isEmpty();1537507626;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.getSize() == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,get,size,0
ConfigurationPropertyName -> public boolean isEmpty();1538514022;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.getSize() == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,get,size,0
ConfigurationPropertyName -> public boolean isEmpty();1542318500;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.getSize() == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,get,size,0
ConfigurationPropertyName -> public boolean isEmpty();1548675274;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.getSize() == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,get,size,0
ConfigurationPropertyName -> public boolean isEmpty();1548675624;Returns {@code true} if this {@link ConfigurationPropertyName} is empty._@return {@code true} if the name is empty;public boolean isEmpty() {_		return this.elements.getSize() == 0__	};returns,code,true,if,this,link,configuration,property,name,is,empty,return,code,true,if,the,name,is,empty;public,boolean,is,empty,return,this,elements,get,size,0
