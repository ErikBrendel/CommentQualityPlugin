# id;timestamp;commentText;codeText;commentWords;codeWords
ConfigurationPropertySources -> public static void attach(Environment environment);1507173536;Attach a {@link ConfigurationPropertySource} support to the specified_{@link Environment}. Adapts each {@link PropertySource} managed by the environment_to a {@link ConfigurationPropertySource} and allows classic_{@link PropertySourcesPropertyResolver} calls to resolve using_{@link ConfigurationPropertyName configuration property names}._<p>_The attached resolver will dynamically track any additions or removals from the_underlying {@link Environment} property sources._@param environment the source environment (must be an instance of_{@link ConfigurableEnvironment})_@see #get(Environment);public static void attach(Environment environment) {_		Assert.isInstanceOf(ConfigurableEnvironment.class, environment)__		MutablePropertySources sources = ((ConfigurableEnvironment) environment)_				.getPropertySources()__		if (!sources.contains(ATTACHED_PROPERTY_SOURCE_NAME)) {_			sources.addFirst(new ConfigurationPropertySourcesPropertySource(_					ATTACHED_PROPERTY_SOURCE_NAME,_					new SpringConfigurationPropertySources(sources)))__		}_	};attach,a,link,configuration,property,source,support,to,the,specified,link,environment,adapts,each,link,property,source,managed,by,the,environment,to,a,link,configuration,property,source,and,allows,classic,link,property,sources,property,resolver,calls,to,resolve,using,link,configuration,property,name,configuration,property,names,p,the,attached,resolver,will,dynamically,track,any,additions,or,removals,from,the,underlying,link,environment,property,sources,param,environment,the,source,environment,must,be,an,instance,of,link,configurable,environment,see,get,environment;public,static,void,attach,environment,environment,assert,is,instance,of,configurable,environment,class,environment,mutable,property,sources,sources,configurable,environment,environment,get,property,sources,if,sources,contains,sources,add,first,new,configuration,property,sources,property,source,new,spring,configuration,property,sources,sources
ConfigurationPropertySources -> public static void attach(Environment environment);1509136149;Attach a {@link ConfigurationPropertySource} support to the specified_{@link Environment}. Adapts each {@link PropertySource} managed by the environment_to a {@link ConfigurationPropertySource} and allows classic_{@link PropertySourcesPropertyResolver} calls to resolve using_{@link ConfigurationPropertyName configuration property names}._<p>_The attached resolver will dynamically track any additions or removals from the_underlying {@link Environment} property sources._@param environment the source environment (must be an instance of_{@link ConfigurableEnvironment})_@see #get(Environment);public static void attach(Environment environment) {_		Assert.isInstanceOf(ConfigurableEnvironment.class, environment)__		MutablePropertySources sources = ((ConfigurableEnvironment) environment)_				.getPropertySources()__		if (!sources.contains(ATTACHED_PROPERTY_SOURCE_NAME)) {_			sources.addFirst(new ConfigurationPropertySourcesPropertySource(_					ATTACHED_PROPERTY_SOURCE_NAME,_					new SpringConfigurationPropertySources(sources)))__		}_	};attach,a,link,configuration,property,source,support,to,the,specified,link,environment,adapts,each,link,property,source,managed,by,the,environment,to,a,link,configuration,property,source,and,allows,classic,link,property,sources,property,resolver,calls,to,resolve,using,link,configuration,property,name,configuration,property,names,p,the,attached,resolver,will,dynamically,track,any,additions,or,removals,from,the,underlying,link,environment,property,sources,param,environment,the,source,environment,must,be,an,instance,of,link,configurable,environment,see,get,environment;public,static,void,attach,environment,environment,assert,is,instance,of,configurable,environment,class,environment,mutable,property,sources,sources,configurable,environment,environment,get,property,sources,if,sources,contains,sources,add,first,new,configuration,property,sources,property,source,new,spring,configuration,property,sources,sources
ConfigurationPropertySources -> public static void attach(Environment environment);1518486593;Attach a {@link ConfigurationPropertySource} support to the specified_{@link Environment}. Adapts each {@link PropertySource} managed by the environment_to a {@link ConfigurationPropertySource} and allows classic_{@link PropertySourcesPropertyResolver} calls to resolve using_{@link ConfigurationPropertyName configuration property names}._<p>_The attached resolver will dynamically track any additions or removals from the_underlying {@link Environment} property sources._@param environment the source environment (must be an instance of_{@link ConfigurableEnvironment})_@see #get(Environment);public static void attach(Environment environment) {_		Assert.isInstanceOf(ConfigurableEnvironment.class, environment)__		MutablePropertySources sources = ((ConfigurableEnvironment) environment)_				.getPropertySources()__		PropertySource<?> attached = sources.get(ATTACHED_PROPERTY_SOURCE_NAME)__		if (attached != null && attached.getSource() != sources) {_			sources.remove(ATTACHED_PROPERTY_SOURCE_NAME)__			attached = null__		}_		if (attached == null) {_			sources.addFirst(new ConfigurationPropertySourcesPropertySource(_					ATTACHED_PROPERTY_SOURCE_NAME,_					new SpringConfigurationPropertySources(sources)))__		}_	};attach,a,link,configuration,property,source,support,to,the,specified,link,environment,adapts,each,link,property,source,managed,by,the,environment,to,a,link,configuration,property,source,and,allows,classic,link,property,sources,property,resolver,calls,to,resolve,using,link,configuration,property,name,configuration,property,names,p,the,attached,resolver,will,dynamically,track,any,additions,or,removals,from,the,underlying,link,environment,property,sources,param,environment,the,source,environment,must,be,an,instance,of,link,configurable,environment,see,get,environment;public,static,void,attach,environment,environment,assert,is,instance,of,configurable,environment,class,environment,mutable,property,sources,sources,configurable,environment,environment,get,property,sources,property,source,attached,sources,get,if,attached,null,attached,get,source,sources,sources,remove,attached,null,if,attached,null,sources,add,first,new,configuration,property,sources,property,source,new,spring,configuration,property,sources,sources
ConfigurationPropertySources -> public static void attach(Environment environment);1521155657;Attach a {@link ConfigurationPropertySource} support to the specified_{@link Environment}. Adapts each {@link PropertySource} managed by the environment_to a {@link ConfigurationPropertySource} and allows classic_{@link PropertySourcesPropertyResolver} calls to resolve using_{@link ConfigurationPropertyName configuration property names}._<p>_The attached resolver will dynamically track any additions or removals from the_underlying {@link Environment} property sources._@param environment the source environment (must be an instance of_{@link ConfigurableEnvironment})_@see #get(Environment);public static void attach(Environment environment) {_		Assert.isInstanceOf(ConfigurableEnvironment.class, environment)__		MutablePropertySources sources = ((ConfigurableEnvironment) environment)_				.getPropertySources()__		PropertySource<?> attached = sources.get(ATTACHED_PROPERTY_SOURCE_NAME)__		if (attached != null && attached.getSource() != sources) {_			sources.remove(ATTACHED_PROPERTY_SOURCE_NAME)__			attached = null__		}_		if (attached == null) {_			sources.addFirst(new ConfigurationPropertySourcesPropertySource(_					ATTACHED_PROPERTY_SOURCE_NAME,_					new SpringConfigurationPropertySources(sources)))__		}_	};attach,a,link,configuration,property,source,support,to,the,specified,link,environment,adapts,each,link,property,source,managed,by,the,environment,to,a,link,configuration,property,source,and,allows,classic,link,property,sources,property,resolver,calls,to,resolve,using,link,configuration,property,name,configuration,property,names,p,the,attached,resolver,will,dynamically,track,any,additions,or,removals,from,the,underlying,link,environment,property,sources,param,environment,the,source,environment,must,be,an,instance,of,link,configurable,environment,see,get,environment;public,static,void,attach,environment,environment,assert,is,instance,of,configurable,environment,class,environment,mutable,property,sources,sources,configurable,environment,environment,get,property,sources,property,source,attached,sources,get,if,attached,null,attached,get,source,sources,sources,remove,attached,null,if,attached,null,sources,add,first,new,configuration,property,sources,property,source,new,spring,configuration,property,sources,sources
ConfigurationPropertySources -> public static void attach(Environment environment);1531229894;Attach a {@link ConfigurationPropertySource} support to the specified_{@link Environment}. Adapts each {@link PropertySource} managed by the environment_to a {@link ConfigurationPropertySource} and allows classic_{@link PropertySourcesPropertyResolver} calls to resolve using_{@link ConfigurationPropertyName configuration property names}._<p>_The attached resolver will dynamically track any additions or removals from the_underlying {@link Environment} property sources._@param environment the source environment (must be an instance of_{@link ConfigurableEnvironment})_@see #get(Environment);public static void attach(Environment environment) {_		Assert.isInstanceOf(ConfigurableEnvironment.class, environment)__		MutablePropertySources sources = ((ConfigurableEnvironment) environment)_				.getPropertySources()__		PropertySource<?> attached = sources.get(ATTACHED_PROPERTY_SOURCE_NAME)__		if (attached != null && attached.getSource() != sources) {_			sources.remove(ATTACHED_PROPERTY_SOURCE_NAME)__			attached = null__		}_		if (attached == null) {_			sources.addFirst(new ConfigurationPropertySourcesPropertySource(_					ATTACHED_PROPERTY_SOURCE_NAME,_					new SpringConfigurationPropertySources(sources)))__		}_	};attach,a,link,configuration,property,source,support,to,the,specified,link,environment,adapts,each,link,property,source,managed,by,the,environment,to,a,link,configuration,property,source,and,allows,classic,link,property,sources,property,resolver,calls,to,resolve,using,link,configuration,property,name,configuration,property,names,p,the,attached,resolver,will,dynamically,track,any,additions,or,removals,from,the,underlying,link,environment,property,sources,param,environment,the,source,environment,must,be,an,instance,of,link,configurable,environment,see,get,environment;public,static,void,attach,environment,environment,assert,is,instance,of,configurable,environment,class,environment,mutable,property,sources,sources,configurable,environment,environment,get,property,sources,property,source,attached,sources,get,if,attached,null,attached,get,source,sources,sources,remove,attached,null,if,attached,null,sources,add,first,new,configuration,property,sources,property,source,new,spring,configuration,property,sources,sources
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> from( 			Iterable<PropertySource<?>> sources);1507173536;Return {@link Iterable} containing new {@link ConfigurationPropertySource}_instances adapted from the given Spring {@link PropertySource PropertySources}._<p>_This method will flatten any nested property sources and will filter all_{@link StubPropertySource stub property sources}._@param sources the Spring property sources to adapt_@return an {@link Iterable} containing newly adapted_{@link SpringConfigurationPropertySource} instances;public static Iterable<ConfigurationPropertySource> from(_			Iterable<PropertySource<?>> sources) {_		return streamPropertySources(sources).map(SpringConfigurationPropertySource::from)_				.collect(Collectors.toList())__	};return,link,iterable,containing,new,link,configuration,property,source,instances,adapted,from,the,given,spring,link,property,source,property,sources,p,this,method,will,flatten,any,nested,property,sources,and,will,filter,all,link,stub,property,source,stub,property,sources,param,sources,the,spring,property,sources,to,adapt,return,an,link,iterable,containing,newly,adapted,link,spring,configuration,property,source,instances;public,static,iterable,configuration,property,source,from,iterable,property,source,sources,return,stream,property,sources,sources,map,spring,configuration,property,source,from,collect,collectors,to,list
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> from( 			Iterable<PropertySource<?>> sources);1509136149;Return {@link Iterable} containing new {@link ConfigurationPropertySource}_instances adapted from the given Spring {@link PropertySource PropertySources}._<p>_This method will flatten any nested property sources and will filter all_{@link StubPropertySource stub property sources}. Updates to the underlying source,_identified by changes in the sources returned by its iterator, will be_automatically tracked._@param sources the Spring property sources to adapt_@return an {@link Iterable} containing newly adapted_{@link SpringConfigurationPropertySource} instances;public static Iterable<ConfigurationPropertySource> from(_			Iterable<PropertySource<?>> sources) {_		return new SpringConfigurationPropertySources(sources)__	};return,link,iterable,containing,new,link,configuration,property,source,instances,adapted,from,the,given,spring,link,property,source,property,sources,p,this,method,will,flatten,any,nested,property,sources,and,will,filter,all,link,stub,property,source,stub,property,sources,updates,to,the,underlying,source,identified,by,changes,in,the,sources,returned,by,its,iterator,will,be,automatically,tracked,param,sources,the,spring,property,sources,to,adapt,return,an,link,iterable,containing,newly,adapted,link,spring,configuration,property,source,instances;public,static,iterable,configuration,property,source,from,iterable,property,source,sources,return,new,spring,configuration,property,sources,sources
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> from( 			Iterable<PropertySource<?>> sources);1518486593;Return {@link Iterable} containing new {@link ConfigurationPropertySource}_instances adapted from the given Spring {@link PropertySource PropertySources}._<p>_This method will flatten any nested property sources and will filter all_{@link StubPropertySource stub property sources}. Updates to the underlying source,_identified by changes in the sources returned by its iterator, will be_automatically tracked._@param sources the Spring property sources to adapt_@return an {@link Iterable} containing newly adapted_{@link SpringConfigurationPropertySource} instances;public static Iterable<ConfigurationPropertySource> from(_			Iterable<PropertySource<?>> sources) {_		return new SpringConfigurationPropertySources(sources)__	};return,link,iterable,containing,new,link,configuration,property,source,instances,adapted,from,the,given,spring,link,property,source,property,sources,p,this,method,will,flatten,any,nested,property,sources,and,will,filter,all,link,stub,property,source,stub,property,sources,updates,to,the,underlying,source,identified,by,changes,in,the,sources,returned,by,its,iterator,will,be,automatically,tracked,param,sources,the,spring,property,sources,to,adapt,return,an,link,iterable,containing,newly,adapted,link,spring,configuration,property,source,instances;public,static,iterable,configuration,property,source,from,iterable,property,source,sources,return,new,spring,configuration,property,sources,sources
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> from( 			Iterable<PropertySource<?>> sources);1521155657;Return {@link Iterable} containing new {@link ConfigurationPropertySource}_instances adapted from the given Spring {@link PropertySource PropertySources}._<p>_This method will flatten any nested property sources and will filter all_{@link StubPropertySource stub property sources}. Updates to the underlying source,_identified by changes in the sources returned by its iterator, will be_automatically tracked. The underlying source should be thread safe, for example a_{@link MutablePropertySources}_@param sources the Spring property sources to adapt_@return an {@link Iterable} containing newly adapted_{@link SpringConfigurationPropertySource} instances;public static Iterable<ConfigurationPropertySource> from(_			Iterable<PropertySource<?>> sources) {_		return new SpringConfigurationPropertySources(sources)__	};return,link,iterable,containing,new,link,configuration,property,source,instances,adapted,from,the,given,spring,link,property,source,property,sources,p,this,method,will,flatten,any,nested,property,sources,and,will,filter,all,link,stub,property,source,stub,property,sources,updates,to,the,underlying,source,identified,by,changes,in,the,sources,returned,by,its,iterator,will,be,automatically,tracked,the,underlying,source,should,be,thread,safe,for,example,a,link,mutable,property,sources,param,sources,the,spring,property,sources,to,adapt,return,an,link,iterable,containing,newly,adapted,link,spring,configuration,property,source,instances;public,static,iterable,configuration,property,source,from,iterable,property,source,sources,return,new,spring,configuration,property,sources,sources
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> from( 			Iterable<PropertySource<?>> sources);1531229894;Return {@link Iterable} containing new {@link ConfigurationPropertySource}_instances adapted from the given Spring {@link PropertySource PropertySources}._<p>_This method will flatten any nested property sources and will filter all_{@link StubPropertySource stub property sources}. Updates to the underlying source,_identified by changes in the sources returned by its iterator, will be_automatically tracked. The underlying source should be thread safe, for example a_{@link MutablePropertySources}_@param sources the Spring property sources to adapt_@return an {@link Iterable} containing newly adapted_{@link SpringConfigurationPropertySource} instances;public static Iterable<ConfigurationPropertySource> from(_			Iterable<PropertySource<?>> sources) {_		return new SpringConfigurationPropertySources(sources)__	};return,link,iterable,containing,new,link,configuration,property,source,instances,adapted,from,the,given,spring,link,property,source,property,sources,p,this,method,will,flatten,any,nested,property,sources,and,will,filter,all,link,stub,property,source,stub,property,sources,updates,to,the,underlying,source,identified,by,changes,in,the,sources,returned,by,its,iterator,will,be,automatically,tracked,the,underlying,source,should,be,thread,safe,for,example,a,link,mutable,property,sources,param,sources,the,spring,property,sources,to,adapt,return,an,link,iterable,containing,newly,adapted,link,spring,configuration,property,source,instances;public,static,iterable,configuration,property,source,from,iterable,property,source,sources,return,new,spring,configuration,property,sources,sources
ConfigurationPropertySources -> public static boolean isAttachedConfigurationPropertySource( 			PropertySource<?> propertySource);1507173536;Determines if the specific {@link PropertySource} is the_{@link ConfigurationPropertySource} that was {@link #attach(Environment) attached}_to the {@link Environment}._@param propertySource the property source to test_@return {@code true} if this is the attached {@link ConfigurationPropertySource};public static boolean isAttachedConfigurationPropertySource(_			PropertySource<?> propertySource) {_		return ATTACHED_PROPERTY_SOURCE_NAME.equals(propertySource.getName())__	};determines,if,the,specific,link,property,source,is,the,link,configuration,property,source,that,was,link,attach,environment,attached,to,the,link,environment,param,property,source,the,property,source,to,test,return,code,true,if,this,is,the,attached,link,configuration,property,source;public,static,boolean,is,attached,configuration,property,source,property,source,property,source,return,equals,property,source,get,name
ConfigurationPropertySources -> public static boolean isAttachedConfigurationPropertySource( 			PropertySource<?> propertySource);1509136149;Determines if the specific {@link PropertySource} is the_{@link ConfigurationPropertySource} that was {@link #attach(Environment) attached}_to the {@link Environment}._@param propertySource the property source to test_@return {@code true} if this is the attached {@link ConfigurationPropertySource};public static boolean isAttachedConfigurationPropertySource(_			PropertySource<?> propertySource) {_		return ATTACHED_PROPERTY_SOURCE_NAME.equals(propertySource.getName())__	};determines,if,the,specific,link,property,source,is,the,link,configuration,property,source,that,was,link,attach,environment,attached,to,the,link,environment,param,property,source,the,property,source,to,test,return,code,true,if,this,is,the,attached,link,configuration,property,source;public,static,boolean,is,attached,configuration,property,source,property,source,property,source,return,equals,property,source,get,name
ConfigurationPropertySources -> public static boolean isAttachedConfigurationPropertySource( 			PropertySource<?> propertySource);1518486593;Determines if the specific {@link PropertySource} is the_{@link ConfigurationPropertySource} that was {@link #attach(Environment) attached}_to the {@link Environment}._@param propertySource the property source to test_@return {@code true} if this is the attached {@link ConfigurationPropertySource};public static boolean isAttachedConfigurationPropertySource(_			PropertySource<?> propertySource) {_		return ATTACHED_PROPERTY_SOURCE_NAME.equals(propertySource.getName())__	};determines,if,the,specific,link,property,source,is,the,link,configuration,property,source,that,was,link,attach,environment,attached,to,the,link,environment,param,property,source,the,property,source,to,test,return,code,true,if,this,is,the,attached,link,configuration,property,source;public,static,boolean,is,attached,configuration,property,source,property,source,property,source,return,equals,property,source,get,name
ConfigurationPropertySources -> public static boolean isAttachedConfigurationPropertySource( 			PropertySource<?> propertySource);1521155657;Determines if the specific {@link PropertySource} is the_{@link ConfigurationPropertySource} that was {@link #attach(Environment) attached}_to the {@link Environment}._@param propertySource the property source to test_@return {@code true} if this is the attached {@link ConfigurationPropertySource};public static boolean isAttachedConfigurationPropertySource(_			PropertySource<?> propertySource) {_		return ATTACHED_PROPERTY_SOURCE_NAME.equals(propertySource.getName())__	};determines,if,the,specific,link,property,source,is,the,link,configuration,property,source,that,was,link,attach,environment,attached,to,the,link,environment,param,property,source,the,property,source,to,test,return,code,true,if,this,is,the,attached,link,configuration,property,source;public,static,boolean,is,attached,configuration,property,source,property,source,property,source,return,equals,property,source,get,name
ConfigurationPropertySources -> public static boolean isAttachedConfigurationPropertySource( 			PropertySource<?> propertySource);1531229894;Determines if the specific {@link PropertySource} is the_{@link ConfigurationPropertySource} that was {@link #attach(Environment) attached}_to the {@link Environment}._@param propertySource the property source to test_@return {@code true} if this is the attached {@link ConfigurationPropertySource};public static boolean isAttachedConfigurationPropertySource(_			PropertySource<?> propertySource) {_		return ATTACHED_PROPERTY_SOURCE_NAME.equals(propertySource.getName())__	};determines,if,the,specific,link,property,source,is,the,link,configuration,property,source,that,was,link,attach,environment,attached,to,the,link,environment,param,property,source,the,property,source,to,test,return,code,true,if,this,is,the,attached,link,configuration,property,source;public,static,boolean,is,attached,configuration,property,source,property,source,property,source,return,equals,property,source,get,name
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> from(PropertySource<?> source);1507173536;Return {@link Iterable} containing a single new {@link ConfigurationPropertySource}_adapted from the given Spring {@link PropertySource}._@param source the Spring property source to adapt_@return an {@link Iterable} containing a single newly adapted_{@link SpringConfigurationPropertySource};public static Iterable<ConfigurationPropertySource> from(PropertySource<?> source) {_		return Collections.singleton(SpringConfigurationPropertySource.from(source))__	};return,link,iterable,containing,a,single,new,link,configuration,property,source,adapted,from,the,given,spring,link,property,source,param,source,the,spring,property,source,to,adapt,return,an,link,iterable,containing,a,single,newly,adapted,link,spring,configuration,property,source;public,static,iterable,configuration,property,source,from,property,source,source,return,collections,singleton,spring,configuration,property,source,from,source
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> from(PropertySource<?> source);1509136149;Return {@link Iterable} containing a single new {@link ConfigurationPropertySource}_adapted from the given Spring {@link PropertySource}._@param source the Spring property source to adapt_@return an {@link Iterable} containing a single newly adapted_{@link SpringConfigurationPropertySource};public static Iterable<ConfigurationPropertySource> from(PropertySource<?> source) {_		return Collections.singleton(SpringConfigurationPropertySource.from(source))__	};return,link,iterable,containing,a,single,new,link,configuration,property,source,adapted,from,the,given,spring,link,property,source,param,source,the,spring,property,source,to,adapt,return,an,link,iterable,containing,a,single,newly,adapted,link,spring,configuration,property,source;public,static,iterable,configuration,property,source,from,property,source,source,return,collections,singleton,spring,configuration,property,source,from,source
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> from(PropertySource<?> source);1518486593;Return {@link Iterable} containing a single new {@link ConfigurationPropertySource}_adapted from the given Spring {@link PropertySource}._@param source the Spring property source to adapt_@return an {@link Iterable} containing a single newly adapted_{@link SpringConfigurationPropertySource};public static Iterable<ConfigurationPropertySource> from(PropertySource<?> source) {_		return Collections.singleton(SpringConfigurationPropertySource.from(source))__	};return,link,iterable,containing,a,single,new,link,configuration,property,source,adapted,from,the,given,spring,link,property,source,param,source,the,spring,property,source,to,adapt,return,an,link,iterable,containing,a,single,newly,adapted,link,spring,configuration,property,source;public,static,iterable,configuration,property,source,from,property,source,source,return,collections,singleton,spring,configuration,property,source,from,source
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> from(PropertySource<?> source);1521155657;Return {@link Iterable} containing a single new {@link ConfigurationPropertySource}_adapted from the given Spring {@link PropertySource}._@param source the Spring property source to adapt_@return an {@link Iterable} containing a single newly adapted_{@link SpringConfigurationPropertySource};public static Iterable<ConfigurationPropertySource> from(PropertySource<?> source) {_		return Collections.singleton(SpringConfigurationPropertySource.from(source))__	};return,link,iterable,containing,a,single,new,link,configuration,property,source,adapted,from,the,given,spring,link,property,source,param,source,the,spring,property,source,to,adapt,return,an,link,iterable,containing,a,single,newly,adapted,link,spring,configuration,property,source;public,static,iterable,configuration,property,source,from,property,source,source,return,collections,singleton,spring,configuration,property,source,from,source
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> from(PropertySource<?> source);1531229894;Return {@link Iterable} containing a single new {@link ConfigurationPropertySource}_adapted from the given Spring {@link PropertySource}._@param source the Spring property source to adapt_@return an {@link Iterable} containing a single newly adapted_{@link SpringConfigurationPropertySource};public static Iterable<ConfigurationPropertySource> from(PropertySource<?> source) {_		return Collections.singleton(SpringConfigurationPropertySource.from(source))__	};return,link,iterable,containing,a,single,new,link,configuration,property,source,adapted,from,the,given,spring,link,property,source,param,source,the,spring,property,source,to,adapt,return,an,link,iterable,containing,a,single,newly,adapted,link,spring,configuration,property,source;public,static,iterable,configuration,property,source,from,property,source,source,return,collections,singleton,spring,configuration,property,source,from,source
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> get(Environment environment);1507173536;Return a set of {@link ConfigurationPropertySource} instances that have previously_been {@link #attach(Environment) attached} to the {@link Environment}._@param environment the source environment (must be an instance of_{@link ConfigurableEnvironment})_@return an iterable set of configuration property sources_@throws IllegalStateException if not configuration property sources have been_attached;public static Iterable<ConfigurationPropertySource> get(Environment environment) {_		Assert.isInstanceOf(ConfigurableEnvironment.class, environment)__		MutablePropertySources sources = ((ConfigurableEnvironment) environment)_				.getPropertySources()__		ConfigurationPropertySourcesPropertySource attached = (ConfigurationPropertySourcesPropertySource) sources_				.get(ATTACHED_PROPERTY_SOURCE_NAME)__		if (attached == null) {_			return from(sources)__		}_		return attached.getSource()__	};return,a,set,of,link,configuration,property,source,instances,that,have,previously,been,link,attach,environment,attached,to,the,link,environment,param,environment,the,source,environment,must,be,an,instance,of,link,configurable,environment,return,an,iterable,set,of,configuration,property,sources,throws,illegal,state,exception,if,not,configuration,property,sources,have,been,attached;public,static,iterable,configuration,property,source,get,environment,environment,assert,is,instance,of,configurable,environment,class,environment,mutable,property,sources,sources,configurable,environment,environment,get,property,sources,configuration,property,sources,property,source,attached,configuration,property,sources,property,source,sources,get,if,attached,null,return,from,sources,return,attached,get,source
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> get(Environment environment);1509136149;Return a set of {@link ConfigurationPropertySource} instances that have previously_been {@link #attach(Environment) attached} to the {@link Environment}._@param environment the source environment (must be an instance of_{@link ConfigurableEnvironment})_@return an iterable set of configuration property sources_@throws IllegalStateException if not configuration property sources have been_attached;public static Iterable<ConfigurationPropertySource> get(Environment environment) {_		Assert.isInstanceOf(ConfigurableEnvironment.class, environment)__		MutablePropertySources sources = ((ConfigurableEnvironment) environment)_				.getPropertySources()__		ConfigurationPropertySourcesPropertySource attached = (ConfigurationPropertySourcesPropertySource) sources_				.get(ATTACHED_PROPERTY_SOURCE_NAME)__		if (attached == null) {_			return from(sources)__		}_		return attached.getSource()__	};return,a,set,of,link,configuration,property,source,instances,that,have,previously,been,link,attach,environment,attached,to,the,link,environment,param,environment,the,source,environment,must,be,an,instance,of,link,configurable,environment,return,an,iterable,set,of,configuration,property,sources,throws,illegal,state,exception,if,not,configuration,property,sources,have,been,attached;public,static,iterable,configuration,property,source,get,environment,environment,assert,is,instance,of,configurable,environment,class,environment,mutable,property,sources,sources,configurable,environment,environment,get,property,sources,configuration,property,sources,property,source,attached,configuration,property,sources,property,source,sources,get,if,attached,null,return,from,sources,return,attached,get,source
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> get(Environment environment);1518486593;Return a set of {@link ConfigurationPropertySource} instances that have previously_been {@link #attach(Environment) attached} to the {@link Environment}._@param environment the source environment (must be an instance of_{@link ConfigurableEnvironment})_@return an iterable set of configuration property sources_@throws IllegalStateException if not configuration property sources have been_attached;public static Iterable<ConfigurationPropertySource> get(Environment environment) {_		Assert.isInstanceOf(ConfigurableEnvironment.class, environment)__		MutablePropertySources sources = ((ConfigurableEnvironment) environment)_				.getPropertySources()__		ConfigurationPropertySourcesPropertySource attached = (ConfigurationPropertySourcesPropertySource) sources_				.get(ATTACHED_PROPERTY_SOURCE_NAME)__		if (attached == null) {_			return from(sources)__		}_		return attached.getSource()__	};return,a,set,of,link,configuration,property,source,instances,that,have,previously,been,link,attach,environment,attached,to,the,link,environment,param,environment,the,source,environment,must,be,an,instance,of,link,configurable,environment,return,an,iterable,set,of,configuration,property,sources,throws,illegal,state,exception,if,not,configuration,property,sources,have,been,attached;public,static,iterable,configuration,property,source,get,environment,environment,assert,is,instance,of,configurable,environment,class,environment,mutable,property,sources,sources,configurable,environment,environment,get,property,sources,configuration,property,sources,property,source,attached,configuration,property,sources,property,source,sources,get,if,attached,null,return,from,sources,return,attached,get,source
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> get(Environment environment);1521155657;Return a set of {@link ConfigurationPropertySource} instances that have previously_been {@link #attach(Environment) attached} to the {@link Environment}._@param environment the source environment (must be an instance of_{@link ConfigurableEnvironment})_@return an iterable set of configuration property sources_@throws IllegalStateException if not configuration property sources have been_attached;public static Iterable<ConfigurationPropertySource> get(Environment environment) {_		Assert.isInstanceOf(ConfigurableEnvironment.class, environment)__		MutablePropertySources sources = ((ConfigurableEnvironment) environment)_				.getPropertySources()__		ConfigurationPropertySourcesPropertySource attached = (ConfigurationPropertySourcesPropertySource) sources_				.get(ATTACHED_PROPERTY_SOURCE_NAME)__		if (attached == null) {_			return from(sources)__		}_		return attached.getSource()__	};return,a,set,of,link,configuration,property,source,instances,that,have,previously,been,link,attach,environment,attached,to,the,link,environment,param,environment,the,source,environment,must,be,an,instance,of,link,configurable,environment,return,an,iterable,set,of,configuration,property,sources,throws,illegal,state,exception,if,not,configuration,property,sources,have,been,attached;public,static,iterable,configuration,property,source,get,environment,environment,assert,is,instance,of,configurable,environment,class,environment,mutable,property,sources,sources,configurable,environment,environment,get,property,sources,configuration,property,sources,property,source,attached,configuration,property,sources,property,source,sources,get,if,attached,null,return,from,sources,return,attached,get,source
ConfigurationPropertySources -> public static Iterable<ConfigurationPropertySource> get(Environment environment);1531229894;Return a set of {@link ConfigurationPropertySource} instances that have previously_been {@link #attach(Environment) attached} to the {@link Environment}._@param environment the source environment (must be an instance of_{@link ConfigurableEnvironment})_@return an iterable set of configuration property sources_@throws IllegalStateException if not configuration property sources have been_attached;public static Iterable<ConfigurationPropertySource> get(Environment environment) {_		Assert.isInstanceOf(ConfigurableEnvironment.class, environment)__		MutablePropertySources sources = ((ConfigurableEnvironment) environment)_				.getPropertySources()__		ConfigurationPropertySourcesPropertySource attached = (ConfigurationPropertySourcesPropertySource) sources_				.get(ATTACHED_PROPERTY_SOURCE_NAME)__		if (attached == null) {_			return from(sources)__		}_		return attached.getSource()__	};return,a,set,of,link,configuration,property,source,instances,that,have,previously,been,link,attach,environment,attached,to,the,link,environment,param,environment,the,source,environment,must,be,an,instance,of,link,configurable,environment,return,an,iterable,set,of,configuration,property,sources,throws,illegal,state,exception,if,not,configuration,property,sources,have,been,attached;public,static,iterable,configuration,property,source,get,environment,environment,assert,is,instance,of,configurable,environment,class,environment,mutable,property,sources,sources,configurable,environment,environment,get,property,sources,configuration,property,sources,property,source,attached,configuration,property,sources,property,source,sources,get,if,attached,null,return,from,sources,return,attached,get,source
