commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public URL findResource(String name) {     return null. }
false;public;1;4;;@Override public Enumeration<URL> findResources(String name) throws IOException {     return Collections.emptyEnumeration(). }
false;public;2;12;;@Override public Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {     synchronized (getClassLoadingLock(name)) {         Class<?> result = findExistingLoadedClass(name).         result = (result != null) ? result : doLoadClass(name).         if (result == null) {             throw new ClassNotFoundException(name).         }         return resolveIfNecessary(result, resolve).     } }
false;private;1;5;;private Class<?> findExistingLoadedClass(String name) {     Class<?> resultClass = findLoadedClass0(name).     resultClass = (resultClass != null) ? resultClass : findLoadedClass(name).     return resultClass. }
false;private;1;9;;private Class<?> doLoadClass(String name) throws ClassNotFoundException {     checkPackageAccess(name).     if ((this.delegate || filter(name, true))) {         Class<?> result = loadFromParent(name).         return (result != null) ? result : findClassIgnoringNotFound(name).     }     Class<?> result = findClassIgnoringNotFound(name).     return (result != null) ? result : loadFromParent(name). }
false;private;2;6;;private Class<?> resolveIfNecessary(Class<?> resultClass, boolean resolve) {     if (resolve) {         resolveClass(resultClass).     }     return (resultClass). }
false;protected;1;7;;@Override protected void addURL(URL url) {     // Ignore URLs added by the Tomcat 8 implementation (see gh-919)     if (logger.isTraceEnabled()) {         logger.trace("Ignoring request to add " + url + " to the tomcat classloader").     } }
false;private;1;11;;private Class<?> loadFromParent(String name) {     if (this.parent == null) {         return null.     }     try {         return Class.forName(name, false, this.parent).     } catch (ClassNotFoundException ex) {         return null.     } }
false;private;1;8;;private Class<?> findClassIgnoringNotFound(String name) {     try {         return findClass(name).     } catch (ClassNotFoundException ex) {         return null.     } }
false;private;1;12;;private void checkPackageAccess(String name) throws ClassNotFoundException {     if (this.securityManager != null && name.lastIndexOf('.') >= 0) {         try {             this.securityManager.checkPackageAccess(name.substring(0, name.lastIndexOf('.'))).         } catch (SecurityException ex) {             throw new ClassNotFoundException("Security Violation, attempt to use " + "Restricted Class: " + name, ex).         }     } }
