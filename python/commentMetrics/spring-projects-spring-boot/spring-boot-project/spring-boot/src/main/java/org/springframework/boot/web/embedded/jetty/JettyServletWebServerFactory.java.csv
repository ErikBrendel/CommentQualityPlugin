commented;modifiers;parameterAmount;loc;comment;code
false;public;1;20;;@Override public WebServer getWebServer(ServletContextInitializer... initializers) {     JettyEmbeddedWebAppContext context = new JettyEmbeddedWebAppContext().     int port = (getPort() >= 0) ? getPort() : 0.     InetSocketAddress address = new InetSocketAddress(getAddress(), port).     Server server = createServer(address).     configureWebAppContext(context, initializers).     server.setHandler(addHandlerWrappers(context)).     this.logger.info("Server initialized with port: " + port).     if (getSsl() != null && getSsl().isEnabled()) {         customizeSsl(server, address).     }     for (JettyServerCustomizer customizer : getServerCustomizers()) {         customizer.customize(server).     }     if (this.useForwardHeaders) {         new ForwardHeadersCustomizer().customize(server).     }     return getJettyWebServer(server). }
false;private;1;5;;private Server createServer(InetSocketAddress address) {     Server server = new Server(getThreadPool()).     server.setConnectors(new Connector[] { createConnector(address, server) }).     return server. }
false;private;2;13;;private AbstractConnector createConnector(InetSocketAddress address, Server server) {     ServerConnector connector = new ServerConnector(server, this.acceptors, this.selectors).     connector.setHost(address.getHostString()).     connector.setPort(address.getPort()).     for (ConnectionFactory connectionFactory : connector.getConnectionFactories()) {         if (connectionFactory instanceof HttpConfiguration.ConnectionFactory) {             ((HttpConfiguration.ConnectionFactory) connectionFactory).getHttpConfiguration().setSendServerVersion(false).         }     }     return connector. }
false;private;1;11;;private Handler addHandlerWrappers(Handler handler) {     if (getCompression() != null && getCompression().getEnabled()) {         handler = applyWrapper(handler, JettyHandlerWrappers.createGzipHandlerWrapper(getCompression())).     }     if (StringUtils.hasText(getServerHeader())) {         handler = applyWrapper(handler, JettyHandlerWrappers.createServerHeaderHandlerWrapper(getServerHeader())).     }     return handler. }
false;private;2;4;;private Handler applyWrapper(Handler handler, HandlerWrapper wrapper) {     wrapper.setHandler(handler).     return wrapper. }
false;private;2;4;;private void customizeSsl(Server server, InetSocketAddress address) {     new SslServerCustomizer(address, getSsl(), getSslStoreProvider(), getHttp2()).customize(server). }
true;protected,final;2;27;/**  * Configure the given Jetty {@link WebAppContext} for use.  * @param context the context to configure  * @param initializers the set of initializers to apply  */ ;/**  * Configure the given Jetty {@link WebAppContext} for use.  * @param context the context to configure  * @param initializers the set of initializers to apply  */ protected final void configureWebAppContext(WebAppContext context, ServletContextInitializer... initializers) {     Assert.notNull(context, "Context must not be null").     context.setTempDirectory(getTempDirectory()).     if (this.resourceLoader != null) {         context.setClassLoader(this.resourceLoader.getClassLoader()).     }     String contextPath = getContextPath().     context.setContextPath(StringUtils.hasLength(contextPath) ? contextPath : "/").     context.setDisplayName(getDisplayName()).     configureDocumentRoot(context).     if (isRegisterDefaultServlet()) {         addDefaultServlet(context).     }     if (shouldRegisterJspServlet()) {         addJspServlet(context).         context.addBean(new JasperInitializer(context), true).     }     addLocaleMappings(context).     ServletContextInitializer[] initializersToUse = mergeInitializers(initializers).     Configuration[] configurations = getWebAppContextConfigurations(context, initializersToUse).     context.setConfigurations(configurations).     context.setThrowUnavailableOnStartupException(true).     configureSession(context).     postProcessWebAppContext(context). }
false;private;1;13;;private void configureSession(WebAppContext context) {     SessionHandler handler = context.getSessionHandler().     Duration sessionTimeout = getSession().getTimeout().     handler.setMaxInactiveInterval(isNegative(sessionTimeout) ? -1 : (int) sessionTimeout.getSeconds()).     if (getSession().isPersistent()) {         DefaultSessionCache cache = new DefaultSessionCache(handler).         FileSessionDataStore store = new FileSessionDataStore().         store.setStoreDir(getValidSessionStoreDir()).         cache.setSessionDataStore(store).         handler.setSessionCache(cache).     } }
false;private;1;3;;private boolean isNegative(Duration sessionTimeout) {     return sessionTimeout == null || sessionTimeout.isNegative(). }
false;private;1;4;;private void addLocaleMappings(WebAppContext context) {     getLocaleCharsetMappings().forEach((locale, charset) -> context.addLocaleEncoding(locale.toString(), charset.toString())). }
false;private;0;4;;private File getTempDirectory() {     String temp = System.getProperty("java.io.tmpdir").     return (temp != null) ? new File(temp) : null. }
false;private;1;23;;private void configureDocumentRoot(WebAppContext handler) {     File root = getValidDocumentRoot().     File docBase = (root != null) ? root : createTempDir("jetty-docbase").     try {         List<Resource> resources = new ArrayList<>().         Resource rootResource = (docBase.isDirectory() ? Resource.newResource(docBase.getCanonicalFile()) : JarResource.newJarResource(Resource.newResource(docBase))).         resources.add((root != null) ? new LoaderHidingResource(rootResource) : rootResource).         for (URL resourceJarUrl : this.getUrlsOfJarsWithMetaInfResources()) {             Resource resource = createResource(resourceJarUrl).             if (resource.exists() && resource.isDirectory()) {                 resources.add(resource).             }         }         handler.setBaseResource(new ResourceCollection(resources.toArray(new Resource[0]))).     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
false;private;1;9;;private Resource createResource(URL url) throws Exception {     if ("file".equals(url.getProtocol())) {         File file = new File(url.toURI()).         if (file.isFile()) {             return Resource.newResource("jar:" + url + "!/META-INF/resources").         }     }     return Resource.newResource(url + "META-INF/resources"). }
true;protected,final;1;10;/**  * Add Jetty's {@code DefaultServlet} to the given {@link WebAppContext}.  * @param context the jetty {@link WebAppContext}  */ ;/**  * Add Jetty's {@code DefaultServlet} to the given {@link WebAppContext}.  * @param context the jetty {@link WebAppContext}  */ protected final void addDefaultServlet(WebAppContext context) {     Assert.notNull(context, "Context must not be null").     ServletHolder holder = new ServletHolder().     holder.setName("default").     holder.setClassName("org.eclipse.jetty.servlet.DefaultServlet").     holder.setInitParameter("dirAllowed", "false").     holder.setInitOrder(1).     context.getServletHandler().addServletWithMapping(holder, "/").     context.getServletHandler().getServletMapping("/").setDefault(true). }
true;protected,final;1;14;/**  * Add Jetty's {@code JspServlet} to the given {@link WebAppContext}.  * @param context the jetty {@link WebAppContext}  */ ;/**  * Add Jetty's {@code JspServlet} to the given {@link WebAppContext}.  * @param context the jetty {@link WebAppContext}  */ protected final void addJspServlet(WebAppContext context) {     Assert.notNull(context, "Context must not be null").     ServletHolder holder = new ServletHolder().     holder.setName("jsp").     holder.setClassName(getJsp().getClassName()).     holder.setInitParameter("fork", "false").     holder.setInitParameters(getJsp().getInitParameters()).     holder.setInitOrder(3).     context.getServletHandler().addServlet(holder).     ServletMapping mapping = new ServletMapping().     mapping.setServletName("jsp").     mapping.setPathSpecs(new String[] { "*.jsp", "*.jspx" }).     context.getServletHandler().addServletMapping(mapping). }
true;protected;2;10;/**  * Return the Jetty {@link Configuration}s that should be applied to the server.  * @param webAppContext the Jetty {@link WebAppContext}  * @param initializers the {@link ServletContextInitializer}s to apply  * @return configurations to apply  */ ;/**  * Return the Jetty {@link Configuration}s that should be applied to the server.  * @param webAppContext the Jetty {@link WebAppContext}  * @param initializers the {@link ServletContextInitializer}s to apply  * @return configurations to apply  */ protected Configuration[] getWebAppContextConfigurations(WebAppContext webAppContext, ServletContextInitializer... initializers) {     List<Configuration> configurations = new ArrayList<>().     configurations.add(getServletContextInitializerConfiguration(webAppContext, initializers)).     configurations.addAll(getConfigurations()).     configurations.add(getErrorPageConfiguration()).     configurations.add(getMimeTypeConfiguration()).     return configurations.toArray(new Configuration[0]). }
false;public;1;6;;@Override public void configure(WebAppContext context) throws Exception {     ErrorHandler errorHandler = context.getErrorHandler().     context.setErrorHandler(new JettyEmbeddedErrorHandler(errorHandler)).     addJettyErrorPages(errorHandler, getErrorPages()). }
true;private;0;12;/**  * Create a configuration object that adds error handlers.  * @return a configuration object for adding error pages  */ ;/**  * Create a configuration object that adds error handlers.  * @return a configuration object for adding error pages  */ private Configuration getErrorPageConfiguration() {     return new AbstractConfiguration() {          @Override         public void configure(WebAppContext context) throws Exception {             ErrorHandler errorHandler = context.getErrorHandler().             context.setErrorHandler(new JettyEmbeddedErrorHandler(errorHandler)).             addJettyErrorPages(errorHandler, getErrorPages()).         }     }. }
false;public;1;8;;@Override public void configure(WebAppContext context) throws Exception {     MimeTypes mimeTypes = context.getMimeTypes().     for (MimeMappings.Mapping mapping : getMimeMappings()) {         mimeTypes.addMimeMapping(mapping.getExtension(), mapping.getMimeType()).     } }
true;private;0;14;/**  * Create a configuration object that adds mime type mappings.  * @return a configuration object for adding mime type mappings  */ ;/**  * Create a configuration object that adds mime type mappings.  * @return a configuration object for adding mime type mappings  */ private Configuration getMimeTypeConfiguration() {     return new AbstractConfiguration() {          @Override         public void configure(WebAppContext context) throws Exception {             MimeTypes mimeTypes = context.getMimeTypes().             for (MimeMappings.Mapping mapping : getMimeMappings()) {                 mimeTypes.addMimeMapping(mapping.getExtension(), mapping.getMimeType()).             }         }     }. }
true;protected;2;4;/**  * Return a Jetty {@link Configuration} that will invoke the specified  * {@link ServletContextInitializer}s. By default this method will return a  * {@link ServletContextInitializerConfiguration}.  * @param webAppContext the Jetty {@link WebAppContext}  * @param initializers the {@link ServletContextInitializer}s to apply  * @return the {@link Configuration} instance  */ ;/**  * Return a Jetty {@link Configuration} that will invoke the specified  * {@link ServletContextInitializer}s. By default this method will return a  * {@link ServletContextInitializerConfiguration}.  * @param webAppContext the Jetty {@link WebAppContext}  * @param initializers the {@link ServletContextInitializer}s to apply  * @return the {@link Configuration} instance  */ protected Configuration getServletContextInitializerConfiguration(WebAppContext webAppContext, ServletContextInitializer... initializers) {     return new ServletContextInitializerConfiguration(initializers). }
true;protected;1;2;/**  * Post process the Jetty {@link WebAppContext} before it's used with the Jetty  * Server. Subclasses can override this method to apply additional processing to the  * {@link WebAppContext}.  * @param webAppContext the Jetty {@link WebAppContext}  */ ;/**  * Post process the Jetty {@link WebAppContext} before it's used with the Jetty  * Server. Subclasses can override this method to apply additional processing to the  * {@link WebAppContext}.  * @param webAppContext the Jetty {@link WebAppContext}  */ protected void postProcessWebAppContext(WebAppContext webAppContext) { }
true;protected;1;3;/**  * Factory method called to create the {@link JettyWebServer}. Subclasses can override  * this method to return a different {@link JettyWebServer} or apply additional  * processing to the Jetty server.  * @param server the Jetty server.  * @return a new {@link JettyWebServer} instance  */ ;/**  * Factory method called to create the {@link JettyWebServer}. Subclasses can override  * this method to return a different {@link JettyWebServer} or apply additional  * processing to the Jetty server.  * @param server the Jetty server.  * @return a new {@link JettyWebServer} instance  */ protected JettyWebServer getJettyWebServer(Server server) {     return new JettyWebServer(server, getPort() >= 0). }
false;public;1;4;;@Override public void setResourceLoader(ResourceLoader resourceLoader) {     this.resourceLoader = resourceLoader. }
false;public;1;4;;@Override public void setUseForwardHeaders(boolean useForwardHeaders) {     this.useForwardHeaders = useForwardHeaders. }
false;public;1;4;;@Override public void setAcceptors(int acceptors) {     this.acceptors = acceptors. }
false;public;1;4;;@Override public void setSelectors(int selectors) {     this.selectors = selectors. }
true;public;1;5;/**  * Sets {@link JettyServerCustomizer}s that will be applied to the {@link Server}  * before it is started. Calling this method will replace any existing customizers.  * @param customizers the Jetty customizers to apply  */ ;/**  * Sets {@link JettyServerCustomizer}s that will be applied to the {@link Server}  * before it is started. Calling this method will replace any existing customizers.  * @param customizers the Jetty customizers to apply  */ public void setServerCustomizers(Collection<? extends JettyServerCustomizer> customizers) {     Assert.notNull(customizers, "Customizers must not be null").     this.jettyServerCustomizers = new ArrayList<>(customizers). }
true;public;0;3;/**  * Returns a mutable collection of Jetty {@link JettyServerCustomizer}s that will be  * applied to the {@link Server} before the it is created.  * @return the {@link JettyServerCustomizer}s  */ ;/**  * Returns a mutable collection of Jetty {@link JettyServerCustomizer}s that will be  * applied to the {@link Server} before the it is created.  * @return the {@link JettyServerCustomizer}s  */ public Collection<JettyServerCustomizer> getServerCustomizers() {     return this.jettyServerCustomizers. }
false;public;1;5;;@Override public void addServerCustomizers(JettyServerCustomizer... customizers) {     Assert.notNull(customizers, "Customizers must not be null").     this.jettyServerCustomizers.addAll(Arrays.asList(customizers)). }
true;public;1;4;/**  * Sets Jetty {@link Configuration}s that will be applied to the {@link WebAppContext}  * before the server is created. Calling this method will replace any existing  * configurations.  * @param configurations the Jetty configurations to apply  */ ;/**  * Sets Jetty {@link Configuration}s that will be applied to the {@link WebAppContext}  * before the server is created. Calling this method will replace any existing  * configurations.  * @param configurations the Jetty configurations to apply  */ public void setConfigurations(Collection<? extends Configuration> configurations) {     Assert.notNull(configurations, "Configurations must not be null").     this.configurations = new ArrayList<>(configurations). }
true;public;0;3;/**  * Returns a mutable collection of Jetty {@link Configuration}s that will be applied  * to the {@link WebAppContext} before the server is created.  * @return the Jetty {@link Configuration}s  */ ;/**  * Returns a mutable collection of Jetty {@link Configuration}s that will be applied  * to the {@link WebAppContext} before the server is created.  * @return the Jetty {@link Configuration}s  */ public Collection<Configuration> getConfigurations() {     return this.configurations. }
true;public;1;4;/**  * Add {@link Configuration}s that will be applied to the {@link WebAppContext} before  * the server is started.  * @param configurations the configurations to add  */ ;/**  * Add {@link Configuration}s that will be applied to the {@link WebAppContext} before  * the server is started.  * @param configurations the configurations to add  */ public void addConfigurations(Configuration... configurations) {     Assert.notNull(configurations, "Configurations must not be null").     this.configurations.addAll(Arrays.asList(configurations)). }
true;public;0;3;/**  * Returns a Jetty {@link ThreadPool} that should be used by the {@link Server}.  * @return a Jetty {@link ThreadPool} or {@code null}  */ ;/**  * Returns a Jetty {@link ThreadPool} that should be used by the {@link Server}.  * @return a Jetty {@link ThreadPool} or {@code null}  */ public ThreadPool getThreadPool() {     return this.threadPool. }
true;public;1;3;/**  * Set a Jetty {@link ThreadPool} that should be used by the {@link Server}. If set to  * {@code null} (default), the {@link Server} creates a {@link ThreadPool} implicitly.  * @param threadPool a Jetty ThreadPool to be used  */ ;/**  * Set a Jetty {@link ThreadPool} that should be used by the {@link Server}. If set to  * {@code null} (default), the {@link Server} creates a {@link ThreadPool} implicitly.  * @param threadPool a Jetty ThreadPool to be used  */ public void setThreadPool(ThreadPool threadPool) {     this.threadPool = threadPool. }
false;private;2;22;;private void addJettyErrorPages(ErrorHandler errorHandler, Collection<ErrorPage> errorPages) {     if (errorHandler instanceof ErrorPageErrorHandler) {         ErrorPageErrorHandler handler = (ErrorPageErrorHandler) errorHandler.         for (ErrorPage errorPage : errorPages) {             if (errorPage.isGlobal()) {                 handler.addErrorPage(ErrorPageErrorHandler.GLOBAL_ERROR_PAGE, errorPage.getPath()).             } else {                 if (errorPage.getExceptionName() != null) {                     handler.addErrorPage(errorPage.getExceptionName(), errorPage.getPath()).                 } else {                     handler.addErrorPage(errorPage.getStatusCode(), errorPage.getPath()).                 }             }         }     } }
false;public;1;7;;@Override public Resource addPath(String path) throws IOException, MalformedURLException {     if (path.startsWith("/org/springframework/boot")) {         return null.     }     return this.delegate.addPath(path). }
false;public;1;4;;@Override public boolean isContainedIn(Resource resource) throws MalformedURLException {     return this.delegate.isContainedIn(resource). }
false;public;0;4;;@Override public void close() {     this.delegate.close(). }
false;public;0;4;;@Override public boolean exists() {     return this.delegate.exists(). }
false;public;0;4;;@Override public boolean isDirectory() {     return this.delegate.isDirectory(). }
false;public;0;4;;@Override public long lastModified() {     return this.delegate.lastModified(). }
false;public;0;4;;@Override public long length() {     return this.delegate.length(). }
false;public;0;5;;@Override @Deprecated public URL getURL() {     return this.delegate.getURL(). }
false;public;0;4;;@Override public File getFile() throws IOException {     return this.delegate.getFile(). }
false;public;0;4;;@Override public String getName() {     return this.delegate.getName(). }
false;public;0;4;;@Override public InputStream getInputStream() throws IOException {     return this.delegate.getInputStream(). }
false;public;0;4;;@Override public ReadableByteChannel getReadableByteChannel() throws IOException {     return this.delegate.getReadableByteChannel(). }
false;public;0;4;;@Override public boolean delete() throws SecurityException {     return this.delegate.delete(). }
false;public;1;4;;@Override public boolean renameTo(Resource dest) throws SecurityException {     return this.delegate.renameTo(dest). }
false;public;0;4;;@Override public String[] list() {     return this.delegate.list(). }
