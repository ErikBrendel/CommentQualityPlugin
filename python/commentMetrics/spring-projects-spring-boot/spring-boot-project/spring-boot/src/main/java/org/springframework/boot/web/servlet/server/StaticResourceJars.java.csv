commented;modifiers;parameterAmount;loc;comment;code
false;;0;12;;List<URL> getUrls() {     ClassLoader classLoader = getClass().getClassLoader().     if (classLoader instanceof URLClassLoader) {         return getUrlsFrom(((URLClassLoader) classLoader).getURLs()).     } else {         return getUrlsFrom(Stream.of(ManagementFactory.getRuntimeMXBean().getClassPath().split(File.pathSeparator)).map(this::toUrl).toArray(URL[]::new)).     } }
false;;1;7;;List<URL> getUrlsFrom(URL... urls) {     List<URL> resourceJarUrls = new ArrayList<>().     for (URL url : urls) {         addUrl(resourceJarUrls, url).     }     return resourceJarUrls. }
false;private;1;9;;private URL toUrl(String classPathEntry) {     try {         return new File(classPathEntry).toURI().toURL().     } catch (MalformedURLException ex) {         throw new IllegalArgumentException("URL could not be created from '" + classPathEntry + "'", ex).     } }
false;private;1;12;;private File toFile(URL url) {     try {         return new File(url.toURI()).     } catch (URISyntaxException ex) {         throw new IllegalStateException("Failed to create File from URL '" + url + "'").     } catch (IllegalArgumentException ex) {         return null.     } }
false;private;2;19;;private void addUrl(List<URL> urls, URL url) {     try {         if (!"file".equals(url.getProtocol())) {             addUrlConnection(urls, url, url.openConnection()).         } else {             File file = toFile(url).             if (file != null) {                 addUrlFile(urls, url, file).             } else {                 addUrlConnection(urls, url, url.openConnection()).             }         }     } catch (IOException ex) {         throw new IllegalStateException(ex).     } }
false;private;3;6;;private void addUrlFile(List<URL> urls, URL url, File file) {     if ((file.isDirectory() && new File(file, "META-INF/resources").isDirectory()) || isResourcesJar(file)) {         urls.add(url).     } }
false;private;3;6;;private void addUrlConnection(List<URL> urls, URL url, URLConnection connection) {     if (connection instanceof JarURLConnection && isResourcesJar((JarURLConnection) connection)) {         urls.add(url).     } }
false;private;1;8;;private boolean isResourcesJar(JarURLConnection connection) {     try {         return isResourcesJar(connection.getJarFile()).     } catch (IOException ex) {         return false.     } }
false;private;1;8;;private boolean isResourcesJar(File file) {     try {         return isResourcesJar(new JarFile(file)).     } catch (IOException ex) {         return false.     } }
false;private;1;9;;private boolean isResourcesJar(JarFile jar) throws IOException {     try {         return jar.getName().endsWith(".jar") && (jar.getJarEntry("META-INF/resources") != null).     } finally {         jar.close().     } }
