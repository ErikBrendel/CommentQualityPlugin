commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Set if the {@link ClientHttpRequestFactory} should be detected based on the  * classpath. Default if {@code true}.  * @param detectRequestFactory if the {@link ClientHttpRequestFactory} should be  * detected  * @return a new builder instance  */ ;/**  * Set if the {@link ClientHttpRequestFactory} should be detected based on the  * classpath. Default if {@code true}.  * @param detectRequestFactory if the {@link ClientHttpRequestFactory} should be  * detected  * @return a new builder instance  */ public RestTemplateBuilder detectRequestFactory(boolean detectRequestFactory) {     return new RestTemplateBuilder(detectRequestFactory, this.rootUri, this.messageConverters, this.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.restTemplateCustomizers, this.requestFactoryCustomizer, this.interceptors). }
true;public;1;7;/**  * Set a root URL that should be applied to each request that starts with {@code '/'}.  * See {@link RootUriTemplateHandler} for details.  * @param rootUri the root URI or {@code null}  * @return a new builder instance  */ ;/**  * Set a root URL that should be applied to each request that starts with {@code '/'}.  * See {@link RootUriTemplateHandler} for details.  * @param rootUri the root URI or {@code null}  * @return a new builder instance  */ public RestTemplateBuilder rootUri(String rootUri) {     return new RestTemplateBuilder(this.detectRequestFactory, rootUri, this.messageConverters, this.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.restTemplateCustomizers, this.requestFactoryCustomizer, this.interceptors). }
true;public;1;5;/**  * Set the {@link HttpMessageConverter HttpMessageConverters} that should be used with  * the {@link RestTemplate}. Setting this value will replace any previously configured  * converters and any converters configured on the builder will replace RestTemplate's  * default converters.  * @param messageConverters the converters to set  * @return a new builder instance  * @see #additionalMessageConverters(HttpMessageConverter...)  */ ;/**  * Set the {@link HttpMessageConverter HttpMessageConverters} that should be used with  * the {@link RestTemplate}. Setting this value will replace any previously configured  * converters and any converters configured on the builder will replace RestTemplate's  * default converters.  * @param messageConverters the converters to set  * @return a new builder instance  * @see #additionalMessageConverters(HttpMessageConverter...)  */ public RestTemplateBuilder messageConverters(HttpMessageConverter<?>... messageConverters) {     Assert.notNull(messageConverters, "MessageConverters must not be null").     return messageConverters(Arrays.asList(messageConverters)). }
true;public;1;10;/**  * Set the {@link HttpMessageConverter HttpMessageConverters} that should be used with  * the {@link RestTemplate}. Setting this value will replace any previously configured  * converters and any converters configured on the builder will replace RestTemplate's  * default converters.  * @param messageConverters the converters to set  * @return a new builder instance  * @see #additionalMessageConverters(HttpMessageConverter...)  */ ;/**  * Set the {@link HttpMessageConverter HttpMessageConverters} that should be used with  * the {@link RestTemplate}. Setting this value will replace any previously configured  * converters and any converters configured on the builder will replace RestTemplate's  * default converters.  * @param messageConverters the converters to set  * @return a new builder instance  * @see #additionalMessageConverters(HttpMessageConverter...)  */ public RestTemplateBuilder messageConverters(Collection<? extends HttpMessageConverter<?>> messageConverters) {     Assert.notNull(messageConverters, "MessageConverters must not be null").     return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, Collections.unmodifiableSet(new LinkedHashSet<HttpMessageConverter<?>>(messageConverters)), this.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.restTemplateCustomizers, this.requestFactoryCustomizer, this.interceptors). }
true;public;1;5;/**  * Add additional {@link HttpMessageConverter HttpMessageConverters} that should be  * used with the {@link RestTemplate}. Any converters configured on the builder will  * replace RestTemplate's default converters.  * @param messageConverters the converters to add  * @return a new builder instance  * @see #messageConverters(HttpMessageConverter...)  */ ;/**  * Add additional {@link HttpMessageConverter HttpMessageConverters} that should be  * used with the {@link RestTemplate}. Any converters configured on the builder will  * replace RestTemplate's default converters.  * @param messageConverters the converters to add  * @return a new builder instance  * @see #messageConverters(HttpMessageConverter...)  */ public RestTemplateBuilder additionalMessageConverters(HttpMessageConverter<?>... messageConverters) {     Assert.notNull(messageConverters, "MessageConverters must not be null").     return additionalMessageConverters(Arrays.asList(messageConverters)). }
true;public;1;9;/**  * Add additional {@link HttpMessageConverter HttpMessageConverters} that should be  * used with the {@link RestTemplate}. Any converters configured on the builder will  * replace RestTemplate's default converters.  * @param messageConverters the converters to add  * @return a new builder instance  * @see #messageConverters(HttpMessageConverter...)  */ ;/**  * Add additional {@link HttpMessageConverter HttpMessageConverters} that should be  * used with the {@link RestTemplate}. Any converters configured on the builder will  * replace RestTemplate's default converters.  * @param messageConverters the converters to add  * @return a new builder instance  * @see #messageConverters(HttpMessageConverter...)  */ public RestTemplateBuilder additionalMessageConverters(Collection<? extends HttpMessageConverter<?>> messageConverters) {     Assert.notNull(messageConverters, "MessageConverters must not be null").     return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, append(this.messageConverters, messageConverters), this.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.restTemplateCustomizers, this.requestFactoryCustomizer, this.interceptors). }
true;public;0;8;/**  * Set the {@link HttpMessageConverter HttpMessageConverters} that should be used with  * the {@link RestTemplate} to the default set. Calling this method will replace any  * previously defined converters.  * @return a new builder instance  * @see #messageConverters(HttpMessageConverter...)  */ ;/**  * Set the {@link HttpMessageConverter HttpMessageConverters} that should be used with  * the {@link RestTemplate} to the default set. Calling this method will replace any  * previously defined converters.  * @return a new builder instance  * @see #messageConverters(HttpMessageConverter...)  */ public RestTemplateBuilder defaultMessageConverters() {     return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, Collections.unmodifiableSet(new LinkedHashSet<>(new RestTemplate().getMessageConverters())), this.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.restTemplateCustomizers, this.requestFactoryCustomizer, this.interceptors). }
true;public;1;5;/**  * Set the {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors} that  * should be used with the {@link RestTemplate}. Setting this value will replace any  * previously defined interceptors.  * @param interceptors the interceptors to set  * @return a new builder instance  * @since 1.4.1  * @see #additionalInterceptors(ClientHttpRequestInterceptor...)  */ ;/**  * Set the {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors} that  * should be used with the {@link RestTemplate}. Setting this value will replace any  * previously defined interceptors.  * @param interceptors the interceptors to set  * @return a new builder instance  * @since 1.4.1  * @see #additionalInterceptors(ClientHttpRequestInterceptor...)  */ public RestTemplateBuilder interceptors(ClientHttpRequestInterceptor... interceptors) {     Assert.notNull(interceptors, "interceptors must not be null").     return interceptors(Arrays.asList(interceptors)). }
true;public;1;9;/**  * Set the {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors} that  * should be used with the {@link RestTemplate}. Setting this value will replace any  * previously defined interceptors.  * @param interceptors the interceptors to set  * @return a new builder instance  * @since 1.4.1  * @see #additionalInterceptors(ClientHttpRequestInterceptor...)  */ ;/**  * Set the {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors} that  * should be used with the {@link RestTemplate}. Setting this value will replace any  * previously defined interceptors.  * @param interceptors the interceptors to set  * @return a new builder instance  * @since 1.4.1  * @see #additionalInterceptors(ClientHttpRequestInterceptor...)  */ public RestTemplateBuilder interceptors(Collection<ClientHttpRequestInterceptor> interceptors) {     Assert.notNull(interceptors, "interceptors must not be null").     return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, this.messageConverters, this.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.restTemplateCustomizers, this.requestFactoryCustomizer, Collections.unmodifiableSet(new LinkedHashSet<>(interceptors))). }
true;public;1;5;/**  * Add additional {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors}  * that should be used with the {@link RestTemplate}.  * @param interceptors the interceptors to add  * @return a new builder instance  * @since 1.4.1  * @see #interceptors(ClientHttpRequestInterceptor...)  */ ;/**  * Add additional {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors}  * that should be used with the {@link RestTemplate}.  * @param interceptors the interceptors to add  * @return a new builder instance  * @since 1.4.1  * @see #interceptors(ClientHttpRequestInterceptor...)  */ public RestTemplateBuilder additionalInterceptors(ClientHttpRequestInterceptor... interceptors) {     Assert.notNull(interceptors, "interceptors must not be null").     return additionalInterceptors(Arrays.asList(interceptors)). }
true;public;1;9;/**  * Add additional {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors}  * that should be used with the {@link RestTemplate}.  * @param interceptors the interceptors to add  * @return a new builder instance  * @since 1.4.1  * @see #interceptors(ClientHttpRequestInterceptor...)  */ ;/**  * Add additional {@link ClientHttpRequestInterceptor ClientHttpRequestInterceptors}  * that should be used with the {@link RestTemplate}.  * @param interceptors the interceptors to add  * @return a new builder instance  * @since 1.4.1  * @see #interceptors(ClientHttpRequestInterceptor...)  */ public RestTemplateBuilder additionalInterceptors(Collection<? extends ClientHttpRequestInterceptor> interceptors) {     Assert.notNull(interceptors, "interceptors must not be null").     return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, this.messageConverters, this.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.restTemplateCustomizers, this.requestFactoryCustomizer, append(this.interceptors, interceptors)). }
true;public;1;5;/**  * Set the {@link ClientHttpRequestFactory} class that should be used with the  * {@link RestTemplate}.  * @param requestFactory the request factory to use  * @return a new builder instance  */ ;/**  * Set the {@link ClientHttpRequestFactory} class that should be used with the  * {@link RestTemplate}.  * @param requestFactory the request factory to use  * @return a new builder instance  */ public RestTemplateBuilder requestFactory(Class<? extends ClientHttpRequestFactory> requestFactory) {     Assert.notNull(requestFactory, "RequestFactory must not be null").     return requestFactory(() -> createRequestFactory(requestFactory)). }
false;private;1;11;;private ClientHttpRequestFactory createRequestFactory(Class<? extends ClientHttpRequestFactory> requestFactory) {     try {         Constructor<?> constructor = requestFactory.getDeclaredConstructor().         constructor.setAccessible(true).         return (ClientHttpRequestFactory) constructor.newInstance().     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
true;public;1;9;/**  * Set the {@code Supplier} of {@link ClientHttpRequestFactory} that should be called  * each time we {@link #build()} a new {@link RestTemplate} instance.  * @param requestFactorySupplier the supplier for the request factory  * @return a new builder instance  * @since 2.0.0  */ ;/**  * Set the {@code Supplier} of {@link ClientHttpRequestFactory} that should be called  * each time we {@link #build()} a new {@link RestTemplate} instance.  * @param requestFactorySupplier the supplier for the request factory  * @return a new builder instance  * @since 2.0.0  */ public RestTemplateBuilder requestFactory(Supplier<ClientHttpRequestFactory> requestFactorySupplier) {     Assert.notNull(requestFactorySupplier, "RequestFactory Supplier must not be null").     return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, this.messageConverters, requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.restTemplateCustomizers, this.requestFactoryCustomizer, this.interceptors). }
true;public;1;7;/**  * Set the {@link UriTemplateHandler} that should be used with the  * {@link RestTemplate}.  * @param uriTemplateHandler the URI template handler to use  * @return a new builder instance  */ ;/**  * Set the {@link UriTemplateHandler} that should be used with the  * {@link RestTemplate}.  * @param uriTemplateHandler the URI template handler to use  * @return a new builder instance  */ public RestTemplateBuilder uriTemplateHandler(UriTemplateHandler uriTemplateHandler) {     Assert.notNull(uriTemplateHandler, "UriTemplateHandler must not be null").     return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, this.messageConverters, this.requestFactorySupplier, uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.restTemplateCustomizers, this.requestFactoryCustomizer, this.interceptors). }
true;public;1;8;/**  * Set the {@link ResponseErrorHandler} that should be used with the  * {@link RestTemplate}.  * @param errorHandler the error handler to use  * @return a new builder instance  */ ;/**  * Set the {@link ResponseErrorHandler} that should be used with the  * {@link RestTemplate}.  * @param errorHandler the error handler to use  * @return a new builder instance  */ public RestTemplateBuilder errorHandler(ResponseErrorHandler errorHandler) {     Assert.notNull(errorHandler, "ErrorHandler must not be null").     return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, this.messageConverters, this.requestFactorySupplier, this.uriTemplateHandler, errorHandler, this.basicAuthentication, this.restTemplateCustomizers, this.requestFactoryCustomizer, this.interceptors). }
true;public;2;8;/**  * Add HTTP basic authentication to requests. See  * {@link BasicAuthenticationInterceptor} for details.  * @param username the user name  * @param password the password  * @return a new builder instance  * @since 2.1.0  */ ;/**  * Add HTTP basic authentication to requests. See  * {@link BasicAuthenticationInterceptor} for details.  * @param username the user name  * @param password the password  * @return a new builder instance  * @since 2.1.0  */ public RestTemplateBuilder basicAuthentication(String username, String password) {     return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, this.messageConverters, this.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, new BasicAuthenticationInterceptor(username, password), this.restTemplateCustomizers, this.requestFactoryCustomizer, this.interceptors). }
true;public;1;6;/**  * Set the {@link RestTemplateCustomizer RestTemplateCustomizers} that should be  * applied to the {@link RestTemplate}. Customizers are applied in the order that they  * were added after builder configuration has been applied. Setting this value will  * replace any previously configured customizers.  * @param restTemplateCustomizers the customizers to set  * @return a new builder instance  * @see #additionalCustomizers(RestTemplateCustomizer...)  */ ;/**  * Set the {@link RestTemplateCustomizer RestTemplateCustomizers} that should be  * applied to the {@link RestTemplate}. Customizers are applied in the order that they  * were added after builder configuration has been applied. Setting this value will  * replace any previously configured customizers.  * @param restTemplateCustomizers the customizers to set  * @return a new builder instance  * @see #additionalCustomizers(RestTemplateCustomizer...)  */ public RestTemplateBuilder customizers(RestTemplateCustomizer... restTemplateCustomizers) {     Assert.notNull(restTemplateCustomizers, "RestTemplateCustomizers must not be null").     return customizers(Arrays.asList(restTemplateCustomizers)). }
true;public;1;11;/**  * Set the {@link RestTemplateCustomizer RestTemplateCustomizers} that should be  * applied to the {@link RestTemplate}. Customizers are applied in the order that they  * were added after builder configuration has been applied. Setting this value will  * replace any previously configured customizers.  * @param restTemplateCustomizers the customizers to set  * @return a new builder instance  * @see #additionalCustomizers(RestTemplateCustomizer...)  */ ;/**  * Set the {@link RestTemplateCustomizer RestTemplateCustomizers} that should be  * applied to the {@link RestTemplate}. Customizers are applied in the order that they  * were added after builder configuration has been applied. Setting this value will  * replace any previously configured customizers.  * @param restTemplateCustomizers the customizers to set  * @return a new builder instance  * @see #additionalCustomizers(RestTemplateCustomizer...)  */ public RestTemplateBuilder customizers(Collection<? extends RestTemplateCustomizer> restTemplateCustomizers) {     Assert.notNull(restTemplateCustomizers, "RestTemplateCustomizers must not be null").     return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, this.messageConverters, this.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, this.basicAuthentication, Collections.unmodifiableSet(new LinkedHashSet<RestTemplateCustomizer>(restTemplateCustomizers)), this.requestFactoryCustomizer, this.interceptors). }
true;public;1;6;/**  * Add {@link RestTemplateCustomizer RestTemplateCustomizers} that should be applied  * to the {@link RestTemplate}. Customizers are applied in the order that they were  * added after builder configuration has been applied.  * @param restTemplateCustomizers the customizers to add  * @return a new builder instance  * @see #customizers(RestTemplateCustomizer...)  */ ;/**  * Add {@link RestTemplateCustomizer RestTemplateCustomizers} that should be applied  * to the {@link RestTemplate}. Customizers are applied in the order that they were  * added after builder configuration has been applied.  * @param restTemplateCustomizers the customizers to add  * @return a new builder instance  * @see #customizers(RestTemplateCustomizer...)  */ public RestTemplateBuilder additionalCustomizers(RestTemplateCustomizer... restTemplateCustomizers) {     Assert.notNull(restTemplateCustomizers, "RestTemplateCustomizers must not be null").     return additionalCustomizers(Arrays.asList(restTemplateCustomizers)). }
true;public;1;9;/**  * Add {@link RestTemplateCustomizer RestTemplateCustomizers} that should be applied  * to the {@link RestTemplate}. Customizers are applied in the order that they were  * added after builder configuration has been applied.  * @param customizers the customizers to add  * @return a new builder instance  * @see #customizers(RestTemplateCustomizer...)  */ ;/**  * Add {@link RestTemplateCustomizer RestTemplateCustomizers} that should be applied  * to the {@link RestTemplate}. Customizers are applied in the order that they were  * added after builder configuration has been applied.  * @param customizers the customizers to add  * @return a new builder instance  * @see #customizers(RestTemplateCustomizer...)  */ public RestTemplateBuilder additionalCustomizers(Collection<? extends RestTemplateCustomizer> customizers) {     Assert.notNull(customizers, "RestTemplateCustomizers must not be null").     return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, this.messageConverters, this.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, this.basicAuthentication, append(this.restTemplateCustomizers, customizers), this.requestFactoryCustomizer, this.interceptors). }
true;public;1;8;/**  * Sets the connection timeout on the underlying {@link ClientHttpRequestFactory}.  * @param connectTimeout the connection timeout  * @return a new builder instance.  * @since 2.1.0  */ ;/**  * Sets the connection timeout on the underlying {@link ClientHttpRequestFactory}.  * @param connectTimeout the connection timeout  * @return a new builder instance.  * @since 2.1.0  */ public RestTemplateBuilder setConnectTimeout(Duration connectTimeout) {     return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, this.messageConverters, this.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.restTemplateCustomizers, this.requestFactoryCustomizer.connectTimeout(connectTimeout), this.interceptors). }
true;public;1;8;/**  * Sets the read timeout on the underlying {@link ClientHttpRequestFactory}.  * @param readTimeout the read timeout  * @return a new builder instance.  * @since 2.1.0  */ ;/**  * Sets the read timeout on the underlying {@link ClientHttpRequestFactory}.  * @param readTimeout the read timeout  * @return a new builder instance.  * @since 2.1.0  */ public RestTemplateBuilder setReadTimeout(Duration readTimeout) {     return new RestTemplateBuilder(this.detectRequestFactory, this.rootUri, this.messageConverters, this.requestFactorySupplier, this.uriTemplateHandler, this.errorHandler, this.basicAuthentication, this.restTemplateCustomizers, this.requestFactoryCustomizer.readTimeout(readTimeout), this.interceptors). }
true;public;0;3;/**  * Build a new {@link RestTemplate} instance and configure it using this builder.  * @return a configured {@link RestTemplate} instance.  * @see #build(Class)  * @see #configure(RestTemplate)  */ ;/**  * Build a new {@link RestTemplate} instance and configure it using this builder.  * @return a configured {@link RestTemplate} instance.  * @see #build(Class)  * @see #configure(RestTemplate)  */ public RestTemplate build() {     return build(RestTemplate.class). }
false;public;1;3;;/**  * Build a new {@link RestTemplate} instance of the specified type and configure it  * using this builder.  * @param <T> the type of rest template  * @param restTemplateClass the template type to create  * @return a configured {@link RestTemplate} instance.  * @see RestTemplateBuilder#build()  * @see #configure(RestTemplate)  */ public <T extends RestTemplate> T build(Class<T> restTemplateClass) {     return configure(BeanUtils.instantiateClass(restTemplateClass)). }
true;public;1;25;/**  * Configure the provided {@link RestTemplate} instance using this builder.  * @param <T> the type of rest template  * @param restTemplate the {@link RestTemplate} to configure  * @return the rest template instance  * @see RestTemplateBuilder#build()  * @see RestTemplateBuilder#build(Class)  */ ;/**  * Configure the provided {@link RestTemplate} instance using this builder.  * @param <T> the type of rest template  * @param restTemplate the {@link RestTemplate} to configure  * @return the rest template instance  * @see RestTemplateBuilder#build()  * @see RestTemplateBuilder#build(Class)  */ public <T extends RestTemplate> T configure(T restTemplate) {     configureRequestFactory(restTemplate).     if (!CollectionUtils.isEmpty(this.messageConverters)) {         restTemplate.setMessageConverters(new ArrayList<>(this.messageConverters)).     }     if (this.uriTemplateHandler != null) {         restTemplate.setUriTemplateHandler(this.uriTemplateHandler).     }     if (this.errorHandler != null) {         restTemplate.setErrorHandler(this.errorHandler).     }     if (this.rootUri != null) {         RootUriTemplateHandler.addTo(restTemplate, this.rootUri).     }     if (this.basicAuthentication != null) {         restTemplate.getInterceptors().add(this.basicAuthentication).     }     restTemplate.getInterceptors().addAll(this.interceptors).     if (!CollectionUtils.isEmpty(this.restTemplateCustomizers)) {         for (RestTemplateCustomizer customizer : this.restTemplateCustomizers) {             customizer.customize(restTemplate).         }     }     return restTemplate. }
false;private;1;15;;private void configureRequestFactory(RestTemplate restTemplate) {     ClientHttpRequestFactory requestFactory = null.     if (this.requestFactorySupplier != null) {         requestFactory = this.requestFactorySupplier.get().     } else if (this.detectRequestFactory) {         requestFactory = new ClientHttpRequestFactorySupplier().get().     }     if (requestFactory != null) {         if (this.requestFactoryCustomizer != null) {             this.requestFactoryCustomizer.accept(requestFactory).         }         restTemplate.setRequestFactory(requestFactory).     } }
false;private;2;5;;private <T> Set<T> append(Set<T> set, Collection<? extends T> additions) {     Set<T> result = new LinkedHashSet<>((set != null) ? set : Collections.emptySet()).     result.addAll(additions).     return Collections.unmodifiableSet(result). }
false;public;1;3;;public RequestFactoryCustomizer connectTimeout(Duration connectTimeout) {     return new RequestFactoryCustomizer(connectTimeout, this.readTimeout). }
false;public;1;3;;public RequestFactoryCustomizer readTimeout(Duration readTimeout) {     return new RequestFactoryCustomizer(this.connectTimeout, readTimeout). }
false;public;1;13;;@Override public void accept(ClientHttpRequestFactory requestFactory) {     ClientHttpRequestFactory unwrappedRequestFactory = unwrapRequestFactoryIfNecessary(requestFactory).     if (this.connectTimeout != null) {         new TimeoutRequestFactoryCustomizer(this.connectTimeout, "setConnectTimeout").customize(unwrappedRequestFactory).     }     if (this.readTimeout != null) {         new TimeoutRequestFactoryCustomizer(this.readTimeout, "setReadTimeout").customize(unwrappedRequestFactory).     } }
false;private;1;16;;private ClientHttpRequestFactory unwrapRequestFactoryIfNecessary(ClientHttpRequestFactory requestFactory) {     if (!(requestFactory instanceof AbstractClientHttpRequestFactoryWrapper)) {         return requestFactory.     }     ClientHttpRequestFactory unwrappedRequestFactory = requestFactory.     Field field = ReflectionUtils.findField(AbstractClientHttpRequestFactoryWrapper.class, "requestFactory").     ReflectionUtils.makeAccessible(field).     do {         unwrappedRequestFactory = (ClientHttpRequestFactory) ReflectionUtils.getField(field, unwrappedRequestFactory).     } while (unwrappedRequestFactory instanceof AbstractClientHttpRequestFactoryWrapper).     return unwrappedRequestFactory. }
false;;1;4;;void customize(ClientHttpRequestFactory factory) {     ReflectionUtils.invokeMethod(findMethod(factory), factory, Math.toIntExact(this.timeout.toMillis())). }
false;private;1;9;;private Method findMethod(ClientHttpRequestFactory factory) {     Method method = ReflectionUtils.findMethod(factory.getClass(), this.methodName, int.class).     if (method != null) {         return method.     }     throw new IllegalStateException("Request factory " + factory.getClass() + " does not have a " + this.methodName + "(int) method"). }
