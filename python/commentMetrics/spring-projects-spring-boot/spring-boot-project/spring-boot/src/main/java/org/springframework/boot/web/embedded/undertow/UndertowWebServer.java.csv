commented;modifiers;parameterAmount;loc;comment;code
false;public;0;36;;@Override public void start() throws WebServerException {     synchronized (this.monitor) {         if (this.started) {             return.         }         try {             if (!this.autoStart) {                 return.             }             if (this.undertow == null) {                 this.undertow = this.builder.build().             }             this.undertow.start().             this.started = true.             logger.info("Undertow started on port(s) " + getPortsDescription()).         } catch (Exception ex) {             try {                 if (findBindException(ex) != null) {                     List<UndertowWebServer.Port> failedPorts = getConfiguredPorts().                     List<UndertowWebServer.Port> actualPorts = getActualPorts().                     failedPorts.removeAll(actualPorts).                     if (failedPorts.size() == 1) {                         throw new PortInUseException(failedPorts.iterator().next().getNumber()).                     }                 }                 throw new WebServerException("Unable to start embedded Undertow", ex).             } finally {                 stopSilently().             }         }     } }
false;private;0;11;;private void stopSilently() {     try {         if (this.undertow != null) {             this.undertow.stop().             this.closeable.close().         }     } catch (Exception ex) {     // Ignore     } }
false;private;1;10;;private BindException findBindException(Exception ex) {     Throwable candidate = ex.     while (candidate != null) {         if (candidate instanceof BindException) {             return (BindException) candidate.         }         candidate = candidate.getCause().     }     return null. }
false;private;0;7;;private String getPortsDescription() {     List<UndertowWebServer.Port> ports = getActualPorts().     if (!ports.isEmpty()) {         return StringUtils.collectionToDelimitedString(ports, " ").     }     return "unknown". }
false;private;0;17;;private List<UndertowWebServer.Port> getActualPorts() {     List<UndertowWebServer.Port> ports = new ArrayList<>().     try {         if (!this.autoStart) {             ports.add(new UndertowWebServer.Port(-1, "unknown")).         } else {             for (BoundChannel channel : extractChannels()) {                 ports.add(getPortFromChannel(channel)).             }         }     } catch (Exception ex) {     // Continue     }     return ports. }
false;private;0;7;;@SuppressWarnings("unchecked") private List<BoundChannel> extractChannels() {     Field channelsField = ReflectionUtils.findField(Undertow.class, "channels").     ReflectionUtils.makeAccessible(channelsField).     return (List<BoundChannel>) ReflectionUtils.getField(channelsField, this.undertow). }
false;private;1;10;;private UndertowWebServer.Port getPortFromChannel(BoundChannel channel) {     SocketAddress socketAddress = channel.getLocalAddress().     if (socketAddress instanceof InetSocketAddress) {         Field sslField = ReflectionUtils.findField(channel.getClass(), "ssl").         String protocol = (sslField != null) ? "https" : "http".         return new UndertowWebServer.Port(((InetSocketAddress) socketAddress).getPort(), protocol).     }     return null. }
false;private;0;12;;private List<UndertowWebServer.Port> getConfiguredPorts() {     List<UndertowWebServer.Port> ports = new ArrayList<>().     for (Object listener : extractListeners()) {         try {             ports.add(getPortFromListener(listener)).         } catch (Exception ex) {         // Continue         }     }     return ports. }
false;private;0;6;;@SuppressWarnings("unchecked") private List<Object> extractListeners() {     Field listenersField = ReflectionUtils.findField(Undertow.class, "listeners").     ReflectionUtils.makeAccessible(listenersField).     return (List<Object>) ReflectionUtils.getField(listenersField, this.undertow). }
false;private;1;9;;private UndertowWebServer.Port getPortFromListener(Object listener) {     Field typeField = ReflectionUtils.findField(listener.getClass(), "type").     ReflectionUtils.makeAccessible(typeField).     String protocol = ReflectionUtils.getField(typeField, listener).toString().     Field portField = ReflectionUtils.findField(listener.getClass(), "port").     ReflectionUtils.makeAccessible(portField).     int port = (Integer) ReflectionUtils.getField(portField, listener).     return new UndertowWebServer.Port(port, protocol). }
false;public;0;18;;@Override public void stop() throws WebServerException {     synchronized (this.monitor) {         if (!this.started) {             return.         }         this.started = false.         try {             this.undertow.stop().             if (this.closeable != null) {                 this.closeable.close().             }         } catch (Exception ex) {             throw new WebServerException("Unable to stop undertow", ex).         }     } }
false;public;0;8;;@Override public int getPort() {     List<UndertowWebServer.Port> ports = getActualPorts().     if (ports.isEmpty()) {         return 0.     }     return ports.get(0).getNumber(). }
false;public;0;3;;public int getNumber() {     return this.number. }
false;public;1;17;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null) {         return false.     }     if (getClass() != obj.getClass()) {         return false.     }     UndertowWebServer.Port other = (UndertowWebServer.Port) obj.     if (this.number != other.number) {         return false.     }     return true. }
false;public;0;4;;@Override public int hashCode() {     return this.number. }
false;public;0;4;;@Override public String toString() {     return this.number + " (" + this.protocol + ")". }
