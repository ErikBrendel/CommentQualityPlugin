commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;3;/**  * Creates a new {@link org.springframework.boot.SpringApplication} instances from the  * given sources. Subclasses may override in order to provide a custom subclass of  * {@link org.springframework.boot.SpringApplication}  * @param sources the sources  * @return the {@link org.springframework.boot.SpringApplication} instance  * @since 1.1.0  */ ;/**  * Creates a new {@link org.springframework.boot.SpringApplication} instances from the  * given sources. Subclasses may override in order to provide a custom subclass of  * {@link org.springframework.boot.SpringApplication}  * @param sources the sources  * @return the {@link org.springframework.boot.SpringApplication} instance  * @since 1.1.0  */ protected SpringApplication createSpringApplication(Class<?>... sources) {     return new SpringApplication(sources). }
true;public;0;3;/**  * Accessor for the current application context.  * @return the current application context (or null if not yet running)  */ ;/**  * Accessor for the current application context.  * @return the current application context (or null if not yet running)  */ public ConfigurableApplicationContext context() {     return this.context. }
true;public;0;3;/**  * Accessor for the current application.  * @return the current application (never null)  */ ;/**  * Accessor for the current application.  * @return the current application (never null)  */ public SpringApplication application() {     return this.application. }
true;public;1;14;/**  * Create an application context (and its parent if specified) with the command line  * args provided. The parent is run first with the same arguments if has not yet been  * started.  * @param args the command line arguments  * @return an application context created from the current state  */ ;/**  * Create an application context (and its parent if specified) with the command line  * args provided. The parent is run first with the same arguments if has not yet been  * started.  * @param args the command line arguments  * @return an application context created from the current state  */ public ConfigurableApplicationContext run(String... args) {     if (this.running.get()) {         // If already created we just return the existing context         return this.context.     }     configureAsChildIfNecessary(args).     if (this.running.compareAndSet(false, true)) {         synchronized (this.running) {             // If not already running copy the sources over and then run.             this.context = build().run(args).         }     }     return this.context. }
false;private;1;10;;private void configureAsChildIfNecessary(String... args) {     if (this.parent != null && !this.configuredAsChild) {         this.configuredAsChild = true.         if (!this.registerShutdownHookApplied) {             this.application.setRegisterShutdownHook(false).         }         initializers(new ParentContextApplicationContextInitializer(this.parent.run(args))).     } }
true;public;0;3;/**  * Returns a fully configured {@link SpringApplication} that is ready to run.  * @return the fully configured {@link SpringApplication}.  */ ;/**  * Returns a fully configured {@link SpringApplication} that is ready to run.  * @return the fully configured {@link SpringApplication}.  */ public SpringApplication build() {     return build(new String[0]). }
true;public;1;5;/**  * Returns a fully configured {@link SpringApplication} that is ready to run. Any  * parent that has been configured will be run with the given {@code args}.  * @param args the parent's args  * @return the fully configured {@link SpringApplication}.  */ ;/**  * Returns a fully configured {@link SpringApplication} that is ready to run. Any  * parent that has been configured will be run with the given {@code args}.  * @param args the parent's args  * @return the fully configured {@link SpringApplication}.  */ public SpringApplication build(String... args) {     configureAsChildIfNecessary(args).     this.application.addPrimarySources(this.sources).     return this.application. }
true;public;1;22;/**  * Create a child application with the provided sources. Default args and environment  * are copied down into the child, but everything else is a clean sheet.  * @param sources the sources for the application (Spring configuration)  * @return the child application builder  */ ;/**  * Create a child application with the provided sources. Default args and environment  * are copied down into the child, but everything else is a clean sheet.  * @param sources the sources for the application (Spring configuration)  * @return the child application builder  */ public SpringApplicationBuilder child(Class<?>... sources) {     SpringApplicationBuilder child = new SpringApplicationBuilder().     child.sources(sources).     // Copy environment stuff from parent to child     child.properties(this.defaultProperties).environment(this.environment).additionalProfiles(this.additionalProfiles).     child.parent = this.     // It's not possible if embedded web server are enabled to support web contexts as     // parents because the servlets cannot be initialized at the right point in     // lifecycle.     web(WebApplicationType.NONE).     // Probably not interested in multiple banners     bannerMode(Banner.Mode.OFF).     // Make sure sources get copied over     this.application.addPrimarySources(this.sources).     return child. }
true;public;1;11;/**  * Add a parent application with the provided sources. Default args and environment  * are copied up into the parent, but everything else is a clean sheet.  * @param sources the sources for the application (Spring configuration)  * @return the parent builder  */ ;/**  * Add a parent application with the provided sources. Default args and environment  * are copied up into the parent, but everything else is a clean sheet.  * @param sources the sources for the application (Spring configuration)  * @return the parent builder  */ public SpringApplicationBuilder parent(Class<?>... sources) {     if (this.parent == null) {         this.parent = new SpringApplicationBuilder(sources).web(WebApplicationType.NONE).properties(this.defaultProperties).environment(this.environment).     } else {         this.parent.sources(sources).     }     return this.parent. }
false;private;1;10;;private SpringApplicationBuilder runAndExtractParent(String... args) {     if (this.context == null) {         run(args).     }     if (this.parent != null) {         return this.parent.     }     throw new IllegalStateException("No parent defined yet (please use the other overloaded parent methods to set one)"). }
true;public;1;6;/**  * Add an already running parent context to an existing application.  * @param parent the parent context  * @return the current builder (not the parent)  */ ;/**  * Add an already running parent context to an existing application.  * @param parent the parent context  * @return the current builder (not the parent)  */ public SpringApplicationBuilder parent(ConfigurableApplicationContext parent) {     this.parent = new SpringApplicationBuilder().     this.parent.context = parent.     this.parent.running.set(true).     return this. }
true;public;1;3;/**  * Create a sibling application (one with the same parent). A side effect of calling  * this method is that the current application (and its parent) are started without  * any arguments if they are not already running. To supply arguments when starting  * the current application and its parent use {@link #sibling(Class[], String...)}  * instead.  * @param sources the sources for the application (Spring configuration)  * @return the new sibling builder  */ ;/**  * Create a sibling application (one with the same parent). A side effect of calling  * this method is that the current application (and its parent) are started without  * any arguments if they are not already running. To supply arguments when starting  * the current application and its parent use {@link #sibling(Class[], String...)}  * instead.  * @param sources the sources for the application (Spring configuration)  * @return the new sibling builder  */ public SpringApplicationBuilder sibling(Class<?>... sources) {     return runAndExtractParent().child(sources). }
true;public;2;3;/**  * Create a sibling application (one with the same parent). A side effect of calling  * this method is that the current application (and its parent) are started if they  * are not already running.  * @param sources the sources for the application (Spring configuration)  * @param args the command line arguments to use when starting the current app and its  * parent  * @return the new sibling builder  */ ;/**  * Create a sibling application (one with the same parent). A side effect of calling  * this method is that the current application (and its parent) are started if they  * are not already running.  * @param sources the sources for the application (Spring configuration)  * @param args the command line arguments to use when starting the current app and its  * parent  * @return the new sibling builder  */ public SpringApplicationBuilder sibling(Class<?>[] sources, String... args) {     return runAndExtractParent(args).child(sources). }
true;public;1;5;/**  * Explicitly set the context class to be used.  * @param cls the context class to use  * @return the current builder  */ ;/**  * Explicitly set the context class to be used.  * @param cls the context class to use  * @return the current builder  */ public SpringApplicationBuilder contextClass(Class<? extends ConfigurableApplicationContext> cls) {     this.application.setApplicationContextClass(cls).     return this. }
true;public;1;4;/**  * Add more sources (configuration classes and components) to this application.  * @param sources the sources to add  * @return the current builder  */ ;/**  * Add more sources (configuration classes and components) to this application.  * @param sources the sources to add  * @return the current builder  */ public SpringApplicationBuilder sources(Class<?>... sources) {     this.sources.addAll(new LinkedHashSet<>(Arrays.asList(sources))).     return this. }
true;public;1;4;/**  * Flag to explicitly request a specific type of web application. Auto-detected based  * on the classpath if not set.  * @param webApplicationType the type of web application  * @return the current builder  * @since 2.0.0  */ ;/**  * Flag to explicitly request a specific type of web application. Auto-detected based  * on the classpath if not set.  * @param webApplicationType the type of web application  * @return the current builder  * @since 2.0.0  */ public SpringApplicationBuilder web(WebApplicationType webApplicationType) {     this.application.setWebApplicationType(webApplicationType).     return this. }
true;public;1;4;/**  * Flag to indicate the startup information should be logged.  * @param logStartupInfo the flag to set. Default true.  * @return the current builder  */ ;/**  * Flag to indicate the startup information should be logged.  * @param logStartupInfo the flag to set. Default true.  * @return the current builder  */ public SpringApplicationBuilder logStartupInfo(boolean logStartupInfo) {     this.application.setLogStartupInfo(logStartupInfo).     return this. }
true;public;1;4;/**  * Sets the {@link Banner} instance which will be used to print the banner when no  * static banner file is provided.  * @param banner the banner to use  * @return the current builder  */ ;/**  * Sets the {@link Banner} instance which will be used to print the banner when no  * static banner file is provided.  * @param banner the banner to use  * @return the current builder  */ public SpringApplicationBuilder banner(Banner banner) {     this.application.setBanner(banner).     return this. }
false;public;1;4;;public SpringApplicationBuilder bannerMode(Banner.Mode bannerMode) {     this.application.setBannerMode(bannerMode).     return this. }
true;public;1;4;/**  * Sets if the application is headless and should not instantiate AWT. Defaults to  * {@code true} to prevent java icons appearing.  * @param headless if the application is headless  * @return the current builder  */ ;/**  * Sets if the application is headless and should not instantiate AWT. Defaults to  * {@code true} to prevent java icons appearing.  * @param headless if the application is headless  * @return the current builder  */ public SpringApplicationBuilder headless(boolean headless) {     this.application.setHeadless(headless).     return this. }
true;public;1;5;/**  * Sets if the created {@link ApplicationContext} should have a shutdown hook  * registered.  * @param registerShutdownHook if the shutdown hook should be registered  * @return the current builder  */ ;/**  * Sets if the created {@link ApplicationContext} should have a shutdown hook  * registered.  * @param registerShutdownHook if the shutdown hook should be registered  * @return the current builder  */ public SpringApplicationBuilder registerShutdownHook(boolean registerShutdownHook) {     this.registerShutdownHookApplied = true.     this.application.setRegisterShutdownHook(registerShutdownHook).     return this. }
true;public;1;4;/**  * Fixes the main application class that is used to anchor the startup messages.  * @param mainApplicationClass the class to use.  * @return the current builder  */ ;/**  * Fixes the main application class that is used to anchor the startup messages.  * @param mainApplicationClass the class to use.  * @return the current builder  */ public SpringApplicationBuilder main(Class<?> mainApplicationClass) {     this.application.setMainApplicationClass(mainApplicationClass).     return this. }
true;public;1;5;/**  * Flag to indicate that command line arguments should be added to the environment.  * @param addCommandLineProperties the flag to set. Default true.  * @return the current builder  */ ;/**  * Flag to indicate that command line arguments should be added to the environment.  * @param addCommandLineProperties the flag to set. Default true.  * @return the current builder  */ public SpringApplicationBuilder addCommandLineProperties(boolean addCommandLineProperties) {     this.application.setAddCommandLineProperties(addCommandLineProperties).     return this. }
true;public;1;5;/**  * Flag to indicate if the {@link ApplicationConversionService} should be added to the  * application context's {@link Environment}.  * @param addConversionService if the conversion service should be added.  * @return the current builder  * @since 2.1.0  */ ;/**  * Flag to indicate if the {@link ApplicationConversionService} should be added to the  * application context's {@link Environment}.  * @param addConversionService if the conversion service should be added.  * @return the current builder  * @since 2.1.0  */ public SpringApplicationBuilder setAddConversionService(boolean addConversionService) {     this.application.setAddConversionService(addConversionService).     return this. }
true;public;1;3;/**  * Default properties for the environment in the form {@code key=value} or  * {@code key:value}.  * @param defaultProperties the properties to set.  * @return the current builder  */ ;/**  * Default properties for the environment in the form {@code key=value} or  * {@code key:value}.  * @param defaultProperties the properties to set.  * @return the current builder  */ public SpringApplicationBuilder properties(String... defaultProperties) {     return properties(getMapFromKeyValuePairs(defaultProperties)). }
true;public;1;4;/**  * Flag to control whether the application should be initialized lazily.  * @param lazyInitialization the flag to set. Defaults to false.  * @return the current builder  * @since 2.2  */ ;/**  * Flag to control whether the application should be initialized lazily.  * @param lazyInitialization the flag to set. Defaults to false.  * @return the current builder  * @since 2.2  */ public SpringApplicationBuilder lazyInitialization(boolean lazyInitialization) {     this.application.setLazyInitialization(lazyInitialization).     return this. }
false;private;1;10;;private Map<String, Object> getMapFromKeyValuePairs(String[] properties) {     Map<String, Object> map = new HashMap<>().     for (String property : properties) {         int index = lowestIndexOf(property, ":", "=").         String key = (index > 0) ? property.substring(0, index) : property.         String value = (index > 0) ? property.substring(index + 1) : "".         map.put(key, value).     }     return map. }
false;private;2;10;;private int lowestIndexOf(String property, String... candidates) {     int index = -1.     for (String candidate : candidates) {         int candidateIndex = property.indexOf(candidate).         if (candidateIndex > 0) {             index = (index != -1) ? Math.min(index, candidateIndex) : candidateIndex.         }     }     return index. }
true;public;1;3;/**  * Default properties for the environment in the form {@code key=value} or  * {@code key:value}.  * @param defaultProperties the properties to set.  * @return the current builder  */ ;/**  * Default properties for the environment in the form {@code key=value} or  * {@code key:value}.  * @param defaultProperties the properties to set.  * @return the current builder  */ public SpringApplicationBuilder properties(Properties defaultProperties) {     return properties(getMapFromProperties(defaultProperties)). }
false;private;1;7;;private Map<String, Object> getMapFromProperties(Properties properties) {     Map<String, Object> map = new HashMap<>().     for (Object key : Collections.list(properties.propertyNames())) {         map.put((String) key, properties.get(key)).     }     return map. }
true;public;1;9;/**  * Default properties for the environment. Multiple calls to this method are  * cumulative.  * @param defaults the default properties  * @return the current builder  * @see SpringApplicationBuilder#properties(String...)  */ ;/**  * Default properties for the environment. Multiple calls to this method are  * cumulative.  * @param defaults the default properties  * @return the current builder  * @see SpringApplicationBuilder#properties(String...)  */ public SpringApplicationBuilder properties(Map<String, Object> defaults) {     this.defaultProperties.putAll(defaults).     this.application.setDefaultProperties(this.defaultProperties).     if (this.parent != null) {         this.parent.properties(this.defaultProperties).         this.parent.environment(this.environment).     }     return this. }
true;public;1;6;/**  * Add to the active Spring profiles for this app (and its parent and children).  * @param profiles the profiles to add.  * @return the current builder  */ ;/**  * Add to the active Spring profiles for this app (and its parent and children).  * @param profiles the profiles to add.  * @return the current builder  */ public SpringApplicationBuilder profiles(String... profiles) {     this.additionalProfiles.addAll(Arrays.asList(profiles)).     this.application.setAdditionalProfiles(StringUtils.toStringArray(this.additionalProfiles)).     return this. }
false;private;1;7;;private SpringApplicationBuilder additionalProfiles(Collection<String> additionalProfiles) {     this.additionalProfiles = new LinkedHashSet<>(additionalProfiles).     this.application.setAdditionalProfiles(StringUtils.toStringArray(this.additionalProfiles)).     return this. }
true;public;1;5;/**  * Bean name generator for automatically generated bean names in the application  * context.  * @param beanNameGenerator the generator to set.  * @return the current builder  */ ;/**  * Bean name generator for automatically generated bean names in the application  * context.  * @param beanNameGenerator the generator to set.  * @return the current builder  */ public SpringApplicationBuilder beanNameGenerator(BeanNameGenerator beanNameGenerator) {     this.application.setBeanNameGenerator(beanNameGenerator).     return this. }
true;public;1;5;/**  * Environment for the application context.  * @param environment the environment to set.  * @return the current builder  */ ;/**  * Environment for the application context.  * @param environment the environment to set.  * @return the current builder  */ public SpringApplicationBuilder environment(ConfigurableEnvironment environment) {     this.application.setEnvironment(environment).     this.environment = environment.     return this. }
true;public;1;4;/**  * {@link ResourceLoader} for the application context. If a custom class loader is  * needed, this is where it would be added.  * @param resourceLoader the resource loader to set.  * @return the current builder  */ ;/**  * {@link ResourceLoader} for the application context. If a custom class loader is  * needed, this is where it would be added.  * @param resourceLoader the resource loader to set.  * @return the current builder  */ public SpringApplicationBuilder resourceLoader(ResourceLoader resourceLoader) {     this.application.setResourceLoader(resourceLoader).     return this. }
true;public;1;5;/**  * Add some initializers to the application (applied to the {@link ApplicationContext}  * before any bean definitions are loaded).  * @param initializers some initializers to add  * @return the current builder  */ ;/**  * Add some initializers to the application (applied to the {@link ApplicationContext}  * before any bean definitions are loaded).  * @param initializers some initializers to add  * @return the current builder  */ public SpringApplicationBuilder initializers(ApplicationContextInitializer<?>... initializers) {     this.application.addInitializers(initializers).     return this. }
true;public;1;4;/**  * Add some listeners to the application (listening for SpringApplication events as  * well as regular Spring events once the context is running). Any listeners that are  * also {@link ApplicationContextInitializer} will be added to the  * {@link #initializers(ApplicationContextInitializer...) initializers} automatically.  * @param listeners some listeners to add  * @return the current builder  */ ;/**  * Add some listeners to the application (listening for SpringApplication events as  * well as regular Spring events once the context is running). Any listeners that are  * also {@link ApplicationContextInitializer} will be added to the  * {@link #initializers(ApplicationContextInitializer...) initializers} automatically.  * @param listeners some listeners to add  * @return the current builder  */ public SpringApplicationBuilder listeners(ApplicationListener<?>... listeners) {     this.application.addListeners(listeners).     return this. }
