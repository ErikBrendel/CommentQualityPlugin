commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public PropertySources getPropertySources() {     PropertySourcesPlaceholderConfigurer configurer = getSinglePropertySourcesPlaceholderConfigurer().     if (configurer != null) {         return configurer.getAppliedPropertySources().     }     MutablePropertySources sources = extractEnvironmentPropertySources().     if (sources != null) {         return sources.     }     throw new IllegalStateException("Unable to obtain PropertySources from " + "PropertySourcesPlaceholderConfigurer or Environment"). }
false;private;0;7;;private MutablePropertySources extractEnvironmentPropertySources() {     Environment environment = this.applicationContext.getEnvironment().     if (environment instanceof ConfigurableEnvironment) {         return ((ConfigurableEnvironment) environment).getPropertySources().     }     return null. }
false;private;0;14;;private PropertySourcesPlaceholderConfigurer getSinglePropertySourcesPlaceholderConfigurer() {     // Take care not to cause early instantiation of all FactoryBeans     Map<String, PropertySourcesPlaceholderConfigurer> beans = this.applicationContext.getBeansOfType(PropertySourcesPlaceholderConfigurer.class, false, false).     if (beans.size() == 1) {         return beans.values().iterator().next().     }     if (beans.size() > 1 && logger.isWarnEnabled()) {         logger.warn("Multiple PropertySourcesPlaceholderConfigurer " + "beans registered " + beans.keySet() + ", falling back to Environment").     }     return null. }
