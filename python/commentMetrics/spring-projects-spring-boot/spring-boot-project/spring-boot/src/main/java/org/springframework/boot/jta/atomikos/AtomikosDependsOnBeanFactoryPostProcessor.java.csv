commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {     String[] transactionManagers = beanFactory.getBeanNamesForType(UserTransactionManager.class, true, false).     for (String transactionManager : transactionManagers) {         addTransactionManagerDependencies(beanFactory, transactionManager).     }     addMessageDrivenContainerDependencies(beanFactory, transactionManagers). }
false;private;2;11;;private void addTransactionManagerDependencies(ConfigurableListableBeanFactory beanFactory, String transactionManager) {     BeanDefinition bean = beanFactory.getBeanDefinition(transactionManager).     Set<String> dependsOn = new LinkedHashSet<>(asList(bean.getDependsOn())).     int initialSize = dependsOn.size().     addDependencies(beanFactory, "javax.jms.ConnectionFactory", dependsOn).     addDependencies(beanFactory, "javax.sql.DataSource", dependsOn).     if (dependsOn.size() != initialSize) {         bean.setDependsOn(StringUtils.toStringArray(dependsOn)).     } }
false;private;2;11;;private void addMessageDrivenContainerDependencies(ConfigurableListableBeanFactory beanFactory, String[] transactionManagers) {     String[] messageDrivenContainers = getBeanNamesForType(beanFactory, "com.atomikos.jms.extra.MessageDrivenContainer").     for (String messageDrivenContainer : messageDrivenContainers) {         BeanDefinition bean = beanFactory.getBeanDefinition(messageDrivenContainer).         Set<String> dependsOn = new LinkedHashSet<>(asList(bean.getDependsOn())).         dependsOn.addAll(asList(transactionManagers)).         bean.setDependsOn(StringUtils.toStringArray(dependsOn)).     } }
false;private;3;4;;private void addDependencies(ConfigurableListableBeanFactory beanFactory, String type, Set<String> dependsOn) {     dependsOn.addAll(asList(getBeanNamesForType(beanFactory, type))). }
false;private;2;10;;private String[] getBeanNamesForType(ConfigurableListableBeanFactory beanFactory, String type) {     try {         return beanFactory.getBeanNamesForType(Class.forName(type), true, false).     } catch (ClassNotFoundException | NoClassDefFoundError ex) {     // Ignore     }     return NO_BEANS. }
false;private;1;3;;private List<String> asList(String[] array) {     return (array != null) ? Arrays.asList(array) : Collections.emptyList(). }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
