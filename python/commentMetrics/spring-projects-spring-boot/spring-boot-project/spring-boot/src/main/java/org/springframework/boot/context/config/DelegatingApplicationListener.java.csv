commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;@Override public void onApplicationEvent(ApplicationEvent event) {     if (event instanceof ApplicationEnvironmentPreparedEvent) {         List<ApplicationListener<ApplicationEvent>> delegates = getListeners(((ApplicationEnvironmentPreparedEvent) event).getEnvironment()).         if (delegates.isEmpty()) {             return.         }         this.multicaster = new SimpleApplicationEventMulticaster().         for (ApplicationListener<ApplicationEvent> listener : delegates) {             this.multicaster.addApplicationListener(listener).         }     }     if (this.multicaster != null) {         this.multicaster.multicastEvent(event).     } }
false;private;1;28;;@SuppressWarnings("unchecked") private List<ApplicationListener<ApplicationEvent>> getListeners(ConfigurableEnvironment environment) {     if (environment == null) {         return Collections.emptyList().     }     String classNames = environment.getProperty(PROPERTY_NAME).     List<ApplicationListener<ApplicationEvent>> listeners = new ArrayList<>().     if (StringUtils.hasLength(classNames)) {         for (String className : StringUtils.commaDelimitedListToSet(classNames)) {             try {                 Class<?> clazz = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader()).                 Assert.isAssignable(ApplicationListener.class, clazz, "class [" + className + "] must implement ApplicationListener").                 listeners.add((ApplicationListener<ApplicationEvent>) BeanUtils.instantiateClass(clazz)).             } catch (Exception ex) {                 throw new ApplicationContextException("Failed to load context listener class [" + className + "]", ex).             }         }     }     AnnotationAwareOrderComparator.sort(listeners).     return listeners. }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
