commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setEnvironment(Environment environment) {     this.environment = (ConfigurableEnvironment) environment. }
false;protected;2;13;;@Override protected FailureAnalysis analyze(Throwable rootFailure, InvalidConfigurationPropertyValueException cause) {     List<Descriptor> descriptors = getDescriptors(cause.getName()).     if (descriptors.isEmpty()) {         return null.     }     StringBuilder description = new StringBuilder().     appendDetails(description, cause, descriptors).     appendReason(description, cause).     appendAdditionalProperties(description, descriptors).     return new FailureAnalysis(description.toString(), getAction(cause), cause). }
false;private;1;6;;private List<Descriptor> getDescriptors(String propertyName) {     return getPropertySources().filter((source) -> source.containsProperty(propertyName)).map((source) -> Descriptor.get(source, propertyName)).collect(Collectors.toList()). }
false;private;0;8;;private Stream<PropertySource<?>> getPropertySources() {     if (this.environment == null) {         return Stream.empty().     }     return this.environment.getPropertySources().stream().filter((source) -> !ConfigurationPropertySources.isAttachedConfigurationPropertySource(source)). }
false;private;3;10;;private void appendDetails(StringBuilder message, InvalidConfigurationPropertyValueException cause, List<Descriptor> descriptors) {     Descriptor mainDescriptor = descriptors.get(0).     message.append("Invalid value '").append(mainDescriptor.getValue()).append("' for configuration property '").     message.append(cause.getName()).append("'").     mainDescriptor.appendOrigin(message).     message.append("."). }
false;private;2;11;;private void appendReason(StringBuilder message, InvalidConfigurationPropertyValueException cause) {     if (StringUtils.hasText(cause.getReason())) {         message.append(String.format(" Validation failed for the following " + "reason:%n%n")).         message.append(cause.getReason()).     } else {         message.append(" No reason was provided.").     } }
false;private;2;16;;private void appendAdditionalProperties(StringBuilder message, List<Descriptor> descriptors) {     List<Descriptor> others = descriptors.subList(1, descriptors.size()).     if (!others.isEmpty()) {         message.append(String.format("%n%nAdditionally, this property is also set in the following " + "property %s:%n%n", (others.size() > 1) ? "sources" : "source")).         for (Descriptor other : others) {             message.append("\t- In '").append(other.getPropertySource()).append("'").             message.append(" with the value '").append(other.getValue()).append("'").             other.appendOrigin(message).             message.append(String.format(".%n")).         }     } }
false;private;1;9;;private String getAction(InvalidConfigurationPropertyValueException cause) {     StringBuilder action = new StringBuilder().     action.append("Review the value of the property").     if (cause.getReason() != null) {         action.append(" with the provided reason").     }     action.append(".").     return action.toString(). }
false;public;0;3;;public String getPropertySource() {     return this.propertySource. }
false;public;0;3;;public Object getValue() {     return this.value. }
false;public;1;5;;public void appendOrigin(StringBuilder message) {     if (this.origin != null) {         message.append(" (originating from '").append(this.origin).append("')").     } }
false;static;2;5;;static Descriptor get(PropertySource<?> source, String propertyName) {     Object value = source.getProperty(propertyName).     Origin origin = OriginLookup.getOrigin(source, propertyName).     return new Descriptor(source.getName(), value, origin). }
