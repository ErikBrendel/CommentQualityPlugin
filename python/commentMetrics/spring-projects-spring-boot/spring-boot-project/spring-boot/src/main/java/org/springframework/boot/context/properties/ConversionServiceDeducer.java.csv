commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public ConversionService getConversionService() {     try {         return this.applicationContext.getBean(ConfigurableApplicationContext.CONVERSION_SERVICE_BEAN_NAME, ConversionService.class).     } catch (NoSuchBeanDefinitionException ex) {         return new Factory(this.applicationContext.getAutowireCapableBeanFactory()).create().     } }
false;private;3;7;;private <T> List<T> beans(BeanFactory beanFactory, Class<T> type, String qualifier) {     if (beanFactory instanceof ListableBeanFactory) {         return beans(type, qualifier, (ListableBeanFactory) beanFactory).     }     return Collections.emptyList(). }
false;private;3;5;;private <T> List<T> beans(Class<T> type, String qualifier, ListableBeanFactory beanFactory) {     return new ArrayList<>(BeanFactoryAnnotationUtils.qualifiedBeansOfType(beanFactory, type, qualifier).values()). }
false;public;0;13;;public ConversionService create() {     if (this.converters.isEmpty() && this.genericConverters.isEmpty()) {         return ApplicationConversionService.getSharedInstance().     }     ApplicationConversionService conversionService = new ApplicationConversionService().     for (Converter<?, ?> converter : this.converters) {         conversionService.addConverter(converter).     }     for (GenericConverter genericConverter : this.genericConverters) {         conversionService.addConverter(genericConverter).     }     return conversionService. }
