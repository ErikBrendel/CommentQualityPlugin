commented;modifiers;parameterAmount;loc;comment;code
false;public;2;14;;@Override public Duration parse(String value, ChronoUnit unit) {     try {         Matcher matcher = matcher(value).         Assert.state(matcher.matches(), "Does not match simple duration pattern").         String suffix = matcher.group(2).         return (StringUtils.hasLength(suffix) ? Unit.fromSuffix(suffix) : Unit.fromChronoUnit(unit)).parse(matcher.group(1)).     } catch (Exception ex) {         throw new IllegalArgumentException("'" + value + "' is not a valid simple duration", ex).     } }
false;public;2;4;;@Override public String print(Duration value, ChronoUnit unit) {     return Unit.fromChronoUnit(unit).print(value). }
false;public;2;10;;@Override public Duration parse(String value, ChronoUnit unit) {     try {         return Duration.parse(value).     } catch (Exception ex) {         throw new IllegalArgumentException("'" + value + "' is not a valid ISO-8601 duration", ex).     } }
false;public;2;4;;@Override public String print(Duration value, ChronoUnit unit) {     return value.toString(). }
false;protected,final;1;3;;protected final boolean matches(String value) {     return this.pattern.matcher(value).matches(). }
false;protected,final;1;3;;protected final Matcher matcher(String value) {     return this.pattern.matcher(value). }
true;public;1;3;/**  * Parse the given value to a duration.  * @param value the value to parse  * @return a duration  */ ;/**  * Parse the given value to a duration.  * @param value the value to parse  * @return a duration  */ public Duration parse(String value) {     return parse(value, null). }
true;public,abstract;2;1;/**  * Parse the given value to a duration.  * @param value the value to parse  * @param unit the duration unit to use if the value doesn't specify one ({@code null}  * will default to ms)  * @return a duration  */ ;/**  * Parse the given value to a duration.  * @param value the value to parse  * @param unit the duration unit to use if the value doesn't specify one ({@code null}  * will default to ms)  * @return a duration  */ public abstract Duration parse(String value, ChronoUnit unit).
true;public;1;3;/**  * Print the specified duration.  * @param value the value to print  * @return the printed result  */ ;/**  * Print the specified duration.  * @param value the value to print  * @return the printed result  */ public String print(Duration value) {     return print(value, null). }
true;public,abstract;2;1;/**  * Print the specified duration using the given unit.  * @param value the value to print  * @param unit the value to use for printing  * @return the printed result  */ ;/**  * Print the specified duration using the given unit.  * @param value the value to print  * @param unit the value to use for printing  * @return the printed result  */ public abstract String print(Duration value, ChronoUnit unit).
true;public,static;1;3;/**  * Detect the style then parse the value to return a duration.  * @param value the value to parse  * @return the parsed duration  * @throws IllegalStateException if the value is not a known style or cannot be parsed  */ ;/**  * Detect the style then parse the value to return a duration.  * @param value the value to parse  * @return the parsed duration  * @throws IllegalStateException if the value is not a known style or cannot be parsed  */ public static Duration detectAndParse(String value) {     return detectAndParse(value, null). }
true;public,static;2;3;/**  * Detect the style then parse the value to return a duration.  * @param value the value to parse  * @param unit the duration unit to use if the value doesn't specify one ({@code null}  * will default to ms)  * @return the parsed duration  * @throws IllegalStateException if the value is not a known style or cannot be parsed  */ ;/**  * Detect the style then parse the value to return a duration.  * @param value the value to parse  * @param unit the duration unit to use if the value doesn't specify one ({@code null}  * will default to ms)  * @return the parsed duration  * @throws IllegalStateException if the value is not a known style or cannot be parsed  */ public static Duration detectAndParse(String value, ChronoUnit unit) {     return detect(value).parse(value, unit). }
true;public,static;1;9;/**  * Detect the style from the given source value.  * @param value the source value  * @return the duration style  * @throws IllegalStateException if the value is not a known style  */ ;/**  * Detect the style from the given source value.  * @param value the source value  * @return the duration style  * @throws IllegalStateException if the value is not a known style  */ public static DurationStyle detect(String value) {     Assert.notNull(value, "Value must not be null").     for (DurationStyle candidate : values()) {         if (candidate.matches(value)) {             return candidate.         }     }     throw new IllegalArgumentException("'" + value + "' is not a valid duration"). }
false;public;1;3;;public Duration parse(String value) {     return Duration.of(Long.valueOf(value), this.chronoUnit). }
false;public;1;3;;public String print(Duration value) {     return longValue(value) + this.suffix. }
false;public;1;3;;public long longValue(Duration value) {     return this.longValue.apply(value). }
false;public,static;1;11;;public static Unit fromChronoUnit(ChronoUnit chronoUnit) {     if (chronoUnit == null) {         return Unit.MILLIS.     }     for (Unit candidate : values()) {         if (candidate.chronoUnit == chronoUnit) {             return candidate.         }     }     throw new IllegalArgumentException("Unknown unit " + chronoUnit). }
false;public,static;1;8;;public static Unit fromSuffix(String suffix) {     for (Unit candidate : values()) {         if (candidate.suffix.equalsIgnoreCase(suffix)) {             return candidate.         }     }     throw new IllegalArgumentException("Unknown unit '" + suffix + "'"). }
