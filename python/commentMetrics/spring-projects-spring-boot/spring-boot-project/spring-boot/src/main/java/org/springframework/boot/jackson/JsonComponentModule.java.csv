commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     this.beanFactory = beanFactory. }
false;public;0;12;;@PostConstruct public void registerJsonComponents() {     BeanFactory beanFactory = this.beanFactory.     while (beanFactory != null) {         if (beanFactory instanceof ListableBeanFactory) {             addJsonBeans((ListableBeanFactory) beanFactory).         }         beanFactory = (beanFactory instanceof HierarchicalBeanFactory) ? ((HierarchicalBeanFactory) beanFactory).getParentBeanFactory() : null.     } }
false;private;1;7;;private void addJsonBeans(ListableBeanFactory beanFactory) {     Map<String, Object> beans = beanFactory.getBeansWithAnnotation(JsonComponent.class).     for (Object bean : beans.values()) {         addJsonBean(bean).     } }
false;private;1;20;;private void addJsonBean(Object bean) {     if (bean instanceof JsonSerializer) {         addSerializerWithDeducedType((JsonSerializer<?>) bean).     }     if (bean instanceof JsonDeserializer) {         addDeserializerWithDeducedType((JsonDeserializer<?>) bean).     }     for (Class<?> innerClass : bean.getClass().getDeclaredClasses()) {         if (!Modifier.isAbstract(innerClass.getModifiers()) && (JsonSerializer.class.isAssignableFrom(innerClass) || JsonDeserializer.class.isAssignableFrom(innerClass))) {             try {                 addJsonBean(innerClass.newInstance()).             } catch (Exception ex) {                 throw new IllegalStateException(ex).             }         }     } }
false;private;1;6;;@SuppressWarnings({ "unchecked" }) private <T> void addSerializerWithDeducedType(JsonSerializer<T> serializer) {     ResolvableType type = ResolvableType.forClass(JsonSerializer.class, serializer.getClass()).     addSerializer((Class<T>) type.resolveGeneric(), serializer). }
false;private;1;6;;@SuppressWarnings({ "unchecked" }) private <T> void addDeserializerWithDeducedType(JsonDeserializer<T> deserializer) {     ResolvableType type = ResolvableType.forClass(JsonDeserializer.class, deserializer.getClass()).     addDeserializer((Class<T>) type.resolveGeneric(), deserializer). }
