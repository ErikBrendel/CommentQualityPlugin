commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return this.name. }
true;public,static;0;10;/**  * Returns the {@link JavaVersion} of the current runtime.  * @return the {@link JavaVersion}  */ ;/**  * Returns the {@link JavaVersion} of the current runtime.  * @return the {@link JavaVersion}  */ public static JavaVersion getJavaVersion() {     List<JavaVersion> candidates = Arrays.asList(JavaVersion.values()).     Collections.reverse(candidates).     for (JavaVersion candidate : candidates) {         if (candidate.available) {             return candidate.         }     }     return EIGHT. }
true;public;1;3;/**  * Return if this version is equal to or newer than a given version.  * @param version the version to compare  * @return {@code true} if this version is equal to or newer than {@code version}  */ ;/**  * Return if this version is equal to or newer than a given version.  * @param version the version to compare  * @return {@code true} if this version is equal to or newer than {@code version}  */ public boolean isEqualOrNewerThan(JavaVersion version) {     return compareTo(version) >= 0. }
true;public;1;3;/**  * Return if this version is older than a given version.  * @param version the version to compare  * @return {@code true} if this version is older than {@code version}  */ ;/**  * Return if this version is older than a given version.  * @param version the version to compare  * @return {@code true} if this version is older than {@code version}  */ public boolean isOlderThan(JavaVersion version) {     return compareTo(version) < 0. }
