# id;timestamp;commentText;codeText;commentWords;codeWords
BindResult -> public boolean isBound();1507173536;Returns {@code true} if a result was bound._@return if a result was bound;public boolean isBound() {_		return (this.value != null)__	};returns,code,true,if,a,result,was,bound,return,if,a,result,was,bound;public,boolean,is,bound,return,this,value,null
BindResult -> public boolean isBound();1525416882;Returns {@code true} if a result was bound._@return if a result was bound;public boolean isBound() {_		return (this.value != null)__	};returns,code,true,if,a,result,was,bound,return,if,a,result,was,bound;public,boolean,is,bound,return,this,value,null
BindResult -> public boolean isBound();1525476706;Returns {@code true} if a result was bound._@return if a result was bound;public boolean isBound() {_		return (this.value != null)__	};returns,code,true,if,a,result,was,bound,return,if,a,result,was,bound;public,boolean,is,bound,return,this,value,null
BindResult -> public boolean isBound();1532738143;Returns {@code true} if a result was bound._@return if a result was bound;public boolean isBound() {_		return (this.value != null)__	};returns,code,true,if,a,result,was,bound,return,if,a,result,was,bound;public,boolean,is,bound,return,this,value,null
BindResult -> public boolean isBound();1539393863;Returns {@code true} if a result was bound._@return if a result was bound;public boolean isBound() {_		return (this.value != null)__	};returns,code,true,if,a,result,was,bound,return,if,a,result,was,bound;public,boolean,is,bound,return,this,value,null
BindResult -> public T orElseGet(Supplier<? extends T> other);1507173536;Return the object that was bound, or the result of invoking {@code other} if no_value has been bound._@param other a {@link Supplier} of the value to be returned if there is no bound_value_@return the value, if bound, otherwise the supplied {@code other};public T orElseGet(Supplier<? extends T> other) {_		return (this.value != null ? this.value : other.get())__	};return,the,object,that,was,bound,or,the,result,of,invoking,code,other,if,no,value,has,been,bound,param,other,a,link,supplier,of,the,value,to,be,returned,if,there,is,no,bound,value,return,the,value,if,bound,otherwise,the,supplied,code,other;public,t,or,else,get,supplier,extends,t,other,return,this,value,null,this,value,other,get
BindResult -> public T orElseGet(Supplier<? extends T> other);1525416882;Return the object that was bound, or the result of invoking {@code other} if no_value has been bound._@param other a {@link Supplier} of the value to be returned if there is no bound_value_@return the value, if bound, otherwise the supplied {@code other};public T orElseGet(Supplier<? extends T> other) {_		return (this.value != null ? this.value : other.get())__	};return,the,object,that,was,bound,or,the,result,of,invoking,code,other,if,no,value,has,been,bound,param,other,a,link,supplier,of,the,value,to,be,returned,if,there,is,no,bound,value,return,the,value,if,bound,otherwise,the,supplied,code,other;public,t,or,else,get,supplier,extends,t,other,return,this,value,null,this,value,other,get
BindResult -> public T orElseGet(Supplier<? extends T> other);1525476706;Return the object that was bound, or the result of invoking {@code other} if no_value has been bound._@param other a {@link Supplier} of the value to be returned if there is no bound_value_@return the value, if bound, otherwise the supplied {@code other};public T orElseGet(Supplier<? extends T> other) {_		return (this.value != null ? this.value : other.get())__	};return,the,object,that,was,bound,or,the,result,of,invoking,code,other,if,no,value,has,been,bound,param,other,a,link,supplier,of,the,value,to,be,returned,if,there,is,no,bound,value,return,the,value,if,bound,otherwise,the,supplied,code,other;public,t,or,else,get,supplier,extends,t,other,return,this,value,null,this,value,other,get
BindResult -> public T orElseGet(Supplier<? extends T> other);1532738143;Return the object that was bound, or the result of invoking {@code other} if no_value has been bound._@param other a {@link Supplier} of the value to be returned if there is no bound_value_@return the value, if bound, otherwise the supplied {@code other};public T orElseGet(Supplier<? extends T> other) {_		return (this.value != null) ? this.value : other.get()__	};return,the,object,that,was,bound,or,the,result,of,invoking,code,other,if,no,value,has,been,bound,param,other,a,link,supplier,of,the,value,to,be,returned,if,there,is,no,bound,value,return,the,value,if,bound,otherwise,the,supplied,code,other;public,t,or,else,get,supplier,extends,t,other,return,this,value,null,this,value,other,get
BindResult -> public T orElseGet(Supplier<? extends T> other);1539393863;Return the object that was bound, or the result of invoking {@code other} if no_value has been bound._@param other a {@link Supplier} of the value to be returned if there is no bound_value_@return the value, if bound, otherwise the supplied {@code other};public T orElseGet(Supplier<? extends T> other) {_		return (this.value != null) ? this.value : other.get()__	};return,the,object,that,was,bound,or,the,result,of,invoking,code,other,if,no,value,has,been,bound,param,other,a,link,supplier,of,the,value,to,be,returned,if,there,is,no,bound,value,return,the,value,if,bound,otherwise,the,supplied,code,other;public,t,or,else,get,supplier,extends,t,other,return,this,value,null,this,value,other,get
BindResult -> public T orElseCreate(Class<? extends T> type);1507173536;Return the object that was bound, or a new instance of the specified class if no_value has been bound._@param type the type to create if no value was bound_@return the value, if bound, otherwise a new instance of {@code type};public T orElseCreate(Class<? extends T> type) {_		Assert.notNull(type, "Type must not be null")__		return (this.value != null ? this.value : BeanUtils.instantiateClass(type))__	};return,the,object,that,was,bound,or,a,new,instance,of,the,specified,class,if,no,value,has,been,bound,param,type,the,type,to,create,if,no,value,was,bound,return,the,value,if,bound,otherwise,a,new,instance,of,code,type;public,t,or,else,create,class,extends,t,type,assert,not,null,type,type,must,not,be,null,return,this,value,null,this,value,bean,utils,instantiate,class,type
BindResult -> public T orElseCreate(Class<? extends T> type);1525416882;Return the object that was bound, or a new instance of the specified class if no_value has been bound._@param type the type to create if no value was bound_@return the value, if bound, otherwise a new instance of {@code type};public T orElseCreate(Class<? extends T> type) {_		Assert.notNull(type, "Type must not be null")__		return (this.value != null ? this.value : BeanUtils.instantiateClass(type))__	};return,the,object,that,was,bound,or,a,new,instance,of,the,specified,class,if,no,value,has,been,bound,param,type,the,type,to,create,if,no,value,was,bound,return,the,value,if,bound,otherwise,a,new,instance,of,code,type;public,t,or,else,create,class,extends,t,type,assert,not,null,type,type,must,not,be,null,return,this,value,null,this,value,bean,utils,instantiate,class,type
BindResult -> public T orElseCreate(Class<? extends T> type);1525476706;Return the object that was bound, or a new instance of the specified class if no_value has been bound._@param type the type to create if no value was bound_@return the value, if bound, otherwise a new instance of {@code type};public T orElseCreate(Class<? extends T> type) {_		Assert.notNull(type, "Type must not be null")__		return (this.value != null ? this.value : BeanUtils.instantiateClass(type))__	};return,the,object,that,was,bound,or,a,new,instance,of,the,specified,class,if,no,value,has,been,bound,param,type,the,type,to,create,if,no,value,was,bound,return,the,value,if,bound,otherwise,a,new,instance,of,code,type;public,t,or,else,create,class,extends,t,type,assert,not,null,type,type,must,not,be,null,return,this,value,null,this,value,bean,utils,instantiate,class,type
BindResult -> public T orElseCreate(Class<? extends T> type);1532738143;Return the object that was bound, or a new instance of the specified class if no_value has been bound._@param type the type to create if no value was bound_@return the value, if bound, otherwise a new instance of {@code type};public T orElseCreate(Class<? extends T> type) {_		Assert.notNull(type, "Type must not be null")__		return (this.value != null) ? this.value : BeanUtils.instantiateClass(type)__	};return,the,object,that,was,bound,or,a,new,instance,of,the,specified,class,if,no,value,has,been,bound,param,type,the,type,to,create,if,no,value,was,bound,return,the,value,if,bound,otherwise,a,new,instance,of,code,type;public,t,or,else,create,class,extends,t,type,assert,not,null,type,type,must,not,be,null,return,this,value,null,this,value,bean,utils,instantiate,class,type
BindResult -> public T orElseCreate(Class<? extends T> type);1539393863;Return the object that was bound, or a new instance of the specified class if no_value has been bound._@param type the type to create if no value was bound_@return the value, if bound, otherwise a new instance of {@code type};public T orElseCreate(Class<? extends T> type) {_		Assert.notNull(type, "Type must not be null")__		return (this.value != null) ? this.value : BeanUtils.instantiateClass(type)__	};return,the,object,that,was,bound,or,a,new,instance,of,the,specified,class,if,no,value,has,been,bound,param,type,the,type,to,create,if,no,value,was,bound,return,the,value,if,bound,otherwise,a,new,instance,of,code,type;public,t,or,else,create,class,extends,t,type,assert,not,null,type,type,must,not,be,null,return,this,value,null,this,value,bean,utils,instantiate,class,type
BindResult -> public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier) 			throws X;1507173536;Return the object that was bound, or throw an exception to be created by the_provided supplier if no value has been bound._@param <X> Type of the exception to be thrown_@param exceptionSupplier The supplier which will return the exception to be thrown_@return the present value_@throws X if there is no value present;public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier)_			throws X {_		if (this.value == null) {_			throw exceptionSupplier.get()__		}_		return this.value__	};return,the,object,that,was,bound,or,throw,an,exception,to,be,created,by,the,provided,supplier,if,no,value,has,been,bound,param,x,type,of,the,exception,to,be,thrown,param,exception,supplier,the,supplier,which,will,return,the,exception,to,be,thrown,return,the,present,value,throws,x,if,there,is,no,value,present;public,x,extends,throwable,t,or,else,throw,supplier,extends,x,exception,supplier,throws,x,if,this,value,null,throw,exception,supplier,get,return,this,value
BindResult -> public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier) 			throws X;1525416882;Return the object that was bound, or throw an exception to be created by the_provided supplier if no value has been bound._@param <X> Type of the exception to be thrown_@param exceptionSupplier The supplier which will return the exception to be thrown_@return the present value_@throws X if there is no value present;public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier)_			throws X {_		if (this.value == null) {_			throw exceptionSupplier.get()__		}_		return this.value__	};return,the,object,that,was,bound,or,throw,an,exception,to,be,created,by,the,provided,supplier,if,no,value,has,been,bound,param,x,type,of,the,exception,to,be,thrown,param,exception,supplier,the,supplier,which,will,return,the,exception,to,be,thrown,return,the,present,value,throws,x,if,there,is,no,value,present;public,x,extends,throwable,t,or,else,throw,supplier,extends,x,exception,supplier,throws,x,if,this,value,null,throw,exception,supplier,get,return,this,value
BindResult -> public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier) 			throws X;1525476706;Return the object that was bound, or throw an exception to be created by the_provided supplier if no value has been bound._@param <X> Type of the exception to be thrown_@param exceptionSupplier The supplier which will return the exception to be thrown_@return the present value_@throws X if there is no value present;public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier)_			throws X {_		if (this.value == null) {_			throw exceptionSupplier.get()__		}_		return this.value__	};return,the,object,that,was,bound,or,throw,an,exception,to,be,created,by,the,provided,supplier,if,no,value,has,been,bound,param,x,type,of,the,exception,to,be,thrown,param,exception,supplier,the,supplier,which,will,return,the,exception,to,be,thrown,return,the,present,value,throws,x,if,there,is,no,value,present;public,x,extends,throwable,t,or,else,throw,supplier,extends,x,exception,supplier,throws,x,if,this,value,null,throw,exception,supplier,get,return,this,value
BindResult -> public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier) 			throws X;1532738143;Return the object that was bound, or throw an exception to be created by the_provided supplier if no value has been bound._@param <X> the type of the exception to be thrown_@param exceptionSupplier the supplier which will return the exception to be thrown_@return the present value_@throws X if there is no value present;public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier)_			throws X {_		if (this.value == null) {_			throw exceptionSupplier.get()__		}_		return this.value__	};return,the,object,that,was,bound,or,throw,an,exception,to,be,created,by,the,provided,supplier,if,no,value,has,been,bound,param,x,the,type,of,the,exception,to,be,thrown,param,exception,supplier,the,supplier,which,will,return,the,exception,to,be,thrown,return,the,present,value,throws,x,if,there,is,no,value,present;public,x,extends,throwable,t,or,else,throw,supplier,extends,x,exception,supplier,throws,x,if,this,value,null,throw,exception,supplier,get,return,this,value
BindResult -> public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier) 			throws X;1539393863;Return the object that was bound, or throw an exception to be created by the_provided supplier if no value has been bound._@param <X> the type of the exception to be thrown_@param exceptionSupplier the supplier which will return the exception to be thrown_@return the present value_@throws X if there is no value present;public <X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier)_			throws X {_		if (this.value == null) {_			throw exceptionSupplier.get()__		}_		return this.value__	};return,the,object,that,was,bound,or,throw,an,exception,to,be,created,by,the,provided,supplier,if,no,value,has,been,bound,param,x,the,type,of,the,exception,to,be,thrown,param,exception,supplier,the,supplier,which,will,return,the,exception,to,be,thrown,return,the,present,value,throws,x,if,there,is,no,value,present;public,x,extends,throwable,t,or,else,throw,supplier,extends,x,exception,supplier,throws,x,if,this,value,null,throw,exception,supplier,get,return,this,value
BindResult -> public T orElse(T other);1507173536;Return the object that was bound, or {@code other} if no value has been bound._@param other the value to be returned if there is no bound value (may be_{@code null})_@return the value, if bound, otherwise {@code other};public T orElse(T other) {_		return (this.value != null ? this.value : other)__	};return,the,object,that,was,bound,or,code,other,if,no,value,has,been,bound,param,other,the,value,to,be,returned,if,there,is,no,bound,value,may,be,code,null,return,the,value,if,bound,otherwise,code,other;public,t,or,else,t,other,return,this,value,null,this,value,other
BindResult -> public T orElse(T other);1525416882;Return the object that was bound, or {@code other} if no value has been bound._@param other the value to be returned if there is no bound value (may be_{@code null})_@return the value, if bound, otherwise {@code other};public T orElse(T other) {_		return (this.value != null ? this.value : other)__	};return,the,object,that,was,bound,or,code,other,if,no,value,has,been,bound,param,other,the,value,to,be,returned,if,there,is,no,bound,value,may,be,code,null,return,the,value,if,bound,otherwise,code,other;public,t,or,else,t,other,return,this,value,null,this,value,other
BindResult -> public T orElse(T other);1525476706;Return the object that was bound, or {@code other} if no value has been bound._@param other the value to be returned if there is no bound value (may be_{@code null})_@return the value, if bound, otherwise {@code other};public T orElse(T other) {_		return (this.value != null ? this.value : other)__	};return,the,object,that,was,bound,or,code,other,if,no,value,has,been,bound,param,other,the,value,to,be,returned,if,there,is,no,bound,value,may,be,code,null,return,the,value,if,bound,otherwise,code,other;public,t,or,else,t,other,return,this,value,null,this,value,other
BindResult -> public T orElse(T other);1532738143;Return the object that was bound, or {@code other} if no value has been bound._@param other the value to be returned if there is no bound value (may be_{@code null})_@return the value, if bound, otherwise {@code other};public T orElse(T other) {_		return (this.value != null) ? this.value : other__	};return,the,object,that,was,bound,or,code,other,if,no,value,has,been,bound,param,other,the,value,to,be,returned,if,there,is,no,bound,value,may,be,code,null,return,the,value,if,bound,otherwise,code,other;public,t,or,else,t,other,return,this,value,null,this,value,other
BindResult -> public T orElse(T other);1539393863;Return the object that was bound, or {@code other} if no value has been bound._@param other the value to be returned if there is no bound value (may be_{@code null})_@return the value, if bound, otherwise {@code other};public T orElse(T other) {_		return (this.value != null) ? this.value : other__	};return,the,object,that,was,bound,or,code,other,if,no,value,has,been,bound,param,other,the,value,to,be,returned,if,there,is,no,bound,value,may,be,code,null,return,the,value,if,bound,otherwise,code,other;public,t,or,else,t,other,return,this,value,null,this,value,other
BindResult -> public T get() throws NoSuchElementException;1507173536;Return the object that was bound or throw a {@link NoSuchElementException} if no_value was bound._@return the bound value (never {@code null})_@throws NoSuchElementException if no value was bound_@see #isBound();public T get() throws NoSuchElementException {_		if (this.value == null) {_			throw new NoSuchElementException("No value bound")__		}_		return this.value__	};return,the,object,that,was,bound,or,throw,a,link,no,such,element,exception,if,no,value,was,bound,return,the,bound,value,never,code,null,throws,no,such,element,exception,if,no,value,was,bound,see,is,bound;public,t,get,throws,no,such,element,exception,if,this,value,null,throw,new,no,such,element,exception,no,value,bound,return,this,value
BindResult -> public T get() throws NoSuchElementException;1525416882;Return the object that was bound or throw a {@link NoSuchElementException} if no_value was bound._@return the bound value (never {@code null})_@throws NoSuchElementException if no value was bound_@see #isBound();public T get() throws NoSuchElementException {_		if (this.value == null) {_			throw new NoSuchElementException("No value bound")__		}_		return this.value__	};return,the,object,that,was,bound,or,throw,a,link,no,such,element,exception,if,no,value,was,bound,return,the,bound,value,never,code,null,throws,no,such,element,exception,if,no,value,was,bound,see,is,bound;public,t,get,throws,no,such,element,exception,if,this,value,null,throw,new,no,such,element,exception,no,value,bound,return,this,value
BindResult -> public T get() throws NoSuchElementException;1525476706;Return the object that was bound or throw a {@link NoSuchElementException} if no_value was bound._@return the bound value (never {@code null})_@throws NoSuchElementException if no value was bound_@see #isBound();public T get() throws NoSuchElementException {_		if (this.value == null) {_			throw new NoSuchElementException("No value bound")__		}_		return this.value__	};return,the,object,that,was,bound,or,throw,a,link,no,such,element,exception,if,no,value,was,bound,return,the,bound,value,never,code,null,throws,no,such,element,exception,if,no,value,was,bound,see,is,bound;public,t,get,throws,no,such,element,exception,if,this,value,null,throw,new,no,such,element,exception,no,value,bound,return,this,value
BindResult -> public T get() throws NoSuchElementException;1532738143;Return the object that was bound or throw a {@link NoSuchElementException} if no_value was bound._@return the bound value (never {@code null})_@throws NoSuchElementException if no value was bound_@see #isBound();public T get() throws NoSuchElementException {_		if (this.value == null) {_			throw new NoSuchElementException("No value bound")__		}_		return this.value__	};return,the,object,that,was,bound,or,throw,a,link,no,such,element,exception,if,no,value,was,bound,return,the,bound,value,never,code,null,throws,no,such,element,exception,if,no,value,was,bound,see,is,bound;public,t,get,throws,no,such,element,exception,if,this,value,null,throw,new,no,such,element,exception,no,value,bound,return,this,value
BindResult -> public T get() throws NoSuchElementException;1539393863;Return the object that was bound or throw a {@link NoSuchElementException} if no_value was bound._@return the bound value (never {@code null})_@throws NoSuchElementException if no value was bound_@see #isBound();public T get() throws NoSuchElementException {_		if (this.value == null) {_			throw new NoSuchElementException("No value bound")__		}_		return this.value__	};return,the,object,that,was,bound,or,throw,a,link,no,such,element,exception,if,no,value,was,bound,return,the,bound,value,never,code,null,throws,no,such,element,exception,if,no,value,was,bound,see,is,bound;public,t,get,throws,no,such,element,exception,if,this,value,null,throw,new,no,such,element,exception,no,value,bound,return,this,value
BindResult -> public void ifBound(Consumer<? super T> consumer);1507173536;Invoke the specified consumer with the bound value, or do nothing if no value has_been bound._@param consumer block to execute if a value has been bound;public void ifBound(Consumer<? super T> consumer) {_		Assert.notNull(consumer, "Consumer must not be null")__		if (this.value != null) {_			consumer.accept(this.value)__		}_	};invoke,the,specified,consumer,with,the,bound,value,or,do,nothing,if,no,value,has,been,bound,param,consumer,block,to,execute,if,a,value,has,been,bound;public,void,if,bound,consumer,super,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,if,this,value,null,consumer,accept,this,value
BindResult -> public void ifBound(Consumer<? super T> consumer);1525416882;Invoke the specified consumer with the bound value, or do nothing if no value has_been bound._@param consumer block to execute if a value has been bound;public void ifBound(Consumer<? super T> consumer) {_		Assert.notNull(consumer, "Consumer must not be null")__		if (this.value != null) {_			consumer.accept(this.value)__		}_	};invoke,the,specified,consumer,with,the,bound,value,or,do,nothing,if,no,value,has,been,bound,param,consumer,block,to,execute,if,a,value,has,been,bound;public,void,if,bound,consumer,super,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,if,this,value,null,consumer,accept,this,value
BindResult -> public void ifBound(Consumer<? super T> consumer);1525476706;Invoke the specified consumer with the bound value, or do nothing if no value has_been bound._@param consumer block to execute if a value has been bound;public void ifBound(Consumer<? super T> consumer) {_		Assert.notNull(consumer, "Consumer must not be null")__		if (this.value != null) {_			consumer.accept(this.value)__		}_	};invoke,the,specified,consumer,with,the,bound,value,or,do,nothing,if,no,value,has,been,bound,param,consumer,block,to,execute,if,a,value,has,been,bound;public,void,if,bound,consumer,super,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,if,this,value,null,consumer,accept,this,value
BindResult -> public void ifBound(Consumer<? super T> consumer);1532738143;Invoke the specified consumer with the bound value, or do nothing if no value has_been bound._@param consumer block to execute if a value has been bound;public void ifBound(Consumer<? super T> consumer) {_		Assert.notNull(consumer, "Consumer must not be null")__		if (this.value != null) {_			consumer.accept(this.value)__		}_	};invoke,the,specified,consumer,with,the,bound,value,or,do,nothing,if,no,value,has,been,bound,param,consumer,block,to,execute,if,a,value,has,been,bound;public,void,if,bound,consumer,super,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,if,this,value,null,consumer,accept,this,value
BindResult -> public void ifBound(Consumer<? super T> consumer);1539393863;Invoke the specified consumer with the bound value, or do nothing if no value has_been bound._@param consumer block to execute if a value has been bound;public void ifBound(Consumer<? super T> consumer) {_		Assert.notNull(consumer, "Consumer must not be null")__		if (this.value != null) {_			consumer.accept(this.value)__		}_	};invoke,the,specified,consumer,with,the,bound,value,or,do,nothing,if,no,value,has,been,bound,param,consumer,block,to,execute,if,a,value,has,been,bound;public,void,if,bound,consumer,super,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,if,this,value,null,consumer,accept,this,value
BindResult -> public <U> BindResult<U> map(Function<? super T, ? extends U> mapper);1507173536;Apply the provided mapping function to the bound value, or return an updated_unbound result if no value has been bound._@param <U> The type of the result of the mapping function_@param mapper a mapping function to apply to the bound value. The mapper will not_be invoked if no value has been bound._@return an {@code BindResult} describing the result of applying a mapping function_to the value of this {@code BindResult}.;public <U> BindResult<U> map(Function<? super T, ? extends U> mapper) {_		Assert.notNull(mapper, "Mapper must not be null")__		return of(this.value == null ? null : mapper.apply(this.value))__	};apply,the,provided,mapping,function,to,the,bound,value,or,return,an,updated,unbound,result,if,no,value,has,been,bound,param,u,the,type,of,the,result,of,the,mapping,function,param,mapper,a,mapping,function,to,apply,to,the,bound,value,the,mapper,will,not,be,invoked,if,no,value,has,been,bound,return,an,code,bind,result,describing,the,result,of,applying,a,mapping,function,to,the,value,of,this,code,bind,result;public,u,bind,result,u,map,function,super,t,extends,u,mapper,assert,not,null,mapper,mapper,must,not,be,null,return,of,this,value,null,null,mapper,apply,this,value
BindResult -> public <U> BindResult<U> map(Function<? super T, ? extends U> mapper);1525416882;Apply the provided mapping function to the bound value, or return an updated_unbound result if no value has been bound._@param <U> The type of the result of the mapping function_@param mapper a mapping function to apply to the bound value. The mapper will not_be invoked if no value has been bound._@return an {@code BindResult} describing the result of applying a mapping function_to the value of this {@code BindResult}.;public <U> BindResult<U> map(Function<? super T, ? extends U> mapper) {_		Assert.notNull(mapper, "Mapper must not be null")__		return of(this.value != null ? mapper.apply(this.value) : null)__	};apply,the,provided,mapping,function,to,the,bound,value,or,return,an,updated,unbound,result,if,no,value,has,been,bound,param,u,the,type,of,the,result,of,the,mapping,function,param,mapper,a,mapping,function,to,apply,to,the,bound,value,the,mapper,will,not,be,invoked,if,no,value,has,been,bound,return,an,code,bind,result,describing,the,result,of,applying,a,mapping,function,to,the,value,of,this,code,bind,result;public,u,bind,result,u,map,function,super,t,extends,u,mapper,assert,not,null,mapper,mapper,must,not,be,null,return,of,this,value,null,mapper,apply,this,value,null
BindResult -> public <U> BindResult<U> map(Function<? super T, ? extends U> mapper);1525476706;Apply the provided mapping function to the bound value, or return an updated_unbound result if no value has been bound._@param <U> The type of the result of the mapping function_@param mapper a mapping function to apply to the bound value. The mapper will not_be invoked if no value has been bound._@return an {@code BindResult} describing the result of applying a mapping function_to the value of this {@code BindResult}.;public <U> BindResult<U> map(Function<? super T, ? extends U> mapper) {_		Assert.notNull(mapper, "Mapper must not be null")__		return of(this.value != null ? mapper.apply(this.value) : null)__	};apply,the,provided,mapping,function,to,the,bound,value,or,return,an,updated,unbound,result,if,no,value,has,been,bound,param,u,the,type,of,the,result,of,the,mapping,function,param,mapper,a,mapping,function,to,apply,to,the,bound,value,the,mapper,will,not,be,invoked,if,no,value,has,been,bound,return,an,code,bind,result,describing,the,result,of,applying,a,mapping,function,to,the,value,of,this,code,bind,result;public,u,bind,result,u,map,function,super,t,extends,u,mapper,assert,not,null,mapper,mapper,must,not,be,null,return,of,this,value,null,mapper,apply,this,value,null
BindResult -> public <U> BindResult<U> map(Function<? super T, ? extends U> mapper);1532738143;Apply the provided mapping function to the bound value, or return an updated_unbound result if no value has been bound._@param <U> the type of the result of the mapping function_@param mapper a mapping function to apply to the bound value. The mapper will not_be invoked if no value has been bound._@return an {@code BindResult} describing the result of applying a mapping function_to the value of this {@code BindResult}.;public <U> BindResult<U> map(Function<? super T, ? extends U> mapper) {_		Assert.notNull(mapper, "Mapper must not be null")__		return of((this.value != null) ? mapper.apply(this.value) : null)__	};apply,the,provided,mapping,function,to,the,bound,value,or,return,an,updated,unbound,result,if,no,value,has,been,bound,param,u,the,type,of,the,result,of,the,mapping,function,param,mapper,a,mapping,function,to,apply,to,the,bound,value,the,mapper,will,not,be,invoked,if,no,value,has,been,bound,return,an,code,bind,result,describing,the,result,of,applying,a,mapping,function,to,the,value,of,this,code,bind,result;public,u,bind,result,u,map,function,super,t,extends,u,mapper,assert,not,null,mapper,mapper,must,not,be,null,return,of,this,value,null,mapper,apply,this,value,null
BindResult -> public <U> BindResult<U> map(Function<? super T, ? extends U> mapper);1539393863;Apply the provided mapping function to the bound value, or return an updated_unbound result if no value has been bound._@param <U> the type of the result of the mapping function_@param mapper a mapping function to apply to the bound value. The mapper will not_be invoked if no value has been bound._@return an {@code BindResult} describing the result of applying a mapping function_to the value of this {@code BindResult}.;public <U> BindResult<U> map(Function<? super T, ? extends U> mapper) {_		Assert.notNull(mapper, "Mapper must not be null")__		return of((this.value != null) ? mapper.apply(this.value) : null)__	};apply,the,provided,mapping,function,to,the,bound,value,or,return,an,updated,unbound,result,if,no,value,has,been,bound,param,u,the,type,of,the,result,of,the,mapping,function,param,mapper,a,mapping,function,to,apply,to,the,bound,value,the,mapper,will,not,be,invoked,if,no,value,has,been,bound,return,an,code,bind,result,describing,the,result,of,applying,a,mapping,function,to,the,value,of,this,code,bind,result;public,u,bind,result,u,map,function,super,t,extends,u,mapper,assert,not,null,mapper,mapper,must,not,be,null,return,of,this,value,null,mapper,apply,this,value,null
