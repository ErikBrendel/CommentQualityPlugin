commented;modifiers;parameterAmount;loc;comment;code
false;protected,final;2;4;;@Override protected final FailureAnalysis analyze(Throwable rootFailure, T cause) {     return analyze(rootFailure, cause, getDescription(rootFailure)). }
false;private;1;13;;private String getDescription(Throwable rootFailure) {     UnsatisfiedDependencyException unsatisfiedDependency = findMostNestedCause(rootFailure, UnsatisfiedDependencyException.class).     if (unsatisfiedDependency != null) {         return getDescription(unsatisfiedDependency).     }     BeanInstantiationException beanInstantiationException = findMostNestedCause(rootFailure, BeanInstantiationException.class).     if (beanInstantiationException != null) {         return getDescription(beanInstantiationException).     }     return null. }
false;private;2;12;;@SuppressWarnings("unchecked") private <C extends Exception> C findMostNestedCause(Throwable root, Class<C> type) {     Throwable candidate = root.     C result = null.     while (candidate != null) {         if (type.isAssignableFrom(candidate.getClass())) {             result = (C) candidate.         }         candidate = candidate.getCause().     }     return result. }
false;private;1;24;;private String getDescription(UnsatisfiedDependencyException ex) {     InjectionPoint injectionPoint = ex.getInjectionPoint().     if (injectionPoint != null) {         if (injectionPoint.getField() != null) {             return String.format("Field %s in %s", injectionPoint.getField().getName(), injectionPoint.getField().getDeclaringClass().getName()).         }         if (injectionPoint.getMethodParameter() != null) {             if (injectionPoint.getMethodParameter().getConstructor() != null) {                 return String.format("Parameter %d of constructor in %s", injectionPoint.getMethodParameter().getParameterIndex(), injectionPoint.getMethodParameter().getDeclaringClass().getName()).             }             return String.format("Parameter %d of method %s in %s", injectionPoint.getMethodParameter().getParameterIndex(), injectionPoint.getMethodParameter().getMethod().getName(), injectionPoint.getMethodParameter().getDeclaringClass().getName()).         }     }     return ex.getResourceDescription(). }
false;private;1;11;;private String getDescription(BeanInstantiationException ex) {     if (ex.getConstructingMethod() != null) {         return String.format("Method %s in %s", ex.getConstructingMethod().getName(), ex.getConstructingMethod().getDeclaringClass().getName()).     }     if (ex.getConstructor() != null) {         return String.format("Constructor in %s", ClassUtils.getUserClass(ex.getConstructor().getDeclaringClass()).getName()).     }     return ex.getBeanClass().getName(). }
true;protected,abstract;3;2;/**  * Returns an analysis of the given {@code rootFailure}, or {@code null} if no  * analysis was possible.  * @param rootFailure the root failure passed to the analyzer  * @param cause the actual found cause  * @param description the description of the injection point or {@code null}  * @return the analysis or {@code null}  */ ;/**  * Returns an analysis of the given {@code rootFailure}, or {@code null} if no  * analysis was possible.  * @param rootFailure the root failure passed to the analyzer  * @param cause the actual found cause  * @param description the description of the injection point or {@code null}  * @return the analysis or {@code null}  */ protected abstract FailureAnalysis analyze(Throwable rootFailure, T cause, String description).
