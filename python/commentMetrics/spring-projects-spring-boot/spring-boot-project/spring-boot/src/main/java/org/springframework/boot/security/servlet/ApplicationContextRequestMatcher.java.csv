commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;4;;@Override public final boolean matches(HttpServletRequest request) {     return matches(request, getContext(request)). }
true;protected,abstract;2;1;/**  * Decides whether the rule implemented by the strategy matches the supplied request.  * @param request the source request  * @param context a supplier for the initialized context (may throw an exception)  * @return if the request matches  */ ;/**  * Decides whether the rule implemented by the strategy matches the supplied request.  * @param request the source request  * @param context a supplier for the initialized context (may throw an exception)  * @return if the request matches  */ protected abstract boolean matches(HttpServletRequest request, Supplier<C> context).
false;private;1;12;;private Supplier<C> getContext(HttpServletRequest request) {     if (this.context == null) {         synchronized (this.contextLock) {             if (this.context == null) {                 Supplier<C> createdContext = createContext(request).                 initialized(createdContext).                 this.context = createdContext.             }         }     }     return this.context. }
true;protected;1;2;/**  * Called once the context has been initialized.  * @param context a supplier for the initialized context (may throw an exception)  */ ;/**  * Called once the context has been initialized.  * @param context a supplier for the initialized context (may throw an exception)  */ protected void initialized(Supplier<C> context) { }
false;private;1;9;;@SuppressWarnings("unchecked") private Supplier<C> createContext(HttpServletRequest request) {     WebApplicationContext context = WebApplicationContextUtils.getRequiredWebApplicationContext(request.getServletContext()).     if (this.contextClass.isInstance(context)) {         return () -> (C) context.     }     return () -> context.getBean(this.contextClass). }
