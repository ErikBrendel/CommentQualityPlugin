commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void setBeanFactory(BeanFactory beanFactory) {     Assert.isInstanceOf(ListableBeanFactory.class, beanFactory, "ErrorPageRegistrarBeanPostProcessor can only be used " + "with a ListableBeanFactory").     this.beanFactory = (ListableBeanFactory) beanFactory. }
false;public;2;8;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     if (bean instanceof ErrorPageRegistry) {         postProcessBeforeInitialization((ErrorPageRegistry) bean).     }     return bean. }
false;public;2;5;;@Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {     return bean. }
false;private;1;5;;private void postProcessBeforeInitialization(ErrorPageRegistry registry) {     for (ErrorPageRegistrar registrar : getRegistrars()) {         registrar.registerErrorPages(registry).     } }
false;private;0;10;;private Collection<ErrorPageRegistrar> getRegistrars() {     if (this.registrars == null) {         // Look up does not include the parent context         this.registrars = new ArrayList<>(this.beanFactory.getBeansOfType(ErrorPageRegistrar.class, false, false).values()).         this.registrars.sort(AnnotationAwareOrderComparator.INSTANCE).         this.registrars = Collections.unmodifiableList(this.registrars).     }     return this.registrars. }
