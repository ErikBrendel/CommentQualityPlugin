commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;public void logStarting(Log log) {     Assert.notNull(log, "Log must not be null").     if (log.isInfoEnabled()) {         log.info(getStartupMessage()).     }     if (log.isDebugEnabled()) {         log.debug(getRunningMessage()).     } }
false;public;2;5;;public void logStarted(Log log, StopWatch stopWatch) {     if (log.isInfoEnabled()) {         log.info(getStartedMessage(stopWatch)).     } }
false;private;0;10;;private String getStartupMessage() {     StringBuilder message = new StringBuilder().     message.append("Starting ").     message.append(getApplicationName()).     message.append(getVersion(this.sourceClass)).     message.append(getOn()).     message.append(getPid()).     message.append(getContext()).     return message.toString(). }
false;private;0;8;;private StringBuilder getRunningMessage() {     StringBuilder message = new StringBuilder().     message.append("Running with Spring Boot").     message.append(getVersion(getClass())).     message.append(", Spring").     message.append(getVersion(ApplicationContext.class)).     return message. }
false;private;1;15;;private StringBuilder getStartedMessage(StopWatch stopWatch) {     StringBuilder message = new StringBuilder().     message.append("Started ").     message.append(getApplicationName()).     message.append(" in ").     message.append(stopWatch.getTotalTimeSeconds()).     try {         double uptime = ManagementFactory.getRuntimeMXBean().getUptime() / 1000.0.         message.append(" seconds (JVM running for ").append(uptime).append(")").     } catch (Throwable ex) {     // No JVM time available     }     return message. }
false;private;0;4;;private String getApplicationName() {     return (this.sourceClass != null) ? ClassUtils.getShortName(this.sourceClass) : "application". }
false;private;1;3;;private String getVersion(Class<?> source) {     return getValue(" v", () -> source.getPackage().getImplementationVersion(), ""). }
false;private;0;3;;private String getOn() {     return getValue(" on ", () -> InetAddress.getLocalHost().getHostName()). }
false;private;0;3;;private String getPid() {     return getValue(" with PID ", () -> new ApplicationPid().toString()). }
false;private;0;17;;private String getContext() {     String startedBy = getValue("started by ", () -> System.getProperty("user.name")).     String in = getValue("in ", () -> System.getProperty("user.dir")).     ApplicationHome home = new ApplicationHome(this.sourceClass).     String path = (home.getSource() != null) ? home.getSource().getAbsolutePath() : "".     if (startedBy == null && path == null) {         return "".     }     if (StringUtils.hasLength(startedBy) && StringUtils.hasLength(path)) {         startedBy = " " + startedBy.     }     if (StringUtils.hasLength(in) && StringUtils.hasLength(startedBy)) {         in = " " + in.     }     return " (" + path + startedBy + in + ")". }
false;private;2;3;;private String getValue(String prefix, Callable<Object> call) {     return getValue(prefix, call, ""). }
false;private;3;12;;private String getValue(String prefix, Callable<Object> call, String defaultValue) {     try {         Object value = call.call().         if (value != null && StringUtils.hasLength(value.toString())) {             return prefix + value.         }     } catch (Exception ex) {     // Swallow and continue     }     return defaultValue. }
