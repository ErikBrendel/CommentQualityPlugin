commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public Identifier toPhysicalCatalogName(Identifier name, JdbcEnvironment jdbcEnvironment) {     return apply(name, jdbcEnvironment). }
false;public;2;5;;@Override public Identifier toPhysicalSchemaName(Identifier name, JdbcEnvironment jdbcEnvironment) {     return apply(name, jdbcEnvironment). }
false;public;2;5;;@Override public Identifier toPhysicalTableName(Identifier name, JdbcEnvironment jdbcEnvironment) {     return apply(name, jdbcEnvironment). }
false;public;2;5;;@Override public Identifier toPhysicalSequenceName(Identifier name, JdbcEnvironment jdbcEnvironment) {     return apply(name, jdbcEnvironment). }
false;public;2;5;;@Override public Identifier toPhysicalColumnName(Identifier name, JdbcEnvironment jdbcEnvironment) {     return apply(name, jdbcEnvironment). }
false;private;2;13;;private Identifier apply(Identifier name, JdbcEnvironment jdbcEnvironment) {     if (name == null) {         return null.     }     StringBuilder builder = new StringBuilder(name.getText().replace('.', '_')).     for (int i = 1. i < builder.length() - 1. i++) {         if (isUnderscoreRequired(builder.charAt(i - 1), builder.charAt(i), builder.charAt(i + 1))) {             builder.insert(i++, '_').         }     }     return getIdentifier(builder.toString(), name.isQuoted(), jdbcEnvironment). }
true;protected;3;7;/**  * Get an identifier for the specified details. By default this method will return an  * identifier with the name adapted based on the result of  * {@link #isCaseInsensitive(JdbcEnvironment)}  * @param name the name of the identifier  * @param quoted if the identifier is quoted  * @param jdbcEnvironment the JDBC environment  * @return an identifier instance  */ ;/**  * Get an identifier for the specified details. By default this method will return an  * identifier with the name adapted based on the result of  * {@link #isCaseInsensitive(JdbcEnvironment)}  * @param name the name of the identifier  * @param quoted if the identifier is quoted  * @param jdbcEnvironment the JDBC environment  * @return an identifier instance  */ protected Identifier getIdentifier(String name, boolean quoted, JdbcEnvironment jdbcEnvironment) {     if (isCaseInsensitive(jdbcEnvironment)) {         name = name.toLowerCase(Locale.ROOT).     }     return new Identifier(name, quoted). }
true;protected;1;3;/**  * Specify whether the database is case sensitive.  * @param jdbcEnvironment the JDBC environment which can be used to determine case  * @return true if the database is case insensitive sensitivity  */ ;/**  * Specify whether the database is case sensitive.  * @param jdbcEnvironment the JDBC environment which can be used to determine case  * @return true if the database is case insensitive sensitivity  */ protected boolean isCaseInsensitive(JdbcEnvironment jdbcEnvironment) {     return true. }
false;private;3;4;;private boolean isUnderscoreRequired(char before, char current, char after) {     return Character.isLowerCase(before) && Character.isUpperCase(current) && Character.isLowerCase(after). }
