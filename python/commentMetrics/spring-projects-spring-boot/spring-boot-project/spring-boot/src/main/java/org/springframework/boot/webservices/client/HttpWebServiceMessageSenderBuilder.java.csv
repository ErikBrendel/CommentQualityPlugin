commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the connection timeout.  * @param connectTimeout the connection timeout  * @return a new builder instance  */ ;/**  * Set the connection timeout.  * @param connectTimeout the connection timeout  * @return a new builder instance  */ public HttpWebServiceMessageSenderBuilder setConnectTimeout(Duration connectTimeout) {     this.connectTimeout = connectTimeout.     return this. }
true;public;1;4;/**  * Set the read timeout.  * @param readTimeout the read timeout  * @return a new builder instance  */ ;/**  * Set the read timeout.  * @param readTimeout the read timeout  * @return a new builder instance  */ public HttpWebServiceMessageSenderBuilder setReadTimeout(Duration readTimeout) {     this.readTimeout = readTimeout.     return this. }
true;public;1;7;/**  * Set the {@code Supplier} of {@link ClientHttpRequestFactory} that should be called  * to create the HTTP-based {@link WebServiceMessageSender}.  * @param requestFactorySupplier the supplier for the request factory  * @return a new builder instance  */ ;/**  * Set the {@code Supplier} of {@link ClientHttpRequestFactory} that should be called  * to create the HTTP-based {@link WebServiceMessageSender}.  * @param requestFactorySupplier the supplier for the request factory  * @return a new builder instance  */ public HttpWebServiceMessageSenderBuilder requestFactory(Supplier<ClientHttpRequestFactory> requestFactorySupplier) {     Assert.notNull(requestFactorySupplier, "RequestFactory Supplier must not be null").     this.requestFactorySupplier = requestFactorySupplier.     return this. }
false;public;0;14;;public WebServiceMessageSender build() {     ClientHttpRequestFactory requestFactory = (this.requestFactorySupplier != null) ? this.requestFactorySupplier.get() : new ClientHttpRequestFactorySupplier().get().     if (this.connectTimeout != null) {         new TimeoutRequestFactoryCustomizer(this.connectTimeout, "setConnectTimeout").customize(requestFactory).     }     if (this.readTimeout != null) {         new TimeoutRequestFactoryCustomizer(this.readTimeout, "setReadTimeout").customize(requestFactory).     }     return new ClientHttpRequestMessageSender(requestFactory). }
false;public;1;4;;public void customize(ClientHttpRequestFactory factory) {     ReflectionUtils.invokeMethod(findMethod(factory), factory, Math.toIntExact(this.timeout.toMillis())). }
false;private;1;9;;private Method findMethod(ClientHttpRequestFactory factory) {     Method method = ReflectionUtils.findMethod(factory.getClass(), this.methodName, int.class).     if (method != null) {         return method.     }     throw new IllegalStateException("Request factory " + factory.getClass() + " does not have a " + this.methodName + "(int) method"). }
