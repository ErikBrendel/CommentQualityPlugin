# id;timestamp;commentText;codeText;commentWords;codeWords
PropertyMapper -> SourceOperator -> <T> Source<T> apply(Source<T> source)_;1513391526;Apply the operation to the given source._@param <T> the source type_@param source the source to operate on_@return the updated source;<T> Source<T> apply(Source<T> source)_;apply,the,operation,to,the,given,source,param,t,the,source,type,param,source,the,source,to,operate,on,return,the,updated,source;t,source,t,apply,source,t,source
PropertyMapper -> SourceOperator -> <T> Source<T> apply(Source<T> source)_;1514031260;Apply the operation to the given source._@param <T> the source type_@param source the source to operate on_@return the updated source;<T> Source<T> apply(Source<T> source)_;apply,the,operation,to,the,given,source,param,t,the,source,type,param,source,the,source,to,operate,on,return,the,updated,source;t,source,t,apply,source,t,source
PropertyMapper -> SourceOperator -> <T> Source<T> apply(Source<T> source)_;1516215803;Apply the operation to the given source._@param <T> the source type_@param source the source to operate on_@return the updated source;<T> Source<T> apply(Source<T> source)_;apply,the,operation,to,the,given,source,param,t,the,source,type,param,source,the,source,to,operate,on,return,the,updated,source;t,source,t,apply,source,t,source
PropertyMapper -> SourceOperator -> <T> Source<T> apply(Source<T> source)_;1516357852;Apply the operation to the given source._@param <T> the source type_@param source the source to operate on_@return the updated source;<T> Source<T> apply(Source<T> source)_;apply,the,operation,to,the,given,source,param,t,the,source,type,param,source,the,source,to,operate,on,return,the,updated,source;t,source,t,apply,source,t,source
PropertyMapper -> SourceOperator -> <T> Source<T> apply(Source<T> source)_;1516961113;Apply the operation to the given source._@param <T> the source type_@param source the source to operate on_@return the updated source;<T> Source<T> apply(Source<T> source)_;apply,the,operation,to,the,given,source,param,t,the,source,type,param,source,the,source,to,operate,on,return,the,updated,source;t,source,t,apply,source,t,source
PropertyMapper -> SourceOperator -> <T> Source<T> apply(Source<T> source)_;1516961171;Apply the operation to the given source._@param <T> the source type_@param source the source to operate on_@return the updated source;<T> Source<T> apply(Source<T> source)_;apply,the,operation,to,the,given,source,param,t,the,source,type,param,source,the,source,to,operate,on,return,the,updated,source;t,source,t,apply,source,t,source
PropertyMapper -> SourceOperator -> <T> Source<T> apply(Source<T> source)_;1516966290;Apply the operation to the given source._@param <T> the source type_@param source the source to operate on_@return the updated source;<T> Source<T> apply(Source<T> source)_;apply,the,operation,to,the,given,source,param,t,the,source,type,param,source,the,source,to,operate,on,return,the,updated,source;t,source,t,apply,source,t,source
PropertyMapper -> SourceOperator -> <T> Source<T> apply(Source<T> source)_;1525476706;Apply the operation to the given source._@param <T> the source type_@param source the source to operate on_@return the updated source;<T> Source<T> apply(Source<T> source)_;apply,the,operation,to,the,given,source,param,t,the,source,type,param,source,the,source,to,operate,on,return,the,updated,source;t,source,t,apply,source,t,source
PropertyMapper -> SourceOperator -> <T> Source<T> apply(Source<T> source)_;1534945262;Apply the operation to the given source._@param <T> the source type_@param source the source to operate on_@return the updated source;<T> Source<T> apply(Source<T> source)_;apply,the,operation,to,the,given,source,param,t,the,source,type,param,source,the,source,to,operate,on,return,the,updated,source;t,source,t,apply,source,t,source
PropertyMapper -> Source -> public <R extends T> Source<R> whenInstanceOf(Class<R> target);1516966290;Return a filtered version of the source that will only map values that are an_instance of the given type._@param <R> the target type_@param target the target type to match_@return a new filtered source instance;public <R extends T> Source<R> whenInstanceOf(Class<R> target) {_			return when(target::isInstance).as(target::cast)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,are,an,instance,of,the,given,type,param,r,the,target,type,param,target,the,target,type,to,match,return,a,new,filtered,source,instance;public,r,extends,t,source,r,when,instance,of,class,r,target,return,when,target,is,instance,as,target,cast
PropertyMapper -> Source -> public <R extends T> Source<R> whenInstanceOf(Class<R> target);1525476706;Return a filtered version of the source that will only map values that are an_instance of the given type._@param <R> the target type_@param target the target type to match_@return a new filtered source instance;public <R extends T> Source<R> whenInstanceOf(Class<R> target) {_			return when(target::isInstance).as(target::cast)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,are,an,instance,of,the,given,type,param,r,the,target,type,param,target,the,target,type,to,match,return,a,new,filtered,source,instance;public,r,extends,t,source,r,when,instance,of,class,r,target,return,when,target,is,instance,as,target,cast
PropertyMapper -> Source -> public <R extends T> Source<R> whenInstanceOf(Class<R> target);1534945262;Return a filtered version of the source that will only map values that are an_instance of the given type._@param <R> the target type_@param target the target type to match_@return a new filtered source instance;public <R extends T> Source<R> whenInstanceOf(Class<R> target) {_			return when(target::isInstance).as(target::cast)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,are,an,instance,of,the,given,type,param,r,the,target,type,param,target,the,target,type,to,match,return,a,new,filtered,source,instance;public,r,extends,t,source,r,when,instance,of,class,r,target,return,when,target,is,instance,as,target,cast
PropertyMapper -> Source -> public <R> R toInstance(Function<T, R> factory);1513391526;Complete the mapping by creating a new instance from the non-filtered value._@param <R> the resulting type_@param factory the factory used to create the instance_@return the instance_@throws NoSuchElementException if the value has been filtered;public <R> R toInstance(Function<T, R> factory) {_			Assert.notNull(factory, "Factory must not be null")__			T value = this.supplier.get()__			if (!this.predicate.test(value)) {_				throw new NoSuchElementException("No value present")__			}_			return factory.apply(value)__		};complete,the,mapping,by,creating,a,new,instance,from,the,non,filtered,value,param,r,the,resulting,type,param,factory,the,factory,used,to,create,the,instance,return,the,instance,throws,no,such,element,exception,if,the,value,has,been,filtered;public,r,r,to,instance,function,t,r,factory,assert,not,null,factory,factory,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,throw,new,no,such,element,exception,no,value,present,return,factory,apply,value
PropertyMapper -> Source -> public <R> R toInstance(Function<T, R> factory);1514031260;Complete the mapping by creating a new instance from the non-filtered value._@param <R> the resulting type_@param factory the factory used to create the instance_@return the instance_@throws NoSuchElementException if the value has been filtered;public <R> R toInstance(Function<T, R> factory) {_			Assert.notNull(factory, "Factory must not be null")__			T value = this.supplier.get()__			if (!this.predicate.test(value)) {_				throw new NoSuchElementException("No value present")__			}_			return factory.apply(value)__		};complete,the,mapping,by,creating,a,new,instance,from,the,non,filtered,value,param,r,the,resulting,type,param,factory,the,factory,used,to,create,the,instance,return,the,instance,throws,no,such,element,exception,if,the,value,has,been,filtered;public,r,r,to,instance,function,t,r,factory,assert,not,null,factory,factory,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,throw,new,no,such,element,exception,no,value,present,return,factory,apply,value
PropertyMapper -> Source -> public <R> R toInstance(Function<T, R> factory);1516215803;Complete the mapping by creating a new instance from the non-filtered value._@param <R> the resulting type_@param factory the factory used to create the instance_@return the instance_@throws NoSuchElementException if the value has been filtered;public <R> R toInstance(Function<T, R> factory) {_			Assert.notNull(factory, "Factory must not be null")__			T value = this.supplier.get()__			if (!this.predicate.test(value)) {_				throw new NoSuchElementException("No value present")__			}_			return factory.apply(value)__		};complete,the,mapping,by,creating,a,new,instance,from,the,non,filtered,value,param,r,the,resulting,type,param,factory,the,factory,used,to,create,the,instance,return,the,instance,throws,no,such,element,exception,if,the,value,has,been,filtered;public,r,r,to,instance,function,t,r,factory,assert,not,null,factory,factory,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,throw,new,no,such,element,exception,no,value,present,return,factory,apply,value
PropertyMapper -> Source -> public <R> R toInstance(Function<T, R> factory);1516357852;Complete the mapping by creating a new instance from the non-filtered value._@param <R> the resulting type_@param factory the factory used to create the instance_@return the instance_@throws NoSuchElementException if the value has been filtered;public <R> R toInstance(Function<T, R> factory) {_			Assert.notNull(factory, "Factory must not be null")__			T value = this.supplier.get()__			if (!this.predicate.test(value)) {_				throw new NoSuchElementException("No value present")__			}_			return factory.apply(value)__		};complete,the,mapping,by,creating,a,new,instance,from,the,non,filtered,value,param,r,the,resulting,type,param,factory,the,factory,used,to,create,the,instance,return,the,instance,throws,no,such,element,exception,if,the,value,has,been,filtered;public,r,r,to,instance,function,t,r,factory,assert,not,null,factory,factory,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,throw,new,no,such,element,exception,no,value,present,return,factory,apply,value
PropertyMapper -> Source -> public <R> R toInstance(Function<T, R> factory);1516961113;Complete the mapping by creating a new instance from the non-filtered value._@param <R> the resulting type_@param factory the factory used to create the instance_@return the instance_@throws NoSuchElementException if the value has been filtered;public <R> R toInstance(Function<T, R> factory) {_			Assert.notNull(factory, "Factory must not be null")__			T value = this.supplier.get()__			if (!this.predicate.test(value)) {_				throw new NoSuchElementException("No value present")__			}_			return factory.apply(value)__		};complete,the,mapping,by,creating,a,new,instance,from,the,non,filtered,value,param,r,the,resulting,type,param,factory,the,factory,used,to,create,the,instance,return,the,instance,throws,no,such,element,exception,if,the,value,has,been,filtered;public,r,r,to,instance,function,t,r,factory,assert,not,null,factory,factory,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,throw,new,no,such,element,exception,no,value,present,return,factory,apply,value
PropertyMapper -> Source -> public <R> R toInstance(Function<T, R> factory);1516961171;Complete the mapping by creating a new instance from the non-filtered value._@param <R> the resulting type_@param factory the factory used to create the instance_@return the instance_@throws NoSuchElementException if the value has been filtered;public <R> R toInstance(Function<T, R> factory) {_			Assert.notNull(factory, "Factory must not be null")__			T value = this.supplier.get()__			if (!this.predicate.test(value)) {_				throw new NoSuchElementException("No value present")__			}_			return factory.apply(value)__		};complete,the,mapping,by,creating,a,new,instance,from,the,non,filtered,value,param,r,the,resulting,type,param,factory,the,factory,used,to,create,the,instance,return,the,instance,throws,no,such,element,exception,if,the,value,has,been,filtered;public,r,r,to,instance,function,t,r,factory,assert,not,null,factory,factory,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,throw,new,no,such,element,exception,no,value,present,return,factory,apply,value
PropertyMapper -> Source -> public <R> R toInstance(Function<T, R> factory);1516966290;Complete the mapping by creating a new instance from the non-filtered value._@param <R> the resulting type_@param factory the factory used to create the instance_@return the instance_@throws NoSuchElementException if the value has been filtered;public <R> R toInstance(Function<T, R> factory) {_			Assert.notNull(factory, "Factory must not be null")__			T value = this.supplier.get()__			if (!this.predicate.test(value)) {_				throw new NoSuchElementException("No value present")__			}_			return factory.apply(value)__		};complete,the,mapping,by,creating,a,new,instance,from,the,non,filtered,value,param,r,the,resulting,type,param,factory,the,factory,used,to,create,the,instance,return,the,instance,throws,no,such,element,exception,if,the,value,has,been,filtered;public,r,r,to,instance,function,t,r,factory,assert,not,null,factory,factory,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,throw,new,no,such,element,exception,no,value,present,return,factory,apply,value
PropertyMapper -> Source -> public <R> R toInstance(Function<T, R> factory);1525476706;Complete the mapping by creating a new instance from the non-filtered value._@param <R> the resulting type_@param factory the factory used to create the instance_@return the instance_@throws NoSuchElementException if the value has been filtered;public <R> R toInstance(Function<T, R> factory) {_			Assert.notNull(factory, "Factory must not be null")__			T value = this.supplier.get()__			if (!this.predicate.test(value)) {_				throw new NoSuchElementException("No value present")__			}_			return factory.apply(value)__		};complete,the,mapping,by,creating,a,new,instance,from,the,non,filtered,value,param,r,the,resulting,type,param,factory,the,factory,used,to,create,the,instance,return,the,instance,throws,no,such,element,exception,if,the,value,has,been,filtered;public,r,r,to,instance,function,t,r,factory,assert,not,null,factory,factory,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,throw,new,no,such,element,exception,no,value,present,return,factory,apply,value
PropertyMapper -> Source -> public <R> R toInstance(Function<T, R> factory);1534945262;Complete the mapping by creating a new instance from the non-filtered value._@param <R> the resulting type_@param factory the factory used to create the instance_@return the instance_@throws NoSuchElementException if the value has been filtered;public <R> R toInstance(Function<T, R> factory) {_			Assert.notNull(factory, "Factory must not be null")__			T value = this.supplier.get()__			if (!this.predicate.test(value)) {_				throw new NoSuchElementException("No value present")__			}_			return factory.apply(value)__		};complete,the,mapping,by,creating,a,new,instance,from,the,non,filtered,value,param,r,the,resulting,type,param,factory,the,factory,used,to,create,the,instance,return,the,instance,throws,no,such,element,exception,if,the,value,has,been,filtered;public,r,r,to,instance,function,t,r,factory,assert,not,null,factory,factory,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,throw,new,no,such,element,exception,no,value,present,return,factory,apply,value
PropertyMapper -> Source -> public Source<T> whenEqualTo(Object object);1513391526;Return a filtered version of the source that will only map values equal to the_specified {@code object}._@param object the object to match_@return a new filtered source instance;public Source<T> whenEqualTo(Object object) {_			return when(object::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,equal,to,the,specified,code,object,param,object,the,object,to,match,return,a,new,filtered,source,instance;public,source,t,when,equal,to,object,object,return,when,object,equals
PropertyMapper -> Source -> public Source<T> whenEqualTo(Object object);1514031260;Return a filtered version of the source that will only map values equal to the_specified {@code object}._@param object the object to match_@return a new filtered source instance;public Source<T> whenEqualTo(Object object) {_			return when(object::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,equal,to,the,specified,code,object,param,object,the,object,to,match,return,a,new,filtered,source,instance;public,source,t,when,equal,to,object,object,return,when,object,equals
PropertyMapper -> Source -> public Source<T> whenEqualTo(Object object);1516215803;Return a filtered version of the source that will only map values equal to the_specified {@code object}._@param object the object to match_@return a new filtered source instance;public Source<T> whenEqualTo(Object object) {_			return when(object::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,equal,to,the,specified,code,object,param,object,the,object,to,match,return,a,new,filtered,source,instance;public,source,t,when,equal,to,object,object,return,when,object,equals
PropertyMapper -> Source -> public Source<T> whenEqualTo(Object object);1516357852;Return a filtered version of the source that will only map values equal to the_specified {@code object}._@param object the object to match_@return a new filtered source instance;public Source<T> whenEqualTo(Object object) {_			return when(object::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,equal,to,the,specified,code,object,param,object,the,object,to,match,return,a,new,filtered,source,instance;public,source,t,when,equal,to,object,object,return,when,object,equals
PropertyMapper -> Source -> public Source<T> whenEqualTo(Object object);1516961113;Return a filtered version of the source that will only map values equal to the_specified {@code object}._@param object the object to match_@return a new filtered source instance;public Source<T> whenEqualTo(Object object) {_			return when(object::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,equal,to,the,specified,code,object,param,object,the,object,to,match,return,a,new,filtered,source,instance;public,source,t,when,equal,to,object,object,return,when,object,equals
PropertyMapper -> Source -> public Source<T> whenEqualTo(Object object);1516961171;Return a filtered version of the source that will only map values equal to the_specified {@code object}._@param object the object to match_@return a new filtered source instance;public Source<T> whenEqualTo(Object object) {_			return when(object::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,equal,to,the,specified,code,object,param,object,the,object,to,match,return,a,new,filtered,source,instance;public,source,t,when,equal,to,object,object,return,when,object,equals
PropertyMapper -> Source -> public Source<T> whenEqualTo(Object object);1516966290;Return a filtered version of the source that will only map values equal to the_specified {@code object}._@param object the object to match_@return a new filtered source instance;public Source<T> whenEqualTo(Object object) {_			return when(object::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,equal,to,the,specified,code,object,param,object,the,object,to,match,return,a,new,filtered,source,instance;public,source,t,when,equal,to,object,object,return,when,object,equals
PropertyMapper -> Source -> public Source<T> whenEqualTo(Object object);1525476706;Return a filtered version of the source that will only map values equal to the_specified {@code object}._@param object the object to match_@return a new filtered source instance;public Source<T> whenEqualTo(Object object) {_			return when(object::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,equal,to,the,specified,code,object,param,object,the,object,to,match,return,a,new,filtered,source,instance;public,source,t,when,equal,to,object,object,return,when,object,equals
PropertyMapper -> Source -> public Source<T> whenEqualTo(Object object);1534945262;Return a filtered version of the source that will only map values equal to the_specified {@code object}._@param object the object to match_@return a new filtered source instance;public Source<T> whenEqualTo(Object object) {_			return when(object::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,equal,to,the,specified,code,object,param,object,the,object,to,match,return,a,new,filtered,source,instance;public,source,t,when,equal,to,object,object,return,when,object,equals
PropertyMapper -> public static PropertyMapper get();1513391526;Return the property mapper._@return the property mapper;public static PropertyMapper get() {_		return INSTANCE__	};return,the,property,mapper,return,the,property,mapper;public,static,property,mapper,get,return,instance
PropertyMapper -> public static PropertyMapper get();1514031260;Return the property mapper._@return the property mapper;public static PropertyMapper get() {_		return INSTANCE__	};return,the,property,mapper,return,the,property,mapper;public,static,property,mapper,get,return,instance
PropertyMapper -> public static PropertyMapper get();1516215803;Return the property mapper._@return the property mapper;public static PropertyMapper get() {_		return INSTANCE__	};return,the,property,mapper,return,the,property,mapper;public,static,property,mapper,get,return,instance
PropertyMapper -> public static PropertyMapper get();1516357852;Return the property mapper._@return the property mapper;public static PropertyMapper get() {_		return INSTANCE__	};return,the,property,mapper,return,the,property,mapper;public,static,property,mapper,get,return,instance
PropertyMapper -> public static PropertyMapper get();1516961113;Return the property mapper._@return the property mapper;public static PropertyMapper get() {_		return INSTANCE__	};return,the,property,mapper,return,the,property,mapper;public,static,property,mapper,get,return,instance
PropertyMapper -> public static PropertyMapper get();1516961171;Return the property mapper._@return the property mapper;public static PropertyMapper get() {_		return INSTANCE__	};return,the,property,mapper,return,the,property,mapper;public,static,property,mapper,get,return,instance
PropertyMapper -> public static PropertyMapper get();1516966290;Return the property mapper._@return the property mapper;public static PropertyMapper get() {_		return INSTANCE__	};return,the,property,mapper,return,the,property,mapper;public,static,property,mapper,get,return,instance
PropertyMapper -> public static PropertyMapper get();1525476706;Return the property mapper._@return the property mapper;public static PropertyMapper get() {_		return INSTANCE__	};return,the,property,mapper,return,the,property,mapper;public,static,property,mapper,get,return,instance
PropertyMapper -> public static PropertyMapper get();1534945262;Return the property mapper._@return the property mapper;public static PropertyMapper get() {_		return INSTANCE__	};return,the,property,mapper,return,the,property,mapper;public,static,property,mapper,get,return,instance
PropertyMapper -> Source -> public <R> Source<R> as(Function<T, R> adapter);1513391526;Return an adapted version of the source changed via the given adapter function._@param <R> the resulting type_@param adapter the adapter to apply_@return a new adapted source instance;public <R> Source<R> as(Function<T, R> adapter) {_			Assert.notNull(adapter, "Adapter must not be null")__			Supplier<Boolean> test = () -> this.predicate.test(this.supplier.get())__			Predicate<R> predicate = (t) -> test.get()__			Supplier<R> supplier = () -> {_				if (test.get()) {_					return adapter.apply(this.supplier.get())__				}_				return null__			}__			return new Source<R>(supplier, predicate)__		};return,an,adapted,version,of,the,source,changed,via,the,given,adapter,function,param,r,the,resulting,type,param,adapter,the,adapter,to,apply,return,a,new,adapted,source,instance;public,r,source,r,as,function,t,r,adapter,assert,not,null,adapter,adapter,must,not,be,null,supplier,boolean,test,this,predicate,test,this,supplier,get,predicate,r,predicate,t,test,get,supplier,r,supplier,if,test,get,return,adapter,apply,this,supplier,get,return,null,return,new,source,r,supplier,predicate
PropertyMapper -> Source -> public <R> Source<R> as(Function<T, R> adapter);1514031260;Return an adapted version of the source changed via the given adapter function._@param <R> the resulting type_@param adapter the adapter to apply_@return a new adapted source instance;public <R> Source<R> as(Function<T, R> adapter) {_			Assert.notNull(adapter, "Adapter must not be null")__			Supplier<Boolean> test = () -> this.predicate.test(this.supplier.get())__			Predicate<R> predicate = (t) -> test.get()__			Supplier<R> supplier = () -> {_				if (test.get()) {_					return adapter.apply(this.supplier.get())__				}_				return null__			}__			return new Source<R>(supplier, predicate)__		};return,an,adapted,version,of,the,source,changed,via,the,given,adapter,function,param,r,the,resulting,type,param,adapter,the,adapter,to,apply,return,a,new,adapted,source,instance;public,r,source,r,as,function,t,r,adapter,assert,not,null,adapter,adapter,must,not,be,null,supplier,boolean,test,this,predicate,test,this,supplier,get,predicate,r,predicate,t,test,get,supplier,r,supplier,if,test,get,return,adapter,apply,this,supplier,get,return,null,return,new,source,r,supplier,predicate
PropertyMapper -> Source -> public <R> Source<R> as(Function<T, R> adapter);1516215803;Return an adapted version of the source changed via the given adapter function._@param <R> the resulting type_@param adapter the adapter to apply_@return a new adapted source instance;public <R> Source<R> as(Function<T, R> adapter) {_			Assert.notNull(adapter, "Adapter must not be null")__			Supplier<Boolean> test = () -> this.predicate.test(this.supplier.get())__			Predicate<R> predicate = (t) -> test.get()__			Supplier<R> supplier = () -> {_				if (test.get()) {_					return adapter.apply(this.supplier.get())__				}_				return null__			}__			return new Source<>(supplier, predicate)__		};return,an,adapted,version,of,the,source,changed,via,the,given,adapter,function,param,r,the,resulting,type,param,adapter,the,adapter,to,apply,return,a,new,adapted,source,instance;public,r,source,r,as,function,t,r,adapter,assert,not,null,adapter,adapter,must,not,be,null,supplier,boolean,test,this,predicate,test,this,supplier,get,predicate,r,predicate,t,test,get,supplier,r,supplier,if,test,get,return,adapter,apply,this,supplier,get,return,null,return,new,source,supplier,predicate
PropertyMapper -> Source -> public <R> Source<R> as(Function<T, R> adapter);1516357852;Return an adapted version of the source changed via the given adapter function._@param <R> the resulting type_@param adapter the adapter to apply_@return a new adapted source instance;public <R> Source<R> as(Function<T, R> adapter) {_			Assert.notNull(adapter, "Adapter must not be null")__			Supplier<Boolean> test = () -> this.predicate.test(this.supplier.get())__			Predicate<R> predicate = (t) -> test.get()__			Supplier<R> supplier = () -> {_				if (test.get()) {_					return adapter.apply(this.supplier.get())__				}_				return null__			}__			return new Source<>(supplier, predicate)__		};return,an,adapted,version,of,the,source,changed,via,the,given,adapter,function,param,r,the,resulting,type,param,adapter,the,adapter,to,apply,return,a,new,adapted,source,instance;public,r,source,r,as,function,t,r,adapter,assert,not,null,adapter,adapter,must,not,be,null,supplier,boolean,test,this,predicate,test,this,supplier,get,predicate,r,predicate,t,test,get,supplier,r,supplier,if,test,get,return,adapter,apply,this,supplier,get,return,null,return,new,source,supplier,predicate
PropertyMapper -> Source -> public <R> Source<R> as(Function<T, R> adapter);1516961113;Return an adapted version of the source changed via the given adapter function._@param <R> the resulting type_@param adapter the adapter to apply_@return a new adapted source instance;public <R> Source<R> as(Function<T, R> adapter) {_			Assert.notNull(adapter, "Adapter must not be null")__			Supplier<Boolean> test = () -> this.predicate.test(this.supplier.get())__			Predicate<R> predicate = (t) -> test.get()__			Supplier<R> supplier = () -> {_				if (test.get()) {_					return adapter.apply(this.supplier.get())__				}_				return null__			}__			return new Source<>(supplier, predicate)__		};return,an,adapted,version,of,the,source,changed,via,the,given,adapter,function,param,r,the,resulting,type,param,adapter,the,adapter,to,apply,return,a,new,adapted,source,instance;public,r,source,r,as,function,t,r,adapter,assert,not,null,adapter,adapter,must,not,be,null,supplier,boolean,test,this,predicate,test,this,supplier,get,predicate,r,predicate,t,test,get,supplier,r,supplier,if,test,get,return,adapter,apply,this,supplier,get,return,null,return,new,source,supplier,predicate
PropertyMapper -> Source -> public <R> Source<R> as(Function<T, R> adapter);1516961171;Return an adapted version of the source changed via the given adapter function._@param <R> the resulting type_@param adapter the adapter to apply_@return a new adapted source instance;public <R> Source<R> as(Function<T, R> adapter) {_			Assert.notNull(adapter, "Adapter must not be null")__			Supplier<Boolean> test = () -> this.predicate.test(this.supplier.get())__			Predicate<R> predicate = (t) -> test.get()__			Supplier<R> supplier = () -> {_				if (test.get()) {_					return adapter.apply(this.supplier.get())__				}_				return null__			}__			return new Source<>(supplier, predicate)__		};return,an,adapted,version,of,the,source,changed,via,the,given,adapter,function,param,r,the,resulting,type,param,adapter,the,adapter,to,apply,return,a,new,adapted,source,instance;public,r,source,r,as,function,t,r,adapter,assert,not,null,adapter,adapter,must,not,be,null,supplier,boolean,test,this,predicate,test,this,supplier,get,predicate,r,predicate,t,test,get,supplier,r,supplier,if,test,get,return,adapter,apply,this,supplier,get,return,null,return,new,source,supplier,predicate
PropertyMapper -> Source -> public <R> Source<R> as(Function<T, R> adapter);1516966290;Return an adapted version of the source changed via the given adapter function._@param <R> the resulting type_@param adapter the adapter to apply_@return a new adapted source instance;public <R> Source<R> as(Function<T, R> adapter) {_			Assert.notNull(adapter, "Adapter must not be null")__			Supplier<Boolean> test = () -> this.predicate.test(this.supplier.get())__			Predicate<R> predicate = (t) -> test.get()__			Supplier<R> supplier = () -> {_				if (test.get()) {_					return adapter.apply(this.supplier.get())__				}_				return null__			}__			return new Source<>(supplier, predicate)__		};return,an,adapted,version,of,the,source,changed,via,the,given,adapter,function,param,r,the,resulting,type,param,adapter,the,adapter,to,apply,return,a,new,adapted,source,instance;public,r,source,r,as,function,t,r,adapter,assert,not,null,adapter,adapter,must,not,be,null,supplier,boolean,test,this,predicate,test,this,supplier,get,predicate,r,predicate,t,test,get,supplier,r,supplier,if,test,get,return,adapter,apply,this,supplier,get,return,null,return,new,source,supplier,predicate
PropertyMapper -> Source -> public <R> Source<R> as(Function<T, R> adapter);1525476706;Return an adapted version of the source changed via the given adapter function._@param <R> the resulting type_@param adapter the adapter to apply_@return a new adapted source instance;public <R> Source<R> as(Function<T, R> adapter) {_			Assert.notNull(adapter, "Adapter must not be null")__			Supplier<Boolean> test = () -> this.predicate.test(this.supplier.get())__			Predicate<R> predicate = (t) -> test.get()__			Supplier<R> supplier = () -> {_				if (test.get()) {_					return adapter.apply(this.supplier.get())__				}_				return null__			}__			return new Source<>(supplier, predicate)__		};return,an,adapted,version,of,the,source,changed,via,the,given,adapter,function,param,r,the,resulting,type,param,adapter,the,adapter,to,apply,return,a,new,adapted,source,instance;public,r,source,r,as,function,t,r,adapter,assert,not,null,adapter,adapter,must,not,be,null,supplier,boolean,test,this,predicate,test,this,supplier,get,predicate,r,predicate,t,test,get,supplier,r,supplier,if,test,get,return,adapter,apply,this,supplier,get,return,null,return,new,source,supplier,predicate
PropertyMapper -> Source -> public <R> Source<R> as(Function<T, R> adapter);1534945262;Return an adapted version of the source changed via the given adapter function._@param <R> the resulting type_@param adapter the adapter to apply_@return a new adapted source instance;public <R> Source<R> as(Function<T, R> adapter) {_			Assert.notNull(adapter, "Adapter must not be null")__			Supplier<Boolean> test = () -> this.predicate.test(this.supplier.get())__			Predicate<R> predicate = (t) -> test.get()__			Supplier<R> supplier = () -> {_				if (test.get()) {_					return adapter.apply(this.supplier.get())__				}_				return null__			}__			return new Source<>(supplier, predicate)__		};return,an,adapted,version,of,the,source,changed,via,the,given,adapter,function,param,r,the,resulting,type,param,adapter,the,adapter,to,apply,return,a,new,adapted,source,instance;public,r,source,r,as,function,t,r,adapter,assert,not,null,adapter,adapter,must,not,be,null,supplier,boolean,test,this,predicate,test,this,supplier,get,predicate,r,predicate,t,test,get,supplier,r,supplier,if,test,get,return,adapter,apply,this,supplier,get,return,null,return,new,source,supplier,predicate
PropertyMapper -> Source -> public Source<T> whenHasText();1513391526;Return a filtered version of the source that will only map values that have a_{@code toString()} containing actual text._@return a new filtered source instance;public Source<T> whenHasText() {_			return when((value) -> StringUtils.hasText(Objects.toString(value, null)))__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,have,a,code,to,string,containing,actual,text,return,a,new,filtered,source,instance;public,source,t,when,has,text,return,when,value,string,utils,has,text,objects,to,string,value,null
PropertyMapper -> Source -> public Source<T> whenHasText();1514031260;Return a filtered version of the source that will only map values that have a_{@code toString()} containing actual text._@return a new filtered source instance;public Source<T> whenHasText() {_			return when((value) -> StringUtils.hasText(Objects.toString(value, null)))__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,have,a,code,to,string,containing,actual,text,return,a,new,filtered,source,instance;public,source,t,when,has,text,return,when,value,string,utils,has,text,objects,to,string,value,null
PropertyMapper -> Source -> public Source<T> whenHasText();1516215803;Return a filtered version of the source that will only map values that have a_{@code toString()} containing actual text._@return a new filtered source instance;public Source<T> whenHasText() {_			return when((value) -> StringUtils.hasText(Objects.toString(value, null)))__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,have,a,code,to,string,containing,actual,text,return,a,new,filtered,source,instance;public,source,t,when,has,text,return,when,value,string,utils,has,text,objects,to,string,value,null
PropertyMapper -> Source -> public Source<T> whenHasText();1516357852;Return a filtered version of the source that will only map values that have a_{@code toString()} containing actual text._@return a new filtered source instance;public Source<T> whenHasText() {_			return when((value) -> StringUtils.hasText(Objects.toString(value, null)))__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,have,a,code,to,string,containing,actual,text,return,a,new,filtered,source,instance;public,source,t,when,has,text,return,when,value,string,utils,has,text,objects,to,string,value,null
PropertyMapper -> Source -> public Source<T> whenHasText();1516961113;Return a filtered version of the source that will only map values that have a_{@code toString()} containing actual text._@return a new filtered source instance;public Source<T> whenHasText() {_			return when((value) -> StringUtils.hasText(Objects.toString(value, null)))__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,have,a,code,to,string,containing,actual,text,return,a,new,filtered,source,instance;public,source,t,when,has,text,return,when,value,string,utils,has,text,objects,to,string,value,null
PropertyMapper -> Source -> public Source<T> whenHasText();1516961171;Return a filtered version of the source that will only map values that have a_{@code toString()} containing actual text._@return a new filtered source instance;public Source<T> whenHasText() {_			return when((value) -> StringUtils.hasText(Objects.toString(value, null)))__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,have,a,code,to,string,containing,actual,text,return,a,new,filtered,source,instance;public,source,t,when,has,text,return,when,value,string,utils,has,text,objects,to,string,value,null
PropertyMapper -> Source -> public Source<T> whenHasText();1516966290;Return a filtered version of the source that will only map values that have a_{@code toString()} containing actual text._@return a new filtered source instance;public Source<T> whenHasText() {_			return when((value) -> StringUtils.hasText(Objects.toString(value, null)))__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,have,a,code,to,string,containing,actual,text,return,a,new,filtered,source,instance;public,source,t,when,has,text,return,when,value,string,utils,has,text,objects,to,string,value,null
PropertyMapper -> Source -> public Source<T> whenHasText();1525476706;Return a filtered version of the source that will only map values that have a_{@code toString()} containing actual text._@return a new filtered source instance;public Source<T> whenHasText() {_			return when((value) -> StringUtils.hasText(Objects.toString(value, null)))__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,have,a,code,to,string,containing,actual,text,return,a,new,filtered,source,instance;public,source,t,when,has,text,return,when,value,string,utils,has,text,objects,to,string,value,null
PropertyMapper -> Source -> public Source<T> whenHasText();1534945262;Return a filtered version of the source that will only map values that have a_{@code toString()} containing actual text._@return a new filtered source instance;public Source<T> whenHasText() {_			return when((value) -> StringUtils.hasText(Objects.toString(value, null)))__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,have,a,code,to,string,containing,actual,text,return,a,new,filtered,source,instance;public,source,t,when,has,text,return,when,value,string,utils,has,text,objects,to,string,value,null
PropertyMapper -> Source -> public Source<T> whenFalse();1513391526;Return a filtered version of the source that will only map values that_{@code false}._@return a new filtered source instance;public Source<T> whenFalse() {_			return when(Boolean.FALSE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,code,false,return,a,new,filtered,source,instance;public,source,t,when,false,return,when,boolean,false,equals
PropertyMapper -> Source -> public Source<T> whenFalse();1514031260;Return a filtered version of the source that will only map values that_{@code false}._@return a new filtered source instance;public Source<T> whenFalse() {_			return when(Boolean.FALSE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,code,false,return,a,new,filtered,source,instance;public,source,t,when,false,return,when,boolean,false,equals
PropertyMapper -> Source -> public Source<T> whenFalse();1516215803;Return a filtered version of the source that will only map values that_{@code false}._@return a new filtered source instance;public Source<T> whenFalse() {_			return when(Boolean.FALSE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,code,false,return,a,new,filtered,source,instance;public,source,t,when,false,return,when,boolean,false,equals
PropertyMapper -> Source -> public Source<T> whenFalse();1516357852;Return a filtered version of the source that will only map values that_{@code false}._@return a new filtered source instance;public Source<T> whenFalse() {_			return when(Boolean.FALSE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,code,false,return,a,new,filtered,source,instance;public,source,t,when,false,return,when,boolean,false,equals
PropertyMapper -> Source -> public Source<T> whenFalse();1516961113;Return a filtered version of the source that will only map values that_{@code false}._@return a new filtered source instance;public Source<T> whenFalse() {_			return when(Boolean.FALSE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,code,false,return,a,new,filtered,source,instance;public,source,t,when,false,return,when,boolean,false,equals
PropertyMapper -> Source -> public Source<T> whenFalse();1516961171;Return a filtered version of the source that will only map values that are_{@code false}._@return a new filtered source instance;public Source<T> whenFalse() {_			return when(Boolean.FALSE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,are,code,false,return,a,new,filtered,source,instance;public,source,t,when,false,return,when,boolean,false,equals
PropertyMapper -> Source -> public Source<T> whenFalse();1516966290;Return a filtered version of the source that will only map values that are_{@code false}._@return a new filtered source instance;public Source<T> whenFalse() {_			return when(Boolean.FALSE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,are,code,false,return,a,new,filtered,source,instance;public,source,t,when,false,return,when,boolean,false,equals
PropertyMapper -> Source -> public Source<T> whenFalse();1525476706;Return a filtered version of the source that will only map values that are_{@code false}._@return a new filtered source instance;public Source<T> whenFalse() {_			return when(Boolean.FALSE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,are,code,false,return,a,new,filtered,source,instance;public,source,t,when,false,return,when,boolean,false,equals
PropertyMapper -> Source -> public Source<T> whenFalse();1534945262;Return a filtered version of the source that will only map values that are_{@code false}._@return a new filtered source instance;public Source<T> whenFalse() {_			return when(Boolean.FALSE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,are,code,false,return,a,new,filtered,source,instance;public,source,t,when,false,return,when,boolean,false,equals
PropertyMapper -> Source -> public void to(Consumer<T> consumer);1513391526;Complete the mapping by passing any non-filtered value to the specified_consumer._@param consumer the consumer that should accept the value if it's not been_filtered;public void to(Consumer<T> consumer) {_			Assert.notNull(consumer, "Consumer must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				consumer.accept(value)__			}_		};complete,the,mapping,by,passing,any,non,filtered,value,to,the,specified,consumer,param,consumer,the,consumer,that,should,accept,the,value,if,it,s,not,been,filtered;public,void,to,consumer,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,consumer,accept,value
PropertyMapper -> Source -> public void to(Consumer<T> consumer);1514031260;Complete the mapping by passing any non-filtered value to the specified_consumer._@param consumer the consumer that should accept the value if it's not been_filtered;public void to(Consumer<T> consumer) {_			Assert.notNull(consumer, "Consumer must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				consumer.accept(value)__			}_		};complete,the,mapping,by,passing,any,non,filtered,value,to,the,specified,consumer,param,consumer,the,consumer,that,should,accept,the,value,if,it,s,not,been,filtered;public,void,to,consumer,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,consumer,accept,value
PropertyMapper -> Source -> public void to(Consumer<T> consumer);1516215803;Complete the mapping by passing any non-filtered value to the specified_consumer._@param consumer the consumer that should accept the value if it's not been_filtered;public void to(Consumer<T> consumer) {_			Assert.notNull(consumer, "Consumer must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				consumer.accept(value)__			}_		};complete,the,mapping,by,passing,any,non,filtered,value,to,the,specified,consumer,param,consumer,the,consumer,that,should,accept,the,value,if,it,s,not,been,filtered;public,void,to,consumer,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,consumer,accept,value
PropertyMapper -> Source -> public void to(Consumer<T> consumer);1516357852;Complete the mapping by passing any non-filtered value to the specified_consumer._@param consumer the consumer that should accept the value if it's not been_filtered;public void to(Consumer<T> consumer) {_			Assert.notNull(consumer, "Consumer must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				consumer.accept(value)__			}_		};complete,the,mapping,by,passing,any,non,filtered,value,to,the,specified,consumer,param,consumer,the,consumer,that,should,accept,the,value,if,it,s,not,been,filtered;public,void,to,consumer,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,consumer,accept,value
PropertyMapper -> Source -> public void to(Consumer<T> consumer);1516961113;Complete the mapping by passing any non-filtered value to the specified_consumer._@param consumer the consumer that should accept the value if it's not been_filtered;public void to(Consumer<T> consumer) {_			Assert.notNull(consumer, "Consumer must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				consumer.accept(value)__			}_		};complete,the,mapping,by,passing,any,non,filtered,value,to,the,specified,consumer,param,consumer,the,consumer,that,should,accept,the,value,if,it,s,not,been,filtered;public,void,to,consumer,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,consumer,accept,value
PropertyMapper -> Source -> public void to(Consumer<T> consumer);1516961171;Complete the mapping by passing any non-filtered value to the specified_consumer._@param consumer the consumer that should accept the value if it's not been_filtered;public void to(Consumer<T> consumer) {_			Assert.notNull(consumer, "Consumer must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				consumer.accept(value)__			}_		};complete,the,mapping,by,passing,any,non,filtered,value,to,the,specified,consumer,param,consumer,the,consumer,that,should,accept,the,value,if,it,s,not,been,filtered;public,void,to,consumer,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,consumer,accept,value
PropertyMapper -> Source -> public void to(Consumer<T> consumer);1516966290;Complete the mapping by passing any non-filtered value to the specified_consumer._@param consumer the consumer that should accept the value if it's not been_filtered;public void to(Consumer<T> consumer) {_			Assert.notNull(consumer, "Consumer must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				consumer.accept(value)__			}_		};complete,the,mapping,by,passing,any,non,filtered,value,to,the,specified,consumer,param,consumer,the,consumer,that,should,accept,the,value,if,it,s,not,been,filtered;public,void,to,consumer,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,consumer,accept,value
PropertyMapper -> Source -> public void to(Consumer<T> consumer);1525476706;Complete the mapping by passing any non-filtered value to the specified_consumer._@param consumer the consumer that should accept the value if it's not been_filtered;public void to(Consumer<T> consumer) {_			Assert.notNull(consumer, "Consumer must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				consumer.accept(value)__			}_		};complete,the,mapping,by,passing,any,non,filtered,value,to,the,specified,consumer,param,consumer,the,consumer,that,should,accept,the,value,if,it,s,not,been,filtered;public,void,to,consumer,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,consumer,accept,value
PropertyMapper -> Source -> public void to(Consumer<T> consumer);1534945262;Complete the mapping by passing any non-filtered value to the specified_consumer._@param consumer the consumer that should accept the value if it's not been_filtered;public void to(Consumer<T> consumer) {_			Assert.notNull(consumer, "Consumer must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				consumer.accept(value)__			}_		};complete,the,mapping,by,passing,any,non,filtered,value,to,the,specified,consumer,param,consumer,the,consumer,that,should,accept,the,value,if,it,s,not,been,filtered;public,void,to,consumer,t,consumer,assert,not,null,consumer,consumer,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,consumer,accept,value
PropertyMapper -> Source -> public Source<T> whenNot(Predicate<T> predicate);1513391526;Return a filtered version of the source that won't map values that match the_given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> whenNot(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate.negate())__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,not,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate,negate
PropertyMapper -> Source -> public Source<T> whenNot(Predicate<T> predicate);1514031260;Return a filtered version of the source that won't map values that match the_given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> whenNot(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate.negate())__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,not,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate,negate
PropertyMapper -> Source -> public Source<T> whenNot(Predicate<T> predicate);1516215803;Return a filtered version of the source that won't map values that match the_given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> whenNot(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate.negate())__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,not,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate,negate
PropertyMapper -> Source -> public Source<T> whenNot(Predicate<T> predicate);1516357852;Return a filtered version of the source that won't map values that match the_given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> whenNot(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate.negate())__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,not,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate,negate
PropertyMapper -> Source -> public Source<T> whenNot(Predicate<T> predicate);1516961113;Return a filtered version of the source that won't map values that match the_given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> whenNot(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate.negate())__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,not,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate,negate
PropertyMapper -> Source -> public Source<T> whenNot(Predicate<T> predicate);1516961171;Return a filtered version of the source that won't map values that match the_given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> whenNot(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate.negate())__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,not,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate,negate
PropertyMapper -> Source -> public Source<T> whenNot(Predicate<T> predicate);1516966290;Return a filtered version of the source that won't map values that match the_given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> whenNot(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate.negate())__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,not,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate,negate
PropertyMapper -> Source -> public Source<T> whenNot(Predicate<T> predicate);1525476706;Return a filtered version of the source that won't map values that match the_given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> whenNot(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate.negate())__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,not,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate,negate
PropertyMapper -> Source -> public Source<T> whenNot(Predicate<T> predicate);1534945262;Return a filtered version of the source that won't map values that match the_given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> whenNot(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate.negate())__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,not,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate,negate
PropertyMapper -> Source -> public <R> Source<R> whenInstanceOf(Class<R> target);1516961113;Return a filtered version of the source that will only map values that are an_instance of the given type._@param <R> the target type_@param target the target type to match_@return a new filtered source instance;public <R> Source<R> whenInstanceOf(Class<R> target) {_			return when(target::isInstance).as(target::cast)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,are,an,instance,of,the,given,type,param,r,the,target,type,param,target,the,target,type,to,match,return,a,new,filtered,source,instance;public,r,source,r,when,instance,of,class,r,target,return,when,target,is,instance,as,target,cast
PropertyMapper -> Source -> public <R> Source<R> whenInstanceOf(Class<R> target);1516961171;Return a filtered version of the source that will only map values that are an_instance of the given type._@param <R> the target type_@param target the target type to match_@return a new filtered source instance;public <R> Source<R> whenInstanceOf(Class<R> target) {_			return when(target::isInstance).as(target::cast)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,are,an,instance,of,the,given,type,param,r,the,target,type,param,target,the,target,type,to,match,return,a,new,filtered,source,instance;public,r,source,r,when,instance,of,class,r,target,return,when,target,is,instance,as,target,cast
PropertyMapper -> Source -> public Source<T> whenTrue();1513391526;Return a filtered version of the source that will only map values that_{@code true}._@return a new filtered source instance;public Source<T> whenTrue() {_			return when(Boolean.TRUE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,code,true,return,a,new,filtered,source,instance;public,source,t,when,true,return,when,boolean,true,equals
PropertyMapper -> Source -> public Source<T> whenTrue();1514031260;Return a filtered version of the source that will only map values that_{@code true}._@return a new filtered source instance;public Source<T> whenTrue() {_			return when(Boolean.TRUE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,code,true,return,a,new,filtered,source,instance;public,source,t,when,true,return,when,boolean,true,equals
PropertyMapper -> Source -> public Source<T> whenTrue();1516215803;Return a filtered version of the source that will only map values that_{@code true}._@return a new filtered source instance;public Source<T> whenTrue() {_			return when(Boolean.TRUE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,code,true,return,a,new,filtered,source,instance;public,source,t,when,true,return,when,boolean,true,equals
PropertyMapper -> Source -> public Source<T> whenTrue();1516357852;Return a filtered version of the source that will only map values that_{@code true}._@return a new filtered source instance;public Source<T> whenTrue() {_			return when(Boolean.TRUE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,code,true,return,a,new,filtered,source,instance;public,source,t,when,true,return,when,boolean,true,equals
PropertyMapper -> Source -> public Source<T> whenTrue();1516961113;Return a filtered version of the source that will only map values that_{@code true}._@return a new filtered source instance;public Source<T> whenTrue() {_			return when(Boolean.TRUE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,code,true,return,a,new,filtered,source,instance;public,source,t,when,true,return,when,boolean,true,equals
PropertyMapper -> Source -> public Source<T> whenTrue();1516961171;Return a filtered version of the source that will only map values that are_{@code true}._@return a new filtered source instance;public Source<T> whenTrue() {_			return when(Boolean.TRUE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,are,code,true,return,a,new,filtered,source,instance;public,source,t,when,true,return,when,boolean,true,equals
PropertyMapper -> Source -> public Source<T> whenTrue();1516966290;Return a filtered version of the source that will only map values that are_{@code true}._@return a new filtered source instance;public Source<T> whenTrue() {_			return when(Boolean.TRUE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,are,code,true,return,a,new,filtered,source,instance;public,source,t,when,true,return,when,boolean,true,equals
PropertyMapper -> Source -> public Source<T> whenTrue();1525476706;Return a filtered version of the source that will only map values that are_{@code true}._@return a new filtered source instance;public Source<T> whenTrue() {_			return when(Boolean.TRUE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,are,code,true,return,a,new,filtered,source,instance;public,source,t,when,true,return,when,boolean,true,equals
PropertyMapper -> Source -> public Source<T> whenTrue();1534945262;Return a filtered version of the source that will only map values that are_{@code true}._@return a new filtered source instance;public Source<T> whenTrue() {_			return when(Boolean.TRUE::equals)__		};return,a,filtered,version,of,the,source,that,will,only,map,values,that,are,code,true,return,a,new,filtered,source,instance;public,source,t,when,true,return,when,boolean,true,equals
PropertyMapper -> public <T> Source<T> from(Supplier<T> supplier);1513391526;Return a new {@link Source} from the specified value supplier that can be used to_perform the mapping._@param <T> the source type_@param supplier the value supplier_@return a {@link Source} that can be used to complete the mapping;public <T> Source<T> from(Supplier<T> supplier) {_		Assert.notNull(supplier, "Supplier must not be null")__		Source<T> source = getSource(supplier)__		if (this.sourceOperator != null) {_			source = this.sourceOperator.apply(source)__		}_		return source__	};return,a,new,link,source,from,the,specified,value,supplier,that,can,be,used,to,perform,the,mapping,param,t,the,source,type,param,supplier,the,value,supplier,return,a,link,source,that,can,be,used,to,complete,the,mapping;public,t,source,t,from,supplier,t,supplier,assert,not,null,supplier,supplier,must,not,be,null,source,t,source,get,source,supplier,if,this,source,operator,null,source,this,source,operator,apply,source,return,source
PropertyMapper -> public <T> Source<T> from(Supplier<T> supplier);1514031260;Return a new {@link Source} from the specified value supplier that can be used to_perform the mapping._@param <T> the source type_@param supplier the value supplier_@return a {@link Source} that can be used to complete the mapping;public <T> Source<T> from(Supplier<T> supplier) {_		Assert.notNull(supplier, "Supplier must not be null")__		Source<T> source = getSource(supplier)__		if (this.sourceOperator != null) {_			source = this.sourceOperator.apply(source)__		}_		return source__	};return,a,new,link,source,from,the,specified,value,supplier,that,can,be,used,to,perform,the,mapping,param,t,the,source,type,param,supplier,the,value,supplier,return,a,link,source,that,can,be,used,to,complete,the,mapping;public,t,source,t,from,supplier,t,supplier,assert,not,null,supplier,supplier,must,not,be,null,source,t,source,get,source,supplier,if,this,source,operator,null,source,this,source,operator,apply,source,return,source
PropertyMapper -> public <T> Source<T> from(Supplier<T> supplier);1516215803;Return a new {@link Source} from the specified value supplier that can be used to_perform the mapping._@param <T> the source type_@param supplier the value supplier_@return a {@link Source} that can be used to complete the mapping;public <T> Source<T> from(Supplier<T> supplier) {_		Assert.notNull(supplier, "Supplier must not be null")__		Source<T> source = getSource(supplier)__		if (this.sourceOperator != null) {_			source = this.sourceOperator.apply(source)__		}_		return source__	};return,a,new,link,source,from,the,specified,value,supplier,that,can,be,used,to,perform,the,mapping,param,t,the,source,type,param,supplier,the,value,supplier,return,a,link,source,that,can,be,used,to,complete,the,mapping;public,t,source,t,from,supplier,t,supplier,assert,not,null,supplier,supplier,must,not,be,null,source,t,source,get,source,supplier,if,this,source,operator,null,source,this,source,operator,apply,source,return,source
PropertyMapper -> public <T> Source<T> from(Supplier<T> supplier);1516357852;Return a new {@link Source} from the specified value supplier that can be used to_perform the mapping._@param <T> the source type_@param supplier the value supplier_@return a {@link Source} that can be used to complete the mapping;public <T> Source<T> from(Supplier<T> supplier) {_		Assert.notNull(supplier, "Supplier must not be null")__		Source<T> source = getSource(supplier)__		if (this.sourceOperator != null) {_			source = this.sourceOperator.apply(source)__		}_		return source__	};return,a,new,link,source,from,the,specified,value,supplier,that,can,be,used,to,perform,the,mapping,param,t,the,source,type,param,supplier,the,value,supplier,return,a,link,source,that,can,be,used,to,complete,the,mapping;public,t,source,t,from,supplier,t,supplier,assert,not,null,supplier,supplier,must,not,be,null,source,t,source,get,source,supplier,if,this,source,operator,null,source,this,source,operator,apply,source,return,source
PropertyMapper -> public <T> Source<T> from(Supplier<T> supplier);1516961113;Return a new {@link Source} from the specified value supplier that can be used to_perform the mapping._@param <T> the source type_@param supplier the value supplier_@return a {@link Source} that can be used to complete the mapping;public <T> Source<T> from(Supplier<T> supplier) {_		Assert.notNull(supplier, "Supplier must not be null")__		Source<T> source = getSource(supplier)__		if (this.sourceOperator != null) {_			source = this.sourceOperator.apply(source)__		}_		return source__	};return,a,new,link,source,from,the,specified,value,supplier,that,can,be,used,to,perform,the,mapping,param,t,the,source,type,param,supplier,the,value,supplier,return,a,link,source,that,can,be,used,to,complete,the,mapping;public,t,source,t,from,supplier,t,supplier,assert,not,null,supplier,supplier,must,not,be,null,source,t,source,get,source,supplier,if,this,source,operator,null,source,this,source,operator,apply,source,return,source
PropertyMapper -> public <T> Source<T> from(Supplier<T> supplier);1516961171;Return a new {@link Source} from the specified value supplier that can be used to_perform the mapping._@param <T> the source type_@param supplier the value supplier_@return a {@link Source} that can be used to complete the mapping;public <T> Source<T> from(Supplier<T> supplier) {_		Assert.notNull(supplier, "Supplier must not be null")__		Source<T> source = getSource(supplier)__		if (this.sourceOperator != null) {_			source = this.sourceOperator.apply(source)__		}_		return source__	};return,a,new,link,source,from,the,specified,value,supplier,that,can,be,used,to,perform,the,mapping,param,t,the,source,type,param,supplier,the,value,supplier,return,a,link,source,that,can,be,used,to,complete,the,mapping;public,t,source,t,from,supplier,t,supplier,assert,not,null,supplier,supplier,must,not,be,null,source,t,source,get,source,supplier,if,this,source,operator,null,source,this,source,operator,apply,source,return,source
PropertyMapper -> public <T> Source<T> from(Supplier<T> supplier);1516966290;Return a new {@link Source} from the specified value supplier that can be used to_perform the mapping._@param <T> the source type_@param supplier the value supplier_@return a {@link Source} that can be used to complete the mapping;public <T> Source<T> from(Supplier<T> supplier) {_		Assert.notNull(supplier, "Supplier must not be null")__		Source<T> source = getSource(supplier)__		if (this.sourceOperator != null) {_			source = this.sourceOperator.apply(source)__		}_		return source__	};return,a,new,link,source,from,the,specified,value,supplier,that,can,be,used,to,perform,the,mapping,param,t,the,source,type,param,supplier,the,value,supplier,return,a,link,source,that,can,be,used,to,complete,the,mapping;public,t,source,t,from,supplier,t,supplier,assert,not,null,supplier,supplier,must,not,be,null,source,t,source,get,source,supplier,if,this,source,operator,null,source,this,source,operator,apply,source,return,source
PropertyMapper -> public <T> Source<T> from(Supplier<T> supplier);1525476706;Return a new {@link Source} from the specified value supplier that can be used to_perform the mapping._@param <T> the source type_@param supplier the value supplier_@return a {@link Source} that can be used to complete the mapping;public <T> Source<T> from(Supplier<T> supplier) {_		Assert.notNull(supplier, "Supplier must not be null")__		Source<T> source = getSource(supplier)__		if (this.sourceOperator != null) {_			source = this.sourceOperator.apply(source)__		}_		return source__	};return,a,new,link,source,from,the,specified,value,supplier,that,can,be,used,to,perform,the,mapping,param,t,the,source,type,param,supplier,the,value,supplier,return,a,link,source,that,can,be,used,to,complete,the,mapping;public,t,source,t,from,supplier,t,supplier,assert,not,null,supplier,supplier,must,not,be,null,source,t,source,get,source,supplier,if,this,source,operator,null,source,this,source,operator,apply,source,return,source
PropertyMapper -> public <T> Source<T> from(Supplier<T> supplier);1534945262;Return a new {@link Source} from the specified value supplier that can be used to_perform the mapping._@param <T> the source type_@param supplier the value supplier_@return a {@link Source} that can be used to complete the mapping_@see #from(Object);public <T> Source<T> from(Supplier<T> supplier) {_		Assert.notNull(supplier, "Supplier must not be null")__		Source<T> source = getSource(supplier)__		if (this.sourceOperator != null) {_			source = this.sourceOperator.apply(source)__		}_		return source__	};return,a,new,link,source,from,the,specified,value,supplier,that,can,be,used,to,perform,the,mapping,param,t,the,source,type,param,supplier,the,value,supplier,return,a,link,source,that,can,be,used,to,complete,the,mapping,see,from,object;public,t,source,t,from,supplier,t,supplier,assert,not,null,supplier,supplier,must,not,be,null,source,t,source,get,source,supplier,if,this,source,operator,null,source,this,source,operator,apply,source,return,source
PropertyMapper -> public PropertyMapper alwaysApplyingWhenNonNull();1513391526;Return a new {@link PropertyMapper} instance that applies_{@link Source#whenNonNull() whenNonNull} to every source._@return a new property mapper instance;public PropertyMapper alwaysApplyingWhenNonNull() {_		return alwaysApplying(this::whenNonNull)__	};return,a,new,link,property,mapper,instance,that,applies,link,source,when,non,null,when,non,null,to,every,source,return,a,new,property,mapper,instance;public,property,mapper,always,applying,when,non,null,return,always,applying,this,when,non,null
PropertyMapper -> public PropertyMapper alwaysApplyingWhenNonNull();1514031260;Return a new {@link PropertyMapper} instance that applies_{@link Source#whenNonNull() whenNonNull} to every source._@return a new property mapper instance;public PropertyMapper alwaysApplyingWhenNonNull() {_		return alwaysApplying(this::whenNonNull)__	};return,a,new,link,property,mapper,instance,that,applies,link,source,when,non,null,when,non,null,to,every,source,return,a,new,property,mapper,instance;public,property,mapper,always,applying,when,non,null,return,always,applying,this,when,non,null
PropertyMapper -> public PropertyMapper alwaysApplyingWhenNonNull();1516215803;Return a new {@link PropertyMapper} instance that applies_{@link Source#whenNonNull() whenNonNull} to every source._@return a new property mapper instance;public PropertyMapper alwaysApplyingWhenNonNull() {_		return alwaysApplying(this::whenNonNull)__	};return,a,new,link,property,mapper,instance,that,applies,link,source,when,non,null,when,non,null,to,every,source,return,a,new,property,mapper,instance;public,property,mapper,always,applying,when,non,null,return,always,applying,this,when,non,null
PropertyMapper -> public PropertyMapper alwaysApplyingWhenNonNull();1516357852;Return a new {@link PropertyMapper} instance that applies_{@link Source#whenNonNull() whenNonNull} to every source._@return a new property mapper instance;public PropertyMapper alwaysApplyingWhenNonNull() {_		return alwaysApplying(this::whenNonNull)__	};return,a,new,link,property,mapper,instance,that,applies,link,source,when,non,null,when,non,null,to,every,source,return,a,new,property,mapper,instance;public,property,mapper,always,applying,when,non,null,return,always,applying,this,when,non,null
PropertyMapper -> public PropertyMapper alwaysApplyingWhenNonNull();1516961113;Return a new {@link PropertyMapper} instance that applies_{@link Source#whenNonNull() whenNonNull} to every source._@return a new property mapper instance;public PropertyMapper alwaysApplyingWhenNonNull() {_		return alwaysApplying(this::whenNonNull)__	};return,a,new,link,property,mapper,instance,that,applies,link,source,when,non,null,when,non,null,to,every,source,return,a,new,property,mapper,instance;public,property,mapper,always,applying,when,non,null,return,always,applying,this,when,non,null
PropertyMapper -> public PropertyMapper alwaysApplyingWhenNonNull();1516961171;Return a new {@link PropertyMapper} instance that applies_{@link Source#whenNonNull() whenNonNull} to every source._@return a new property mapper instance;public PropertyMapper alwaysApplyingWhenNonNull() {_		return alwaysApplying(this::whenNonNull)__	};return,a,new,link,property,mapper,instance,that,applies,link,source,when,non,null,when,non,null,to,every,source,return,a,new,property,mapper,instance;public,property,mapper,always,applying,when,non,null,return,always,applying,this,when,non,null
PropertyMapper -> public PropertyMapper alwaysApplyingWhenNonNull();1516966290;Return a new {@link PropertyMapper} instance that applies_{@link Source#whenNonNull() whenNonNull} to every source._@return a new property mapper instance;public PropertyMapper alwaysApplyingWhenNonNull() {_		return alwaysApplying(this::whenNonNull)__	};return,a,new,link,property,mapper,instance,that,applies,link,source,when,non,null,when,non,null,to,every,source,return,a,new,property,mapper,instance;public,property,mapper,always,applying,when,non,null,return,always,applying,this,when,non,null
PropertyMapper -> public PropertyMapper alwaysApplyingWhenNonNull();1525476706;Return a new {@link PropertyMapper} instance that applies_{@link Source#whenNonNull() whenNonNull} to every source._@return a new property mapper instance;public PropertyMapper alwaysApplyingWhenNonNull() {_		return alwaysApplying(this::whenNonNull)__	};return,a,new,link,property,mapper,instance,that,applies,link,source,when,non,null,when,non,null,to,every,source,return,a,new,property,mapper,instance;public,property,mapper,always,applying,when,non,null,return,always,applying,this,when,non,null
PropertyMapper -> public PropertyMapper alwaysApplyingWhenNonNull();1534945262;Return a new {@link PropertyMapper} instance that applies_{@link Source#whenNonNull() whenNonNull} to every source._@return a new property mapper instance;public PropertyMapper alwaysApplyingWhenNonNull() {_		return alwaysApplying(this::whenNonNull)__	};return,a,new,link,property,mapper,instance,that,applies,link,source,when,non,null,when,non,null,to,every,source,return,a,new,property,mapper,instance;public,property,mapper,always,applying,when,non,null,return,always,applying,this,when,non,null
PropertyMapper -> Source -> public Source<T> whenNonNull();1513391526;Return a filtered version of the source that won't map non-null values or_suppliers that throw a {@link NullPointerException}._@return a new filtered source instance;public Source<T> whenNonNull() {_			return new Source<>(new NullPointerExceptionSafeSupplier<>(this.supplier),_					Objects::nonNull)__		};return,a,filtered,version,of,the,source,that,won,t,map,non,null,values,or,suppliers,that,throw,a,link,null,pointer,exception,return,a,new,filtered,source,instance;public,source,t,when,non,null,return,new,source,new,null,pointer,exception,safe,supplier,this,supplier,objects,non,null
PropertyMapper -> Source -> public Source<T> whenNonNull();1514031260;Return a filtered version of the source that won't map non-null values or_suppliers that throw a {@link NullPointerException}._@return a new filtered source instance;public Source<T> whenNonNull() {_			return new Source<>(new NullPointerExceptionSafeSupplier<>(this.supplier),_					Objects::nonNull)__		};return,a,filtered,version,of,the,source,that,won,t,map,non,null,values,or,suppliers,that,throw,a,link,null,pointer,exception,return,a,new,filtered,source,instance;public,source,t,when,non,null,return,new,source,new,null,pointer,exception,safe,supplier,this,supplier,objects,non,null
PropertyMapper -> Source -> public Source<T> whenNonNull();1516215803;Return a filtered version of the source that won't map non-null values or_suppliers that throw a {@link NullPointerException}._@return a new filtered source instance;public Source<T> whenNonNull() {_			return new Source<>(new NullPointerExceptionSafeSupplier<>(this.supplier),_					Objects::nonNull)__		};return,a,filtered,version,of,the,source,that,won,t,map,non,null,values,or,suppliers,that,throw,a,link,null,pointer,exception,return,a,new,filtered,source,instance;public,source,t,when,non,null,return,new,source,new,null,pointer,exception,safe,supplier,this,supplier,objects,non,null
PropertyMapper -> Source -> public Source<T> whenNonNull();1516357852;Return a filtered version of the source that won't map non-null values or_suppliers that throw a {@link NullPointerException}._@return a new filtered source instance;public Source<T> whenNonNull() {_			return new Source<>(new NullPointerExceptionSafeSupplier<>(this.supplier),_					Objects::nonNull)__		};return,a,filtered,version,of,the,source,that,won,t,map,non,null,values,or,suppliers,that,throw,a,link,null,pointer,exception,return,a,new,filtered,source,instance;public,source,t,when,non,null,return,new,source,new,null,pointer,exception,safe,supplier,this,supplier,objects,non,null
PropertyMapper -> Source -> public Source<T> whenNonNull();1516961113;Return a filtered version of the source that won't map non-null values or_suppliers that throw a {@link NullPointerException}._@return a new filtered source instance;public Source<T> whenNonNull() {_			return new Source<>(new NullPointerExceptionSafeSupplier<>(this.supplier),_					Objects::nonNull)__		};return,a,filtered,version,of,the,source,that,won,t,map,non,null,values,or,suppliers,that,throw,a,link,null,pointer,exception,return,a,new,filtered,source,instance;public,source,t,when,non,null,return,new,source,new,null,pointer,exception,safe,supplier,this,supplier,objects,non,null
PropertyMapper -> Source -> public Source<T> whenNonNull();1516961171;Return a filtered version of the source that won't map non-null values or_suppliers that throw a {@link NullPointerException}._@return a new filtered source instance;public Source<T> whenNonNull() {_			return new Source<>(new NullPointerExceptionSafeSupplier<>(this.supplier),_					Objects::nonNull)__		};return,a,filtered,version,of,the,source,that,won,t,map,non,null,values,or,suppliers,that,throw,a,link,null,pointer,exception,return,a,new,filtered,source,instance;public,source,t,when,non,null,return,new,source,new,null,pointer,exception,safe,supplier,this,supplier,objects,non,null
PropertyMapper -> Source -> public Source<T> whenNonNull();1516966290;Return a filtered version of the source that won't map non-null values or_suppliers that throw a {@link NullPointerException}._@return a new filtered source instance;public Source<T> whenNonNull() {_			return new Source<>(new NullPointerExceptionSafeSupplier<>(this.supplier),_					Objects::nonNull)__		};return,a,filtered,version,of,the,source,that,won,t,map,non,null,values,or,suppliers,that,throw,a,link,null,pointer,exception,return,a,new,filtered,source,instance;public,source,t,when,non,null,return,new,source,new,null,pointer,exception,safe,supplier,this,supplier,objects,non,null
PropertyMapper -> Source -> public Source<T> whenNonNull();1525476706;Return a filtered version of the source that won't map non-null values or_suppliers that throw a {@link NullPointerException}._@return a new filtered source instance;public Source<T> whenNonNull() {_			return new Source<>(new NullPointerExceptionSafeSupplier<>(this.supplier),_					Objects::nonNull)__		};return,a,filtered,version,of,the,source,that,won,t,map,non,null,values,or,suppliers,that,throw,a,link,null,pointer,exception,return,a,new,filtered,source,instance;public,source,t,when,non,null,return,new,source,new,null,pointer,exception,safe,supplier,this,supplier,objects,non,null
PropertyMapper -> Source -> public Source<T> whenNonNull();1534945262;Return a filtered version of the source that won't map non-null values or_suppliers that throw a {@link NullPointerException}._@return a new filtered source instance;public Source<T> whenNonNull() {_			return new Source<>(new NullPointerExceptionSafeSupplier<>(this.supplier),_					Objects::nonNull)__		};return,a,filtered,version,of,the,source,that,won,t,map,non,null,values,or,suppliers,that,throw,a,link,null,pointer,exception,return,a,new,filtered,source,instance;public,source,t,when,non,null,return,new,source,new,null,pointer,exception,safe,supplier,this,supplier,objects,non,null
PropertyMapper -> Source -> public void toCall(Runnable runnable);1513391526;Complete the mapping by calling the specified method when the value has not_been filtered._@param runnable the method to call if the value has not been filtered;public void toCall(Runnable runnable) {_			Assert.notNull(runnable, "Runnable must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				runnable.run()__			}_		};complete,the,mapping,by,calling,the,specified,method,when,the,value,has,not,been,filtered,param,runnable,the,method,to,call,if,the,value,has,not,been,filtered;public,void,to,call,runnable,runnable,assert,not,null,runnable,runnable,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,runnable,run
PropertyMapper -> Source -> public void toCall(Runnable runnable);1514031260;Complete the mapping by calling the specified method when the value has not_been filtered._@param runnable the method to call if the value has not been filtered;public void toCall(Runnable runnable) {_			Assert.notNull(runnable, "Runnable must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				runnable.run()__			}_		};complete,the,mapping,by,calling,the,specified,method,when,the,value,has,not,been,filtered,param,runnable,the,method,to,call,if,the,value,has,not,been,filtered;public,void,to,call,runnable,runnable,assert,not,null,runnable,runnable,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,runnable,run
PropertyMapper -> Source -> public void toCall(Runnable runnable);1516215803;Complete the mapping by calling the specified method when the value has not_been filtered._@param runnable the method to call if the value has not been filtered;public void toCall(Runnable runnable) {_			Assert.notNull(runnable, "Runnable must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				runnable.run()__			}_		};complete,the,mapping,by,calling,the,specified,method,when,the,value,has,not,been,filtered,param,runnable,the,method,to,call,if,the,value,has,not,been,filtered;public,void,to,call,runnable,runnable,assert,not,null,runnable,runnable,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,runnable,run
PropertyMapper -> Source -> public void toCall(Runnable runnable);1516357852;Complete the mapping by calling the specified method when the value has not_been filtered._@param runnable the method to call if the value has not been filtered;public void toCall(Runnable runnable) {_			Assert.notNull(runnable, "Runnable must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				runnable.run()__			}_		};complete,the,mapping,by,calling,the,specified,method,when,the,value,has,not,been,filtered,param,runnable,the,method,to,call,if,the,value,has,not,been,filtered;public,void,to,call,runnable,runnable,assert,not,null,runnable,runnable,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,runnable,run
PropertyMapper -> Source -> public void toCall(Runnable runnable);1516961113;Complete the mapping by calling the specified method when the value has not_been filtered._@param runnable the method to call if the value has not been filtered;public void toCall(Runnable runnable) {_			Assert.notNull(runnable, "Runnable must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				runnable.run()__			}_		};complete,the,mapping,by,calling,the,specified,method,when,the,value,has,not,been,filtered,param,runnable,the,method,to,call,if,the,value,has,not,been,filtered;public,void,to,call,runnable,runnable,assert,not,null,runnable,runnable,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,runnable,run
PropertyMapper -> Source -> public void toCall(Runnable runnable);1516961171;Complete the mapping by calling the specified method when the value has not_been filtered._@param runnable the method to call if the value has not been filtered;public void toCall(Runnable runnable) {_			Assert.notNull(runnable, "Runnable must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				runnable.run()__			}_		};complete,the,mapping,by,calling,the,specified,method,when,the,value,has,not,been,filtered,param,runnable,the,method,to,call,if,the,value,has,not,been,filtered;public,void,to,call,runnable,runnable,assert,not,null,runnable,runnable,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,runnable,run
PropertyMapper -> Source -> public void toCall(Runnable runnable);1516966290;Complete the mapping by calling the specified method when the value has not_been filtered._@param runnable the method to call if the value has not been filtered;public void toCall(Runnable runnable) {_			Assert.notNull(runnable, "Runnable must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				runnable.run()__			}_		};complete,the,mapping,by,calling,the,specified,method,when,the,value,has,not,been,filtered,param,runnable,the,method,to,call,if,the,value,has,not,been,filtered;public,void,to,call,runnable,runnable,assert,not,null,runnable,runnable,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,runnable,run
PropertyMapper -> Source -> public void toCall(Runnable runnable);1525476706;Complete the mapping by calling the specified method when the value has not_been filtered._@param runnable the method to call if the value has not been filtered;public void toCall(Runnable runnable) {_			Assert.notNull(runnable, "Runnable must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				runnable.run()__			}_		};complete,the,mapping,by,calling,the,specified,method,when,the,value,has,not,been,filtered,param,runnable,the,method,to,call,if,the,value,has,not,been,filtered;public,void,to,call,runnable,runnable,assert,not,null,runnable,runnable,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,runnable,run
PropertyMapper -> Source -> public void toCall(Runnable runnable);1534945262;Complete the mapping by calling the specified method when the value has not_been filtered._@param runnable the method to call if the value has not been filtered;public void toCall(Runnable runnable) {_			Assert.notNull(runnable, "Runnable must not be null")__			T value = this.supplier.get()__			if (this.predicate.test(value)) {_				runnable.run()__			}_		};complete,the,mapping,by,calling,the,specified,method,when,the,value,has,not,been,filtered,param,runnable,the,method,to,call,if,the,value,has,not,been,filtered;public,void,to,call,runnable,runnable,assert,not,null,runnable,runnable,must,not,be,null,t,value,this,supplier,get,if,this,predicate,test,value,runnable,run
PropertyMapper -> Source -> public <R extends Number> Source<Integer> asInt(Function<T, R> adapter);1513391526;Return an adapted version of the source with {@link Integer} type._@param <R> the resulting type_@param adapter an adapter to convert the current value to a number._@return a new adapted source instance;public <R extends Number> Source<Integer> asInt(Function<T, R> adapter) {_			return as(adapter).as(Number::intValue)__		};return,an,adapted,version,of,the,source,with,link,integer,type,param,r,the,resulting,type,param,adapter,an,adapter,to,convert,the,current,value,to,a,number,return,a,new,adapted,source,instance;public,r,extends,number,source,integer,as,int,function,t,r,adapter,return,as,adapter,as,number,int,value
PropertyMapper -> Source -> public <R extends Number> Source<Integer> asInt(Function<T, R> adapter);1514031260;Return an adapted version of the source with {@link Integer} type._@param <R> the resulting type_@param adapter an adapter to convert the current value to a number._@return a new adapted source instance;public <R extends Number> Source<Integer> asInt(Function<T, R> adapter) {_			return as(adapter).as(Number::intValue)__		};return,an,adapted,version,of,the,source,with,link,integer,type,param,r,the,resulting,type,param,adapter,an,adapter,to,convert,the,current,value,to,a,number,return,a,new,adapted,source,instance;public,r,extends,number,source,integer,as,int,function,t,r,adapter,return,as,adapter,as,number,int,value
PropertyMapper -> Source -> public <R extends Number> Source<Integer> asInt(Function<T, R> adapter);1516215803;Return an adapted version of the source with {@link Integer} type._@param <R> the resulting type_@param adapter an adapter to convert the current value to a number._@return a new adapted source instance;public <R extends Number> Source<Integer> asInt(Function<T, R> adapter) {_			return as(adapter).as(Number::intValue)__		};return,an,adapted,version,of,the,source,with,link,integer,type,param,r,the,resulting,type,param,adapter,an,adapter,to,convert,the,current,value,to,a,number,return,a,new,adapted,source,instance;public,r,extends,number,source,integer,as,int,function,t,r,adapter,return,as,adapter,as,number,int,value
PropertyMapper -> Source -> public <R extends Number> Source<Integer> asInt(Function<T, R> adapter);1516357852;Return an adapted version of the source with {@link Integer} type._@param <R> the resulting type_@param adapter an adapter to convert the current value to a number._@return a new adapted source instance;public <R extends Number> Source<Integer> asInt(Function<T, R> adapter) {_			return as(adapter).as(Number::intValue)__		};return,an,adapted,version,of,the,source,with,link,integer,type,param,r,the,resulting,type,param,adapter,an,adapter,to,convert,the,current,value,to,a,number,return,a,new,adapted,source,instance;public,r,extends,number,source,integer,as,int,function,t,r,adapter,return,as,adapter,as,number,int,value
PropertyMapper -> Source -> public <R extends Number> Source<Integer> asInt(Function<T, R> adapter);1516961113;Return an adapted version of the source with {@link Integer} type._@param <R> the resulting type_@param adapter an adapter to convert the current value to a number._@return a new adapted source instance;public <R extends Number> Source<Integer> asInt(Function<T, R> adapter) {_			return as(adapter).as(Number::intValue)__		};return,an,adapted,version,of,the,source,with,link,integer,type,param,r,the,resulting,type,param,adapter,an,adapter,to,convert,the,current,value,to,a,number,return,a,new,adapted,source,instance;public,r,extends,number,source,integer,as,int,function,t,r,adapter,return,as,adapter,as,number,int,value
PropertyMapper -> Source -> public <R extends Number> Source<Integer> asInt(Function<T, R> adapter);1516961171;Return an adapted version of the source with {@link Integer} type._@param <R> the resulting type_@param adapter an adapter to convert the current value to a number._@return a new adapted source instance;public <R extends Number> Source<Integer> asInt(Function<T, R> adapter) {_			return as(adapter).as(Number::intValue)__		};return,an,adapted,version,of,the,source,with,link,integer,type,param,r,the,resulting,type,param,adapter,an,adapter,to,convert,the,current,value,to,a,number,return,a,new,adapted,source,instance;public,r,extends,number,source,integer,as,int,function,t,r,adapter,return,as,adapter,as,number,int,value
PropertyMapper -> Source -> public <R extends Number> Source<Integer> asInt(Function<T, R> adapter);1516966290;Return an adapted version of the source with {@link Integer} type._@param <R> the resulting type_@param adapter an adapter to convert the current value to a number._@return a new adapted source instance;public <R extends Number> Source<Integer> asInt(Function<T, R> adapter) {_			return as(adapter).as(Number::intValue)__		};return,an,adapted,version,of,the,source,with,link,integer,type,param,r,the,resulting,type,param,adapter,an,adapter,to,convert,the,current,value,to,a,number,return,a,new,adapted,source,instance;public,r,extends,number,source,integer,as,int,function,t,r,adapter,return,as,adapter,as,number,int,value
PropertyMapper -> Source -> public <R extends Number> Source<Integer> asInt(Function<T, R> adapter);1525476706;Return an adapted version of the source with {@link Integer} type._@param <R> the resulting type_@param adapter an adapter to convert the current value to a number._@return a new adapted source instance;public <R extends Number> Source<Integer> asInt(Function<T, R> adapter) {_			return as(adapter).as(Number::intValue)__		};return,an,adapted,version,of,the,source,with,link,integer,type,param,r,the,resulting,type,param,adapter,an,adapter,to,convert,the,current,value,to,a,number,return,a,new,adapted,source,instance;public,r,extends,number,source,integer,as,int,function,t,r,adapter,return,as,adapter,as,number,int,value
PropertyMapper -> Source -> public <R extends Number> Source<Integer> asInt(Function<T, R> adapter);1534945262;Return an adapted version of the source with {@link Integer} type._@param <R> the resulting type_@param adapter an adapter to convert the current value to a number._@return a new adapted source instance;public <R extends Number> Source<Integer> asInt(Function<T, R> adapter) {_			return as(adapter).as(Number::intValue)__		};return,an,adapted,version,of,the,source,with,link,integer,type,param,r,the,resulting,type,param,adapter,an,adapter,to,convert,the,current,value,to,a,number,return,a,new,adapted,source,instance;public,r,extends,number,source,integer,as,int,function,t,r,adapter,return,as,adapter,as,number,int,value
PropertyMapper -> Source -> public Source<T> when(Predicate<T> predicate);1513391526;Return a filtered version of the source that won't map values that don't match_the given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> when(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate)__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,don,t,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate
PropertyMapper -> Source -> public Source<T> when(Predicate<T> predicate);1514031260;Return a filtered version of the source that won't map values that don't match_the given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> when(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate)__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,don,t,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate
PropertyMapper -> Source -> public Source<T> when(Predicate<T> predicate);1516215803;Return a filtered version of the source that won't map values that don't match_the given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> when(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate)__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,don,t,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate
PropertyMapper -> Source -> public Source<T> when(Predicate<T> predicate);1516357852;Return a filtered version of the source that won't map values that don't match_the given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> when(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate)__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,don,t,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate
PropertyMapper -> Source -> public Source<T> when(Predicate<T> predicate);1516961113;Return a filtered version of the source that won't map values that don't match_the given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> when(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate)__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,don,t,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate
PropertyMapper -> Source -> public Source<T> when(Predicate<T> predicate);1516961171;Return a filtered version of the source that won't map values that don't match_the given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> when(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate)__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,don,t,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate
PropertyMapper -> Source -> public Source<T> when(Predicate<T> predicate);1516966290;Return a filtered version of the source that won't map values that don't match_the given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> when(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate)__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,don,t,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate
PropertyMapper -> Source -> public Source<T> when(Predicate<T> predicate);1525476706;Return a filtered version of the source that won't map values that don't match_the given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> when(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate)__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,don,t,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate
PropertyMapper -> Source -> public Source<T> when(Predicate<T> predicate);1534945262;Return a filtered version of the source that won't map values that don't match_the given predicate._@param predicate the predicate used to filter values_@return a new filtered source instance;public Source<T> when(Predicate<T> predicate) {_			Assert.notNull(predicate, "Predicate must not be null")__			return new Source<>(this.supplier, predicate)__		};return,a,filtered,version,of,the,source,that,won,t,map,values,that,don,t,match,the,given,predicate,param,predicate,the,predicate,used,to,filter,values,return,a,new,filtered,source,instance;public,source,t,when,predicate,t,predicate,assert,not,null,predicate,predicate,must,not,be,null,return,new,source,this,supplier,predicate
PropertyMapper -> public PropertyMapper alwaysApplying(SourceOperator operator);1513391526;Return a new {@link PropertyMapper} instance that applies the given_{@link SourceOperator} to every source._@param operator the source operator to apply_@return a new property mapper instance;public PropertyMapper alwaysApplying(SourceOperator operator) {_		Assert.notNull(operator, "Operator must not be null")__		return new PropertyMapper(this, operator)__	};return,a,new,link,property,mapper,instance,that,applies,the,given,link,source,operator,to,every,source,param,operator,the,source,operator,to,apply,return,a,new,property,mapper,instance;public,property,mapper,always,applying,source,operator,operator,assert,not,null,operator,operator,must,not,be,null,return,new,property,mapper,this,operator
PropertyMapper -> public PropertyMapper alwaysApplying(SourceOperator operator);1514031260;Return a new {@link PropertyMapper} instance that applies the given_{@link SourceOperator} to every source._@param operator the source operator to apply_@return a new property mapper instance;public PropertyMapper alwaysApplying(SourceOperator operator) {_		Assert.notNull(operator, "Operator must not be null")__		return new PropertyMapper(this, operator)__	};return,a,new,link,property,mapper,instance,that,applies,the,given,link,source,operator,to,every,source,param,operator,the,source,operator,to,apply,return,a,new,property,mapper,instance;public,property,mapper,always,applying,source,operator,operator,assert,not,null,operator,operator,must,not,be,null,return,new,property,mapper,this,operator
PropertyMapper -> public PropertyMapper alwaysApplying(SourceOperator operator);1516215803;Return a new {@link PropertyMapper} instance that applies the given_{@link SourceOperator} to every source._@param operator the source operator to apply_@return a new property mapper instance;public PropertyMapper alwaysApplying(SourceOperator operator) {_		Assert.notNull(operator, "Operator must not be null")__		return new PropertyMapper(this, operator)__	};return,a,new,link,property,mapper,instance,that,applies,the,given,link,source,operator,to,every,source,param,operator,the,source,operator,to,apply,return,a,new,property,mapper,instance;public,property,mapper,always,applying,source,operator,operator,assert,not,null,operator,operator,must,not,be,null,return,new,property,mapper,this,operator
PropertyMapper -> public PropertyMapper alwaysApplying(SourceOperator operator);1516357852;Return a new {@link PropertyMapper} instance that applies the given_{@link SourceOperator} to every source._@param operator the source operator to apply_@return a new property mapper instance;public PropertyMapper alwaysApplying(SourceOperator operator) {_		Assert.notNull(operator, "Operator must not be null")__		return new PropertyMapper(this, operator)__	};return,a,new,link,property,mapper,instance,that,applies,the,given,link,source,operator,to,every,source,param,operator,the,source,operator,to,apply,return,a,new,property,mapper,instance;public,property,mapper,always,applying,source,operator,operator,assert,not,null,operator,operator,must,not,be,null,return,new,property,mapper,this,operator
PropertyMapper -> public PropertyMapper alwaysApplying(SourceOperator operator);1516961113;Return a new {@link PropertyMapper} instance that applies the given_{@link SourceOperator} to every source._@param operator the source operator to apply_@return a new property mapper instance;public PropertyMapper alwaysApplying(SourceOperator operator) {_		Assert.notNull(operator, "Operator must not be null")__		return new PropertyMapper(this, operator)__	};return,a,new,link,property,mapper,instance,that,applies,the,given,link,source,operator,to,every,source,param,operator,the,source,operator,to,apply,return,a,new,property,mapper,instance;public,property,mapper,always,applying,source,operator,operator,assert,not,null,operator,operator,must,not,be,null,return,new,property,mapper,this,operator
PropertyMapper -> public PropertyMapper alwaysApplying(SourceOperator operator);1516961171;Return a new {@link PropertyMapper} instance that applies the given_{@link SourceOperator} to every source._@param operator the source operator to apply_@return a new property mapper instance;public PropertyMapper alwaysApplying(SourceOperator operator) {_		Assert.notNull(operator, "Operator must not be null")__		return new PropertyMapper(this, operator)__	};return,a,new,link,property,mapper,instance,that,applies,the,given,link,source,operator,to,every,source,param,operator,the,source,operator,to,apply,return,a,new,property,mapper,instance;public,property,mapper,always,applying,source,operator,operator,assert,not,null,operator,operator,must,not,be,null,return,new,property,mapper,this,operator
PropertyMapper -> public PropertyMapper alwaysApplying(SourceOperator operator);1516966290;Return a new {@link PropertyMapper} instance that applies the given_{@link SourceOperator} to every source._@param operator the source operator to apply_@return a new property mapper instance;public PropertyMapper alwaysApplying(SourceOperator operator) {_		Assert.notNull(operator, "Operator must not be null")__		return new PropertyMapper(this, operator)__	};return,a,new,link,property,mapper,instance,that,applies,the,given,link,source,operator,to,every,source,param,operator,the,source,operator,to,apply,return,a,new,property,mapper,instance;public,property,mapper,always,applying,source,operator,operator,assert,not,null,operator,operator,must,not,be,null,return,new,property,mapper,this,operator
PropertyMapper -> public PropertyMapper alwaysApplying(SourceOperator operator);1525476706;Return a new {@link PropertyMapper} instance that applies the given_{@link SourceOperator} to every source._@param operator the source operator to apply_@return a new property mapper instance;public PropertyMapper alwaysApplying(SourceOperator operator) {_		Assert.notNull(operator, "Operator must not be null")__		return new PropertyMapper(this, operator)__	};return,a,new,link,property,mapper,instance,that,applies,the,given,link,source,operator,to,every,source,param,operator,the,source,operator,to,apply,return,a,new,property,mapper,instance;public,property,mapper,always,applying,source,operator,operator,assert,not,null,operator,operator,must,not,be,null,return,new,property,mapper,this,operator
PropertyMapper -> public PropertyMapper alwaysApplying(SourceOperator operator);1534945262;Return a new {@link PropertyMapper} instance that applies the given_{@link SourceOperator} to every source._@param operator the source operator to apply_@return a new property mapper instance;public PropertyMapper alwaysApplying(SourceOperator operator) {_		Assert.notNull(operator, "Operator must not be null")__		return new PropertyMapper(this, operator)__	};return,a,new,link,property,mapper,instance,that,applies,the,given,link,source,operator,to,every,source,param,operator,the,source,operator,to,apply,return,a,new,property,mapper,instance;public,property,mapper,always,applying,source,operator,operator,assert,not,null,operator,operator,must,not,be,null,return,new,property,mapper,this,operator
