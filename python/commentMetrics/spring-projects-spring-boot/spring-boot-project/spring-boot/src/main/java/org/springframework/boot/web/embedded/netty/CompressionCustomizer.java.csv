commented;modifiers;parameterAmount;loc;comment;code
false;public;1;13;;@Override public HttpServer apply(HttpServer server) {     if (!this.compression.getMinResponseSize().isNegative()) {         server = server.compress((int) this.compression.getMinResponseSize().toBytes()).     }     CompressionPredicate mimeTypes = getMimeTypesPredicate(this.compression.getMimeTypes()).     CompressionPredicate excludedUserAgents = getExcludedUserAgentsPredicate(this.compression.getExcludedUserAgents()).     server = server.compress(mimeTypes.and(excludedUserAgents)).     return server. }
false;private;1;15;;private CompressionPredicate getMimeTypesPredicate(String[] mimeTypes) {     if (ObjectUtils.isEmpty(mimeTypes)) {         return ALWAYS_COMPRESS.     }     return (request, response) -> {         String contentType = response.responseHeaders().get(HttpHeaderNames.CONTENT_TYPE).         if (StringUtils.isEmpty(contentType)) {             return false.         }         MimeType contentMimeType = MimeTypeUtils.parseMimeType(contentType).         return Arrays.stream(mimeTypes).map(MimeTypeUtils::parseMimeType).anyMatch((candidate) -> candidate.isCompatibleWith(contentMimeType)).     }. }
false;private;1;11;;private CompressionPredicate getExcludedUserAgentsPredicate(String[] excludedUserAgents) {     if (ObjectUtils.isEmpty(excludedUserAgents)) {         return ALWAYS_COMPRESS.     }     return (request, response) -> {         HttpHeaders headers = request.requestHeaders().         return Arrays.stream(excludedUserAgents).noneMatch((candidate) -> headers.contains(HttpHeaderNames.USER_AGENT, candidate, true)).     }. }
