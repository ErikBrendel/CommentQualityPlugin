commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void initialize(ConfigurableApplicationContext context) {     context.addBeanFactoryPostProcessor(new ConfigurationWarningsPostProcessor(getChecks())). }
true;protected;0;3;/**  * Returns the checks that should be applied.  * @return the checks to apply  */ ;/**  * Returns the checks that should be applied.  * @return the checks to apply  */ protected Check[] getChecks() {     return new Check[] { new ComponentScanPackageCheck() }. }
false;public;0;4;;@Override public int getOrder() {     return Ordered.LOWEST_PRECEDENCE - 1. }
false;public;1;4;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException { }
false;public;1;11;;@Override public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {     for (Check check : this.checks) {         String message = check.getWarning(registry).         if (StringUtils.hasLength(message)) {             warn(message).         }     } }
false;private;1;5;;private void warn(String message) {     if (logger.isWarnEnabled()) {         logger.warn(String.format("%n%n** WARNING ** : %s%n%n", message)).     } }
true;;1;1;/**  * Returns a warning if the check fails or {@code null} if there are no problems.  * @param registry the {@link BeanDefinitionRegistry}  * @return a warning message or {@code null}  */ ;/**  * Returns a warning if the check fails or {@code null} if there are no problems.  * @param registry the {@link BeanDefinitionRegistry}  * @return a warning message or {@code null}  */ String getWarning(BeanDefinitionRegistry registry).
false;public;1;12;;@Override public String getWarning(BeanDefinitionRegistry registry) {     Set<String> scannedPackages = getComponentScanningPackages(registry).     List<String> problematicPackages = getProblematicPackages(scannedPackages).     if (problematicPackages.isEmpty()) {         return null.     }     return "Your ApplicationContext is unlikely to " + "start due to a @ComponentScan of " + StringUtils.collectionToDelimitedString(problematicPackages, ", ") + ".". }
false;protected;1;14;;protected Set<String> getComponentScanningPackages(BeanDefinitionRegistry registry) {     Set<String> packages = new LinkedHashSet<>().     String[] names = registry.getBeanDefinitionNames().     for (String name : names) {         BeanDefinition definition = registry.getBeanDefinition(name).         if (definition instanceof AnnotatedBeanDefinition) {             AnnotatedBeanDefinition annotatedDefinition = (AnnotatedBeanDefinition) definition.             addComponentScanningPackages(packages, annotatedDefinition.getMetadata()).         }     }     return packages. }
false;private;2;13;;private void addComponentScanningPackages(Set<String> packages, AnnotationMetadata metadata) {     AnnotationAttributes attributes = AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(ComponentScan.class.getName(), true)).     if (attributes != null) {         addPackages(packages, attributes.getStringArray("value")).         addPackages(packages, attributes.getStringArray("basePackages")).         addClasses(packages, attributes.getStringArray("basePackageClasses")).         if (packages.isEmpty()) {             packages.add(ClassUtils.getPackageName(metadata.getClassName())).         }     } }
false;private;2;5;;private void addPackages(Set<String> packages, String[] values) {     if (values != null) {         Collections.addAll(packages, values).     } }
false;private;2;7;;private void addClasses(Set<String> packages, String[] values) {     if (values != null) {         for (String value : values) {             packages.add(ClassUtils.getPackageName(value)).         }     } }
false;private;1;9;;private List<String> getProblematicPackages(Set<String> scannedPackages) {     List<String> problematicPackages = new ArrayList<>().     for (String scannedPackage : scannedPackages) {         if (isProblematicPackage(scannedPackage)) {             problematicPackages.add(getDisplayName(scannedPackage)).         }     }     return problematicPackages. }
false;private;1;6;;private boolean isProblematicPackage(String scannedPackage) {     if (scannedPackage == null || scannedPackage.isEmpty()) {         return true.     }     return PROBLEM_PACKAGES.contains(scannedPackage). }
false;private;1;6;;private String getDisplayName(String scannedPackage) {     if (scannedPackage == null || scannedPackage.isEmpty()) {         return "the default package".     }     return "'" + scannedPackage + "'". }
