commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Iterator<ConfigurationPropertySource> iterator() {     return new SourcesIterator(this.sources.iterator(), this::adapt). }
false;private;1;11;;private ConfigurationPropertySource adapt(PropertySource<?> source) {     ConfigurationPropertySource result = this.cache.get(source).     // check the actual source hasn't also changed.     if (result != null && result.getUnderlyingSource() == source) {         return result.     }     result = SpringConfigurationPropertySource.from(source).     this.cache.put(source, result).     return result. }
false;public;0;4;;@Override public boolean hasNext() {     return fetchNext() != null. }
false;public;0;9;;@Override public ConfigurationPropertySource next() {     ConfigurationPropertySource next = fetchNext().     if (next == null) {         throw new NoSuchElementException().     }     this.next = null.     return next. }
false;private;0;21;;private ConfigurationPropertySource fetchNext() {     if (this.next == null) {         if (this.iterators.isEmpty()) {             return null.         }         if (!this.iterators.peek().hasNext()) {             this.iterators.pop().             return fetchNext().         }         PropertySource<?> candidate = this.iterators.peek().next().         if (candidate.getSource() instanceof ConfigurableEnvironment) {             push((ConfigurableEnvironment) candidate.getSource()).             return fetchNext().         }         if (isIgnored(candidate)) {             return fetchNext().         }         this.next = this.adapter.apply(candidate).     }     return this.next. }
false;private;1;3;;private void push(ConfigurableEnvironment environment) {     this.iterators.push(environment.getPropertySources().iterator()). }
false;private;1;4;;private boolean isIgnored(PropertySource<?> candidate) {     return (candidate instanceof StubPropertySource || candidate instanceof ConfigurationPropertySourcesPropertySource). }
