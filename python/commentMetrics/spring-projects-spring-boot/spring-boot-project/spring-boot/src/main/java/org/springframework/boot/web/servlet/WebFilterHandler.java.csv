commented;modifiers;parameterAmount;loc;comment;code
false;public;3;16;;@Override public void doHandle(Map<String, Object> attributes, ScannedGenericBeanDefinition beanDefinition, BeanDefinitionRegistry registry) {     BeanDefinitionBuilder builder = BeanDefinitionBuilder.rootBeanDefinition(FilterRegistrationBean.class).     builder.addPropertyValue("asyncSupported", attributes.get("asyncSupported")).     builder.addPropertyValue("dispatcherTypes", extractDispatcherTypes(attributes)).     builder.addPropertyValue("filter", beanDefinition).     builder.addPropertyValue("initParameters", extractInitParameters(attributes)).     String name = determineName(attributes, beanDefinition).     builder.addPropertyValue("name", name).     builder.addPropertyValue("servletNames", attributes.get("servletNames")).     builder.addPropertyValue("urlPatterns", extractUrlPatterns(attributes)).     registry.registerBeanDefinition(name, builder.getBeanDefinition()). }
false;private;1;13;;private EnumSet<DispatcherType> extractDispatcherTypes(Map<String, Object> attributes) {     DispatcherType[] dispatcherTypes = (DispatcherType[]) attributes.get("dispatcherTypes").     if (dispatcherTypes.length == 0) {         return EnumSet.noneOf(DispatcherType.class).     }     if (dispatcherTypes.length == 1) {         return EnumSet.of(dispatcherTypes[0]).     }     return EnumSet.of(dispatcherTypes[0], Arrays.copyOfRange(dispatcherTypes, 1, dispatcherTypes.length)). }
false;private;2;5;;private String determineName(Map<String, Object> attributes, BeanDefinition beanDefinition) {     return (String) (StringUtils.hasText((String) attributes.get("filterName")) ? attributes.get("filterName") : beanDefinition.getBeanClassName()). }
