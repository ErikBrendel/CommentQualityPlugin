commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Sets the type of application event that will trigger writing of the PID file.  * Defaults to {@link ApplicationPreparedEvent}. NOTE: If you use the  * {@link org.springframework.boot.context.event.ApplicationStartingEvent} to trigger  * the write, you will not be able to specify the PID filename in the Spring  * {@link Environment}.  * @param triggerEventType the trigger event type  */ ;/**  * Sets the type of application event that will trigger writing of the PID file.  * Defaults to {@link ApplicationPreparedEvent}. NOTE: If you use the  * {@link org.springframework.boot.context.event.ApplicationStartingEvent} to trigger  * the write, you will not be able to specify the PID filename in the Spring  * {@link Environment}.  * @param triggerEventType the trigger event type  */ public void setTriggerEventType(Class<? extends SpringApplicationEvent> triggerEventType) {     Assert.notNull(triggerEventType, "Trigger event type must not be null").     this.triggerEventType = triggerEventType. }
false;public;1;16;;@Override public void onApplicationEvent(SpringApplicationEvent event) {     if (this.triggerEventType.isInstance(event) && created.compareAndSet(false, true)) {         try {             writePidFile(event).         } catch (Exception ex) {             String message = String.format("Cannot create pid file %s", this.file).             if (failOnWriteError(event)) {                 throw new IllegalStateException(message, ex).             }             logger.warn(message, ex).         }     } }
false;private;1;9;;private void writePidFile(SpringApplicationEvent event) throws IOException {     File pidFile = this.file.     String override = getProperty(event, FILE_PROPERTIES).     if (override != null) {         pidFile = new File(override).     }     new ApplicationPid().write(pidFile).     pidFile.deleteOnExit(). }
false;private;1;4;;private boolean failOnWriteError(SpringApplicationEvent event) {     String value = getProperty(event, FAIL_ON_WRITE_ERROR_PROPERTIES).     return (value != null) ? Boolean.parseBoolean(value) : false. }
false;private;2;9;;private String getProperty(SpringApplicationEvent event, List<Property> candidates) {     for (Property candidate : candidates) {         String value = candidate.getValue(event).         if (value != null) {             return value.         }     }     return null. }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
true;protected,static;0;3;/**  * Reset the created flag for testing purposes.  */ ;/**  * Reset the created flag for testing purposes.  */ protected static void reset() {     created.set(false). }
false;;1;1;;String getValue(SpringApplicationEvent event).
false;public;1;8;;@Override public String getValue(SpringApplicationEvent event) {     Environment environment = getEnvironment(event).     if (environment == null) {         return null.     }     return environment.getProperty(this.prefix + this.key). }
false;private;1;14;;private Environment getEnvironment(SpringApplicationEvent event) {     if (event instanceof ApplicationEnvironmentPreparedEvent) {         return ((ApplicationEnvironmentPreparedEvent) event).getEnvironment().     }     if (event instanceof ApplicationPreparedEvent) {         return ((ApplicationPreparedEvent) event).getApplicationContext().getEnvironment().     }     if (event instanceof ApplicationReadyEvent) {         return ((ApplicationReadyEvent) event).getApplicationContext().getEnvironment().     }     return null. }
false;public;1;4;;@Override public String getValue(SpringApplicationEvent event) {     return SystemProperties.get(this.properties). }
