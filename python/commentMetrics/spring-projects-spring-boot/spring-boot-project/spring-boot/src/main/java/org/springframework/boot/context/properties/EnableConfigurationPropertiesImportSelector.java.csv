commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public String[] selectImports(AnnotationMetadata metadata) {     return IMPORTS. }
false;public;2;6;;@Override public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {     getTypes(metadata).forEach((type) -> register(registry, (ConfigurableListableBeanFactory) registry, type)). }
false;private;1;7;;private List<Class<?>> getTypes(AnnotationMetadata metadata) {     MultiValueMap<String, Object> attributes = metadata.getAllAnnotationAttributes(EnableConfigurationProperties.class.getName(), false).     return collectClasses((attributes != null) ? attributes.get("value") : Collections.emptyList()). }
false;private;1;5;;private List<Class<?>> collectClasses(List<?> values) {     return values.stream().flatMap((value) -> Arrays.stream((Object[]) value)).map((o) -> (Class<?>) o).filter((type) -> void.class != type).collect(Collectors.toList()). }
false;private;3;7;;private void register(BeanDefinitionRegistry registry, ConfigurableListableBeanFactory beanFactory, Class<?> type) {     String name = getName(type).     if (!containsBeanDefinition(beanFactory, name)) {         registerBeanDefinition(registry, name, type).     } }
false;private;1;7;;private String getName(Class<?> type) {     ConfigurationProperties annotation = AnnotationUtils.findAnnotation(type, ConfigurationProperties.class).     String prefix = (annotation != null) ? annotation.prefix() : "".     return (StringUtils.hasText(prefix) ? prefix + "-" + type.getName() : type.getName()). }
false;private;2;12;;private boolean containsBeanDefinition(ConfigurableListableBeanFactory beanFactory, String name) {     if (beanFactory.containsBeanDefinition(name)) {         return true.     }     BeanFactory parent = beanFactory.getParentBeanFactory().     if (parent instanceof ConfigurableListableBeanFactory) {         return containsBeanDefinition((ConfigurableListableBeanFactory) parent, name).     }     return false. }
false;private;3;7;;private void registerBeanDefinition(BeanDefinitionRegistry registry, String name, Class<?> type) {     assertHasAnnotation(type).     GenericBeanDefinition definition = new GenericBeanDefinition().     definition.setBeanClass(type).     registry.registerBeanDefinition(name, definition). }
false;private;1;6;;private void assertHasAnnotation(Class<?> type) {     Assert.notNull(AnnotationUtils.findAnnotation(type, ConfigurationProperties.class), () -> "No " + ConfigurationProperties.class.getSimpleName() + " annotation found on  '" + type.getName() + "'."). }
