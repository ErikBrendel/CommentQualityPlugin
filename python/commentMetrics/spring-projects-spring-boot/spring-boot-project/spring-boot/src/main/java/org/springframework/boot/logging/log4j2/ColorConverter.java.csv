commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;15;/**  * Creates a new instance of the class. Required by Log4J2.  * @param config the configuration  * @param options the options  * @return a new instance, or {@code null} if the options are invalid  */ ;/**  * Creates a new instance of the class. Required by Log4J2.  * @param config the configuration  * @param options the options  * @return a new instance, or {@code null} if the options are invalid  */ public static ColorConverter newInstance(Configuration config, String[] options) {     if (options.length < 1) {         LOGGER.error("Incorrect number of options on style. " + "Expected at least 1, received {}", options.length).         return null.     }     if (options[0] == null) {         LOGGER.error("No pattern supplied on style").         return null.     }     PatternParser parser = PatternLayout.createPatternParser(config).     List<PatternFormatter> formatters = parser.parse(options[0]).     AnsiElement element = (options.length != 1) ? ELEMENTS.get(options[1]) : null.     return new ColorConverter(formatters, element). }
false;public;0;9;;@Override public boolean handlesThrowable() {     for (PatternFormatter formatter : this.formatters) {         if (formatter.handlesThrowable()) {             return true.         }     }     return super.handlesThrowable(). }
false;public;2;16;;@Override public void format(LogEvent event, StringBuilder toAppendTo) {     StringBuilder buf = new StringBuilder().     for (PatternFormatter formatter : this.formatters) {         formatter.format(event, buf).     }     if (buf.length() > 0) {         AnsiElement element = this.styling.         if (element == null) {             // Assume highlighting             element = LEVELS.get(event.getLevel().intLevel()).             element = (element != null) ? element : AnsiColor.GREEN.         }         appendAnsiString(toAppendTo, buf.toString(), element).     } }
false;protected;3;4;;protected void appendAnsiString(StringBuilder toAppendTo, String in, AnsiElement element) {     toAppendTo.append(AnsiOutput.toString(element, in)). }
