commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Override public void beforeInitialize() { }
false;public;3;9;;@Override public void initialize(LoggingInitializationContext initializationContext, String configLocation, LogFile logFile) {     if (StringUtils.hasLength(configLocation)) {         initializeWithSpecificConfig(initializationContext, configLocation, logFile).         return.     }     initializeWithConventions(initializationContext, logFile). }
false;private;3;6;;private void initializeWithSpecificConfig(LoggingInitializationContext initializationContext, String configLocation, LogFile logFile) {     configLocation = SystemPropertyUtils.resolvePlaceholders(configLocation).     loadConfiguration(initializationContext, configLocation, logFile). }
false;private;2;17;;private void initializeWithConventions(LoggingInitializationContext initializationContext, LogFile logFile) {     String config = getSelfInitializationConfig().     if (config != null && logFile == null) {         // self initialization has occurred, reinitialize in case of property changes         reinitialize(initializationContext).         return.     }     if (config == null) {         config = getSpringInitializationConfig().     }     if (config != null) {         loadConfiguration(initializationContext, config, logFile).         return.     }     loadDefaults(initializationContext, logFile). }
true;protected;0;3;/**  * Return any self initialization config that has been applied. By default this method  * checks {@link #getStandardConfigLocations()} and assumes that any file that exists  * will have been applied.  * @return the self initialization config or {@code null}  */ ;/**  * Return any self initialization config that has been applied. By default this method  * checks {@link #getStandardConfigLocations()} and assumes that any file that exists  * will have been applied.  * @return the self initialization config or {@code null}  */ protected String getSelfInitializationConfig() {     return findConfig(getStandardConfigLocations()). }
true;protected;0;3;/**  * Return any spring specific initialization config that should be applied. By default  * this method checks {@link #getSpringConfigLocations()}.  * @return the spring initialization config or {@code null}  */ ;/**  * Return any spring specific initialization config that should be applied. By default  * this method checks {@link #getSpringConfigLocations()}.  * @return the spring initialization config or {@code null}  */ protected String getSpringInitializationConfig() {     return findConfig(getSpringConfigLocations()). }
false;private;1;10;;private String findConfig(String[] locations) {     for (String location : locations) {         ClassPathResource resource = new ClassPathResource(location, this.classLoader).         if (resource.exists()) {             return "classpath:" + location.         }     }     return null. }
true;protected,abstract;0;1;/**  * Return the standard config locations for this system.  * @return the standard config locations  * @see #getSelfInitializationConfig()  */ ;/**  * Return the standard config locations for this system.  * @return the standard config locations  * @see #getSelfInitializationConfig()  */ protected abstract String[] getStandardConfigLocations().
true;protected;0;10;/**  * Return the spring config locations for this system. By default this method returns  * a set of locations based on {@link #getStandardConfigLocations()}.  * @return the spring config locations  * @see #getSpringInitializationConfig()  */ ;/**  * Return the spring config locations for this system. By default this method returns  * a set of locations based on {@link #getStandardConfigLocations()}.  * @return the spring config locations  * @see #getSpringInitializationConfig()  */ protected String[] getSpringConfigLocations() {     String[] locations = getStandardConfigLocations().     for (int i = 0. i < locations.length. i++) {         String extension = StringUtils.getFilenameExtension(locations[i]).         locations[i] = locations[i].substring(0, locations[i].length() - extension.length() - 1) + "-spring." + extension.     }     return locations. }
true;protected,abstract;2;2;/**  * Load sensible defaults for the logging system.  * @param initializationContext the logging initialization context  * @param logFile the file to load or {@code null} if no log file is to be written  */ ;/**  * Load sensible defaults for the logging system.  * @param initializationContext the logging initialization context  * @param logFile the file to load or {@code null} if no log file is to be written  */ protected abstract void loadDefaults(LoggingInitializationContext initializationContext, LogFile logFile).
true;protected,abstract;3;3;/**  * Load a specific configuration.  * @param initializationContext the logging initialization context  * @param location the location of the configuration to load (never {@code null})  * @param logFile the file to load or {@code null} if no log file is to be written  */ ;/**  * Load a specific configuration.  * @param initializationContext the logging initialization context  * @param location the location of the configuration to load (never {@code null})  * @param logFile the file to load or {@code null} if no log file is to be written  */ protected abstract void loadConfiguration(LoggingInitializationContext initializationContext, String location, LogFile logFile).
true;protected;1;2;/**  * Reinitialize the logging system if required. Called when  * {@link #getSelfInitializationConfig()} is used and the log file hasn't changed. May  * be used to reload configuration (for example to pick up additional System  * properties).  * @param initializationContext the logging initialization context  */ ;/**  * Reinitialize the logging system if required. Called when  * {@link #getSelfInitializationConfig()} is used and the log file hasn't changed. May  * be used to reload configuration (for example to pick up additional System  * properties).  * @param initializationContext the logging initialization context  */ protected void reinitialize(LoggingInitializationContext initializationContext) { }
false;protected,final;0;3;;protected final ClassLoader getClassLoader() {     return this.classLoader. }
false;protected,final;1;7;;protected final String getPackagedConfigFile(String fileName) {     String defaultPath = ClassUtils.getPackageName(getClass()).     defaultPath = defaultPath.replace('.', '/').     defaultPath = defaultPath + "/" + fileName.     defaultPath = "classpath:" + defaultPath.     return defaultPath. }
false;protected,final;2;3;;protected final void applySystemProperties(Environment environment, LogFile logFile) {     new LoggingSystemProperties(environment).apply(logFile). }
false;public;2;8;;public void map(LogLevel system, T nativeLevel) {     if (!this.systemToNative.containsKey(system)) {         this.systemToNative.put(system, nativeLevel).     }     if (!this.nativeToSystem.containsKey(nativeLevel)) {         this.nativeToSystem.put(nativeLevel, system).     } }
false;public;1;3;;public LogLevel convertNativeToSystem(T level) {     return this.nativeToSystem.get(level). }
false;public;1;3;;public T convertSystemToNative(LogLevel level) {     return this.systemToNative.get(level). }
false;public;0;3;;public Set<LogLevel> getSupported() {     return new LinkedHashSet<>(this.nativeToSystem.values()). }
