commented;modifiers;parameterAmount;loc;comment;code
false;private;1;9;;private void addServletContextInitializerBeans(ListableBeanFactory beanFactory) {     for (Class<? extends ServletContextInitializer> initializerType : this.initializerTypes) {         for (Entry<String, ? extends ServletContextInitializer> initializerBean : getOrderedBeansOfType(beanFactory, initializerType)) {             addServletContextInitializerBean(initializerBean.getKey(), initializerBean.getValue(), beanFactory).         }     } }
false;private;3;29;;private void addServletContextInitializerBean(String beanName, ServletContextInitializer initializer, ListableBeanFactory beanFactory) {     if (initializer instanceof ServletRegistrationBean) {         Servlet source = ((ServletRegistrationBean<?>) initializer).getServlet().         addServletContextInitializerBean(Servlet.class, beanName, initializer, beanFactory, source).     } else if (initializer instanceof FilterRegistrationBean) {         Filter source = ((FilterRegistrationBean<?>) initializer).getFilter().         addServletContextInitializerBean(Filter.class, beanName, initializer, beanFactory, source).     } else if (initializer instanceof DelegatingFilterProxyRegistrationBean) {         String source = ((DelegatingFilterProxyRegistrationBean) initializer).getTargetBeanName().         addServletContextInitializerBean(Filter.class, beanName, initializer, beanFactory, source).     } else if (initializer instanceof ServletListenerRegistrationBean) {         EventListener source = ((ServletListenerRegistrationBean<?>) initializer).getListener().         addServletContextInitializerBean(EventListener.class, beanName, initializer, beanFactory, source).     } else {         addServletContextInitializerBean(ServletContextInitializer.class, beanName, initializer, beanFactory, initializer).     } }
false;private;5;16;;private void addServletContextInitializerBean(Class<?> type, String beanName, ServletContextInitializer initializer, ListableBeanFactory beanFactory, Object source) {     this.initializers.add(type, initializer).     if (source != null) {         // Mark the underlying source as seen in case it wraps an existing bean         this.seen.add(source).     }     if (logger.isTraceEnabled()) {         String resourceDescription = getResourceDescription(beanName, beanFactory).         int order = getOrder(initializer).         logger.trace("Added existing " + type.getSimpleName() + " initializer bean '" + beanName + "'. order=" + order + ", resource=" + resourceDescription).     } }
false;private;2;8;;private String getResourceDescription(String beanName, ListableBeanFactory beanFactory) {     if (beanFactory instanceof BeanDefinitionRegistry) {         BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory.         return registry.getBeanDefinition(beanName).getResourceDescription().     }     return "unknown". }
false;protected;1;14;;@SuppressWarnings("unchecked") protected void addAdaptableBeans(ListableBeanFactory beanFactory) {     MultipartConfigElement multipartConfig = getMultipartConfig(beanFactory).     addAsRegistrationBean(beanFactory, Servlet.class, new ServletRegistrationBeanAdapter(multipartConfig)).     addAsRegistrationBean(beanFactory, Filter.class, new FilterRegistrationBeanAdapter()).     for (Class<?> listenerType : ServletListenerRegistrationBean.getSupportedTypes()) {         addAsRegistrationBean(beanFactory, EventListener.class, (Class<EventListener>) listenerType, new ServletListenerRegistrationBeanAdapter()).     } }
false;private;1;5;;private MultipartConfigElement getMultipartConfig(ListableBeanFactory beanFactory) {     List<Entry<String, MultipartConfigElement>> beans = getOrderedBeansOfType(beanFactory, MultipartConfigElement.class).     return beans.isEmpty() ? null : beans.get(0).getValue(). }
false;protected;3;4;;protected <T> void addAsRegistrationBean(ListableBeanFactory beanFactory, Class<T> type, RegistrationBeanAdapter<T> adapter) {     addAsRegistrationBean(beanFactory, type, type, adapter). }
false;private;4;23;;private <T, B extends T> void addAsRegistrationBean(ListableBeanFactory beanFactory, Class<T> type, Class<B> beanType, RegistrationBeanAdapter<T> adapter) {     List<Map.Entry<String, B>> entries = getOrderedBeansOfType(beanFactory, beanType, this.seen).     for (Entry<String, B> entry : entries) {         String beanName = entry.getKey().         B bean = entry.getValue().         if (this.seen.add(bean)) {             // One that we haven't already seen             RegistrationBean registration = adapter.createRegistrationBean(beanName, bean, entries.size()).             int order = getOrder(bean).             registration.setOrder(order).             this.initializers.add(type, registration).             if (logger.isTraceEnabled()) {                 logger.trace("Created " + type.getSimpleName() + " initializer for bean '" + beanName + "'. order=" + order + ", resource=" + getResourceDescription(beanName, beanFactory)).             }         }     } }
false;public;1;4;;@Override public int getOrder(Object obj) {     return super.getOrder(obj). }
false;private;1;8;;private int getOrder(Object value) {     return new AnnotationAwareOrderComparator() {          @Override         public int getOrder(Object obj) {             return super.getOrder(obj).         }     }.getOrder(value). }
false;private;2;4;;private <T> List<Entry<String, T>> getOrderedBeansOfType(ListableBeanFactory beanFactory, Class<T> type) {     return getOrderedBeansOfType(beanFactory, type, Collections.emptySet()). }
false;private;3;17;;private <T> List<Entry<String, T>> getOrderedBeansOfType(ListableBeanFactory beanFactory, Class<T> type, Set<?> excludes) {     String[] names = beanFactory.getBeanNamesForType(type, true, false).     Map<String, T> map = new LinkedHashMap<>().     for (String name : names) {         if (!excludes.contains(name) && !ScopedProxyUtils.isScopedTarget(name)) {             T bean = beanFactory.getBean(name, type).             if (!excludes.contains(bean)) {                 map.put(name, bean).             }         }     }     List<Entry<String, T>> beans = new ArrayList<>(map.entrySet()).     beans.sort((o1, o2) -> AnnotationAwareOrderComparator.INSTANCE.compare(o1.getValue(), o2.getValue())).     return beans. }
false;private;1;9;;private void logMappings(MultiValueMap<Class<?>, ServletContextInitializer> initializers) {     if (logger.isDebugEnabled()) {         logMappings("filters", initializers, Filter.class, FilterRegistrationBean.class).         logMappings("servlets", initializers, Servlet.class, ServletRegistrationBean.class).     } }
false;private;4;11;;private void logMappings(String name, MultiValueMap<Class<?>, ServletContextInitializer> initializers, Class<?> type, Class<? extends RegistrationBean> registrationType) {     List<ServletContextInitializer> registrations = new ArrayList<>().     registrations.addAll(initializers.getOrDefault(registrationType, Collections.emptyList())).     registrations.addAll(initializers.getOrDefault(type, Collections.emptyList())).     String info = registrations.stream().map(Object::toString).collect(Collectors.joining(", ")).     logger.debug("Mapping " + name + ": " + info). }
false;public;0;4;;@Override public Iterator<ServletContextInitializer> iterator() {     return this.sortedList.iterator(). }
false;public;0;4;;@Override public int size() {     return this.sortedList.size(). }
false;;3;2;;RegistrationBean createRegistrationBean(String name, T source, int totalNumberOfSourceBeans).
false;public;3;13;;@Override public RegistrationBean createRegistrationBean(String name, Servlet source, int totalNumberOfSourceBeans) {     String url = (totalNumberOfSourceBeans != 1) ? "/" + name + "/" : "/".     if (name.equals(DISPATCHER_SERVLET_NAME)) {         // always map the main dispatcherServlet to "/"         url = "/".     }     ServletRegistrationBean<Servlet> bean = new ServletRegistrationBean<>(source, url).     bean.setName(name).     bean.setMultipartConfig(this.multipartConfig).     return bean. }
false;public;3;7;;@Override public RegistrationBean createRegistrationBean(String name, Filter source, int totalNumberOfSourceBeans) {     FilterRegistrationBean<Filter> bean = new FilterRegistrationBean<>(source).     bean.setName(name).     return bean. }
false;public;3;5;;@Override public RegistrationBean createRegistrationBean(String name, EventListener source, int totalNumberOfSourceBeans) {     return new ServletListenerRegistrationBean<>(source). }
