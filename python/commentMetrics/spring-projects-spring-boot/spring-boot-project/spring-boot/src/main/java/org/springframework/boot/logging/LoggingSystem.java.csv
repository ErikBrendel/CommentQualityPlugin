commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;0;1;/**  * Reset the logging system to be limit output. This method may be called before  * {@link #initialize(LoggingInitializationContext, String, LogFile)} to reduce  * logging noise until the system has been fully initialized.  */ ;/**  * Reset the logging system to be limit output. This method may be called before  * {@link #initialize(LoggingInitializationContext, String, LogFile)} to reduce  * logging noise until the system has been fully initialized.  */ public abstract void beforeInitialize().
true;public;3;3;/**  * Fully initialize the logging system.  * @param initializationContext the logging initialization context  * @param configLocation a log configuration location or {@code null} if default  * initialization is required  * @param logFile the log output file that should be written or {@code null} for  * console only output  */ ;/**  * Fully initialize the logging system.  * @param initializationContext the logging initialization context  * @param configLocation a log configuration location or {@code null} if default  * initialization is required  * @param logFile the log output file that should be written or {@code null} for  * console only output  */ public void initialize(LoggingInitializationContext initializationContext, String configLocation, LogFile logFile) { }
true;public;0;2;/**  * Clean up the logging system. The default implementation does nothing. Subclasses  * should override this method to perform any logging system-specific cleanup.  */ ;/**  * Clean up the logging system. The default implementation does nothing. Subclasses  * should override this method to perform any logging system-specific cleanup.  */ public void cleanUp() { }
true;public;0;3;/**  * Returns a {@link Runnable} that can handle shutdown of this logging system when the  * JVM exits. The default implementation returns {@code null}, indicating that no  * shutdown is required.  * @return the shutdown handler, or {@code null}  */ ;/**  * Returns a {@link Runnable} that can handle shutdown of this logging system when the  * JVM exits. The default implementation returns {@code null}, indicating that no  * shutdown is required.  * @return the shutdown handler, or {@code null}  */ public Runnable getShutdownHandler() {     return null. }
true;public;0;3;/**  * Returns a set of the {@link LogLevel LogLevels} that are actually supported by the  * logging system.  * @return the supported levels  */ ;/**  * Returns a set of the {@link LogLevel LogLevels} that are actually supported by the  * logging system.  * @return the supported levels  */ public Set<LogLevel> getSupportedLogLevels() {     return EnumSet.allOf(LogLevel.class). }
true;public;2;3;/**  * Sets the logging level for a given logger.  * @param loggerName the name of the logger to set ({@code null} can be used for the  * root logger).  * @param level the log level ({@code null} can be used to remove any custom level for  * the logger and use the default configuration instead)  */ ;/**  * Sets the logging level for a given logger.  * @param loggerName the name of the logger to set ({@code null} can be used for the  * root logger).  * @param level the log level ({@code null} can be used to remove any custom level for  * the logger and use the default configuration instead)  */ public void setLogLevel(String loggerName, LogLevel level) {     throw new UnsupportedOperationException("Unable to set log level"). }
true;public;0;3;/**  * Returns a collection of the current configuration for all a {@link LoggingSystem}'s  * loggers.  * @return the current configurations  * @since 1.5.0  */ ;/**  * Returns a collection of the current configuration for all a {@link LoggingSystem}'s  * loggers.  * @return the current configurations  * @since 1.5.0  */ public List<LoggerConfiguration> getLoggerConfigurations() {     throw new UnsupportedOperationException("Unable to get logger configurations"). }
true;public;1;3;/**  * Returns the current configuration for a {@link LoggingSystem}'s logger.  * @param loggerName the name of the logger  * @return the current configuration  * @since 1.5.0  */ ;/**  * Returns the current configuration for a {@link LoggingSystem}'s logger.  * @param loggerName the name of the logger  * @return the current configuration  * @since 1.5.0  */ public LoggerConfiguration getLoggerConfiguration(String loggerName) {     throw new UnsupportedOperationException("Unable to get logger configuration"). }
true;public,static;1;14;/**  * Detect and return the logging system in use. Supports Logback and Java Logging.  * @param classLoader the classloader  * @return the logging system  */ ;/**  * Detect and return the logging system in use. Supports Logback and Java Logging.  * @param classLoader the classloader  * @return the logging system  */ public static LoggingSystem get(ClassLoader classLoader) {     String loggingSystem = System.getProperty(SYSTEM_PROPERTY).     if (StringUtils.hasLength(loggingSystem)) {         if (NONE.equals(loggingSystem)) {             return new NoOpLoggingSystem().         }         return get(classLoader, loggingSystem).     }     return SYSTEMS.entrySet().stream().filter((entry) -> ClassUtils.isPresent(entry.getKey(), classLoader)).map((entry) -> get(classLoader, entry.getValue())).findFirst().orElseThrow(() -> new IllegalStateException("No suitable logging system located")). }
false;private,static;2;10;;private static LoggingSystem get(ClassLoader classLoader, String loggingSystemClass) {     try {         Class<?> systemClass = ClassUtils.forName(loggingSystemClass, classLoader).         return (LoggingSystem) systemClass.getConstructor(ClassLoader.class).newInstance(classLoader).     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
false;public;0;4;;@Override public void beforeInitialize() { }
false;public;2;4;;@Override public void setLogLevel(String loggerName, LogLevel level) { }
false;public;0;4;;@Override public List<LoggerConfiguration> getLoggerConfigurations() {     return Collections.emptyList(). }
false;public;1;4;;@Override public LoggerConfiguration getLoggerConfiguration(String loggerName) {     return null. }
