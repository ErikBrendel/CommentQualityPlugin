commented;modifiers;parameterAmount;loc;comment;code
false;public;1;15;;@Override public HttpServer apply(HttpServer server) {     try {         return server.secure((contextSpec) -> {             SslProvider.DefaultConfigurationSpec spec = contextSpec.sslContext(getContextBuilder()).             if (this.http2 != null && this.http2.isEnabled()) {                 spec.defaultConfiguration(SslProvider.DefaultConfigurationType.H2).             }         }).     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
false;protected;0;18;;protected SslContextBuilder getContextBuilder() {     SslContextBuilder builder = SslContextBuilder.forServer(getKeyManagerFactory(this.ssl, this.sslStoreProvider)).trustManager(getTrustManagerFactory(this.ssl, this.sslStoreProvider)).     if (this.ssl.getEnabledProtocols() != null) {         builder.protocols(this.ssl.getEnabledProtocols()).     }     if (this.ssl.getCiphers() != null) {         builder.ciphers(Arrays.asList(this.ssl.getCiphers())).     }     if (this.ssl.getClientAuth() == Ssl.ClientAuth.NEED) {         builder.clientAuth(ClientAuth.REQUIRE).     } else if (this.ssl.getClientAuth() == Ssl.ClientAuth.WANT) {         builder.clientAuth(ClientAuth.OPTIONAL).     }     return builder. }
false;protected;2;18;;protected KeyManagerFactory getKeyManagerFactory(Ssl ssl, SslStoreProvider sslStoreProvider) {     try {         KeyStore keyStore = getKeyStore(ssl, sslStoreProvider).         KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()).         char[] keyPassword = (ssl.getKeyPassword() != null) ? ssl.getKeyPassword().toCharArray() : null.         if (keyPassword == null && ssl.getKeyStorePassword() != null) {             keyPassword = ssl.getKeyStorePassword().toCharArray().         }         keyManagerFactory.init(keyStore, keyPassword).         return keyManagerFactory.     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
false;private;2;8;;private KeyStore getKeyStore(Ssl ssl, SslStoreProvider sslStoreProvider) throws Exception {     if (sslStoreProvider != null) {         return sslStoreProvider.getKeyStore().     }     return loadKeyStore(ssl.getKeyStoreType(), ssl.getKeyStoreProvider(), ssl.getKeyStore(), ssl.getKeyStorePassword()). }
false;protected;2;13;;protected TrustManagerFactory getTrustManagerFactory(Ssl ssl, SslStoreProvider sslStoreProvider) {     try {         KeyStore store = getTrustStore(ssl, sslStoreProvider).         TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()).         trustManagerFactory.init(store).         return trustManagerFactory.     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
false;private;2;8;;private KeyStore getTrustStore(Ssl ssl, SslStoreProvider sslStoreProvider) throws Exception {     if (sslStoreProvider != null) {         return sslStoreProvider.getTrustStore().     }     return loadTrustStore(ssl.getTrustStoreType(), ssl.getTrustStoreProvider(), ssl.getTrustStore(), ssl.getTrustStorePassword()). }
false;private;4;5;;private KeyStore loadKeyStore(String type, String provider, String resource, String password) throws Exception {     return loadStore(type, provider, resource, password). }
false;private;4;7;;private KeyStore loadTrustStore(String type, String provider, String resource, String password) throws Exception {     if (resource == null) {         return null.     }     return loadStore(type, provider, resource, password). }
false;private;4;17;;private KeyStore loadStore(String type, String provider, String resource, String password) throws Exception {     type = (type != null) ? type : "JKS".     KeyStore store = (provider != null) ? KeyStore.getInstance(type, provider) : KeyStore.getInstance(type).     try {         URL url = ResourceUtils.getURL(resource).         store.load(url.openStream(), (password != null) ? password.toCharArray() : null).         return store.     } catch (Exception ex) {         throw new WebServerException("Could not load key store '" + resource + "'", ex).     } }
