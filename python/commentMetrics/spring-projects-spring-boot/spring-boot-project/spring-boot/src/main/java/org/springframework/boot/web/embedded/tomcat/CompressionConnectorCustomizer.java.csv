commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@Override public void customize(Connector connector) {     if (this.compression != null && this.compression.getEnabled()) {         ProtocolHandler handler = connector.getProtocolHandler().         if (handler instanceof AbstractHttp11Protocol) {             customize((AbstractHttp11Protocol<?>) handler).         }         for (UpgradeProtocol upgradeProtocol : connector.findUpgradeProtocols()) {             if (upgradeProtocol instanceof Http2Protocol) {                 customize((Http2Protocol) upgradeProtocol).             }         }     } }
false;private;1;9;;private void customize(Http2Protocol protocol) {     Compression compression = this.compression.     protocol.setCompression("on").     protocol.setCompressionMinSize(getMinResponseSize(compression)).     protocol.setCompressibleMimeType(getMimeTypes(compression)).     if (this.compression.getExcludedUserAgents() != null) {         protocol.setNoCompressionUserAgents(getExcludedUserAgents()).     } }
false;private;1;9;;private void customize(AbstractHttp11Protocol<?> protocol) {     Compression compression = this.compression.     protocol.setCompression("on").     protocol.setCompressionMinSize(getMinResponseSize(compression)).     protocol.setCompressibleMimeType(getMimeTypes(compression)).     if (this.compression.getExcludedUserAgents() != null) {         protocol.setNoCompressionUserAgents(getExcludedUserAgents()).     } }
false;private;1;3;;private int getMinResponseSize(Compression compression) {     return (int) compression.getMinResponseSize().toBytes(). }
false;private;1;3;;private String getMimeTypes(Compression compression) {     return StringUtils.arrayToCommaDelimitedString(compression.getMimeTypes()). }
false;private;0;4;;private String getExcludedUserAgents() {     return StringUtils.arrayToCommaDelimitedString(this.compression.getExcludedUserAgents()). }
