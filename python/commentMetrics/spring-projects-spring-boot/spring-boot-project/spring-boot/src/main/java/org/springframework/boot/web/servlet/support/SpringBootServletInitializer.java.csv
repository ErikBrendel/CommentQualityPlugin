commented;modifiers;parameterAmount;loc;comment;code
true;protected,final;1;3;/**  * Set if the {@link ErrorPageFilter} should be registered. Set to {@code false} if  * error page mappings should be handled via the server and not Spring Boot.  * @param registerErrorPageFilter if the {@link ErrorPageFilter} should be registered.  */ ;/**  * Set if the {@link ErrorPageFilter} should be registered. Set to {@code false} if  * error page mappings should be handled via the server and not Spring Boot.  * @param registerErrorPageFilter if the {@link ErrorPageFilter} should be registered.  */ protected final void setRegisterErrorPageFilter(boolean registerErrorPageFilter) {     this.registerErrorPageFilter = registerErrorPageFilter. }
false;public;1;4;;@Override public void contextInitialized(ServletContextEvent event) { // no-op because the application context is already initialized }
false;public;1;21;;@Override public void onStartup(ServletContext servletContext) throws ServletException {     // Logger initialization is deferred in case an ordered     // LogServletContextInitializer is being used     this.logger = LogFactory.getLog(getClass()).     WebApplicationContext rootAppContext = createRootApplicationContext(servletContext).     if (rootAppContext != null) {         servletContext.addListener(new ContextLoaderListener(rootAppContext) {              @Override             public void contextInitialized(ServletContextEvent event) {             // no-op because the application context is already initialized             }         }).     } else {         this.logger.debug("No ContextLoaderListener registered, as " + "createRootApplicationContext() did not " + "return an application context").     } }
false;protected;1;31;;protected WebApplicationContext createRootApplicationContext(ServletContext servletContext) {     SpringApplicationBuilder builder = createSpringApplicationBuilder().     builder.main(getClass()).     ApplicationContext parent = getExistingRootWebApplicationContext(servletContext).     if (parent != null) {         this.logger.info("Root context already created (using as parent).").         servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, null).         builder.initializers(new ParentContextApplicationContextInitializer(parent)).     }     builder.initializers(new ServletContextApplicationContextInitializer(servletContext)).     builder.contextClass(AnnotationConfigServletWebServerApplicationContext.class).     builder = configure(builder).     builder.listeners(new WebEnvironmentPropertySourceInitializer(servletContext)).     SpringApplication application = builder.build().     if (application.getAllSources().isEmpty() && AnnotationUtils.findAnnotation(getClass(), Configuration.class) != null) {         application.addPrimarySources(Collections.singleton(getClass())).     }     Assert.state(!application.getAllSources().isEmpty(), "No SpringApplication sources have been defined. Either override the " + "configure method or add an @Configuration annotation").     // Ensure error pages are registered     if (this.registerErrorPageFilter) {         application.addPrimarySources(Collections.singleton(ErrorPageFilterConfiguration.class)).     }     return run(application). }
true;protected;0;3;/**  * Returns the {@code SpringApplicationBuilder} that is used to configure and create  * the {@link SpringApplication}. The default implementation returns a new  * {@code SpringApplicationBuilder} in its default state.  * @return the {@code SpringApplicationBuilder}.  * @since 1.3.0  */ ;/**  * Returns the {@code SpringApplicationBuilder} that is used to configure and create  * the {@link SpringApplication}. The default implementation returns a new  * {@code SpringApplicationBuilder} in its default state.  * @return the {@code SpringApplicationBuilder}.  * @since 1.3.0  */ protected SpringApplicationBuilder createSpringApplicationBuilder() {     return new SpringApplicationBuilder(). }
true;protected;1;3;/**  * Called to run a fully configured {@link SpringApplication}.  * @param application the application to run  * @return the {@link WebApplicationContext}  */ ;/**  * Called to run a fully configured {@link SpringApplication}.  * @param application the application to run  * @return the {@link WebApplicationContext}  */ protected WebApplicationContext run(SpringApplication application) {     return (WebApplicationContext) application.run(). }
false;private;1;9;;private ApplicationContext getExistingRootWebApplicationContext(ServletContext servletContext) {     Object context = servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE).     if (context instanceof ApplicationContext) {         return (ApplicationContext) context.     }     return null. }
true;protected;1;3;/**  * Configure the application. Normally all you would need to do is to add sources  * (e.g. config classes) because other settings have sensible defaults. You might  * choose (for instance) to add default command line arguments, or set an active  * Spring profile.  * @param builder a builder for the application context  * @return the application builder  * @see SpringApplicationBuilder  */ ;/**  * Configure the application. Normally all you would need to do is to add sources  * (e.g. config classes) because other settings have sensible defaults. You might  * choose (for instance) to add default command line arguments, or set an active  * Spring profile.  * @param builder a builder for the application context  * @return the application builder  * @see SpringApplicationBuilder  */ protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {     return builder. }
false;public;1;8;;@Override public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {     ConfigurableEnvironment environment = event.getEnvironment().     if (environment instanceof ConfigurableWebEnvironment) {         ((ConfigurableWebEnvironment) environment).initPropertySources(this.servletContext, null).     } }
false;public;0;4;;@Override public int getOrder() {     return Ordered.HIGHEST_PRECEDENCE. }
