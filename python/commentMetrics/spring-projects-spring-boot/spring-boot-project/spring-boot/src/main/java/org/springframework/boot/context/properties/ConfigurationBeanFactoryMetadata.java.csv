commented;modifiers;parameterAmount;loc;comment;code
false;public;1;13;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {     this.beanFactory = beanFactory.     for (String name : beanFactory.getBeanDefinitionNames()) {         BeanDefinition definition = beanFactory.getBeanDefinition(name).         String method = definition.getFactoryMethodName().         String bean = definition.getFactoryBeanName().         if (method != null && bean != null) {             this.beansFactoryMetadata.put(name, new FactoryMetadata(bean, method)).         }     } }
false;public;1;10;;public <A extends Annotation> Map<String, Object> getBeansWithFactoryAnnotation(Class<A> type) {     Map<String, Object> result = new HashMap<>().     for (String name : this.beansFactoryMetadata.keySet()) {         if (findFactoryAnnotation(name, type) != null) {             result.put(name, this.beanFactory.getBean(name)).         }     }     return result. }
false;public;2;5;;public <A extends Annotation> A findFactoryAnnotation(String beanName, Class<A> type) {     Method method = findFactoryMethod(beanName).     return (method != null) ? AnnotationUtils.findAnnotation(method, type) : null. }
false;public;1;18;;public Method findFactoryMethod(String beanName) {     if (!this.beansFactoryMetadata.containsKey(beanName)) {         return null.     }     AtomicReference<Method> found = new AtomicReference<>(null).     FactoryMetadata metadata = this.beansFactoryMetadata.get(beanName).     Class<?> factoryType = this.beanFactory.getType(metadata.getBean()).     String factoryMethod = metadata.getMethod().     if (ClassUtils.isCglibProxyClass(factoryType)) {         factoryType = factoryType.getSuperclass().     }     ReflectionUtils.doWithMethods(factoryType, (method) -> {         if (method.getName().equals(factoryMethod)) {             found.compareAndSet(null, method).         }     }).     return found.get(). }
false;public;0;3;;public String getBean() {     return this.bean. }
false;public;0;3;;public String getMethod() {     return this.method. }
