commented;modifiers;parameterAmount;loc;comment;code
false;private;0;12;;private Object createNativePage() {     try {         if (ClassUtils.isPresent(ERROR_PAGE_CLASS, null)) {             return BeanUtils.instantiateClass(ClassUtils.forName(ERROR_PAGE_CLASS, null)).         }     } catch (ClassNotFoundException | LinkageError ex) {     // Swallow and continue     }     return null. }
false;public;1;19;;public void addToContext(Context context) {     Assert.state(this.nativePage != null, "No Tomcat 8 detected so no native error page exists").     if (ClassUtils.isPresent(ERROR_PAGE_CLASS, null)) {         org.apache.tomcat.util.descriptor.web.ErrorPage errorPage = (org.apache.tomcat.util.descriptor.web.ErrorPage) this.nativePage.         errorPage.setLocation(this.location).         errorPage.setErrorCode(this.errorCode).         errorPage.setExceptionType(this.exceptionType).         context.addErrorPage(errorPage).     } else {         callMethod(this.nativePage, "setLocation", this.location, String.class).         callMethod(this.nativePage, "setErrorCode", this.errorCode, int.class).         callMethod(this.nativePage, "setExceptionType", this.exceptionType, String.class).         callMethod(context, "addErrorPage", this.nativePage, this.nativePage.getClass()).     } }
false;private;4;4;;private void callMethod(Object target, String name, Object value, Class<?> type) {     Method method = ReflectionUtils.findMethod(target.getClass(), name, type).     ReflectionUtils.invokeMethod(method, target, value). }
