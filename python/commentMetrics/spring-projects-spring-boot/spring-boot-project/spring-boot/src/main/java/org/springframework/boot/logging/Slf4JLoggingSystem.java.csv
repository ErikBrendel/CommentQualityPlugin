commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void beforeInitialize() {     super.beforeInitialize().     configureJdkLoggingBridgeHandler(). }
false;public;0;6;;@Override public void cleanUp() {     if (isBridgeHandlerAvailable()) {         removeJdkLoggingBridgeHandler().     } }
false;protected;3;8;;@Override protected void loadConfiguration(LoggingInitializationContext initializationContext, String location, LogFile logFile) {     Assert.notNull(location, "Location must not be null").     if (initializationContext != null) {         applySystemProperties(initializationContext.getEnvironment(), logFile).     } }
false;private;0;11;;private void configureJdkLoggingBridgeHandler() {     try {         if (isBridgeJulIntoSlf4j()) {             removeJdkLoggingBridgeHandler().             SLF4JBridgeHandler.install().         }     } catch (Throwable ex) {     // Ignore. No java.util.logging bridge is installed.     } }
true;protected,final;0;3;/**  * Return whether bridging JUL into SLF4J or not.  * @return whether bridging JUL into SLF4J or not  * @since 2.0.4  */ ;/**  * Return whether bridging JUL into SLF4J or not.  * @return whether bridging JUL into SLF4J or not  * @since 2.0.4  */ protected final boolean isBridgeJulIntoSlf4j() {     return isBridgeHandlerAvailable() && isJulUsingASingleConsoleHandlerAtMost(). }
false;protected,final;0;3;;protected final boolean isBridgeHandlerAvailable() {     return ClassUtils.isPresent(BRIDGE_HANDLER, getClassLoader()). }
false;private;0;6;;private boolean isJulUsingASingleConsoleHandlerAtMost() {     Logger rootLogger = LogManager.getLogManager().getLogger("").     Handler[] handlers = rootLogger.getHandlers().     return handlers.length == 0 || (handlers.length == 1 && handlers[0] instanceof ConsoleHandler). }
false;private;0;9;;private void removeJdkLoggingBridgeHandler() {     try {         removeDefaultRootHandler().         SLF4JBridgeHandler.uninstall().     } catch (Throwable ex) {     // Ignore and continue     } }
false;private;0;12;;private void removeDefaultRootHandler() {     try {         Logger rootLogger = LogManager.getLogManager().getLogger("").         Handler[] handlers = rootLogger.getHandlers().         if (handlers.length == 1 && handlers[0] instanceof ConsoleHandler) {             rootLogger.removeHandler(handlers[0]).         }     } catch (Throwable ex) {     // Ignore and continue     } }
