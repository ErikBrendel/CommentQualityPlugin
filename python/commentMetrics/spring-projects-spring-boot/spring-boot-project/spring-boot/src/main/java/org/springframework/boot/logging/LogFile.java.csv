commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Apply log file details to {@code LOG_PATH} and {@code LOG_FILE} system properties.  */ ;/**  * Apply log file details to {@code LOG_PATH} and {@code LOG_FILE} system properties.  */ public void applyToSystemProperties() {     applyTo(System.getProperties()). }
true;public;1;4;/**  * Apply log file details to {@code LOG_PATH} and {@code LOG_FILE} map entries.  * @param properties the properties to apply to  */ ;/**  * Apply log file details to {@code LOG_PATH} and {@code LOG_FILE} map entries.  * @param properties the properties to apply to  */ public void applyTo(Properties properties) {     put(properties, LoggingSystemProperties.LOG_PATH, this.path).     put(properties, LoggingSystemProperties.LOG_FILE, toString()). }
false;private;3;5;;private void put(Properties properties, String key, String value) {     if (StringUtils.hasLength(value)) {         properties.put(key, value).     } }
false;public;0;7;;@Override public String toString() {     if (StringUtils.hasLength(this.file)) {         return this.file.     }     return new File(this.path, "spring.log").getPath(). }
true;public,static;1;10;/**  * Get a {@link LogFile} from the given Spring {@link Environment}.  * @param propertyResolver the {@link PropertyResolver} used to obtain the logging  * properties  * @return a {@link LogFile} or {@code null} if the environment didn't contain any  * suitable properties  */ ;/**  * Get a {@link LogFile} from the given Spring {@link Environment}.  * @param propertyResolver the {@link PropertyResolver} used to obtain the logging  * properties  * @return a {@link LogFile} or {@code null} if the environment didn't contain any  * suitable properties  */ public static LogFile get(PropertyResolver propertyResolver) {     String file = getLogFileProperty(propertyResolver, FILE_NAME_PROPERTY, FILE_PROPERTY).     String path = getLogFileProperty(propertyResolver, FILE_PATH_PROPERTY, PATH_PROPERTY).     if (StringUtils.hasLength(file) || StringUtils.hasLength(path)) {         return new LogFile(file, path).     }     return null. }
false;private,static;3;8;;private static String getLogFileProperty(PropertyResolver propertyResolver, String propertyName, String deprecatedPropertyName) {     String property = propertyResolver.getProperty(propertyName).     if (property != null) {         return property.     }     return propertyResolver.getProperty(deprecatedPropertyName). }
