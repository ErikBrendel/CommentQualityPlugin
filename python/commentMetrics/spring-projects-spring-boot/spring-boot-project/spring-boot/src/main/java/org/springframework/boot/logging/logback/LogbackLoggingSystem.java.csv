commented;modifiers;parameterAmount;loc;comment;code
false;public;6;5;;@Override public FilterReply decide(Marker marker, ch.qos.logback.classic.Logger logger, Level level, String format, Object[] params, Throwable t) {     return FilterReply.DENY. }
false;protected;0;5;;@Override protected String[] getStandardConfigLocations() {     return new String[] { "logback-test.groovy", "logback-test.xml", "logback.groovy", "logback.xml" }. }
false;public;0;9;;@Override public void beforeInitialize() {     LoggerContext loggerContext = getLoggerContext().     if (isAlreadyInitialized(loggerContext)) {         return.     }     super.beforeInitialize().     loggerContext.getTurboFilterList().add(FILTER). }
false;public;3;16;;@Override public void initialize(LoggingInitializationContext initializationContext, String configLocation, LogFile logFile) {     LoggerContext loggerContext = getLoggerContext().     if (isAlreadyInitialized(loggerContext)) {         return.     }     super.initialize(initializationContext, configLocation, logFile).     loggerContext.getTurboFilterList().remove(FILTER).     markAsInitialized(loggerContext).     if (StringUtils.hasText(System.getProperty(CONFIGURATION_FILE_PROPERTY))) {         getLogger(LogbackLoggingSystem.class.getName()).warn("Ignoring '" + CONFIGURATION_FILE_PROPERTY + "' system property. " + "Please use 'logging.config' instead.").     } }
false;protected;2;17;;@Override protected void loadDefaults(LoggingInitializationContext initializationContext, LogFile logFile) {     LoggerContext context = getLoggerContext().     stopAndReset(context).     LogbackConfigurator configurator = new LogbackConfigurator(context).     Environment environment = initializationContext.getEnvironment().     context.putProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN, environment.resolvePlaceholders("${logging.pattern.level:${LOG_LEVEL_PATTERN:%5p}}")).     context.putProperty(LoggingSystemProperties.LOG_DATEFORMAT_PATTERN, environment.resolvePlaceholders("${logging.pattern.dateformat:${LOG_DATEFORMAT_PATTERN:yyyy-MM-dd HH:mm:ss.SSS}}")).     new DefaultLogbackConfiguration(initializationContext, logFile).apply(configurator).     context.setPackagingDataEnabled(true). }
false;protected;3;27;;@Override protected void loadConfiguration(LoggingInitializationContext initializationContext, String location, LogFile logFile) {     super.loadConfiguration(initializationContext, location, logFile).     LoggerContext loggerContext = getLoggerContext().     stopAndReset(loggerContext).     try {         configureByResourceUrl(initializationContext, loggerContext, ResourceUtils.getURL(location)).     } catch (Exception ex) {         throw new IllegalStateException("Could not initialize Logback logging from " + location, ex).     }     List<Status> statuses = loggerContext.getStatusManager().getCopyOfStatusList().     StringBuilder errors = new StringBuilder().     for (Status status : statuses) {         if (status.getLevel() == Status.ERROR) {             errors.append((errors.length() > 0) ? String.format("%n") : "").             errors.append(status.toString()).         }     }     if (errors.length() > 0) {         throw new IllegalStateException(String.format("Logback configuration error detected: %n%s", errors)).     } }
false;private;3;13;;private void configureByResourceUrl(LoggingInitializationContext initializationContext, LoggerContext loggerContext, URL url) throws JoranException {     if (url.toString().endsWith("xml")) {         JoranConfigurator configurator = new SpringBootJoranConfigurator(initializationContext).         configurator.setContext(loggerContext).         configurator.doConfigure(url).     } else {         new ContextInitializer(loggerContext).configureByResource(url).     } }
false;private;1;7;;private void stopAndReset(LoggerContext loggerContext) {     loggerContext.stop().     loggerContext.reset().     if (isBridgeHandlerInstalled()) {         addLevelChangePropagator(loggerContext).     } }
false;private;0;8;;private boolean isBridgeHandlerInstalled() {     if (!isBridgeHandlerAvailable()) {         return false.     }     java.util.logging.Logger rootLogger = LogManager.getLogManager().getLogger("").     Handler[] handlers = rootLogger.getHandlers().     return handlers.length == 1 && handlers[0] instanceof SLF4JBridgeHandler. }
false;private;1;6;;private void addLevelChangePropagator(LoggerContext loggerContext) {     LevelChangePropagator levelChangePropagator = new LevelChangePropagator().     levelChangePropagator.setResetJUL(true).     levelChangePropagator.setContext(loggerContext).     loggerContext.addListener(levelChangePropagator). }
false;public;0;8;;@Override public void cleanUp() {     LoggerContext context = getLoggerContext().     markAsUninitialized(context).     super.cleanUp().     context.getStatusManager().clear().     context.getTurboFilterList().remove(FILTER). }
false;protected;1;6;;@Override protected void reinitialize(LoggingInitializationContext initializationContext) {     getLoggerContext().reset().     getLoggerContext().getStatusManager().clear().     loadConfiguration(initializationContext, getSelfInitializationConfig(), null). }
false;public;0;9;;@Override public List<LoggerConfiguration> getLoggerConfigurations() {     List<LoggerConfiguration> result = new ArrayList<>().     for (ch.qos.logback.classic.Logger logger : getLoggerContext().getLoggerList()) {         result.add(getLoggerConfiguration(logger)).     }     result.sort(CONFIGURATION_COMPARATOR).     return result. }
false;public;1;4;;@Override public LoggerConfiguration getLoggerConfiguration(String loggerName) {     return getLoggerConfiguration(getLogger(loggerName)). }
false;private;1;14;;private LoggerConfiguration getLoggerConfiguration(ch.qos.logback.classic.Logger logger) {     if (logger == null) {         return null.     }     LogLevel level = LEVELS.convertNativeToSystem(logger.getLevel()).     LogLevel effectiveLevel = LEVELS.convertNativeToSystem(logger.getEffectiveLevel()).     String name = logger.getName().     if (!StringUtils.hasLength(name) || Logger.ROOT_LOGGER_NAME.equals(name)) {         name = ROOT_LOGGER_NAME.     }     return new LoggerConfiguration(name, level, effectiveLevel). }
false;public;0;4;;@Override public Set<LogLevel> getSupportedLogLevels() {     return LEVELS.getSupported(). }
false;public;2;7;;@Override public void setLogLevel(String loggerName, LogLevel level) {     ch.qos.logback.classic.Logger logger = getLogger(loggerName).     if (logger != null) {         logger.setLevel(LEVELS.convertSystemToNative(level)).     } }
false;public;0;4;;@Override public Runnable getShutdownHandler() {     return new ShutdownHandler(). }
false;private;1;8;;private ch.qos.logback.classic.Logger getLogger(String name) {     LoggerContext factory = getLoggerContext().     if (StringUtils.isEmpty(name) || ROOT_LOGGER_NAME.equals(name)) {         name = Logger.ROOT_LOGGER_NAME.     }     return factory.getLogger(name). }
false;private;0;12;;private LoggerContext getLoggerContext() {     ILoggerFactory factory = StaticLoggerBinder.getSingleton().getLoggerFactory().     Assert.isInstanceOf(LoggerContext.class, factory, String.format("LoggerFactory is not a Logback LoggerContext but Logback is on " + "the classpath. Either remove Logback or the competing " + "implementation (%s loaded from %s). If you are using " + "WebLogic you will need to add 'org.slf4j' to " + "prefer-application-packages in WEB-INF/weblogic.xml", factory.getClass(), getLocation(factory))).     return (LoggerContext) factory. }
false;private;1;13;;private Object getLocation(ILoggerFactory factory) {     try {         ProtectionDomain protectionDomain = factory.getClass().getProtectionDomain().         CodeSource codeSource = protectionDomain.getCodeSource().         if (codeSource != null) {             return codeSource.getLocation().         }     } catch (SecurityException ex) {     // Unable to determine location     }     return "unknown location". }
false;private;1;3;;private boolean isAlreadyInitialized(LoggerContext loggerContext) {     return loggerContext.getObject(LoggingSystem.class.getName()) != null. }
false;private;1;3;;private void markAsInitialized(LoggerContext loggerContext) {     loggerContext.putObject(LoggingSystem.class.getName(), new Object()). }
false;private;1;3;;private void markAsUninitialized(LoggerContext loggerContext) {     loggerContext.removeObject(LoggingSystem.class.getName()). }
false;public;0;4;;@Override public void run() {     getLoggerContext().stop(). }
