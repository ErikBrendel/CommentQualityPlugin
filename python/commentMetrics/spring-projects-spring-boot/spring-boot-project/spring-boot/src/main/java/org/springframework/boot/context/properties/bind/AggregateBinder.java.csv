commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;1;2;/**  * Determine if recursive binding is supported.  * @param source the configuration property source or {@code null} for all sources.  * @return if recursive binding is supported  */ ;/**  * Determine if recursive binding is supported.  * @param source the configuration property source or {@code null} for all sources.  * @return if recursive binding is supported  */ protected abstract boolean isAllowRecursiveBinding(ConfigurationPropertySource source).
true;public,final;3;10;/**  * Perform binding for the aggregate.  * @param name the configuration property name to bind  * @param target the target to bind  * @param elementBinder an element binder  * @return the bound aggregate or null  */ ;/**  * Perform binding for the aggregate.  * @param name the configuration property name to bind  * @param target the target to bind  * @param elementBinder an element binder  * @return the bound aggregate or null  */ @SuppressWarnings("unchecked") public final Object bind(ConfigurationPropertyName name, Bindable<?> target, AggregateElementBinder elementBinder) {     Object result = bindAggregate(name, target, elementBinder).     Supplier<?> value = target.getValue().     if (result == null || value == null) {         return result.     }     return merge((Supplier<T>) value, (T) result). }
true;protected,abstract;3;2;/**  * Perform the actual aggregate binding.  * @param name the configuration property name to bind  * @param target the target to bind  * @param elementBinder an element binder  * @return the bound result  */ ;/**  * Perform the actual aggregate binding.  * @param name the configuration property name to bind  * @param target the target to bind  * @param elementBinder an element binder  * @return the bound result  */ protected abstract Object bindAggregate(ConfigurationPropertyName name, Bindable<?> target, AggregateElementBinder elementBinder).
true;protected,abstract;2;1;/**  * Merge any additional elements into the existing aggregate.  * @param existing the supplier for the existing value  * @param additional the additional elements to merge  * @return the merged result  */ ;/**  * Merge any additional elements into the existing aggregate.  * @param existing the supplier for the existing value  * @param additional the additional elements to merge  * @return the merged result  */ protected abstract T merge(Supplier<T> existing, T additional).
true;protected,final;0;3;/**  * Return the context being used by this binder.  * @return the context  */ ;/**  * Return the context being used by this binder.  * @return the context  */ protected final Context getContext() {     return this.context. }
false;public;0;6;;public T get() {     if (this.supplied == null) {         this.supplied = this.supplier.get().     }     return this.supplied. }
false;public;0;3;;public boolean wasSupplied() {     return this.supplied != null. }
