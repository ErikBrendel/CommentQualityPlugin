commented;modifiers;parameterAmount;loc;comment;code
false;public;2;10;;@Override public void persistSessions(String deploymentName, Map<String, PersistentSession> sessionData) {     try {         save(sessionData, getSessionFile(deploymentName)).     } catch (Exception ex) {         UndertowServletLogger.ROOT_LOGGER.failedToPersistSessions(ex).     } }
false;private;2;7;;private void save(Map<String, PersistentSession> sessionData, File file) throws IOException {     try (ObjectOutputStream stream = new ObjectOutputStream(new FileOutputStream(file))) {         save(sessionData, stream).     } }
false;private;2;7;;private void save(Map<String, PersistentSession> sessionData, ObjectOutputStream stream) throws IOException {     Map<String, Serializable> session = new LinkedHashMap<>().     sessionData.forEach((key, value) -> session.put(key, new SerializablePersistentSession(value))).     stream.writeObject(session). }
false;public;2;14;;@Override public Map<String, PersistentSession> loadSessionAttributes(String deploymentName, final ClassLoader classLoader) {     try {         File file = getSessionFile(deploymentName).         if (file.exists()) {             return load(file, classLoader).         }     } catch (Exception ex) {         UndertowServletLogger.ROOT_LOGGER.failedtoLoadPersistentSessions(ex).     }     return null. }
false;private;2;7;;private Map<String, PersistentSession> load(File file, ClassLoader classLoader) throws IOException, ClassNotFoundException {     try (ObjectInputStream stream = new ConfigurableObjectInputStream(new FileInputStream(file), classLoader)) {         return load(stream).     } }
false;private;1;13;;private Map<String, PersistentSession> load(ObjectInputStream stream) throws ClassNotFoundException, IOException {     Map<String, SerializablePersistentSession> session = readSession(stream).     long time = System.currentTimeMillis().     Map<String, PersistentSession> result = new LinkedHashMap<>().     session.forEach((key, value) -> {         PersistentSession entrySession = value.getPersistentSession().         if (entrySession.getExpiration().getTime() > time) {             result.put(key, entrySession).         }     }).     return result. }
false;private;1;5;;@SuppressWarnings("unchecked") private Map<String, SerializablePersistentSession> readSession(ObjectInputStream stream) throws ClassNotFoundException, IOException {     return ((Map<String, SerializablePersistentSession>) stream.readObject()). }
false;private;1;6;;private File getSessionFile(String deploymentName) {     if (!this.dir.exists()) {         this.dir.mkdirs().     }     return new File(this.dir, deploymentName + ".session"). }
false;public;1;4;;@Override public void clear(String deploymentName) {     getSessionFile(deploymentName).delete(). }
false;public;0;3;;public PersistentSession getPersistentSession() {     return new PersistentSession(this.expiration, this.sessionData). }
