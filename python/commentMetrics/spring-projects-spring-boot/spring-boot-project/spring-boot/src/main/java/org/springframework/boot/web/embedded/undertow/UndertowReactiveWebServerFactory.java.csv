commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public WebServer getWebServer(org.springframework.http.server.reactive.HttpHandler httpHandler) {     Undertow.Builder builder = createBuilder(getPort()).     Closeable closeable = configureHandler(builder, httpHandler).     return new UndertowWebServer(builder, getPort() >= 0, closeable). }
false;private;1;25;;private Undertow.Builder createBuilder(int port) {     Undertow.Builder builder = Undertow.builder().     if (this.bufferSize != null) {         builder.setBufferSize(this.bufferSize).     }     if (this.ioThreads != null) {         builder.setIoThreads(this.ioThreads).     }     if (this.workerThreads != null) {         builder.setWorkerThreads(this.workerThreads).     }     if (this.directBuffers != null) {         builder.setDirectBuffers(this.directBuffers).     }     if (getSsl() != null && getSsl().isEnabled()) {         customizeSsl(builder).     } else {         builder.addHttpListener(port, getListenAddress()).     }     for (UndertowBuilderCustomizer customizer : this.builderCustomizers) {         customizer.customize(builder).     }     return builder. }
false;private;2;17;;private Closeable configureHandler(Undertow.Builder builder, org.springframework.http.server.reactive.HttpHandler httpHandler) {     HttpHandler handler = new UndertowHttpHandlerAdapter(httpHandler).     if (this.useForwardHeaders) {         handler = Handlers.proxyPeerAddress(handler).     }     handler = UndertowCompressionConfigurer.configureCompression(getCompression(), handler).     Closeable closeable = null.     if (isAccessLogEnabled()) {         closeable = configureAccessLogHandler(builder, handler).     } else {         builder.setHandler(handler).     }     return closeable. }
false;private;2;28;;private Closeable configureAccessLogHandler(Undertow.Builder builder, HttpHandler handler) {     try {         createAccessLogDirectoryIfNecessary().         XnioWorker worker = createWorker().         String prefix = (this.accessLogPrefix != null) ? this.accessLogPrefix : "access_log.".         DefaultAccessLogReceiver accessLogReceiver = new DefaultAccessLogReceiver(worker, this.accessLogDirectory, prefix, this.accessLogSuffix, this.accessLogRotate).         String formatString = ((this.accessLogPattern != null) ? this.accessLogPattern : "common").         builder.setHandler(new AccessLogHandler(handler, accessLogReceiver, formatString, Undertow.class.getClassLoader())).         return () -> {             try {                 accessLogReceiver.close().                 worker.shutdown().             } catch (IOException ex) {                 throw new IllegalStateException(ex).             }         }.     } catch (IOException ex) {         throw new IllegalStateException("Failed to create AccessLogHandler", ex).     } }
false;private;0;7;;private void createAccessLogDirectoryIfNecessary() {     Assert.state(this.accessLogDirectory != null, "Access log directory is not set").     if (!this.accessLogDirectory.isDirectory() && !this.accessLogDirectory.mkdirs()) {         throw new IllegalStateException("Failed to create access log directory '" + this.accessLogDirectory + "'").     } }
false;private;0;5;;private XnioWorker createWorker() throws IOException {     Xnio xnio = Xnio.getInstance(Undertow.class.getClassLoader()).     return xnio.createWorker(OptionMap.builder().set(Options.THREAD_DAEMON, true).getMap()). }
false;private;1;7;;private void customizeSsl(Undertow.Builder builder) {     new SslBuilderCustomizer(getPort(), getAddress(), getSsl(), getSslStoreProvider()).customize(builder).     if (getHttp2() != null) {         builder.setServerOption(UndertowOptions.ENABLE_HTTP2, getHttp2().isEnabled()).     } }
false;private;0;6;;private String getListenAddress() {     if (getAddress() == null) {         return "0.0.0.0".     }     return getAddress().getHostAddress(). }
true;public;1;5;/**  * Set {@link UndertowDeploymentInfoCustomizer}s that should be applied to the  * Undertow {@link DeploymentInfo}. Calling this method will replace any existing  * customizers.  * @param customizers the customizers to set  */ ;/**  * Set {@link UndertowDeploymentInfoCustomizer}s that should be applied to the  * Undertow {@link DeploymentInfo}. Calling this method will replace any existing  * customizers.  * @param customizers the customizers to set  */ public void setDeploymentInfoCustomizers(Collection<? extends UndertowDeploymentInfoCustomizer> customizers) {     Assert.notNull(customizers, "Customizers must not be null").     this.deploymentInfoCustomizers = new ArrayList<>(customizers). }
true;public;0;3;/**  * Returns a mutable collection of the {@link UndertowDeploymentInfoCustomizer}s that  * will be applied to the Undertow {@link DeploymentInfo}.  * @return the customizers that will be applied  */ ;/**  * Returns a mutable collection of the {@link UndertowDeploymentInfoCustomizer}s that  * will be applied to the Undertow {@link DeploymentInfo}.  * @return the customizers that will be applied  */ public Collection<UndertowDeploymentInfoCustomizer> getDeploymentInfoCustomizers() {     return this.deploymentInfoCustomizers. }
false;public;1;6;;@Override public void addDeploymentInfoCustomizers(UndertowDeploymentInfoCustomizer... customizers) {     Assert.notNull(customizers, "UndertowDeploymentInfoCustomizers must not be null").     this.deploymentInfoCustomizers.addAll(Arrays.asList(customizers)). }
false;public;1;4;;@Override public void setAccessLogDirectory(File accessLogDirectory) {     this.accessLogDirectory = accessLogDirectory. }
false;public;1;4;;@Override public void setAccessLogPattern(String accessLogPattern) {     this.accessLogPattern = accessLogPattern. }
false;public;1;4;;@Override public void setAccessLogPrefix(String accessLogPrefix) {     this.accessLogPrefix = accessLogPrefix. }
false;public;1;4;;@Override public void setAccessLogSuffix(String accessLogSuffix) {     this.accessLogSuffix = accessLogSuffix. }
false;public;0;3;;public boolean isAccessLogEnabled() {     return this.accessLogEnabled. }
false;public;1;4;;@Override public void setAccessLogEnabled(boolean accessLogEnabled) {     this.accessLogEnabled = accessLogEnabled. }
false;public;1;4;;@Override public void setAccessLogRotate(boolean accessLogRotate) {     this.accessLogRotate = accessLogRotate. }
false;protected,final;0;3;;protected final boolean isUseForwardHeaders() {     return this.useForwardHeaders. }
false;public;1;4;;@Override public void setUseForwardHeaders(boolean useForwardHeaders) {     this.useForwardHeaders = useForwardHeaders. }
false;public;1;4;;@Override public void setBufferSize(Integer bufferSize) {     this.bufferSize = bufferSize. }
false;public;1;4;;@Override public void setIoThreads(Integer ioThreads) {     this.ioThreads = ioThreads. }
false;public;1;4;;@Override public void setWorkerThreads(Integer workerThreads) {     this.workerThreads = workerThreads. }
false;public;1;4;;@Override public void setUseDirectBuffers(Boolean directBuffers) {     this.directBuffers = directBuffers. }
true;public;1;5;/**  * Set {@link UndertowBuilderCustomizer}s that should be applied to the Undertow  * {@link io.undertow.Undertow.Builder Builder}. Calling this method will replace any  * existing customizers.  * @param customizers the customizers to set  */ ;/**  * Set {@link UndertowBuilderCustomizer}s that should be applied to the Undertow  * {@link io.undertow.Undertow.Builder Builder}. Calling this method will replace any  * existing customizers.  * @param customizers the customizers to set  */ public void setBuilderCustomizers(Collection<? extends UndertowBuilderCustomizer> customizers) {     Assert.notNull(customizers, "Customizers must not be null").     this.builderCustomizers = new ArrayList<>(customizers). }
true;public;0;3;/**  * Returns a mutable collection of the {@link UndertowBuilderCustomizer}s that will be  * applied to the Undertow {@link io.undertow.Undertow.Builder Builder}.  * @return the customizers that will be applied  */ ;/**  * Returns a mutable collection of the {@link UndertowBuilderCustomizer}s that will be  * applied to the Undertow {@link io.undertow.Undertow.Builder Builder}.  * @return the customizers that will be applied  */ public Collection<UndertowBuilderCustomizer> getBuilderCustomizers() {     return this.builderCustomizers. }
true;public;1;5;/**  * Add {@link UndertowBuilderCustomizer}s that should be used to customize the  * Undertow {@link io.undertow.Undertow.Builder Builder}.  * @param customizers the customizers to add  */ ;/**  * Add {@link UndertowBuilderCustomizer}s that should be used to customize the  * Undertow {@link io.undertow.Undertow.Builder Builder}.  * @param customizers the customizers to add  */ @Override public void addBuilderCustomizers(UndertowBuilderCustomizer... customizers) {     Assert.notNull(customizers, "Customizers must not be null").     this.builderCustomizers.addAll(Arrays.asList(customizers)). }
