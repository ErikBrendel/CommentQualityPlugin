commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Override public void start() throws WebServerException {     if (this.disposableServer == null) {         try {             this.disposableServer = startHttpServer().         } catch (Exception ex) {             ChannelBindException bindException = findBindException(ex).             if (bindException != null) {                 throw new PortInUseException(bindException.localPort()).             }             throw new WebServerException("Unable to start Netty", ex).         }         logger.info("Netty started on port(s): " + getPort()).         startDaemonAwaitThread(this.disposableServer).     } }
false;private;0;7;;private DisposableServer startHttpServer() {     if (this.lifecycleTimeout != null) {         return this.httpServer.handle(this.handlerAdapter).bindNow(this.lifecycleTimeout).     }     return this.httpServer.handle(this.handlerAdapter).bindNow(). }
false;private;1;10;;private ChannelBindException findBindException(Exception ex) {     Throwable candidate = ex.     while (candidate != null) {         if (candidate instanceof ChannelBindException) {             return (ChannelBindException) candidate.         }         candidate = candidate.getCause().     }     return null. }
false;public;0;4;;@Override public void run() {     disposableServer.onDispose().block(). }
false;private;1;13;;private void startDaemonAwaitThread(DisposableServer disposableServer) {     Thread awaitThread = new Thread("server") {          @Override         public void run() {             disposableServer.onDispose().block().         }     }.     awaitThread.setContextClassLoader(getClass().getClassLoader()).     awaitThread.setDaemon(false).     awaitThread.start(). }
false;public;0;12;;@Override public void stop() throws WebServerException {     if (this.disposableServer != null) {         if (this.lifecycleTimeout != null) {             this.disposableServer.disposeNow(this.lifecycleTimeout).         } else {             this.disposableServer.disposeNow().         }         this.disposableServer = null.     } }
false;public;0;7;;@Override public int getPort() {     if (this.disposableServer != null) {         return this.disposableServer.port().     }     return 0. }
