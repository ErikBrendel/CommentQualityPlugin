commented;modifiers;parameterAmount;loc;comment;code
false;public,synchronized;0;10;;@Override public synchronized void init() {     source.set(this).     try {         super.init().     } finally {         source.remove().     } }
false;public;1;4;;@Override public void setBeanName(String name) {     this.beanName = name. }
false;public;0;6;;@Override public void afterPropertiesSet() throws Exception {     if (!StringUtils.hasLength(getUniqueName())) {         setUniqueName(this.beanName).     } }
true;public;1;5;/**  * Set the {@link XADataSource} directly, instead of calling  * {@link #setClassName(String)}.  * @param dataSource the data source to use  */ ;/**  * Set the {@link XADataSource} directly, instead of calling  * {@link #setClassName(String)}.  * @param dataSource the data source to use  */ public void setDataSource(XADataSource dataSource) {     this.dataSource = dataSource.     setClassName(DirectXADataSource.class.getName()).     setDriverProperties(new Properties()). }
false;protected,final;0;3;;protected final XADataSource getDataSource() {     return this.dataSource. }
false;public;2;8;;@Override public XAStatefulHolder createPooledConnection(Object xaFactory, ResourceBean bean) throws Exception {     if (xaFactory instanceof DirectXADataSource) {         xaFactory = ((DirectXADataSource) xaFactory).getDataSource().     }     return super.createPooledConnection(xaFactory, bean). }
false;public;0;10;;@Override public Logger getParentLogger() throws SQLFeatureNotSupportedException {     try {         return this.getParentLogger().     } catch (Exception ex) {         // Work around https://jira.codehaus.org/browse/BTM-134         return Logger.getLogger(Logger.GLOBAL_LOGGER_NAME).     } }
false;public;0;4;;@Override public PrintWriter getLogWriter() throws SQLException {     return this.dataSource.getLogWriter(). }
false;public;0;4;;@Override public XAConnection getXAConnection() throws SQLException {     return this.dataSource.getXAConnection(). }
false;public;2;5;;@Override public XAConnection getXAConnection(String user, String password) throws SQLException {     return this.dataSource.getXAConnection(user, password). }
false;public;1;4;;@Override public void setLogWriter(PrintWriter out) throws SQLException {     this.dataSource.setLogWriter(out). }
false;public;1;4;;@Override public void setLoginTimeout(int seconds) throws SQLException {     this.dataSource.setLoginTimeout(seconds). }
false;public;0;4;;@Override public int getLoginTimeout() throws SQLException {     return this.dataSource.getLoginTimeout(). }
false;public;0;4;;@Override public Logger getParentLogger() throws SQLFeatureNotSupportedException {     return this.dataSource.getParentLogger(). }
false;public;0;3;;public XADataSource getDataSource() {     return this.dataSource. }
