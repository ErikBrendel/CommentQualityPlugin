commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getOrder() {     return Ordered.HIGHEST_PRECEDENCE. }
false;public;4;6;;@Override public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) {     storeErrorAttributes(request, ex).     return null. }
false;private;2;3;;private void storeErrorAttributes(HttpServletRequest request, Exception ex) {     request.setAttribute(ERROR_ATTRIBUTE, ex). }
false;public;2;10;;@Override public Map<String, Object> getErrorAttributes(WebRequest webRequest, boolean includeStackTrace) {     Map<String, Object> errorAttributes = new LinkedHashMap<>().     errorAttributes.put("timestamp", new Date()).     addStatus(errorAttributes, webRequest).     addErrorDetails(errorAttributes, webRequest, includeStackTrace).     addPath(errorAttributes, webRequest).     return errorAttributes. }
false;private;2;18;;private void addStatus(Map<String, Object> errorAttributes, RequestAttributes requestAttributes) {     Integer status = getAttribute(requestAttributes, "javax.servlet.error.status_code").     if (status == null) {         errorAttributes.put("status", 999).         errorAttributes.put("error", "None").         return.     }     errorAttributes.put("status", status).     try {         errorAttributes.put("error", HttpStatus.valueOf(status).getReasonPhrase()).     } catch (Exception ex) {         // Unable to obtain a reason         errorAttributes.put("error", "Http Status " + status).     } }
false;private;3;22;;private void addErrorDetails(Map<String, Object> errorAttributes, WebRequest webRequest, boolean includeStackTrace) {     Throwable error = getError(webRequest).     if (error != null) {         while (error instanceof ServletException && error.getCause() != null) {             error = ((ServletException) error).getCause().         }         if (this.includeException) {             errorAttributes.put("exception", error.getClass().getName()).         }         addErrorMessage(errorAttributes, error).         if (includeStackTrace) {             addStackTrace(errorAttributes, error).         }     }     Object message = getAttribute(webRequest, "javax.servlet.error.message").     if ((!StringUtils.isEmpty(message) || errorAttributes.get("message") == null) && !(error instanceof BindingResult)) {         errorAttributes.put("message", StringUtils.isEmpty(message) ? "No message available" : message).     } }
false;private;2;16;;private void addErrorMessage(Map<String, Object> errorAttributes, Throwable error) {     BindingResult result = extractBindingResult(error).     if (result == null) {         errorAttributes.put("message", error.getMessage()).         return.     }     if (result.hasErrors()) {         errorAttributes.put("errors", result.getAllErrors()).         errorAttributes.put("message", "Validation failed for object='" + result.getObjectName() + "'. Error count: " + result.getErrorCount()).     } else {         errorAttributes.put("message", "No errors").     } }
false;private;1;9;;private BindingResult extractBindingResult(Throwable error) {     if (error instanceof BindingResult) {         return (BindingResult) error.     }     if (error instanceof MethodArgumentNotValidException) {         return ((MethodArgumentNotValidException) error).getBindingResult().     }     return null. }
false;private;2;6;;private void addStackTrace(Map<String, Object> errorAttributes, Throwable error) {     StringWriter stackTrace = new StringWriter().     error.printStackTrace(new PrintWriter(stackTrace)).     stackTrace.flush().     errorAttributes.put("trace", stackTrace.toString()). }
false;private;2;7;;private void addPath(Map<String, Object> errorAttributes, RequestAttributes requestAttributes) {     String path = getAttribute(requestAttributes, "javax.servlet.error.request_uri").     if (path != null) {         errorAttributes.put("path", path).     } }
false;public;1;8;;@Override public Throwable getError(WebRequest webRequest) {     Throwable exception = getAttribute(webRequest, ERROR_ATTRIBUTE).     if (exception == null) {         exception = getAttribute(webRequest, "javax.servlet.error.exception").     }     return exception. }
false;private;2;4;;@SuppressWarnings("unchecked") private <T> T getAttribute(RequestAttributes requestAttributes, String name) {     return (T) requestAttributes.getAttribute(name, RequestAttributes.SCOPE_REQUEST). }
