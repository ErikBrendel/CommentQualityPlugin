commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;17;;@Override protected Object bindAggregate(ConfigurationPropertyName name, Bindable<?> target, AggregateElementBinder elementBinder) {     Class<?> collectionType = (target.getValue() != null) ? List.class : target.getType().resolve(Object.class).     ResolvableType aggregateType = ResolvableType.forClassWithGenerics(List.class, target.getType().asCollection().getGenerics()).     ResolvableType elementType = target.getType().asCollection().getGeneric().     IndexedCollectionSupplier result = new IndexedCollectionSupplier(() -> CollectionFactory.createCollection(collectionType, elementType.resolve(), 0)).     bindIndexed(name, target, elementBinder, aggregateType, elementType, result).     if (result.wasSupplied()) {         return result.get().     }     return null. }
false;protected;2;16;;@Override protected Collection<Object> merge(Supplier<Collection<Object>> existing, Collection<Object> additional) {     Collection<Object> existingCollection = getExistingIfPossible(existing).     if (existingCollection == null) {         return additional.     }     try {         existingCollection.clear().         existingCollection.addAll(additional).         return copyIfPossible(existingCollection).     } catch (UnsupportedOperationException ex) {         return createNewCollection(additional).     } }
false;private;1;9;;private Collection<Object> getExistingIfPossible(Supplier<Collection<Object>> existing) {     try {         return existing.get().     } catch (Exception ex) {         return null.     } }
false;private;1;8;;private Collection<Object> copyIfPossible(Collection<Object> collection) {     try {         return createNewCollection(collection).     } catch (Exception ex) {         return collection.     } }
false;private;1;6;;private Collection<Object> createNewCollection(Collection<Object> collection) {     Collection<Object> result = CollectionFactory.createCollection(collection.getClass(), collection.size()).     result.addAll(collection).     return result. }
