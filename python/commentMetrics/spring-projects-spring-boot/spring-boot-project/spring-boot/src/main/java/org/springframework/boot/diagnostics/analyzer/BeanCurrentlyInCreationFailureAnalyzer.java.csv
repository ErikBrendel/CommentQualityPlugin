commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;9;;@Override protected FailureAnalysis analyze(Throwable rootFailure, BeanCurrentlyInCreationException cause) {     DependencyCycle dependencyCycle = findCycle(rootFailure).     if (dependencyCycle == null) {         return null.     }     return new FailureAnalysis(buildMessage(dependencyCycle), null, cause). }
false;private;1;20;;private DependencyCycle findCycle(Throwable rootFailure) {     List<BeanInCycle> beansInCycle = new ArrayList<>().     Throwable candidate = rootFailure.     int cycleStart = -1.     while (candidate != null) {         BeanInCycle beanInCycle = BeanInCycle.get(candidate).         if (beanInCycle != null) {             int index = beansInCycle.indexOf(beanInCycle).             if (index == -1) {                 beansInCycle.add(beanInCycle).             }             cycleStart = (cycleStart != -1) ? cycleStart : index.         }         candidate = candidate.getCause().     }     if (cycleStart == -1) {         return null.     }     return new DependencyCycle(beansInCycle, cycleStart). }
false;private;1;21;;private String buildMessage(DependencyCycle dependencyCycle) {     StringBuilder message = new StringBuilder().     message.append(String.format("The dependencies of some of the beans in the " + "application context form a cycle:%n%n")).     List<BeanInCycle> beansInCycle = dependencyCycle.getBeansInCycle().     int cycleStart = dependencyCycle.getCycleStart().     for (int i = 0. i < beansInCycle.size(). i++) {         BeanInCycle beanInCycle = beansInCycle.get(i).         if (i == cycleStart) {             message.append(String.format("┌─────┐%n")).         } else if (i > 0) {             String leftSide = (i < cycleStart) ? " " : "↑".             message.append(String.format("%s     ↓%n", leftSide)).         }         String leftSide = (i < cycleStart) ? " " : "|".         message.append(String.format("%s  %s%n", leftSide, beanInCycle)).     }     message.append(String.format("└─────┘%n")).     return message.toString(). }
false;public;0;3;;public List<BeanInCycle> getBeansInCycle() {     return this.beansInCycle. }
false;public;0;3;;public int getCycleStart() {     return this.cycleStart. }
false;private;1;10;;private String determineDescription(BeanCreationException ex) {     if (StringUtils.hasText(ex.getResourceDescription())) {         return String.format(" defined in %s", ex.getResourceDescription()).     }     InjectionPoint failedInjectionPoint = findFailedInjectionPoint(ex).     if (failedInjectionPoint != null && failedInjectionPoint.getField() != null) {         return String.format(" (field %s)", failedInjectionPoint.getField()).     }     return "". }
false;private;1;6;;private InjectionPoint findFailedInjectionPoint(BeanCreationException ex) {     if (!(ex instanceof UnsatisfiedDependencyException)) {         return null.     }     return ((UnsatisfiedDependencyException) ex).getInjectionPoint(). }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null || getClass() != obj.getClass()) {         return false.     }     return this.name.equals(((BeanInCycle) obj).name). }
false;public;0;4;;@Override public int hashCode() {     return this.name.hashCode(). }
false;public;0;4;;@Override public String toString() {     return this.name + this.description. }
false;public,static;1;6;;public static BeanInCycle get(Throwable ex) {     if (ex instanceof BeanCreationException) {         return get((BeanCreationException) ex).     }     return null. }
false;private,static;1;6;;private static BeanInCycle get(BeanCreationException ex) {     if (StringUtils.hasText(ex.getBeanName())) {         return new BeanInCycle(ex).     }     return null. }
