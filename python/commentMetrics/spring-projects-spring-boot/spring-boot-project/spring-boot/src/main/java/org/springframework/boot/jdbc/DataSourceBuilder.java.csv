commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static DataSourceBuilder<?> create() {     return new DataSourceBuilder<>(null). }
false;public,static;1;3;;public static DataSourceBuilder<?> create(ClassLoader classLoader) {     return new DataSourceBuilder<>(classLoader). }
false;public;0;8;;@SuppressWarnings("unchecked") public T build() {     Class<? extends DataSource> type = getType().     DataSource result = BeanUtils.instantiateClass(type).     maybeGetDriverClassName().     bind(result).     return (T) result. }
false;private;0;8;;private void maybeGetDriverClassName() {     if (!this.properties.containsKey("driverClassName") && this.properties.containsKey("url")) {         String url = this.properties.get("url").         String driverClass = DatabaseDriver.fromJdbcUrl(url).getDriverClassName().         this.properties.put("driverClassName", driverClass).     } }
false;private;1;9;;private void bind(DataSource result) {     ConfigurationPropertySource source = new MapConfigurationPropertySource(this.properties).     ConfigurationPropertyNameAliases aliases = new ConfigurationPropertyNameAliases().     aliases.addAliases("url", "jdbc-url").     aliases.addAliases("username", "user").     Binder binder = new Binder(source.withAliases(aliases)).     binder.bind(ConfigurationPropertyName.EMPTY, Bindable.ofInstance(result)). }
false;public;1;5;;@SuppressWarnings("unchecked") public <D extends DataSource> DataSourceBuilder<D> type(Class<D> type) {     this.type = type.     return (DataSourceBuilder<D>) this. }
false;public;1;4;;public DataSourceBuilder<T> url(String url) {     this.properties.put("url", url).     return this. }
false;public;1;4;;public DataSourceBuilder<T> driverClassName(String driverClassName) {     this.properties.put("driverClassName", driverClassName).     return this. }
false;public;1;4;;public DataSourceBuilder<T> username(String username) {     this.properties.put("username", username).     return this. }
false;public;1;4;;public DataSourceBuilder<T> password(String password) {     this.properties.put("password", password).     return this. }
false;public,static;1;13;;@SuppressWarnings("unchecked") public static Class<? extends DataSource> findType(ClassLoader classLoader) {     for (String name : DATA_SOURCE_TYPE_NAMES) {         try {             return (Class<? extends DataSource>) ClassUtils.forName(name, classLoader).         } catch (Exception ex) {         // Swallow and continue         }     }     return null. }
false;private;0;8;;private Class<? extends DataSource> getType() {     Class<? extends DataSource> type = (this.type != null) ? this.type : findType(this.classLoader).     if (type != null) {         return type.     }     throw new IllegalStateException("No supported DataSource type found"). }
