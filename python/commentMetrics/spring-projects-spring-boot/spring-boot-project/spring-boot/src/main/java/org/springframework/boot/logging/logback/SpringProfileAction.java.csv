commented;modifiers;parameterAmount;loc;comment;code
false;public;3;12;;@Override public void begin(InterpretationContext ic, String name, Attributes attributes) throws ActionException {     this.depth++.     if (this.depth != 1) {         return.     }     ic.pushObject(this).     this.acceptsProfile = acceptsProfiles(ic, attributes).     this.events = new ArrayList<>().     ic.addInPlayListener(this). }
false;private;2;14;;private boolean acceptsProfiles(InterpretationContext ic, Attributes attributes) {     if (this.environment == null) {         return false.     }     String[] profileNames = StringUtils.trimArrayElements(StringUtils.commaDelimitedListToStringArray(attributes.getValue(NAME_ATTRIBUTE))).     if (profileNames.length == 0) {         return false.     }     for (int i = 0. i < profileNames.length. i++) {         profileNames[i] = OptionHelper.substVars(profileNames[i], ic, this.context).     }     return this.environment.acceptsProfiles(Profiles.of(profileNames)). }
false;public;2;12;;@Override public void end(InterpretationContext ic, String name) throws ActionException {     this.depth--.     if (this.depth != 0) {         return.     }     ic.removeInPlayListener(this).     verifyAndPop(ic).     if (this.acceptsProfile) {         addEventsToPlayer(ic).     } }
false;private;1;7;;private void verifyAndPop(InterpretationContext ic) {     Object o = ic.peekObject().     Assert.state(o != null, "Unexpected null object on stack").     Assert.isInstanceOf(SpringProfileAction.class, o, "logback stack error").     Assert.state(o == this, "ProfileAction different than current one on stack").     ic.popObject(). }
false;private;1;6;;private void addEventsToPlayer(InterpretationContext ic) {     Interpreter interpreter = ic.getJoranInterpreter().     this.events.remove(0).     this.events.remove(this.events.size() - 1).     interpreter.getEventPlayer().addEventsDynamically(this.events, 1). }
false;public;1;4;;@Override public void inPlay(SaxEvent event) {     this.events.add(event). }
