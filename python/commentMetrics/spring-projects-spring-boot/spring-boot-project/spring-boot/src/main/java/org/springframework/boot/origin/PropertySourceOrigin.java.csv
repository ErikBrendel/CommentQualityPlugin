commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the origin {@link PropertySource}.  * @return the origin property source  */ ;/**  * Return the origin {@link PropertySource}.  * @return the origin property source  */ public PropertySource<?> getPropertySource() {     return this.propertySource. }
true;public;0;3;/**  * Return the property name that was used when obtaining the original value from the  * {@link #getPropertySource() property source}.  * @return the origin property name  */ ;/**  * Return the property name that was used when obtaining the original value from the  * {@link #getPropertySource() property source}.  * @return the origin property name  */ public String getPropertyName() {     return this.propertyName. }
false;public;0;5;;@Override public String toString() {     return "\"" + this.propertyName + "\" from property source \"" + this.propertySource.getName() + "\"". }
true;public,static;2;4;/**  * Get an {@link Origin} for the given {@link PropertySource} and  * {@code propertyName}. Will either return an {@link OriginLookup} result or a  * {@link PropertySourceOrigin}.  * @param propertySource the origin property source  * @param name the property name  * @return the property origin  */ ;/**  * Get an {@link Origin} for the given {@link PropertySource} and  * {@code propertyName}. Will either return an {@link OriginLookup} result or a  * {@link PropertySourceOrigin}.  * @param propertySource the origin property source  * @param name the property name  * @return the property origin  */ public static Origin get(PropertySource<?> propertySource, String name) {     Origin origin = OriginLookup.getOrigin(propertySource, name).     return (origin != null) ? origin : new PropertySourceOrigin(propertySource, name). }
