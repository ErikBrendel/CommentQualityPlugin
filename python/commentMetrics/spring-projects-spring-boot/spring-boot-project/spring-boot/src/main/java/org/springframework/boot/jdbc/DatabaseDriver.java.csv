commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getId() {     return "mysql". }
false;protected;0;4;;@Override protected Collection<String> getUrlPrefixes() {     return Collections.singleton("sap"). }
false;protected;1;6;;@Override protected boolean matchProductName(String productName) {     return super.matchProductName(productName) || "SQL SERVER".equalsIgnoreCase(productName). }
false;protected;0;4;;@Override protected Collection<String> getUrlPrefixes() {     return Arrays.asList("firebirdsql", "firebird"). }
false;protected;1;5;;@Override protected boolean matchProductName(String productName) {     return super.matchProductName(productName) || productName.toLowerCase(Locale.ENGLISH).startsWith("firebird"). }
false;protected;1;5;;@Override protected boolean matchProductName(String productName) {     return super.matchProductName(productName) || productName.toLowerCase(Locale.ENGLISH).startsWith("db2/"). }
false;public;0;4;;@Override public String getId() {     return "db2". }
false;protected;0;4;;@Override protected Collection<String> getUrlPrefixes() {     return Collections.singleton("as400"). }
false;protected;1;5;;@Override protected boolean matchProductName(String productName) {     return super.matchProductName(productName) || productName.toLowerCase(Locale.ENGLISH).contains("as/400"). }
false;protected;0;4;;@Override protected Collection<String> getUrlPrefixes() {     return Arrays.asList("informix-sqli", "informix-direct"). }
true;public;0;3;/**  * Return the identifier of this driver.  * @return the identifier  */ ;/**  * Return the identifier of this driver.  * @return the identifier  */ public String getId() {     return name().toLowerCase(Locale.ENGLISH). }
false;protected;1;3;;protected boolean matchProductName(String productName) {     return this.productName != null && this.productName.equalsIgnoreCase(productName). }
false;protected;0;3;;protected Collection<String> getUrlPrefixes() {     return Collections.singleton(this.name().toLowerCase(Locale.ENGLISH)). }
true;public;0;3;/**  * Return the driver class name.  * @return the class name or {@code null}  */ ;/**  * Return the driver class name.  * @return the class name or {@code null}  */ public String getDriverClassName() {     return this.driverClassName. }
true;public;0;3;/**  * Return the XA driver source class name.  * @return the class name or {@code null}  */ ;/**  * Return the XA driver source class name.  * @return the class name or {@code null}  */ public String getXaDataSourceClassName() {     return this.xaDataSourceClassName. }
true;public;0;3;/**  * Return the validation query.  * @return the validation query or {@code null}  */ ;/**  * Return the validation query.  * @return the validation query or {@code null}  */ public String getValidationQuery() {     return this.validationQuery. }
true;public,static;1;16;/**  * Find a {@link DatabaseDriver} for the given URL.  * @param url the JDBC URL  * @return the database driver or {@link #UNKNOWN} if not found  */ ;/**  * Find a {@link DatabaseDriver} for the given URL.  * @param url the JDBC URL  * @return the database driver or {@link #UNKNOWN} if not found  */ public static DatabaseDriver fromJdbcUrl(String url) {     if (StringUtils.hasLength(url)) {         Assert.isTrue(url.startsWith("jdbc"), "URL must start with 'jdbc'").         String urlWithoutPrefix = url.substring("jdbc".length()).toLowerCase(Locale.ENGLISH).         for (DatabaseDriver driver : values()) {             for (String urlPrefix : driver.getUrlPrefixes()) {                 String prefix = ":" + urlPrefix + ":".                 if (driver != UNKNOWN && urlWithoutPrefix.startsWith(prefix)) {                     return driver.                 }             }         }     }     return UNKNOWN. }
true;public,static;1;10;/**  * Find a {@link DatabaseDriver} for the given product name.  * @param productName product name  * @return the database driver or {@link #UNKNOWN} if not found  */ ;/**  * Find a {@link DatabaseDriver} for the given product name.  * @param productName product name  * @return the database driver or {@link #UNKNOWN} if not found  */ public static DatabaseDriver fromProductName(String productName) {     if (StringUtils.hasLength(productName)) {         for (DatabaseDriver candidate : values()) {             if (candidate.matchProductName(productName)) {                 return candidate.             }         }     }     return UNKNOWN. }
