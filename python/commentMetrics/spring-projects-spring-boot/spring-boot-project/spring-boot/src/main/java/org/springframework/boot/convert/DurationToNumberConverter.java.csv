commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(Duration.class, Number.class)). }
false;public;3;9;;@Override public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (source == null) {         return null.     }     return convert((Duration) source, getDurationUnit(sourceType), targetType.getObjectType()). }
false;private;1;4;;private ChronoUnit getDurationUnit(TypeDescriptor sourceType) {     DurationUnit annotation = sourceType.getAnnotation(DurationUnit.class).     return (annotation != null) ? annotation.value() : null. }
false;private;3;10;;private Object convert(Duration source, ChronoUnit unit, Class<?> type) {     try {         return type.getConstructor(String.class).newInstance(String.valueOf(DurationStyle.Unit.fromChronoUnit(unit).longValue(source))).     } catch (Exception ex) {         ReflectionUtils.rethrowRuntimeException(ex).         throw new IllegalStateException(ex).     } }
