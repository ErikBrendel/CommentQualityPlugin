commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;9;;@Override protected FailureAnalysis analyze(Throwable rootFailure, BindException cause) {     Throwable rootCause = cause.getCause().     if (rootCause instanceof BindValidationException || rootCause instanceof UnboundConfigurationPropertiesException) {         return null.     }     return analyzeGenericBindException(cause). }
false;private;1;8;;private FailureAnalysis analyzeGenericBindException(BindException cause) {     StringBuilder description = new StringBuilder(String.format("%s:%n", cause.getMessage())).     ConfigurationProperty property = cause.getProperty().     buildDescription(description, property).     description.append(String.format("%n    Reason: %s", getMessage(cause))).     return getFailureAnalysis(description, cause). }
false;private;2;8;;private void buildDescription(StringBuilder description, ConfigurationProperty property) {     if (property != null) {         description.append(String.format("%n    Property: %s", property.getName())).         description.append(String.format("%n    Value: %s", property.getValue())).         description.append(String.format("%n    Origin: %s", property.getOrigin())).     } }
false;private;1;14;;private String getMessage(BindException cause) {     ConversionFailedException conversionFailure = findCause(cause, ConversionFailedException.class).     if (conversionFailure != null) {         return "failed to convert " + conversionFailure.getSourceType() + " to " + conversionFailure.getTargetType().     }     Throwable failure = cause.     while (failure.getCause() != null) {         failure = failure.getCause().     }     return (StringUtils.hasText(failure.getMessage()) ? failure.getMessage() : cause.getMessage()). }
false;private;2;11;;private FailureAnalysis getFailureAnalysis(Object description, BindException cause) {     StringBuilder message = new StringBuilder("Update your application's configuration").     Collection<String> validValues = findValidValues(cause).     if (!validValues.isEmpty()) {         message.append(String.format(". The following values are valid:%n")).         validValues.forEach((value) -> message.append(String.format("%n    %s", value))).     }     return new FailureAnalysis(description.toString(), message.toString(), cause). }
false;private;1;13;;private Collection<String> findValidValues(BindException ex) {     ConversionFailedException conversionFailure = findCause(ex, ConversionFailedException.class).     if (conversionFailure != null) {         Object[] enumConstants = conversionFailure.getTargetType().getType().getEnumConstants().         if (enumConstants != null) {             return Stream.of(enumConstants).map(Object::toString).collect(Collectors.toCollection(TreeSet::new)).         }     }     return Collections.emptySet(). }
