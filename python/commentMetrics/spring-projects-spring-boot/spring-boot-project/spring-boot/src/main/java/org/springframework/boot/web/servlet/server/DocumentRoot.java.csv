commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public File getDirectory() {     return this.directory. }
false;public;1;3;;public void setDirectory(File directory) {     this.directory = directory. }
true;public,final;0;13;/**  * Returns the absolute document root when it points to a valid directory, logging a  * warning and returning {@code null} otherwise.  * @return the valid document root  */ ;/**  * Returns the absolute document root when it points to a valid directory, logging a  * warning and returning {@code null} otherwise.  * @return the valid document root  */ public final File getValidDirectory() {     File file = this.directory.     file = (file != null) ? file : getWarFileDocumentRoot().     file = (file != null) ? file : getExplodedWarFileDocumentRoot().     file = (file != null) ? file : getCommonDocumentRoot().     if (file == null && this.logger.isDebugEnabled()) {         logNoDocumentRoots().     } else if (this.logger.isDebugEnabled()) {         this.logger.debug("Document root: " + file).     }     return file. }
false;private;0;3;;private File getWarFileDocumentRoot() {     return getArchiveFileDocumentRoot(".war"). }
false;private;1;11;;private File getArchiveFileDocumentRoot(String extension) {     File file = getCodeSourceArchive().     if (this.logger.isDebugEnabled()) {         this.logger.debug("Code archive: " + file).     }     if (file != null && file.exists() && !file.isDirectory() && file.getName().toLowerCase(Locale.ENGLISH).endsWith(extension)) {         return file.getAbsoluteFile().     }     return null. }
false;private;0;3;;private File getExplodedWarFileDocumentRoot() {     return getExplodedWarFileDocumentRoot(getCodeSourceArchive()). }
false;private;0;3;;private File getCodeSourceArchive() {     return getCodeSourceArchive(getClass().getProtectionDomain().getCodeSource()). }
false;;1;24;;File getCodeSourceArchive(CodeSource codeSource) {     try {         URL location = (codeSource != null) ? codeSource.getLocation() : null.         if (location == null) {             return null.         }         String path.         URLConnection connection = location.openConnection().         if (connection instanceof JarURLConnection) {             path = ((JarURLConnection) connection).getJarFile().getName().         } else {             path = location.toURI().getPath().         }         int index = path.indexOf("!/").         if (index != -1) {             path = path.substring(0, index).         }         return new File(path).     } catch (Exception ex) {         return null.     } }
false;public,final;1;15;;public final File getExplodedWarFileDocumentRoot(File codeSourceFile) {     if (this.logger.isDebugEnabled()) {         this.logger.debug("Code archive: " + codeSourceFile).     }     if (codeSourceFile != null && codeSourceFile.exists()) {         String path = codeSourceFile.getAbsolutePath().         int webInfPathIndex = path.indexOf(File.separatorChar + "WEB-INF" + File.separatorChar).         if (webInfPathIndex >= 0) {             path = path.substring(0, webInfPathIndex).             return new File(path).         }     }     return null. }
false;private;0;9;;private File getCommonDocumentRoot() {     for (String commonDocRoot : COMMON_DOC_ROOTS) {         File root = new File(commonDocRoot).         if (root.exists() && root.isDirectory()) {             return root.getAbsoluteFile().         }     }     return null. }
false;private;0;4;;private void logNoDocumentRoots() {     this.logger.debug("None of the document roots " + Arrays.asList(COMMON_DOC_ROOTS) + " point to a directory and will be ignored."). }
