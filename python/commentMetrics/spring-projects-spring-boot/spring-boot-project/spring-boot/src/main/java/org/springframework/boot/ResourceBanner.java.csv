commented;modifiers;parameterAmount;loc;comment;code
false;public;3;19;;@Override public void printBanner(Environment environment, Class<?> sourceClass, PrintStream out) {     try {         String banner = StreamUtils.copyToString(this.resource.getInputStream(), environment.getProperty("spring.banner.charset", Charset.class, StandardCharsets.UTF_8)).         for (PropertyResolver resolver : getPropertyResolvers(environment, sourceClass)) {             banner = resolver.resolvePlaceholders(banner).         }         out.println(banner).     } catch (Exception ex) {         logger.warn("Banner not printable: " + this.resource + " (" + ex.getClass() + ": '" + ex.getMessage() + "')", ex).     } }
false;protected;2;9;;protected List<PropertyResolver> getPropertyResolvers(Environment environment, Class<?> sourceClass) {     List<PropertyResolver> resolvers = new ArrayList<>().     resolvers.add(environment).     resolvers.add(getVersionResolver(sourceClass)).     resolvers.add(getAnsiResolver()).     resolvers.add(getTitleResolver(sourceClass)).     return resolvers. }
false;private;1;6;;private PropertyResolver getVersionResolver(Class<?> sourceClass) {     MutablePropertySources propertySources = new MutablePropertySources().     propertySources.addLast(new MapPropertySource("version", getVersionsMap(sourceClass))).     return new PropertySourcesPropertyResolver(propertySources). }
false;private;1;11;;private Map<String, Object> getVersionsMap(Class<?> sourceClass) {     String appVersion = getApplicationVersion(sourceClass).     String bootVersion = getBootVersion().     Map<String, Object> versions = new HashMap<>().     versions.put("application.version", getVersionString(appVersion, false)).     versions.put("spring-boot.version", getVersionString(bootVersion, false)).     versions.put("application.formatted-version", getVersionString(appVersion, true)).     versions.put("spring-boot.formatted-version", getVersionString(bootVersion, true)).     return versions. }
false;protected;1;4;;protected String getApplicationVersion(Class<?> sourceClass) {     Package sourcePackage = (sourceClass != null) ? sourceClass.getPackage() : null.     return (sourcePackage != null) ? sourcePackage.getImplementationVersion() : null. }
false;protected;0;3;;protected String getBootVersion() {     return SpringBootVersion.getVersion(). }
false;private;2;6;;private String getVersionString(String version, boolean format) {     if (version == null) {         return "".     }     return format ? " (v" + version + ")" : version. }
false;private;0;5;;private PropertyResolver getAnsiResolver() {     MutablePropertySources sources = new MutablePropertySources().     sources.addFirst(new AnsiPropertySource("ansi", true)).     return new PropertySourcesPropertyResolver(sources). }
false;private;1;8;;private PropertyResolver getTitleResolver(Class<?> sourceClass) {     MutablePropertySources sources = new MutablePropertySources().     String applicationTitle = getApplicationTitle(sourceClass).     Map<String, Object> titleMap = Collections.singletonMap("application.title", (applicationTitle != null) ? applicationTitle : "").     sources.addFirst(new MapPropertySource("title", titleMap)).     return new PropertySourcesPropertyResolver(sources). }
false;protected;1;4;;protected String getApplicationTitle(Class<?> sourceClass) {     Package sourcePackage = (sourceClass != null) ? sourceClass.getPackage() : null.     return (sourcePackage != null) ? sourcePackage.getImplementationTitle() : null. }
