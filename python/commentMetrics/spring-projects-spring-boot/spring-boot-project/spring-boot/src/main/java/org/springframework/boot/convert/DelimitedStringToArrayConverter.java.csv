commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(String.class, Object[].class)). }
false;public;2;5;;@Override public boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType) {     return targetType.getElementTypeDescriptor() == null || this.conversionService.canConvert(sourceType, targetType.getElementTypeDescriptor()). }
false;public;3;8;;@Override public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     if (source == null) {         return null.     }     return convert((String) source, sourceType, targetType). }
false;private;3;15;;private Object convert(String source, TypeDescriptor sourceType, TypeDescriptor targetType) {     Delimiter delimiter = targetType.getAnnotation(Delimiter.class).     String[] elements = getElements(source, (delimiter != null) ? delimiter.value() : ",").     TypeDescriptor elementDescriptor = targetType.getElementTypeDescriptor().     Object target = Array.newInstance(elementDescriptor.getType(), elements.length).     for (int i = 0. i < elements.length. i++) {         String sourceElement = elements[i].         Object targetElement = this.conversionService.convert(sourceElement.trim(), sourceType, elementDescriptor).         Array.set(target, i, targetElement).     }     return target. }
false;private;2;4;;private String[] getElements(String source, String delimiter) {     return StringUtils.delimitedListToStringArray(source, Delimiter.NONE.equals(delimiter) ? null : delimiter). }
