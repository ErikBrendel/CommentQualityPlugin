commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean supportsEventType(ResolvableType resolvableType) {     return isAssignableFrom(resolvableType.getRawClass(), EVENT_TYPES). }
false;public;1;4;;@Override public boolean supportsSourceType(Class<?> sourceType) {     return isAssignableFrom(sourceType, SOURCE_TYPES). }
false;private;2;10;;private boolean isAssignableFrom(Class<?> type, Class<?>... supportedTypes) {     if (type != null) {         for (Class<?> supportedType : supportedTypes) {             if (supportedType.isAssignableFrom(type)) {                 return true.             }         }     }     return false. }
false;public;1;20;;@Override public void onApplicationEvent(ApplicationEvent event) {     if (event instanceof ApplicationStartingEvent) {         onApplicationStartingEvent((ApplicationStartingEvent) event).     } else if (event instanceof ApplicationEnvironmentPreparedEvent) {         onApplicationEnvironmentPreparedEvent((ApplicationEnvironmentPreparedEvent) event).     } else if (event instanceof ApplicationPreparedEvent) {         onApplicationPreparedEvent((ApplicationPreparedEvent) event).     } else if (event instanceof ContextClosedEvent && ((ContextClosedEvent) event).getApplicationContext().getParent() == null) {         onContextClosedEvent().     } else if (event instanceof ApplicationFailedEvent) {         onApplicationFailedEvent().     } }
false;private;1;5;;private void onApplicationStartingEvent(ApplicationStartingEvent event) {     this.loggingSystem = LoggingSystem.get(event.getSpringApplication().getClassLoader()).     this.loggingSystem.beforeInitialize(). }
false;private;1;8;;private void onApplicationEnvironmentPreparedEvent(ApplicationEnvironmentPreparedEvent event) {     if (this.loggingSystem == null) {         this.loggingSystem = LoggingSystem.get(event.getSpringApplication().getClassLoader()).     }     initialize(event.getEnvironment(), event.getSpringApplication().getClassLoader()). }
false;private;1;7;;private void onApplicationPreparedEvent(ApplicationPreparedEvent event) {     ConfigurableListableBeanFactory beanFactory = event.getApplicationContext().getBeanFactory().     if (!beanFactory.containsBean(LOGGING_SYSTEM_BEAN_NAME)) {         beanFactory.registerSingleton(LOGGING_SYSTEM_BEAN_NAME, this.loggingSystem).     } }
false;private;0;5;;private void onContextClosedEvent() {     if (this.loggingSystem != null) {         this.loggingSystem.cleanUp().     } }
false;private;0;5;;private void onApplicationFailedEvent() {     if (this.loggingSystem != null) {         this.loggingSystem.cleanUp().     } }
true;protected;2;12;/**  * Initialize the logging system according to preferences expressed through the  * {@link Environment} and the classpath.  * @param environment the environment  * @param classLoader the classloader  */ ;/**  * Initialize the logging system according to preferences expressed through the  * {@link Environment} and the classpath.  * @param environment the environment  * @param classLoader the classloader  */ protected void initialize(ConfigurableEnvironment environment, ClassLoader classLoader) {     new LoggingSystemProperties(environment).apply().     LogFile logFile = LogFile.get(environment).     if (logFile != null) {         logFile.applyToSystemProperties().     }     initializeEarlyLoggingLevel(environment).     initializeSystem(environment, this.loggingSystem, logFile).     initializeFinalLoggingLevels(environment, this.loggingSystem).     registerShutdownHookIfNecessary(environment, this.loggingSystem). }
false;private;1;10;;private void initializeEarlyLoggingLevel(ConfigurableEnvironment environment) {     if (this.parseArgs && this.springBootLogging == null) {         if (isSet(environment, "debug")) {             this.springBootLogging = LogLevel.DEBUG.         }         if (isSet(environment, "trace")) {             this.springBootLogging = LogLevel.TRACE.         }     } }
false;private;2;4;;private boolean isSet(ConfigurableEnvironment environment, String property) {     String value = environment.getProperty(property).     return (value != null && !value.equals("false")). }
false;private;3;22;;private void initializeSystem(ConfigurableEnvironment environment, LoggingSystem system, LogFile logFile) {     LoggingInitializationContext initializationContext = new LoggingInitializationContext(environment).     String logConfig = environment.getProperty(CONFIG_PROPERTY).     if (ignoreLogConfig(logConfig)) {         system.initialize(initializationContext, null, logFile).     } else {         try {             ResourceUtils.getURL(logConfig).openStream().close().             system.initialize(initializationContext, logConfig, logFile).         } catch (Exception ex) {             // NOTE: We can't use the logger here to report the problem             System.err.println("Logging system failed to initialize " + "using configuration from '" + logConfig + "'").             ex.printStackTrace(System.err).             throw new IllegalStateException(ex).         }     } }
false;private;1;3;;private boolean ignoreLogConfig(String logConfig) {     return !StringUtils.hasLength(logConfig) || logConfig.startsWith("-D"). }
false;private;2;7;;private void initializeFinalLoggingLevels(ConfigurableEnvironment environment, LoggingSystem system) {     if (this.springBootLogging != null) {         initializeLogLevel(system, this.springBootLogging).     }     setLogLevels(system, environment). }
false;protected;2;6;;protected void initializeLogLevel(LoggingSystem system, LogLevel level) {     LOG_LEVEL_LOGGERS.getOrDefault(level, Collections.emptyList()).stream().flatMap((logger) -> DEFAULT_GROUP_LOGGERS.getOrDefault(logger, Collections.singletonList(logger)).stream()).forEach((logger) -> system.setLogLevel(logger, level)). }
false;protected;2;19;;protected void setLogLevels(LoggingSystem system, Environment environment) {     if (!(environment instanceof ConfigurableEnvironment)) {         return.     }     Binder binder = Binder.get(environment).     Map<String, String[]> groups = getGroups().     binder.bind(LOGGING_GROUP, STRING_STRINGS_MAP.withExistingValue(groups)).     Map<String, String> levels = binder.bind(LOGGING_LEVEL, STRING_STRING_MAP).orElseGet(Collections::emptyMap).     levels.forEach((name, level) -> {         String[] groupedNames = groups.get(name).         if (ObjectUtils.isEmpty(groupedNames)) {             setLogLevel(system, name, level).         } else {             setLogLevel(system, groupedNames, level).         }     }). }
false;private;0;6;;private Map<String, String[]> getGroups() {     Map<String, String[]> groups = new LinkedHashMap<>().     DEFAULT_GROUP_LOGGERS.forEach((name, loggers) -> groups.put(name, StringUtils.toStringArray(loggers))).     return groups. }
false;private;3;5;;private void setLogLevel(LoggingSystem system, String[] names, String level) {     for (String name : names) {         setLogLevel(system, name, level).     } }
false;private;3;9;;private void setLogLevel(LoggingSystem system, String name, String level) {     try {         name = name.equalsIgnoreCase(LoggingSystem.ROOT_LOGGER_NAME) ? null : name.         system.setLogLevel(name, coerceLogLevel(level)).     } catch (RuntimeException ex) {         this.logger.error("Cannot set level '" + level + "' for '" + name + "'").     } }
false;private;1;7;;private LogLevel coerceLogLevel(String level) {     String trimmedLevel = level.trim().     if ("false".equalsIgnoreCase(trimmedLevel)) {         return LogLevel.OFF.     }     return LogLevel.valueOf(trimmedLevel.toUpperCase(Locale.ENGLISH)). }
false;private;2;12;;private void registerShutdownHookIfNecessary(Environment environment, LoggingSystem loggingSystem) {     boolean registerShutdownHook = environment.getProperty(REGISTER_SHUTDOWN_HOOK_PROPERTY, Boolean.class, false).     if (registerShutdownHook) {         Runnable shutdownHandler = loggingSystem.getShutdownHandler().         if (shutdownHandler != null && shutdownHookRegistered.compareAndSet(false, true)) {             registerShutdownHook(new Thread(shutdownHandler)).         }     } }
false;;1;3;;void registerShutdownHook(Thread shutdownHook) {     Runtime.getRuntime().addShutdownHook(shutdownHook). }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
true;public;1;3;/**  * Sets a custom logging level to be used for Spring Boot and related libraries.  * @param springBootLogging the logging level  */ ;/**  * Sets a custom logging level to be used for Spring Boot and related libraries.  * @param springBootLogging the logging level  */ public void setSpringBootLogging(LogLevel springBootLogging) {     this.springBootLogging = springBootLogging. }
true;public;1;3;/**  * Sets if initialization arguments should be parsed for {@literal debug} and  * {@literal trace} properties (usually defined from {@literal --debug} or  * {@literal --trace} command line args). Defaults to {@code true}.  * @param parseArgs if arguments should be parsed  */ ;/**  * Sets if initialization arguments should be parsed for {@literal debug} and  * {@literal trace} properties (usually defined from {@literal --debug} or  * {@literal --trace} command line args). Defaults to {@code true}.  * @param parseArgs if arguments should be parsed  */ public void setParseArgs(boolean parseArgs) {     this.parseArgs = parseArgs. }
