commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The path to render (usually implemented as a forward), starting with "/". A custom  * controller or servlet path can be used, or if the server supports it, a template  * path (e.g. "/error.jsp").  * @return the path that will be rendered for this error  */ ;/**  * The path to render (usually implemented as a forward), starting with "/". A custom  * controller or servlet path can be used, or if the server supports it, a template  * path (e.g. "/error.jsp").  * @return the path that will be rendered for this error  */ public String getPath() {     return this.path. }
true;public;0;3;/**  * Returns the exception type (or {@code null} for a page that matches by status).  * @return the exception type or {@code null}  */ ;/**  * Returns the exception type (or {@code null} for a page that matches by status).  * @return the exception type or {@code null}  */ public Class<? extends Throwable> getException() {     return this.exception. }
true;public;0;3;/**  * The HTTP status value that this error page matches (or {@code null} for a page that  * matches by exception).  * @return the status or {@code null}  */ ;/**  * The HTTP status value that this error page matches (or {@code null} for a page that  * matches by exception).  * @return the status or {@code null}  */ public HttpStatus getStatus() {     return this.status. }
true;public;0;3;/**  * The HTTP status value that this error page matches.  * @return the status value (or 0 for a page that matches any status)  */ ;/**  * The HTTP status value that this error page matches.  * @return the status value (or 0 for a page that matches any status)  */ public int getStatusCode() {     return (this.status != null) ? this.status.value() : 0. }
true;public;0;3;/**  * The exception type name.  * @return the exception type name (or {@code null} if there is none)  */ ;/**  * The exception type name.  * @return the exception type name (or {@code null} if there is none)  */ public String getExceptionName() {     return (this.exception != null) ? this.exception.getName() : null. }
true;public;0;3;/**  * Return if this error page is a global one (matches all unmatched status and  * exception types).  * @return if this is a global error page  */ ;/**  * Return if this error page is a global one (matches all unmatched status and  * exception types).  * @return if this is a global error page  */ public boolean isGlobal() {     return (this.status == null && this.exception == null). }
false;public;1;19;;@Override public boolean equals(Object obj) {     if (this == obj) {         return true.     }     if (obj == null) {         return false.     }     if (obj instanceof ErrorPage) {         ErrorPage other = (ErrorPage) obj.         boolean rtn = true.         rtn = rtn && ObjectUtils.nullSafeEquals(getExceptionName(), other.getExceptionName()).         rtn = rtn && ObjectUtils.nullSafeEquals(this.path, other.path).         rtn = rtn && this.status == other.status.         return rtn.     }     return false. }
false;public;0;9;;@Override public int hashCode() {     final int prime = 31.     int result = 1.     result = prime * result + ObjectUtils.nullSafeHashCode(getExceptionName()).     result = prime * result + ObjectUtils.nullSafeHashCode(this.path).     result = prime * result + this.getStatusCode().     return result. }
