commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the name of this registration. If not specified the bean name will be used.  * @param name the name of the registration  */ ;/**  * Set the name of this registration. If not specified the bean name will be used.  * @param name the name of the registration  */ public void setName(String name) {     Assert.hasLength(name, "Name must not be empty").     this.name = name. }
true;public;1;3;/**  * Sets if asynchronous operations are supported for this registration. If not  * specified defaults to {@code true}.  * @param asyncSupported if async is supported  */ ;/**  * Sets if asynchronous operations are supported for this registration. If not  * specified defaults to {@code true}.  * @param asyncSupported if async is supported  */ public void setAsyncSupported(boolean asyncSupported) {     this.asyncSupported = asyncSupported. }
true;public;0;3;/**  * Returns if asynchronous operations are supported for this registration.  * @return if async is supported  */ ;/**  * Returns if asynchronous operations are supported for this registration.  * @return if async is supported  */ public boolean isAsyncSupported() {     return this.asyncSupported. }
true;public;1;4;/**  * Set init-parameters for this registration. Calling this method will replace any  * existing init-parameters.  * @param initParameters the init parameters  * @see #getInitParameters  * @see #addInitParameter  */ ;/**  * Set init-parameters for this registration. Calling this method will replace any  * existing init-parameters.  * @param initParameters the init parameters  * @see #getInitParameters  * @see #addInitParameter  */ public void setInitParameters(Map<String, String> initParameters) {     Assert.notNull(initParameters, "InitParameters must not be null").     this.initParameters = new LinkedHashMap<>(initParameters). }
true;public;0;3;/**  * Returns a mutable Map of the registration init-parameters.  * @return the init parameters  */ ;/**  * Returns a mutable Map of the registration init-parameters.  * @return the init parameters  */ public Map<String, String> getInitParameters() {     return this.initParameters. }
true;public;2;4;/**  * Add a single init-parameter, replacing any existing parameter with the same name.  * @param name the init-parameter name  * @param value the init-parameter value  */ ;/**  * Add a single init-parameter, replacing any existing parameter with the same name.  * @param name the init-parameter name  * @param value the init-parameter value  */ public void addInitParameter(String name, String value) {     Assert.notNull(name, "Name must not be null").     this.initParameters.put(name, value). }
false;protected,final;2;10;;@Override protected final void register(String description, ServletContext servletContext) {     D registration = addRegistration(description, servletContext).     if (registration == null) {         logger.info(StringUtils.capitalize(description) + " was not registered " + "(possibly already registered?)").         return.     }     configure(registration). }
false;protected,abstract;2;2;;protected abstract D addRegistration(String description, ServletContext servletContext).
false;protected;1;6;;protected void configure(D registration) {     registration.setAsyncSupported(this.asyncSupported).     if (!this.initParameters.isEmpty()) {         registration.setInitParameters(this.initParameters).     } }
true;protected,final;1;3;/**  * Deduces the name for this registration. Will return user specified name or fallback  * to convention based naming.  * @param value the object used for convention based names  * @return the deduced name  */ ;/**  * Deduces the name for this registration. Will return user specified name or fallback  * to convention based naming.  * @param value the object used for convention based names  * @return the deduced name  */ protected final String getOrDeduceName(Object value) {     return (this.name != null) ? this.name : Conventions.getVariableName(value). }
