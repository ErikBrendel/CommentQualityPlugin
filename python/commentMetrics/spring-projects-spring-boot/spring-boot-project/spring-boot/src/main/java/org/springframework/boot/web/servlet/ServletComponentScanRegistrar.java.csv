commented;modifiers;parameterAmount;loc;comment;code
false;public;2;11;;@Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {     Set<String> packagesToScan = getPackagesToScan(importingClassMetadata).     if (registry.containsBeanDefinition(BEAN_NAME)) {         updatePostProcessor(registry, packagesToScan).     } else {         addPostProcessor(registry, packagesToScan).     } }
false;private;2;10;;private void updatePostProcessor(BeanDefinitionRegistry registry, Set<String> packagesToScan) {     BeanDefinition definition = registry.getBeanDefinition(BEAN_NAME).     ValueHolder constructorArguments = definition.getConstructorArgumentValues().getGenericArgumentValue(Set.class).     @SuppressWarnings("unchecked")     Set<String> mergedPackages = (Set<String>) constructorArguments.getValue().     mergedPackages.addAll(packagesToScan).     constructorArguments.setValue(mergedPackages). }
false;private;2;9;;private void addPostProcessor(BeanDefinitionRegistry registry, Set<String> packagesToScan) {     GenericBeanDefinition beanDefinition = new GenericBeanDefinition().     beanDefinition.setBeanClass(ServletComponentRegisteringPostProcessor.class).     beanDefinition.getConstructorArgumentValues().addGenericArgumentValue(packagesToScan).     beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE).     registry.registerBeanDefinition(BEAN_NAME, beanDefinition). }
false;private;1;14;;private Set<String> getPackagesToScan(AnnotationMetadata metadata) {     AnnotationAttributes attributes = AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(ServletComponentScan.class.getName())).     String[] basePackages = attributes.getStringArray("basePackages").     Class<?>[] basePackageClasses = attributes.getClassArray("basePackageClasses").     Set<String> packagesToScan = new LinkedHashSet<>(Arrays.asList(basePackages)).     for (Class<?> basePackageClass : basePackageClasses) {         packagesToScan.add(ClassUtils.getPackageName(basePackageClass)).     }     if (packagesToScan.isEmpty()) {         packagesToScan.add(ClassUtils.getPackageName(metadata.getClassName())).     }     return packagesToScan. }
