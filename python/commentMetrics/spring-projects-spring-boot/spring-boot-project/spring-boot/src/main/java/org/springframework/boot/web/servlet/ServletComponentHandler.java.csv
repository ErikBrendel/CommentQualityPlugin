commented;modifiers;parameterAmount;loc;comment;code
false;;0;3;;TypeFilter getTypeFilter() {     return this.typeFilter. }
false;protected;1;10;;protected String[] extractUrlPatterns(Map<String, Object> attributes) {     String[] value = (String[]) attributes.get("value").     String[] urlPatterns = (String[]) attributes.get("urlPatterns").     if (urlPatterns.length > 0) {         Assert.state(value.length == 0, "The urlPatterns and value attributes are mutually exclusive.").         return urlPatterns.     }     return value. }
false;protected,final;1;11;;protected final Map<String, String> extractInitParameters(Map<String, Object> attributes) {     Map<String, String> initParameters = new HashMap<>().     for (AnnotationAttributes initParam : (AnnotationAttributes[]) attributes.get("initParams")) {         String name = (String) initParam.get("name").         String value = (String) initParam.get("value").         initParameters.put(name, value).     }     return initParameters. }
false;;2;8;;void handle(ScannedGenericBeanDefinition beanDefinition, BeanDefinitionRegistry registry) {     Map<String, Object> attributes = beanDefinition.getMetadata().getAnnotationAttributes(this.annotationType.getName()).     if (attributes != null) {         doHandle(attributes, beanDefinition, registry).     } }
false;protected,abstract;3;2;;protected abstract void doHandle(Map<String, Object> attributes, ScannedGenericBeanDefinition beanDefinition, BeanDefinitionRegistry registry).
