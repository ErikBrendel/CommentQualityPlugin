commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public void initialize(ConfigurableApplicationContext context) {     ConfigurableEnvironment environment = context.getEnvironment().     List<Class<?>> initializerClasses = getInitializerClasses(environment).     if (!initializerClasses.isEmpty()) {         applyInitializerClasses(context, initializerClasses).     } }
false;private;1;10;;private List<Class<?>> getInitializerClasses(ConfigurableEnvironment env) {     String classNames = env.getProperty(PROPERTY_NAME).     List<Class<?>> classes = new ArrayList<>().     if (StringUtils.hasLength(classNames)) {         for (String className : StringUtils.tokenizeToStringArray(classNames, ",")) {             classes.add(getInitializerClass(className)).         }     }     return classes. }
false;private;1;12;;private Class<?> getInitializerClass(String className) throws LinkageError {     try {         Class<?> initializerClass = ClassUtils.forName(className, ClassUtils.getDefaultClassLoader()).         Assert.isAssignable(ApplicationContextInitializer.class, initializerClass).         return initializerClass.     } catch (ClassNotFoundException ex) {         throw new ApplicationContextException("Failed to load context initializer class [" + className + "]", ex).     } }
false;private;2;9;;private void applyInitializerClasses(ConfigurableApplicationContext context, List<Class<?>> initializerClasses) {     Class<?> contextClass = context.getClass().     List<ApplicationContextInitializer<?>> initializers = new ArrayList<>().     for (Class<?> initializerClass : initializerClasses) {         initializers.add(instantiateInitializer(contextClass, initializerClass)).     }     applyInitializers(context, initializers). }
false;private;2;15;;private ApplicationContextInitializer<?> instantiateInitializer(Class<?> contextClass, Class<?> initializerClass) {     Class<?> requireContextClass = GenericTypeResolver.resolveTypeArgument(initializerClass, ApplicationContextInitializer.class).     Assert.isAssignable(requireContextClass, contextClass, String.format("Could not add context initializer [%s]" + " as its generic parameter [%s] is not assignable " + "from the type of application context used by this " + "context loader [%s]: ", initializerClass.getName(), requireContextClass.getName(), contextClass.getName())).     return (ApplicationContextInitializer<?>) BeanUtils.instantiateClass(initializerClass). }
false;private;2;8;;@SuppressWarnings({ "unchecked", "rawtypes" }) private void applyInitializers(ConfigurableApplicationContext context, List<ApplicationContextInitializer<?>> initializers) {     initializers.sort(new AnnotationAwareOrderComparator()).     for (ApplicationContextInitializer initializer : initializers) {         initializer.initialize(context).     } }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
