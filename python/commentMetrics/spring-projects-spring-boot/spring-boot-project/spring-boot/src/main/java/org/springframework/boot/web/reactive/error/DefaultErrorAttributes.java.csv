commented;modifiers;parameterAmount;loc;comment;code
false;public;2;14;;@Override public Map<String, Object> getErrorAttributes(ServerRequest request, boolean includeStackTrace) {     Map<String, Object> errorAttributes = new LinkedHashMap<>().     errorAttributes.put("timestamp", new Date()).     errorAttributes.put("path", request.path()).     Throwable error = getError(request).     HttpStatus errorStatus = determineHttpStatus(error).     errorAttributes.put("status", errorStatus.value()).     errorAttributes.put("error", errorStatus.getReasonPhrase()).     errorAttributes.put("message", determineMessage(error)).     handleException(errorAttributes, determineException(error), includeStackTrace).     return errorAttributes. }
false;private;1;11;;private HttpStatus determineHttpStatus(Throwable error) {     if (error instanceof ResponseStatusException) {         return ((ResponseStatusException) error).getStatus().     }     ResponseStatus responseStatus = AnnotatedElementUtils.findMergedAnnotation(error.getClass(), ResponseStatus.class).     if (responseStatus != null) {         return responseStatus.code().     }     return HttpStatus.INTERNAL_SERVER_ERROR. }
false;private;1;14;;private String determineMessage(Throwable error) {     if (error instanceof WebExchangeBindException) {         return error.getMessage().     }     if (error instanceof ResponseStatusException) {         return ((ResponseStatusException) error).getReason().     }     ResponseStatus responseStatus = AnnotatedElementUtils.findMergedAnnotation(error.getClass(), ResponseStatus.class).     if (responseStatus != null) {         return responseStatus.reason().     }     return error.getMessage(). }
false;private;1;6;;private Throwable determineException(Throwable error) {     if (error instanceof ResponseStatusException) {         return (error.getCause() != null) ? error.getCause() : error.     }     return error. }
false;private;2;6;;private void addStackTrace(Map<String, Object> errorAttributes, Throwable error) {     StringWriter stackTrace = new StringWriter().     error.printStackTrace(new PrintWriter(stackTrace)).     stackTrace.flush().     errorAttributes.put("trace", stackTrace.toString()). }
false;private;3;15;;private void handleException(Map<String, Object> errorAttributes, Throwable error, boolean includeStackTrace) {     if (this.includeException) {         errorAttributes.put("exception", error.getClass().getName()).     }     if (includeStackTrace) {         addStackTrace(errorAttributes, error).     }     if (error instanceof BindingResult) {         BindingResult result = (BindingResult) error.         if (result.hasErrors()) {             errorAttributes.put("errors", result.getAllErrors()).         }     } }
false;public;1;6;;@Override public Throwable getError(ServerRequest request) {     return (Throwable) request.attribute(ERROR_ATTRIBUTE).orElseThrow(() -> new IllegalStateException("Missing exception attribute in ServerWebExchange")). }
false;public;2;4;;@Override public void storeErrorInformation(Throwable error, ServerWebExchange exchange) {     exchange.getAttributes().putIfAbsent(ERROR_ATTRIBUTE, error). }
