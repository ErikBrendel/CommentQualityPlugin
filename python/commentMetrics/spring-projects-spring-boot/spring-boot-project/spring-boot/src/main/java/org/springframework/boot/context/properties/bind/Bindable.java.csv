# id;timestamp;commentText;codeText;commentWords;codeWords
Bindable -> public Bindable<T> withSuppliedValue(Supplier<T> suppliedValue);1522439295;Create an updated {@link Bindable} instance with a value supplier._@param suppliedValue the supplier for the value_@return an updated {@link Bindable};public Bindable<T> withSuppliedValue(Supplier<T> suppliedValue) {_		return new Bindable<>(this.type, this.boxedType, suppliedValue, NO_ANNOTATIONS)__	};create,an,updated,link,bindable,instance,with,a,value,supplier,param,supplied,value,the,supplier,for,the,value,return,an,updated,link,bindable;public,bindable,t,with,supplied,value,supplier,t,supplied,value,return,new,bindable,this,type,this,boxed,type,supplied,value
Bindable -> public Bindable<T> withSuppliedValue(Supplier<T> suppliedValue);1525416882;Create an updated {@link Bindable} instance with a value supplier._@param suppliedValue the supplier for the value_@return an updated {@link Bindable};public Bindable<T> withSuppliedValue(Supplier<T> suppliedValue) {_		return new Bindable<>(this.type, this.boxedType, suppliedValue, NO_ANNOTATIONS)__	};create,an,updated,link,bindable,instance,with,a,value,supplier,param,supplied,value,the,supplier,for,the,value,return,an,updated,link,bindable;public,bindable,t,with,supplied,value,supplier,t,supplied,value,return,new,bindable,this,type,this,boxed,type,supplied,value
Bindable -> public Bindable<T> withSuppliedValue(Supplier<T> suppliedValue);1532738143;Create an updated {@link Bindable} instance with a value supplier._@param suppliedValue the supplier for the value_@return an updated {@link Bindable};public Bindable<T> withSuppliedValue(Supplier<T> suppliedValue) {_		return new Bindable<>(this.type, this.boxedType, suppliedValue, NO_ANNOTATIONS)__	};create,an,updated,link,bindable,instance,with,a,value,supplier,param,supplied,value,the,supplier,for,the,value,return,an,updated,link,bindable;public,bindable,t,with,supplied,value,supplier,t,supplied,value,return,new,bindable,this,type,this,boxed,type,supplied,value
Bindable -> public ResolvableType getBoxedType();1522439295;Return the boxed type of the item to bind._@return the boxed type for the item being bound;public ResolvableType getBoxedType() {_		return this.boxedType__	};return,the,boxed,type,of,the,item,to,bind,return,the,boxed,type,for,the,item,being,bound;public,resolvable,type,get,boxed,type,return,this,boxed,type
Bindable -> public ResolvableType getBoxedType();1525416882;Return the boxed type of the item to bind._@return the boxed type for the item being bound;public ResolvableType getBoxedType() {_		return this.boxedType__	};return,the,boxed,type,of,the,item,to,bind,return,the,boxed,type,for,the,item,being,bound;public,resolvable,type,get,boxed,type,return,this,boxed,type
Bindable -> public ResolvableType getBoxedType();1532738143;Return the boxed type of the item to bind._@return the boxed type for the item being bound;public ResolvableType getBoxedType() {_		return this.boxedType__	};return,the,boxed,type,of,the,item,to,bind,return,the,boxed,type,for,the,item,being,bound;public,resolvable,type,get,boxed,type,return,this,boxed,type
Bindable -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A getAnnotation(Class<A> type);1518833514;Return a single associated annotations that could affect binding._@param <A> the annotation type_@param type annotation type_@return the associated annotation or {@code null};@SuppressWarnings("unchecked")_	public <A extends Annotation> A getAnnotation(Class<A> type) {_		for (Annotation annotation : this.annotations) {_			if (type.isInstance(annotation)) {_				return (A) annotation__			}_		}_		return null__	};return,a,single,associated,annotations,that,could,affect,binding,param,a,the,annotation,type,param,type,annotation,type,return,the,associated,annotation,or,code,null;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,class,a,type,for,annotation,annotation,this,annotations,if,type,is,instance,annotation,return,a,annotation,return,null
Bindable -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A getAnnotation(Class<A> type);1522079995;Return a single associated annotations that could affect binding._@param <A> the annotation type_@param type annotation type_@return the associated annotation or {@code null};@SuppressWarnings("unchecked")_	public <A extends Annotation> A getAnnotation(Class<A> type) {_		for (Annotation annotation : this.annotations) {_			if (type.isInstance(annotation)) {_				return (A) annotation__			}_		}_		return null__	};return,a,single,associated,annotations,that,could,affect,binding,param,a,the,annotation,type,param,type,annotation,type,return,the,associated,annotation,or,code,null;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,class,a,type,for,annotation,annotation,this,annotations,if,type,is,instance,annotation,return,a,annotation,return,null
Bindable -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A getAnnotation(Class<A> type);1522439295;Return a single associated annotations that could affect binding._@param <A> the annotation type_@param type annotation type_@return the associated annotation or {@code null};@SuppressWarnings("unchecked")_	public <A extends Annotation> A getAnnotation(Class<A> type) {_		for (Annotation annotation : this.annotations) {_			if (type.isInstance(annotation)) {_				return (A) annotation__			}_		}_		return null__	};return,a,single,associated,annotations,that,could,affect,binding,param,a,the,annotation,type,param,type,annotation,type,return,the,associated,annotation,or,code,null;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,class,a,type,for,annotation,annotation,this,annotations,if,type,is,instance,annotation,return,a,annotation,return,null
Bindable -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A getAnnotation(Class<A> type);1525416882;Return a single associated annotations that could affect binding._@param <A> the annotation type_@param type annotation type_@return the associated annotation or {@code null};@SuppressWarnings("unchecked")_	public <A extends Annotation> A getAnnotation(Class<A> type) {_		for (Annotation annotation : this.annotations) {_			if (type.isInstance(annotation)) {_				return (A) annotation__			}_		}_		return null__	};return,a,single,associated,annotations,that,could,affect,binding,param,a,the,annotation,type,param,type,annotation,type,return,the,associated,annotation,or,code,null;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,class,a,type,for,annotation,annotation,this,annotations,if,type,is,instance,annotation,return,a,annotation,return,null
Bindable -> @SuppressWarnings("unchecked") 	public <A extends Annotation> A getAnnotation(Class<A> type);1532738143;Return a single associated annotations that could affect binding._@param <A> the annotation type_@param type annotation type_@return the associated annotation or {@code null};@SuppressWarnings("unchecked")_	public <A extends Annotation> A getAnnotation(Class<A> type) {_		for (Annotation annotation : this.annotations) {_			if (type.isInstance(annotation)) {_				return (A) annotation__			}_		}_		return null__	};return,a,single,associated,annotations,that,could,affect,binding,param,a,the,annotation,type,param,type,annotation,type,return,the,associated,annotation,or,code,null;suppress,warnings,unchecked,public,a,extends,annotation,a,get,annotation,class,a,type,for,annotation,annotation,this,annotations,if,type,is,instance,annotation,return,a,annotation,return,null
Bindable -> public static <T> Bindable<T> of(ResolvableType type);1507173536;Create a new {@link Bindable} of the specified type._@param <T> The source type_@param type the type (must not be {@code null})_@return a {@link Bindable} instance_@see #of(Class);public static <T> Bindable<T> of(ResolvableType type) {_		Assert.notNull(type, "Type must not be null")__		ResolvableType boxedType = box(type)__		return new Bindable<>(type, boxedType, null, NO_ANNOTATIONS)__	};create,a,new,link,bindable,of,the,specified,type,param,t,the,source,type,param,type,the,type,must,not,be,code,null,return,a,link,bindable,instance,see,of,class;public,static,t,bindable,t,of,resolvable,type,type,assert,not,null,type,type,must,not,be,null,resolvable,type,boxed,type,box,type,return,new,bindable,type,boxed,type,null
Bindable -> public static <T> Bindable<T> of(ResolvableType type);1518833514;Create a new {@link Bindable} of the specified type._@param <T> The source type_@param type the type (must not be {@code null})_@return a {@link Bindable} instance_@see #of(Class);public static <T> Bindable<T> of(ResolvableType type) {_		Assert.notNull(type, "Type must not be null")__		ResolvableType boxedType = box(type)__		return new Bindable<>(type, boxedType, null, NO_ANNOTATIONS)__	};create,a,new,link,bindable,of,the,specified,type,param,t,the,source,type,param,type,the,type,must,not,be,code,null,return,a,link,bindable,instance,see,of,class;public,static,t,bindable,t,of,resolvable,type,type,assert,not,null,type,type,must,not,be,null,resolvable,type,boxed,type,box,type,return,new,bindable,type,boxed,type,null
Bindable -> public static <T> Bindable<T> of(ResolvableType type);1522079995;Create a new {@link Bindable} of the specified type._@param <T> The source type_@param type the type (must not be {@code null})_@return a {@link Bindable} instance_@see #of(Class);public static <T> Bindable<T> of(ResolvableType type) {_		Assert.notNull(type, "Type must not be null")__		ResolvableType boxedType = box(type)__		return new Bindable<>(type, boxedType, null, NO_ANNOTATIONS)__	};create,a,new,link,bindable,of,the,specified,type,param,t,the,source,type,param,type,the,type,must,not,be,code,null,return,a,link,bindable,instance,see,of,class;public,static,t,bindable,t,of,resolvable,type,type,assert,not,null,type,type,must,not,be,null,resolvable,type,boxed,type,box,type,return,new,bindable,type,boxed,type,null
Bindable -> public static <T> Bindable<T> of(ResolvableType type);1522439295;Create a new {@link Bindable} of the specified type._@param <T> The source type_@param type the type (must not be {@code null})_@return a {@link Bindable} instance_@see #of(Class);public static <T> Bindable<T> of(ResolvableType type) {_		Assert.notNull(type, "Type must not be null")__		ResolvableType boxedType = box(type)__		return new Bindable<>(type, boxedType, null, NO_ANNOTATIONS)__	};create,a,new,link,bindable,of,the,specified,type,param,t,the,source,type,param,type,the,type,must,not,be,code,null,return,a,link,bindable,instance,see,of,class;public,static,t,bindable,t,of,resolvable,type,type,assert,not,null,type,type,must,not,be,null,resolvable,type,boxed,type,box,type,return,new,bindable,type,boxed,type,null
Bindable -> public static <T> Bindable<T> of(ResolvableType type);1525416882;Create a new {@link Bindable} of the specified type._@param <T> The source type_@param type the type (must not be {@code null})_@return a {@link Bindable} instance_@see #of(Class);public static <T> Bindable<T> of(ResolvableType type) {_		Assert.notNull(type, "Type must not be null")__		ResolvableType boxedType = box(type)__		return new Bindable<>(type, boxedType, null, NO_ANNOTATIONS)__	};create,a,new,link,bindable,of,the,specified,type,param,t,the,source,type,param,type,the,type,must,not,be,code,null,return,a,link,bindable,instance,see,of,class;public,static,t,bindable,t,of,resolvable,type,type,assert,not,null,type,type,must,not,be,null,resolvable,type,boxed,type,box,type,return,new,bindable,type,boxed,type,null
Bindable -> public static <T> Bindable<T> of(ResolvableType type);1532738143;Create a new {@link Bindable} of the specified type._@param <T> the source type_@param type the type (must not be {@code null})_@return a {@link Bindable} instance_@see #of(Class);public static <T> Bindable<T> of(ResolvableType type) {_		Assert.notNull(type, "Type must not be null")__		ResolvableType boxedType = box(type)__		return new Bindable<>(type, boxedType, null, NO_ANNOTATIONS)__	};create,a,new,link,bindable,of,the,specified,type,param,t,the,source,type,param,type,the,type,must,not,be,code,null,return,a,link,bindable,instance,see,of,class;public,static,t,bindable,t,of,resolvable,type,type,assert,not,null,type,type,must,not,be,null,resolvable,type,boxed,type,box,type,return,new,bindable,type,boxed,type,null
Bindable -> public Bindable<T> withAnnotations(Annotation... annotations);1507173536;Create an updated {@link Bindable} instance with the specified annotations._@param annotations the annotations_@return an updated {@link Bindable};public Bindable<T> withAnnotations(Annotation... annotations) {_		return new Bindable<>(this.type, this.boxedType, this.value,_				(annotations == null ? NO_ANNOTATIONS : annotations))__	};create,an,updated,link,bindable,instance,with,the,specified,annotations,param,annotations,the,annotations,return,an,updated,link,bindable;public,bindable,t,with,annotations,annotation,annotations,return,new,bindable,this,type,this,boxed,type,this,value,annotations,null,annotations
Bindable -> public Bindable<T> withAnnotations(Annotation... annotations);1518833514;Create an updated {@link Bindable} instance with the specified annotations._@param annotations the annotations_@return an updated {@link Bindable};public Bindable<T> withAnnotations(Annotation... annotations) {_		return new Bindable<>(this.type, this.boxedType, this.value,_				(annotations == null ? NO_ANNOTATIONS : annotations))__	};create,an,updated,link,bindable,instance,with,the,specified,annotations,param,annotations,the,annotations,return,an,updated,link,bindable;public,bindable,t,with,annotations,annotation,annotations,return,new,bindable,this,type,this,boxed,type,this,value,annotations,null,annotations
Bindable -> public Bindable<T> withAnnotations(Annotation... annotations);1522079995;Create an updated {@link Bindable} instance with the specified annotations._@param annotations the annotations_@return an updated {@link Bindable};public Bindable<T> withAnnotations(Annotation... annotations) {_		return new Bindable<>(this.type, this.boxedType, this.value,_				(annotations == null ? NO_ANNOTATIONS : annotations))__	};create,an,updated,link,bindable,instance,with,the,specified,annotations,param,annotations,the,annotations,return,an,updated,link,bindable;public,bindable,t,with,annotations,annotation,annotations,return,new,bindable,this,type,this,boxed,type,this,value,annotations,null,annotations
Bindable -> public Bindable<T> withAnnotations(Annotation... annotations);1522439295;Create an updated {@link Bindable} instance with the specified annotations._@param annotations the annotations_@return an updated {@link Bindable};public Bindable<T> withAnnotations(Annotation... annotations) {_		return new Bindable<>(this.type, this.boxedType, this.value,_				(annotations == null ? NO_ANNOTATIONS : annotations))__	};create,an,updated,link,bindable,instance,with,the,specified,annotations,param,annotations,the,annotations,return,an,updated,link,bindable;public,bindable,t,with,annotations,annotation,annotations,return,new,bindable,this,type,this,boxed,type,this,value,annotations,null,annotations
Bindable -> public Bindable<T> withAnnotations(Annotation... annotations);1525416882;Create an updated {@link Bindable} instance with the specified annotations._@param annotations the annotations_@return an updated {@link Bindable};public Bindable<T> withAnnotations(Annotation... annotations) {_		return new Bindable<>(this.type, this.boxedType, this.value,_				(annotations != null ? annotations : NO_ANNOTATIONS))__	};create,an,updated,link,bindable,instance,with,the,specified,annotations,param,annotations,the,annotations,return,an,updated,link,bindable;public,bindable,t,with,annotations,annotation,annotations,return,new,bindable,this,type,this,boxed,type,this,value,annotations,null,annotations
Bindable -> public Bindable<T> withAnnotations(Annotation... annotations);1532738143;Create an updated {@link Bindable} instance with the specified annotations._@param annotations the annotations_@return an updated {@link Bindable};public Bindable<T> withAnnotations(Annotation... annotations) {_		return new Bindable<>(this.type, this.boxedType, this.value,_				(annotations != null) ? annotations : NO_ANNOTATIONS)__	};create,an,updated,link,bindable,instance,with,the,specified,annotations,param,annotations,the,annotations,return,an,updated,link,bindable;public,bindable,t,with,annotations,annotation,annotations,return,new,bindable,this,type,this,boxed,type,this,value,annotations,null,annotations
Bindable -> public ResolvableType getType();1507173536;Return the type of the item to bind._@return the type being bound;public ResolvableType getType() {_		return this.type__	};return,the,type,of,the,item,to,bind,return,the,type,being,bound;public,resolvable,type,get,type,return,this,type
Bindable -> public ResolvableType getType();1518833514;Return the type of the item to bind._@return the type being bound;public ResolvableType getType() {_		return this.type__	};return,the,type,of,the,item,to,bind,return,the,type,being,bound;public,resolvable,type,get,type,return,this,type
Bindable -> public ResolvableType getType();1522079995;Return the type of the item to bind._@return the type being bound;public ResolvableType getType() {_		return this.type__	};return,the,type,of,the,item,to,bind,return,the,type,being,bound;public,resolvable,type,get,type,return,this,type
Bindable -> public ResolvableType getType();1522439295;Return the type of the item to bind._@return the type being bound;public ResolvableType getType() {_		return this.type__	};return,the,type,of,the,item,to,bind,return,the,type,being,bound;public,resolvable,type,get,type,return,this,type
Bindable -> public ResolvableType getType();1525416882;Return the type of the item to bind._@return the type being bound;public ResolvableType getType() {_		return this.type__	};return,the,type,of,the,item,to,bind,return,the,type,being,bound;public,resolvable,type,get,type,return,this,type
Bindable -> public ResolvableType getType();1532738143;Return the type of the item to bind._@return the type being bound;public ResolvableType getType() {_		return this.type__	};return,the,type,of,the,item,to,bind,return,the,type,being,bound;public,resolvable,type,get,type,return,this,type
Bindable -> public static <E> Bindable<List<E>> listOf(Class<E> elementType);1507173536;Create a new {@link Bindable} {@link List} of the specified element type._@param <E> the element type_@param elementType the list element type_@return a {@link Bindable} instance;public static <E> Bindable<List<E>> listOf(Class<E> elementType) {_		return of(ResolvableType.forClassWithGenerics(List.class, elementType))__	};create,a,new,link,bindable,link,list,of,the,specified,element,type,param,e,the,element,type,param,element,type,the,list,element,type,return,a,link,bindable,instance;public,static,e,bindable,list,e,list,of,class,e,element,type,return,of,resolvable,type,for,class,with,generics,list,class,element,type
Bindable -> public static <E> Bindable<List<E>> listOf(Class<E> elementType);1518833514;Create a new {@link Bindable} {@link List} of the specified element type._@param <E> the element type_@param elementType the list element type_@return a {@link Bindable} instance;public static <E> Bindable<List<E>> listOf(Class<E> elementType) {_		return of(ResolvableType.forClassWithGenerics(List.class, elementType))__	};create,a,new,link,bindable,link,list,of,the,specified,element,type,param,e,the,element,type,param,element,type,the,list,element,type,return,a,link,bindable,instance;public,static,e,bindable,list,e,list,of,class,e,element,type,return,of,resolvable,type,for,class,with,generics,list,class,element,type
Bindable -> public static <E> Bindable<List<E>> listOf(Class<E> elementType);1522079995;Create a new {@link Bindable} {@link List} of the specified element type._@param <E> the element type_@param elementType the list element type_@return a {@link Bindable} instance;public static <E> Bindable<List<E>> listOf(Class<E> elementType) {_		return of(ResolvableType.forClassWithGenerics(List.class, elementType))__	};create,a,new,link,bindable,link,list,of,the,specified,element,type,param,e,the,element,type,param,element,type,the,list,element,type,return,a,link,bindable,instance;public,static,e,bindable,list,e,list,of,class,e,element,type,return,of,resolvable,type,for,class,with,generics,list,class,element,type
Bindable -> public static <E> Bindable<List<E>> listOf(Class<E> elementType);1522439295;Create a new {@link Bindable} {@link List} of the specified element type._@param <E> the element type_@param elementType the list element type_@return a {@link Bindable} instance;public static <E> Bindable<List<E>> listOf(Class<E> elementType) {_		return of(ResolvableType.forClassWithGenerics(List.class, elementType))__	};create,a,new,link,bindable,link,list,of,the,specified,element,type,param,e,the,element,type,param,element,type,the,list,element,type,return,a,link,bindable,instance;public,static,e,bindable,list,e,list,of,class,e,element,type,return,of,resolvable,type,for,class,with,generics,list,class,element,type
Bindable -> public static <E> Bindable<List<E>> listOf(Class<E> elementType);1525416882;Create a new {@link Bindable} {@link List} of the specified element type._@param <E> the element type_@param elementType the list element type_@return a {@link Bindable} instance;public static <E> Bindable<List<E>> listOf(Class<E> elementType) {_		return of(ResolvableType.forClassWithGenerics(List.class, elementType))__	};create,a,new,link,bindable,link,list,of,the,specified,element,type,param,e,the,element,type,param,element,type,the,list,element,type,return,a,link,bindable,instance;public,static,e,bindable,list,e,list,of,class,e,element,type,return,of,resolvable,type,for,class,with,generics,list,class,element,type
Bindable -> public static <E> Bindable<List<E>> listOf(Class<E> elementType);1532738143;Create a new {@link Bindable} {@link List} of the specified element type._@param <E> the element type_@param elementType the list element type_@return a {@link Bindable} instance;public static <E> Bindable<List<E>> listOf(Class<E> elementType) {_		return of(ResolvableType.forClassWithGenerics(List.class, elementType))__	};create,a,new,link,bindable,link,list,of,the,specified,element,type,param,e,the,element,type,param,element,type,the,list,element,type,return,a,link,bindable,instance;public,static,e,bindable,list,e,list,of,class,e,element,type,return,of,resolvable,type,for,class,with,generics,list,class,element,type
Bindable -> public Bindable<T> withExistingValue(T existingValue);1522439295;Create an updated {@link Bindable} instance with an existing value._@param existingValue the existing value_@return an updated {@link Bindable};public Bindable<T> withExistingValue(T existingValue) {_		Assert.isTrue(_				existingValue == null || this.type.isArray()_						|| this.boxedType.resolve().isInstance(existingValue),_				() -> "ExistingValue must be an instance of " + this.type)__		Supplier<T> value = (existingValue == null ? null : () -> existingValue)__		return new Bindable<>(this.type, this.boxedType, value, NO_ANNOTATIONS)__	};create,an,updated,link,bindable,instance,with,an,existing,value,param,existing,value,the,existing,value,return,an,updated,link,bindable;public,bindable,t,with,existing,value,t,existing,value,assert,is,true,existing,value,null,this,type,is,array,this,boxed,type,resolve,is,instance,existing,value,existing,value,must,be,an,instance,of,this,type,supplier,t,value,existing,value,null,null,existing,value,return,new,bindable,this,type,this,boxed,type,value
Bindable -> public Bindable<T> withExistingValue(T existingValue);1525416882;Create an updated {@link Bindable} instance with an existing value._@param existingValue the existing value_@return an updated {@link Bindable};public Bindable<T> withExistingValue(T existingValue) {_		Assert.isTrue(_				existingValue == null || this.type.isArray()_						|| this.boxedType.resolve().isInstance(existingValue),_				() -> "ExistingValue must be an instance of " + this.type)__		Supplier<T> value = (existingValue != null ? () -> existingValue : null)__		return new Bindable<>(this.type, this.boxedType, value, NO_ANNOTATIONS)__	};create,an,updated,link,bindable,instance,with,an,existing,value,param,existing,value,the,existing,value,return,an,updated,link,bindable;public,bindable,t,with,existing,value,t,existing,value,assert,is,true,existing,value,null,this,type,is,array,this,boxed,type,resolve,is,instance,existing,value,existing,value,must,be,an,instance,of,this,type,supplier,t,value,existing,value,null,existing,value,null,return,new,bindable,this,type,this,boxed,type,value
Bindable -> public Bindable<T> withExistingValue(T existingValue);1532738143;Create an updated {@link Bindable} instance with an existing value._@param existingValue the existing value_@return an updated {@link Bindable};public Bindable<T> withExistingValue(T existingValue) {_		Assert.isTrue(_				existingValue == null || this.type.isArray()_						|| this.boxedType.resolve().isInstance(existingValue),_				() -> "ExistingValue must be an instance of " + this.type)__		Supplier<T> value = (existingValue != null) ? () -> existingValue : null__		return new Bindable<>(this.type, this.boxedType, value, NO_ANNOTATIONS)__	};create,an,updated,link,bindable,instance,with,an,existing,value,param,existing,value,the,existing,value,return,an,updated,link,bindable;public,bindable,t,with,existing,value,t,existing,value,assert,is,true,existing,value,null,this,type,is,array,this,boxed,type,resolve,is,instance,existing,value,existing,value,must,be,an,instance,of,this,type,supplier,t,value,existing,value,null,existing,value,null,return,new,bindable,this,type,this,boxed,type,value
Bindable -> public Supplier<T> getValue();1507173536;Return a supplier that provides the object value or {@code null}._@return the value or {@code null};public Supplier<T> getValue() {_		return this.value__	};return,a,supplier,that,provides,the,object,value,or,code,null,return,the,value,or,code,null;public,supplier,t,get,value,return,this,value
Bindable -> public Supplier<T> getValue();1518833514;Return a supplier that provides the object value or {@code null}._@return the value or {@code null};public Supplier<T> getValue() {_		return this.value__	};return,a,supplier,that,provides,the,object,value,or,code,null,return,the,value,or,code,null;public,supplier,t,get,value,return,this,value
Bindable -> public Supplier<T> getValue();1522079995;Return a supplier that provides the object value or {@code null}._@return the value or {@code null};public Supplier<T> getValue() {_		return this.value__	};return,a,supplier,that,provides,the,object,value,or,code,null,return,the,value,or,code,null;public,supplier,t,get,value,return,this,value
Bindable -> public Supplier<T> getValue();1522439295;Return a supplier that provides the object value or {@code null}._@return the value or {@code null};public Supplier<T> getValue() {_		return this.value__	};return,a,supplier,that,provides,the,object,value,or,code,null,return,the,value,or,code,null;public,supplier,t,get,value,return,this,value
Bindable -> public Supplier<T> getValue();1525416882;Return a supplier that provides the object value or {@code null}._@return the value or {@code null};public Supplier<T> getValue() {_		return this.value__	};return,a,supplier,that,provides,the,object,value,or,code,null,return,the,value,or,code,null;public,supplier,t,get,value,return,this,value
Bindable -> public Supplier<T> getValue();1532738143;Return a supplier that provides the object value or {@code null}._@return the value or {@code null};public Supplier<T> getValue() {_		return this.value__	};return,a,supplier,that,provides,the,object,value,or,code,null,return,the,value,or,code,null;public,supplier,t,get,value,return,this,value
Bindable -> public static <T> Bindable<T> of(Class<T> type);1507173536;Create a new {@link Bindable} of the specified type._@param <T> The source type_@param type the type (must not be {@code null})_@return a {@link Bindable} instance_@see #of(ResolvableType);public static <T> Bindable<T> of(Class<T> type) {_		Assert.notNull(type, "Type must not be null")__		return of(ResolvableType.forClass(type))__	};create,a,new,link,bindable,of,the,specified,type,param,t,the,source,type,param,type,the,type,must,not,be,code,null,return,a,link,bindable,instance,see,of,resolvable,type;public,static,t,bindable,t,of,class,t,type,assert,not,null,type,type,must,not,be,null,return,of,resolvable,type,for,class,type
Bindable -> public static <T> Bindable<T> of(Class<T> type);1518833514;Create a new {@link Bindable} of the specified type._@param <T> The source type_@param type the type (must not be {@code null})_@return a {@link Bindable} instance_@see #of(ResolvableType);public static <T> Bindable<T> of(Class<T> type) {_		Assert.notNull(type, "Type must not be null")__		return of(ResolvableType.forClass(type))__	};create,a,new,link,bindable,of,the,specified,type,param,t,the,source,type,param,type,the,type,must,not,be,code,null,return,a,link,bindable,instance,see,of,resolvable,type;public,static,t,bindable,t,of,class,t,type,assert,not,null,type,type,must,not,be,null,return,of,resolvable,type,for,class,type
Bindable -> public static <T> Bindable<T> of(Class<T> type);1522079995;Create a new {@link Bindable} of the specified type._@param <T> The source type_@param type the type (must not be {@code null})_@return a {@link Bindable} instance_@see #of(ResolvableType);public static <T> Bindable<T> of(Class<T> type) {_		Assert.notNull(type, "Type must not be null")__		return of(ResolvableType.forClass(type))__	};create,a,new,link,bindable,of,the,specified,type,param,t,the,source,type,param,type,the,type,must,not,be,code,null,return,a,link,bindable,instance,see,of,resolvable,type;public,static,t,bindable,t,of,class,t,type,assert,not,null,type,type,must,not,be,null,return,of,resolvable,type,for,class,type
Bindable -> public static <T> Bindable<T> of(Class<T> type);1522439295;Create a new {@link Bindable} of the specified type._@param <T> The source type_@param type the type (must not be {@code null})_@return a {@link Bindable} instance_@see #of(ResolvableType);public static <T> Bindable<T> of(Class<T> type) {_		Assert.notNull(type, "Type must not be null")__		return of(ResolvableType.forClass(type))__	};create,a,new,link,bindable,of,the,specified,type,param,t,the,source,type,param,type,the,type,must,not,be,code,null,return,a,link,bindable,instance,see,of,resolvable,type;public,static,t,bindable,t,of,class,t,type,assert,not,null,type,type,must,not,be,null,return,of,resolvable,type,for,class,type
Bindable -> public static <T> Bindable<T> of(Class<T> type);1525416882;Create a new {@link Bindable} of the specified type._@param <T> The source type_@param type the type (must not be {@code null})_@return a {@link Bindable} instance_@see #of(ResolvableType);public static <T> Bindable<T> of(Class<T> type) {_		Assert.notNull(type, "Type must not be null")__		return of(ResolvableType.forClass(type))__	};create,a,new,link,bindable,of,the,specified,type,param,t,the,source,type,param,type,the,type,must,not,be,code,null,return,a,link,bindable,instance,see,of,resolvable,type;public,static,t,bindable,t,of,class,t,type,assert,not,null,type,type,must,not,be,null,return,of,resolvable,type,for,class,type
Bindable -> public static <T> Bindable<T> of(Class<T> type);1532738143;Create a new {@link Bindable} of the specified type._@param <T> the source type_@param type the type (must not be {@code null})_@return a {@link Bindable} instance_@see #of(ResolvableType);public static <T> Bindable<T> of(Class<T> type) {_		Assert.notNull(type, "Type must not be null")__		return of(ResolvableType.forClass(type))__	};create,a,new,link,bindable,of,the,specified,type,param,t,the,source,type,param,type,the,type,must,not,be,code,null,return,a,link,bindable,instance,see,of,resolvable,type;public,static,t,bindable,t,of,class,t,type,assert,not,null,type,type,must,not,be,null,return,of,resolvable,type,for,class,type
Bindable -> public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType);1507173536;Create a new {@link Bindable} {@link Map} of the specified key and value type._@param <K> the key type_@param <V> the value type_@param keyType the map key type_@param valueType the map value type_@return a {@link Bindable} instance;public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType) {_		return of(ResolvableType.forClassWithGenerics(Map.class, keyType, valueType))__	};create,a,new,link,bindable,link,map,of,the,specified,key,and,value,type,param,k,the,key,type,param,v,the,value,type,param,key,type,the,map,key,type,param,value,type,the,map,value,type,return,a,link,bindable,instance;public,static,k,v,bindable,map,k,v,map,of,class,k,key,type,class,v,value,type,return,of,resolvable,type,for,class,with,generics,map,class,key,type,value,type
Bindable -> public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType);1518833514;Create a new {@link Bindable} {@link Map} of the specified key and value type._@param <K> the key type_@param <V> the value type_@param keyType the map key type_@param valueType the map value type_@return a {@link Bindable} instance;public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType) {_		return of(ResolvableType.forClassWithGenerics(Map.class, keyType, valueType))__	};create,a,new,link,bindable,link,map,of,the,specified,key,and,value,type,param,k,the,key,type,param,v,the,value,type,param,key,type,the,map,key,type,param,value,type,the,map,value,type,return,a,link,bindable,instance;public,static,k,v,bindable,map,k,v,map,of,class,k,key,type,class,v,value,type,return,of,resolvable,type,for,class,with,generics,map,class,key,type,value,type
Bindable -> public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType);1522079995;Create a new {@link Bindable} {@link Map} of the specified key and value type._@param <K> the key type_@param <V> the value type_@param keyType the map key type_@param valueType the map value type_@return a {@link Bindable} instance;public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType) {_		return of(ResolvableType.forClassWithGenerics(Map.class, keyType, valueType))__	};create,a,new,link,bindable,link,map,of,the,specified,key,and,value,type,param,k,the,key,type,param,v,the,value,type,param,key,type,the,map,key,type,param,value,type,the,map,value,type,return,a,link,bindable,instance;public,static,k,v,bindable,map,k,v,map,of,class,k,key,type,class,v,value,type,return,of,resolvable,type,for,class,with,generics,map,class,key,type,value,type
Bindable -> public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType);1522439295;Create a new {@link Bindable} {@link Map} of the specified key and value type._@param <K> the key type_@param <V> the value type_@param keyType the map key type_@param valueType the map value type_@return a {@link Bindable} instance;public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType) {_		return of(ResolvableType.forClassWithGenerics(Map.class, keyType, valueType))__	};create,a,new,link,bindable,link,map,of,the,specified,key,and,value,type,param,k,the,key,type,param,v,the,value,type,param,key,type,the,map,key,type,param,value,type,the,map,value,type,return,a,link,bindable,instance;public,static,k,v,bindable,map,k,v,map,of,class,k,key,type,class,v,value,type,return,of,resolvable,type,for,class,with,generics,map,class,key,type,value,type
Bindable -> public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType);1525416882;Create a new {@link Bindable} {@link Map} of the specified key and value type._@param <K> the key type_@param <V> the value type_@param keyType the map key type_@param valueType the map value type_@return a {@link Bindable} instance;public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType) {_		return of(ResolvableType.forClassWithGenerics(Map.class, keyType, valueType))__	};create,a,new,link,bindable,link,map,of,the,specified,key,and,value,type,param,k,the,key,type,param,v,the,value,type,param,key,type,the,map,key,type,param,value,type,the,map,value,type,return,a,link,bindable,instance;public,static,k,v,bindable,map,k,v,map,of,class,k,key,type,class,v,value,type,return,of,resolvable,type,for,class,with,generics,map,class,key,type,value,type
Bindable -> public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType);1532738143;Create a new {@link Bindable} {@link Map} of the specified key and value type._@param <K> the key type_@param <V> the value type_@param keyType the map key type_@param valueType the map value type_@return a {@link Bindable} instance;public static <K, V> Bindable<Map<K, V>> mapOf(Class<K> keyType, Class<V> valueType) {_		return of(ResolvableType.forClassWithGenerics(Map.class, keyType, valueType))__	};create,a,new,link,bindable,link,map,of,the,specified,key,and,value,type,param,k,the,key,type,param,v,the,value,type,param,key,type,the,map,key,type,param,value,type,the,map,value,type,return,a,link,bindable,instance;public,static,k,v,bindable,map,k,v,map,of,class,k,key,type,class,v,value,type,return,of,resolvable,type,for,class,with,generics,map,class,key,type,value,type
Bindable -> @SuppressWarnings("unchecked") 	public static <T> Bindable<T> ofInstance(T instance);1507173536;Create a new {@link Bindable} of the type of the specified instance with an_existing value equal to the instance._@param <T> The source type_@param instance the instance (must not be {@code null})_@return a {@link Bindable} instance_@see #of(ResolvableType)_@see #withExistingValue(Object);@SuppressWarnings("unchecked")_	public static <T> Bindable<T> ofInstance(T instance) {_		Assert.notNull(instance, "Instance must not be null")__		Class<T> type = (Class<T>) instance.getClass()__		return of(type).withExistingValue(instance)__	};create,a,new,link,bindable,of,the,type,of,the,specified,instance,with,an,existing,value,equal,to,the,instance,param,t,the,source,type,param,instance,the,instance,must,not,be,code,null,return,a,link,bindable,instance,see,of,resolvable,type,see,with,existing,value,object;suppress,warnings,unchecked,public,static,t,bindable,t,of,instance,t,instance,assert,not,null,instance,instance,must,not,be,null,class,t,type,class,t,instance,get,class,return,of,type,with,existing,value,instance
Bindable -> @SuppressWarnings("unchecked") 	public static <T> Bindable<T> ofInstance(T instance);1518833514;Create a new {@link Bindable} of the type of the specified instance with an_existing value equal to the instance._@param <T> The source type_@param instance the instance (must not be {@code null})_@return a {@link Bindable} instance_@see #of(ResolvableType)_@see #withExistingValue(Object);@SuppressWarnings("unchecked")_	public static <T> Bindable<T> ofInstance(T instance) {_		Assert.notNull(instance, "Instance must not be null")__		Class<T> type = (Class<T>) instance.getClass()__		return of(type).withExistingValue(instance)__	};create,a,new,link,bindable,of,the,type,of,the,specified,instance,with,an,existing,value,equal,to,the,instance,param,t,the,source,type,param,instance,the,instance,must,not,be,code,null,return,a,link,bindable,instance,see,of,resolvable,type,see,with,existing,value,object;suppress,warnings,unchecked,public,static,t,bindable,t,of,instance,t,instance,assert,not,null,instance,instance,must,not,be,null,class,t,type,class,t,instance,get,class,return,of,type,with,existing,value,instance
Bindable -> @SuppressWarnings("unchecked") 	public static <T> Bindable<T> ofInstance(T instance);1522079995;Create a new {@link Bindable} of the type of the specified instance with an_existing value equal to the instance._@param <T> The source type_@param instance the instance (must not be {@code null})_@return a {@link Bindable} instance_@see #of(ResolvableType)_@see #withExistingValue(Object);@SuppressWarnings("unchecked")_	public static <T> Bindable<T> ofInstance(T instance) {_		Assert.notNull(instance, "Instance must not be null")__		Class<T> type = (Class<T>) instance.getClass()__		return of(type).withExistingValue(instance)__	};create,a,new,link,bindable,of,the,type,of,the,specified,instance,with,an,existing,value,equal,to,the,instance,param,t,the,source,type,param,instance,the,instance,must,not,be,code,null,return,a,link,bindable,instance,see,of,resolvable,type,see,with,existing,value,object;suppress,warnings,unchecked,public,static,t,bindable,t,of,instance,t,instance,assert,not,null,instance,instance,must,not,be,null,class,t,type,class,t,instance,get,class,return,of,type,with,existing,value,instance
Bindable -> @SuppressWarnings("unchecked") 	public static <T> Bindable<T> ofInstance(T instance);1522439295;Create a new {@link Bindable} of the type of the specified instance with an_existing value equal to the instance._@param <T> The source type_@param instance the instance (must not be {@code null})_@return a {@link Bindable} instance_@see #of(ResolvableType)_@see #withExistingValue(Object);@SuppressWarnings("unchecked")_	public static <T> Bindable<T> ofInstance(T instance) {_		Assert.notNull(instance, "Instance must not be null")__		Class<T> type = (Class<T>) instance.getClass()__		return of(type).withExistingValue(instance)__	};create,a,new,link,bindable,of,the,type,of,the,specified,instance,with,an,existing,value,equal,to,the,instance,param,t,the,source,type,param,instance,the,instance,must,not,be,code,null,return,a,link,bindable,instance,see,of,resolvable,type,see,with,existing,value,object;suppress,warnings,unchecked,public,static,t,bindable,t,of,instance,t,instance,assert,not,null,instance,instance,must,not,be,null,class,t,type,class,t,instance,get,class,return,of,type,with,existing,value,instance
Bindable -> @SuppressWarnings("unchecked") 	public static <T> Bindable<T> ofInstance(T instance);1525416882;Create a new {@link Bindable} of the type of the specified instance with an_existing value equal to the instance._@param <T> The source type_@param instance the instance (must not be {@code null})_@return a {@link Bindable} instance_@see #of(ResolvableType)_@see #withExistingValue(Object);@SuppressWarnings("unchecked")_	public static <T> Bindable<T> ofInstance(T instance) {_		Assert.notNull(instance, "Instance must not be null")__		Class<T> type = (Class<T>) instance.getClass()__		return of(type).withExistingValue(instance)__	};create,a,new,link,bindable,of,the,type,of,the,specified,instance,with,an,existing,value,equal,to,the,instance,param,t,the,source,type,param,instance,the,instance,must,not,be,code,null,return,a,link,bindable,instance,see,of,resolvable,type,see,with,existing,value,object;suppress,warnings,unchecked,public,static,t,bindable,t,of,instance,t,instance,assert,not,null,instance,instance,must,not,be,null,class,t,type,class,t,instance,get,class,return,of,type,with,existing,value,instance
Bindable -> @SuppressWarnings("unchecked") 	public static <T> Bindable<T> ofInstance(T instance);1532738143;Create a new {@link Bindable} of the type of the specified instance with an_existing value equal to the instance._@param <T> the source type_@param instance the instance (must not be {@code null})_@return a {@link Bindable} instance_@see #of(ResolvableType)_@see #withExistingValue(Object);@SuppressWarnings("unchecked")_	public static <T> Bindable<T> ofInstance(T instance) {_		Assert.notNull(instance, "Instance must not be null")__		Class<T> type = (Class<T>) instance.getClass()__		return of(type).withExistingValue(instance)__	};create,a,new,link,bindable,of,the,type,of,the,specified,instance,with,an,existing,value,equal,to,the,instance,param,t,the,source,type,param,instance,the,instance,must,not,be,code,null,return,a,link,bindable,instance,see,of,resolvable,type,see,with,existing,value,object;suppress,warnings,unchecked,public,static,t,bindable,t,of,instance,t,instance,assert,not,null,instance,instance,must,not,be,null,class,t,type,class,t,instance,get,class,return,of,type,with,existing,value,instance
Bindable -> public static <E> Bindable<Set<E>> setOf(Class<E> elementType);1507173536;Create a new {@link Bindable} {@link Set} of the specified element type._@param <E> the element type_@param elementType the set element type_@return a {@link Bindable} instance;public static <E> Bindable<Set<E>> setOf(Class<E> elementType) {_		return of(ResolvableType.forClassWithGenerics(Set.class, elementType))__	};create,a,new,link,bindable,link,set,of,the,specified,element,type,param,e,the,element,type,param,element,type,the,set,element,type,return,a,link,bindable,instance;public,static,e,bindable,set,e,set,of,class,e,element,type,return,of,resolvable,type,for,class,with,generics,set,class,element,type
Bindable -> public static <E> Bindable<Set<E>> setOf(Class<E> elementType);1518833514;Create a new {@link Bindable} {@link Set} of the specified element type._@param <E> the element type_@param elementType the set element type_@return a {@link Bindable} instance;public static <E> Bindable<Set<E>> setOf(Class<E> elementType) {_		return of(ResolvableType.forClassWithGenerics(Set.class, elementType))__	};create,a,new,link,bindable,link,set,of,the,specified,element,type,param,e,the,element,type,param,element,type,the,set,element,type,return,a,link,bindable,instance;public,static,e,bindable,set,e,set,of,class,e,element,type,return,of,resolvable,type,for,class,with,generics,set,class,element,type
Bindable -> public static <E> Bindable<Set<E>> setOf(Class<E> elementType);1522079995;Create a new {@link Bindable} {@link Set} of the specified element type._@param <E> the element type_@param elementType the set element type_@return a {@link Bindable} instance;public static <E> Bindable<Set<E>> setOf(Class<E> elementType) {_		return of(ResolvableType.forClassWithGenerics(Set.class, elementType))__	};create,a,new,link,bindable,link,set,of,the,specified,element,type,param,e,the,element,type,param,element,type,the,set,element,type,return,a,link,bindable,instance;public,static,e,bindable,set,e,set,of,class,e,element,type,return,of,resolvable,type,for,class,with,generics,set,class,element,type
Bindable -> public static <E> Bindable<Set<E>> setOf(Class<E> elementType);1522439295;Create a new {@link Bindable} {@link Set} of the specified element type._@param <E> the element type_@param elementType the set element type_@return a {@link Bindable} instance;public static <E> Bindable<Set<E>> setOf(Class<E> elementType) {_		return of(ResolvableType.forClassWithGenerics(Set.class, elementType))__	};create,a,new,link,bindable,link,set,of,the,specified,element,type,param,e,the,element,type,param,element,type,the,set,element,type,return,a,link,bindable,instance;public,static,e,bindable,set,e,set,of,class,e,element,type,return,of,resolvable,type,for,class,with,generics,set,class,element,type
Bindable -> public static <E> Bindable<Set<E>> setOf(Class<E> elementType);1525416882;Create a new {@link Bindable} {@link Set} of the specified element type._@param <E> the element type_@param elementType the set element type_@return a {@link Bindable} instance;public static <E> Bindable<Set<E>> setOf(Class<E> elementType) {_		return of(ResolvableType.forClassWithGenerics(Set.class, elementType))__	};create,a,new,link,bindable,link,set,of,the,specified,element,type,param,e,the,element,type,param,element,type,the,set,element,type,return,a,link,bindable,instance;public,static,e,bindable,set,e,set,of,class,e,element,type,return,of,resolvable,type,for,class,with,generics,set,class,element,type
Bindable -> public static <E> Bindable<Set<E>> setOf(Class<E> elementType);1532738143;Create a new {@link Bindable} {@link Set} of the specified element type._@param <E> the element type_@param elementType the set element type_@return a {@link Bindable} instance;public static <E> Bindable<Set<E>> setOf(Class<E> elementType) {_		return of(ResolvableType.forClassWithGenerics(Set.class, elementType))__	};create,a,new,link,bindable,link,set,of,the,specified,element,type,param,e,the,element,type,param,element,type,the,set,element,type,return,a,link,bindable,instance;public,static,e,bindable,set,e,set,of,class,e,element,type,return,of,resolvable,type,for,class,with,generics,set,class,element,type
Bindable -> public Annotation[] getAnnotations();1507173536;Return any associated annotations that could affect binding._@return the associated annotations;public Annotation[] getAnnotations() {_		return this.annotations__	};return,any,associated,annotations,that,could,affect,binding,return,the,associated,annotations;public,annotation,get,annotations,return,this,annotations
Bindable -> public Annotation[] getAnnotations();1518833514;Return any associated annotations that could affect binding._@return the associated annotations;public Annotation[] getAnnotations() {_		return this.annotations__	};return,any,associated,annotations,that,could,affect,binding,return,the,associated,annotations;public,annotation,get,annotations,return,this,annotations
Bindable -> public Annotation[] getAnnotations();1522079995;Return any associated annotations that could affect binding._@return the associated annotations;public Annotation[] getAnnotations() {_		return this.annotations__	};return,any,associated,annotations,that,could,affect,binding,return,the,associated,annotations;public,annotation,get,annotations,return,this,annotations
Bindable -> public Annotation[] getAnnotations();1522439295;Return any associated annotations that could affect binding._@return the associated annotations;public Annotation[] getAnnotations() {_		return this.annotations__	};return,any,associated,annotations,that,could,affect,binding,return,the,associated,annotations;public,annotation,get,annotations,return,this,annotations
Bindable -> public Annotation[] getAnnotations();1525416882;Return any associated annotations that could affect binding._@return the associated annotations;public Annotation[] getAnnotations() {_		return this.annotations__	};return,any,associated,annotations,that,could,affect,binding,return,the,associated,annotations;public,annotation,get,annotations,return,this,annotations
Bindable -> public Annotation[] getAnnotations();1532738143;Return any associated annotations that could affect binding._@return the associated annotations;public Annotation[] getAnnotations() {_		return this.annotations__	};return,any,associated,annotations,that,could,affect,binding,return,the,associated,annotations;public,annotation,get,annotations,return,this,annotations
