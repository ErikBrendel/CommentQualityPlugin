# id;timestamp;commentText;codeText;commentWords;codeWords
AtomikosProperties -> public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit);1507173536;Specifies whether or not to use different (and concurrent) threads for two-phase_commit on the participating resources. Setting this to {@literal true} implies that_the commit is more efficient since waiting for acknowledgements is done in_parallel. Defaults to {@literal true}. If you set this to {@literal false}, then_commits will happen in the order that resources are accessed within the_transaction._@param threadedTwoPhaseCommit if threaded two phase commits should be used;public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit) {_		this.threadedTwoPhaseCommit = threadedTwoPhaseCommit__	};specifies,whether,or,not,to,use,different,and,concurrent,threads,for,two,phase,commit,on,the,participating,resources,setting,this,to,literal,true,implies,that,the,commit,is,more,efficient,since,waiting,for,acknowledgements,is,done,in,parallel,defaults,to,literal,true,if,you,set,this,to,literal,false,then,commits,will,happen,in,the,order,that,resources,are,accessed,within,the,transaction,param,threaded,two,phase,commit,if,threaded,two,phase,commits,should,be,used;public,void,set,threaded,two,phase,commit,boolean,threaded,two,phase,commit,this,threaded,two,phase,commit,threaded,two,phase,commit
AtomikosProperties -> public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit);1511157177;Specifies whether or not to use different (and concurrent) threads for two-phase_commit on the participating resources. Setting this to {@literal true} implies that_the commit is more efficient since waiting for acknowledgements is done in_parallel. Defaults to {@literal true}. If you set this to {@literal false}, then_commits will happen in the order that resources are accessed within the_transaction._@param threadedTwoPhaseCommit if threaded two phase commits should be used;public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit) {_		this.threadedTwoPhaseCommit = threadedTwoPhaseCommit__	};specifies,whether,or,not,to,use,different,and,concurrent,threads,for,two,phase,commit,on,the,participating,resources,setting,this,to,literal,true,implies,that,the,commit,is,more,efficient,since,waiting,for,acknowledgements,is,done,in,parallel,defaults,to,literal,true,if,you,set,this,to,literal,false,then,commits,will,happen,in,the,order,that,resources,are,accessed,within,the,transaction,param,threaded,two,phase,commit,if,threaded,two,phase,commits,should,be,used;public,void,set,threaded,two,phase,commit,boolean,threaded,two,phase,commit,this,threaded,two,phase,commit,threaded,two,phase,commit
AtomikosProperties -> public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit);1511221881;Specifies whether or not to use different (and concurrent) threads for two-phase_commit on the participating resources. Setting this to {@literal true} implies that_the commit is more efficient since waiting for acknowledgements is done in_parallel. Defaults to {@literal true}. If you set this to {@literal false}, then_commits will happen in the order that resources are accessed within the_transaction._@param threadedTwoPhaseCommit if threaded two phase commits should be used;public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit) {_		this.threadedTwoPhaseCommit = threadedTwoPhaseCommit__	};specifies,whether,or,not,to,use,different,and,concurrent,threads,for,two,phase,commit,on,the,participating,resources,setting,this,to,literal,true,implies,that,the,commit,is,more,efficient,since,waiting,for,acknowledgements,is,done,in,parallel,defaults,to,literal,true,if,you,set,this,to,literal,false,then,commits,will,happen,in,the,order,that,resources,are,accessed,within,the,transaction,param,threaded,two,phase,commit,if,threaded,two,phase,commits,should,be,used;public,void,set,threaded,two,phase,commit,boolean,threaded,two,phase,commit,this,threaded,two,phase,commit,threaded,two,phase,commit
AtomikosProperties -> public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit);1513063854;Specifies whether or not to use different (and concurrent) threads for two-phase_commit on the participating resources. Setting this to {@literal true} implies that_the commit is more efficient since waiting for acknowledgements is done in_parallel. Defaults to {@literal true}. If you set this to {@literal false}, then_commits will happen in the order that resources are accessed within the_transaction._@param threadedTwoPhaseCommit if threaded two phase commits should be used;public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit) {_		this.threadedTwoPhaseCommit = threadedTwoPhaseCommit__	};specifies,whether,or,not,to,use,different,and,concurrent,threads,for,two,phase,commit,on,the,participating,resources,setting,this,to,literal,true,implies,that,the,commit,is,more,efficient,since,waiting,for,acknowledgements,is,done,in,parallel,defaults,to,literal,true,if,you,set,this,to,literal,false,then,commits,will,happen,in,the,order,that,resources,are,accessed,within,the,transaction,param,threaded,two,phase,commit,if,threaded,two,phase,commits,should,be,used;public,void,set,threaded,two,phase,commit,boolean,threaded,two,phase,commit,this,threaded,two,phase,commit,threaded,two,phase,commit
AtomikosProperties -> public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit);1513204375;Specifies whether or not to use different (and concurrent) threads for two-phase_commit on the participating resources. Setting this to {@literal true} implies that_the commit is more efficient since waiting for acknowledgements is done in_parallel. Defaults to {@literal true}. If you set this to {@literal false}, then_commits will happen in the order that resources are accessed within the_transaction._@param threadedTwoPhaseCommit if threaded two phase commits should be used;public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit) {_		this.threadedTwoPhaseCommit = threadedTwoPhaseCommit__	};specifies,whether,or,not,to,use,different,and,concurrent,threads,for,two,phase,commit,on,the,participating,resources,setting,this,to,literal,true,implies,that,the,commit,is,more,efficient,since,waiting,for,acknowledgements,is,done,in,parallel,defaults,to,literal,true,if,you,set,this,to,literal,false,then,commits,will,happen,in,the,order,that,resources,are,accessed,within,the,transaction,param,threaded,two,phase,commit,if,threaded,two,phase,commits,should,be,used;public,void,set,threaded,two,phase,commit,boolean,threaded,two,phase,commit,this,threaded,two,phase,commit,threaded,two,phase,commit
AtomikosProperties -> public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit);1514792288;Specifies whether or not to use different (and concurrent) threads for two-phase_commit on the participating resources. Setting this to {@literal true} implies that_the commit is more efficient since waiting for acknowledgements is done in_parallel. Defaults to {@literal true}. If you set this to {@literal false}, then_commits will happen in the order that resources are accessed within the_transaction._@param threadedTwoPhaseCommit if threaded two phase commits should be used;public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit) {_		this.threadedTwoPhaseCommit = threadedTwoPhaseCommit__	};specifies,whether,or,not,to,use,different,and,concurrent,threads,for,two,phase,commit,on,the,participating,resources,setting,this,to,literal,true,implies,that,the,commit,is,more,efficient,since,waiting,for,acknowledgements,is,done,in,parallel,defaults,to,literal,true,if,you,set,this,to,literal,false,then,commits,will,happen,in,the,order,that,resources,are,accessed,within,the,transaction,param,threaded,two,phase,commit,if,threaded,two,phase,commits,should,be,used;public,void,set,threaded,two,phase,commit,boolean,threaded,two,phase,commit,this,threaded,two,phase,commit,threaded,two,phase,commit
AtomikosProperties -> public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit);1519387388;Specifies whether or not to use different (and concurrent) threads for two-phase_commit on the participating resources. Setting this to {@literal true} implies that_the commit is more efficient since waiting for acknowledgements is done in_parallel. Defaults to {@literal true}. If you set this to {@literal false}, then_commits will happen in the order that resources are accessed within the_transaction._@param threadedTwoPhaseCommit if threaded two phase commits should be used;public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit) {_		this.threadedTwoPhaseCommit = threadedTwoPhaseCommit__	};specifies,whether,or,not,to,use,different,and,concurrent,threads,for,two,phase,commit,on,the,participating,resources,setting,this,to,literal,true,implies,that,the,commit,is,more,efficient,since,waiting,for,acknowledgements,is,done,in,parallel,defaults,to,literal,true,if,you,set,this,to,literal,false,then,commits,will,happen,in,the,order,that,resources,are,accessed,within,the,transaction,param,threaded,two,phase,commit,if,threaded,two,phase,commits,should,be,used;public,void,set,threaded,two,phase,commit,boolean,threaded,two,phase,commit,this,threaded,two,phase,commit,threaded,two,phase,commit
AtomikosProperties -> public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit);1529570433;Specifies whether or not to use different (and concurrent) threads for two-phase_commit on the participating resources. Setting this to {@literal true} implies that_the commit is more efficient since waiting for acknowledgements is done in_parallel. Defaults to {@literal true}. If you set this to {@literal false}, then_commits will happen in the order that resources are accessed within the_transaction._@param threadedTwoPhaseCommit if threaded two phase commits should be used;public void setThreadedTwoPhaseCommit(boolean threadedTwoPhaseCommit) {_		this.threadedTwoPhaseCommit = threadedTwoPhaseCommit__	};specifies,whether,or,not,to,use,different,and,concurrent,threads,for,two,phase,commit,on,the,participating,resources,setting,this,to,literal,true,implies,that,the,commit,is,more,efficient,since,waiting,for,acknowledgements,is,done,in,parallel,defaults,to,literal,true,if,you,set,this,to,literal,false,then,commits,will,happen,in,the,order,that,resources,are,accessed,within,the,transaction,param,threaded,two,phase,commit,if,threaded,two,phase,commits,should,be,used;public,void,set,threaded,two,phase,commit,boolean,threaded,two,phase,commit,this,threaded,two,phase,commit,threaded,two,phase,commit
AtomikosProperties -> public Properties asProperties();1507173536;Returns the properties as a {@link Properties} object that can be used with_Atomikos._@return the properties;public Properties asProperties() {_		Properties properties = new Properties()__		set(properties, "service", getService())__		set(properties, "max_timeout", getMaxTimeout())__		set(properties, "default_jta_timeout", getDefaultJtaTimeout())__		set(properties, "max_actives", getMaxActives())__		set(properties, "enable_logging", isEnableLogging())__		set(properties, "tm_unique_name", getTransactionManagerUniqueName())__		set(properties, "serial_jta_transactions", isSerialJtaTransactions())__		set(properties, "allow_subtransactions", isAllowSubTransactions())__		set(properties, "force_shutdown_on_vm_exit", isForceShutdownOnVmExit())__		set(properties, "log_base_name", getLogBaseName())__		set(properties, "log_base_dir", getLogBaseDir())__		set(properties, "checkpoint_interval", getCheckpointInterval())__		set(properties, "threaded_2pc", isThreadedTwoPhaseCommit())__		Recovery recovery = getRecovery()__		set(properties, "forget_orphaned_log_entries_delay",_				recovery.getForgetOrphanedLogEntriesDelay())__		set(properties, "recovery_delay", recovery.getDelay())__		set(properties, "oltp_max_retries", recovery.getMaxRetries())__		set(properties, "oltp_retry_interval", recovery.getRetryInterval())__		return properties__	};returns,the,properties,as,a,link,properties,object,that,can,be,used,with,atomikos,return,the,properties;public,properties,as,properties,properties,properties,new,properties,set,properties,service,get,service,set,properties,get,max,timeout,set,properties,get,default,jta,timeout,set,properties,get,max,actives,set,properties,is,enable,logging,set,properties,get,transaction,manager,unique,name,set,properties,is,serial,jta,transactions,set,properties,is,allow,sub,transactions,set,properties,is,force,shutdown,on,vm,exit,set,properties,get,log,base,name,set,properties,get,log,base,dir,set,properties,get,checkpoint,interval,set,properties,is,threaded,two,phase,commit,recovery,recovery,get,recovery,set,properties,recovery,get,forget,orphaned,log,entries,delay,set,properties,recovery,get,delay,set,properties,recovery,get,max,retries,set,properties,recovery,get,retry,interval,return,properties
AtomikosProperties -> public Properties asProperties();1511157177;Returns the properties as a {@link Properties} object that can be used with_Atomikos._@return the properties;public Properties asProperties() {_		Properties properties = new Properties()__		set(properties, "service", getService())__		set(properties, "max_timeout", getMaxTimeout())__		set(properties, "default_jta_timeout", getDefaultJtaTimeout())__		set(properties, "max_actives", getMaxActives())__		set(properties, "enable_logging", isEnableLogging())__		set(properties, "tm_unique_name", getTransactionManagerUniqueName())__		set(properties, "serial_jta_transactions", isSerialJtaTransactions())__		set(properties, "allow_subtransactions", isAllowSubTransactions())__		set(properties, "force_shutdown_on_vm_exit", isForceShutdownOnVmExit())__		set(properties, "log_base_name", getLogBaseName())__		set(properties, "log_base_dir", getLogBaseDir())__		set(properties, "checkpoint_interval", getCheckpointInterval())__		set(properties, "threaded_2pc", isThreadedTwoPhaseCommit())__		Recovery recovery = getRecovery()__		set(properties, "forget_orphaned_log_entries_delay",_				recovery.getForgetOrphanedLogEntriesDelay())__		set(properties, "recovery_delay", recovery.getDelay())__		set(properties, "oltp_max_retries", recovery.getMaxRetries())__		set(properties, "oltp_retry_interval", recovery.getRetryInterval())__		return properties__	};returns,the,properties,as,a,link,properties,object,that,can,be,used,with,atomikos,return,the,properties;public,properties,as,properties,properties,properties,new,properties,set,properties,service,get,service,set,properties,get,max,timeout,set,properties,get,default,jta,timeout,set,properties,get,max,actives,set,properties,is,enable,logging,set,properties,get,transaction,manager,unique,name,set,properties,is,serial,jta,transactions,set,properties,is,allow,sub,transactions,set,properties,is,force,shutdown,on,vm,exit,set,properties,get,log,base,name,set,properties,get,log,base,dir,set,properties,get,checkpoint,interval,set,properties,is,threaded,two,phase,commit,recovery,recovery,get,recovery,set,properties,recovery,get,forget,orphaned,log,entries,delay,set,properties,recovery,get,delay,set,properties,recovery,get,max,retries,set,properties,recovery,get,retry,interval,return,properties
AtomikosProperties -> public Properties asProperties();1511221881;Returns the properties as a {@link Properties} object that can be used with_Atomikos._@return the properties;public Properties asProperties() {_		Properties properties = new Properties()__		set(properties, "service", getService())__		set(properties, "max_timeout", getMaxTimeout())__		set(properties, "default_jta_timeout", getDefaultJtaTimeout())__		set(properties, "max_actives", getMaxActives())__		set(properties, "enable_logging", isEnableLogging())__		set(properties, "tm_unique_name", getTransactionManagerUniqueName())__		set(properties, "serial_jta_transactions", isSerialJtaTransactions())__		set(properties, "allow_subtransactions", isAllowSubTransactions())__		set(properties, "force_shutdown_on_vm_exit", isForceShutdownOnVmExit())__		set(properties, "log_base_name", getLogBaseName())__		set(properties, "log_base_dir", getLogBaseDir())__		set(properties, "checkpoint_interval", getCheckpointInterval())__		set(properties, "threaded_2pc", isThreadedTwoPhaseCommit())__		Recovery recovery = getRecovery()__		set(properties, "forget_orphaned_log_entries_delay",_				recovery.getForgetOrphanedLogEntriesDelay())__		set(properties, "recovery_delay", recovery.getDelay())__		set(properties, "oltp_max_retries", recovery.getMaxRetries())__		set(properties, "oltp_retry_interval", recovery.getRetryInterval())__		return properties__	};returns,the,properties,as,a,link,properties,object,that,can,be,used,with,atomikos,return,the,properties;public,properties,as,properties,properties,properties,new,properties,set,properties,service,get,service,set,properties,get,max,timeout,set,properties,get,default,jta,timeout,set,properties,get,max,actives,set,properties,is,enable,logging,set,properties,get,transaction,manager,unique,name,set,properties,is,serial,jta,transactions,set,properties,is,allow,sub,transactions,set,properties,is,force,shutdown,on,vm,exit,set,properties,get,log,base,name,set,properties,get,log,base,dir,set,properties,get,checkpoint,interval,set,properties,is,threaded,two,phase,commit,recovery,recovery,get,recovery,set,properties,recovery,get,forget,orphaned,log,entries,delay,set,properties,recovery,get,delay,set,properties,recovery,get,max,retries,set,properties,recovery,get,retry,interval,return,properties
AtomikosProperties -> public Properties asProperties();1513063854;Returns the properties as a {@link Properties} object that can be used with_Atomikos._@return the properties;public Properties asProperties() {_		Properties properties = new Properties()__		set(properties, "service", getService())__		set(properties, "max_timeout", getMaxTimeout())__		set(properties, "default_jta_timeout", getDefaultJtaTimeout())__		set(properties, "max_actives", getMaxActives())__		set(properties, "enable_logging", isEnableLogging())__		set(properties, "tm_unique_name", getTransactionManagerUniqueName())__		set(properties, "serial_jta_transactions", isSerialJtaTransactions())__		set(properties, "allow_subtransactions", isAllowSubTransactions())__		set(properties, "force_shutdown_on_vm_exit", isForceShutdownOnVmExit())__		set(properties, "default_max_wait_time_on_shutdown",_				getDefaultMaxWaitTimeOnShutdown())__		set(properties, "log_base_name", getLogBaseName())__		set(properties, "log_base_dir", getLogBaseDir())__		set(properties, "checkpoint_interval", getCheckpointInterval())__		set(properties, "threaded_2pc", isThreadedTwoPhaseCommit())__		Recovery recovery = getRecovery()__		set(properties, "forget_orphaned_log_entries_delay",_				recovery.getForgetOrphanedLogEntriesDelay())__		set(properties, "recovery_delay", recovery.getDelay())__		set(properties, "oltp_max_retries", recovery.getMaxRetries())__		set(properties, "oltp_retry_interval", recovery.getRetryInterval())__		return properties__	};returns,the,properties,as,a,link,properties,object,that,can,be,used,with,atomikos,return,the,properties;public,properties,as,properties,properties,properties,new,properties,set,properties,service,get,service,set,properties,get,max,timeout,set,properties,get,default,jta,timeout,set,properties,get,max,actives,set,properties,is,enable,logging,set,properties,get,transaction,manager,unique,name,set,properties,is,serial,jta,transactions,set,properties,is,allow,sub,transactions,set,properties,is,force,shutdown,on,vm,exit,set,properties,get,default,max,wait,time,on,shutdown,set,properties,get,log,base,name,set,properties,get,log,base,dir,set,properties,get,checkpoint,interval,set,properties,is,threaded,two,phase,commit,recovery,recovery,get,recovery,set,properties,recovery,get,forget,orphaned,log,entries,delay,set,properties,recovery,get,delay,set,properties,recovery,get,max,retries,set,properties,recovery,get,retry,interval,return,properties
AtomikosProperties -> public Properties asProperties();1513204375;Returns the properties as a {@link Properties} object that can be used with_Atomikos._@return the properties;public Properties asProperties() {_		Properties properties = new Properties()__		set(properties, "service", getService())__		set(properties, "max_timeout", getMaxTimeout())__		set(properties, "default_jta_timeout", getDefaultJtaTimeout())__		set(properties, "max_actives", getMaxActives())__		set(properties, "enable_logging", isEnableLogging())__		set(properties, "tm_unique_name", getTransactionManagerUniqueName())__		set(properties, "serial_jta_transactions", isSerialJtaTransactions())__		set(properties, "allow_subtransactions", isAllowSubTransactions())__		set(properties, "force_shutdown_on_vm_exit", isForceShutdownOnVmExit())__		set(properties, "default_max_wait_time_on_shutdown",_				getDefaultMaxWaitTimeOnShutdown())__		set(properties, "log_base_name", getLogBaseName())__		set(properties, "log_base_dir", getLogBaseDir())__		set(properties, "checkpoint_interval", getCheckpointInterval())__		set(properties, "threaded_2pc", isThreadedTwoPhaseCommit())__		Recovery recovery = getRecovery()__		set(properties, "forget_orphaned_log_entries_delay",_				recovery.getForgetOrphanedLogEntriesDelay())__		set(properties, "recovery_delay", recovery.getDelay())__		set(properties, "oltp_max_retries", recovery.getMaxRetries())__		set(properties, "oltp_retry_interval", recovery.getRetryInterval())__		return properties__	};returns,the,properties,as,a,link,properties,object,that,can,be,used,with,atomikos,return,the,properties;public,properties,as,properties,properties,properties,new,properties,set,properties,service,get,service,set,properties,get,max,timeout,set,properties,get,default,jta,timeout,set,properties,get,max,actives,set,properties,is,enable,logging,set,properties,get,transaction,manager,unique,name,set,properties,is,serial,jta,transactions,set,properties,is,allow,sub,transactions,set,properties,is,force,shutdown,on,vm,exit,set,properties,get,default,max,wait,time,on,shutdown,set,properties,get,log,base,name,set,properties,get,log,base,dir,set,properties,get,checkpoint,interval,set,properties,is,threaded,two,phase,commit,recovery,recovery,get,recovery,set,properties,recovery,get,forget,orphaned,log,entries,delay,set,properties,recovery,get,delay,set,properties,recovery,get,max,retries,set,properties,recovery,get,retry,interval,return,properties
AtomikosProperties -> public Properties asProperties();1514792288;Returns the properties as a {@link Properties} object that can be used with_Atomikos._@return the properties;public Properties asProperties() {_		Properties properties = new Properties()__		set(properties, "service", getService())__		set(properties, "max_timeout", getMaxTimeout())__		set(properties, "default_jta_timeout", getDefaultJtaTimeout())__		set(properties, "max_actives", getMaxActives())__		set(properties, "enable_logging", isEnableLogging())__		set(properties, "tm_unique_name", getTransactionManagerUniqueName())__		set(properties, "serial_jta_transactions", isSerialJtaTransactions())__		set(properties, "allow_subtransactions", isAllowSubTransactions())__		set(properties, "force_shutdown_on_vm_exit", isForceShutdownOnVmExit())__		set(properties, "default_max_wait_time_on_shutdown",_				getDefaultMaxWaitTimeOnShutdown())__		set(properties, "log_base_name", getLogBaseName())__		set(properties, "log_base_dir", getLogBaseDir())__		set(properties, "checkpoint_interval", getCheckpointInterval())__		set(properties, "threaded_2pc", isThreadedTwoPhaseCommit())__		Recovery recovery = getRecovery()__		set(properties, "forget_orphaned_log_entries_delay",_				recovery.getForgetOrphanedLogEntriesDelay())__		set(properties, "recovery_delay", recovery.getDelay())__		set(properties, "oltp_max_retries", recovery.getMaxRetries())__		set(properties, "oltp_retry_interval", recovery.getRetryInterval())__		return properties__	};returns,the,properties,as,a,link,properties,object,that,can,be,used,with,atomikos,return,the,properties;public,properties,as,properties,properties,properties,new,properties,set,properties,service,get,service,set,properties,get,max,timeout,set,properties,get,default,jta,timeout,set,properties,get,max,actives,set,properties,is,enable,logging,set,properties,get,transaction,manager,unique,name,set,properties,is,serial,jta,transactions,set,properties,is,allow,sub,transactions,set,properties,is,force,shutdown,on,vm,exit,set,properties,get,default,max,wait,time,on,shutdown,set,properties,get,log,base,name,set,properties,get,log,base,dir,set,properties,get,checkpoint,interval,set,properties,is,threaded,two,phase,commit,recovery,recovery,get,recovery,set,properties,recovery,get,forget,orphaned,log,entries,delay,set,properties,recovery,get,delay,set,properties,recovery,get,max,retries,set,properties,recovery,get,retry,interval,return,properties
AtomikosProperties -> public Properties asProperties();1519387388;Returns the properties as a {@link Properties} object that can be used with_Atomikos._@return the properties;public Properties asProperties() {_		Properties properties = new Properties()__		set(properties, "service", getService())__		set(properties, "max_timeout", getMaxTimeout())__		set(properties, "default_jta_timeout", getDefaultJtaTimeout())__		set(properties, "max_actives", getMaxActives())__		set(properties, "enable_logging", isEnableLogging())__		set(properties, "tm_unique_name", getTransactionManagerUniqueName())__		set(properties, "serial_jta_transactions", isSerialJtaTransactions())__		set(properties, "allow_subtransactions", isAllowSubTransactions())__		set(properties, "force_shutdown_on_vm_exit", isForceShutdownOnVmExit())__		set(properties, "default_max_wait_time_on_shutdown",_				getDefaultMaxWaitTimeOnShutdown())__		set(properties, "log_base_name", getLogBaseName())__		set(properties, "log_base_dir", getLogBaseDir())__		set(properties, "checkpoint_interval", getCheckpointInterval())__		set(properties, "threaded_2pc", isThreadedTwoPhaseCommit())__		Recovery recovery = getRecovery()__		set(properties, "forget_orphaned_log_entries_delay",_				recovery.getForgetOrphanedLogEntriesDelay())__		set(properties, "recovery_delay", recovery.getDelay())__		set(properties, "oltp_max_retries", recovery.getMaxRetries())__		set(properties, "oltp_retry_interval", recovery.getRetryInterval())__		return properties__	};returns,the,properties,as,a,link,properties,object,that,can,be,used,with,atomikos,return,the,properties;public,properties,as,properties,properties,properties,new,properties,set,properties,service,get,service,set,properties,get,max,timeout,set,properties,get,default,jta,timeout,set,properties,get,max,actives,set,properties,is,enable,logging,set,properties,get,transaction,manager,unique,name,set,properties,is,serial,jta,transactions,set,properties,is,allow,sub,transactions,set,properties,is,force,shutdown,on,vm,exit,set,properties,get,default,max,wait,time,on,shutdown,set,properties,get,log,base,name,set,properties,get,log,base,dir,set,properties,get,checkpoint,interval,set,properties,is,threaded,two,phase,commit,recovery,recovery,get,recovery,set,properties,recovery,get,forget,orphaned,log,entries,delay,set,properties,recovery,get,delay,set,properties,recovery,get,max,retries,set,properties,recovery,get,retry,interval,return,properties
AtomikosProperties -> public Properties asProperties();1529570433;Returns the properties as a {@link Properties} object that can be used with_Atomikos._@return the properties;public Properties asProperties() {_		Properties properties = new Properties()__		set(properties, "service", getService())__		set(properties, "max_timeout", getMaxTimeout())__		set(properties, "default_jta_timeout", getDefaultJtaTimeout())__		set(properties, "max_actives", getMaxActives())__		set(properties, "enable_logging", isEnableLogging())__		set(properties, "tm_unique_name", getTransactionManagerUniqueName())__		set(properties, "serial_jta_transactions", isSerialJtaTransactions())__		set(properties, "allow_subtransactions", isAllowSubTransactions())__		set(properties, "force_shutdown_on_vm_exit", isForceShutdownOnVmExit())__		set(properties, "default_max_wait_time_on_shutdown",_				getDefaultMaxWaitTimeOnShutdown())__		set(properties, "log_base_name", getLogBaseName())__		set(properties, "log_base_dir", getLogBaseDir())__		set(properties, "checkpoint_interval", getCheckpointInterval())__		set(properties, "threaded_2pc", isThreadedTwoPhaseCommit())__		Recovery recovery = getRecovery()__		set(properties, "forget_orphaned_log_entries_delay",_				recovery.getForgetOrphanedLogEntriesDelay())__		set(properties, "recovery_delay", recovery.getDelay())__		set(properties, "oltp_max_retries", recovery.getMaxRetries())__		set(properties, "oltp_retry_interval", recovery.getRetryInterval())__		return properties__	};returns,the,properties,as,a,link,properties,object,that,can,be,used,with,atomikos,return,the,properties;public,properties,as,properties,properties,properties,new,properties,set,properties,service,get,service,set,properties,get,max,timeout,set,properties,get,default,jta,timeout,set,properties,get,max,actives,set,properties,is,enable,logging,set,properties,get,transaction,manager,unique,name,set,properties,is,serial,jta,transactions,set,properties,is,allow,sub,transactions,set,properties,is,force,shutdown,on,vm,exit,set,properties,get,default,max,wait,time,on,shutdown,set,properties,get,log,base,name,set,properties,get,log,base,dir,set,properties,get,checkpoint,interval,set,properties,is,threaded,two,phase,commit,recovery,recovery,get,recovery,set,properties,recovery,get,forget,orphaned,log,entries,delay,set,properties,recovery,get,delay,set,properties,recovery,get,max,retries,set,properties,recovery,get,retry,interval,return,properties
AtomikosProperties -> public void setLogBaseName(String logBaseName);1507173536;Specifies the transactions log file base name. Defaults to {@literal tmlog}. The_transactions logs are stored in files using this name appended with a number and_the extension {@literal .log}. At checkpoint, a new transactions log file is_created and the number is incremented._@param logBaseName the log base name;public void setLogBaseName(String logBaseName) {_		this.logBaseName = logBaseName__	};specifies,the,transactions,log,file,base,name,defaults,to,literal,tmlog,the,transactions,logs,are,stored,in,files,using,this,name,appended,with,a,number,and,the,extension,literal,log,at,checkpoint,a,new,transactions,log,file,is,created,and,the,number,is,incremented,param,log,base,name,the,log,base,name;public,void,set,log,base,name,string,log,base,name,this,log,base,name,log,base,name
AtomikosProperties -> public void setLogBaseName(String logBaseName);1511157177;Specifies the transactions log file base name. Defaults to {@literal tmlog}. The_transactions logs are stored in files using this name appended with a number and_the extension {@literal .log}. At checkpoint, a new transactions log file is_created and the number is incremented._@param logBaseName the log base name;public void setLogBaseName(String logBaseName) {_		this.logBaseName = logBaseName__	};specifies,the,transactions,log,file,base,name,defaults,to,literal,tmlog,the,transactions,logs,are,stored,in,files,using,this,name,appended,with,a,number,and,the,extension,literal,log,at,checkpoint,a,new,transactions,log,file,is,created,and,the,number,is,incremented,param,log,base,name,the,log,base,name;public,void,set,log,base,name,string,log,base,name,this,log,base,name,log,base,name
AtomikosProperties -> public void setLogBaseName(String logBaseName);1511221881;Specifies the transactions log file base name. Defaults to {@literal tmlog}. The_transactions logs are stored in files using this name appended with a number and_the extension {@literal .log}. At checkpoint, a new transactions log file is_created and the number is incremented._@param logBaseName the log base name;public void setLogBaseName(String logBaseName) {_		this.logBaseName = logBaseName__	};specifies,the,transactions,log,file,base,name,defaults,to,literal,tmlog,the,transactions,logs,are,stored,in,files,using,this,name,appended,with,a,number,and,the,extension,literal,log,at,checkpoint,a,new,transactions,log,file,is,created,and,the,number,is,incremented,param,log,base,name,the,log,base,name;public,void,set,log,base,name,string,log,base,name,this,log,base,name,log,base,name
AtomikosProperties -> public void setLogBaseName(String logBaseName);1513063854;Specifies the transactions log file base name. Defaults to {@literal tmlog}. The_transactions logs are stored in files using this name appended with a number and_the extension {@literal .log}. At checkpoint, a new transactions log file is_created and the number is incremented._@param logBaseName the log base name;public void setLogBaseName(String logBaseName) {_		this.logBaseName = logBaseName__	};specifies,the,transactions,log,file,base,name,defaults,to,literal,tmlog,the,transactions,logs,are,stored,in,files,using,this,name,appended,with,a,number,and,the,extension,literal,log,at,checkpoint,a,new,transactions,log,file,is,created,and,the,number,is,incremented,param,log,base,name,the,log,base,name;public,void,set,log,base,name,string,log,base,name,this,log,base,name,log,base,name
AtomikosProperties -> public void setLogBaseName(String logBaseName);1513204375;Specifies the transactions log file base name. Defaults to {@literal tmlog}. The_transactions logs are stored in files using this name appended with a number and_the extension {@literal .log}. At checkpoint, a new transactions log file is_created and the number is incremented._@param logBaseName the log base name;public void setLogBaseName(String logBaseName) {_		this.logBaseName = logBaseName__	};specifies,the,transactions,log,file,base,name,defaults,to,literal,tmlog,the,transactions,logs,are,stored,in,files,using,this,name,appended,with,a,number,and,the,extension,literal,log,at,checkpoint,a,new,transactions,log,file,is,created,and,the,number,is,incremented,param,log,base,name,the,log,base,name;public,void,set,log,base,name,string,log,base,name,this,log,base,name,log,base,name
AtomikosProperties -> public void setLogBaseName(String logBaseName);1514792288;Specifies the transactions log file base name. Defaults to {@literal tmlog}. The_transactions logs are stored in files using this name appended with a number and_the extension {@literal .log}. At checkpoint, a new transactions log file is_created and the number is incremented._@param logBaseName the log base name;public void setLogBaseName(String logBaseName) {_		this.logBaseName = logBaseName__	};specifies,the,transactions,log,file,base,name,defaults,to,literal,tmlog,the,transactions,logs,are,stored,in,files,using,this,name,appended,with,a,number,and,the,extension,literal,log,at,checkpoint,a,new,transactions,log,file,is,created,and,the,number,is,incremented,param,log,base,name,the,log,base,name;public,void,set,log,base,name,string,log,base,name,this,log,base,name,log,base,name
AtomikosProperties -> public void setLogBaseName(String logBaseName);1519387388;Specifies the transactions log file base name. Defaults to {@literal tmlog}. The_transactions logs are stored in files using this name appended with a number and_the extension {@literal .log}. At checkpoint, a new transactions log file is_created and the number is incremented._@param logBaseName the log base name;public void setLogBaseName(String logBaseName) {_		this.logBaseName = logBaseName__	};specifies,the,transactions,log,file,base,name,defaults,to,literal,tmlog,the,transactions,logs,are,stored,in,files,using,this,name,appended,with,a,number,and,the,extension,literal,log,at,checkpoint,a,new,transactions,log,file,is,created,and,the,number,is,incremented,param,log,base,name,the,log,base,name;public,void,set,log,base,name,string,log,base,name,this,log,base,name,log,base,name
AtomikosProperties -> public void setLogBaseName(String logBaseName);1529570433;Specifies the transactions log file base name. Defaults to {@literal tmlog}. The_transactions logs are stored in files using this name appended with a number and_the extension {@literal .log}. At checkpoint, a new transactions log file is_created and the number is incremented._@param logBaseName the log base name;public void setLogBaseName(String logBaseName) {_		this.logBaseName = logBaseName__	};specifies,the,transactions,log,file,base,name,defaults,to,literal,tmlog,the,transactions,logs,are,stored,in,files,using,this,name,appended,with,a,number,and,the,extension,literal,log,at,checkpoint,a,new,transactions,log,file,is,created,and,the,number,is,incremented,param,log,base,name,the,log,base,name;public,void,set,log,base,name,string,log,base,name,this,log,base,name,log,base,name
AtomikosProperties -> public void setService(String service);1507173536;Specifies the transaction manager implementation that should be started. There is_no default value and this must be set. Generally,_{@literal com.atomikos.icatch.standalone.UserTransactionServiceFactory} is the_value you should set._@param service the service;public void setService(String service) {_		this.service = service__	};specifies,the,transaction,manager,implementation,that,should,be,started,there,is,no,default,value,and,this,must,be,set,generally,literal,com,atomikos,icatch,standalone,user,transaction,service,factory,is,the,value,you,should,set,param,service,the,service;public,void,set,service,string,service,this,service,service
AtomikosProperties -> public void setService(String service);1511157177;Specifies the transaction manager implementation that should be started. There is_no default value and this must be set. Generally,_{@literal com.atomikos.icatch.standalone.UserTransactionServiceFactory} is the_value you should set._@param service the service;public void setService(String service) {_		this.service = service__	};specifies,the,transaction,manager,implementation,that,should,be,started,there,is,no,default,value,and,this,must,be,set,generally,literal,com,atomikos,icatch,standalone,user,transaction,service,factory,is,the,value,you,should,set,param,service,the,service;public,void,set,service,string,service,this,service,service
AtomikosProperties -> public void setService(String service);1511221881;Specifies the transaction manager implementation that should be started. There is_no default value and this must be set. Generally,_{@literal com.atomikos.icatch.standalone.UserTransactionServiceFactory} is the_value you should set._@param service the service;public void setService(String service) {_		this.service = service__	};specifies,the,transaction,manager,implementation,that,should,be,started,there,is,no,default,value,and,this,must,be,set,generally,literal,com,atomikos,icatch,standalone,user,transaction,service,factory,is,the,value,you,should,set,param,service,the,service;public,void,set,service,string,service,this,service,service
AtomikosProperties -> public void setService(String service);1513063854;Specifies the transaction manager implementation that should be started. There is_no default value and this must be set. Generally,_{@literal com.atomikos.icatch.standalone.UserTransactionServiceFactory} is the_value you should set._@param service the service;public void setService(String service) {_		this.service = service__	};specifies,the,transaction,manager,implementation,that,should,be,started,there,is,no,default,value,and,this,must,be,set,generally,literal,com,atomikos,icatch,standalone,user,transaction,service,factory,is,the,value,you,should,set,param,service,the,service;public,void,set,service,string,service,this,service,service
AtomikosProperties -> public void setService(String service);1513204375;Specifies the transaction manager implementation that should be started. There is_no default value and this must be set. Generally,_{@literal com.atomikos.icatch.standalone.UserTransactionServiceFactory} is the_value you should set._@param service the service;public void setService(String service) {_		this.service = service__	};specifies,the,transaction,manager,implementation,that,should,be,started,there,is,no,default,value,and,this,must,be,set,generally,literal,com,atomikos,icatch,standalone,user,transaction,service,factory,is,the,value,you,should,set,param,service,the,service;public,void,set,service,string,service,this,service,service
AtomikosProperties -> public void setService(String service);1514792288;Specifies the transaction manager implementation that should be started. There is_no default value and this must be set. Generally,_{@literal com.atomikos.icatch.standalone.UserTransactionServiceFactory} is the_value you should set._@param service the service;public void setService(String service) {_		this.service = service__	};specifies,the,transaction,manager,implementation,that,should,be,started,there,is,no,default,value,and,this,must,be,set,generally,literal,com,atomikos,icatch,standalone,user,transaction,service,factory,is,the,value,you,should,set,param,service,the,service;public,void,set,service,string,service,this,service,service
AtomikosProperties -> public void setService(String service);1519387388;Specifies the transaction manager implementation that should be started. There is_no default value and this must be set. Generally,_{@literal com.atomikos.icatch.standalone.UserTransactionServiceFactory} is the_value you should set._@param service the service;public void setService(String service) {_		this.service = service__	};specifies,the,transaction,manager,implementation,that,should,be,started,there,is,no,default,value,and,this,must,be,set,generally,literal,com,atomikos,icatch,standalone,user,transaction,service,factory,is,the,value,you,should,set,param,service,the,service;public,void,set,service,string,service,this,service,service
AtomikosProperties -> public void setService(String service);1529570433;Specifies the transaction manager implementation that should be started. There is_no default value and this must be set. Generally,_{@literal com.atomikos.icatch.standalone.UserTransactionServiceFactory} is the_value you should set._@param service the service;public void setService(String service) {_		this.service = service__	};specifies,the,transaction,manager,implementation,that,should,be,started,there,is,no,default,value,and,this,must,be,set,generally,literal,com,atomikos,icatch,standalone,user,transaction,service,factory,is,the,value,you,should,set,param,service,the,service;public,void,set,service,string,service,this,service,service
AtomikosProperties -> public void setSerialJtaTransactions(boolean serialJtaTransactions);1507173536;Specifies if subtransactions should be joined when possible. Defaults to true. When_false, no attempt to call {@code XAResource.start(TM_JOIN)} will be made for_different but related subtransactions. This setting has no effect on resource_access within one and the same transaction. If you don't use subtransactions then_this setting can be ignored._@param serialJtaTransactions if serial JTA transaction are supported;public void setSerialJtaTransactions(boolean serialJtaTransactions) {_		this.serialJtaTransactions = serialJtaTransactions__	};specifies,if,subtransactions,should,be,joined,when,possible,defaults,to,true,when,false,no,attempt,to,call,code,xaresource,start,will,be,made,for,different,but,related,subtransactions,this,setting,has,no,effect,on,resource,access,within,one,and,the,same,transaction,if,you,don,t,use,subtransactions,then,this,setting,can,be,ignored,param,serial,jta,transactions,if,serial,jta,transaction,are,supported;public,void,set,serial,jta,transactions,boolean,serial,jta,transactions,this,serial,jta,transactions,serial,jta,transactions
AtomikosProperties -> public void setSerialJtaTransactions(boolean serialJtaTransactions);1511157177;Specifies if subtransactions should be joined when possible. Defaults to true. When_false, no attempt to call {@code XAResource.start(TM_JOIN)} will be made for_different but related subtransactions. This setting has no effect on resource_access within one and the same transaction. If you don't use subtransactions then_this setting can be ignored._@param serialJtaTransactions if serial JTA transaction are supported;public void setSerialJtaTransactions(boolean serialJtaTransactions) {_		this.serialJtaTransactions = serialJtaTransactions__	};specifies,if,subtransactions,should,be,joined,when,possible,defaults,to,true,when,false,no,attempt,to,call,code,xaresource,start,will,be,made,for,different,but,related,subtransactions,this,setting,has,no,effect,on,resource,access,within,one,and,the,same,transaction,if,you,don,t,use,subtransactions,then,this,setting,can,be,ignored,param,serial,jta,transactions,if,serial,jta,transaction,are,supported;public,void,set,serial,jta,transactions,boolean,serial,jta,transactions,this,serial,jta,transactions,serial,jta,transactions
AtomikosProperties -> public void setSerialJtaTransactions(boolean serialJtaTransactions);1511221881;Specifies if subtransactions should be joined when possible. Defaults to true. When_false, no attempt to call {@code XAResource.start(TM_JOIN)} will be made for_different but related subtransactions. This setting has no effect on resource_access within one and the same transaction. If you don't use subtransactions then_this setting can be ignored._@param serialJtaTransactions if serial JTA transaction are supported;public void setSerialJtaTransactions(boolean serialJtaTransactions) {_		this.serialJtaTransactions = serialJtaTransactions__	};specifies,if,subtransactions,should,be,joined,when,possible,defaults,to,true,when,false,no,attempt,to,call,code,xaresource,start,will,be,made,for,different,but,related,subtransactions,this,setting,has,no,effect,on,resource,access,within,one,and,the,same,transaction,if,you,don,t,use,subtransactions,then,this,setting,can,be,ignored,param,serial,jta,transactions,if,serial,jta,transaction,are,supported;public,void,set,serial,jta,transactions,boolean,serial,jta,transactions,this,serial,jta,transactions,serial,jta,transactions
AtomikosProperties -> public void setSerialJtaTransactions(boolean serialJtaTransactions);1513063854;Specifies if subtransactions should be joined when possible. Defaults to true. When_false, no attempt to call {@code XAResource.start(TM_JOIN)} will be made for_different but related subtransactions. This setting has no effect on resource_access within one and the same transaction. If you don't use subtransactions then_this setting can be ignored._@param serialJtaTransactions if serial JTA transaction are supported;public void setSerialJtaTransactions(boolean serialJtaTransactions) {_		this.serialJtaTransactions = serialJtaTransactions__	};specifies,if,subtransactions,should,be,joined,when,possible,defaults,to,true,when,false,no,attempt,to,call,code,xaresource,start,will,be,made,for,different,but,related,subtransactions,this,setting,has,no,effect,on,resource,access,within,one,and,the,same,transaction,if,you,don,t,use,subtransactions,then,this,setting,can,be,ignored,param,serial,jta,transactions,if,serial,jta,transaction,are,supported;public,void,set,serial,jta,transactions,boolean,serial,jta,transactions,this,serial,jta,transactions,serial,jta,transactions
AtomikosProperties -> public void setSerialJtaTransactions(boolean serialJtaTransactions);1513204375;Specifies if subtransactions should be joined when possible. Defaults to true. When_false, no attempt to call {@code XAResource.start(TM_JOIN)} will be made for_different but related subtransactions. This setting has no effect on resource_access within one and the same transaction. If you don't use subtransactions then_this setting can be ignored._@param serialJtaTransactions if serial JTA transaction are supported;public void setSerialJtaTransactions(boolean serialJtaTransactions) {_		this.serialJtaTransactions = serialJtaTransactions__	};specifies,if,subtransactions,should,be,joined,when,possible,defaults,to,true,when,false,no,attempt,to,call,code,xaresource,start,will,be,made,for,different,but,related,subtransactions,this,setting,has,no,effect,on,resource,access,within,one,and,the,same,transaction,if,you,don,t,use,subtransactions,then,this,setting,can,be,ignored,param,serial,jta,transactions,if,serial,jta,transaction,are,supported;public,void,set,serial,jta,transactions,boolean,serial,jta,transactions,this,serial,jta,transactions,serial,jta,transactions
AtomikosProperties -> public void setSerialJtaTransactions(boolean serialJtaTransactions);1514792288;Specifies if subtransactions should be joined when possible. Defaults to true. When_false, no attempt to call {@code XAResource.start(TM_JOIN)} will be made for_different but related subtransactions. This setting has no effect on resource_access within one and the same transaction. If you don't use subtransactions then_this setting can be ignored._@param serialJtaTransactions if serial JTA transactions are supported;public void setSerialJtaTransactions(boolean serialJtaTransactions) {_		this.serialJtaTransactions = serialJtaTransactions__	};specifies,if,subtransactions,should,be,joined,when,possible,defaults,to,true,when,false,no,attempt,to,call,code,xaresource,start,will,be,made,for,different,but,related,subtransactions,this,setting,has,no,effect,on,resource,access,within,one,and,the,same,transaction,if,you,don,t,use,subtransactions,then,this,setting,can,be,ignored,param,serial,jta,transactions,if,serial,jta,transactions,are,supported;public,void,set,serial,jta,transactions,boolean,serial,jta,transactions,this,serial,jta,transactions,serial,jta,transactions
AtomikosProperties -> public void setSerialJtaTransactions(boolean serialJtaTransactions);1519387388;Specifies if subtransactions should be joined when possible. Defaults to true. When_false, no attempt to call {@code XAResource.start(TM_JOIN)} will be made for_different but related subtransactions. This setting has no effect on resource_access within one and the same transaction. If you don't use subtransactions then_this setting can be ignored._@param serialJtaTransactions if serial JTA transactions are supported;public void setSerialJtaTransactions(boolean serialJtaTransactions) {_		this.serialJtaTransactions = serialJtaTransactions__	};specifies,if,subtransactions,should,be,joined,when,possible,defaults,to,true,when,false,no,attempt,to,call,code,xaresource,start,will,be,made,for,different,but,related,subtransactions,this,setting,has,no,effect,on,resource,access,within,one,and,the,same,transaction,if,you,don,t,use,subtransactions,then,this,setting,can,be,ignored,param,serial,jta,transactions,if,serial,jta,transactions,are,supported;public,void,set,serial,jta,transactions,boolean,serial,jta,transactions,this,serial,jta,transactions,serial,jta,transactions
AtomikosProperties -> public void setSerialJtaTransactions(boolean serialJtaTransactions);1529570433;Specifies if subtransactions should be joined when possible. Defaults to true. When_false, no attempt to call {@code XAResource.start(TM_JOIN)} will be made for_different but related subtransactions. This setting has no effect on resource_access within one and the same transaction. If you don't use subtransactions then_this setting can be ignored._@param serialJtaTransactions if serial JTA transactions are supported;public void setSerialJtaTransactions(boolean serialJtaTransactions) {_		this.serialJtaTransactions = serialJtaTransactions__	};specifies,if,subtransactions,should,be,joined,when,possible,defaults,to,true,when,false,no,attempt,to,call,code,xaresource,start,will,be,made,for,different,but,related,subtransactions,this,setting,has,no,effect,on,resource,access,within,one,and,the,same,transaction,if,you,don,t,use,subtransactions,then,this,setting,can,be,ignored,param,serial,jta,transactions,if,serial,jta,transactions,are,supported;public,void,set,serial,jta,transactions,boolean,serial,jta,transactions,this,serial,jta,transactions,serial,jta,transactions
AtomikosProperties -> public void setMaxActives(int maxActives);1507173536;Specifies the maximum number of active transactions. Defaults to {@literal 50}. A_negative value means infinite amount. You will get an {@code IllegalStateException}_with error message "Max number of active transactions reached" if you call_{@code UserTransaction.begin()} while there are already n concurrent transactions_running, n being this value._@param maxActives the max activities;public void setMaxActives(int maxActives) {_		this.maxActives = maxActives__	};specifies,the,maximum,number,of,active,transactions,defaults,to,literal,50,a,negative,value,means,infinite,amount,you,will,get,an,code,illegal,state,exception,with,error,message,max,number,of,active,transactions,reached,if,you,call,code,user,transaction,begin,while,there,are,already,n,concurrent,transactions,running,n,being,this,value,param,max,actives,the,max,activities;public,void,set,max,actives,int,max,actives,this,max,actives,max,actives
AtomikosProperties -> public void setMaxActives(int maxActives);1511157177;Specifies the maximum number of active transactions. Defaults to {@literal 50}. A_negative value means infinite amount. You will get an {@code IllegalStateException}_with error message "Max number of active transactions reached" if you call_{@code UserTransaction.begin()} while there are already n concurrent transactions_running, n being this value._@param maxActives the max activities;public void setMaxActives(int maxActives) {_		this.maxActives = maxActives__	};specifies,the,maximum,number,of,active,transactions,defaults,to,literal,50,a,negative,value,means,infinite,amount,you,will,get,an,code,illegal,state,exception,with,error,message,max,number,of,active,transactions,reached,if,you,call,code,user,transaction,begin,while,there,are,already,n,concurrent,transactions,running,n,being,this,value,param,max,actives,the,max,activities;public,void,set,max,actives,int,max,actives,this,max,actives,max,actives
AtomikosProperties -> public void setMaxActives(int maxActives);1511221881;Specifies the maximum number of active transactions. Defaults to {@literal 50}. A_negative value means infinite amount. You will get an {@code IllegalStateException}_with error message "Max number of active transactions reached" if you call_{@code UserTransaction.begin()} while there are already n concurrent transactions_running, n being this value._@param maxActives the max activities;public void setMaxActives(int maxActives) {_		this.maxActives = maxActives__	};specifies,the,maximum,number,of,active,transactions,defaults,to,literal,50,a,negative,value,means,infinite,amount,you,will,get,an,code,illegal,state,exception,with,error,message,max,number,of,active,transactions,reached,if,you,call,code,user,transaction,begin,while,there,are,already,n,concurrent,transactions,running,n,being,this,value,param,max,actives,the,max,activities;public,void,set,max,actives,int,max,actives,this,max,actives,max,actives
AtomikosProperties -> public void setMaxActives(int maxActives);1513063854;Specifies the maximum number of active transactions. Defaults to {@literal 50}. A_negative value means infinite amount. You will get an {@code IllegalStateException}_with error message "Max number of active transactions reached" if you call_{@code UserTransaction.begin()} while there are already n concurrent transactions_running, n being this value._@param maxActives the max activities;public void setMaxActives(int maxActives) {_		this.maxActives = maxActives__	};specifies,the,maximum,number,of,active,transactions,defaults,to,literal,50,a,negative,value,means,infinite,amount,you,will,get,an,code,illegal,state,exception,with,error,message,max,number,of,active,transactions,reached,if,you,call,code,user,transaction,begin,while,there,are,already,n,concurrent,transactions,running,n,being,this,value,param,max,actives,the,max,activities;public,void,set,max,actives,int,max,actives,this,max,actives,max,actives
AtomikosProperties -> public void setMaxActives(int maxActives);1513204375;Specifies the maximum number of active transactions. Defaults to {@literal 50}. A_negative value means infinite amount. You will get an {@code IllegalStateException}_with error message "Max number of active transactions reached" if you call_{@code UserTransaction.begin()} while there are already n concurrent transactions_running, n being this value._@param maxActives the max activities;public void setMaxActives(int maxActives) {_		this.maxActives = maxActives__	};specifies,the,maximum,number,of,active,transactions,defaults,to,literal,50,a,negative,value,means,infinite,amount,you,will,get,an,code,illegal,state,exception,with,error,message,max,number,of,active,transactions,reached,if,you,call,code,user,transaction,begin,while,there,are,already,n,concurrent,transactions,running,n,being,this,value,param,max,actives,the,max,activities;public,void,set,max,actives,int,max,actives,this,max,actives,max,actives
AtomikosProperties -> public void setMaxActives(int maxActives);1514792288;Specifies the maximum number of active transactions. Defaults to {@literal 50}. A_negative value means infinite amount. You will get an {@code IllegalStateException}_with error message "Max number of active transactions reached" if you call_{@code UserTransaction.begin()} while there are already n concurrent transactions_running, n being this value._@param maxActives the max activities;public void setMaxActives(int maxActives) {_		this.maxActives = maxActives__	};specifies,the,maximum,number,of,active,transactions,defaults,to,literal,50,a,negative,value,means,infinite,amount,you,will,get,an,code,illegal,state,exception,with,error,message,max,number,of,active,transactions,reached,if,you,call,code,user,transaction,begin,while,there,are,already,n,concurrent,transactions,running,n,being,this,value,param,max,actives,the,max,activities;public,void,set,max,actives,int,max,actives,this,max,actives,max,actives
AtomikosProperties -> public void setMaxActives(int maxActives);1519387388;Specifies the maximum number of active transactions. Defaults to {@literal 50}. A_negative value means infinite amount. You will get an {@code IllegalStateException}_with error message "Max number of active transactions reached" if you call_{@code UserTransaction.begin()} while there are already n concurrent transactions_running, n being this value._@param maxActives the max activities;public void setMaxActives(int maxActives) {_		this.maxActives = maxActives__	};specifies,the,maximum,number,of,active,transactions,defaults,to,literal,50,a,negative,value,means,infinite,amount,you,will,get,an,code,illegal,state,exception,with,error,message,max,number,of,active,transactions,reached,if,you,call,code,user,transaction,begin,while,there,are,already,n,concurrent,transactions,running,n,being,this,value,param,max,actives,the,max,activities;public,void,set,max,actives,int,max,actives,this,max,actives,max,actives
AtomikosProperties -> public void setMaxActives(int maxActives);1529570433;Specifies the maximum number of active transactions. Defaults to {@literal 50}. A_negative value means infinite amount. You will get an {@code IllegalStateException}_with error message "Max number of active transactions reached" if you call_{@code UserTransaction.begin()} while there are already n concurrent transactions_running, n being this value._@param maxActives the max activities;public void setMaxActives(int maxActives) {_		this.maxActives = maxActives__	};specifies,the,maximum,number,of,active,transactions,defaults,to,literal,50,a,negative,value,means,infinite,amount,you,will,get,an,code,illegal,state,exception,with,error,message,max,number,of,active,transactions,reached,if,you,call,code,user,transaction,begin,while,there,are,already,n,concurrent,transactions,running,n,being,this,value,param,max,actives,the,max,activities;public,void,set,max,actives,int,max,actives,this,max,actives,max,actives
AtomikosProperties -> public void setCheckpointInterval(long checkpointInterval);1507173536;Specifies the interval between checkpoints. A checkpoint reduces the log file size_at the expense of adding some overhead in the runtime. Defaults to {@literal 500}._@param checkpointInterval the checkpoint interval;public void setCheckpointInterval(long checkpointInterval) {_		this.checkpointInterval = checkpointInterval__	};specifies,the,interval,between,checkpoints,a,checkpoint,reduces,the,log,file,size,at,the,expense,of,adding,some,overhead,in,the,runtime,defaults,to,literal,500,param,checkpoint,interval,the,checkpoint,interval;public,void,set,checkpoint,interval,long,checkpoint,interval,this,checkpoint,interval,checkpoint,interval
AtomikosProperties -> public void setCheckpointInterval(long checkpointInterval);1511157177;Specifies the interval between checkpoints. A checkpoint reduces the log file size_at the expense of adding some overhead in the runtime. Defaults to {@literal 500}._@param checkpointInterval the checkpoint interval;public void setCheckpointInterval(long checkpointInterval) {_		this.checkpointInterval = checkpointInterval__	};specifies,the,interval,between,checkpoints,a,checkpoint,reduces,the,log,file,size,at,the,expense,of,adding,some,overhead,in,the,runtime,defaults,to,literal,500,param,checkpoint,interval,the,checkpoint,interval;public,void,set,checkpoint,interval,long,checkpoint,interval,this,checkpoint,interval,checkpoint,interval
AtomikosProperties -> public void setCheckpointInterval(long checkpointInterval);1511221881;Specifies the interval between checkpoints. A checkpoint reduces the log file size_at the expense of adding some overhead in the runtime. Defaults to {@literal 500}._@param checkpointInterval the checkpoint interval;public void setCheckpointInterval(long checkpointInterval) {_		this.checkpointInterval = checkpointInterval__	};specifies,the,interval,between,checkpoints,a,checkpoint,reduces,the,log,file,size,at,the,expense,of,adding,some,overhead,in,the,runtime,defaults,to,literal,500,param,checkpoint,interval,the,checkpoint,interval;public,void,set,checkpoint,interval,long,checkpoint,interval,this,checkpoint,interval,checkpoint,interval
AtomikosProperties -> public void setCheckpointInterval(long checkpointInterval);1513063854;Specifies the interval between checkpoints. A checkpoint reduces the log file size_at the expense of adding some overhead in the runtime. Defaults to {@literal 500}._@param checkpointInterval the checkpoint interval;public void setCheckpointInterval(long checkpointInterval) {_		this.checkpointInterval = checkpointInterval__	};specifies,the,interval,between,checkpoints,a,checkpoint,reduces,the,log,file,size,at,the,expense,of,adding,some,overhead,in,the,runtime,defaults,to,literal,500,param,checkpoint,interval,the,checkpoint,interval;public,void,set,checkpoint,interval,long,checkpoint,interval,this,checkpoint,interval,checkpoint,interval
AtomikosProperties -> public void setCheckpointInterval(long checkpointInterval);1513204375;Specifies the interval between checkpoints. A checkpoint reduces the log file size_at the expense of adding some overhead in the runtime. Defaults to {@literal 500}._@param checkpointInterval the checkpoint interval;public void setCheckpointInterval(long checkpointInterval) {_		this.checkpointInterval = checkpointInterval__	};specifies,the,interval,between,checkpoints,a,checkpoint,reduces,the,log,file,size,at,the,expense,of,adding,some,overhead,in,the,runtime,defaults,to,literal,500,param,checkpoint,interval,the,checkpoint,interval;public,void,set,checkpoint,interval,long,checkpoint,interval,this,checkpoint,interval,checkpoint,interval
AtomikosProperties -> public void setCheckpointInterval(long checkpointInterval);1514792288;Specifies the interval between checkpoints. A checkpoint reduces the log file size_at the expense of adding some overhead in the runtime. Defaults to {@literal 500}._@param checkpointInterval the checkpoint interval;public void setCheckpointInterval(long checkpointInterval) {_		this.checkpointInterval = checkpointInterval__	};specifies,the,interval,between,checkpoints,a,checkpoint,reduces,the,log,file,size,at,the,expense,of,adding,some,overhead,in,the,runtime,defaults,to,literal,500,param,checkpoint,interval,the,checkpoint,interval;public,void,set,checkpoint,interval,long,checkpoint,interval,this,checkpoint,interval,checkpoint,interval
AtomikosProperties -> public void setCheckpointInterval(long checkpointInterval);1519387388;Specifies the interval between checkpoints. A checkpoint reduces the log file size_at the expense of adding some overhead in the runtime. Defaults to {@literal 500}._@param checkpointInterval the checkpoint interval;public void setCheckpointInterval(long checkpointInterval) {_		this.checkpointInterval = checkpointInterval__	};specifies,the,interval,between,checkpoints,a,checkpoint,reduces,the,log,file,size,at,the,expense,of,adding,some,overhead,in,the,runtime,defaults,to,literal,500,param,checkpoint,interval,the,checkpoint,interval;public,void,set,checkpoint,interval,long,checkpoint,interval,this,checkpoint,interval,checkpoint,interval
AtomikosProperties -> public void setCheckpointInterval(long checkpointInterval);1529570433;Specifies the interval between checkpoints. A checkpoint reduces the log file size_at the expense of adding some overhead in the runtime. Defaults to {@literal 500}._@param checkpointInterval the checkpoint interval;public void setCheckpointInterval(long checkpointInterval) {_		this.checkpointInterval = checkpointInterval__	};specifies,the,interval,between,checkpoints,a,checkpoint,reduces,the,log,file,size,at,the,expense,of,adding,some,overhead,in,the,runtime,defaults,to,literal,500,param,checkpoint,interval,the,checkpoint,interval;public,void,set,checkpoint,interval,long,checkpoint,interval,this,checkpoint,interval,checkpoint,interval
AtomikosProperties -> public void setEnableLogging(boolean enableLogging);1507173536;Specifies if disk logging should be enabled or not. Defaults to true. It is useful_for JUnit testing, or to profile code without seeing the transaction manager's_activity as a hot spot but this should never be disabled on production or data_integrity cannot be guaranteed._@param enableLogging if logging is enabled;public void setEnableLogging(boolean enableLogging) {_		this.enableLogging = enableLogging__	};specifies,if,disk,logging,should,be,enabled,or,not,defaults,to,true,it,is,useful,for,junit,testing,or,to,profile,code,without,seeing,the,transaction,manager,s,activity,as,a,hot,spot,but,this,should,never,be,disabled,on,production,or,data,integrity,cannot,be,guaranteed,param,enable,logging,if,logging,is,enabled;public,void,set,enable,logging,boolean,enable,logging,this,enable,logging,enable,logging
AtomikosProperties -> public void setEnableLogging(boolean enableLogging);1511157177;Specifies if disk logging should be enabled or not. Defaults to true. It is useful_for JUnit testing, or to profile code without seeing the transaction manager's_activity as a hot spot but this should never be disabled on production or data_integrity cannot be guaranteed._@param enableLogging if logging is enabled;public void setEnableLogging(boolean enableLogging) {_		this.enableLogging = enableLogging__	};specifies,if,disk,logging,should,be,enabled,or,not,defaults,to,true,it,is,useful,for,junit,testing,or,to,profile,code,without,seeing,the,transaction,manager,s,activity,as,a,hot,spot,but,this,should,never,be,disabled,on,production,or,data,integrity,cannot,be,guaranteed,param,enable,logging,if,logging,is,enabled;public,void,set,enable,logging,boolean,enable,logging,this,enable,logging,enable,logging
AtomikosProperties -> public void setEnableLogging(boolean enableLogging);1511221881;Specifies if disk logging should be enabled or not. Defaults to true. It is useful_for JUnit testing, or to profile code without seeing the transaction manager's_activity as a hot spot but this should never be disabled on production or data_integrity cannot be guaranteed._@param enableLogging if logging is enabled;public void setEnableLogging(boolean enableLogging) {_		this.enableLogging = enableLogging__	};specifies,if,disk,logging,should,be,enabled,or,not,defaults,to,true,it,is,useful,for,junit,testing,or,to,profile,code,without,seeing,the,transaction,manager,s,activity,as,a,hot,spot,but,this,should,never,be,disabled,on,production,or,data,integrity,cannot,be,guaranteed,param,enable,logging,if,logging,is,enabled;public,void,set,enable,logging,boolean,enable,logging,this,enable,logging,enable,logging
AtomikosProperties -> public void setEnableLogging(boolean enableLogging);1513063854;Specifies if disk logging should be enabled or not. Defaults to true. It is useful_for JUnit testing, or to profile code without seeing the transaction manager's_activity as a hot spot but this should never be disabled on production or data_integrity cannot be guaranteed._@param enableLogging if logging is enabled;public void setEnableLogging(boolean enableLogging) {_		this.enableLogging = enableLogging__	};specifies,if,disk,logging,should,be,enabled,or,not,defaults,to,true,it,is,useful,for,junit,testing,or,to,profile,code,without,seeing,the,transaction,manager,s,activity,as,a,hot,spot,but,this,should,never,be,disabled,on,production,or,data,integrity,cannot,be,guaranteed,param,enable,logging,if,logging,is,enabled;public,void,set,enable,logging,boolean,enable,logging,this,enable,logging,enable,logging
AtomikosProperties -> public void setEnableLogging(boolean enableLogging);1513204375;Specifies if disk logging should be enabled or not. Defaults to true. It is useful_for JUnit testing, or to profile code without seeing the transaction manager's_activity as a hot spot but this should never be disabled on production or data_integrity cannot be guaranteed._@param enableLogging if logging is enabled;public void setEnableLogging(boolean enableLogging) {_		this.enableLogging = enableLogging__	};specifies,if,disk,logging,should,be,enabled,or,not,defaults,to,true,it,is,useful,for,junit,testing,or,to,profile,code,without,seeing,the,transaction,manager,s,activity,as,a,hot,spot,but,this,should,never,be,disabled,on,production,or,data,integrity,cannot,be,guaranteed,param,enable,logging,if,logging,is,enabled;public,void,set,enable,logging,boolean,enable,logging,this,enable,logging,enable,logging
AtomikosProperties -> public void setEnableLogging(boolean enableLogging);1514792288;Specifies if disk logging should be enabled or not. Defaults to true. It is useful_for JUnit testing, or to profile code without seeing the transaction manager's_activity as a hot spot but this should never be disabled on production or data_integrity cannot be guaranteed._@param enableLogging if logging is enabled;public void setEnableLogging(boolean enableLogging) {_		this.enableLogging = enableLogging__	};specifies,if,disk,logging,should,be,enabled,or,not,defaults,to,true,it,is,useful,for,junit,testing,or,to,profile,code,without,seeing,the,transaction,manager,s,activity,as,a,hot,spot,but,this,should,never,be,disabled,on,production,or,data,integrity,cannot,be,guaranteed,param,enable,logging,if,logging,is,enabled;public,void,set,enable,logging,boolean,enable,logging,this,enable,logging,enable,logging
AtomikosProperties -> public void setEnableLogging(boolean enableLogging);1519387388;Specifies if disk logging should be enabled or not. Defaults to true. It is useful_for JUnit testing, or to profile code without seeing the transaction manager's_activity as a hot spot but this should never be disabled on production or data_integrity cannot be guaranteed._@param enableLogging if logging is enabled;public void setEnableLogging(boolean enableLogging) {_		this.enableLogging = enableLogging__	};specifies,if,disk,logging,should,be,enabled,or,not,defaults,to,true,it,is,useful,for,junit,testing,or,to,profile,code,without,seeing,the,transaction,manager,s,activity,as,a,hot,spot,but,this,should,never,be,disabled,on,production,or,data,integrity,cannot,be,guaranteed,param,enable,logging,if,logging,is,enabled;public,void,set,enable,logging,boolean,enable,logging,this,enable,logging,enable,logging
AtomikosProperties -> public void setEnableLogging(boolean enableLogging);1529570433;Specifies if disk logging should be enabled or not. Defaults to true. It is useful_for JUnit testing, or to profile code without seeing the transaction manager's_activity as a hot spot but this should never be disabled on production or data_integrity cannot be guaranteed._@param enableLogging if logging is enabled;public void setEnableLogging(boolean enableLogging) {_		this.enableLogging = enableLogging__	};specifies,if,disk,logging,should,be,enabled,or,not,defaults,to,true,it,is,useful,for,junit,testing,or,to,profile,code,without,seeing,the,transaction,manager,s,activity,as,a,hot,spot,but,this,should,never,be,disabled,on,production,or,data,integrity,cannot,be,guaranteed,param,enable,logging,if,logging,is,enabled;public,void,set,enable,logging,boolean,enable,logging,this,enable,logging,enable,logging
AtomikosProperties -> public void setDefaultMaxWaitTimeOnShutdown(long defaultMaxWaitTimeOnShutdown);1513063854;Specifies how long should a normal shutdown (no-force) wait for transactions to complete._Defaults to {@literal Long.MAX_VALUE}._@param defaultMaxWaitTimeOnShutdown the default max wait time on shutdown;public void setDefaultMaxWaitTimeOnShutdown(long defaultMaxWaitTimeOnShutdown) {_		this.defaultMaxWaitTimeOnShutdown = defaultMaxWaitTimeOnShutdown__	};specifies,how,long,should,a,normal,shutdown,no,force,wait,for,transactions,to,complete,defaults,to,literal,long,param,default,max,wait,time,on,shutdown,the,default,max,wait,time,on,shutdown;public,void,set,default,max,wait,time,on,shutdown,long,default,max,wait,time,on,shutdown,this,default,max,wait,time,on,shutdown,default,max,wait,time,on,shutdown
AtomikosProperties -> public void setDefaultMaxWaitTimeOnShutdown(long defaultMaxWaitTimeOnShutdown);1513204375;Specifies how long should a normal shutdown (no-force) wait for transactions to_complete. Defaults to {@literal Long.MAX_VALUE}._@param defaultMaxWaitTimeOnShutdown the default max wait time on shutdown;public void setDefaultMaxWaitTimeOnShutdown(long defaultMaxWaitTimeOnShutdown) {_		this.defaultMaxWaitTimeOnShutdown = defaultMaxWaitTimeOnShutdown__	};specifies,how,long,should,a,normal,shutdown,no,force,wait,for,transactions,to,complete,defaults,to,literal,long,param,default,max,wait,time,on,shutdown,the,default,max,wait,time,on,shutdown;public,void,set,default,max,wait,time,on,shutdown,long,default,max,wait,time,on,shutdown,this,default,max,wait,time,on,shutdown,default,max,wait,time,on,shutdown
AtomikosProperties -> public void setDefaultMaxWaitTimeOnShutdown(long defaultMaxWaitTimeOnShutdown);1514792288;Specifies how long should a normal shutdown (no-force) wait for transactions to_complete. Defaults to {@literal Long.MAX_VALUE}._@param defaultMaxWaitTimeOnShutdown the default max wait time on shutdown;public void setDefaultMaxWaitTimeOnShutdown(long defaultMaxWaitTimeOnShutdown) {_		this.defaultMaxWaitTimeOnShutdown = defaultMaxWaitTimeOnShutdown__	};specifies,how,long,should,a,normal,shutdown,no,force,wait,for,transactions,to,complete,defaults,to,literal,long,param,default,max,wait,time,on,shutdown,the,default,max,wait,time,on,shutdown;public,void,set,default,max,wait,time,on,shutdown,long,default,max,wait,time,on,shutdown,this,default,max,wait,time,on,shutdown,default,max,wait,time,on,shutdown
AtomikosProperties -> public void setDefaultMaxWaitTimeOnShutdown(long defaultMaxWaitTimeOnShutdown);1519387388;Specifies how long should a normal shutdown (no-force) wait for transactions to_complete. Defaults to {@literal Long.MAX_VALUE}._@param defaultMaxWaitTimeOnShutdown the default max wait time on shutdown;public void setDefaultMaxWaitTimeOnShutdown(long defaultMaxWaitTimeOnShutdown) {_		this.defaultMaxWaitTimeOnShutdown = defaultMaxWaitTimeOnShutdown__	};specifies,how,long,should,a,normal,shutdown,no,force,wait,for,transactions,to,complete,defaults,to,literal,long,param,default,max,wait,time,on,shutdown,the,default,max,wait,time,on,shutdown;public,void,set,default,max,wait,time,on,shutdown,long,default,max,wait,time,on,shutdown,this,default,max,wait,time,on,shutdown,default,max,wait,time,on,shutdown
AtomikosProperties -> public void setDefaultMaxWaitTimeOnShutdown(long defaultMaxWaitTimeOnShutdown);1529570433;Specifies how long should a normal shutdown (no-force) wait for transactions to_complete. Defaults to {@literal Long.MAX_VALUE}._@param defaultMaxWaitTimeOnShutdown the default max wait time on shutdown;public void setDefaultMaxWaitTimeOnShutdown(long defaultMaxWaitTimeOnShutdown) {_		this.defaultMaxWaitTimeOnShutdown = defaultMaxWaitTimeOnShutdown__	};specifies,how,long,should,a,normal,shutdown,no,force,wait,for,transactions,to,complete,defaults,to,literal,long,param,default,max,wait,time,on,shutdown,the,default,max,wait,time,on,shutdown;public,void,set,default,max,wait,time,on,shutdown,long,default,max,wait,time,on,shutdown,this,default,max,wait,time,on,shutdown,default,max,wait,time,on,shutdown
AtomikosProperties -> public void setLogBaseDir(String logBaseDir);1507173536;Specifies the directory in which the log files should be stored. Defaults to the_current working directory. This directory should be a stable storage like a SAN,_RAID or at least backed up location. The transactions logs files are as important_as the data themselves to guarantee consistency in case of failures._@param logBaseDir the log base dir;public void setLogBaseDir(String logBaseDir) {_		this.logBaseDir = logBaseDir__	};specifies,the,directory,in,which,the,log,files,should,be,stored,defaults,to,the,current,working,directory,this,directory,should,be,a,stable,storage,like,a,san,raid,or,at,least,backed,up,location,the,transactions,logs,files,are,as,important,as,the,data,themselves,to,guarantee,consistency,in,case,of,failures,param,log,base,dir,the,log,base,dir;public,void,set,log,base,dir,string,log,base,dir,this,log,base,dir,log,base,dir
AtomikosProperties -> public void setLogBaseDir(String logBaseDir);1511157177;Specifies the directory in which the log files should be stored. Defaults to the_current working directory. This directory should be a stable storage like a SAN,_RAID or at least backed up location. The transactions logs files are as important_as the data themselves to guarantee consistency in case of failures._@param logBaseDir the log base dir;public void setLogBaseDir(String logBaseDir) {_		this.logBaseDir = logBaseDir__	};specifies,the,directory,in,which,the,log,files,should,be,stored,defaults,to,the,current,working,directory,this,directory,should,be,a,stable,storage,like,a,san,raid,or,at,least,backed,up,location,the,transactions,logs,files,are,as,important,as,the,data,themselves,to,guarantee,consistency,in,case,of,failures,param,log,base,dir,the,log,base,dir;public,void,set,log,base,dir,string,log,base,dir,this,log,base,dir,log,base,dir
AtomikosProperties -> public void setLogBaseDir(String logBaseDir);1511221881;Specifies the directory in which the log files should be stored. Defaults to the_current working directory. This directory should be a stable storage like a SAN,_RAID or at least backed up location. The transactions logs files are as important_as the data themselves to guarantee consistency in case of failures._@param logBaseDir the log base dir;public void setLogBaseDir(String logBaseDir) {_		this.logBaseDir = logBaseDir__	};specifies,the,directory,in,which,the,log,files,should,be,stored,defaults,to,the,current,working,directory,this,directory,should,be,a,stable,storage,like,a,san,raid,or,at,least,backed,up,location,the,transactions,logs,files,are,as,important,as,the,data,themselves,to,guarantee,consistency,in,case,of,failures,param,log,base,dir,the,log,base,dir;public,void,set,log,base,dir,string,log,base,dir,this,log,base,dir,log,base,dir
AtomikosProperties -> public void setLogBaseDir(String logBaseDir);1513063854;Specifies the directory in which the log files should be stored. Defaults to the_current working directory. This directory should be a stable storage like a SAN,_RAID or at least backed up location. The transactions logs files are as important_as the data themselves to guarantee consistency in case of failures._@param logBaseDir the log base dir;public void setLogBaseDir(String logBaseDir) {_		this.logBaseDir = logBaseDir__	};specifies,the,directory,in,which,the,log,files,should,be,stored,defaults,to,the,current,working,directory,this,directory,should,be,a,stable,storage,like,a,san,raid,or,at,least,backed,up,location,the,transactions,logs,files,are,as,important,as,the,data,themselves,to,guarantee,consistency,in,case,of,failures,param,log,base,dir,the,log,base,dir;public,void,set,log,base,dir,string,log,base,dir,this,log,base,dir,log,base,dir
AtomikosProperties -> public void setLogBaseDir(String logBaseDir);1513204375;Specifies the directory in which the log files should be stored. Defaults to the_current working directory. This directory should be a stable storage like a SAN,_RAID or at least backed up location. The transactions logs files are as important_as the data themselves to guarantee consistency in case of failures._@param logBaseDir the log base dir;public void setLogBaseDir(String logBaseDir) {_		this.logBaseDir = logBaseDir__	};specifies,the,directory,in,which,the,log,files,should,be,stored,defaults,to,the,current,working,directory,this,directory,should,be,a,stable,storage,like,a,san,raid,or,at,least,backed,up,location,the,transactions,logs,files,are,as,important,as,the,data,themselves,to,guarantee,consistency,in,case,of,failures,param,log,base,dir,the,log,base,dir;public,void,set,log,base,dir,string,log,base,dir,this,log,base,dir,log,base,dir
AtomikosProperties -> public void setLogBaseDir(String logBaseDir);1514792288;Specifies the directory in which the log files should be stored. Defaults to the_current working directory. This directory should be a stable storage like a SAN,_RAID or at least backed up location. The transactions logs files are as important_as the data themselves to guarantee consistency in case of failures._@param logBaseDir the log base dir;public void setLogBaseDir(String logBaseDir) {_		this.logBaseDir = logBaseDir__	};specifies,the,directory,in,which,the,log,files,should,be,stored,defaults,to,the,current,working,directory,this,directory,should,be,a,stable,storage,like,a,san,raid,or,at,least,backed,up,location,the,transactions,logs,files,are,as,important,as,the,data,themselves,to,guarantee,consistency,in,case,of,failures,param,log,base,dir,the,log,base,dir;public,void,set,log,base,dir,string,log,base,dir,this,log,base,dir,log,base,dir
AtomikosProperties -> public void setLogBaseDir(String logBaseDir);1519387388;Specifies the directory in which the log files should be stored. Defaults to the_current working directory. This directory should be a stable storage like a SAN,_RAID or at least backed up location. The transactions logs files are as important_as the data themselves to guarantee consistency in case of failures._@param logBaseDir the log base dir;public void setLogBaseDir(String logBaseDir) {_		this.logBaseDir = logBaseDir__	};specifies,the,directory,in,which,the,log,files,should,be,stored,defaults,to,the,current,working,directory,this,directory,should,be,a,stable,storage,like,a,san,raid,or,at,least,backed,up,location,the,transactions,logs,files,are,as,important,as,the,data,themselves,to,guarantee,consistency,in,case,of,failures,param,log,base,dir,the,log,base,dir;public,void,set,log,base,dir,string,log,base,dir,this,log,base,dir,log,base,dir
AtomikosProperties -> public void setLogBaseDir(String logBaseDir);1529570433;Specifies the directory in which the log files should be stored. Defaults to the_current working directory. This directory should be a stable storage like a SAN,_RAID or at least backed up location. The transactions logs files are as important_as the data themselves to guarantee consistency in case of failures._@param logBaseDir the log base dir;public void setLogBaseDir(String logBaseDir) {_		this.logBaseDir = logBaseDir__	};specifies,the,directory,in,which,the,log,files,should,be,stored,defaults,to,the,current,working,directory,this,directory,should,be,a,stable,storage,like,a,san,raid,or,at,least,backed,up,location,the,transactions,logs,files,are,as,important,as,the,data,themselves,to,guarantee,consistency,in,case,of,failures,param,log,base,dir,the,log,base,dir;public,void,set,log,base,dir,string,log,base,dir,this,log,base,dir,log,base,dir
AtomikosProperties -> public void setDefaultJtaTimeout(Duration defaultJtaTimeout);1511157177;The default timeout for JTA transactions (optional, defaults to {@literal 10000}_ms)._@param defaultJtaTimeout the default JTA timeout;public void setDefaultJtaTimeout(Duration defaultJtaTimeout) {_		this.defaultJtaTimeout = defaultJtaTimeout__	};the,default,timeout,for,jta,transactions,optional,defaults,to,literal,10000,ms,param,default,jta,timeout,the,default,jta,timeout;public,void,set,default,jta,timeout,duration,default,jta,timeout,this,default,jta,timeout,default,jta,timeout
AtomikosProperties -> public void setDefaultJtaTimeout(Duration defaultJtaTimeout);1511221881;The default timeout for JTA transactions (optional, defaults to {@literal 10000}_ms)._@param defaultJtaTimeout the default JTA timeout;public void setDefaultJtaTimeout(Duration defaultJtaTimeout) {_		this.defaultJtaTimeout = defaultJtaTimeout__	};the,default,timeout,for,jta,transactions,optional,defaults,to,literal,10000,ms,param,default,jta,timeout,the,default,jta,timeout;public,void,set,default,jta,timeout,duration,default,jta,timeout,this,default,jta,timeout,default,jta,timeout
AtomikosProperties -> public void setDefaultJtaTimeout(Duration defaultJtaTimeout);1513063854;The default timeout for JTA transactions (optional, defaults to {@literal 10000}_ms)._@param defaultJtaTimeout the default JTA timeout;public void setDefaultJtaTimeout(Duration defaultJtaTimeout) {_		this.defaultJtaTimeout = defaultJtaTimeout__	};the,default,timeout,for,jta,transactions,optional,defaults,to,literal,10000,ms,param,default,jta,timeout,the,default,jta,timeout;public,void,set,default,jta,timeout,duration,default,jta,timeout,this,default,jta,timeout,default,jta,timeout
AtomikosProperties -> public void setDefaultJtaTimeout(Duration defaultJtaTimeout);1513204375;The default timeout for JTA transactions (optional, defaults to {@literal 10000}_ms)._@param defaultJtaTimeout the default JTA timeout;public void setDefaultJtaTimeout(Duration defaultJtaTimeout) {_		this.defaultJtaTimeout = defaultJtaTimeout__	};the,default,timeout,for,jta,transactions,optional,defaults,to,literal,10000,ms,param,default,jta,timeout,the,default,jta,timeout;public,void,set,default,jta,timeout,duration,default,jta,timeout,this,default,jta,timeout,default,jta,timeout
AtomikosProperties -> public void setDefaultJtaTimeout(Duration defaultJtaTimeout);1514792288;The default timeout for JTA transactions (optional, defaults to {@literal 10000}_ms)._@param defaultJtaTimeout the default JTA timeout;public void setDefaultJtaTimeout(Duration defaultJtaTimeout) {_		this.defaultJtaTimeout = defaultJtaTimeout__	};the,default,timeout,for,jta,transactions,optional,defaults,to,literal,10000,ms,param,default,jta,timeout,the,default,jta,timeout;public,void,set,default,jta,timeout,duration,default,jta,timeout,this,default,jta,timeout,default,jta,timeout
AtomikosProperties -> public void setDefaultJtaTimeout(Duration defaultJtaTimeout);1519387388;The default timeout for JTA transactions (optional, defaults to {@literal 10000}_ms)._@param defaultJtaTimeout the default JTA timeout;public void setDefaultJtaTimeout(Duration defaultJtaTimeout) {_		this.defaultJtaTimeout = defaultJtaTimeout__	};the,default,timeout,for,jta,transactions,optional,defaults,to,literal,10000,ms,param,default,jta,timeout,the,default,jta,timeout;public,void,set,default,jta,timeout,duration,default,jta,timeout,this,default,jta,timeout,default,jta,timeout
AtomikosProperties -> public void setDefaultJtaTimeout(Duration defaultJtaTimeout);1529570433;The default timeout for JTA transactions (optional, defaults to {@literal 10000}_ms)._@param defaultJtaTimeout the default JTA timeout;public void setDefaultJtaTimeout(Duration defaultJtaTimeout) {_		this.defaultJtaTimeout = defaultJtaTimeout__	};the,default,timeout,for,jta,transactions,optional,defaults,to,literal,10000,ms,param,default,jta,timeout,the,default,jta,timeout;public,void,set,default,jta,timeout,duration,default,jta,timeout,this,default,jta,timeout,default,jta,timeout
AtomikosProperties -> public void setTransactionManagerUniqueName(String uniqueName);1507173536;Specifies the transaction manager's unique name. Defaults to the machine's IP_address. If you plan to run more than one transaction manager against one database_you must set this property to a unique value or you might run into duplicate_transaction ID (XID) problems that can be quite subtle (example:_{@literal http://fogbugz.atomikos.com/default.asp?community.6.2225.7}). If multiple_instances need to use the same properties file then the easiest way to ensure_uniqueness for this property is by referencing a system property specified at VM_startup._@param uniqueName the unique name;public void setTransactionManagerUniqueName(String uniqueName) {_		this.transactionManagerUniqueName = uniqueName__	};specifies,the,transaction,manager,s,unique,name,defaults,to,the,machine,s,ip,address,if,you,plan,to,run,more,than,one,transaction,manager,against,one,database,you,must,set,this,property,to,a,unique,value,or,you,might,run,into,duplicate,transaction,id,xid,problems,that,can,be,quite,subtle,example,literal,http,fogbugz,atomikos,com,default,asp,community,6,2225,7,if,multiple,instances,need,to,use,the,same,properties,file,then,the,easiest,way,to,ensure,uniqueness,for,this,property,is,by,referencing,a,system,property,specified,at,vm,startup,param,unique,name,the,unique,name;public,void,set,transaction,manager,unique,name,string,unique,name,this,transaction,manager,unique,name,unique,name
AtomikosProperties -> public void setTransactionManagerUniqueName(String uniqueName);1511157177;Specifies the transaction manager's unique name. Defaults to the machine's IP_address. If you plan to run more than one transaction manager against one database_you must set this property to a unique value or you might run into duplicate_transaction ID (XID) problems that can be quite subtle (example:_{@literal http://fogbugz.atomikos.com/default.asp?community.6.2225.7}). If multiple_instances need to use the same properties file then the easiest way to ensure_uniqueness for this property is by referencing a system property specified at VM_startup._@param uniqueName the unique name;public void setTransactionManagerUniqueName(String uniqueName) {_		this.transactionManagerUniqueName = uniqueName__	};specifies,the,transaction,manager,s,unique,name,defaults,to,the,machine,s,ip,address,if,you,plan,to,run,more,than,one,transaction,manager,against,one,database,you,must,set,this,property,to,a,unique,value,or,you,might,run,into,duplicate,transaction,id,xid,problems,that,can,be,quite,subtle,example,literal,http,fogbugz,atomikos,com,default,asp,community,6,2225,7,if,multiple,instances,need,to,use,the,same,properties,file,then,the,easiest,way,to,ensure,uniqueness,for,this,property,is,by,referencing,a,system,property,specified,at,vm,startup,param,unique,name,the,unique,name;public,void,set,transaction,manager,unique,name,string,unique,name,this,transaction,manager,unique,name,unique,name
AtomikosProperties -> public void setTransactionManagerUniqueName(String uniqueName);1511221881;Specifies the transaction manager's unique name. Defaults to the machine's IP_address. If you plan to run more than one transaction manager against one database_you must set this property to a unique value or you might run into duplicate_transaction ID (XID) problems that can be quite subtle (example:_{@literal http://fogbugz.atomikos.com/default.asp?community.6.2225.7}). If multiple_instances need to use the same properties file then the easiest way to ensure_uniqueness for this property is by referencing a system property specified at VM_startup._@param uniqueName the unique name;public void setTransactionManagerUniqueName(String uniqueName) {_		this.transactionManagerUniqueName = uniqueName__	};specifies,the,transaction,manager,s,unique,name,defaults,to,the,machine,s,ip,address,if,you,plan,to,run,more,than,one,transaction,manager,against,one,database,you,must,set,this,property,to,a,unique,value,or,you,might,run,into,duplicate,transaction,id,xid,problems,that,can,be,quite,subtle,example,literal,http,fogbugz,atomikos,com,default,asp,community,6,2225,7,if,multiple,instances,need,to,use,the,same,properties,file,then,the,easiest,way,to,ensure,uniqueness,for,this,property,is,by,referencing,a,system,property,specified,at,vm,startup,param,unique,name,the,unique,name;public,void,set,transaction,manager,unique,name,string,unique,name,this,transaction,manager,unique,name,unique,name
AtomikosProperties -> public void setTransactionManagerUniqueName(String uniqueName);1513063854;Specifies the transaction manager's unique name. Defaults to the machine's IP_address. If you plan to run more than one transaction manager against one database_you must set this property to a unique value or you might run into duplicate_transaction ID (XID) problems that can be quite subtle (example:_{@literal http://fogbugz.atomikos.com/default.asp?community.6.2225.7}). If multiple_instances need to use the same properties file then the easiest way to ensure_uniqueness for this property is by referencing a system property specified at VM_startup._@param uniqueName the unique name;public void setTransactionManagerUniqueName(String uniqueName) {_		this.transactionManagerUniqueName = uniqueName__	};specifies,the,transaction,manager,s,unique,name,defaults,to,the,machine,s,ip,address,if,you,plan,to,run,more,than,one,transaction,manager,against,one,database,you,must,set,this,property,to,a,unique,value,or,you,might,run,into,duplicate,transaction,id,xid,problems,that,can,be,quite,subtle,example,literal,http,fogbugz,atomikos,com,default,asp,community,6,2225,7,if,multiple,instances,need,to,use,the,same,properties,file,then,the,easiest,way,to,ensure,uniqueness,for,this,property,is,by,referencing,a,system,property,specified,at,vm,startup,param,unique,name,the,unique,name;public,void,set,transaction,manager,unique,name,string,unique,name,this,transaction,manager,unique,name,unique,name
AtomikosProperties -> public void setTransactionManagerUniqueName(String uniqueName);1513204375;Specifies the transaction manager's unique name. Defaults to the machine's IP_address. If you plan to run more than one transaction manager against one database_you must set this property to a unique value or you might run into duplicate_transaction ID (XID) problems that can be quite subtle (example:_{@literal http://fogbugz.atomikos.com/default.asp?community.6.2225.7}). If multiple_instances need to use the same properties file then the easiest way to ensure_uniqueness for this property is by referencing a system property specified at VM_startup._@param uniqueName the unique name;public void setTransactionManagerUniqueName(String uniqueName) {_		this.transactionManagerUniqueName = uniqueName__	};specifies,the,transaction,manager,s,unique,name,defaults,to,the,machine,s,ip,address,if,you,plan,to,run,more,than,one,transaction,manager,against,one,database,you,must,set,this,property,to,a,unique,value,or,you,might,run,into,duplicate,transaction,id,xid,problems,that,can,be,quite,subtle,example,literal,http,fogbugz,atomikos,com,default,asp,community,6,2225,7,if,multiple,instances,need,to,use,the,same,properties,file,then,the,easiest,way,to,ensure,uniqueness,for,this,property,is,by,referencing,a,system,property,specified,at,vm,startup,param,unique,name,the,unique,name;public,void,set,transaction,manager,unique,name,string,unique,name,this,transaction,manager,unique,name,unique,name
AtomikosProperties -> public void setTransactionManagerUniqueName(String uniqueName);1514792288;Specifies the transaction manager's unique name. Defaults to the machine's IP_address. If you plan to run more than one transaction manager against one database_you must set this property to a unique value or you might run into duplicate_transaction ID (XID) problems that can be quite subtle (example:_{@literal http://fogbugz.atomikos.com/default.asp?community.6.2225.7}). If multiple_instances need to use the same properties file then the easiest way to ensure_uniqueness for this property is by referencing a system property specified at VM_startup._@param uniqueName the unique name;public void setTransactionManagerUniqueName(String uniqueName) {_		this.transactionManagerUniqueName = uniqueName__	};specifies,the,transaction,manager,s,unique,name,defaults,to,the,machine,s,ip,address,if,you,plan,to,run,more,than,one,transaction,manager,against,one,database,you,must,set,this,property,to,a,unique,value,or,you,might,run,into,duplicate,transaction,id,xid,problems,that,can,be,quite,subtle,example,literal,http,fogbugz,atomikos,com,default,asp,community,6,2225,7,if,multiple,instances,need,to,use,the,same,properties,file,then,the,easiest,way,to,ensure,uniqueness,for,this,property,is,by,referencing,a,system,property,specified,at,vm,startup,param,unique,name,the,unique,name;public,void,set,transaction,manager,unique,name,string,unique,name,this,transaction,manager,unique,name,unique,name
AtomikosProperties -> public void setTransactionManagerUniqueName(String uniqueName);1519387388;Specifies the transaction manager's unique name. Defaults to the machine's IP_address. If you plan to run more than one transaction manager against one database_you must set this property to a unique value or you might run into duplicate_transaction ID (XID) problems that can be quite subtle (example:_{@literal http://fogbugz.atomikos.com/default.asp?community.6.2225.7}). If multiple_instances need to use the same properties file then the easiest way to ensure_uniqueness for this property is by referencing a system property specified at VM_startup._@param uniqueName the unique name;public void setTransactionManagerUniqueName(String uniqueName) {_		this.transactionManagerUniqueName = uniqueName__	};specifies,the,transaction,manager,s,unique,name,defaults,to,the,machine,s,ip,address,if,you,plan,to,run,more,than,one,transaction,manager,against,one,database,you,must,set,this,property,to,a,unique,value,or,you,might,run,into,duplicate,transaction,id,xid,problems,that,can,be,quite,subtle,example,literal,http,fogbugz,atomikos,com,default,asp,community,6,2225,7,if,multiple,instances,need,to,use,the,same,properties,file,then,the,easiest,way,to,ensure,uniqueness,for,this,property,is,by,referencing,a,system,property,specified,at,vm,startup,param,unique,name,the,unique,name;public,void,set,transaction,manager,unique,name,string,unique,name,this,transaction,manager,unique,name,unique,name
AtomikosProperties -> public void setTransactionManagerUniqueName(String uniqueName);1529570433;Specifies the transaction manager's unique name. Defaults to the machine's IP_address. If you plan to run more than one transaction manager against one database_you must set this property to a unique value or you might run into duplicate_transaction ID (XID) problems that can be quite subtle (example:_{@literal http://fogbugz.atomikos.com/default.asp?community.6.2225.7}). If multiple_instances need to use the same properties file then the easiest way to ensure_uniqueness for this property is by referencing a system property specified at VM_startup._@param uniqueName the unique name;public void setTransactionManagerUniqueName(String uniqueName) {_		this.transactionManagerUniqueName = uniqueName__	};specifies,the,transaction,manager,s,unique,name,defaults,to,the,machine,s,ip,address,if,you,plan,to,run,more,than,one,transaction,manager,against,one,database,you,must,set,this,property,to,a,unique,value,or,you,might,run,into,duplicate,transaction,id,xid,problems,that,can,be,quite,subtle,example,literal,http,fogbugz,atomikos,com,default,asp,community,6,2225,7,if,multiple,instances,need,to,use,the,same,properties,file,then,the,easiest,way,to,ensure,uniqueness,for,this,property,is,by,referencing,a,system,property,specified,at,vm,startup,param,unique,name,the,unique,name;public,void,set,transaction,manager,unique,name,string,unique,name,this,transaction,manager,unique,name,unique,name
AtomikosProperties -> public void setMaxTimeout(Duration maxTimeout);1511157177;Specifies the maximum timeout that can be allowed for transactions. Defaults to_{@literal 300000}. This means that calls to UserTransaction.setTransactionTimeout()_with a value higher than configured here will be max'ed to this value._@param maxTimeout the max timeout;public void setMaxTimeout(Duration maxTimeout) {_		this.maxTimeout = maxTimeout__	};specifies,the,maximum,timeout,that,can,be,allowed,for,transactions,defaults,to,literal,300000,this,means,that,calls,to,user,transaction,set,transaction,timeout,with,a,value,higher,than,configured,here,will,be,max,ed,to,this,value,param,max,timeout,the,max,timeout;public,void,set,max,timeout,duration,max,timeout,this,max,timeout,max,timeout
AtomikosProperties -> public void setMaxTimeout(Duration maxTimeout);1511221881;Specifies the maximum timeout that can be allowed for transactions. Defaults to_{@literal 300000}. This means that calls to UserTransaction.setTransactionTimeout()_with a value higher than configured here will be max'ed to this value._@param maxTimeout the max timeout;public void setMaxTimeout(Duration maxTimeout) {_		this.maxTimeout = maxTimeout__	};specifies,the,maximum,timeout,that,can,be,allowed,for,transactions,defaults,to,literal,300000,this,means,that,calls,to,user,transaction,set,transaction,timeout,with,a,value,higher,than,configured,here,will,be,max,ed,to,this,value,param,max,timeout,the,max,timeout;public,void,set,max,timeout,duration,max,timeout,this,max,timeout,max,timeout
AtomikosProperties -> public void setMaxTimeout(Duration maxTimeout);1513063854;Specifies the maximum timeout that can be allowed for transactions. Defaults to_{@literal 300000}. This means that calls to UserTransaction.setTransactionTimeout()_with a value higher than configured here will be max'ed to this value._@param maxTimeout the max timeout;public void setMaxTimeout(Duration maxTimeout) {_		this.maxTimeout = maxTimeout__	};specifies,the,maximum,timeout,that,can,be,allowed,for,transactions,defaults,to,literal,300000,this,means,that,calls,to,user,transaction,set,transaction,timeout,with,a,value,higher,than,configured,here,will,be,max,ed,to,this,value,param,max,timeout,the,max,timeout;public,void,set,max,timeout,duration,max,timeout,this,max,timeout,max,timeout
AtomikosProperties -> public void setMaxTimeout(Duration maxTimeout);1513204375;Specifies the maximum timeout that can be allowed for transactions. Defaults to_{@literal 300000}. This means that calls to UserTransaction.setTransactionTimeout()_with a value higher than configured here will be max'ed to this value._@param maxTimeout the max timeout;public void setMaxTimeout(Duration maxTimeout) {_		this.maxTimeout = maxTimeout__	};specifies,the,maximum,timeout,that,can,be,allowed,for,transactions,defaults,to,literal,300000,this,means,that,calls,to,user,transaction,set,transaction,timeout,with,a,value,higher,than,configured,here,will,be,max,ed,to,this,value,param,max,timeout,the,max,timeout;public,void,set,max,timeout,duration,max,timeout,this,max,timeout,max,timeout
AtomikosProperties -> public void setMaxTimeout(Duration maxTimeout);1514792288;Specifies the maximum timeout that can be allowed for transactions. Defaults to_{@literal 300000}. This means that calls to UserTransaction.setTransactionTimeout()_with a value higher than configured here will be max'ed to this value._@param maxTimeout the max timeout;public void setMaxTimeout(Duration maxTimeout) {_		this.maxTimeout = maxTimeout__	};specifies,the,maximum,timeout,that,can,be,allowed,for,transactions,defaults,to,literal,300000,this,means,that,calls,to,user,transaction,set,transaction,timeout,with,a,value,higher,than,configured,here,will,be,max,ed,to,this,value,param,max,timeout,the,max,timeout;public,void,set,max,timeout,duration,max,timeout,this,max,timeout,max,timeout
AtomikosProperties -> public void setMaxTimeout(Duration maxTimeout);1519387388;Specifies the maximum timeout that can be allowed for transactions. Defaults to_{@literal 300000}. This means that calls to UserTransaction.setTransactionTimeout()_with a value higher than configured here will be max'ed to this value._@param maxTimeout the max timeout;public void setMaxTimeout(Duration maxTimeout) {_		this.maxTimeout = maxTimeout__	};specifies,the,maximum,timeout,that,can,be,allowed,for,transactions,defaults,to,literal,300000,this,means,that,calls,to,user,transaction,set,transaction,timeout,with,a,value,higher,than,configured,here,will,be,max,ed,to,this,value,param,max,timeout,the,max,timeout;public,void,set,max,timeout,duration,max,timeout,this,max,timeout,max,timeout
AtomikosProperties -> public void setMaxTimeout(Duration maxTimeout);1529570433;Specifies the maximum timeout that can be allowed for transactions. Defaults to_{@literal 300000}. This means that calls to UserTransaction.setTransactionTimeout()_with a value higher than configured here will be max'ed to this value._@param maxTimeout the max timeout;public void setMaxTimeout(Duration maxTimeout) {_		this.maxTimeout = maxTimeout__	};specifies,the,maximum,timeout,that,can,be,allowed,for,transactions,defaults,to,literal,300000,this,means,that,calls,to,user,transaction,set,transaction,timeout,with,a,value,higher,than,configured,here,will,be,max,ed,to,this,value,param,max,timeout,the,max,timeout;public,void,set,max,timeout,duration,max,timeout,this,max,timeout,max,timeout
AtomikosProperties -> public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit);1507173536;Specifies whether VM shutdown should trigger forced shutdown of the transaction_core. Defaults to false._@param forceShutdownOnVmExit if VM shutdown should be forced;public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit) {_		this.forceShutdownOnVmExit = forceShutdownOnVmExit__	};specifies,whether,vm,shutdown,should,trigger,forced,shutdown,of,the,transaction,core,defaults,to,false,param,force,shutdown,on,vm,exit,if,vm,shutdown,should,be,forced;public,void,set,force,shutdown,on,vm,exit,boolean,force,shutdown,on,vm,exit,this,force,shutdown,on,vm,exit,force,shutdown,on,vm,exit
AtomikosProperties -> public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit);1511157177;Specifies whether VM shutdown should trigger forced shutdown of the transaction_core. Defaults to false._@param forceShutdownOnVmExit if VM shutdown should be forced;public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit) {_		this.forceShutdownOnVmExit = forceShutdownOnVmExit__	};specifies,whether,vm,shutdown,should,trigger,forced,shutdown,of,the,transaction,core,defaults,to,false,param,force,shutdown,on,vm,exit,if,vm,shutdown,should,be,forced;public,void,set,force,shutdown,on,vm,exit,boolean,force,shutdown,on,vm,exit,this,force,shutdown,on,vm,exit,force,shutdown,on,vm,exit
AtomikosProperties -> public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit);1511221881;Specifies whether VM shutdown should trigger forced shutdown of the transaction_core. Defaults to false._@param forceShutdownOnVmExit if VM shutdown should be forced;public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit) {_		this.forceShutdownOnVmExit = forceShutdownOnVmExit__	};specifies,whether,vm,shutdown,should,trigger,forced,shutdown,of,the,transaction,core,defaults,to,false,param,force,shutdown,on,vm,exit,if,vm,shutdown,should,be,forced;public,void,set,force,shutdown,on,vm,exit,boolean,force,shutdown,on,vm,exit,this,force,shutdown,on,vm,exit,force,shutdown,on,vm,exit
AtomikosProperties -> public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit);1513063854;Specifies whether VM shutdown should trigger forced shutdown of the transaction_core. Defaults to false._@param forceShutdownOnVmExit if VM shutdown should be forced;public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit) {_		this.forceShutdownOnVmExit = forceShutdownOnVmExit__	};specifies,whether,vm,shutdown,should,trigger,forced,shutdown,of,the,transaction,core,defaults,to,false,param,force,shutdown,on,vm,exit,if,vm,shutdown,should,be,forced;public,void,set,force,shutdown,on,vm,exit,boolean,force,shutdown,on,vm,exit,this,force,shutdown,on,vm,exit,force,shutdown,on,vm,exit
AtomikosProperties -> public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit);1513204375;Specifies whether VM shutdown should trigger forced shutdown of the transaction_core. Defaults to false._@param forceShutdownOnVmExit if VM shutdown should be forced;public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit) {_		this.forceShutdownOnVmExit = forceShutdownOnVmExit__	};specifies,whether,vm,shutdown,should,trigger,forced,shutdown,of,the,transaction,core,defaults,to,false,param,force,shutdown,on,vm,exit,if,vm,shutdown,should,be,forced;public,void,set,force,shutdown,on,vm,exit,boolean,force,shutdown,on,vm,exit,this,force,shutdown,on,vm,exit,force,shutdown,on,vm,exit
AtomikosProperties -> public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit);1514792288;Specifies whether VM shutdown should trigger forced shutdown of the transaction_core. Defaults to false._@param forceShutdownOnVmExit if VM shutdown should be forced;public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit) {_		this.forceShutdownOnVmExit = forceShutdownOnVmExit__	};specifies,whether,vm,shutdown,should,trigger,forced,shutdown,of,the,transaction,core,defaults,to,false,param,force,shutdown,on,vm,exit,if,vm,shutdown,should,be,forced;public,void,set,force,shutdown,on,vm,exit,boolean,force,shutdown,on,vm,exit,this,force,shutdown,on,vm,exit,force,shutdown,on,vm,exit
AtomikosProperties -> public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit);1519387388;Specifies whether VM shutdown should trigger forced shutdown of the transaction_core. Defaults to false._@param forceShutdownOnVmExit if VM shutdown should be forced;public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit) {_		this.forceShutdownOnVmExit = forceShutdownOnVmExit__	};specifies,whether,vm,shutdown,should,trigger,forced,shutdown,of,the,transaction,core,defaults,to,false,param,force,shutdown,on,vm,exit,if,vm,shutdown,should,be,forced;public,void,set,force,shutdown,on,vm,exit,boolean,force,shutdown,on,vm,exit,this,force,shutdown,on,vm,exit,force,shutdown,on,vm,exit
AtomikosProperties -> public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit);1529570433;Specifies whether VM shutdown should trigger forced shutdown of the transaction_core. Defaults to false._@param forceShutdownOnVmExit if VM shutdown should be forced;public void setForceShutdownOnVmExit(boolean forceShutdownOnVmExit) {_		this.forceShutdownOnVmExit = forceShutdownOnVmExit__	};specifies,whether,vm,shutdown,should,trigger,forced,shutdown,of,the,transaction,core,defaults,to,false,param,force,shutdown,on,vm,exit,if,vm,shutdown,should,be,forced;public,void,set,force,shutdown,on,vm,exit,boolean,force,shutdown,on,vm,exit,this,force,shutdown,on,vm,exit,force,shutdown,on,vm,exit
