# id;timestamp;commentText;codeText;commentWords;codeWords
EmbeddedDatabaseConnection -> public static EmbeddedDatabaseConnection get(ClassLoader classLoader);1507173536;Returns the most suitable {@link EmbeddedDatabaseConnection} for the given class_loader._@param classLoader the class loader used to check for classes_@return an {@link EmbeddedDatabaseConnection} or {@link #NONE}.;public static EmbeddedDatabaseConnection get(ClassLoader classLoader) {_		for (EmbeddedDatabaseConnection candidate : EmbeddedDatabaseConnection.values()) {_			if (candidate != NONE && ClassUtils.isPresent(candidate.getDriverClassName(),_					classLoader)) {_				return candidate__			}_		}_		return NONE__	};returns,the,most,suitable,link,embedded,database,connection,for,the,given,class,loader,param,class,loader,the,class,loader,used,to,check,for,classes,return,an,link,embedded,database,connection,or,link,none;public,static,embedded,database,connection,get,class,loader,class,loader,for,embedded,database,connection,candidate,embedded,database,connection,values,if,candidate,none,class,utils,is,present,candidate,get,driver,class,name,class,loader,return,candidate,return,none
EmbeddedDatabaseConnection -> public static EmbeddedDatabaseConnection get(ClassLoader classLoader);1508932794;Returns the most suitable {@link EmbeddedDatabaseConnection} for the given class_loader._@param classLoader the class loader used to check for classes_@return an {@link EmbeddedDatabaseConnection} or {@link #NONE}.;public static EmbeddedDatabaseConnection get(ClassLoader classLoader) {_		for (EmbeddedDatabaseConnection candidate : EmbeddedDatabaseConnection.values()) {_			if (candidate != NONE && ClassUtils.isPresent(candidate.getDriverClassName(),_					classLoader)) {_				return candidate__			}_		}_		return NONE__	};returns,the,most,suitable,link,embedded,database,connection,for,the,given,class,loader,param,class,loader,the,class,loader,used,to,check,for,classes,return,an,link,embedded,database,connection,or,link,none;public,static,embedded,database,connection,get,class,loader,class,loader,for,embedded,database,connection,candidate,embedded,database,connection,values,if,candidate,none,class,utils,is,present,candidate,get,driver,class,name,class,loader,return,candidate,return,none
EmbeddedDatabaseConnection -> public static EmbeddedDatabaseConnection get(ClassLoader classLoader);1513199238;Returns the most suitable {@link EmbeddedDatabaseConnection} for the given class_loader._@param classLoader the class loader used to check for classes_@return an {@link EmbeddedDatabaseConnection} or {@link #NONE}.;public static EmbeddedDatabaseConnection get(ClassLoader classLoader) {_		for (EmbeddedDatabaseConnection candidate : EmbeddedDatabaseConnection.values()) {_			if (candidate != NONE && ClassUtils.isPresent(candidate.getDriverClassName(),_					classLoader)) {_				return candidate__			}_		}_		return NONE__	};returns,the,most,suitable,link,embedded,database,connection,for,the,given,class,loader,param,class,loader,the,class,loader,used,to,check,for,classes,return,an,link,embedded,database,connection,or,link,none;public,static,embedded,database,connection,get,class,loader,class,loader,for,embedded,database,connection,candidate,embedded,database,connection,values,if,candidate,none,class,utils,is,present,candidate,get,driver,class,name,class,loader,return,candidate,return,none
EmbeddedDatabaseConnection -> public static EmbeddedDatabaseConnection get(ClassLoader classLoader);1516844492;Returns the most suitable {@link EmbeddedDatabaseConnection} for the given class_loader._@param classLoader the class loader used to check for classes_@return an {@link EmbeddedDatabaseConnection} or {@link #NONE}.;public static EmbeddedDatabaseConnection get(ClassLoader classLoader) {_		for (EmbeddedDatabaseConnection candidate : EmbeddedDatabaseConnection.values()) {_			if (candidate != NONE && ClassUtils.isPresent(candidate.getDriverClassName(),_					classLoader)) {_				return candidate__			}_		}_		return NONE__	};returns,the,most,suitable,link,embedded,database,connection,for,the,given,class,loader,param,class,loader,the,class,loader,used,to,check,for,classes,return,an,link,embedded,database,connection,or,link,none;public,static,embedded,database,connection,get,class,loader,class,loader,for,embedded,database,connection,candidate,embedded,database,connection,values,if,candidate,none,class,utils,is,present,candidate,get,driver,class,name,class,loader,return,candidate,return,none
EmbeddedDatabaseConnection -> public static EmbeddedDatabaseConnection get(ClassLoader classLoader);1516855380;Returns the most suitable {@link EmbeddedDatabaseConnection} for the given class_loader._@param classLoader the class loader used to check for classes_@return an {@link EmbeddedDatabaseConnection} or {@link #NONE}.;public static EmbeddedDatabaseConnection get(ClassLoader classLoader) {_		for (EmbeddedDatabaseConnection candidate : EmbeddedDatabaseConnection.values()) {_			if (candidate != NONE && ClassUtils.isPresent(candidate.getDriverClassName(),_					classLoader)) {_				return candidate__			}_		}_		return NONE__	};returns,the,most,suitable,link,embedded,database,connection,for,the,given,class,loader,param,class,loader,the,class,loader,used,to,check,for,classes,return,an,link,embedded,database,connection,or,link,none;public,static,embedded,database,connection,get,class,loader,class,loader,for,embedded,database,connection,candidate,embedded,database,connection,values,if,candidate,none,class,utils,is,present,candidate,get,driver,class,name,class,loader,return,candidate,return,none
EmbeddedDatabaseConnection -> public static EmbeddedDatabaseConnection get(ClassLoader classLoader);1519664612;Returns the most suitable {@link EmbeddedDatabaseConnection} for the given class_loader._@param classLoader the class loader used to check for classes_@return an {@link EmbeddedDatabaseConnection} or {@link #NONE}.;public static EmbeddedDatabaseConnection get(ClassLoader classLoader) {_		for (EmbeddedDatabaseConnection candidate : EmbeddedDatabaseConnection.values()) {_			if (candidate != NONE && ClassUtils.isPresent(candidate.getDriverClassName(),_					classLoader)) {_				return candidate__			}_		}_		return NONE__	};returns,the,most,suitable,link,embedded,database,connection,for,the,given,class,loader,param,class,loader,the,class,loader,used,to,check,for,classes,return,an,link,embedded,database,connection,or,link,none;public,static,embedded,database,connection,get,class,loader,class,loader,for,embedded,database,connection,candidate,embedded,database,connection,values,if,candidate,none,class,utils,is,present,candidate,get,driver,class,name,class,loader,return,candidate,return,none
EmbeddedDatabaseConnection -> public static EmbeddedDatabaseConnection get(ClassLoader classLoader);1532738143;Returns the most suitable {@link EmbeddedDatabaseConnection} for the given class_loader._@param classLoader the class loader used to check for classes_@return an {@link EmbeddedDatabaseConnection} or {@link #NONE}.;public static EmbeddedDatabaseConnection get(ClassLoader classLoader) {_		for (EmbeddedDatabaseConnection candidate : EmbeddedDatabaseConnection.values()) {_			if (candidate != NONE && ClassUtils.isPresent(candidate.getDriverClassName(),_					classLoader)) {_				return candidate__			}_		}_		return NONE__	};returns,the,most,suitable,link,embedded,database,connection,for,the,given,class,loader,param,class,loader,the,class,loader,used,to,check,for,classes,return,an,link,embedded,database,connection,or,link,none;public,static,embedded,database,connection,get,class,loader,class,loader,for,embedded,database,connection,candidate,embedded,database,connection,values,if,candidate,none,class,utils,is,present,candidate,get,driver,class,name,class,loader,return,candidate,return,none
EmbeddedDatabaseConnection -> public static boolean isEmbedded(DataSource dataSource);1507173536;Convenience method to determine if a given data source represents an embedded_database type._@param dataSource the data source to interrogate_@return true if the data source is one of the embedded types;public static boolean isEmbedded(DataSource dataSource) {_		try {_			return new JdbcTemplate(dataSource).execute(new IsEmbedded())__		}_		catch (DataAccessException ex) {_			_			return false__		}_	};convenience,method,to,determine,if,a,given,data,source,represents,an,embedded,database,type,param,data,source,the,data,source,to,interrogate,return,true,if,the,data,source,is,one,of,the,embedded,types;public,static,boolean,is,embedded,data,source,data,source,try,return,new,jdbc,template,data,source,execute,new,is,embedded,catch,data,access,exception,ex,return,false
EmbeddedDatabaseConnection -> public static boolean isEmbedded(DataSource dataSource);1508932794;Convenience method to determine if a given data source represents an embedded_database type._@param dataSource the data source to interrogate_@return true if the data source is one of the embedded types;public static boolean isEmbedded(DataSource dataSource) {_		try {_			return new JdbcTemplate(dataSource).execute(new IsEmbedded())__		}_		catch (DataAccessException ex) {_			_			return false__		}_	};convenience,method,to,determine,if,a,given,data,source,represents,an,embedded,database,type,param,data,source,the,data,source,to,interrogate,return,true,if,the,data,source,is,one,of,the,embedded,types;public,static,boolean,is,embedded,data,source,data,source,try,return,new,jdbc,template,data,source,execute,new,is,embedded,catch,data,access,exception,ex,return,false
EmbeddedDatabaseConnection -> public static boolean isEmbedded(DataSource dataSource);1513199238;Convenience method to determine if a given data source represents an embedded_database type._@param dataSource the data source to interrogate_@return true if the data source is one of the embedded types;public static boolean isEmbedded(DataSource dataSource) {_		try {_			return new JdbcTemplate(dataSource).execute(new IsEmbedded())__		}_		catch (DataAccessException ex) {_			_			return false__		}_	};convenience,method,to,determine,if,a,given,data,source,represents,an,embedded,database,type,param,data,source,the,data,source,to,interrogate,return,true,if,the,data,source,is,one,of,the,embedded,types;public,static,boolean,is,embedded,data,source,data,source,try,return,new,jdbc,template,data,source,execute,new,is,embedded,catch,data,access,exception,ex,return,false
EmbeddedDatabaseConnection -> public static boolean isEmbedded(DataSource dataSource);1516844492;Convenience method to determine if a given data source represents an embedded_database type._@param dataSource the data source to interrogate_@return true if the data source is one of the embedded types;public static boolean isEmbedded(DataSource dataSource) {_		try {_			return new JdbcTemplate(dataSource).execute(new IsEmbedded())__		}_		catch (DataAccessException ex) {_			_			return false__		}_	};convenience,method,to,determine,if,a,given,data,source,represents,an,embedded,database,type,param,data,source,the,data,source,to,interrogate,return,true,if,the,data,source,is,one,of,the,embedded,types;public,static,boolean,is,embedded,data,source,data,source,try,return,new,jdbc,template,data,source,execute,new,is,embedded,catch,data,access,exception,ex,return,false
EmbeddedDatabaseConnection -> public static boolean isEmbedded(DataSource dataSource);1516855380;Convenience method to determine if a given data source represents an embedded_database type._@param dataSource the data source to interrogate_@return true if the data source is one of the embedded types;public static boolean isEmbedded(DataSource dataSource) {_		try {_			return new JdbcTemplate(dataSource).execute(new IsEmbedded())__		}_		catch (DataAccessException ex) {_			_			return false__		}_	};convenience,method,to,determine,if,a,given,data,source,represents,an,embedded,database,type,param,data,source,the,data,source,to,interrogate,return,true,if,the,data,source,is,one,of,the,embedded,types;public,static,boolean,is,embedded,data,source,data,source,try,return,new,jdbc,template,data,source,execute,new,is,embedded,catch,data,access,exception,ex,return,false
EmbeddedDatabaseConnection -> public static boolean isEmbedded(DataSource dataSource);1519664612;Convenience method to determine if a given data source represents an embedded_database type._@param dataSource the data source to interrogate_@return true if the data source is one of the embedded types;public static boolean isEmbedded(DataSource dataSource) {_		try {_			return new JdbcTemplate(dataSource).execute(new IsEmbedded())__		}_		catch (DataAccessException ex) {_			_			return false__		}_	};convenience,method,to,determine,if,a,given,data,source,represents,an,embedded,database,type,param,data,source,the,data,source,to,interrogate,return,true,if,the,data,source,is,one,of,the,embedded,types;public,static,boolean,is,embedded,data,source,data,source,try,return,new,jdbc,template,data,source,execute,new,is,embedded,catch,data,access,exception,ex,return,false
EmbeddedDatabaseConnection -> public static boolean isEmbedded(DataSource dataSource);1532738143;Convenience method to determine if a given data source represents an embedded_database type._@param dataSource the data source to interrogate_@return true if the data source is one of the embedded types;public static boolean isEmbedded(DataSource dataSource) {_		try {_			return new JdbcTemplate(dataSource).execute(new IsEmbedded())__		}_		catch (DataAccessException ex) {_			_			return false__		}_	};convenience,method,to,determine,if,a,given,data,source,represents,an,embedded,database,type,param,data,source,the,data,source,to,interrogate,return,true,if,the,data,source,is,one,of,the,embedded,types;public,static,boolean,is,embedded,data,source,data,source,try,return,new,jdbc,template,data,source,execute,new,is,embedded,catch,data,access,exception,ex,return,false
EmbeddedDatabaseConnection -> public String getDriverClassName();1507173536;Returns the driver class name._@return the driver class name;public String getDriverClassName() {_		return this.driverClass__	};returns,the,driver,class,name,return,the,driver,class,name;public,string,get,driver,class,name,return,this,driver,class
EmbeddedDatabaseConnection -> public String getDriverClassName();1508932794;Returns the driver class name._@return the driver class name;public String getDriverClassName() {_		return this.driverClass__	};returns,the,driver,class,name,return,the,driver,class,name;public,string,get,driver,class,name,return,this,driver,class
EmbeddedDatabaseConnection -> public String getDriverClassName();1513199238;Returns the driver class name._@return the driver class name;public String getDriverClassName() {_		return this.driverClass__	};returns,the,driver,class,name,return,the,driver,class,name;public,string,get,driver,class,name,return,this,driver,class
EmbeddedDatabaseConnection -> public String getDriverClassName();1516844492;Returns the driver class name._@return the driver class name;public String getDriverClassName() {_		return this.driverClass__	};returns,the,driver,class,name,return,the,driver,class,name;public,string,get,driver,class,name,return,this,driver,class
EmbeddedDatabaseConnection -> public String getDriverClassName();1516855380;Returns the driver class name._@return the driver class name;public String getDriverClassName() {_		return this.driverClass__	};returns,the,driver,class,name,return,the,driver,class,name;public,string,get,driver,class,name,return,this,driver,class
EmbeddedDatabaseConnection -> public String getDriverClassName();1519664612;Returns the driver class name._@return the driver class name;public String getDriverClassName() {_		return this.driverClass__	};returns,the,driver,class,name,return,the,driver,class,name;public,string,get,driver,class,name,return,this,driver,class
EmbeddedDatabaseConnection -> public String getDriverClassName();1532738143;Returns the driver class name._@return the driver class name;public String getDriverClassName() {_		return this.driverClass__	};returns,the,driver,class,name,return,the,driver,class,name;public,string,get,driver,class,name,return,this,driver,class
EmbeddedDatabaseConnection -> public static boolean isEmbedded(String driverClass);1507173536;Convenience method to determine if a given driver class name represents an embedded_database type._@param driverClass the driver class_@return true if the driver class is one of the embedded types;public static boolean isEmbedded(String driverClass) {_		return driverClass != null && (driverClass.equals(HSQL.driverClass)_				|| driverClass.equals(H2.driverClass)_				|| driverClass.equals(DERBY.driverClass))__	};convenience,method,to,determine,if,a,given,driver,class,name,represents,an,embedded,database,type,param,driver,class,the,driver,class,return,true,if,the,driver,class,is,one,of,the,embedded,types;public,static,boolean,is,embedded,string,driver,class,return,driver,class,null,driver,class,equals,hsql,driver,class,driver,class,equals,h2,driver,class,driver,class,equals,derby,driver,class
EmbeddedDatabaseConnection -> public static boolean isEmbedded(String driverClass);1508932794;Convenience method to determine if a given driver class name represents an embedded_database type._@param driverClass the driver class_@return true if the driver class is one of the embedded types;public static boolean isEmbedded(String driverClass) {_		return driverClass != null && (driverClass.equals(HSQL.driverClass)_				|| driverClass.equals(H2.driverClass)_				|| driverClass.equals(DERBY.driverClass))__	};convenience,method,to,determine,if,a,given,driver,class,name,represents,an,embedded,database,type,param,driver,class,the,driver,class,return,true,if,the,driver,class,is,one,of,the,embedded,types;public,static,boolean,is,embedded,string,driver,class,return,driver,class,null,driver,class,equals,hsql,driver,class,driver,class,equals,h2,driver,class,driver,class,equals,derby,driver,class
EmbeddedDatabaseConnection -> public static boolean isEmbedded(String driverClass);1513199238;Convenience method to determine if a given driver class name represents an embedded_database type._@param driverClass the driver class_@return true if the driver class is one of the embedded types;public static boolean isEmbedded(String driverClass) {_		return driverClass != null && (driverClass.equals(HSQL.driverClass)_				|| driverClass.equals(H2.driverClass)_				|| driverClass.equals(DERBY.driverClass))__	};convenience,method,to,determine,if,a,given,driver,class,name,represents,an,embedded,database,type,param,driver,class,the,driver,class,return,true,if,the,driver,class,is,one,of,the,embedded,types;public,static,boolean,is,embedded,string,driver,class,return,driver,class,null,driver,class,equals,hsql,driver,class,driver,class,equals,h2,driver,class,driver,class,equals,derby,driver,class
EmbeddedDatabaseConnection -> public static boolean isEmbedded(String driverClass);1516844492;Convenience method to determine if a given driver class name represents an embedded_database type._@param driverClass the driver class_@return true if the driver class is one of the embedded types;public static boolean isEmbedded(String driverClass) {_		return driverClass != null && (driverClass.equals(HSQL.driverClass)_				|| driverClass.equals(H2.driverClass)_				|| driverClass.equals(DERBY.driverClass))__	};convenience,method,to,determine,if,a,given,driver,class,name,represents,an,embedded,database,type,param,driver,class,the,driver,class,return,true,if,the,driver,class,is,one,of,the,embedded,types;public,static,boolean,is,embedded,string,driver,class,return,driver,class,null,driver,class,equals,hsql,driver,class,driver,class,equals,h2,driver,class,driver,class,equals,derby,driver,class
EmbeddedDatabaseConnection -> public static boolean isEmbedded(String driverClass);1516855380;Convenience method to determine if a given driver class name represents an embedded_database type._@param driverClass the driver class_@return true if the driver class is one of the embedded types;public static boolean isEmbedded(String driverClass) {_		return driverClass != null && (driverClass.equals(HSQL.driverClass)_				|| driverClass.equals(H2.driverClass)_				|| driverClass.equals(DERBY.driverClass))__	};convenience,method,to,determine,if,a,given,driver,class,name,represents,an,embedded,database,type,param,driver,class,the,driver,class,return,true,if,the,driver,class,is,one,of,the,embedded,types;public,static,boolean,is,embedded,string,driver,class,return,driver,class,null,driver,class,equals,hsql,driver,class,driver,class,equals,h2,driver,class,driver,class,equals,derby,driver,class
EmbeddedDatabaseConnection -> public static boolean isEmbedded(String driverClass);1519664612;Convenience method to determine if a given driver class name represents an embedded_database type._@param driverClass the driver class_@return true if the driver class is one of the embedded types;public static boolean isEmbedded(String driverClass) {_		return driverClass != null && (driverClass.equals(HSQL.driverClass)_				|| driverClass.equals(H2.driverClass)_				|| driverClass.equals(DERBY.driverClass))__	};convenience,method,to,determine,if,a,given,driver,class,name,represents,an,embedded,database,type,param,driver,class,the,driver,class,return,true,if,the,driver,class,is,one,of,the,embedded,types;public,static,boolean,is,embedded,string,driver,class,return,driver,class,null,driver,class,equals,hsql,driver,class,driver,class,equals,h2,driver,class,driver,class,equals,derby,driver,class
EmbeddedDatabaseConnection -> public static boolean isEmbedded(String driverClass);1532738143;Convenience method to determine if a given driver class name represents an embedded_database type._@param driverClass the driver class_@return true if the driver class is one of the embedded types;public static boolean isEmbedded(String driverClass) {_		return driverClass != null && (driverClass.equals(HSQL.driverClass)_				|| driverClass.equals(H2.driverClass)_				|| driverClass.equals(DERBY.driverClass))__	};convenience,method,to,determine,if,a,given,driver,class,name,represents,an,embedded,database,type,param,driver,class,the,driver,class,return,true,if,the,driver,class,is,one,of,the,embedded,types;public,static,boolean,is,embedded,string,driver,class,return,driver,class,null,driver,class,equals,hsql,driver,class,driver,class,equals,h2,driver,class,driver,class,equals,derby,driver,class
EmbeddedDatabaseConnection -> public EmbeddedDatabaseType getType();1507173536;Returns the {@link EmbeddedDatabaseType} for the connection._@return the database type;public EmbeddedDatabaseType getType() {_		return this.type__	};returns,the,link,embedded,database,type,for,the,connection,return,the,database,type;public,embedded,database,type,get,type,return,this,type
EmbeddedDatabaseConnection -> public EmbeddedDatabaseType getType();1508932794;Returns the {@link EmbeddedDatabaseType} for the connection._@return the database type;public EmbeddedDatabaseType getType() {_		return this.type__	};returns,the,link,embedded,database,type,for,the,connection,return,the,database,type;public,embedded,database,type,get,type,return,this,type
EmbeddedDatabaseConnection -> public EmbeddedDatabaseType getType();1513199238;Returns the {@link EmbeddedDatabaseType} for the connection._@return the database type;public EmbeddedDatabaseType getType() {_		return this.type__	};returns,the,link,embedded,database,type,for,the,connection,return,the,database,type;public,embedded,database,type,get,type,return,this,type
EmbeddedDatabaseConnection -> public EmbeddedDatabaseType getType();1516844492;Returns the {@link EmbeddedDatabaseType} for the connection._@return the database type;public EmbeddedDatabaseType getType() {_		return this.type__	};returns,the,link,embedded,database,type,for,the,connection,return,the,database,type;public,embedded,database,type,get,type,return,this,type
EmbeddedDatabaseConnection -> public EmbeddedDatabaseType getType();1516855380;Returns the {@link EmbeddedDatabaseType} for the connection._@return the database type;public EmbeddedDatabaseType getType() {_		return this.type__	};returns,the,link,embedded,database,type,for,the,connection,return,the,database,type;public,embedded,database,type,get,type,return,this,type
EmbeddedDatabaseConnection -> public EmbeddedDatabaseType getType();1519664612;Returns the {@link EmbeddedDatabaseType} for the connection._@return the database type;public EmbeddedDatabaseType getType() {_		return this.type__	};returns,the,link,embedded,database,type,for,the,connection,return,the,database,type;public,embedded,database,type,get,type,return,this,type
EmbeddedDatabaseConnection -> public EmbeddedDatabaseType getType();1532738143;Returns the {@link EmbeddedDatabaseType} for the connection._@return the database type;public EmbeddedDatabaseType getType() {_		return this.type__	};returns,the,link,embedded,database,type,for,the,connection,return,the,database,type;public,embedded,database,type,get,type,return,this,type
EmbeddedDatabaseConnection -> public String getUrl(String databaseName);1507173536;Returns the URL for the connection using the specified {@code databaseName}._@param databaseName the name of the database_@return the connection URL;public String getUrl(String databaseName) {_		Assert.hasText(databaseName, "DatabaseName must not be null.")__		return String.format(this.url, databaseName)__	};returns,the,url,for,the,connection,using,the,specified,code,database,name,param,database,name,the,name,of,the,database,return,the,connection,url;public,string,get,url,string,database,name,assert,has,text,database,name,database,name,must,not,be,null,return,string,format,this,url,database,name
EmbeddedDatabaseConnection -> public String getUrl(String databaseName);1508932794;Returns the URL for the connection using the specified {@code databaseName}._@param databaseName the name of the database_@return the connection URL;public String getUrl(String databaseName) {_		Assert.hasText(databaseName, "DatabaseName must not be null.")__		return this.url != null ? String.format(this.url, databaseName) : null__	};returns,the,url,for,the,connection,using,the,specified,code,database,name,param,database,name,the,name,of,the,database,return,the,connection,url;public,string,get,url,string,database,name,assert,has,text,database,name,database,name,must,not,be,null,return,this,url,null,string,format,this,url,database,name,null
EmbeddedDatabaseConnection -> public String getUrl(String databaseName);1513199238;Returns the URL for the connection using the specified {@code databaseName}._@param databaseName the name of the database_@return the connection URL;public String getUrl(String databaseName) {_		Assert.hasText(databaseName, "DatabaseName must not be null.")__		return (this.url != null ? String.format(this.url, databaseName) : null)__	};returns,the,url,for,the,connection,using,the,specified,code,database,name,param,database,name,the,name,of,the,database,return,the,connection,url;public,string,get,url,string,database,name,assert,has,text,database,name,database,name,must,not,be,null,return,this,url,null,string,format,this,url,database,name,null
EmbeddedDatabaseConnection -> public String getUrl(String databaseName);1516844492;Returns the URL for the connection using the specified {@code databaseName} or_{@value DEFAULT_DATABASE_NAME} if {@code databaseName} is empty or {@code null}._@param databaseName the name of the database_@return the connection URL;public String getUrl(String databaseName) {_		String name = (StringUtils.hasText(databaseName)_				? databaseName : DEFAULT_DATABASE_NAME)__		return (this.url != null ? String.format(this.url, name) : null)__	};returns,the,url,for,the,connection,using,the,specified,code,database,name,or,value,if,code,database,name,is,empty,or,code,null,param,database,name,the,name,of,the,database,return,the,connection,url;public,string,get,url,string,database,name,string,name,string,utils,has,text,database,name,database,name,return,this,url,null,string,format,this,url,name,null
EmbeddedDatabaseConnection -> public String getUrl(String databaseName);1516855380;Returns the URL for the connection using the specified {@code databaseName}._@param databaseName the name of the database_@return the connection URL;public String getUrl(String databaseName) {_		Assert.hasText(databaseName, "DatabaseName must not be empty")__		return (this.url != null ? String.format(this.url, databaseName) : null)__	};returns,the,url,for,the,connection,using,the,specified,code,database,name,param,database,name,the,name,of,the,database,return,the,connection,url;public,string,get,url,string,database,name,assert,has,text,database,name,database,name,must,not,be,empty,return,this,url,null,string,format,this,url,database,name,null
EmbeddedDatabaseConnection -> public String getUrl(String databaseName);1519664612;Returns the URL for the connection using the specified {@code databaseName}._@param databaseName the name of the database_@return the connection URL;public String getUrl(String databaseName) {_		Assert.hasText(databaseName, "DatabaseName must not be empty")__		return (this.url != null ? String.format(this.url, databaseName) : null)__	};returns,the,url,for,the,connection,using,the,specified,code,database,name,param,database,name,the,name,of,the,database,return,the,connection,url;public,string,get,url,string,database,name,assert,has,text,database,name,database,name,must,not,be,empty,return,this,url,null,string,format,this,url,database,name,null
EmbeddedDatabaseConnection -> public String getUrl(String databaseName);1532738143;Returns the URL for the connection using the specified {@code databaseName}._@param databaseName the name of the database_@return the connection URL;public String getUrl(String databaseName) {_		Assert.hasText(databaseName, "DatabaseName must not be empty")__		return (this.url != null) ? String.format(this.url, databaseName) : null__	};returns,the,url,for,the,connection,using,the,specified,code,database,name,param,database,name,the,name,of,the,database,return,the,connection,url;public,string,get,url,string,database,name,assert,has,text,database,name,database,name,must,not,be,empty,return,this,url,null,string,format,this,url,database,name,null
EmbeddedDatabaseConnection -> public String getUrl();1507173536;Returns the URL for the connection using the default database name._@return the connection URL;public String getUrl() {_		return getUrl(DEFAULT_DATABASE_NAME)__	};returns,the,url,for,the,connection,using,the,default,database,name,return,the,connection,url;public,string,get,url,return,get,url
EmbeddedDatabaseConnection -> public String getUrl();1508932794;Returns the URL for the connection using the default database name._@return the connection URL;public String getUrl() {_		return getUrl(DEFAULT_DATABASE_NAME)__	};returns,the,url,for,the,connection,using,the,default,database,name,return,the,connection,url;public,string,get,url,return,get,url
EmbeddedDatabaseConnection -> public String getUrl();1513199238;Returns the URL for the connection using the default database name._@return the connection URL;public String getUrl() {_		return getUrl(DEFAULT_DATABASE_NAME)__	};returns,the,url,for,the,connection,using,the,default,database,name,return,the,connection,url;public,string,get,url,return,get,url
