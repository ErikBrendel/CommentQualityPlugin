commented;modifiers;parameterAmount;loc;comment;code
true;public;1;7;/**  * Set if a suitable HTTP-based {@link WebServiceMessageSender} should be detected  * based on the classpath. Default is {@code true}.  * @param detectHttpMessageSender if a HTTP-based {@link WebServiceMessageSender}  * should be detected  * @return a new builder instance  * @see HttpWebServiceMessageSenderBuilder  */ ;/**  * Set if a suitable HTTP-based {@link WebServiceMessageSender} should be detected  * based on the classpath. Default is {@code true}.  * @param detectHttpMessageSender if a HTTP-based {@link WebServiceMessageSender}  * should be detected  * @return a new builder instance  * @see HttpWebServiceMessageSenderBuilder  */ public WebServiceTemplateBuilder detectHttpMessageSender(boolean detectHttpMessageSender) {     return new WebServiceTemplateBuilder(detectHttpMessageSender, this.interceptors, this.internalCustomizers, this.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass, this.messageFactory). }
true;public;1;5;/**  * Sets the {@link WebServiceMessageSender WebServiceMessageSenders} that should be  * used with the {@link WebServiceTemplate}. Setting this value will replace any  * previously defined message senders, including the HTTP-based message sender, if  * any. Consider using {@link #additionalMessageSenders(WebServiceMessageSender...)}  * to keep it with user-defined message senders.  * @param messageSenders the message senders to set  * @return a new builder instance.  * @see #additionalMessageSenders(WebServiceMessageSender...)  * @see #detectHttpMessageSender(boolean)  */ ;/**  * Sets the {@link WebServiceMessageSender WebServiceMessageSenders} that should be  * used with the {@link WebServiceTemplate}. Setting this value will replace any  * previously defined message senders, including the HTTP-based message sender, if  * any. Consider using {@link #additionalMessageSenders(WebServiceMessageSender...)}  * to keep it with user-defined message senders.  * @param messageSenders the message senders to set  * @return a new builder instance.  * @see #additionalMessageSenders(WebServiceMessageSender...)  * @see #detectHttpMessageSender(boolean)  */ public WebServiceTemplateBuilder messageSenders(WebServiceMessageSender... messageSenders) {     Assert.notNull(messageSenders, "MessageSenders must not be null").     return messageSenders(Arrays.asList(messageSenders)). }
true;public;1;9;/**  * Sets the {@link WebServiceMessageSender WebServiceMessageSenders} that should be  * used with the {@link WebServiceTemplate}. Setting this value will replace any  * previously defined message senders, including the HTTP-based message sender, if  * any. Consider using {@link #additionalMessageSenders(Collection)} to keep it with  * user-defined message senders.  * @param messageSenders the message senders to set  * @return a new builder instance.  * @see #additionalMessageSenders(Collection)  * @see #detectHttpMessageSender(boolean)  */ ;/**  * Sets the {@link WebServiceMessageSender WebServiceMessageSenders} that should be  * used with the {@link WebServiceTemplate}. Setting this value will replace any  * previously defined message senders, including the HTTP-based message sender, if  * any. Consider using {@link #additionalMessageSenders(Collection)} to keep it with  * user-defined message senders.  * @param messageSenders the message senders to set  * @return a new builder instance.  * @see #additionalMessageSenders(Collection)  * @see #detectHttpMessageSender(boolean)  */ public WebServiceTemplateBuilder messageSenders(Collection<? extends WebServiceMessageSender> messageSenders) {     Assert.notNull(messageSenders, "MessageSenders must not be null").     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers, this.customizers, this.messageSenders.set(messageSenders), this.marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass, this.messageFactory). }
true;public;1;5;/**  * Add additional {@link WebServiceMessageSender WebServiceMessageSenders} that should  * be used with the {@link WebServiceTemplate}.  * @param messageSenders the message senders to add  * @return a new builder instance.  * @see #messageSenders(WebServiceMessageSender...)  */ ;/**  * Add additional {@link WebServiceMessageSender WebServiceMessageSenders} that should  * be used with the {@link WebServiceTemplate}.  * @param messageSenders the message senders to add  * @return a new builder instance.  * @see #messageSenders(WebServiceMessageSender...)  */ public WebServiceTemplateBuilder additionalMessageSenders(WebServiceMessageSender... messageSenders) {     Assert.notNull(messageSenders, "MessageSenders must not be null").     return additionalMessageSenders(Arrays.asList(messageSenders)). }
true;public;1;9;/**  * Add additional {@link WebServiceMessageSender WebServiceMessageSenders} that should  * be used with the {@link WebServiceTemplate}.  * @param messageSenders the message senders to add  * @return a new builder instance.  * @see #messageSenders(Collection)  */ ;/**  * Add additional {@link WebServiceMessageSender WebServiceMessageSenders} that should  * be used with the {@link WebServiceTemplate}.  * @param messageSenders the message senders to add  * @return a new builder instance.  * @see #messageSenders(Collection)  */ public WebServiceTemplateBuilder additionalMessageSenders(Collection<? extends WebServiceMessageSender> messageSenders) {     Assert.notNull(messageSenders, "MessageSenders must not be null").     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers, this.customizers, this.messageSenders.add(messageSenders), this.marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass, this.messageFactory). }
true;public;1;4;/**  * Set the {@link ClientInterceptor ClientInterceptors} that should be used with the  * {@link WebServiceTemplate}. Setting this value will replace any previously defined  * interceptors.  * @param interceptors the interceptors to set  * @return a new builder instance  * @see #additionalInterceptors(ClientInterceptor...)  */ ;/**  * Set the {@link ClientInterceptor ClientInterceptors} that should be used with the  * {@link WebServiceTemplate}. Setting this value will replace any previously defined  * interceptors.  * @param interceptors the interceptors to set  * @return a new builder instance  * @see #additionalInterceptors(ClientInterceptor...)  */ public WebServiceTemplateBuilder interceptors(ClientInterceptor... interceptors) {     Assert.notNull(interceptors, "Interceptors must not be null").     return interceptors(Arrays.asList(interceptors)). }
true;public;1;9;/**  * Set the {@link ClientInterceptor ClientInterceptors} that should be used with the  * {@link WebServiceTemplate}. Setting this value will replace any previously defined  * interceptors.  * @param interceptors the interceptors to set  * @return a new builder instance  * @see #additionalInterceptors(Collection)  */ ;/**  * Set the {@link ClientInterceptor ClientInterceptors} that should be used with the  * {@link WebServiceTemplate}. Setting this value will replace any previously defined  * interceptors.  * @param interceptors the interceptors to set  * @return a new builder instance  * @see #additionalInterceptors(Collection)  */ public WebServiceTemplateBuilder interceptors(Collection<? extends ClientInterceptor> interceptors) {     Assert.notNull(interceptors, "Interceptors must not be null").     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, append(Collections.<ClientInterceptor>emptySet(), interceptors), this.internalCustomizers, this.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass, this.messageFactory). }
true;public;1;5;/**  * Add additional {@link ClientInterceptor ClientInterceptors} that should be used  * with the {@link WebServiceTemplate}.  * @param interceptors the interceptors to add  * @return a new builder instance  * @see #interceptors(ClientInterceptor...)  */ ;/**  * Add additional {@link ClientInterceptor ClientInterceptors} that should be used  * with the {@link WebServiceTemplate}.  * @param interceptors the interceptors to add  * @return a new builder instance  * @see #interceptors(ClientInterceptor...)  */ public WebServiceTemplateBuilder additionalInterceptors(ClientInterceptor... interceptors) {     Assert.notNull(interceptors, "Interceptors must not be null").     return additionalInterceptors(Arrays.asList(interceptors)). }
true;public;1;9;/**  * Add additional {@link ClientInterceptor ClientInterceptors} that should be used  * with the {@link WebServiceTemplate}.  * @param interceptors the interceptors to add  * @return a new builder instance  * @see #interceptors(Collection)  */ ;/**  * Add additional {@link ClientInterceptor ClientInterceptors} that should be used  * with the {@link WebServiceTemplate}.  * @param interceptors the interceptors to add  * @return a new builder instance  * @see #interceptors(Collection)  */ public WebServiceTemplateBuilder additionalInterceptors(Collection<? extends ClientInterceptor> interceptors) {     Assert.notNull(interceptors, "Interceptors must not be null").     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, append(this.interceptors, interceptors), this.internalCustomizers, this.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass, this.messageFactory). }
true;public;1;5;/**  * Set {@link WebServiceTemplateCustomizer WebServiceTemplateCustomizers} that should  * be applied to the {@link WebServiceTemplate}. Customizers are applied in the order  * that they were added after builder configuration has been applied. Setting this  * value will replace any previously configured customizers.  * @param customizers the customizers to set  * @return a new builder instance  * @see #additionalCustomizers(WebServiceTemplateCustomizer...)  */ ;/**  * Set {@link WebServiceTemplateCustomizer WebServiceTemplateCustomizers} that should  * be applied to the {@link WebServiceTemplate}. Customizers are applied in the order  * that they were added after builder configuration has been applied. Setting this  * value will replace any previously configured customizers.  * @param customizers the customizers to set  * @return a new builder instance  * @see #additionalCustomizers(WebServiceTemplateCustomizer...)  */ public WebServiceTemplateBuilder customizers(WebServiceTemplateCustomizer... customizers) {     Assert.notNull(customizers, "Customizers must not be null").     return customizers(Arrays.asList(customizers)). }
true;public;1;10;/**  * Set {@link WebServiceTemplateCustomizer WebServiceTemplateCustomizers} that should  * be applied to the {@link WebServiceTemplate}. Customizers are applied in the order  * that they were added after builder configuration has been applied. Setting this  * value will replace any previously configured customizers.  * @param customizers the customizers to set  * @return a new builder instance  * @see #additionalCustomizers(Collection)  */ ;/**  * Set {@link WebServiceTemplateCustomizer WebServiceTemplateCustomizers} that should  * be applied to the {@link WebServiceTemplate}. Customizers are applied in the order  * that they were added after builder configuration has been applied. Setting this  * value will replace any previously configured customizers.  * @param customizers the customizers to set  * @return a new builder instance  * @see #additionalCustomizers(Collection)  */ public WebServiceTemplateBuilder customizers(Collection<? extends WebServiceTemplateCustomizer> customizers) {     Assert.notNull(customizers, "Customizers must not be null").     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers, append(Collections.<WebServiceTemplateCustomizer>emptySet(), customizers), this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass, this.messageFactory). }
true;public;1;5;/**  * Add additional {@link WebServiceTemplateCustomizer WebServiceTemplateCustomizers}  * that should be applied to the {@link WebServiceTemplate}. Customizers are applied  * in the order that they were added after builder configuration has been applied.  * @param customizers the customizers to add  * @return a new builder instance  * @see #customizers(WebServiceTemplateCustomizer...)  */ ;/**  * Add additional {@link WebServiceTemplateCustomizer WebServiceTemplateCustomizers}  * that should be applied to the {@link WebServiceTemplate}. Customizers are applied  * in the order that they were added after builder configuration has been applied.  * @param customizers the customizers to add  * @return a new builder instance  * @see #customizers(WebServiceTemplateCustomizer...)  */ public WebServiceTemplateBuilder additionalCustomizers(WebServiceTemplateCustomizer... customizers) {     Assert.notNull(customizers, "Customizers must not be null").     return additionalCustomizers(Arrays.asList(customizers)). }
true;public;1;9;/**  * Add additional {@link WebServiceTemplateCustomizer WebServiceTemplateCustomizers}  * that should be applied to the {@link WebServiceTemplate}. Customizers are applied  * in the order that they were added after builder configuration has been applied.  * @param customizers the customizers to add  * @return a new builder instance  * @see #customizers(Collection)  */ ;/**  * Add additional {@link WebServiceTemplateCustomizer WebServiceTemplateCustomizers}  * that should be applied to the {@link WebServiceTemplate}. Customizers are applied  * in the order that they were added after builder configuration has been applied.  * @param customizers the customizers to add  * @return a new builder instance  * @see #customizers(Collection)  */ public WebServiceTemplateBuilder additionalCustomizers(Collection<? extends WebServiceTemplateCustomizer> customizers) {     Assert.notNull(customizers, "Customizers must not be null").     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers, append(this.customizers, customizers), this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass, this.messageFactory). }
true;public;1;10;/**  * Indicates whether the connection should be checked for fault indicators  * ({@code true}), or whether we should rely on the message only ({@code false}).  * @param checkConnectionForFault whether to check for fault indicators  * @return a new builder instance.  * @see WebServiceTemplate#setCheckConnectionForFault(boolean)  */ ;/**  * Indicates whether the connection should be checked for fault indicators  * ({@code true}), or whether we should rely on the message only ({@code false}).  * @param checkConnectionForFault whether to check for fault indicators  * @return a new builder instance.  * @see WebServiceTemplate#setCheckConnectionForFault(boolean)  */ public WebServiceTemplateBuilder setCheckConnectionForFault(boolean checkConnectionForFault) {     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, append(this.internalCustomizers, new CheckConnectionFaultCustomizer(checkConnectionForFault)), this.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass, this.messageFactory). }
true;public;1;10;/**  * Indicates whether the connection should be checked for error indicators  * ({@code true}), or whether these should be ignored ({@code false}).  * @param checkConnectionForError whether to check for error indicators  * @return a new builder instance.  * @see WebServiceTemplate#setCheckConnectionForError(boolean)  */ ;/**  * Indicates whether the connection should be checked for error indicators  * ({@code true}), or whether these should be ignored ({@code false}).  * @param checkConnectionForError whether to check for error indicators  * @return a new builder instance.  * @see WebServiceTemplate#setCheckConnectionForError(boolean)  */ public WebServiceTemplateBuilder setCheckConnectionForError(boolean checkConnectionForError) {     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, append(this.internalCustomizers, new CheckConnectionForErrorCustomizer(checkConnectionForError)), this.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass, this.messageFactory). }
true;public;1;8;/**  * Sets the {@link WebServiceMessageFactory} to use for creating messages.  * @param messageFactory the message factory to use for creating messages  * @return a new builder instance.  * @see WebServiceTemplate#setMessageFactory(WebServiceMessageFactory)  */ ;/**  * Sets the {@link WebServiceMessageFactory} to use for creating messages.  * @param messageFactory the message factory to use for creating messages  * @return a new builder instance.  * @see WebServiceTemplate#setMessageFactory(WebServiceMessageFactory)  */ public WebServiceTemplateBuilder setWebServiceMessageFactory(WebServiceMessageFactory messageFactory) {     Assert.notNull(messageFactory, "MessageFactory must not be null").     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers, this.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass, messageFactory). }
true;public;1;7;/**  * Set the {@link Unmarshaller} to use to deserialize messages.  * @param unmarshaller the message unmarshaller  * @return a new builder instance.  * @see WebServiceTemplate#setUnmarshaller(Unmarshaller)  */ ;/**  * Set the {@link Unmarshaller} to use to deserialize messages.  * @param unmarshaller the message unmarshaller  * @return a new builder instance.  * @see WebServiceTemplate#setUnmarshaller(Unmarshaller)  */ public WebServiceTemplateBuilder setUnmarshaller(Unmarshaller unmarshaller) {     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers, this.customizers, this.messageSenders, this.marshaller, unmarshaller, this.destinationProvider, this.transformerFactoryClass, this.messageFactory). }
true;public;1;7;/**  * Set the {@link Marshaller} to use to serialize messages.  * @param marshaller the message marshaller  * @return a new builder instance.  * @see WebServiceTemplate#setMarshaller(Marshaller)  */ ;/**  * Set the {@link Marshaller} to use to serialize messages.  * @param marshaller the message marshaller  * @return a new builder instance.  * @see WebServiceTemplate#setMarshaller(Marshaller)  */ public WebServiceTemplateBuilder setMarshaller(Marshaller marshaller) {     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers, this.customizers, this.messageSenders, marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass, this.messageFactory). }
true;public;1;10;/**  * Set the {@link FaultMessageResolver} to use.  * @param faultMessageResolver the fault message resolver to use  * @return a new builder instance.  * @see WebServiceTemplate#setFaultMessageResolver(FaultMessageResolver)  */ ;/**  * Set the {@link FaultMessageResolver} to use.  * @param faultMessageResolver the fault message resolver to use  * @return a new builder instance.  * @see WebServiceTemplate#setFaultMessageResolver(FaultMessageResolver)  */ public WebServiceTemplateBuilder setFaultMessageResolver(FaultMessageResolver faultMessageResolver) {     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, append(this.internalCustomizers, new FaultMessageResolverCustomizer(faultMessageResolver)), this.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider, this.transformerFactoryClass, this.messageFactory). }
true;public;1;7;/**  * Set the {@link TransformerFactory} implementation to use.  * @param transformerFactoryClass the transformer factory implementation to use  * @return a new builder instance.  * @see WebServiceTemplate#setTransformerFactoryClass(Class)  */ ;/**  * Set the {@link TransformerFactory} implementation to use.  * @param transformerFactoryClass the transformer factory implementation to use  * @return a new builder instance.  * @see WebServiceTemplate#setTransformerFactoryClass(Class)  */ public WebServiceTemplateBuilder setTransformerFactoryClass(Class<? extends TransformerFactory> transformerFactoryClass) {     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers, this.customizers, this.messageSenders, this.marshaller, this.unmarshaller, this.destinationProvider, transformerFactoryClass, this.messageFactory). }
true;public;1;4;/**  * Set the default URI to be used on operations that do not have a URI parameter.  * Typically, either this property is set, or  * {@link #setDestinationProvider(DestinationProvider)}, but not both.  * @param defaultUri the destination provider URI to be used on operations that do not  * have a URI parameter.  * @return a new builder instance.  * @see #setDestinationProvider(DestinationProvider)  */ ;/**  * Set the default URI to be used on operations that do not have a URI parameter.  * Typically, either this property is set, or  * {@link #setDestinationProvider(DestinationProvider)}, but not both.  * @param defaultUri the destination provider URI to be used on operations that do not  * have a URI parameter.  * @return a new builder instance.  * @see #setDestinationProvider(DestinationProvider)  */ public WebServiceTemplateBuilder setDefaultUri(String defaultUri) {     Assert.hasText(defaultUri, "DefaultUri must not be empty").     return setDestinationProvider(() -> URI.create(defaultUri)). }
true;public;1;8;/**  * Set the {@link DestinationProvider} to use. Typically, either this property is set,  * or {@link #setDefaultUri(String)}, but not both.  * @param destinationProvider the destination provider to be used on operations that  * do not have a URI parameter.  * @return a new builder instance.  * @see WebServiceTemplate#setDestinationProvider(DestinationProvider)  */ ;/**  * Set the {@link DestinationProvider} to use. Typically, either this property is set,  * or {@link #setDefaultUri(String)}, but not both.  * @param destinationProvider the destination provider to be used on operations that  * do not have a URI parameter.  * @return a new builder instance.  * @see WebServiceTemplate#setDestinationProvider(DestinationProvider)  */ public WebServiceTemplateBuilder setDestinationProvider(DestinationProvider destinationProvider) {     Assert.notNull(destinationProvider, "DestinationProvider must not be null").     return new WebServiceTemplateBuilder(this.detectHttpMessageSender, this.interceptors, this.internalCustomizers, this.customizers, this.messageSenders, this.marshaller, this.unmarshaller, destinationProvider, this.transformerFactoryClass, this.messageFactory). }
true;public;0;3;/**  * Build a new {@link WebServiceTemplate} instance and configure it using this  * builder.  * @return a configured {@link WebServiceTemplate} instance.  * @see #build(Class)  * @see #configure(WebServiceTemplate)  */ ;/**  * Build a new {@link WebServiceTemplate} instance and configure it using this  * builder.  * @return a configured {@link WebServiceTemplate} instance.  * @see #build(Class)  * @see #configure(WebServiceTemplate)  */ public WebServiceTemplate build() {     return build(WebServiceTemplate.class). }
true;public;1;5;/**  * Build a new {@link WebServiceTemplate} instance of the specified type and configure  * it using this builder.  * @param <T> the type of web service template  * @param webServiceTemplateClass the template type to create  * @return a configured {@link WebServiceTemplate} instance.  * @see WebServiceTemplateBuilder#build()  * @see #configure(WebServiceTemplate)  */ ;/**  * Build a new {@link WebServiceTemplate} instance of the specified type and configure  * it using this builder.  * @param <T> the type of web service template  * @param webServiceTemplateClass the template type to create  * @return a configured {@link WebServiceTemplate} instance.  * @see WebServiceTemplateBuilder#build()  * @see #configure(WebServiceTemplate)  */ public <T extends WebServiceTemplate> T build(Class<T> webServiceTemplateClass) {     Assert.notNull(webServiceTemplateClass, "WebServiceTemplateClass must not be null").     return configure(BeanUtils.instantiateClass(webServiceTemplateClass)). }
true;public;1;21;/**  * Configure the provided {@link WebServiceTemplate} instance using this builder.  * @param <T> the type of web service template  * @param webServiceTemplate the {@link WebServiceTemplate} to configure  * @return the web service template instance  * @see #build()  * @see #build(Class)  */ ;/**  * Configure the provided {@link WebServiceTemplate} instance using this builder.  * @param <T> the type of web service template  * @param webServiceTemplate the {@link WebServiceTemplate} to configure  * @return the web service template instance  * @see #build()  * @see #build(Class)  */ public <T extends WebServiceTemplate> T configure(T webServiceTemplate) {     Assert.notNull(webServiceTemplate, "WebServiceTemplate must not be null").     configureMessageSenders(webServiceTemplate).     PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull().     applyCustomizers(webServiceTemplate, this.internalCustomizers).     map.from(this.marshaller).to(webServiceTemplate::setMarshaller).     map.from(this.unmarshaller).to(webServiceTemplate::setUnmarshaller).     map.from(this.destinationProvider).to(webServiceTemplate::setDestinationProvider).     map.from(this.transformerFactoryClass).to(webServiceTemplate::setTransformerFactoryClass).     map.from(this.messageFactory).to(webServiceTemplate::setMessageFactory).     if (!CollectionUtils.isEmpty(this.interceptors)) {         Set<ClientInterceptor> merged = new LinkedHashSet<>(this.interceptors).         if (webServiceTemplate.getInterceptors() != null) {             merged.addAll(Arrays.asList(webServiceTemplate.getInterceptors())).         }         webServiceTemplate.setInterceptors(merged.toArray(new ClientInterceptor[0])).     }     applyCustomizers(webServiceTemplate, this.customizers).     return webServiceTemplate. }
false;private;2;8;;private void applyCustomizers(WebServiceTemplate webServiceTemplate, Set<WebServiceTemplateCustomizer> customizers) {     if (!CollectionUtils.isEmpty(customizers)) {         for (WebServiceTemplateCustomizer internalCustomizer : customizers) {             internalCustomizer.customize(webServiceTemplate).         }     } }
false;private;1;14;;private <T extends WebServiceTemplate> void configureMessageSenders(T webServiceTemplate) {     if (this.messageSenders.isOnlyAdditional() && this.detectHttpMessageSender) {         Set<WebServiceMessageSender> merged = append(this.messageSenders.getMessageSenders(), new HttpWebServiceMessageSenderBuilder().build()).         webServiceTemplate.setMessageSenders(merged.toArray(new WebServiceMessageSender[0])).     } else if (!CollectionUtils.isEmpty(this.messageSenders.getMessageSenders())) {         webServiceTemplate.setMessageSenders(this.messageSenders.getMessageSenders().toArray(new WebServiceMessageSender[0])).     } }
false;private;2;3;;private <T> Set<T> append(Set<T> set, T addition) {     return append(set, Collections.singleton(addition)). }
false;private,static;2;5;;private static <T> Set<T> append(Set<T> set, Collection<? extends T> additions) {     Set<T> result = new LinkedHashSet<>((set != null) ? set : Collections.emptySet()).     result.addAll((additions != null) ? additions : Collections.emptyList()).     return Collections.unmodifiableSet(result). }
false;public;0;3;;public boolean isOnlyAdditional() {     return this.onlyAdditional. }
false;public;0;3;;public Set<WebServiceMessageSender> getMessageSenders() {     return this.messageSenders. }
false;public;1;5;;public WebServiceMessageSenders set(Collection<? extends WebServiceMessageSender> messageSenders) {     return new WebServiceMessageSenders(false, new LinkedHashSet<>(messageSenders)). }
false;public;1;5;;public WebServiceMessageSenders add(Collection<? extends WebServiceMessageSender> messageSenders) {     return new WebServiceMessageSenders(this.onlyAdditional, append(this.messageSenders, messageSenders)). }
false;public;1;4;;@Override public void customize(WebServiceTemplate webServiceTemplate) {     webServiceTemplate.setCheckConnectionForFault(this.checkConnectionFault). }
false;public;1;4;;@Override public void customize(WebServiceTemplate webServiceTemplate) {     webServiceTemplate.setCheckConnectionForError(this.checkConnectionForError). }
false;public;1;4;;@Override public void customize(WebServiceTemplate webServiceTemplate) {     webServiceTemplate.setFaultMessageResolver(this.faultMessageResolver). }
