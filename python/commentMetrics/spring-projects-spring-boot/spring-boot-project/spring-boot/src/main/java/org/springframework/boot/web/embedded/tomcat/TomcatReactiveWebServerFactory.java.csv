commented;modifiers;parameterAmount;loc;comment;code
false;public;1;16;;@Override public WebServer getWebServer(HttpHandler httpHandler) {     Tomcat tomcat = new Tomcat().     File baseDir = (this.baseDirectory != null) ? this.baseDirectory : createTempDir("tomcat").     tomcat.setBaseDir(baseDir.getAbsolutePath()).     Connector connector = new Connector(this.protocol).     tomcat.getService().addConnector(connector).     customizeConnector(connector).     tomcat.setConnector(connector).     tomcat.getHost().setAutoDeploy(false).     configureEngine(tomcat.getEngine()).     TomcatHttpHandlerAdapter servlet = new TomcatHttpHandlerAdapter(httpHandler).     prepareContext(tomcat.getHost(), servlet).     return new TomcatWebServer(tomcat, getPort() >= 0). }
false;private;1;6;;private void configureEngine(Engine engine) {     engine.setBackgroundProcessorDelay(this.backgroundProcessorDelay).     for (Valve valve : this.engineValves) {         engine.getPipeline().addValve(valve).     } }
false;protected;2;17;;protected void prepareContext(Host host, TomcatHttpHandlerAdapter servlet) {     File docBase = createTempDir("tomcat-docbase").     TomcatEmbeddedContext context = new TomcatEmbeddedContext().     context.setPath("").     context.setDocBase(docBase.getAbsolutePath()).     context.addLifecycleListener(new Tomcat.FixContextListener()).     context.setParentClassLoader(ClassUtils.getDefaultClassLoader()).     skipAllTldScanning(context).     WebappLoader loader = new WebappLoader(context.getParentClassLoader()).     loader.setLoaderClass(TomcatEmbeddedWebappClassLoader.class.getName()).     loader.setDelegate(true).     context.setLoader(loader).     Tomcat.addServlet(context, "httpHandlerServlet", servlet).setAsyncSupported(true).     context.addServletMappingDecoded("/", "httpHandlerServlet").     host.addChild(context).     configureContext(context). }
false;private;1;5;;private void skipAllTldScanning(TomcatEmbeddedContext context) {     StandardJarScanFilter filter = new StandardJarScanFilter().     filter.setTldSkip("*.jar").     context.getJarScanner().setJarScanFilter(filter). }
true;protected;1;6;/**  * Configure the Tomcat {@link Context}.  * @param context the Tomcat context  */ ;/**  * Configure the Tomcat {@link Context}.  * @param context the Tomcat context  */ protected void configureContext(Context context) {     this.contextLifecycleListeners.forEach(context::addLifecycleListener).     new DisableReferenceClearingContextCustomizer().customize(context).     this.tomcatContextCustomizers.forEach((customizer) -> customizer.customize(context)). }
false;protected;1;24;;protected void customizeConnector(Connector connector) {     int port = (getPort() >= 0) ? getPort() : 0.     connector.setPort(port).     if (StringUtils.hasText(this.getServerHeader())) {         connector.setAttribute("server", this.getServerHeader()).     }     if (connector.getProtocolHandler() instanceof AbstractProtocol) {         customizeProtocol((AbstractProtocol<?>) connector.getProtocolHandler()).     }     if (getUriEncoding() != null) {         connector.setURIEncoding(getUriEncoding().name()).     }     // Don't bind to the socket prematurely if ApplicationContext is slow to start     connector.setProperty("bindOnInit", "false").     if (getSsl() != null && getSsl().isEnabled()) {         customizeSsl(connector).     }     TomcatConnectorCustomizer compression = new CompressionConnectorCustomizer(getCompression()).     compression.customize(connector).     for (TomcatConnectorCustomizer customizer : this.tomcatConnectorCustomizers) {         customizer.customize(connector).     } }
false;private;1;5;;private void customizeProtocol(AbstractProtocol<?> protocol) {     if (getAddress() != null) {         protocol.setAddress(getAddress()).     } }
false;private;1;6;;private void customizeSsl(Connector connector) {     new SslConnectorCustomizer(getSsl(), getSslStoreProvider()).customize(connector).     if (getHttp2() != null && getHttp2().isEnabled()) {         connector.addUpgradeProtocol(new Http2Protocol()).     } }
false;public;1;4;;@Override public void setBaseDirectory(File baseDirectory) {     this.baseDirectory = baseDirectory. }
false;public;1;4;;@Override public void setBackgroundProcessorDelay(int delay) {     this.backgroundProcessorDelay = delay. }
true;public;1;6;/**  * Set {@link TomcatContextCustomizer}s that should be applied to the Tomcat  * {@link Context}. Calling this method will replace any existing customizers.  * @param tomcatContextCustomizers the customizers to set  */ ;/**  * Set {@link TomcatContextCustomizer}s that should be applied to the Tomcat  * {@link Context}. Calling this method will replace any existing customizers.  * @param tomcatContextCustomizers the customizers to set  */ public void setTomcatContextCustomizers(Collection<? extends TomcatContextCustomizer> tomcatContextCustomizers) {     Assert.notNull(tomcatContextCustomizers, "TomcatContextCustomizers must not be null").     this.tomcatContextCustomizers = new ArrayList<>(tomcatContextCustomizers). }
true;public;0;3;/**  * Returns a mutable collection of the {@link TomcatContextCustomizer}s that will be  * applied to the Tomcat {@link Context}.  * @return the listeners that will be applied  */ ;/**  * Returns a mutable collection of the {@link TomcatContextCustomizer}s that will be  * applied to the Tomcat {@link Context}.  * @return the listeners that will be applied  */ public Collection<TomcatContextCustomizer> getTomcatContextCustomizers() {     return this.tomcatContextCustomizers. }
true;public;1;7;/**  * Add {@link TomcatContextCustomizer}s that should be added to the Tomcat  * {@link Context}.  * @param tomcatContextCustomizers the customizers to add  */ ;/**  * Add {@link TomcatContextCustomizer}s that should be added to the Tomcat  * {@link Context}.  * @param tomcatContextCustomizers the customizers to add  */ @Override public void addContextCustomizers(TomcatContextCustomizer... tomcatContextCustomizers) {     Assert.notNull(tomcatContextCustomizers, "TomcatContextCustomizers must not be null").     this.tomcatContextCustomizers.addAll(Arrays.asList(tomcatContextCustomizers)). }
true;public;1;6;/**  * Set {@link TomcatConnectorCustomizer}s that should be applied to the Tomcat  * {@link Connector}. Calling this method will replace any existing customizers.  * @param tomcatConnectorCustomizers the customizers to set  */ ;/**  * Set {@link TomcatConnectorCustomizer}s that should be applied to the Tomcat  * {@link Connector}. Calling this method will replace any existing customizers.  * @param tomcatConnectorCustomizers the customizers to set  */ public void setTomcatConnectorCustomizers(Collection<? extends TomcatConnectorCustomizer> tomcatConnectorCustomizers) {     Assert.notNull(tomcatConnectorCustomizers, "TomcatConnectorCustomizers must not be null").     this.tomcatConnectorCustomizers = new ArrayList<>(tomcatConnectorCustomizers). }
true;public;1;7;/**  * Add {@link TomcatConnectorCustomizer}s that should be added to the Tomcat  * {@link Connector}.  * @param tomcatConnectorCustomizers the customizers to add  */ ;/**  * Add {@link TomcatConnectorCustomizer}s that should be added to the Tomcat  * {@link Connector}.  * @param tomcatConnectorCustomizers the customizers to add  */ @Override public void addConnectorCustomizers(TomcatConnectorCustomizer... tomcatConnectorCustomizers) {     Assert.notNull(tomcatConnectorCustomizers, "TomcatConnectorCustomizers must not be null").     this.tomcatConnectorCustomizers.addAll(Arrays.asList(tomcatConnectorCustomizers)). }
true;public;0;3;/**  * Returns a mutable collection of the {@link TomcatConnectorCustomizer}s that will be  * applied to the Tomcat {@link Connector}.  * @return the customizers that will be applied  */ ;/**  * Returns a mutable collection of the {@link TomcatConnectorCustomizer}s that will be  * applied to the Tomcat {@link Connector}.  * @return the customizers that will be applied  */ public Collection<TomcatConnectorCustomizer> getTomcatConnectorCustomizers() {     return this.tomcatConnectorCustomizers. }
false;public;1;5;;@Override public void addEngineValves(Valve... engineValves) {     Assert.notNull(engineValves, "Valves must not be null").     this.engineValves.addAll(Arrays.asList(engineValves)). }
true;public;0;3;/**  * Returns a mutable collection of the {@link Valve}s that will be applied to the  * Tomcat {@link Engine}.  * @return the engine valves that will be applied  */ ;/**  * Returns a mutable collection of the {@link Valve}s that will be applied to the  * Tomcat {@link Engine}.  * @return the engine valves that will be applied  */ public List<Valve> getEngineValves() {     return this.engineValves. }
true;public;1;4;/**  * Set the character encoding to use for URL decoding. If not specified 'UTF-8' will  * be used.  * @param uriEncoding the uri encoding to set  */ ;/**  * Set the character encoding to use for URL decoding. If not specified 'UTF-8' will  * be used.  * @param uriEncoding the uri encoding to set  */ @Override public void setUriEncoding(Charset uriEncoding) {     this.uriEncoding = uriEncoding. }
true;public;0;3;/**  * Returns the character encoding to use for URL decoding.  * @return the URI encoding  */ ;/**  * Returns the character encoding to use for URL decoding.  * @return the URI encoding  */ public Charset getUriEncoding() {     return this.uriEncoding. }
true;public;1;6;/**  * Set {@link LifecycleListener}s that should be applied to the Tomcat  * {@link Context}. Calling this method will replace any existing listeners.  * @param contextLifecycleListeners the listeners to set  */ ;/**  * Set {@link LifecycleListener}s that should be applied to the Tomcat  * {@link Context}. Calling this method will replace any existing listeners.  * @param contextLifecycleListeners the listeners to set  */ public void setContextLifecycleListeners(Collection<? extends LifecycleListener> contextLifecycleListeners) {     Assert.notNull(contextLifecycleListeners, "ContextLifecycleListeners must not be null").     this.contextLifecycleListeners = new ArrayList<>(contextLifecycleListeners). }
true;public;0;3;/**  * Returns a mutable collection of the {@link LifecycleListener}s that will be applied  * to the Tomcat {@link Context}.  * @return the context lifecycle listeners that will be applied  */ ;/**  * Returns a mutable collection of the {@link LifecycleListener}s that will be applied  * to the Tomcat {@link Context}.  * @return the context lifecycle listeners that will be applied  */ public Collection<LifecycleListener> getContextLifecycleListeners() {     return this.contextLifecycleListeners. }
true;public;1;6;/**  * Add {@link LifecycleListener}s that should be added to the Tomcat {@link Context}.  * @param contextLifecycleListeners the listeners to add  */ ;/**  * Add {@link LifecycleListener}s that should be added to the Tomcat {@link Context}.  * @param contextLifecycleListeners the listeners to add  */ public void addContextLifecycleListeners(LifecycleListener... contextLifecycleListeners) {     Assert.notNull(contextLifecycleListeners, "ContextLifecycleListeners must not be null").     this.contextLifecycleListeners.addAll(Arrays.asList(contextLifecycleListeners)). }
true;protected;1;3;/**  * Factory method called to create the {@link TomcatWebServer}. Subclasses can  * override this method to return a different {@link TomcatWebServer} or apply  * additional processing to the Tomcat server.  * @param tomcat the Tomcat server.  * @return a new {@link TomcatWebServer} instance  */ ;/**  * Factory method called to create the {@link TomcatWebServer}. Subclasses can  * override this method to return a different {@link TomcatWebServer} or apply  * additional processing to the Tomcat server.  * @param tomcat the Tomcat server.  * @return a new {@link TomcatWebServer} instance  */ protected TomcatWebServer getTomcatWebServer(Tomcat tomcat) {     return new TomcatWebServer(tomcat, getPort() >= 0). }
true;public;1;4;/**  * The Tomcat protocol to use when create the {@link Connector}.  * @param protocol the protocol  * @see Connector#Connector(String)  */ ;/**  * The Tomcat protocol to use when create the {@link Connector}.  * @param protocol the protocol  * @see Connector#Connector(String)  */ public void setProtocol(String protocol) {     Assert.hasLength(protocol, "Protocol must not be empty").     this.protocol = protocol. }
