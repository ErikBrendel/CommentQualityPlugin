commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;4;;@Override public final Mono<MatchResult> matches(ServerWebExchange exchange) {     return matches(exchange, getContext(exchange)). }
true;protected,abstract;2;2;/**  * Decides whether the rule implemented by the strategy matches the supplied exchange.  * @param exchange the source exchange  * @param context a supplier for the initialized context (may throw an exception)  * @return if the exchange matches  */ ;/**  * Decides whether the rule implemented by the strategy matches the supplied exchange.  * @param exchange the source exchange  * @param context a supplier for the initialized context (may throw an exception)  * @return if the exchange matches  */ protected abstract Mono<MatchResult> matches(ServerWebExchange exchange, Supplier<C> context).
false;protected;1;12;;protected Supplier<C> getContext(ServerWebExchange exchange) {     if (this.context == null) {         synchronized (this.contextLock) {             if (this.context == null) {                 Supplier<C> createdContext = createContext(exchange).                 initialized(createdContext).                 this.context = createdContext.             }         }     }     return this.context. }
true;protected;1;2;/**  * Called once the context has been initialized.  * @param context a supplier for the initialized context (may throw an exception)  */ ;/**  * Called once the context has been initialized.  * @param context a supplier for the initialized context (may throw an exception)  */ protected void initialized(Supplier<C> context) { }
false;private;1;10;;@SuppressWarnings("unchecked") private Supplier<C> createContext(ServerWebExchange exchange) {     ApplicationContext context = exchange.getApplicationContext().     Assert.state(context != null, "No ApplicationContext found on ServerWebExchange.").     if (this.contextClass.isInstance(context)) {         return () -> (C) context.     }     return () -> context.getBean(this.contextClass). }
