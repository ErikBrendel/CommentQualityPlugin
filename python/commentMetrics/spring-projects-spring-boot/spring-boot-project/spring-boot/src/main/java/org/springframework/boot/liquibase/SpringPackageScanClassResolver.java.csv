commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;17;;@Override protected void findAllClasses(String packageName, ClassLoader loader) {     MetadataReaderFactory metadataReaderFactory = new CachingMetadataReaderFactory(loader).     try {         Resource[] resources = scan(loader, packageName).         for (Resource resource : resources) {             Class<?> clazz = loadClass(loader, metadataReaderFactory, resource).             if (clazz != null) {                 addFoundClass(clazz).             }         }     } catch (IOException ex) {         throw new IllegalStateException(ex).     } }
false;private;2;7;;private Resource[] scan(ClassLoader loader, String packageName) throws IOException {     ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(loader).     String pattern = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX + ClassUtils.convertClassNameToResourcePath(packageName) + "/**/*.class".     return resolver.getResources(pattern). }
false;private;3;18;;private Class<?> loadClass(ClassLoader loader, MetadataReaderFactory readerFactory, Resource resource) {     try {         MetadataReader reader = readerFactory.getMetadataReader(resource).         return ClassUtils.forName(reader.getClassMetadata().getClassName(), loader).     } catch (ClassNotFoundException | LinkageError ex) {         handleFailure(resource, ex).         return null.     } catch (Throwable ex) {         if (this.logger.isWarnEnabled()) {             this.logger.warn("Unexpected failure when loading class resource " + resource, ex).         }         return null.     } }
false;private;2;6;;private void handleFailure(Resource resource, Throwable ex) {     if (this.logger.isDebugEnabled()) {         this.logger.debug("Ignoring candidate class resource " + resource + " due to " + ex).     } }
