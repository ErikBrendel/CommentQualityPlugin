commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return getDir().getAbsolutePath(). }
true;public;1;5;/**  * Return a sub-directory of the application temp.  * @param subDir the sub-directory name  * @return a sub-directory  */ ;/**  * Return a sub-directory of the application temp.  * @param subDir the sub-directory name  * @return a sub-directory  */ public File getDir(String subDir) {     File dir = new File(getDir(), subDir).     dir.mkdirs().     return dir. }
true;public;0;12;/**  * Return the directory to be used for application specific temp files.  * @return the application temp directory  */ ;/**  * Return the directory to be used for application specific temp files.  * @return the application temp directory  */ public File getDir() {     if (this.dir == null) {         synchronized (this) {             byte[] hash = generateHash(this.sourceClass).             this.dir = new File(getTempDirectory(), toHexString(hash)).             this.dir.mkdirs().             Assert.state(this.dir.exists(), () -> "Unable to create temp directory " + this.dir).         }     }     return this.dir. }
false;private;0;9;;private File getTempDirectory() {     String property = System.getProperty("java.io.tmpdir").     Assert.state(StringUtils.hasLength(property), "No 'java.io.tmpdir' property set").     File file = new File(property).     Assert.state(file.exists(), () -> "Temp directory " + file + " does not exist").     Assert.state(file.isDirectory(), () -> "Temp location " + file + " is not a directory").     return file. }
false;private;1;18;;private byte[] generateHash(Class<?> sourceClass) {     ApplicationHome home = new ApplicationHome(sourceClass).     MessageDigest digest.     try {         digest = MessageDigest.getInstance("SHA-1").         update(digest, home.getSource()).         update(digest, home.getDir()).         update(digest, System.getProperty("user.dir")).         update(digest, System.getProperty("java.home")).         update(digest, System.getProperty("java.class.path")).         update(digest, System.getProperty("sun.java.command")).         update(digest, System.getProperty("sun.boot.class.path")).         return digest.digest().     } catch (Exception ex) {         throw new IllegalStateException(ex).     } }
false;private;2;5;;private void update(MessageDigest digest, Object source) {     if (source != null) {         digest.update(getUpdateSourceBytes(source)).     } }
false;private;1;6;;private byte[] getUpdateSourceBytes(Object source) {     if (source instanceof File) {         return getUpdateSourceBytes(((File) source).getAbsolutePath()).     }     return source.toString().getBytes(). }
false;private;1;9;;private String toHexString(byte[] bytes) {     char[] hex = new char[bytes.length * 2].     for (int i = 0. i < bytes.length. i++) {         int b = bytes[i] & 0xFF.         hex[i * 2] = HEX_CHARS[b >>> 4].         hex[i * 2 + 1] = HEX_CHARS[b & 0x0F].     }     return new String(hex). }
