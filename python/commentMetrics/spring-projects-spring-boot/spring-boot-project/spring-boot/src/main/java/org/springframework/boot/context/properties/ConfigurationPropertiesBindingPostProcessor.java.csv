commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {     this.applicationContext = applicationContext. }
false;public;0;10;;@Override public void afterPropertiesSet() throws Exception {     // We can't use constructor injection of the application context because     // it causes eager factory bean initialization     this.beanFactoryMetadata = this.applicationContext.getBean(ConfigurationBeanFactoryMetadata.BEAN_NAME, ConfigurationBeanFactoryMetadata.class).     this.configurationPropertiesBinder = new ConfigurationPropertiesBinder(this.applicationContext, VALIDATOR_BEAN_NAME). }
false;public;0;4;;@Override public int getOrder() {     return Ordered.HIGHEST_PRECEDENCE + 1. }
false;public;2;10;;@Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {     ConfigurationProperties annotation = getAnnotation(bean, beanName, ConfigurationProperties.class).     if (annotation != null) {         bind(bean, beanName, annotation).     }     return bean. }
false;private;3;16;;private void bind(Object bean, String beanName, ConfigurationProperties annotation) {     ResolvableType type = getBeanType(bean, beanName).     Validated validated = getAnnotation(bean, beanName, Validated.class).     Annotation[] annotations = (validated != null) ? new Annotation[] { annotation, validated } : new Annotation[] { annotation }.     Bindable<?> target = Bindable.of(type).withExistingValue(bean).withAnnotations(annotations).     try {         this.configurationPropertiesBinder.bind(target).     } catch (Exception ex) {         throw new ConfigurationPropertiesBindException(beanName, bean, annotation, ex).     } }
false;private;2;7;;private ResolvableType getBeanType(Object bean, String beanName) {     Method factoryMethod = this.beanFactoryMetadata.findFactoryMethod(beanName).     if (factoryMethod != null) {         return ResolvableType.forMethodReturnType(factoryMethod).     }     return ResolvableType.forClass(bean.getClass()). }
false;private;3;8;;private <A extends Annotation> A getAnnotation(Object bean, String beanName, Class<A> type) {     A annotation = this.beanFactoryMetadata.findFactoryAnnotation(beanName, type).     if (annotation == null) {         annotation = AnnotationUtils.findAnnotation(bean.getClass(), type).     }     return annotation. }
