commented;modifiers;parameterAmount;loc;comment;code
false;private;1;18;;private List<FailureAnalyzer> loadFailureAnalyzers(ClassLoader classLoader) {     List<String> analyzerNames = SpringFactoriesLoader.loadFactoryNames(FailureAnalyzer.class, classLoader).     List<FailureAnalyzer> analyzers = new ArrayList<>().     for (String analyzerName : analyzerNames) {         try {             Constructor<?> constructor = ClassUtils.forName(analyzerName, classLoader).getDeclaredConstructor().             ReflectionUtils.makeAccessible(constructor).             analyzers.add((FailureAnalyzer) constructor.newInstance()).         } catch (Throwable ex) {             logger.trace("Failed to load " + analyzerName, ex).         }     }     AnnotationAwareOrderComparator.sort(analyzers).     return analyzers. }
false;private;2;6;;private void prepareFailureAnalyzers(List<FailureAnalyzer> analyzers, ConfigurableApplicationContext context) {     for (FailureAnalyzer analyzer : analyzers) {         prepareAnalyzer(context, analyzer).     } }
false;private;2;9;;private void prepareAnalyzer(ConfigurableApplicationContext context, FailureAnalyzer analyzer) {     if (analyzer instanceof BeanFactoryAware) {         ((BeanFactoryAware) analyzer).setBeanFactory(context.getBeanFactory()).     }     if (analyzer instanceof EnvironmentAware) {         ((EnvironmentAware) analyzer).setEnvironment(context.getEnvironment()).     } }
false;public;1;5;;@Override public boolean reportException(Throwable failure) {     FailureAnalysis analysis = analyze(failure, this.analyzers).     return report(analysis, this.classLoader). }
false;private;2;14;;private FailureAnalysis analyze(Throwable failure, List<FailureAnalyzer> analyzers) {     for (FailureAnalyzer analyzer : analyzers) {         try {             FailureAnalysis analysis = analyzer.analyze(failure).             if (analysis != null) {                 return analysis.             }         } catch (Throwable ex) {             logger.debug("FailureAnalyzer " + analyzer + " failed", ex).         }     }     return null. }
false;private;2;11;;private boolean report(FailureAnalysis analysis, ClassLoader classLoader) {     List<FailureAnalysisReporter> reporters = SpringFactoriesLoader.loadFactories(FailureAnalysisReporter.class, classLoader).     if (analysis == null || reporters.isEmpty()) {         return false.     }     for (FailureAnalysisReporter reporter : reporters) {         reporter.report(analysis).     }     return true. }
