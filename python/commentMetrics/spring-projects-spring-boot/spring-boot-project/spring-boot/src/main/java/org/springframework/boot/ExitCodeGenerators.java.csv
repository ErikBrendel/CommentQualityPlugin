commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;public void addAll(Throwable exception, ExitCodeExceptionMapper... mappers) {     Assert.notNull(exception, "Exception must not be null").     Assert.notNull(mappers, "Mappers must not be null").     addAll(exception, Arrays.asList(mappers)). }
false;public;2;8;;public void addAll(Throwable exception, Iterable<? extends ExitCodeExceptionMapper> mappers) {     Assert.notNull(exception, "Exception must not be null").     Assert.notNull(mappers, "Mappers must not be null").     for (ExitCodeExceptionMapper mapper : mappers) {         add(exception, mapper).     } }
false;public;2;5;;public void add(Throwable exception, ExitCodeExceptionMapper mapper) {     Assert.notNull(exception, "Exception must not be null").     Assert.notNull(mapper, "Mapper must not be null").     add(new MappedExitCodeGenerator(exception, mapper)). }
false;public;1;4;;public void addAll(ExitCodeGenerator... generators) {     Assert.notNull(generators, "Generators must not be null").     addAll(Arrays.asList(generators)). }
false;public;1;6;;public void addAll(Iterable<? extends ExitCodeGenerator> generators) {     Assert.notNull(generators, "Generators must not be null").     for (ExitCodeGenerator generator : generators) {         add(generator).     } }
false;public;1;4;;public void add(ExitCodeGenerator generator) {     Assert.notNull(generator, "Generator must not be null").     this.generators.add(generator). }
false;public;0;4;;@Override public Iterator<ExitCodeGenerator> iterator() {     return this.generators.iterator(). }
true;public;0;16;/**  * Get the final exit code that should be returned based on all contained generators.  * @return the final exit code.  */ ;/**  * Get the final exit code that should be returned based on all contained generators.  * @return the final exit code.  */ public int getExitCode() {     int exitCode = 0.     for (ExitCodeGenerator generator : this.generators) {         try {             int value = generator.getExitCode().             if (value > 0 && value > exitCode || value < 0 && value < exitCode) {                 exitCode = value.             }         } catch (Exception ex) {             exitCode = (exitCode != 0) ? exitCode : 1.             ex.printStackTrace().         }     }     return exitCode. }
false;public;0;4;;@Override public int getExitCode() {     return this.mapper.getExitCode(this.exception). }
