# id;timestamp;commentText;codeText;commentWords;codeWords
TaskExecutorBuilder -> public <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass);1533546040;Build a new {@link ThreadPoolTaskExecutor} instance of the specified type and_configure it using this builder._@param <T> the type of task executor_@param taskExecutorClass the template type to create_@return a configured {@link ThreadPoolTaskExecutor} instance._@see TaskExecutorBuilder#build()_@see #configure(ThreadPoolTaskExecutor);public <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass) {_		return configure(BeanUtils.instantiateClass(taskExecutorClass))__	};build,a,new,link,thread,pool,task,executor,instance,of,the,specified,type,and,configure,it,using,this,builder,param,t,the,type,of,task,executor,param,task,executor,class,the,template,type,to,create,return,a,configured,link,thread,pool,task,executor,instance,see,task,executor,builder,build,see,configure,thread,pool,task,executor;public,t,extends,thread,pool,task,executor,t,build,class,t,task,executor,class,return,configure,bean,utils,instantiate,class,task,executor,class
TaskExecutorBuilder -> public <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass);1534319046;Build a new {@link ThreadPoolTaskExecutor} instance of the specified type and_configure it using this builder._@param <T> the type of task executor_@param taskExecutorClass the template type to create_@return a configured {@link ThreadPoolTaskExecutor} instance._@see #build()_@see #configure(ThreadPoolTaskExecutor);public <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass) {_		return configure(BeanUtils.instantiateClass(taskExecutorClass))__	};build,a,new,link,thread,pool,task,executor,instance,of,the,specified,type,and,configure,it,using,this,builder,param,t,the,type,of,task,executor,param,task,executor,class,the,template,type,to,create,return,a,configured,link,thread,pool,task,executor,instance,see,build,see,configure,thread,pool,task,executor;public,t,extends,thread,pool,task,executor,t,build,class,t,task,executor,class,return,configure,bean,utils,instantiate,class,task,executor,class
TaskExecutorBuilder -> public <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass);1534945262;Build a new {@link ThreadPoolTaskExecutor} instance of the specified type and_configure it using this builder._@param <T> the type of task executor_@param taskExecutorClass the template type to create_@return a configured {@link ThreadPoolTaskExecutor} instance._@see #build()_@see #configure(ThreadPoolTaskExecutor);public <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass) {_		return configure(BeanUtils.instantiateClass(taskExecutorClass))__	};build,a,new,link,thread,pool,task,executor,instance,of,the,specified,type,and,configure,it,using,this,builder,param,t,the,type,of,task,executor,param,task,executor,class,the,template,type,to,create,return,a,configured,link,thread,pool,task,executor,instance,see,build,see,configure,thread,pool,task,executor;public,t,extends,thread,pool,task,executor,t,build,class,t,task,executor,class,return,configure,bean,utils,instantiate,class,task,executor,class
TaskExecutorBuilder -> public <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass);1536177260;Build a new {@link ThreadPoolTaskExecutor} instance of the specified type and_configure it using this builder._@param <T> the type of task executor_@param taskExecutorClass the template type to create_@return a configured {@link ThreadPoolTaskExecutor} instance._@see #build()_@see #configure(ThreadPoolTaskExecutor);public <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass) {_		return configure(BeanUtils.instantiateClass(taskExecutorClass))__	};build,a,new,link,thread,pool,task,executor,instance,of,the,specified,type,and,configure,it,using,this,builder,param,t,the,type,of,task,executor,param,task,executor,class,the,template,type,to,create,return,a,configured,link,thread,pool,task,executor,instance,see,build,see,configure,thread,pool,task,executor;public,t,extends,thread,pool,task,executor,t,build,class,t,task,executor,class,return,configure,bean,utils,instantiate,class,task,executor,class
TaskExecutorBuilder -> public <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass);1550520845;Build a new {@link ThreadPoolTaskExecutor} instance of the specified type and_configure it using this builder._@param <T> the type of task executor_@param taskExecutorClass the template type to create_@return a configured {@link ThreadPoolTaskExecutor} instance._@see #build()_@see #configure(ThreadPoolTaskExecutor);public <T extends ThreadPoolTaskExecutor> T build(Class<T> taskExecutorClass) {_		return configure(BeanUtils.instantiateClass(taskExecutorClass))__	};build,a,new,link,thread,pool,task,executor,instance,of,the,specified,type,and,configure,it,using,this,builder,param,t,the,type,of,task,executor,param,task,executor,class,the,template,type,to,create,return,a,configured,link,thread,pool,task,executor,instance,see,build,see,configure,thread,pool,task,executor;public,t,extends,thread,pool,task,executor,t,build,class,t,task,executor,class,return,configure,bean,utils,instantiate,class,task,executor,class
TaskExecutorBuilder -> public TaskExecutorBuilder additionalCustomizers( 			Iterable<TaskExecutorCustomizer> customizers);1536177260;Add {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be applied_to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order that_they were added after builder configuration has been applied._@param customizers the customizers to add_@return a new builder instance_@see #customizers(TaskExecutorCustomizer...);public TaskExecutorBuilder additionalCustomizers(_			Iterable<TaskExecutorCustomizer> customizers) {_		Assert.notNull(customizers, "Customizers must not be null")__		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, this.taskDecorator,_				append(this.customizers, customizers))__	};add,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,param,customizers,the,customizers,to,add,return,a,new,builder,instance,see,customizers,task,executor,customizer;public,task,executor,builder,additional,customizers,iterable,task,executor,customizer,customizers,assert,not,null,customizers,customizers,must,not,be,null,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,append,this,customizers,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder additionalCustomizers( 			Iterable<TaskExecutorCustomizer> customizers);1550520845;Add {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be applied_to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order that_they were added after builder configuration has been applied._@param customizers the customizers to add_@return a new builder instance_@see #customizers(TaskExecutorCustomizer...);public TaskExecutorBuilder additionalCustomizers(_			Iterable<TaskExecutorCustomizer> customizers) {_		Assert.notNull(customizers, "Customizers must not be null")__		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,_				this.taskDecorator, append(this.customizers, customizers))__	};add,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,param,customizers,the,customizers,to,add,return,a,new,builder,instance,see,customizers,task,executor,customizer;public,task,executor,builder,additional,customizers,iterable,task,executor,customizer,customizers,assert,not,null,customizers,customizers,must,not,be,null,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,await,termination,this,await,termination,period,this,thread,name,prefix,this,task,decorator,append,this,customizers,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder corePoolSize(int corePoolSize);1533546040;Set the core number of threads. Effectively that maximum number of threads as long_as the queue is not full._<p>_Core threads can grow and shrink if {@link #allowCoreThreadTimeOut(boolean)} is_enabled._@param corePoolSize the core pool size to set_@return a new builder instance;public TaskExecutorBuilder corePoolSize(int corePoolSize) {_		return new TaskExecutorBuilder(this.queueCapacity, corePoolSize, this.maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.threadNamePrefix,_				this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,core,number,of,threads,effectively,that,maximum,number,of,threads,as,long,as,the,queue,is,not,full,p,core,threads,can,grow,and,shrink,if,link,allow,core,thread,time,out,boolean,is,enabled,param,core,pool,size,the,core,pool,size,to,set,return,a,new,builder,instance;public,task,executor,builder,core,pool,size,int,core,pool,size,return,new,task,executor,builder,this,queue,capacity,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder corePoolSize(int corePoolSize);1534319046;Set the core number of threads. Effectively that maximum number of threads as long_as the queue is not full._<p>_Core threads can grow and shrink if {@link #allowCoreThreadTimeOut(boolean)} is_enabled._@param corePoolSize the core pool size to set_@return a new builder instance;public TaskExecutorBuilder corePoolSize(int corePoolSize) {_		return new TaskExecutorBuilder(this.queueCapacity, corePoolSize, this.maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.threadNamePrefix,_				this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,core,number,of,threads,effectively,that,maximum,number,of,threads,as,long,as,the,queue,is,not,full,p,core,threads,can,grow,and,shrink,if,link,allow,core,thread,time,out,boolean,is,enabled,param,core,pool,size,the,core,pool,size,to,set,return,a,new,builder,instance;public,task,executor,builder,core,pool,size,int,core,pool,size,return,new,task,executor,builder,this,queue,capacity,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder corePoolSize(int corePoolSize);1534945262;Set the core number of threads. Effectively that maximum number of threads as long_as the queue is not full._<p>_Core threads can grow and shrink if {@link #allowCoreThreadTimeOut(boolean)} is_enabled._@param corePoolSize the core pool size to set_@return a new builder instance;public TaskExecutorBuilder corePoolSize(int corePoolSize) {_		return new TaskExecutorBuilder(this.queueCapacity, corePoolSize, this.maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.threadNamePrefix,_				this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,core,number,of,threads,effectively,that,maximum,number,of,threads,as,long,as,the,queue,is,not,full,p,core,threads,can,grow,and,shrink,if,link,allow,core,thread,time,out,boolean,is,enabled,param,core,pool,size,the,core,pool,size,to,set,return,a,new,builder,instance;public,task,executor,builder,core,pool,size,int,core,pool,size,return,new,task,executor,builder,this,queue,capacity,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder corePoolSize(int corePoolSize);1536177260;Set the core number of threads. Effectively that maximum number of threads as long_as the queue is not full._<p>_Core threads can grow and shrink if {@link #allowCoreThreadTimeOut(boolean)} is_enabled._@param corePoolSize the core pool size to set_@return a new builder instance;public TaskExecutorBuilder corePoolSize(int corePoolSize) {_		return new TaskExecutorBuilder(this.queueCapacity, corePoolSize, this.maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.threadNamePrefix,_				this.taskDecorator, this.customizers)__	};set,the,core,number,of,threads,effectively,that,maximum,number,of,threads,as,long,as,the,queue,is,not,full,p,core,threads,can,grow,and,shrink,if,link,allow,core,thread,time,out,boolean,is,enabled,param,core,pool,size,the,core,pool,size,to,set,return,a,new,builder,instance;public,task,executor,builder,core,pool,size,int,core,pool,size,return,new,task,executor,builder,this,queue,capacity,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder corePoolSize(int corePoolSize);1550520845;Set the core number of threads. Effectively that maximum number of threads as long_as the queue is not full._<p>_Core threads can grow and shrink if {@link #allowCoreThreadTimeOut(boolean)} is_enabled._@param corePoolSize the core pool size to set_@return a new builder instance;public TaskExecutorBuilder corePoolSize(int corePoolSize) {_		return new TaskExecutorBuilder(this.queueCapacity, corePoolSize, this.maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.awaitTermination,_				this.awaitTerminationPeriod, this.threadNamePrefix, this.taskDecorator,_				this.customizers)__	};set,the,core,number,of,threads,effectively,that,maximum,number,of,threads,as,long,as,the,queue,is,not,full,p,core,threads,can,grow,and,shrink,if,link,allow,core,thread,time,out,boolean,is,enabled,param,core,pool,size,the,core,pool,size,to,set,return,a,new,builder,instance;public,task,executor,builder,core,pool,size,int,core,pool,size,return,new,task,executor,builder,this,queue,capacity,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,await,termination,this,await,termination,period,this,thread,name,prefix,this,task,decorator,this,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder keepAlive(Duration keepAlive);1533546040;Set the time limit for which threads may remain idle before being terminated._@param keepAlive the keep alive to set_@return a new builder instance;public TaskExecutorBuilder keepAlive(Duration keepAlive) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, keepAlive,_				this.threadNamePrefix, this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,time,limit,for,which,threads,may,remain,idle,before,being,terminated,param,keep,alive,the,keep,alive,to,set,return,a,new,builder,instance;public,task,executor,builder,keep,alive,duration,keep,alive,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder keepAlive(Duration keepAlive);1534319046;Set the time limit for which threads may remain idle before being terminated._@param keepAlive the keep alive to set_@return a new builder instance;public TaskExecutorBuilder keepAlive(Duration keepAlive) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, keepAlive,_				this.threadNamePrefix, this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,time,limit,for,which,threads,may,remain,idle,before,being,terminated,param,keep,alive,the,keep,alive,to,set,return,a,new,builder,instance;public,task,executor,builder,keep,alive,duration,keep,alive,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder keepAlive(Duration keepAlive);1534945262;Set the time limit for which threads may remain idle before being terminated._@param keepAlive the keep alive to set_@return a new builder instance;public TaskExecutorBuilder keepAlive(Duration keepAlive) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, keepAlive,_				this.threadNamePrefix, this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,time,limit,for,which,threads,may,remain,idle,before,being,terminated,param,keep,alive,the,keep,alive,to,set,return,a,new,builder,instance;public,task,executor,builder,keep,alive,duration,keep,alive,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder keepAlive(Duration keepAlive);1536177260;Set the time limit for which threads may remain idle before being terminated._@param keepAlive the keep alive to set_@return a new builder instance;public TaskExecutorBuilder keepAlive(Duration keepAlive) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, keepAlive,_				this.threadNamePrefix, this.taskDecorator, this.customizers)__	};set,the,time,limit,for,which,threads,may,remain,idle,before,being,terminated,param,keep,alive,the,keep,alive,to,set,return,a,new,builder,instance;public,task,executor,builder,keep,alive,duration,keep,alive,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,keep,alive,this,thread,name,prefix,this,task,decorator,this,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder keepAlive(Duration keepAlive);1550520845;Set the time limit for which threads may remain idle before being terminated._@param keepAlive the keep alive to set_@return a new builder instance;public TaskExecutorBuilder keepAlive(Duration keepAlive) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, keepAlive,_				this.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,_				this.taskDecorator, this.customizers)__	};set,the,time,limit,for,which,threads,may,remain,idle,before,being,terminated,param,keep,alive,the,keep,alive,to,set,return,a,new,builder,instance;public,task,executor,builder,keep,alive,duration,keep,alive,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,keep,alive,this,await,termination,this,await,termination,period,this,thread,name,prefix,this,task,decorator,this,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator);1533546040;Set the {@link TaskDecorator} to use or {@code null} to not use any._@param taskDecorator the task decorator to use_@return a new builder instance;public TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, taskDecorator, this.taskExecutorCustomizers)__	};set,the,link,task,decorator,to,use,or,code,null,to,not,use,any,param,task,decorator,the,task,decorator,to,use,return,a,new,builder,instance;public,task,executor,builder,task,decorator,task,decorator,task,decorator,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator);1534319046;Set the {@link TaskDecorator} to use or {@code null} to not use any._@param taskDecorator the task decorator to use_@return a new builder instance;public TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, taskDecorator, this.taskExecutorCustomizers)__	};set,the,link,task,decorator,to,use,or,code,null,to,not,use,any,param,task,decorator,the,task,decorator,to,use,return,a,new,builder,instance;public,task,executor,builder,task,decorator,task,decorator,task,decorator,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator);1534945262;Set the {@link TaskDecorator} to use or {@code null} to not use any._@param taskDecorator the task decorator to use_@return a new builder instance;public TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, taskDecorator, this.taskExecutorCustomizers)__	};set,the,link,task,decorator,to,use,or,code,null,to,not,use,any,param,task,decorator,the,task,decorator,to,use,return,a,new,builder,instance;public,task,executor,builder,task,decorator,task,decorator,task,decorator,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator);1536177260;Set the {@link TaskDecorator} to use or {@code null} to not use any._@param taskDecorator the task decorator to use_@return a new builder instance;public TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, taskDecorator, this.customizers)__	};set,the,link,task,decorator,to,use,or,code,null,to,not,use,any,param,task,decorator,the,task,decorator,to,use,return,a,new,builder,instance;public,task,executor,builder,task,decorator,task,decorator,task,decorator,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,task,decorator,this,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator);1550520845;Set the {@link TaskDecorator} to use or {@code null} to not use any._@param taskDecorator the task decorator to use_@return a new builder instance;public TaskExecutorBuilder taskDecorator(TaskDecorator taskDecorator) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,_				taskDecorator, this.customizers)__	};set,the,link,task,decorator,to,use,or,code,null,to,not,use,any,param,task,decorator,the,task,decorator,to,use,return,a,new,builder,instance;public,task,executor,builder,task,decorator,task,decorator,task,decorator,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,await,termination,this,await,termination,period,this,thread,name,prefix,task,decorator,this,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder queueCapacity(int queueCapacity);1533546040;Set the capacity of the queue. A unbounded capacity does not increase the pool and_therefore ignores {@link #maxPoolSize(int) maxPoolSize}._@param queueCapacity the queue capacity to set_@return a new builder instance;public TaskExecutorBuilder queueCapacity(int queueCapacity) {_		return new TaskExecutorBuilder(queueCapacity, this.corePoolSize, this.maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.threadNamePrefix,_				this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,capacity,of,the,queue,a,unbounded,capacity,does,not,increase,the,pool,and,therefore,ignores,link,max,pool,size,int,max,pool,size,param,queue,capacity,the,queue,capacity,to,set,return,a,new,builder,instance;public,task,executor,builder,queue,capacity,int,queue,capacity,return,new,task,executor,builder,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder queueCapacity(int queueCapacity);1534319046;Set the capacity of the queue. An unbounded capacity does not increase the pool and_therefore ignores {@link #maxPoolSize(int) maxPoolSize}._@param queueCapacity the queue capacity to set_@return a new builder instance;public TaskExecutorBuilder queueCapacity(int queueCapacity) {_		return new TaskExecutorBuilder(queueCapacity, this.corePoolSize, this.maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.threadNamePrefix,_				this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,capacity,of,the,queue,an,unbounded,capacity,does,not,increase,the,pool,and,therefore,ignores,link,max,pool,size,int,max,pool,size,param,queue,capacity,the,queue,capacity,to,set,return,a,new,builder,instance;public,task,executor,builder,queue,capacity,int,queue,capacity,return,new,task,executor,builder,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder queueCapacity(int queueCapacity);1534945262;Set the capacity of the queue. An unbounded capacity does not increase the pool and_therefore ignores {@link #maxPoolSize(int) maxPoolSize}._@param queueCapacity the queue capacity to set_@return a new builder instance;public TaskExecutorBuilder queueCapacity(int queueCapacity) {_		return new TaskExecutorBuilder(queueCapacity, this.corePoolSize, this.maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.threadNamePrefix,_				this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,capacity,of,the,queue,an,unbounded,capacity,does,not,increase,the,pool,and,therefore,ignores,link,max,pool,size,int,max,pool,size,param,queue,capacity,the,queue,capacity,to,set,return,a,new,builder,instance;public,task,executor,builder,queue,capacity,int,queue,capacity,return,new,task,executor,builder,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder queueCapacity(int queueCapacity);1536177260;Set the capacity of the queue. An unbounded capacity does not increase the pool and_therefore ignores {@link #maxPoolSize(int) maxPoolSize}._@param queueCapacity the queue capacity to set_@return a new builder instance;public TaskExecutorBuilder queueCapacity(int queueCapacity) {_		return new TaskExecutorBuilder(queueCapacity, this.corePoolSize, this.maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.threadNamePrefix,_				this.taskDecorator, this.customizers)__	};set,the,capacity,of,the,queue,an,unbounded,capacity,does,not,increase,the,pool,and,therefore,ignores,link,max,pool,size,int,max,pool,size,param,queue,capacity,the,queue,capacity,to,set,return,a,new,builder,instance;public,task,executor,builder,queue,capacity,int,queue,capacity,return,new,task,executor,builder,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder queueCapacity(int queueCapacity);1550520845;Set the capacity of the queue. An unbounded capacity does not increase the pool and_therefore ignores {@link #maxPoolSize(int) maxPoolSize}._@param queueCapacity the queue capacity to set_@return a new builder instance;public TaskExecutorBuilder queueCapacity(int queueCapacity) {_		return new TaskExecutorBuilder(queueCapacity, this.corePoolSize, this.maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.awaitTermination,_				this.awaitTerminationPeriod, this.threadNamePrefix, this.taskDecorator,_				this.customizers)__	};set,the,capacity,of,the,queue,an,unbounded,capacity,does,not,increase,the,pool,and,therefore,ignores,link,max,pool,size,int,max,pool,size,param,queue,capacity,the,queue,capacity,to,set,return,a,new,builder,instance;public,task,executor,builder,queue,capacity,int,queue,capacity,return,new,task,executor,builder,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,await,termination,this,await,termination,period,this,thread,name,prefix,this,task,decorator,this,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder customizers( 			Collection<? extends TaskExecutorCustomizer> taskExecutorCustomizers);1533546040;Set the {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be_applied to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order_that they were added after builder configuration has been applied. Setting this_value will replace any previously configured customizers._@param taskExecutorCustomizers the customizers to set_@return a new builder instance_@see #additionalCustomizers(TaskExecutorCustomizer...);public TaskExecutorBuilder customizers(_			Collection<? extends TaskExecutorCustomizer> taskExecutorCustomizers) {_		Assert.notNull(taskExecutorCustomizers,_				"TaskExecutorCustomizers must not be null")__		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, this.taskDecorator,_				Collections.unmodifiableSet(new LinkedHashSet<TaskExecutorCustomizer>(_						taskExecutorCustomizers)))__	};set,the,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,setting,this,value,will,replace,any,previously,configured,customizers,param,task,executor,customizers,the,customizers,to,set,return,a,new,builder,instance,see,additional,customizers,task,executor,customizer;public,task,executor,builder,customizers,collection,extends,task,executor,customizer,task,executor,customizers,assert,not,null,task,executor,customizers,task,executor,customizers,must,not,be,null,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,collections,unmodifiable,set,new,linked,hash,set,task,executor,customizer,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder customizers( 			Collection<? extends TaskExecutorCustomizer> taskExecutorCustomizers);1534319046;Set the {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be_applied to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order_that they were added after builder configuration has been applied. Setting this_value will replace any previously configured customizers._@param taskExecutorCustomizers the customizers to set_@return a new builder instance_@see #additionalCustomizers(TaskExecutorCustomizer...);public TaskExecutorBuilder customizers(_			Collection<? extends TaskExecutorCustomizer> taskExecutorCustomizers) {_		Assert.notNull(taskExecutorCustomizers,_				"TaskExecutorCustomizers must not be null")__		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, this.taskDecorator,_				Collections.unmodifiableSet(new LinkedHashSet<TaskExecutorCustomizer>(_						taskExecutorCustomizers)))__	};set,the,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,setting,this,value,will,replace,any,previously,configured,customizers,param,task,executor,customizers,the,customizers,to,set,return,a,new,builder,instance,see,additional,customizers,task,executor,customizer;public,task,executor,builder,customizers,collection,extends,task,executor,customizer,task,executor,customizers,assert,not,null,task,executor,customizers,task,executor,customizers,must,not,be,null,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,collections,unmodifiable,set,new,linked,hash,set,task,executor,customizer,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder customizers( 			Collection<? extends TaskExecutorCustomizer> taskExecutorCustomizers);1534945262;Set the {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be_applied to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order_that they were added after builder configuration has been applied. Setting this_value will replace any previously configured customizers._@param taskExecutorCustomizers the customizers to set_@return a new builder instance_@see #additionalCustomizers(TaskExecutorCustomizer...);public TaskExecutorBuilder customizers(_			Collection<? extends TaskExecutorCustomizer> taskExecutorCustomizers) {_		Assert.notNull(taskExecutorCustomizers,_				"TaskExecutorCustomizers must not be null")__		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, this.taskDecorator,_				Collections.unmodifiableSet(new LinkedHashSet<TaskExecutorCustomizer>(_						taskExecutorCustomizers)))__	};set,the,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,setting,this,value,will,replace,any,previously,configured,customizers,param,task,executor,customizers,the,customizers,to,set,return,a,new,builder,instance,see,additional,customizers,task,executor,customizer;public,task,executor,builder,customizers,collection,extends,task,executor,customizer,task,executor,customizers,assert,not,null,task,executor,customizers,task,executor,customizers,must,not,be,null,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,collections,unmodifiable,set,new,linked,hash,set,task,executor,customizer,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder maxPoolSize(int maxPoolSize);1533546040;Set the maximum allowed number of threads. When the {@link #queueCapacity(int)_queue} is full, the pool can expand up to that size to accommodate the load._<p>_If the {@link #queueCapacity(int) queue capacity} is unbounded, this setting is_ignored._@param maxPoolSize the max pool size to set_@return a new builder instance;public TaskExecutorBuilder maxPoolSize(int maxPoolSize) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.threadNamePrefix,_				this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,maximum,allowed,number,of,threads,when,the,link,queue,capacity,int,queue,is,full,the,pool,can,expand,up,to,that,size,to,accommodate,the,load,p,if,the,link,queue,capacity,int,queue,capacity,is,unbounded,this,setting,is,ignored,param,max,pool,size,the,max,pool,size,to,set,return,a,new,builder,instance;public,task,executor,builder,max,pool,size,int,max,pool,size,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder maxPoolSize(int maxPoolSize);1534319046;Set the maximum allowed number of threads. When the {@link #queueCapacity(int)_queue} is full, the pool can expand up to that size to accommodate the load._<p>_If the {@link #queueCapacity(int) queue capacity} is unbounded, this setting is_ignored._@param maxPoolSize the max pool size to set_@return a new builder instance;public TaskExecutorBuilder maxPoolSize(int maxPoolSize) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.threadNamePrefix,_				this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,maximum,allowed,number,of,threads,when,the,link,queue,capacity,int,queue,is,full,the,pool,can,expand,up,to,that,size,to,accommodate,the,load,p,if,the,link,queue,capacity,int,queue,capacity,is,unbounded,this,setting,is,ignored,param,max,pool,size,the,max,pool,size,to,set,return,a,new,builder,instance;public,task,executor,builder,max,pool,size,int,max,pool,size,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder maxPoolSize(int maxPoolSize);1534945262;Set the maximum allowed number of threads. When the {@link #queueCapacity(int)_queue} is full, the pool can expand up to that size to accommodate the load._<p>_If the {@link #queueCapacity(int) queue capacity} is unbounded, this setting is_ignored._@param maxPoolSize the max pool size to set_@return a new builder instance;public TaskExecutorBuilder maxPoolSize(int maxPoolSize) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.threadNamePrefix,_				this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,maximum,allowed,number,of,threads,when,the,link,queue,capacity,int,queue,is,full,the,pool,can,expand,up,to,that,size,to,accommodate,the,load,p,if,the,link,queue,capacity,int,queue,capacity,is,unbounded,this,setting,is,ignored,param,max,pool,size,the,max,pool,size,to,set,return,a,new,builder,instance;public,task,executor,builder,max,pool,size,int,max,pool,size,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder maxPoolSize(int maxPoolSize);1536177260;Set the maximum allowed number of threads. When the {@link #queueCapacity(int)_queue} is full, the pool can expand up to that size to accommodate the load._<p>_If the {@link #queueCapacity(int) queue capacity} is unbounded, this setting is_ignored._@param maxPoolSize the max pool size to set_@return a new builder instance;public TaskExecutorBuilder maxPoolSize(int maxPoolSize) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.threadNamePrefix,_				this.taskDecorator, this.customizers)__	};set,the,maximum,allowed,number,of,threads,when,the,link,queue,capacity,int,queue,is,full,the,pool,can,expand,up,to,that,size,to,accommodate,the,load,p,if,the,link,queue,capacity,int,queue,capacity,is,unbounded,this,setting,is,ignored,param,max,pool,size,the,max,pool,size,to,set,return,a,new,builder,instance;public,task,executor,builder,max,pool,size,int,max,pool,size,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder maxPoolSize(int maxPoolSize);1550520845;Set the maximum allowed number of threads. When the {@link #queueCapacity(int)_queue} is full, the pool can expand up to that size to accommodate the load._<p>_If the {@link #queueCapacity(int) queue capacity} is unbounded, this setting is_ignored._@param maxPoolSize the max pool size to set_@return a new builder instance;public TaskExecutorBuilder maxPoolSize(int maxPoolSize) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize, maxPoolSize,_				this.allowCoreThreadTimeOut, this.keepAlive, this.awaitTermination,_				this.awaitTerminationPeriod, this.threadNamePrefix, this.taskDecorator,_				this.customizers)__	};set,the,maximum,allowed,number,of,threads,when,the,link,queue,capacity,int,queue,is,full,the,pool,can,expand,up,to,that,size,to,accommodate,the,load,p,if,the,link,queue,capacity,int,queue,capacity,is,unbounded,this,setting,is,ignored,param,max,pool,size,the,max,pool,size,to,set,return,a,new,builder,instance;public,task,executor,builder,max,pool,size,int,max,pool,size,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,await,termination,this,await,termination,period,this,thread,name,prefix,this,task,decorator,this,customizers
TaskExecutorBuilder -> public ThreadPoolTaskExecutor build();1533546040;Build a new {@link ThreadPoolTaskExecutor} instance and configure it using this_builder._@return a configured {@link ThreadPoolTaskExecutor} instance._@see #build(Class)_@see #configure(ThreadPoolTaskExecutor);public ThreadPoolTaskExecutor build() {_		return build(ThreadPoolTaskExecutor.class)__	};build,a,new,link,thread,pool,task,executor,instance,and,configure,it,using,this,builder,return,a,configured,link,thread,pool,task,executor,instance,see,build,class,see,configure,thread,pool,task,executor;public,thread,pool,task,executor,build,return,build,thread,pool,task,executor,class
TaskExecutorBuilder -> public ThreadPoolTaskExecutor build();1534319046;Build a new {@link ThreadPoolTaskExecutor} instance and configure it using this_builder._@return a configured {@link ThreadPoolTaskExecutor} instance._@see #build(Class)_@see #configure(ThreadPoolTaskExecutor);public ThreadPoolTaskExecutor build() {_		return build(ThreadPoolTaskExecutor.class)__	};build,a,new,link,thread,pool,task,executor,instance,and,configure,it,using,this,builder,return,a,configured,link,thread,pool,task,executor,instance,see,build,class,see,configure,thread,pool,task,executor;public,thread,pool,task,executor,build,return,build,thread,pool,task,executor,class
TaskExecutorBuilder -> public ThreadPoolTaskExecutor build();1534945262;Build a new {@link ThreadPoolTaskExecutor} instance and configure it using this_builder._@return a configured {@link ThreadPoolTaskExecutor} instance._@see #build(Class)_@see #configure(ThreadPoolTaskExecutor);public ThreadPoolTaskExecutor build() {_		return build(ThreadPoolTaskExecutor.class)__	};build,a,new,link,thread,pool,task,executor,instance,and,configure,it,using,this,builder,return,a,configured,link,thread,pool,task,executor,instance,see,build,class,see,configure,thread,pool,task,executor;public,thread,pool,task,executor,build,return,build,thread,pool,task,executor,class
TaskExecutorBuilder -> public ThreadPoolTaskExecutor build();1536177260;Build a new {@link ThreadPoolTaskExecutor} instance and configure it using this_builder._@return a configured {@link ThreadPoolTaskExecutor} instance._@see #build(Class)_@see #configure(ThreadPoolTaskExecutor);public ThreadPoolTaskExecutor build() {_		return build(ThreadPoolTaskExecutor.class)__	};build,a,new,link,thread,pool,task,executor,instance,and,configure,it,using,this,builder,return,a,configured,link,thread,pool,task,executor,instance,see,build,class,see,configure,thread,pool,task,executor;public,thread,pool,task,executor,build,return,build,thread,pool,task,executor,class
TaskExecutorBuilder -> public ThreadPoolTaskExecutor build();1550520845;Build a new {@link ThreadPoolTaskExecutor} instance and configure it using this_builder._@return a configured {@link ThreadPoolTaskExecutor} instance._@see #build(Class)_@see #configure(ThreadPoolTaskExecutor);public ThreadPoolTaskExecutor build() {_		return build(ThreadPoolTaskExecutor.class)__	};build,a,new,link,thread,pool,task,executor,instance,and,configure,it,using,this,builder,return,a,configured,link,thread,pool,task,executor,instance,see,build,class,see,configure,thread,pool,task,executor;public,thread,pool,task,executor,build,return,build,thread,pool,task,executor,class
TaskExecutorBuilder -> public TaskExecutorBuilder additionalCustomizers( 			TaskExecutorCustomizer... customizers);1536177260;Add {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be applied_to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order that_they were added after builder configuration has been applied._@param customizers the customizers to add_@return a new builder instance_@see #customizers(TaskExecutorCustomizer...);public TaskExecutorBuilder additionalCustomizers(_			TaskExecutorCustomizer... customizers) {_		Assert.notNull(customizers, "Customizers must not be null")__		return additionalCustomizers(Arrays.asList(customizers))__	};add,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,param,customizers,the,customizers,to,add,return,a,new,builder,instance,see,customizers,task,executor,customizer;public,task,executor,builder,additional,customizers,task,executor,customizer,customizers,assert,not,null,customizers,customizers,must,not,be,null,return,additional,customizers,arrays,as,list,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder additionalCustomizers( 			TaskExecutorCustomizer... customizers);1550520845;Add {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be applied_to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order that_they were added after builder configuration has been applied._@param customizers the customizers to add_@return a new builder instance_@see #customizers(TaskExecutorCustomizer...);public TaskExecutorBuilder additionalCustomizers(_			TaskExecutorCustomizer... customizers) {_		Assert.notNull(customizers, "Customizers must not be null")__		return additionalCustomizers(Arrays.asList(customizers))__	};add,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,param,customizers,the,customizers,to,add,return,a,new,builder,instance,see,customizers,task,executor,customizer;public,task,executor,builder,additional,customizers,task,executor,customizer,customizers,assert,not,null,customizers,customizers,must,not,be,null,return,additional,customizers,arrays,as,list,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder allowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1533546040;Set whether core threads are allow to time out. When enabled, this enables dynamic_growing and shrinking of the pool._@param allowCoreThreadTimeOut if core thread are allowed to time out_@return a new builder instance;public TaskExecutorBuilder allowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, this.taskDecorator, this.taskExecutorCustomizers)__	};set,whether,core,threads,are,allow,to,time,out,when,enabled,this,enables,dynamic,growing,and,shrinking,of,the,pool,param,allow,core,thread,time,out,if,core,thread,are,allowed,to,time,out,return,a,new,builder,instance;public,task,executor,builder,allow,core,thread,time,out,boolean,allow,core,thread,time,out,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder allowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1534319046;Set whether core threads are allow to time out. When enabled, this enables dynamic_growing and shrinking of the pool._@param allowCoreThreadTimeOut if core threads are allowed to time out_@return a new builder instance;public TaskExecutorBuilder allowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, this.taskDecorator, this.taskExecutorCustomizers)__	};set,whether,core,threads,are,allow,to,time,out,when,enabled,this,enables,dynamic,growing,and,shrinking,of,the,pool,param,allow,core,thread,time,out,if,core,threads,are,allowed,to,time,out,return,a,new,builder,instance;public,task,executor,builder,allow,core,thread,time,out,boolean,allow,core,thread,time,out,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder allowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1534945262;Set whether core threads are allow to time out. When enabled, this enables dynamic_growing and shrinking of the pool._@param allowCoreThreadTimeOut if core threads are allowed to time out_@return a new builder instance;public TaskExecutorBuilder allowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, this.taskDecorator, this.taskExecutorCustomizers)__	};set,whether,core,threads,are,allow,to,time,out,when,enabled,this,enables,dynamic,growing,and,shrinking,of,the,pool,param,allow,core,thread,time,out,if,core,threads,are,allowed,to,time,out,return,a,new,builder,instance;public,task,executor,builder,allow,core,thread,time,out,boolean,allow,core,thread,time,out,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder allowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1536177260;Set whether core threads are allow to time out. When enabled, this enables dynamic_growing and shrinking of the pool._@param allowCoreThreadTimeOut if core threads are allowed to time out_@return a new builder instance;public TaskExecutorBuilder allowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, this.taskDecorator, this.customizers)__	};set,whether,core,threads,are,allow,to,time,out,when,enabled,this,enables,dynamic,growing,and,shrinking,of,the,pool,param,allow,core,thread,time,out,if,core,threads,are,allowed,to,time,out,return,a,new,builder,instance;public,task,executor,builder,allow,core,thread,time,out,boolean,allow,core,thread,time,out,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,this,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder allowCoreThreadTimeOut(boolean allowCoreThreadTimeOut);1550520845;Set whether core threads are allow to time out. When enabled, this enables dynamic_growing and shrinking of the pool._@param allowCoreThreadTimeOut if core threads are allowed to time out_@return a new builder instance;public TaskExecutorBuilder allowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, allowCoreThreadTimeOut, this.keepAlive,_				this.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,_				this.taskDecorator, this.customizers)__	};set,whether,core,threads,are,allow,to,time,out,when,enabled,this,enables,dynamic,growing,and,shrinking,of,the,pool,param,allow,core,thread,time,out,if,core,threads,are,allowed,to,time,out,return,a,new,builder,instance;public,task,executor,builder,allow,core,thread,time,out,boolean,allow,core,thread,time,out,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,allow,core,thread,time,out,this,keep,alive,this,await,termination,this,await,termination,period,this,thread,name,prefix,this,task,decorator,this,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder additionalCustomizers( 			Collection<? extends TaskExecutorCustomizer> taskExecutorCustomizers);1533546040;Add {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be applied_to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order that_they were added after builder configuration has been applied._@param taskExecutorCustomizers the customizers to add_@return a new builder instance_@see #customizers(TaskExecutorCustomizer...);public TaskExecutorBuilder additionalCustomizers(_			Collection<? extends TaskExecutorCustomizer> taskExecutorCustomizers) {_		Assert.notNull(taskExecutorCustomizers,_				"TaskExecutorCustomizers must not be null")__		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, this.taskDecorator,_				append(this.taskExecutorCustomizers, taskExecutorCustomizers))__	};add,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,param,task,executor,customizers,the,customizers,to,add,return,a,new,builder,instance,see,customizers,task,executor,customizer;public,task,executor,builder,additional,customizers,collection,extends,task,executor,customizer,task,executor,customizers,assert,not,null,task,executor,customizers,task,executor,customizers,must,not,be,null,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,append,this,task,executor,customizers,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder additionalCustomizers( 			Collection<? extends TaskExecutorCustomizer> taskExecutorCustomizers);1534319046;Add {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be applied_to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order that_they were added after builder configuration has been applied._@param taskExecutorCustomizers the customizers to add_@return a new builder instance_@see #customizers(TaskExecutorCustomizer...);public TaskExecutorBuilder additionalCustomizers(_			Collection<? extends TaskExecutorCustomizer> taskExecutorCustomizers) {_		Assert.notNull(taskExecutorCustomizers,_				"TaskExecutorCustomizers must not be null")__		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, this.taskDecorator,_				append(this.taskExecutorCustomizers, taskExecutorCustomizers))__	};add,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,param,task,executor,customizers,the,customizers,to,add,return,a,new,builder,instance,see,customizers,task,executor,customizer;public,task,executor,builder,additional,customizers,collection,extends,task,executor,customizer,task,executor,customizers,assert,not,null,task,executor,customizers,task,executor,customizers,must,not,be,null,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,append,this,task,executor,customizers,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder additionalCustomizers( 			Collection<? extends TaskExecutorCustomizer> taskExecutorCustomizers);1534945262;Add {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be applied_to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order that_they were added after builder configuration has been applied._@param taskExecutorCustomizers the customizers to add_@return a new builder instance_@see #customizers(TaskExecutorCustomizer...);public TaskExecutorBuilder additionalCustomizers(_			Collection<? extends TaskExecutorCustomizer> taskExecutorCustomizers) {_		Assert.notNull(taskExecutorCustomizers,_				"TaskExecutorCustomizers must not be null")__		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, this.taskDecorator,_				append(this.taskExecutorCustomizers, taskExecutorCustomizers))__	};add,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,param,task,executor,customizers,the,customizers,to,add,return,a,new,builder,instance,see,customizers,task,executor,customizer;public,task,executor,builder,additional,customizers,collection,extends,task,executor,customizer,task,executor,customizers,assert,not,null,task,executor,customizers,task,executor,customizers,must,not,be,null,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,append,this,task,executor,customizers,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder additionalCustomizers( 			TaskExecutorCustomizer... taskExecutorCustomizers);1533546040;Add {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be applied_to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order that_they were added after builder configuration has been applied._@param taskExecutorCustomizers the customizers to add_@return a new builder instance_@see #customizers(TaskExecutorCustomizer...);public TaskExecutorBuilder additionalCustomizers(_			TaskExecutorCustomizer... taskExecutorCustomizers) {_		Assert.notNull(taskExecutorCustomizers,_				"TaskExecutorCustomizers must not be null")__		return additionalCustomizers(Arrays.asList(taskExecutorCustomizers))__	};add,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,param,task,executor,customizers,the,customizers,to,add,return,a,new,builder,instance,see,customizers,task,executor,customizer;public,task,executor,builder,additional,customizers,task,executor,customizer,task,executor,customizers,assert,not,null,task,executor,customizers,task,executor,customizers,must,not,be,null,return,additional,customizers,arrays,as,list,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder additionalCustomizers( 			TaskExecutorCustomizer... taskExecutorCustomizers);1534319046;Add {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be applied_to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order that_they were added after builder configuration has been applied._@param taskExecutorCustomizers the customizers to add_@return a new builder instance_@see #customizers(TaskExecutorCustomizer...);public TaskExecutorBuilder additionalCustomizers(_			TaskExecutorCustomizer... taskExecutorCustomizers) {_		Assert.notNull(taskExecutorCustomizers,_				"TaskExecutorCustomizers must not be null")__		return additionalCustomizers(Arrays.asList(taskExecutorCustomizers))__	};add,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,param,task,executor,customizers,the,customizers,to,add,return,a,new,builder,instance,see,customizers,task,executor,customizer;public,task,executor,builder,additional,customizers,task,executor,customizer,task,executor,customizers,assert,not,null,task,executor,customizers,task,executor,customizers,must,not,be,null,return,additional,customizers,arrays,as,list,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder additionalCustomizers( 			TaskExecutorCustomizer... taskExecutorCustomizers);1534945262;Add {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be applied_to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order that_they were added after builder configuration has been applied._@param taskExecutorCustomizers the customizers to add_@return a new builder instance_@see #customizers(TaskExecutorCustomizer...);public TaskExecutorBuilder additionalCustomizers(_			TaskExecutorCustomizer... taskExecutorCustomizers) {_		Assert.notNull(taskExecutorCustomizers,_				"TaskExecutorCustomizers must not be null")__		return additionalCustomizers(Arrays.asList(taskExecutorCustomizers))__	};add,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,param,task,executor,customizers,the,customizers,to,add,return,a,new,builder,instance,see,customizers,task,executor,customizer;public,task,executor,builder,additional,customizers,task,executor,customizer,task,executor,customizers,assert,not,null,task,executor,customizers,task,executor,customizers,must,not,be,null,return,additional,customizers,arrays,as,list,task,executor,customizers
TaskExecutorBuilder -> public <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor);1533546040;Configure the provided {@link ThreadPoolTaskExecutor} instance using this builder._@param <T> the type of task executor_@param taskExecutor the {@link ThreadPoolTaskExecutor} to configure_@return the task executor instance_@see TaskExecutorBuilder#build()_@see TaskExecutorBuilder#build(Class);public <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {_		PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull()__		map.from(() -> this.queueCapacity).to(taskExecutor::setQueueCapacity)__		map.from(() -> this.corePoolSize).to(taskExecutor::setCorePoolSize)__		map.from(() -> this.maxPoolSize).to(taskExecutor::setMaxPoolSize)__		map.from(() -> this.keepAlive).asInt(Duration::getSeconds)_				.to(taskExecutor::setKeepAliveSeconds)__		map.from(() -> this.allowCoreThreadTimeOut)_				.to(taskExecutor::setAllowCoreThreadTimeOut)__		map.from(() -> this.threadNamePrefix).whenHasText()_				.to(taskExecutor::setThreadNamePrefix)__		map.from(() -> this.taskDecorator).to(taskExecutor::setTaskDecorator)___		if (!CollectionUtils.isEmpty(this.taskExecutorCustomizers)) {_			for (TaskExecutorCustomizer customizer : this.taskExecutorCustomizers) {_				customizer.customize(taskExecutor)__			}_		}_		return taskExecutor__	};configure,the,provided,link,thread,pool,task,executor,instance,using,this,builder,param,t,the,type,of,task,executor,param,task,executor,the,link,thread,pool,task,executor,to,configure,return,the,task,executor,instance,see,task,executor,builder,build,see,task,executor,builder,build,class;public,t,extends,thread,pool,task,executor,t,configure,t,task,executor,property,mapper,map,property,mapper,get,always,applying,when,non,null,map,from,this,queue,capacity,to,task,executor,set,queue,capacity,map,from,this,core,pool,size,to,task,executor,set,core,pool,size,map,from,this,max,pool,size,to,task,executor,set,max,pool,size,map,from,this,keep,alive,as,int,duration,get,seconds,to,task,executor,set,keep,alive,seconds,map,from,this,allow,core,thread,time,out,to,task,executor,set,allow,core,thread,time,out,map,from,this,thread,name,prefix,when,has,text,to,task,executor,set,thread,name,prefix,map,from,this,task,decorator,to,task,executor,set,task,decorator,if,collection,utils,is,empty,this,task,executor,customizers,for,task,executor,customizer,customizer,this,task,executor,customizers,customizer,customize,task,executor,return,task,executor
TaskExecutorBuilder -> public <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor);1534319046;Configure the provided {@link ThreadPoolTaskExecutor} instance using this builder._@param <T> the type of task executor_@param taskExecutor the {@link ThreadPoolTaskExecutor} to configure_@return the task executor instance_@see #build()_@see #build(Class);public <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {_		PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull()__		map.from(() -> this.queueCapacity).to(taskExecutor::setQueueCapacity)__		map.from(() -> this.corePoolSize).to(taskExecutor::setCorePoolSize)__		map.from(() -> this.maxPoolSize).to(taskExecutor::setMaxPoolSize)__		map.from(() -> this.keepAlive).asInt(Duration::getSeconds)_				.to(taskExecutor::setKeepAliveSeconds)__		map.from(() -> this.allowCoreThreadTimeOut)_				.to(taskExecutor::setAllowCoreThreadTimeOut)__		map.from(() -> this.threadNamePrefix).whenHasText()_				.to(taskExecutor::setThreadNamePrefix)__		map.from(() -> this.taskDecorator).to(taskExecutor::setTaskDecorator)___		if (!CollectionUtils.isEmpty(this.taskExecutorCustomizers)) {_			for (TaskExecutorCustomizer customizer : this.taskExecutorCustomizers) {_				customizer.customize(taskExecutor)__			}_		}_		return taskExecutor__	};configure,the,provided,link,thread,pool,task,executor,instance,using,this,builder,param,t,the,type,of,task,executor,param,task,executor,the,link,thread,pool,task,executor,to,configure,return,the,task,executor,instance,see,build,see,build,class;public,t,extends,thread,pool,task,executor,t,configure,t,task,executor,property,mapper,map,property,mapper,get,always,applying,when,non,null,map,from,this,queue,capacity,to,task,executor,set,queue,capacity,map,from,this,core,pool,size,to,task,executor,set,core,pool,size,map,from,this,max,pool,size,to,task,executor,set,max,pool,size,map,from,this,keep,alive,as,int,duration,get,seconds,to,task,executor,set,keep,alive,seconds,map,from,this,allow,core,thread,time,out,to,task,executor,set,allow,core,thread,time,out,map,from,this,thread,name,prefix,when,has,text,to,task,executor,set,thread,name,prefix,map,from,this,task,decorator,to,task,executor,set,task,decorator,if,collection,utils,is,empty,this,task,executor,customizers,for,task,executor,customizer,customizer,this,task,executor,customizers,customizer,customize,task,executor,return,task,executor
TaskExecutorBuilder -> public <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor);1534945262;Configure the provided {@link ThreadPoolTaskExecutor} instance using this builder._@param <T> the type of task executor_@param taskExecutor the {@link ThreadPoolTaskExecutor} to configure_@return the task executor instance_@see #build()_@see #build(Class);public <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {_		PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull()__		map.from(this.queueCapacity).to(taskExecutor::setQueueCapacity)__		map.from(this.corePoolSize).to(taskExecutor::setCorePoolSize)__		map.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize)__		map.from(this.keepAlive).asInt(Duration::getSeconds)_				.to(taskExecutor::setKeepAliveSeconds)__		map.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut)__		map.from(this.threadNamePrefix).whenHasText()_				.to(taskExecutor::setThreadNamePrefix)__		map.from(this.taskDecorator).to(taskExecutor::setTaskDecorator)___		if (!CollectionUtils.isEmpty(this.taskExecutorCustomizers)) {_			for (TaskExecutorCustomizer customizer : this.taskExecutorCustomizers) {_				customizer.customize(taskExecutor)__			}_		}_		return taskExecutor__	};configure,the,provided,link,thread,pool,task,executor,instance,using,this,builder,param,t,the,type,of,task,executor,param,task,executor,the,link,thread,pool,task,executor,to,configure,return,the,task,executor,instance,see,build,see,build,class;public,t,extends,thread,pool,task,executor,t,configure,t,task,executor,property,mapper,map,property,mapper,get,always,applying,when,non,null,map,from,this,queue,capacity,to,task,executor,set,queue,capacity,map,from,this,core,pool,size,to,task,executor,set,core,pool,size,map,from,this,max,pool,size,to,task,executor,set,max,pool,size,map,from,this,keep,alive,as,int,duration,get,seconds,to,task,executor,set,keep,alive,seconds,map,from,this,allow,core,thread,time,out,to,task,executor,set,allow,core,thread,time,out,map,from,this,thread,name,prefix,when,has,text,to,task,executor,set,thread,name,prefix,map,from,this,task,decorator,to,task,executor,set,task,decorator,if,collection,utils,is,empty,this,task,executor,customizers,for,task,executor,customizer,customizer,this,task,executor,customizers,customizer,customize,task,executor,return,task,executor
TaskExecutorBuilder -> public <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor);1536177260;Configure the provided {@link ThreadPoolTaskExecutor} instance using this builder._@param <T> the type of task executor_@param taskExecutor the {@link ThreadPoolTaskExecutor} to configure_@return the task executor instance_@see #build()_@see #build(Class);public <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {_		PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull()__		map.from(this.queueCapacity).to(taskExecutor::setQueueCapacity)__		map.from(this.corePoolSize).to(taskExecutor::setCorePoolSize)__		map.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize)__		map.from(this.keepAlive).asInt(Duration::getSeconds)_				.to(taskExecutor::setKeepAliveSeconds)__		map.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut)__		map.from(this.threadNamePrefix).whenHasText()_				.to(taskExecutor::setThreadNamePrefix)__		map.from(this.taskDecorator).to(taskExecutor::setTaskDecorator)__		if (!CollectionUtils.isEmpty(this.customizers)) {_			this.customizers.forEach((customizer) -> customizer.customize(taskExecutor))__		}_		return taskExecutor__	};configure,the,provided,link,thread,pool,task,executor,instance,using,this,builder,param,t,the,type,of,task,executor,param,task,executor,the,link,thread,pool,task,executor,to,configure,return,the,task,executor,instance,see,build,see,build,class;public,t,extends,thread,pool,task,executor,t,configure,t,task,executor,property,mapper,map,property,mapper,get,always,applying,when,non,null,map,from,this,queue,capacity,to,task,executor,set,queue,capacity,map,from,this,core,pool,size,to,task,executor,set,core,pool,size,map,from,this,max,pool,size,to,task,executor,set,max,pool,size,map,from,this,keep,alive,as,int,duration,get,seconds,to,task,executor,set,keep,alive,seconds,map,from,this,allow,core,thread,time,out,to,task,executor,set,allow,core,thread,time,out,map,from,this,thread,name,prefix,when,has,text,to,task,executor,set,thread,name,prefix,map,from,this,task,decorator,to,task,executor,set,task,decorator,if,collection,utils,is,empty,this,customizers,this,customizers,for,each,customizer,customizer,customize,task,executor,return,task,executor
TaskExecutorBuilder -> public <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor);1550520845;Configure the provided {@link ThreadPoolTaskExecutor} instance using this builder._@param <T> the type of task executor_@param taskExecutor the {@link ThreadPoolTaskExecutor} to configure_@return the task executor instance_@see #build()_@see #build(Class);public <T extends ThreadPoolTaskExecutor> T configure(T taskExecutor) {_		PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull()__		map.from(this.queueCapacity).to(taskExecutor::setQueueCapacity)__		map.from(this.corePoolSize).to(taskExecutor::setCorePoolSize)__		map.from(this.maxPoolSize).to(taskExecutor::setMaxPoolSize)__		map.from(this.keepAlive).asInt(Duration::getSeconds)_				.to(taskExecutor::setKeepAliveSeconds)__		map.from(this.allowCoreThreadTimeOut).to(taskExecutor::setAllowCoreThreadTimeOut)__		map.from(this.awaitTermination)_				.to(taskExecutor::setWaitForTasksToCompleteOnShutdown)__		map.from(this.awaitTerminationPeriod).asInt(Duration::getSeconds)_				.to(taskExecutor::setAwaitTerminationSeconds)__		map.from(this.threadNamePrefix).whenHasText()_				.to(taskExecutor::setThreadNamePrefix)__		map.from(this.taskDecorator).to(taskExecutor::setTaskDecorator)__		if (!CollectionUtils.isEmpty(this.customizers)) {_			this.customizers.forEach((customizer) -> customizer.customize(taskExecutor))__		}_		return taskExecutor__	};configure,the,provided,link,thread,pool,task,executor,instance,using,this,builder,param,t,the,type,of,task,executor,param,task,executor,the,link,thread,pool,task,executor,to,configure,return,the,task,executor,instance,see,build,see,build,class;public,t,extends,thread,pool,task,executor,t,configure,t,task,executor,property,mapper,map,property,mapper,get,always,applying,when,non,null,map,from,this,queue,capacity,to,task,executor,set,queue,capacity,map,from,this,core,pool,size,to,task,executor,set,core,pool,size,map,from,this,max,pool,size,to,task,executor,set,max,pool,size,map,from,this,keep,alive,as,int,duration,get,seconds,to,task,executor,set,keep,alive,seconds,map,from,this,allow,core,thread,time,out,to,task,executor,set,allow,core,thread,time,out,map,from,this,await,termination,to,task,executor,set,wait,for,tasks,to,complete,on,shutdown,map,from,this,await,termination,period,as,int,duration,get,seconds,to,task,executor,set,await,termination,seconds,map,from,this,thread,name,prefix,when,has,text,to,task,executor,set,thread,name,prefix,map,from,this,task,decorator,to,task,executor,set,task,decorator,if,collection,utils,is,empty,this,customizers,this,customizers,for,each,customizer,customizer,customize,task,executor,return,task,executor
TaskExecutorBuilder -> public TaskExecutorBuilder threadNamePrefix(String threadNamePrefix);1533546040;Set the prefix to use for the names of newly created threads._@param threadNamePrefix the thread name prefix to set_@return a new builder instance;public TaskExecutorBuilder threadNamePrefix(String threadNamePrefix) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				threadNamePrefix, this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,prefix,to,use,for,the,names,of,newly,created,threads,param,thread,name,prefix,the,thread,name,prefix,to,set,return,a,new,builder,instance;public,task,executor,builder,thread,name,prefix,string,thread,name,prefix,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder threadNamePrefix(String threadNamePrefix);1534319046;Set the prefix to use for the names of newly created threads._@param threadNamePrefix the thread name prefix to set_@return a new builder instance;public TaskExecutorBuilder threadNamePrefix(String threadNamePrefix) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				threadNamePrefix, this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,prefix,to,use,for,the,names,of,newly,created,threads,param,thread,name,prefix,the,thread,name,prefix,to,set,return,a,new,builder,instance;public,task,executor,builder,thread,name,prefix,string,thread,name,prefix,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder threadNamePrefix(String threadNamePrefix);1534945262;Set the prefix to use for the names of newly created threads._@param threadNamePrefix the thread name prefix to set_@return a new builder instance;public TaskExecutorBuilder threadNamePrefix(String threadNamePrefix) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				threadNamePrefix, this.taskDecorator, this.taskExecutorCustomizers)__	};set,the,prefix,to,use,for,the,names,of,newly,created,threads,param,thread,name,prefix,the,thread,name,prefix,to,set,return,a,new,builder,instance;public,task,executor,builder,thread,name,prefix,string,thread,name,prefix,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,thread,name,prefix,this,task,decorator,this,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder threadNamePrefix(String threadNamePrefix);1536177260;Set the prefix to use for the names of newly created threads._@param threadNamePrefix the thread name prefix to set_@return a new builder instance;public TaskExecutorBuilder threadNamePrefix(String threadNamePrefix) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				threadNamePrefix, this.taskDecorator, this.customizers)__	};set,the,prefix,to,use,for,the,names,of,newly,created,threads,param,thread,name,prefix,the,thread,name,prefix,to,set,return,a,new,builder,instance;public,task,executor,builder,thread,name,prefix,string,thread,name,prefix,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,thread,name,prefix,this,task,decorator,this,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder threadNamePrefix(String threadNamePrefix);1550520845;Set the prefix to use for the names of newly created threads._@param threadNamePrefix the thread name prefix to set_@return a new builder instance;public TaskExecutorBuilder threadNamePrefix(String threadNamePrefix) {_		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.awaitTermination, this.awaitTerminationPeriod, threadNamePrefix,_				this.taskDecorator, this.customizers)__	};set,the,prefix,to,use,for,the,names,of,newly,created,threads,param,thread,name,prefix,the,thread,name,prefix,to,set,return,a,new,builder,instance;public,task,executor,builder,thread,name,prefix,string,thread,name,prefix,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,await,termination,this,await,termination,period,thread,name,prefix,this,task,decorator,this,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder customizers( 			TaskExecutorCustomizer... taskExecutorCustomizers);1533546040;Set the {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be_applied to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order_that they were added after builder configuration has been applied. Setting this_value will replace any previously configured customizers._@param taskExecutorCustomizers the customizers to set_@return a new builder instance_@see #additionalCustomizers(TaskExecutorCustomizer...);public TaskExecutorBuilder customizers(_			TaskExecutorCustomizer... taskExecutorCustomizers) {_		Assert.notNull(taskExecutorCustomizers,_				"TaskExecutorCustomizers must not be null")__		return customizers(Arrays.asList(taskExecutorCustomizers))__	};set,the,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,setting,this,value,will,replace,any,previously,configured,customizers,param,task,executor,customizers,the,customizers,to,set,return,a,new,builder,instance,see,additional,customizers,task,executor,customizer;public,task,executor,builder,customizers,task,executor,customizer,task,executor,customizers,assert,not,null,task,executor,customizers,task,executor,customizers,must,not,be,null,return,customizers,arrays,as,list,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder customizers( 			TaskExecutorCustomizer... taskExecutorCustomizers);1534319046;Set the {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be_applied to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order_that they were added after builder configuration has been applied. Setting this_value will replace any previously configured customizers._@param taskExecutorCustomizers the customizers to set_@return a new builder instance_@see #additionalCustomizers(TaskExecutorCustomizer...);public TaskExecutorBuilder customizers(_			TaskExecutorCustomizer... taskExecutorCustomizers) {_		Assert.notNull(taskExecutorCustomizers,_				"TaskExecutorCustomizers must not be null")__		return customizers(Arrays.asList(taskExecutorCustomizers))__	};set,the,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,setting,this,value,will,replace,any,previously,configured,customizers,param,task,executor,customizers,the,customizers,to,set,return,a,new,builder,instance,see,additional,customizers,task,executor,customizer;public,task,executor,builder,customizers,task,executor,customizer,task,executor,customizers,assert,not,null,task,executor,customizers,task,executor,customizers,must,not,be,null,return,customizers,arrays,as,list,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder customizers( 			TaskExecutorCustomizer... taskExecutorCustomizers);1534945262;Set the {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be_applied to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order_that they were added after builder configuration has been applied. Setting this_value will replace any previously configured customizers._@param taskExecutorCustomizers the customizers to set_@return a new builder instance_@see #additionalCustomizers(TaskExecutorCustomizer...);public TaskExecutorBuilder customizers(_			TaskExecutorCustomizer... taskExecutorCustomizers) {_		Assert.notNull(taskExecutorCustomizers,_				"TaskExecutorCustomizers must not be null")__		return customizers(Arrays.asList(taskExecutorCustomizers))__	};set,the,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,setting,this,value,will,replace,any,previously,configured,customizers,param,task,executor,customizers,the,customizers,to,set,return,a,new,builder,instance,see,additional,customizers,task,executor,customizer;public,task,executor,builder,customizers,task,executor,customizer,task,executor,customizers,assert,not,null,task,executor,customizers,task,executor,customizers,must,not,be,null,return,customizers,arrays,as,list,task,executor,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder customizers(Iterable<TaskExecutorCustomizer> customizers);1536177260;Set the {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be_applied to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order_that they were added after builder configuration has been applied. Setting this_value will replace any previously configured customizers._@param customizers the customizers to set_@return a new builder instance_@see #additionalCustomizers(TaskExecutorCustomizer...);public TaskExecutorBuilder customizers(Iterable<TaskExecutorCustomizer> customizers) {_		Assert.notNull(customizers, "Customizers must not be null")__		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.threadNamePrefix, this.taskDecorator, append(null, customizers))__	};set,the,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,setting,this,value,will,replace,any,previously,configured,customizers,param,customizers,the,customizers,to,set,return,a,new,builder,instance,see,additional,customizers,task,executor,customizer;public,task,executor,builder,customizers,iterable,task,executor,customizer,customizers,assert,not,null,customizers,customizers,must,not,be,null,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,thread,name,prefix,this,task,decorator,append,null,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder customizers(Iterable<TaskExecutorCustomizer> customizers);1550520845;Set the {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be_applied to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order_that they were added after builder configuration has been applied. Setting this_value will replace any previously configured customizers._@param customizers the customizers to set_@return a new builder instance_@see #additionalCustomizers(TaskExecutorCustomizer...);public TaskExecutorBuilder customizers(Iterable<TaskExecutorCustomizer> customizers) {_		Assert.notNull(customizers, "Customizers must not be null")__		return new TaskExecutorBuilder(this.queueCapacity, this.corePoolSize,_				this.maxPoolSize, this.allowCoreThreadTimeOut, this.keepAlive,_				this.awaitTermination, this.awaitTerminationPeriod, this.threadNamePrefix,_				this.taskDecorator, append(null, customizers))__	};set,the,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,setting,this,value,will,replace,any,previously,configured,customizers,param,customizers,the,customizers,to,set,return,a,new,builder,instance,see,additional,customizers,task,executor,customizer;public,task,executor,builder,customizers,iterable,task,executor,customizer,customizers,assert,not,null,customizers,customizers,must,not,be,null,return,new,task,executor,builder,this,queue,capacity,this,core,pool,size,this,max,pool,size,this,allow,core,thread,time,out,this,keep,alive,this,await,termination,this,await,termination,period,this,thread,name,prefix,this,task,decorator,append,null,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder customizers(TaskExecutorCustomizer... customizers);1536177260;Set the {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be_applied to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order_that they were added after builder configuration has been applied. Setting this_value will replace any previously configured customizers._@param customizers the customizers to set_@return a new builder instance_@see #additionalCustomizers(TaskExecutorCustomizer...);public TaskExecutorBuilder customizers(TaskExecutorCustomizer... customizers) {_		Assert.notNull(customizers, "Customizers must not be null")__		return customizers(Arrays.asList(customizers))__	};set,the,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,setting,this,value,will,replace,any,previously,configured,customizers,param,customizers,the,customizers,to,set,return,a,new,builder,instance,see,additional,customizers,task,executor,customizer;public,task,executor,builder,customizers,task,executor,customizer,customizers,assert,not,null,customizers,customizers,must,not,be,null,return,customizers,arrays,as,list,customizers
TaskExecutorBuilder -> public TaskExecutorBuilder customizers(TaskExecutorCustomizer... customizers);1550520845;Set the {@link TaskExecutorCustomizer TaskExecutorCustomizers} that should be_applied to the {@link ThreadPoolTaskExecutor}. Customizers are applied in the order_that they were added after builder configuration has been applied. Setting this_value will replace any previously configured customizers._@param customizers the customizers to set_@return a new builder instance_@see #additionalCustomizers(TaskExecutorCustomizer...);public TaskExecutorBuilder customizers(TaskExecutorCustomizer... customizers) {_		Assert.notNull(customizers, "Customizers must not be null")__		return customizers(Arrays.asList(customizers))__	};set,the,link,task,executor,customizer,task,executor,customizers,that,should,be,applied,to,the,link,thread,pool,task,executor,customizers,are,applied,in,the,order,that,they,were,added,after,builder,configuration,has,been,applied,setting,this,value,will,replace,any,previously,configured,customizers,param,customizers,the,customizers,to,set,return,a,new,builder,instance,see,additional,customizers,task,executor,customizer;public,task,executor,builder,customizers,task,executor,customizer,customizers,assert,not,null,customizers,customizers,must,not,be,null,return,customizers,arrays,as,list,customizers
