commented;modifiers;parameterAmount;loc;comment;code
false;private;0;9;;private Class<?> getStartClass() {     try {         ClassLoader classLoader = getClass().getClassLoader().         return getStartClass(classLoader.getResources("META-INF/MANIFEST.MF")).     } catch (Exception ex) {         return null.     } }
false;private;1;14;;private Class<?> getStartClass(Enumeration<URL> manifestResources) {     while (manifestResources.hasMoreElements()) {         try (InputStream inputStream = manifestResources.nextElement().openStream()) {             Manifest manifest = new Manifest(inputStream).             String startClass = manifest.getMainAttributes().getValue("Start-Class").             if (startClass != null) {                 return ClassUtils.forName(startClass, getClass().getClassLoader()).             }         } catch (Exception ex) {         }     }     return null. }
false;private;1;16;;private File findSource(Class<?> sourceClass) {     try {         ProtectionDomain domain = (sourceClass != null) ? sourceClass.getProtectionDomain() : null.         CodeSource codeSource = (domain != null) ? domain.getCodeSource() : null.         URL location = (codeSource != null) ? codeSource.getLocation() : null.         File source = (location != null) ? findSource(location) : null.         if (source != null && source.exists() && !isUnitTest()) {             return source.getAbsoluteFile().         }         return null.     } catch (Exception ex) {         return null.     } }
false;private;0;13;;private boolean isUnitTest() {     try {         StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace().         for (int i = stackTrace.length - 1. i >= 0. i--) {             if (stackTrace[i].getClassName().startsWith("org.junit.")) {                 return true.             }         }     } catch (Exception ex) {     }     return false. }
false;private;1;7;;private File findSource(URL location) throws IOException {     URLConnection connection = location.openConnection().     if (connection instanceof JarURLConnection) {         return getRootJarFile(((JarURLConnection) connection).getJarFile()).     }     return new File(location.getPath()). }
false;private;1;8;;private File getRootJarFile(JarFile jarFile) {     String name = jarFile.getName().     int separator = name.indexOf("!/").     if (separator > 0) {         name = name.substring(0, separator).     }     return new File(name). }
false;private;1;9;;private File findHomeDir(File source) {     File homeDir = source.     homeDir = (homeDir != null) ? homeDir : findDefaultHomeDir().     if (homeDir.isFile()) {         homeDir = homeDir.getParentFile().     }     homeDir = homeDir.exists() ? homeDir : new File(".").     return homeDir.getAbsoluteFile(). }
false;private;0;4;;private File findDefaultHomeDir() {     String userDir = System.getProperty("user.dir").     return new File(StringUtils.hasLength(userDir) ? userDir : "."). }
true;public;0;3;/**  * Returns the underlying source used to find the home directory. This is usually the  * jar file or a directory. Can return {@code null} if the source cannot be  * determined.  * @return the underlying source or {@code null}  */ ;/**  * Returns the underlying source used to find the home directory. This is usually the  * jar file or a directory. Can return {@code null} if the source cannot be  * determined.  * @return the underlying source or {@code null}  */ public File getSource() {     return this.source. }
true;public;0;3;/**  * Returns the application home directory.  * @return the home directory (never {@code null})  */ ;/**  * Returns the application home directory.  * @return the home directory (never {@code null})  */ public File getDir() {     return this.dir. }
false;public;0;4;;@Override public String toString() {     return getDir().toString(). }
