commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;10;;@Override public final void onStartup(ServletContext servletContext) throws ServletException {     String description = getDescription().     if (!isEnabled()) {         logger.info(StringUtils.capitalize(description) + " was not registered (disabled)").         return.     }     register(description, servletContext). }
true;protected,abstract;0;1;/**  * Return a description of the registration. For example "Servlet resourceServlet"  * @return a description of the registration  */ ;/**  * Return a description of the registration. For example "Servlet resourceServlet"  * @return a description of the registration  */ protected abstract String getDescription().
true;protected,abstract;2;1;/**  * Register this bean with the servlet context.  * @param description a description of the item being registered  * @param servletContext the servlet context  */ ;/**  * Register this bean with the servlet context.  * @param description a description of the item being registered  * @param servletContext the servlet context  */ protected abstract void register(String description, ServletContext servletContext).
true;public;1;3;/**  * Flag to indicate that the registration is enabled.  * @param enabled the enabled to set  */ ;/**  * Flag to indicate that the registration is enabled.  * @param enabled the enabled to set  */ public void setEnabled(boolean enabled) {     this.enabled = enabled. }
true;public;0;3;/**  * Return if the registration is enabled.  * @return if enabled (default {@code true})  */ ;/**  * Return if the registration is enabled.  * @return if enabled (default {@code true})  */ public boolean isEnabled() {     return this.enabled. }
true;public;1;3;/**  * Set the order of the registration bean.  * @param order the order  */ ;/**  * Set the order of the registration bean.  * @param order the order  */ public void setOrder(int order) {     this.order = order. }
true;public;0;4;/**  * Get the order of the registration bean.  * @return the order  */ ;/**  * Get the order of the registration bean.  * @return the order  */ @Override public int getOrder() {     return this.order. }
