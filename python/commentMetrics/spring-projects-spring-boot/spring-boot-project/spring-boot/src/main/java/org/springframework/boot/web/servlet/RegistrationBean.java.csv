# id;timestamp;commentText;codeText;commentWords;codeWords
RegistrationBean -> public void addInitParameter(String name, String value);1507173536;Add a single init-parameter, replacing any existing parameter with the same name._@param name the init-parameter name_@param value the init-parameter value;public void addInitParameter(String name, String value) {_		Assert.notNull(name, "Name must not be null")__		this.initParameters.put(name, value)__	};add,a,single,init,parameter,replacing,any,existing,parameter,with,the,same,name,param,name,the,init,parameter,name,param,value,the,init,parameter,value;public,void,add,init,parameter,string,name,string,value,assert,not,null,name,name,must,not,be,null,this,init,parameters,put,name,value
RegistrationBean -> public void addInitParameter(String name, String value);1508247426;Add a single init-parameter, replacing any existing parameter with the same name._@param name the init-parameter name_@param value the init-parameter value;public void addInitParameter(String name, String value) {_		Assert.notNull(name, "Name must not be null")__		this.initParameters.put(name, value)__	};add,a,single,init,parameter,replacing,any,existing,parameter,with,the,same,name,param,name,the,init,parameter,name,param,value,the,init,parameter,value;public,void,add,init,parameter,string,name,string,value,assert,not,null,name,name,must,not,be,null,this,init,parameters,put,name,value
RegistrationBean -> public void setName(String name);1507173536;Set the name of this registration. If not specified the bean name will be used._@param name the name of the registration;public void setName(String name) {_		Assert.hasLength(name, "Name must not be empty")__		this.name = name__	};set,the,name,of,this,registration,if,not,specified,the,bean,name,will,be,used,param,name,the,name,of,the,registration;public,void,set,name,string,name,assert,has,length,name,name,must,not,be,empty,this,name,name
RegistrationBean -> public void setName(String name);1508247426;Set the name of this registration. If not specified the bean name will be used._@param name the name of the registration;public void setName(String name) {_		Assert.hasLength(name, "Name must not be empty")__		this.name = name__	};set,the,name,of,this,registration,if,not,specified,the,bean,name,will,be,used,param,name,the,name,of,the,registration;public,void,set,name,string,name,assert,has,length,name,name,must,not,be,empty,this,name,name
RegistrationBean -> protected void configure(Registration.Dynamic registration);1507173536;Configure registration base settings._@param registration the registration;protected void configure(Registration.Dynamic registration) {_		Assert.state(registration != null,_				"Registration is null. Was something already registered for name=["_						+ this.name + "]?")__		registration.setAsyncSupported(this.asyncSupported)__		if (!this.initParameters.isEmpty()) {_			registration.setInitParameters(this.initParameters)__		}_	};configure,registration,base,settings,param,registration,the,registration;protected,void,configure,registration,dynamic,registration,assert,state,registration,null,registration,is,null,was,something,already,registered,for,name,this,name,registration,set,async,supported,this,async,supported,if,this,init,parameters,is,empty,registration,set,init,parameters,this,init,parameters
RegistrationBean -> protected void configure(Registration.Dynamic registration);1508247426;Configure registration base settings._@param registration the registration;protected void configure(Registration.Dynamic registration) {_		Assert.state(registration != null,_				() -> "Registration is null. Was something already registered for name=["_						+ this.name + "]?")__		registration.setAsyncSupported(this.asyncSupported)__		if (!this.initParameters.isEmpty()) {_			registration.setInitParameters(this.initParameters)__		}_	};configure,registration,base,settings,param,registration,the,registration;protected,void,configure,registration,dynamic,registration,assert,state,registration,null,registration,is,null,was,something,already,registered,for,name,this,name,registration,set,async,supported,this,async,supported,if,this,init,parameters,is,empty,registration,set,init,parameters,this,init,parameters
RegistrationBean -> public void setInitParameters(Map<String, String> initParameters);1507173536;Set init-parameters for this registration. Calling this method will replace any_existing init-parameters._@param initParameters the init parameters_@see #getInitParameters_@see #addInitParameter;public void setInitParameters(Map<String, String> initParameters) {_		Assert.notNull(initParameters, "InitParameters must not be null")__		this.initParameters = new LinkedHashMap<>(initParameters)__	};set,init,parameters,for,this,registration,calling,this,method,will,replace,any,existing,init,parameters,param,init,parameters,the,init,parameters,see,get,init,parameters,see,add,init,parameter;public,void,set,init,parameters,map,string,string,init,parameters,assert,not,null,init,parameters,init,parameters,must,not,be,null,this,init,parameters,new,linked,hash,map,init,parameters
RegistrationBean -> public void setInitParameters(Map<String, String> initParameters);1508247426;Set init-parameters for this registration. Calling this method will replace any_existing init-parameters._@param initParameters the init parameters_@see #getInitParameters_@see #addInitParameter;public void setInitParameters(Map<String, String> initParameters) {_		Assert.notNull(initParameters, "InitParameters must not be null")__		this.initParameters = new LinkedHashMap<>(initParameters)__	};set,init,parameters,for,this,registration,calling,this,method,will,replace,any,existing,init,parameters,param,init,parameters,the,init,parameters,see,get,init,parameters,see,add,init,parameter;public,void,set,init,parameters,map,string,string,init,parameters,assert,not,null,init,parameters,init,parameters,must,not,be,null,this,init,parameters,new,linked,hash,map,init,parameters
RegistrationBean -> @Override 	public int getOrder();1507173536;Get the order of the registration bean._@return the order;@Override_	public int getOrder() {_		return this.order__	};get,the,order,of,the,registration,bean,return,the,order;override,public,int,get,order,return,this,order
RegistrationBean -> @Override 	public int getOrder();1508247426;Get the order of the registration bean._@return the order;@Override_	public int getOrder() {_		return this.order__	};get,the,order,of,the,registration,bean,return,the,order;override,public,int,get,order,return,this,order
RegistrationBean -> @Override 	public int getOrder();1515477900;Get the order of the registration bean._@return the order;@Override_	public int getOrder() {_		return this.order__	};get,the,order,of,the,registration,bean,return,the,order;override,public,int,get,order,return,this,order
RegistrationBean -> public Map<String, String> getInitParameters();1507173536;Returns a mutable Map of the registration init-parameters._@return the init parameters;public Map<String, String> getInitParameters() {_		return this.initParameters__	};returns,a,mutable,map,of,the,registration,init,parameters,return,the,init,parameters;public,map,string,string,get,init,parameters,return,this,init,parameters
RegistrationBean -> public Map<String, String> getInitParameters();1508247426;Returns a mutable Map of the registration init-parameters._@return the init parameters;public Map<String, String> getInitParameters() {_		return this.initParameters__	};returns,a,mutable,map,of,the,registration,init,parameters,return,the,init,parameters;public,map,string,string,get,init,parameters,return,this,init,parameters
RegistrationBean -> protected final String getOrDeduceName(Object value);1507173536;Deduces the name for this registration. Will return user specified name or fallback_to convention based naming._@param value the object used for convention based names_@return the deduced name;protected final String getOrDeduceName(Object value) {_		return (this.name != null ? this.name : Conventions.getVariableName(value))__	};deduces,the,name,for,this,registration,will,return,user,specified,name,or,fallback,to,convention,based,naming,param,value,the,object,used,for,convention,based,names,return,the,deduced,name;protected,final,string,get,or,deduce,name,object,value,return,this,name,null,this,name,conventions,get,variable,name,value
RegistrationBean -> protected final String getOrDeduceName(Object value);1508247426;Deduces the name for this registration. Will return user specified name or fallback_to convention based naming._@param value the object used for convention based names_@return the deduced name;protected final String getOrDeduceName(Object value) {_		return (this.name != null ? this.name : Conventions.getVariableName(value))__	};deduces,the,name,for,this,registration,will,return,user,specified,name,or,fallback,to,convention,based,naming,param,value,the,object,used,for,convention,based,names,return,the,deduced,name;protected,final,string,get,or,deduce,name,object,value,return,this,name,null,this,name,conventions,get,variable,name,value
RegistrationBean -> public void setEnabled(boolean enabled);1507173536;Flag to indicate that the registration is enabled._@param enabled the enabled to set;public void setEnabled(boolean enabled) {_		this.enabled = enabled__	};flag,to,indicate,that,the,registration,is,enabled,param,enabled,the,enabled,to,set;public,void,set,enabled,boolean,enabled,this,enabled,enabled
RegistrationBean -> public void setEnabled(boolean enabled);1508247426;Flag to indicate that the registration is enabled._@param enabled the enabled to set;public void setEnabled(boolean enabled) {_		this.enabled = enabled__	};flag,to,indicate,that,the,registration,is,enabled,param,enabled,the,enabled,to,set;public,void,set,enabled,boolean,enabled,this,enabled,enabled
RegistrationBean -> public void setEnabled(boolean enabled);1515477900;Flag to indicate that the registration is enabled._@param enabled the enabled to set;public void setEnabled(boolean enabled) {_		this.enabled = enabled__	};flag,to,indicate,that,the,registration,is,enabled,param,enabled,the,enabled,to,set;public,void,set,enabled,boolean,enabled,this,enabled,enabled
RegistrationBean -> public void setOrder(int order);1507173536;Set the order of the registration bean._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,of,the,registration,bean,param,order,the,order;public,void,set,order,int,order,this,order,order
RegistrationBean -> public void setOrder(int order);1508247426;Set the order of the registration bean._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,of,the,registration,bean,param,order,the,order;public,void,set,order,int,order,this,order,order
RegistrationBean -> public void setOrder(int order);1515477900;Set the order of the registration bean._@param order the order;public void setOrder(int order) {_		this.order = order__	};set,the,order,of,the,registration,bean,param,order,the,order;public,void,set,order,int,order,this,order,order
RegistrationBean -> public boolean isAsyncSupported();1507173536;Returns if asynchronous operations are support for this registration._@return if async is supported;public boolean isAsyncSupported() {_		return this.asyncSupported__	};returns,if,asynchronous,operations,are,support,for,this,registration,return,if,async,is,supported;public,boolean,is,async,supported,return,this,async,supported
RegistrationBean -> public boolean isAsyncSupported();1508247426;Returns if asynchronous operations are support for this registration._@return if async is supported;public boolean isAsyncSupported() {_		return this.asyncSupported__	};returns,if,asynchronous,operations,are,support,for,this,registration,return,if,async,is,supported;public,boolean,is,async,supported,return,this,async,supported
RegistrationBean -> public void setAsyncSupported(boolean asyncSupported);1507173536;Sets if asynchronous operations are support for this registration. If not specified_defaults to {@code true}._@param asyncSupported if async is supported;public void setAsyncSupported(boolean asyncSupported) {_		this.asyncSupported = asyncSupported__	};sets,if,asynchronous,operations,are,support,for,this,registration,if,not,specified,defaults,to,code,true,param,async,supported,if,async,is,supported;public,void,set,async,supported,boolean,async,supported,this,async,supported,async,supported
RegistrationBean -> public void setAsyncSupported(boolean asyncSupported);1508247426;Sets if asynchronous operations are support for this registration. If not specified_defaults to {@code true}._@param asyncSupported if async is supported;public void setAsyncSupported(boolean asyncSupported) {_		this.asyncSupported = asyncSupported__	};sets,if,asynchronous,operations,are,support,for,this,registration,if,not,specified,defaults,to,code,true,param,async,supported,if,async,is,supported;public,void,set,async,supported,boolean,async,supported,this,async,supported,async,supported
RegistrationBean -> public boolean isEnabled();1507173536;Return if the registration is enabled._@return if enabled (default {@code true});public boolean isEnabled() {_		return this.enabled__	};return,if,the,registration,is,enabled,return,if,enabled,default,code,true;public,boolean,is,enabled,return,this,enabled
RegistrationBean -> public boolean isEnabled();1508247426;Return if the registration is enabled._@return if enabled (default {@code true});public boolean isEnabled() {_		return this.enabled__	};return,if,the,registration,is,enabled,return,if,enabled,default,code,true;public,boolean,is,enabled,return,this,enabled
RegistrationBean -> public boolean isEnabled();1515477900;Return if the registration is enabled._@return if enabled (default {@code true});public boolean isEnabled() {_		return this.enabled__	};return,if,the,registration,is,enabled,return,if,enabled,default,code,true;public,boolean,is,enabled,return,this,enabled
