commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@Override public void customize(Connector connector) {     ProtocolHandler handler = connector.getProtocolHandler().     Assert.state(handler instanceof AbstractHttp11JsseProtocol, "To use SSL, the connector's protocol handler must be an " + "AbstractHttp11JsseProtocol subclass").     configureSsl((AbstractHttp11JsseProtocol<?>) handler, this.ssl, this.sslStoreProvider).     connector.setScheme("https").     connector.setSecure(true). }
true;protected;3;26;/**  * Configure Tomcat's {@link AbstractHttp11JsseProtocol} for SSL.  * @param protocol the protocol  * @param ssl the ssl details  * @param sslStoreProvider the ssl store provider  */ ;/**  * Configure Tomcat's {@link AbstractHttp11JsseProtocol} for SSL.  * @param protocol the protocol  * @param ssl the ssl details  * @param sslStoreProvider the ssl store provider  */ protected void configureSsl(AbstractHttp11JsseProtocol<?> protocol, Ssl ssl, SslStoreProvider sslStoreProvider) {     protocol.setSSLEnabled(true).     protocol.setSslProtocol(ssl.getProtocol()).     configureSslClientAuth(protocol, ssl).     protocol.setKeystorePass(ssl.getKeyStorePassword()).     protocol.setKeyPass(ssl.getKeyPassword()).     protocol.setKeyAlias(ssl.getKeyAlias()).     String ciphers = StringUtils.arrayToCommaDelimitedString(ssl.getCiphers()).     if (StringUtils.hasText(ciphers)) {         protocol.setCiphers(ciphers).     }     if (ssl.getEnabledProtocols() != null) {         for (SSLHostConfig sslHostConfig : protocol.findSslHostConfigs()) {             sslHostConfig.setProtocols(StringUtils.arrayToCommaDelimitedString(ssl.getEnabledProtocols())).         }     }     if (sslStoreProvider != null) {         configureSslStoreProvider(protocol, sslStoreProvider).     } else {         configureSslKeyStore(protocol, ssl).         configureSslTrustStore(protocol, ssl).     } }
false;private;2;8;;private void configureSslClientAuth(AbstractHttp11JsseProtocol<?> protocol, Ssl ssl) {     if (ssl.getClientAuth() == Ssl.ClientAuth.NEED) {         protocol.setClientAuth(Boolean.TRUE.toString()).     } else if (ssl.getClientAuth() == Ssl.ClientAuth.WANT) {         protocol.setClientAuth("want").     } }
false;protected;2;24;;protected void configureSslStoreProvider(AbstractHttp11JsseProtocol<?> protocol, SslStoreProvider sslStoreProvider) {     Assert.isInstanceOf(Http11NioProtocol.class, protocol, "SslStoreProvider can only be used with Http11NioProtocol").     TomcatURLStreamHandlerFactory instance = TomcatURLStreamHandlerFactory.getInstance().     instance.addUserFactory(new SslStoreProviderUrlStreamHandlerFactory(sslStoreProvider)).     try {         if (sslStoreProvider.getKeyStore() != null) {             protocol.setKeystorePass("").             protocol.setKeystoreFile(SslStoreProviderUrlStreamHandlerFactory.KEY_STORE_URL).         }         if (sslStoreProvider.getTrustStore() != null) {             protocol.setTruststorePass("").             protocol.setTruststoreFile(SslStoreProviderUrlStreamHandlerFactory.TRUST_STORE_URL).         }     } catch (Exception ex) {         throw new WebServerException("Could not load store: " + ex.getMessage(), ex).     } }
false;private;2;15;;private void configureSslKeyStore(AbstractHttp11JsseProtocol<?> protocol, Ssl ssl) {     try {         protocol.setKeystoreFile(ResourceUtils.getURL(ssl.getKeyStore()).toString()).     } catch (Exception ex) {         throw new WebServerException("Could not load key store '" + ssl.getKeyStore() + "'", ex).     }     if (ssl.getKeyStoreType() != null) {         protocol.setKeystoreType(ssl.getKeyStoreType()).     }     if (ssl.getKeyStoreProvider() != null) {         protocol.setKeystoreProvider(ssl.getKeyStoreProvider()).     } }
false;private;2;19;;private void configureSslTrustStore(AbstractHttp11JsseProtocol<?> protocol, Ssl ssl) {     if (ssl.getTrustStore() != null) {         try {             protocol.setTruststoreFile(ResourceUtils.getURL(ssl.getTrustStore()).toString()).         } catch (FileNotFoundException ex) {             throw new WebServerException("Could not load trust store: " + ex.getMessage(), ex).         }     }     protocol.setTruststorePass(ssl.getTrustStorePassword()).     if (ssl.getTrustStoreType() != null) {         protocol.setTruststoreType(ssl.getTrustStoreType()).     }     if (ssl.getTrustStoreProvider() != null) {         protocol.setTruststoreProvider(ssl.getTrustStoreProvider()).     } }
