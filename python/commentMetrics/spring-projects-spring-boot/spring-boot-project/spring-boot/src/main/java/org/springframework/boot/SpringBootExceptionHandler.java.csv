commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void registerLoggedException(Throwable exception) {     this.loggedExceptions.add(exception). }
false;public;1;3;;public void registerExitCode(int exitCode) {     this.exitCode = exitCode. }
false;public;2;14;;@Override public void uncaughtException(Thread thread, Throwable ex) {     try {         if (isPassedToParent(ex) && this.parent != null) {             this.parent.uncaughtException(thread, ex).         }     } finally {         this.loggedExceptions.clear().         if (this.exitCode != 0) {             System.exit(this.exitCode).         }     } }
false;private;1;3;;private boolean isPassedToParent(Throwable ex) {     return isLogConfigurationMessage(ex) || !isRegistered(ex). }
true;private;1;14;/**  * Check if the exception is a log configuration message, i.e. the log call might not  * have actually output anything.  * @param ex the source exception  * @return {@code true} if the exception contains a log configuration message  */ ;/**  * Check if the exception is a log configuration message, i.e. the log call might not  * have actually output anything.  * @param ex the source exception  * @return {@code true} if the exception contains a log configuration message  */ private boolean isLogConfigurationMessage(Throwable ex) {     if (ex instanceof InvocationTargetException) {         return isLogConfigurationMessage(ex.getCause()).     }     String message = ex.getMessage().     if (message != null) {         for (String candidate : LOG_CONFIGURATION_MESSAGES) {             if (message.contains(candidate)) {                 return true.             }         }     }     return false. }
false;private;1;9;;private boolean isRegistered(Throwable ex) {     if (this.loggedExceptions.contains(ex)) {         return true.     }     if (ex instanceof InvocationTargetException) {         return isRegistered(ex.getCause()).     }     return false. }
false;static;0;3;;static SpringBootExceptionHandler forCurrentThread() {     return handler.get(). }
false;protected;0;7;;@Override protected SpringBootExceptionHandler initialValue() {     SpringBootExceptionHandler handler = new SpringBootExceptionHandler(Thread.currentThread().getUncaughtExceptionHandler()).     Thread.currentThread().setUncaughtExceptionHandler(handler).     return handler. }
