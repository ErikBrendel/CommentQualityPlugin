commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the Mustache compiler to be used by this view.  * <p>  * Typically this property is not set directly. Instead a single {@link Compiler} is  * expected in the Spring application context which is used to compile Mustache  * templates.  * @param compiler the Mustache compiler  */ ;/**  * Set the Mustache compiler to be used by this view.  * <p>  * Typically this property is not set directly. Instead a single {@link Compiler} is  * expected in the Spring application context which is used to compile Mustache  * templates.  * @param compiler the Mustache compiler  */ public void setCompiler(Compiler compiler) {     this.compiler = compiler. }
true;public;1;3;/**  * Set the charset used for reading Mustache template files.  * @param charset the charset to use for reading template files  */ ;/**  * Set the charset used for reading Mustache template files.  * @param charset the charset to use for reading template files  */ public void setCharset(String charset) {     this.charset = charset. }
false;public;1;5;;@Override public boolean checkResource(Locale locale) throws Exception {     Resource resource = getApplicationContext().getResource(this.getUrl()).     return (resource != null && resource.exists()). }
false;protected;3;9;;@Override protected void renderMergedTemplateModel(Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {     Template template = createTemplate(getApplicationContext().getResource(this.getUrl())).     if (template != null) {         template.execute(model, response.getWriter()).     } }
false;private;1;5;;private Template createTemplate(Resource resource) throws IOException {     try (Reader reader = getReader(resource)) {         return this.compiler.compile(reader).     } }
false;private;1;6;;private Reader getReader(Resource resource) throws IOException {     if (this.charset != null) {         return new InputStreamReader(resource.getInputStream(), this.charset).     }     return new InputStreamReader(resource.getInputStream()). }
