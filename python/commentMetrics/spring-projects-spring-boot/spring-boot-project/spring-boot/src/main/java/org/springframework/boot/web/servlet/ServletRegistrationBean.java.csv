commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Sets the servlet to be registered.  * @param servlet the servlet  */ ;/**  * Sets the servlet to be registered.  * @param servlet the servlet  */ public void setServlet(T servlet) {     Assert.notNull(servlet, "Servlet must not be null").     this.servlet = servlet. }
true;public;0;3;/**  * Return the servlet being registered.  * @return the servlet  */ ;/**  * Return the servlet being registered.  * @return the servlet  */ public T getServlet() {     return this.servlet. }
true;public;1;4;/**  * Set the URL mappings for the servlet. If not specified the mapping will default to  * '/'. This will replace any previously specified mappings.  * @param urlMappings the mappings to set  * @see #addUrlMappings(String...)  */ ;/**  * Set the URL mappings for the servlet. If not specified the mapping will default to  * '/'. This will replace any previously specified mappings.  * @param urlMappings the mappings to set  * @see #addUrlMappings(String...)  */ public void setUrlMappings(Collection<String> urlMappings) {     Assert.notNull(urlMappings, "UrlMappings must not be null").     this.urlMappings = new LinkedHashSet<>(urlMappings). }
true;public;0;3;/**  * Return a mutable collection of the URL mappings, as defined in the Servlet  * specification, for the servlet.  * @return the urlMappings  */ ;/**  * Return a mutable collection of the URL mappings, as defined in the Servlet  * specification, for the servlet.  * @return the urlMappings  */ public Collection<String> getUrlMappings() {     return this.urlMappings. }
true;public;1;4;/**  * Add URL mappings, as defined in the Servlet specification, for the servlet.  * @param urlMappings the mappings to add  * @see #setUrlMappings(Collection)  */ ;/**  * Add URL mappings, as defined in the Servlet specification, for the servlet.  * @param urlMappings the mappings to add  * @see #setUrlMappings(Collection)  */ public void addUrlMappings(String... urlMappings) {     Assert.notNull(urlMappings, "UrlMappings must not be null").     this.urlMappings.addAll(Arrays.asList(urlMappings)). }
true;public;1;3;/**  * Sets the {@code loadOnStartup} priority. See  * {@link ServletRegistration.Dynamic#setLoadOnStartup} for details.  * @param loadOnStartup if load on startup is enabled  */ ;/**  * Sets the {@code loadOnStartup} priority. See  * {@link ServletRegistration.Dynamic#setLoadOnStartup} for details.  * @param loadOnStartup if load on startup is enabled  */ public void setLoadOnStartup(int loadOnStartup) {     this.loadOnStartup = loadOnStartup. }
true;public;1;3;/**  * Set the {@link MultipartConfigElement multi-part configuration}.  * @param multipartConfig the multi-part configuration to set or {@code null}  */ ;/**  * Set the {@link MultipartConfigElement multi-part configuration}.  * @param multipartConfig the multi-part configuration to set or {@code null}  */ public void setMultipartConfig(MultipartConfigElement multipartConfig) {     this.multipartConfig = multipartConfig. }
true;public;0;3;/**  * Returns the {@link MultipartConfigElement multi-part configuration} to be applied  * or {@code null}.  * @return the multipart config  */ ;/**  * Returns the {@link MultipartConfigElement multi-part configuration} to be applied  * or {@code null}.  * @return the multipart config  */ public MultipartConfigElement getMultipartConfig() {     return this.multipartConfig. }
false;protected;0;5;;@Override protected String getDescription() {     Assert.notNull(this.servlet, "Servlet must not be null").     return "servlet " + getServletName(). }
false;protected;2;6;;@Override protected ServletRegistration.Dynamic addRegistration(String description, ServletContext servletContext) {     String name = getServletName().     return servletContext.addServlet(name, this.servlet). }
true;protected;1;15;/**  * Configure registration settings. Subclasses can override this method to perform  * additional configuration if required.  * @param registration the registration  */ ;/**  * Configure registration settings. Subclasses can override this method to perform  * additional configuration if required.  * @param registration the registration  */ @Override protected void configure(ServletRegistration.Dynamic registration) {     super.configure(registration).     String[] urlMapping = StringUtils.toStringArray(this.urlMappings).     if (urlMapping.length == 0 && this.alwaysMapUrl) {         urlMapping = DEFAULT_MAPPINGS.     }     if (!ObjectUtils.isEmpty(urlMapping)) {         registration.addMapping(urlMapping).     }     registration.setLoadOnStartup(this.loadOnStartup).     if (this.multipartConfig != null) {         registration.setMultipartConfig(this.multipartConfig).     } }
true;public;0;3;/**  * Returns the servlet name that will be registered.  * @return the servlet name  */ ;/**  * Returns the servlet name that will be registered.  * @return the servlet name  */ public String getServletName() {     return getOrDeduceName(this.servlet). }
false;public;0;4;;@Override public String toString() {     return getServletName() + " urls=" + getUrlMappings(). }
