commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public int getOrder() {     return 0. }
false;public;0;5;;@Override public void starting() {     this.initialMulticaster.multicastEvent(new ApplicationStartingEvent(this.application, this.args)). }
false;public;1;5;;@Override public void environmentPrepared(ConfigurableEnvironment environment) {     this.initialMulticaster.multicastEvent(new ApplicationEnvironmentPreparedEvent(this.application, this.args, environment)). }
false;public;1;5;;@Override public void contextPrepared(ConfigurableApplicationContext context) {     this.initialMulticaster.multicastEvent(new ApplicationContextInitializedEvent(this.application, this.args, context)). }
false;public;1;11;;@Override public void contextLoaded(ConfigurableApplicationContext context) {     for (ApplicationListener<?> listener : this.application.getListeners()) {         if (listener instanceof ApplicationContextAware) {             ((ApplicationContextAware) listener).setApplicationContext(context).         }         context.addApplicationListener(listener).     }     this.initialMulticaster.multicastEvent(new ApplicationPreparedEvent(this.application, this.args, context)). }
false;public;1;5;;@Override public void started(ConfigurableApplicationContext context) {     context.publishEvent(new ApplicationStartedEvent(this.application, this.args, context)). }
false;public;1;5;;@Override public void running(ConfigurableApplicationContext context) {     context.publishEvent(new ApplicationReadyEvent(this.application, this.args, context)). }
false;public;2;22;;@Override public void failed(ConfigurableApplicationContext context, Throwable exception) {     ApplicationFailedEvent event = new ApplicationFailedEvent(this.application, this.args, context, exception).     if (context != null && context.isActive()) {         // Listeners have been registered to the application context so we should         // use it at this point if we can         context.publishEvent(event).     } else {         // call all of the context's listeners instead         if (context instanceof AbstractApplicationContext) {             for (ApplicationListener<?> listener : ((AbstractApplicationContext) context).getApplicationListeners()) {                 this.initialMulticaster.addApplicationListener(listener).             }         }         this.initialMulticaster.setErrorHandler(new LoggingErrorHandler()).         this.initialMulticaster.multicastEvent(event).     } }
false;public;1;4;;@Override public void handleError(Throwable throwable) {     logger.warn("Error calling ApplicationEventListener", throwable). }
