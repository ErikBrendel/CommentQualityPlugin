# id;timestamp;commentText;codeText;commentWords;codeWords
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager, 			URL persistenceUnitRootLocation);1507173536;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties JPA properties to be passed to the persistence provider._@param persistenceUnitManager optional source of persistence unit information (can_be null)_@param persistenceUnitRootLocation the persistence unit root location to use as a_fallback (can be null)_@since 1.4.1;public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager,_			URL persistenceUnitRootLocation) {_		this.jpaVendorAdapter = jpaVendorAdapter__		this.persistenceUnitManager = persistenceUnitManager__		this.jpaProperties = new LinkedHashMap<>(jpaProperties)__		this.persistenceUnitRootLocation = persistenceUnitRootLocation__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null,param,persistence,unit,root,location,the,persistence,unit,root,location,to,use,as,a,fallback,can,be,null,since,1,4,1;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,url,persistence,unit,root,location,this,jpa,vendor,adapter,jpa,vendor,adapter,this,persistence,unit,manager,persistence,unit,manager,this,jpa,properties,new,linked,hash,map,jpa,properties,this,persistence,unit,root,location,persistence,unit,root,location
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager, 			URL persistenceUnitRootLocation);1508427338;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties JPA properties to be passed to the persistence provider._@param persistenceUnitManager optional source of persistence unit information (can_be null)_@param persistenceUnitRootLocation the persistence unit root location to use as a_fallback (can be null)_@since 1.4.1;public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager,_			URL persistenceUnitRootLocation) {_		this.jpaVendorAdapter = jpaVendorAdapter__		this.persistenceUnitManager = persistenceUnitManager__		this.jpaProperties = new LinkedHashMap<>(jpaProperties)__		this.persistenceUnitRootLocation = persistenceUnitRootLocation__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null,param,persistence,unit,root,location,the,persistence,unit,root,location,to,use,as,a,fallback,can,be,null,since,1,4,1;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,url,persistence,unit,root,location,this,jpa,vendor,adapter,jpa,vendor,adapter,this,persistence,unit,manager,persistence,unit,manager,this,jpa,properties,new,linked,hash,map,jpa,properties,this,persistence,unit,root,location,persistence,unit,root,location
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager, 			URL persistenceUnitRootLocation);1508852463;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties JPA properties to be passed to the persistence provider._@param persistenceUnitManager optional source of persistence unit information (can_be null)_@param persistenceUnitRootLocation the persistence unit root location to use as a_fallback (can be null)_@since 1.4.1;public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager,_			URL persistenceUnitRootLocation) {_		this.jpaVendorAdapter = jpaVendorAdapter__		this.persistenceUnitManager = persistenceUnitManager__		this.jpaProperties = new LinkedHashMap<>(jpaProperties)__		this.persistenceUnitRootLocation = persistenceUnitRootLocation__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null,param,persistence,unit,root,location,the,persistence,unit,root,location,to,use,as,a,fallback,can,be,null,since,1,4,1;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,url,persistence,unit,root,location,this,jpa,vendor,adapter,jpa,vendor,adapter,this,persistence,unit,manager,persistence,unit,manager,this,jpa,properties,new,linked,hash,map,jpa,properties,this,persistence,unit,root,location,persistence,unit,root,location
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager, 			URL persistenceUnitRootLocation);1510908995;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties JPA properties to be passed to the persistence provider._@param persistenceUnitManager optional source of persistence unit information (can_be null)_@param persistenceUnitRootLocation the persistence unit root location to use as a_fallback (can be null)_@since 1.4.1;public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager,_			URL persistenceUnitRootLocation) {_		this.jpaVendorAdapter = jpaVendorAdapter__		this.persistenceUnitManager = persistenceUnitManager__		this.jpaProperties = new LinkedHashMap<>(jpaProperties)__		this.persistenceUnitRootLocation = persistenceUnitRootLocation__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null,param,persistence,unit,root,location,the,persistence,unit,root,location,to,use,as,a,fallback,can,be,null,since,1,4,1;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,url,persistence,unit,root,location,this,jpa,vendor,adapter,jpa,vendor,adapter,this,persistence,unit,manager,persistence,unit,manager,this,jpa,properties,new,linked,hash,map,jpa,properties,this,persistence,unit,root,location,persistence,unit,root,location
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager, 			URL persistenceUnitRootLocation);1518174068;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties JPA properties to be passed to the persistence provider._@param persistenceUnitManager optional source of persistence unit information (can_be null)_@param persistenceUnitRootLocation the persistence unit root location to use as a_fallback (can be null)_@since 1.4.1;public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager,_			URL persistenceUnitRootLocation) {_		this.jpaVendorAdapter = jpaVendorAdapter__		this.persistenceUnitManager = persistenceUnitManager__		this.jpaProperties = new LinkedHashMap<>(jpaProperties)__		this.persistenceUnitRootLocation = persistenceUnitRootLocation__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null,param,persistence,unit,root,location,the,persistence,unit,root,location,to,use,as,a,fallback,can,be,null,since,1,4,1;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,url,persistence,unit,root,location,this,jpa,vendor,adapter,jpa,vendor,adapter,this,persistence,unit,manager,persistence,unit,manager,this,jpa,properties,new,linked,hash,map,jpa,properties,this,persistence,unit,root,location,persistence,unit,root,location
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager, 			URL persistenceUnitRootLocation);1519362690;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties JPA properties to be passed to the persistence provider._@param persistenceUnitManager optional source of persistence unit information (can_be null)_@param persistenceUnitRootLocation the persistence unit root location to use as a_fallback (can be null)_@since 1.4.1;public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager,_			URL persistenceUnitRootLocation) {_		this.jpaVendorAdapter = jpaVendorAdapter__		this.persistenceUnitManager = persistenceUnitManager__		this.jpaProperties = new LinkedHashMap<>(jpaProperties)__		this.persistenceUnitRootLocation = persistenceUnitRootLocation__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null,param,persistence,unit,root,location,the,persistence,unit,root,location,to,use,as,a,fallback,can,be,null,since,1,4,1;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,url,persistence,unit,root,location,this,jpa,vendor,adapter,jpa,vendor,adapter,this,persistence,unit,manager,persistence,unit,manager,this,jpa,properties,new,linked,hash,map,jpa,properties,this,persistence,unit,root,location,persistence,unit,root,location
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager, 			URL persistenceUnitRootLocation);1532738143;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties the JPA properties to be passed to the persistence provider_@param persistenceUnitManager optional source of persistence unit information (can_be null)_@param persistenceUnitRootLocation the persistence unit root location to use as a_fallback (can be null)_@since 1.4.1;public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager,_			URL persistenceUnitRootLocation) {_		this.jpaVendorAdapter = jpaVendorAdapter__		this.persistenceUnitManager = persistenceUnitManager__		this.jpaProperties = new LinkedHashMap<>(jpaProperties)__		this.persistenceUnitRootLocation = persistenceUnitRootLocation__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,the,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null,param,persistence,unit,root,location,the,persistence,unit,root,location,to,use,as,a,fallback,can,be,null,since,1,4,1;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,url,persistence,unit,root,location,this,jpa,vendor,adapter,jpa,vendor,adapter,this,persistence,unit,manager,persistence,unit,manager,this,jpa,properties,new,linked,hash,map,jpa,properties,this,persistence,unit,root,location,persistence,unit,root,location
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager, 			URL persistenceUnitRootLocation);1534446084;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties the JPA properties to be passed to the persistence provider_@param persistenceUnitManager optional source of persistence unit information (can_be null)_@param persistenceUnitRootLocation the persistence unit root location to use as a_fallback (can be null)_@since 1.4.1;public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager,_			URL persistenceUnitRootLocation) {_		this.jpaVendorAdapter = jpaVendorAdapter__		this.persistenceUnitManager = persistenceUnitManager__		this.jpaProperties = new LinkedHashMap<>(jpaProperties)__		this.persistenceUnitRootLocation = persistenceUnitRootLocation__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,the,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null,param,persistence,unit,root,location,the,persistence,unit,root,location,to,use,as,a,fallback,can,be,null,since,1,4,1;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,url,persistence,unit,root,location,this,jpa,vendor,adapter,jpa,vendor,adapter,this,persistence,unit,manager,persistence,unit,manager,this,jpa,properties,new,linked,hash,map,jpa,properties,this,persistence,unit,root,location,persistence,unit,root,location
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager, 			URL persistenceUnitRootLocation);1534770204;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties the JPA properties to be passed to the persistence provider_@param persistenceUnitManager optional source of persistence unit information (can_be null)_@param persistenceUnitRootLocation the persistence unit root location to use as a_fallback (can be null)_@since 1.4.1;public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager,_			URL persistenceUnitRootLocation) {_		this.jpaVendorAdapter = jpaVendorAdapter__		this.persistenceUnitManager = persistenceUnitManager__		this.jpaProperties = new LinkedHashMap<>(jpaProperties)__		this.persistenceUnitRootLocation = persistenceUnitRootLocation__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,the,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null,param,persistence,unit,root,location,the,persistence,unit,root,location,to,use,as,a,fallback,can,be,null,since,1,4,1;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,url,persistence,unit,root,location,this,jpa,vendor,adapter,jpa,vendor,adapter,this,persistence,unit,manager,persistence,unit,manager,this,jpa,properties,new,linked,hash,map,jpa,properties,this,persistence,unit,root,location,persistence,unit,root,location
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager, 			URL persistenceUnitRootLocation);1534770248;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties the JPA properties to be passed to the persistence provider_@param persistenceUnitManager optional source of persistence unit information (can_be null)_@param persistenceUnitRootLocation the persistence unit root location to use as a_fallback (can be null)_@since 1.4.1;public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager,_			URL persistenceUnitRootLocation) {_		this.jpaVendorAdapter = jpaVendorAdapter__		this.persistenceUnitManager = persistenceUnitManager__		this.jpaProperties = new LinkedHashMap<>(jpaProperties)__		this.persistenceUnitRootLocation = persistenceUnitRootLocation__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,the,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null,param,persistence,unit,root,location,the,persistence,unit,root,location,to,use,as,a,fallback,can,be,null,since,1,4,1;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,url,persistence,unit,root,location,this,jpa,vendor,adapter,jpa,vendor,adapter,this,persistence,unit,manager,persistence,unit,manager,this,jpa,properties,new,linked,hash,map,jpa,properties,this,persistence,unit,root,location,persistence,unit,root,location
EntityManagerFactoryBuilder -> Builder -> public Builder properties(Map<String, ?> properties);1507173536;Generic properties for standard JPA or vendor-specific configuration. These_properties override any values provided in the constructor._@param properties the properties to use_@return the builder for fluent usage;public Builder properties(Map<String, ?> properties) {_			this.properties.putAll(properties)__			return this__		};generic,properties,for,standard,jpa,or,vendor,specific,configuration,these,properties,override,any,values,provided,in,the,constructor,param,properties,the,properties,to,use,return,the,builder,for,fluent,usage;public,builder,properties,map,string,properties,this,properties,put,all,properties,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder properties(Map<String, ?> properties);1508427338;Generic properties for standard JPA or vendor-specific configuration. These_properties override any values provided in the constructor._@param properties the properties to use_@return the builder for fluent usage;public Builder properties(Map<String, ?> properties) {_			this.properties.putAll(properties)__			return this__		};generic,properties,for,standard,jpa,or,vendor,specific,configuration,these,properties,override,any,values,provided,in,the,constructor,param,properties,the,properties,to,use,return,the,builder,for,fluent,usage;public,builder,properties,map,string,properties,this,properties,put,all,properties,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder properties(Map<String, ?> properties);1508852463;Generic properties for standard JPA or vendor-specific configuration. These_properties override any values provided in the constructor._@param properties the properties to use_@return the builder for fluent usage;public Builder properties(Map<String, ?> properties) {_			this.properties.putAll(properties)__			return this__		};generic,properties,for,standard,jpa,or,vendor,specific,configuration,these,properties,override,any,values,provided,in,the,constructor,param,properties,the,properties,to,use,return,the,builder,for,fluent,usage;public,builder,properties,map,string,properties,this,properties,put,all,properties,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder properties(Map<String, ?> properties);1510908995;Generic properties for standard JPA or vendor-specific configuration. These_properties override any values provided in the constructor._@param properties the properties to use_@return the builder for fluent usage;public Builder properties(Map<String, ?> properties) {_			this.properties.putAll(properties)__			return this__		};generic,properties,for,standard,jpa,or,vendor,specific,configuration,these,properties,override,any,values,provided,in,the,constructor,param,properties,the,properties,to,use,return,the,builder,for,fluent,usage;public,builder,properties,map,string,properties,this,properties,put,all,properties,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder properties(Map<String, ?> properties);1518174068;Generic properties for standard JPA or vendor-specific configuration. These_properties override any values provided in the constructor._@param properties the properties to use_@return the builder for fluent usage;public Builder properties(Map<String, ?> properties) {_			this.properties.putAll(properties)__			return this__		};generic,properties,for,standard,jpa,or,vendor,specific,configuration,these,properties,override,any,values,provided,in,the,constructor,param,properties,the,properties,to,use,return,the,builder,for,fluent,usage;public,builder,properties,map,string,properties,this,properties,put,all,properties,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder properties(Map<String, ?> properties);1519362690;Generic properties for standard JPA or vendor-specific configuration. These_properties override any values provided in the constructor._@param properties the properties to use_@return the builder for fluent usage;public Builder properties(Map<String, ?> properties) {_			this.properties.putAll(properties)__			return this__		};generic,properties,for,standard,jpa,or,vendor,specific,configuration,these,properties,override,any,values,provided,in,the,constructor,param,properties,the,properties,to,use,return,the,builder,for,fluent,usage;public,builder,properties,map,string,properties,this,properties,put,all,properties,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder properties(Map<String, ?> properties);1532738143;Generic properties for standard JPA or vendor-specific configuration. These_properties override any values provided in the constructor._@param properties the properties to use_@return the builder for fluent usage;public Builder properties(Map<String, ?> properties) {_			this.properties.putAll(properties)__			return this__		};generic,properties,for,standard,jpa,or,vendor,specific,configuration,these,properties,override,any,values,provided,in,the,constructor,param,properties,the,properties,to,use,return,the,builder,for,fluent,usage;public,builder,properties,map,string,properties,this,properties,put,all,properties,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder properties(Map<String, ?> properties);1534446084;Generic properties for standard JPA or vendor-specific configuration. These_properties override any values provided in the constructor._@param properties the properties to use_@return the builder for fluent usage;public Builder properties(Map<String, ?> properties) {_			this.properties.putAll(properties)__			return this__		};generic,properties,for,standard,jpa,or,vendor,specific,configuration,these,properties,override,any,values,provided,in,the,constructor,param,properties,the,properties,to,use,return,the,builder,for,fluent,usage;public,builder,properties,map,string,properties,this,properties,put,all,properties,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder properties(Map<String, ?> properties);1534770204;Generic properties for standard JPA or vendor-specific configuration. These_properties override any values provided in the constructor._@param properties the properties to use_@return the builder for fluent usage;public Builder properties(Map<String, ?> properties) {_			this.properties.putAll(properties)__			return this__		};generic,properties,for,standard,jpa,or,vendor,specific,configuration,these,properties,override,any,values,provided,in,the,constructor,param,properties,the,properties,to,use,return,the,builder,for,fluent,usage;public,builder,properties,map,string,properties,this,properties,put,all,properties,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder properties(Map<String, ?> properties);1534770248;Generic properties for standard JPA or vendor-specific configuration. These_properties override any values provided in the constructor._@param properties the properties to use_@return the builder for fluent usage;public Builder properties(Map<String, ?> properties) {_			this.properties.putAll(properties)__			return this__		};generic,properties,for,standard,jpa,or,vendor,specific,configuration,these,properties,override,any,values,provided,in,the,constructor,param,properties,the,properties,to,use,return,the,builder,for,fluent,usage;public,builder,properties,map,string,properties,this,properties,put,all,properties,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(Class<?>... basePackageClasses);1507173536;The classes whose packages should be scanned for {@code @Entity} annotations._@param basePackageClasses the classes to use_@return the builder for fluent usage;public Builder packages(Class<?>... basePackageClasses) {_			Set<String> packages = new HashSet<>()__			for (Class<?> type : basePackageClasses) {_				packages.add(ClassUtils.getPackageName(type))__			}_			this.packagesToScan = packages.toArray(new String[0])__			return this__		};the,classes,whose,packages,should,be,scanned,for,code,entity,annotations,param,base,package,classes,the,classes,to,use,return,the,builder,for,fluent,usage;public,builder,packages,class,base,package,classes,set,string,packages,new,hash,set,for,class,type,base,package,classes,packages,add,class,utils,get,package,name,type,this,packages,to,scan,packages,to,array,new,string,0,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(Class<?>... basePackageClasses);1508427338;The classes whose packages should be scanned for {@code @Entity} annotations._@param basePackageClasses the classes to use_@return the builder for fluent usage;public Builder packages(Class<?>... basePackageClasses) {_			Set<String> packages = new HashSet<>()__			for (Class<?> type : basePackageClasses) {_				packages.add(ClassUtils.getPackageName(type))__			}_			this.packagesToScan = packages.toArray(new String[0])__			return this__		};the,classes,whose,packages,should,be,scanned,for,code,entity,annotations,param,base,package,classes,the,classes,to,use,return,the,builder,for,fluent,usage;public,builder,packages,class,base,package,classes,set,string,packages,new,hash,set,for,class,type,base,package,classes,packages,add,class,utils,get,package,name,type,this,packages,to,scan,packages,to,array,new,string,0,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(Class<?>... basePackageClasses);1508852463;The classes whose packages should be scanned for {@code @Entity} annotations._@param basePackageClasses the classes to use_@return the builder for fluent usage;public Builder packages(Class<?>... basePackageClasses) {_			Set<String> packages = new HashSet<>()__			for (Class<?> type : basePackageClasses) {_				packages.add(ClassUtils.getPackageName(type))__			}_			this.packagesToScan = packages.toArray(new String[0])__			return this__		};the,classes,whose,packages,should,be,scanned,for,code,entity,annotations,param,base,package,classes,the,classes,to,use,return,the,builder,for,fluent,usage;public,builder,packages,class,base,package,classes,set,string,packages,new,hash,set,for,class,type,base,package,classes,packages,add,class,utils,get,package,name,type,this,packages,to,scan,packages,to,array,new,string,0,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(Class<?>... basePackageClasses);1510908995;The classes whose packages should be scanned for {@code @Entity} annotations._@param basePackageClasses the classes to use_@return the builder for fluent usage;public Builder packages(Class<?>... basePackageClasses) {_			Set<String> packages = new HashSet<>()__			for (Class<?> type : basePackageClasses) {_				packages.add(ClassUtils.getPackageName(type))__			}_			this.packagesToScan = packages.toArray(new String[0])__			return this__		};the,classes,whose,packages,should,be,scanned,for,code,entity,annotations,param,base,package,classes,the,classes,to,use,return,the,builder,for,fluent,usage;public,builder,packages,class,base,package,classes,set,string,packages,new,hash,set,for,class,type,base,package,classes,packages,add,class,utils,get,package,name,type,this,packages,to,scan,packages,to,array,new,string,0,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(Class<?>... basePackageClasses);1518174068;The classes whose packages should be scanned for {@code @Entity} annotations._@param basePackageClasses the classes to use_@return the builder for fluent usage;public Builder packages(Class<?>... basePackageClasses) {_			Set<String> packages = new HashSet<>()__			for (Class<?> type : basePackageClasses) {_				packages.add(ClassUtils.getPackageName(type))__			}_			this.packagesToScan = packages.toArray(new String[0])__			return this__		};the,classes,whose,packages,should,be,scanned,for,code,entity,annotations,param,base,package,classes,the,classes,to,use,return,the,builder,for,fluent,usage;public,builder,packages,class,base,package,classes,set,string,packages,new,hash,set,for,class,type,base,package,classes,packages,add,class,utils,get,package,name,type,this,packages,to,scan,packages,to,array,new,string,0,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(Class<?>... basePackageClasses);1519362690;The classes whose packages should be scanned for {@code @Entity} annotations._@param basePackageClasses the classes to use_@return the builder for fluent usage;public Builder packages(Class<?>... basePackageClasses) {_			Set<String> packages = new HashSet<>()__			for (Class<?> type : basePackageClasses) {_				packages.add(ClassUtils.getPackageName(type))__			}_			this.packagesToScan = StringUtils.toStringArray(packages)__			return this__		};the,classes,whose,packages,should,be,scanned,for,code,entity,annotations,param,base,package,classes,the,classes,to,use,return,the,builder,for,fluent,usage;public,builder,packages,class,base,package,classes,set,string,packages,new,hash,set,for,class,type,base,package,classes,packages,add,class,utils,get,package,name,type,this,packages,to,scan,string,utils,to,string,array,packages,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(Class<?>... basePackageClasses);1532738143;The classes whose packages should be scanned for {@code @Entity} annotations._@param basePackageClasses the classes to use_@return the builder for fluent usage;public Builder packages(Class<?>... basePackageClasses) {_			Set<String> packages = new HashSet<>()__			for (Class<?> type : basePackageClasses) {_				packages.add(ClassUtils.getPackageName(type))__			}_			this.packagesToScan = StringUtils.toStringArray(packages)__			return this__		};the,classes,whose,packages,should,be,scanned,for,code,entity,annotations,param,base,package,classes,the,classes,to,use,return,the,builder,for,fluent,usage;public,builder,packages,class,base,package,classes,set,string,packages,new,hash,set,for,class,type,base,package,classes,packages,add,class,utils,get,package,name,type,this,packages,to,scan,string,utils,to,string,array,packages,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(Class<?>... basePackageClasses);1534446084;The classes whose packages should be scanned for {@code @Entity} annotations._@param basePackageClasses the classes to use_@return the builder for fluent usage;public Builder packages(Class<?>... basePackageClasses) {_			Set<String> packages = new HashSet<>()__			for (Class<?> type : basePackageClasses) {_				packages.add(ClassUtils.getPackageName(type))__			}_			this.packagesToScan = StringUtils.toStringArray(packages)__			return this__		};the,classes,whose,packages,should,be,scanned,for,code,entity,annotations,param,base,package,classes,the,classes,to,use,return,the,builder,for,fluent,usage;public,builder,packages,class,base,package,classes,set,string,packages,new,hash,set,for,class,type,base,package,classes,packages,add,class,utils,get,package,name,type,this,packages,to,scan,string,utils,to,string,array,packages,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(Class<?>... basePackageClasses);1534770204;The classes whose packages should be scanned for {@code @Entity} annotations._@param basePackageClasses the classes to use_@return the builder for fluent usage;public Builder packages(Class<?>... basePackageClasses) {_			Set<String> packages = new HashSet<>()__			for (Class<?> type : basePackageClasses) {_				packages.add(ClassUtils.getPackageName(type))__			}_			this.packagesToScan = StringUtils.toStringArray(packages)__			return this__		};the,classes,whose,packages,should,be,scanned,for,code,entity,annotations,param,base,package,classes,the,classes,to,use,return,the,builder,for,fluent,usage;public,builder,packages,class,base,package,classes,set,string,packages,new,hash,set,for,class,type,base,package,classes,packages,add,class,utils,get,package,name,type,this,packages,to,scan,string,utils,to,string,array,packages,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(Class<?>... basePackageClasses);1534770248;The classes whose packages should be scanned for {@code @Entity} annotations._@param basePackageClasses the classes to use_@return the builder for fluent usage;public Builder packages(Class<?>... basePackageClasses) {_			Set<String> packages = new HashSet<>()__			for (Class<?> type : basePackageClasses) {_				packages.add(ClassUtils.getPackageName(type))__			}_			this.packagesToScan = StringUtils.toStringArray(packages)__			return this__		};the,classes,whose,packages,should,be,scanned,for,code,entity,annotations,param,base,package,classes,the,classes,to,use,return,the,builder,for,fluent,usage;public,builder,packages,class,base,package,classes,set,string,packages,new,hash,set,for,class,type,base,package,classes,packages,add,class,utils,get,package,name,type,this,packages,to,scan,string,utils,to,string,array,packages,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(String... packagesToScan);1507173536;The names of packages to scan for {@code @Entity} annotations._@param packagesToScan packages to scan_@return the builder for fluent usage;public Builder packages(String... packagesToScan) {_			this.packagesToScan = packagesToScan__			return this__		};the,names,of,packages,to,scan,for,code,entity,annotations,param,packages,to,scan,packages,to,scan,return,the,builder,for,fluent,usage;public,builder,packages,string,packages,to,scan,this,packages,to,scan,packages,to,scan,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(String... packagesToScan);1508427338;The names of packages to scan for {@code @Entity} annotations._@param packagesToScan packages to scan_@return the builder for fluent usage;public Builder packages(String... packagesToScan) {_			this.packagesToScan = packagesToScan__			return this__		};the,names,of,packages,to,scan,for,code,entity,annotations,param,packages,to,scan,packages,to,scan,return,the,builder,for,fluent,usage;public,builder,packages,string,packages,to,scan,this,packages,to,scan,packages,to,scan,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(String... packagesToScan);1508852463;The names of packages to scan for {@code @Entity} annotations._@param packagesToScan packages to scan_@return the builder for fluent usage;public Builder packages(String... packagesToScan) {_			this.packagesToScan = packagesToScan__			return this__		};the,names,of,packages,to,scan,for,code,entity,annotations,param,packages,to,scan,packages,to,scan,return,the,builder,for,fluent,usage;public,builder,packages,string,packages,to,scan,this,packages,to,scan,packages,to,scan,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(String... packagesToScan);1510908995;The names of packages to scan for {@code @Entity} annotations._@param packagesToScan packages to scan_@return the builder for fluent usage;public Builder packages(String... packagesToScan) {_			this.packagesToScan = packagesToScan__			return this__		};the,names,of,packages,to,scan,for,code,entity,annotations,param,packages,to,scan,packages,to,scan,return,the,builder,for,fluent,usage;public,builder,packages,string,packages,to,scan,this,packages,to,scan,packages,to,scan,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(String... packagesToScan);1518174068;The names of packages to scan for {@code @Entity} annotations._@param packagesToScan packages to scan_@return the builder for fluent usage;public Builder packages(String... packagesToScan) {_			this.packagesToScan = packagesToScan__			return this__		};the,names,of,packages,to,scan,for,code,entity,annotations,param,packages,to,scan,packages,to,scan,return,the,builder,for,fluent,usage;public,builder,packages,string,packages,to,scan,this,packages,to,scan,packages,to,scan,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(String... packagesToScan);1519362690;The names of packages to scan for {@code @Entity} annotations._@param packagesToScan packages to scan_@return the builder for fluent usage;public Builder packages(String... packagesToScan) {_			this.packagesToScan = packagesToScan__			return this__		};the,names,of,packages,to,scan,for,code,entity,annotations,param,packages,to,scan,packages,to,scan,return,the,builder,for,fluent,usage;public,builder,packages,string,packages,to,scan,this,packages,to,scan,packages,to,scan,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(String... packagesToScan);1532738143;The names of packages to scan for {@code @Entity} annotations._@param packagesToScan packages to scan_@return the builder for fluent usage;public Builder packages(String... packagesToScan) {_			this.packagesToScan = packagesToScan__			return this__		};the,names,of,packages,to,scan,for,code,entity,annotations,param,packages,to,scan,packages,to,scan,return,the,builder,for,fluent,usage;public,builder,packages,string,packages,to,scan,this,packages,to,scan,packages,to,scan,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(String... packagesToScan);1534446084;The names of packages to scan for {@code @Entity} annotations._@param packagesToScan packages to scan_@return the builder for fluent usage;public Builder packages(String... packagesToScan) {_			this.packagesToScan = packagesToScan__			return this__		};the,names,of,packages,to,scan,for,code,entity,annotations,param,packages,to,scan,packages,to,scan,return,the,builder,for,fluent,usage;public,builder,packages,string,packages,to,scan,this,packages,to,scan,packages,to,scan,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(String... packagesToScan);1534770204;The names of packages to scan for {@code @Entity} annotations._@param packagesToScan packages to scan_@return the builder for fluent usage;public Builder packages(String... packagesToScan) {_			this.packagesToScan = packagesToScan__			return this__		};the,names,of,packages,to,scan,for,code,entity,annotations,param,packages,to,scan,packages,to,scan,return,the,builder,for,fluent,usage;public,builder,packages,string,packages,to,scan,this,packages,to,scan,packages,to,scan,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder packages(String... packagesToScan);1534770248;The names of packages to scan for {@code @Entity} annotations._@param packagesToScan packages to scan_@return the builder for fluent usage;public Builder packages(String... packagesToScan) {_			this.packagesToScan = packagesToScan__			return this__		};the,names,of,packages,to,scan,for,code,entity,annotations,param,packages,to,scan,packages,to,scan,return,the,builder,for,fluent,usage;public,builder,packages,string,packages,to,scan,this,packages,to,scan,packages,to,scan,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder jta(boolean jta);1507173536;Configure if using a JTA {@link DataSource}, i.e. if_{@link LocalContainerEntityManagerFactoryBean#setDataSource(DataSource)_setDataSource} or_{@link LocalContainerEntityManagerFactoryBean#setJtaDataSource(DataSource)_setJtaDataSource} should be called on the_{@link LocalContainerEntityManagerFactoryBean}._@param jta if the data source is JTA_@return the builder for fluent usage;public Builder jta(boolean jta) {_			this.jta = jta__			return this__		};configure,if,using,a,jta,link,data,source,i,e,if,link,local,container,entity,manager,factory,bean,set,data,source,data,source,set,data,source,or,link,local,container,entity,manager,factory,bean,set,jta,data,source,data,source,set,jta,data,source,should,be,called,on,the,link,local,container,entity,manager,factory,bean,param,jta,if,the,data,source,is,jta,return,the,builder,for,fluent,usage;public,builder,jta,boolean,jta,this,jta,jta,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder jta(boolean jta);1508427338;Configure if using a JTA {@link DataSource}, i.e. if_{@link LocalContainerEntityManagerFactoryBean#setDataSource(DataSource)_setDataSource} or_{@link LocalContainerEntityManagerFactoryBean#setJtaDataSource(DataSource)_setJtaDataSource} should be called on the_{@link LocalContainerEntityManagerFactoryBean}._@param jta if the data source is JTA_@return the builder for fluent usage;public Builder jta(boolean jta) {_			this.jta = jta__			return this__		};configure,if,using,a,jta,link,data,source,i,e,if,link,local,container,entity,manager,factory,bean,set,data,source,data,source,set,data,source,or,link,local,container,entity,manager,factory,bean,set,jta,data,source,data,source,set,jta,data,source,should,be,called,on,the,link,local,container,entity,manager,factory,bean,param,jta,if,the,data,source,is,jta,return,the,builder,for,fluent,usage;public,builder,jta,boolean,jta,this,jta,jta,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder jta(boolean jta);1508852463;Configure if using a JTA {@link DataSource}, i.e. if_{@link LocalContainerEntityManagerFactoryBean#setDataSource(DataSource)_setDataSource} or_{@link LocalContainerEntityManagerFactoryBean#setJtaDataSource(DataSource)_setJtaDataSource} should be called on the_{@link LocalContainerEntityManagerFactoryBean}._@param jta if the data source is JTA_@return the builder for fluent usage;public Builder jta(boolean jta) {_			this.jta = jta__			return this__		};configure,if,using,a,jta,link,data,source,i,e,if,link,local,container,entity,manager,factory,bean,set,data,source,data,source,set,data,source,or,link,local,container,entity,manager,factory,bean,set,jta,data,source,data,source,set,jta,data,source,should,be,called,on,the,link,local,container,entity,manager,factory,bean,param,jta,if,the,data,source,is,jta,return,the,builder,for,fluent,usage;public,builder,jta,boolean,jta,this,jta,jta,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder jta(boolean jta);1510908995;Configure if using a JTA {@link DataSource}, i.e. if_{@link LocalContainerEntityManagerFactoryBean#setDataSource(DataSource)_setDataSource} or_{@link LocalContainerEntityManagerFactoryBean#setJtaDataSource(DataSource)_setJtaDataSource} should be called on the_{@link LocalContainerEntityManagerFactoryBean}._@param jta if the data source is JTA_@return the builder for fluent usage;public Builder jta(boolean jta) {_			this.jta = jta__			return this__		};configure,if,using,a,jta,link,data,source,i,e,if,link,local,container,entity,manager,factory,bean,set,data,source,data,source,set,data,source,or,link,local,container,entity,manager,factory,bean,set,jta,data,source,data,source,set,jta,data,source,should,be,called,on,the,link,local,container,entity,manager,factory,bean,param,jta,if,the,data,source,is,jta,return,the,builder,for,fluent,usage;public,builder,jta,boolean,jta,this,jta,jta,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder jta(boolean jta);1518174068;Configure if using a JTA {@link DataSource}, i.e. if_{@link LocalContainerEntityManagerFactoryBean#setDataSource(DataSource)_setDataSource} or_{@link LocalContainerEntityManagerFactoryBean#setJtaDataSource(DataSource)_setJtaDataSource} should be called on the_{@link LocalContainerEntityManagerFactoryBean}._@param jta if the data source is JTA_@return the builder for fluent usage;public Builder jta(boolean jta) {_			this.jta = jta__			return this__		};configure,if,using,a,jta,link,data,source,i,e,if,link,local,container,entity,manager,factory,bean,set,data,source,data,source,set,data,source,or,link,local,container,entity,manager,factory,bean,set,jta,data,source,data,source,set,jta,data,source,should,be,called,on,the,link,local,container,entity,manager,factory,bean,param,jta,if,the,data,source,is,jta,return,the,builder,for,fluent,usage;public,builder,jta,boolean,jta,this,jta,jta,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder jta(boolean jta);1519362690;Configure if using a JTA {@link DataSource}, i.e. if_{@link LocalContainerEntityManagerFactoryBean#setDataSource(DataSource)_setDataSource} or_{@link LocalContainerEntityManagerFactoryBean#setJtaDataSource(DataSource)_setJtaDataSource} should be called on the_{@link LocalContainerEntityManagerFactoryBean}._@param jta if the data source is JTA_@return the builder for fluent usage;public Builder jta(boolean jta) {_			this.jta = jta__			return this__		};configure,if,using,a,jta,link,data,source,i,e,if,link,local,container,entity,manager,factory,bean,set,data,source,data,source,set,data,source,or,link,local,container,entity,manager,factory,bean,set,jta,data,source,data,source,set,jta,data,source,should,be,called,on,the,link,local,container,entity,manager,factory,bean,param,jta,if,the,data,source,is,jta,return,the,builder,for,fluent,usage;public,builder,jta,boolean,jta,this,jta,jta,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder jta(boolean jta);1532738143;Configure if using a JTA {@link DataSource}, i.e. if_{@link LocalContainerEntityManagerFactoryBean#setDataSource(DataSource)_setDataSource} or_{@link LocalContainerEntityManagerFactoryBean#setJtaDataSource(DataSource)_setJtaDataSource} should be called on the_{@link LocalContainerEntityManagerFactoryBean}._@param jta if the data source is JTA_@return the builder for fluent usage;public Builder jta(boolean jta) {_			this.jta = jta__			return this__		};configure,if,using,a,jta,link,data,source,i,e,if,link,local,container,entity,manager,factory,bean,set,data,source,data,source,set,data,source,or,link,local,container,entity,manager,factory,bean,set,jta,data,source,data,source,set,jta,data,source,should,be,called,on,the,link,local,container,entity,manager,factory,bean,param,jta,if,the,data,source,is,jta,return,the,builder,for,fluent,usage;public,builder,jta,boolean,jta,this,jta,jta,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder jta(boolean jta);1534446084;Configure if using a JTA {@link DataSource}, i.e. if_{@link LocalContainerEntityManagerFactoryBean#setDataSource(DataSource)_setDataSource} or_{@link LocalContainerEntityManagerFactoryBean#setJtaDataSource(DataSource)_setJtaDataSource} should be called on the_{@link LocalContainerEntityManagerFactoryBean}._@param jta if the data source is JTA_@return the builder for fluent usage;public Builder jta(boolean jta) {_			this.jta = jta__			return this__		};configure,if,using,a,jta,link,data,source,i,e,if,link,local,container,entity,manager,factory,bean,set,data,source,data,source,set,data,source,or,link,local,container,entity,manager,factory,bean,set,jta,data,source,data,source,set,jta,data,source,should,be,called,on,the,link,local,container,entity,manager,factory,bean,param,jta,if,the,data,source,is,jta,return,the,builder,for,fluent,usage;public,builder,jta,boolean,jta,this,jta,jta,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder jta(boolean jta);1534770204;Configure if using a JTA {@link DataSource}, i.e. if_{@link LocalContainerEntityManagerFactoryBean#setDataSource(DataSource)_setDataSource} or_{@link LocalContainerEntityManagerFactoryBean#setJtaDataSource(DataSource)_setJtaDataSource} should be called on the_{@link LocalContainerEntityManagerFactoryBean}._@param jta if the data source is JTA_@return the builder for fluent usage;public Builder jta(boolean jta) {_			this.jta = jta__			return this__		};configure,if,using,a,jta,link,data,source,i,e,if,link,local,container,entity,manager,factory,bean,set,data,source,data,source,set,data,source,or,link,local,container,entity,manager,factory,bean,set,jta,data,source,data,source,set,jta,data,source,should,be,called,on,the,link,local,container,entity,manager,factory,bean,param,jta,if,the,data,source,is,jta,return,the,builder,for,fluent,usage;public,builder,jta,boolean,jta,this,jta,jta,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder jta(boolean jta);1534770248;Configure if using a JTA {@link DataSource}, i.e. if_{@link LocalContainerEntityManagerFactoryBean#setDataSource(DataSource)_setDataSource} or_{@link LocalContainerEntityManagerFactoryBean#setJtaDataSource(DataSource)_setJtaDataSource} should be called on the_{@link LocalContainerEntityManagerFactoryBean}._@param jta if the data source is JTA_@return the builder for fluent usage;public Builder jta(boolean jta) {_			this.jta = jta__			return this__		};configure,if,using,a,jta,link,data,source,i,e,if,link,local,container,entity,manager,factory,bean,set,data,source,data,source,set,data,source,or,link,local,container,entity,manager,factory,bean,set,jta,data,source,data,source,set,jta,data,source,should,be,called,on,the,link,local,container,entity,manager,factory,bean,param,jta,if,the,data,source,is,jta,return,the,builder,for,fluent,usage;public,builder,jta,boolean,jta,this,jta,jta,return,this
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager);1507173536;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties JPA properties to be passed to the persistence provider._@param persistenceUnitManager optional source of persistence unit information (can_be null);public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager) {_		this(jpaVendorAdapter, jpaProperties, persistenceUnitManager, null)__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,this,jpa,vendor,adapter,jpa,properties,persistence,unit,manager,null
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager);1508427338;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties JPA properties to be passed to the persistence provider._@param persistenceUnitManager optional source of persistence unit information (can_be null);public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager) {_		this(jpaVendorAdapter, jpaProperties, persistenceUnitManager, null)__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,this,jpa,vendor,adapter,jpa,properties,persistence,unit,manager,null
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager);1508852463;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties JPA properties to be passed to the persistence provider._@param persistenceUnitManager optional source of persistence unit information (can_be null);public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager) {_		this(jpaVendorAdapter, jpaProperties, persistenceUnitManager, null)__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,this,jpa,vendor,adapter,jpa,properties,persistence,unit,manager,null
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager);1510908995;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties JPA properties to be passed to the persistence provider._@param persistenceUnitManager optional source of persistence unit information (can_be null);public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager) {_		this(jpaVendorAdapter, jpaProperties, persistenceUnitManager, null)__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,this,jpa,vendor,adapter,jpa,properties,persistence,unit,manager,null
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager);1518174068;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties JPA properties to be passed to the persistence provider._@param persistenceUnitManager optional source of persistence unit information (can_be null);public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager) {_		this(jpaVendorAdapter, jpaProperties, persistenceUnitManager, null)__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,this,jpa,vendor,adapter,jpa,properties,persistence,unit,manager,null
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager);1519362690;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties JPA properties to be passed to the persistence provider._@param persistenceUnitManager optional source of persistence unit information (can_be null);public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager) {_		this(jpaVendorAdapter, jpaProperties, persistenceUnitManager, null)__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,this,jpa,vendor,adapter,jpa,properties,persistence,unit,manager,null
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager);1532738143;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties the JPA properties to be passed to the persistence provider_@param persistenceUnitManager optional source of persistence unit information (can_be null);public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager) {_		this(jpaVendorAdapter, jpaProperties, persistenceUnitManager, null)__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,the,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,this,jpa,vendor,adapter,jpa,properties,persistence,unit,manager,null
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager);1534446084;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties the JPA properties to be passed to the persistence provider_@param persistenceUnitManager optional source of persistence unit information (can_be null);public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager) {_		this(jpaVendorAdapter, jpaProperties, persistenceUnitManager, null)__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,the,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,this,jpa,vendor,adapter,jpa,properties,persistence,unit,manager,null
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager);1534770204;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties the JPA properties to be passed to the persistence provider_@param persistenceUnitManager optional source of persistence unit information (can_be null);public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager) {_		this(jpaVendorAdapter, jpaProperties, persistenceUnitManager, null)__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,the,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,this,jpa,vendor,adapter,jpa,properties,persistence,unit,manager,null
EntityManagerFactoryBuilder -> public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter, 			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager);1534770248;Create a new instance passing in the common pieces that will be shared if multiple_EntityManagerFactory instances are created._@param jpaVendorAdapter a vendor adapter_@param jpaProperties the JPA properties to be passed to the persistence provider_@param persistenceUnitManager optional source of persistence unit information (can_be null);public EntityManagerFactoryBuilder(JpaVendorAdapter jpaVendorAdapter,_			Map<String, ?> jpaProperties, PersistenceUnitManager persistenceUnitManager) {_		this(jpaVendorAdapter, jpaProperties, persistenceUnitManager, null)__	};create,a,new,instance,passing,in,the,common,pieces,that,will,be,shared,if,multiple,entity,manager,factory,instances,are,created,param,jpa,vendor,adapter,a,vendor,adapter,param,jpa,properties,the,jpa,properties,to,be,passed,to,the,persistence,provider,param,persistence,unit,manager,optional,source,of,persistence,unit,information,can,be,null;public,entity,manager,factory,builder,jpa,vendor,adapter,jpa,vendor,adapter,map,string,jpa,properties,persistence,unit,manager,persistence,unit,manager,this,jpa,vendor,adapter,jpa,properties,persistence,unit,manager,null
EntityManagerFactoryBuilder -> public void setCallback(EntityManagerFactoryBeanCallback callback);1507173536;An optional callback for new entity manager factory beans._@param callback the entity manager factory bean callback;public void setCallback(EntityManagerFactoryBeanCallback callback) {_		this.callback = callback__	};an,optional,callback,for,new,entity,manager,factory,beans,param,callback,the,entity,manager,factory,bean,callback;public,void,set,callback,entity,manager,factory,bean,callback,callback,this,callback,callback
EntityManagerFactoryBuilder -> public void setCallback(EntityManagerFactoryBeanCallback callback);1508427338;An optional callback for new entity manager factory beans._@param callback the entity manager factory bean callback;public void setCallback(EntityManagerFactoryBeanCallback callback) {_		this.callback = callback__	};an,optional,callback,for,new,entity,manager,factory,beans,param,callback,the,entity,manager,factory,bean,callback;public,void,set,callback,entity,manager,factory,bean,callback,callback,this,callback,callback
EntityManagerFactoryBuilder -> public void setCallback(EntityManagerFactoryBeanCallback callback);1508852463;An optional callback for new entity manager factory beans._@param callback the entity manager factory bean callback;public void setCallback(EntityManagerFactoryBeanCallback callback) {_		this.callback = callback__	};an,optional,callback,for,new,entity,manager,factory,beans,param,callback,the,entity,manager,factory,bean,callback;public,void,set,callback,entity,manager,factory,bean,callback,callback,this,callback,callback
EntityManagerFactoryBuilder -> public void setCallback(EntityManagerFactoryBeanCallback callback);1510908995;An optional callback for new entity manager factory beans._@param callback the entity manager factory bean callback;public void setCallback(EntityManagerFactoryBeanCallback callback) {_		this.callback = callback__	};an,optional,callback,for,new,entity,manager,factory,beans,param,callback,the,entity,manager,factory,bean,callback;public,void,set,callback,entity,manager,factory,bean,callback,callback,this,callback,callback
EntityManagerFactoryBuilder -> public void setCallback(EntityManagerFactoryBeanCallback callback);1518174068;An optional callback for new entity manager factory beans._@param callback the entity manager factory bean callback;public void setCallback(EntityManagerFactoryBeanCallback callback) {_		this.callback = callback__	};an,optional,callback,for,new,entity,manager,factory,beans,param,callback,the,entity,manager,factory,bean,callback;public,void,set,callback,entity,manager,factory,bean,callback,callback,this,callback,callback
EntityManagerFactoryBuilder -> public void setCallback(EntityManagerFactoryBeanCallback callback);1519362690;An optional callback for new entity manager factory beans._@param callback the entity manager factory bean callback;public void setCallback(EntityManagerFactoryBeanCallback callback) {_		this.callback = callback__	};an,optional,callback,for,new,entity,manager,factory,beans,param,callback,the,entity,manager,factory,bean,callback;public,void,set,callback,entity,manager,factory,bean,callback,callback,this,callback,callback
EntityManagerFactoryBuilder -> public void setCallback(EntityManagerFactoryBeanCallback callback);1532738143;An optional callback for new entity manager factory beans._@param callback the entity manager factory bean callback;public void setCallback(EntityManagerFactoryBeanCallback callback) {_		this.callback = callback__	};an,optional,callback,for,new,entity,manager,factory,beans,param,callback,the,entity,manager,factory,bean,callback;public,void,set,callback,entity,manager,factory,bean,callback,callback,this,callback,callback
EntityManagerFactoryBuilder -> public void setCallback(EntityManagerFactoryBeanCallback callback);1534446084;An optional callback for new entity manager factory beans._@param callback the entity manager factory bean callback;public void setCallback(EntityManagerFactoryBeanCallback callback) {_		this.callback = callback__	};an,optional,callback,for,new,entity,manager,factory,beans,param,callback,the,entity,manager,factory,bean,callback;public,void,set,callback,entity,manager,factory,bean,callback,callback,this,callback,callback
EntityManagerFactoryBuilder -> Builder -> public Builder mappingResources(String... mappingResources);1508427338;The mapping resources (equivalent to {@code <mapping-file>} entries in_{@code persistence.xml}) for the persistence unit._<p>Note that mapping resources must be relative to the classpath root,_e.g. "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml",_so that they can be loaded through {@code ClassLoader.getResource}._@param mappingResources the mapping resources to use_@return the builder for fluent usage;public Builder mappingResources(String... mappingResources) {_			this.mappingResources = mappingResources__			return this__		};the,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,persistence,unit,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,param,mapping,resources,the,mapping,resources,to,use,return,the,builder,for,fluent,usage;public,builder,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder mappingResources(String... mappingResources);1508852463;The mapping resources (equivalent to {@code <mapping-file>} entries in_{@code persistence.xml}) for the persistence unit._<p>_Note that mapping resources must be relative to the classpath root, e.g._"META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml", so that_they can be loaded through {@code ClassLoader.getResource}._@param mappingResources the mapping resources to use_@return the builder for fluent usage;public Builder mappingResources(String... mappingResources) {_			this.mappingResources = mappingResources__			return this__		};the,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,persistence,unit,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,param,mapping,resources,the,mapping,resources,to,use,return,the,builder,for,fluent,usage;public,builder,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder mappingResources(String... mappingResources);1510908995;The mapping resources (equivalent to {@code <mapping-file>} entries in_{@code persistence.xml}) for the persistence unit._<p>_Note that mapping resources must be relative to the classpath root, e.g._"META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml", so that_they can be loaded through {@code ClassLoader.getResource()}._@param mappingResources the mapping resources to use_@return the builder for fluent usage;public Builder mappingResources(String... mappingResources) {_			this.mappingResources = mappingResources__			return this__		};the,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,persistence,unit,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,param,mapping,resources,the,mapping,resources,to,use,return,the,builder,for,fluent,usage;public,builder,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder mappingResources(String... mappingResources);1518174068;The mapping resources (equivalent to {@code <mapping-file>} entries in_{@code persistence.xml}) for the persistence unit._<p>_Note that mapping resources must be relative to the classpath root, e.g._"META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml", so that_they can be loaded through {@code ClassLoader.getResource()}._@param mappingResources the mapping resources to use_@return the builder for fluent usage;public Builder mappingResources(String... mappingResources) {_			this.mappingResources = mappingResources__			return this__		};the,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,persistence,unit,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,param,mapping,resources,the,mapping,resources,to,use,return,the,builder,for,fluent,usage;public,builder,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder mappingResources(String... mappingResources);1519362690;The mapping resources (equivalent to {@code <mapping-file>} entries in_{@code persistence.xml}) for the persistence unit._<p>_Note that mapping resources must be relative to the classpath root, e.g._"META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml", so that_they can be loaded through {@code ClassLoader.getResource()}._@param mappingResources the mapping resources to use_@return the builder for fluent usage;public Builder mappingResources(String... mappingResources) {_			this.mappingResources = mappingResources__			return this__		};the,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,persistence,unit,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,param,mapping,resources,the,mapping,resources,to,use,return,the,builder,for,fluent,usage;public,builder,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder mappingResources(String... mappingResources);1532738143;The mapping resources (equivalent to {@code <mapping-file>} entries in_{@code persistence.xml}) for the persistence unit._<p>_Note that mapping resources must be relative to the classpath root, e.g._"META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml", so that_they can be loaded through {@code ClassLoader.getResource()}._@param mappingResources the mapping resources to use_@return the builder for fluent usage;public Builder mappingResources(String... mappingResources) {_			this.mappingResources = mappingResources__			return this__		};the,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,persistence,unit,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,param,mapping,resources,the,mapping,resources,to,use,return,the,builder,for,fluent,usage;public,builder,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder mappingResources(String... mappingResources);1534446084;The mapping resources (equivalent to {@code <mapping-file>} entries in_{@code persistence.xml}) for the persistence unit._<p>_Note that mapping resources must be relative to the classpath root, e.g._"META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml", so that_they can be loaded through {@code ClassLoader.getResource()}._@param mappingResources the mapping resources to use_@return the builder for fluent usage;public Builder mappingResources(String... mappingResources) {_			this.mappingResources = mappingResources__			return this__		};the,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,persistence,unit,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,param,mapping,resources,the,mapping,resources,to,use,return,the,builder,for,fluent,usage;public,builder,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder mappingResources(String... mappingResources);1534770204;The mapping resources (equivalent to {@code <mapping-file>} entries in_{@code persistence.xml}) for the persistence unit._<p>_Note that mapping resources must be relative to the classpath root, e.g._"META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml", so that_they can be loaded through {@code ClassLoader.getResource()}._@param mappingResources the mapping resources to use_@return the builder for fluent usage;public Builder mappingResources(String... mappingResources) {_			this.mappingResources = mappingResources__			return this__		};the,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,persistence,unit,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,param,mapping,resources,the,mapping,resources,to,use,return,the,builder,for,fluent,usage;public,builder,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder mappingResources(String... mappingResources);1534770248;The mapping resources (equivalent to {@code <mapping-file>} entries in_{@code persistence.xml}) for the persistence unit._<p>_Note that mapping resources must be relative to the classpath root, e.g._"META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml", so that_they can be loaded through {@code ClassLoader.getResource()}._@param mappingResources the mapping resources to use_@return the builder for fluent usage;public Builder mappingResources(String... mappingResources) {_			this.mappingResources = mappingResources__			return this__		};the,mapping,resources,equivalent,to,code,mapping,file,entries,in,code,persistence,xml,for,the,persistence,unit,p,note,that,mapping,resources,must,be,relative,to,the,classpath,root,e,g,meta,inf,mappings,xml,or,com,mycompany,repository,mappings,xml,so,that,they,can,be,loaded,through,code,class,loader,get,resource,param,mapping,resources,the,mapping,resources,to,use,return,the,builder,for,fluent,usage;public,builder,mapping,resources,string,mapping,resources,this,mapping,resources,mapping,resources,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder persistenceUnit(String persistenceUnit);1507173536;The name of the persistence unit. If only building one EntityManagerFactory you_can omit this, but if there are more than one in the same application you_should give them distinct names._@param persistenceUnit the name of the persistence unit_@return the builder for fluent usage;public Builder persistenceUnit(String persistenceUnit) {_			this.persistenceUnit = persistenceUnit__			return this__		};the,name,of,the,persistence,unit,if,only,building,one,entity,manager,factory,you,can,omit,this,but,if,there,are,more,than,one,in,the,same,application,you,should,give,them,distinct,names,param,persistence,unit,the,name,of,the,persistence,unit,return,the,builder,for,fluent,usage;public,builder,persistence,unit,string,persistence,unit,this,persistence,unit,persistence,unit,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder persistenceUnit(String persistenceUnit);1508427338;The name of the persistence unit. If only building one EntityManagerFactory you_can omit this, but if there are more than one in the same application you_should give them distinct names._@param persistenceUnit the name of the persistence unit_@return the builder for fluent usage;public Builder persistenceUnit(String persistenceUnit) {_			this.persistenceUnit = persistenceUnit__			return this__		};the,name,of,the,persistence,unit,if,only,building,one,entity,manager,factory,you,can,omit,this,but,if,there,are,more,than,one,in,the,same,application,you,should,give,them,distinct,names,param,persistence,unit,the,name,of,the,persistence,unit,return,the,builder,for,fluent,usage;public,builder,persistence,unit,string,persistence,unit,this,persistence,unit,persistence,unit,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder persistenceUnit(String persistenceUnit);1508852463;The name of the persistence unit. If only building one EntityManagerFactory you_can omit this, but if there are more than one in the same application you_should give them distinct names._@param persistenceUnit the name of the persistence unit_@return the builder for fluent usage;public Builder persistenceUnit(String persistenceUnit) {_			this.persistenceUnit = persistenceUnit__			return this__		};the,name,of,the,persistence,unit,if,only,building,one,entity,manager,factory,you,can,omit,this,but,if,there,are,more,than,one,in,the,same,application,you,should,give,them,distinct,names,param,persistence,unit,the,name,of,the,persistence,unit,return,the,builder,for,fluent,usage;public,builder,persistence,unit,string,persistence,unit,this,persistence,unit,persistence,unit,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder persistenceUnit(String persistenceUnit);1510908995;The name of the persistence unit. If only building one EntityManagerFactory you_can omit this, but if there are more than one in the same application you_should give them distinct names._@param persistenceUnit the name of the persistence unit_@return the builder for fluent usage;public Builder persistenceUnit(String persistenceUnit) {_			this.persistenceUnit = persistenceUnit__			return this__		};the,name,of,the,persistence,unit,if,only,building,one,entity,manager,factory,you,can,omit,this,but,if,there,are,more,than,one,in,the,same,application,you,should,give,them,distinct,names,param,persistence,unit,the,name,of,the,persistence,unit,return,the,builder,for,fluent,usage;public,builder,persistence,unit,string,persistence,unit,this,persistence,unit,persistence,unit,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder persistenceUnit(String persistenceUnit);1518174068;The name of the persistence unit. If only building one EntityManagerFactory you_can omit this, but if there are more than one in the same application you_should give them distinct names._@param persistenceUnit the name of the persistence unit_@return the builder for fluent usage;public Builder persistenceUnit(String persistenceUnit) {_			this.persistenceUnit = persistenceUnit__			return this__		};the,name,of,the,persistence,unit,if,only,building,one,entity,manager,factory,you,can,omit,this,but,if,there,are,more,than,one,in,the,same,application,you,should,give,them,distinct,names,param,persistence,unit,the,name,of,the,persistence,unit,return,the,builder,for,fluent,usage;public,builder,persistence,unit,string,persistence,unit,this,persistence,unit,persistence,unit,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder persistenceUnit(String persistenceUnit);1519362690;The name of the persistence unit. If only building one EntityManagerFactory you_can omit this, but if there are more than one in the same application you_should give them distinct names._@param persistenceUnit the name of the persistence unit_@return the builder for fluent usage;public Builder persistenceUnit(String persistenceUnit) {_			this.persistenceUnit = persistenceUnit__			return this__		};the,name,of,the,persistence,unit,if,only,building,one,entity,manager,factory,you,can,omit,this,but,if,there,are,more,than,one,in,the,same,application,you,should,give,them,distinct,names,param,persistence,unit,the,name,of,the,persistence,unit,return,the,builder,for,fluent,usage;public,builder,persistence,unit,string,persistence,unit,this,persistence,unit,persistence,unit,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder persistenceUnit(String persistenceUnit);1532738143;The name of the persistence unit. If only building one EntityManagerFactory you_can omit this, but if there are more than one in the same application you_should give them distinct names._@param persistenceUnit the name of the persistence unit_@return the builder for fluent usage;public Builder persistenceUnit(String persistenceUnit) {_			this.persistenceUnit = persistenceUnit__			return this__		};the,name,of,the,persistence,unit,if,only,building,one,entity,manager,factory,you,can,omit,this,but,if,there,are,more,than,one,in,the,same,application,you,should,give,them,distinct,names,param,persistence,unit,the,name,of,the,persistence,unit,return,the,builder,for,fluent,usage;public,builder,persistence,unit,string,persistence,unit,this,persistence,unit,persistence,unit,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder persistenceUnit(String persistenceUnit);1534446084;The name of the persistence unit. If only building one EntityManagerFactory you_can omit this, but if there are more than one in the same application you_should give them distinct names._@param persistenceUnit the name of the persistence unit_@return the builder for fluent usage;public Builder persistenceUnit(String persistenceUnit) {_			this.persistenceUnit = persistenceUnit__			return this__		};the,name,of,the,persistence,unit,if,only,building,one,entity,manager,factory,you,can,omit,this,but,if,there,are,more,than,one,in,the,same,application,you,should,give,them,distinct,names,param,persistence,unit,the,name,of,the,persistence,unit,return,the,builder,for,fluent,usage;public,builder,persistence,unit,string,persistence,unit,this,persistence,unit,persistence,unit,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder persistenceUnit(String persistenceUnit);1534770204;The name of the persistence unit. If only building one EntityManagerFactory you_can omit this, but if there are more than one in the same application you_should give them distinct names._@param persistenceUnit the name of the persistence unit_@return the builder for fluent usage;public Builder persistenceUnit(String persistenceUnit) {_			this.persistenceUnit = persistenceUnit__			return this__		};the,name,of,the,persistence,unit,if,only,building,one,entity,manager,factory,you,can,omit,this,but,if,there,are,more,than,one,in,the,same,application,you,should,give,them,distinct,names,param,persistence,unit,the,name,of,the,persistence,unit,return,the,builder,for,fluent,usage;public,builder,persistence,unit,string,persistence,unit,this,persistence,unit,persistence,unit,return,this
EntityManagerFactoryBuilder -> Builder -> public Builder persistenceUnit(String persistenceUnit);1534770248;The name of the persistence unit. If only building one EntityManagerFactory you_can omit this, but if there are more than one in the same application you_should give them distinct names._@param persistenceUnit the name of the persistence unit_@return the builder for fluent usage;public Builder persistenceUnit(String persistenceUnit) {_			this.persistenceUnit = persistenceUnit__			return this__		};the,name,of,the,persistence,unit,if,only,building,one,entity,manager,factory,you,can,omit,this,but,if,there,are,more,than,one,in,the,same,application,you,should,give,them,distinct,names,param,persistence,unit,the,name,of,the,persistence,unit,return,the,builder,for,fluent,usage;public,builder,persistence,unit,string,persistence,unit,this,persistence,unit,persistence,unit,return,this
EntityManagerFactoryBuilder -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1534446084;Configure the bootstrap executor to be used by the_{@link LocalContainerEntityManagerFactoryBean}._@param bootstrapExecutor the executor_@since 2.1.0;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};configure,the,bootstrap,executor,to,be,used,by,the,link,local,container,entity,manager,factory,bean,param,bootstrap,executor,the,executor,since,2,1,0;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
EntityManagerFactoryBuilder -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1534770204;Configure the bootstrap executor to be used by the_{@link LocalContainerEntityManagerFactoryBean}._@param bootstrapExecutor the executor_@since 2.1.0;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};configure,the,bootstrap,executor,to,be,used,by,the,link,local,container,entity,manager,factory,bean,param,bootstrap,executor,the,executor,since,2,1,0;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
EntityManagerFactoryBuilder -> public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor);1534770248;Configure the bootstrap executor to be used by the_{@link LocalContainerEntityManagerFactoryBean}._@param bootstrapExecutor the executor_@since 2.1.0;public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {_		this.bootstrapExecutor = bootstrapExecutor__	};configure,the,bootstrap,executor,to,be,used,by,the,link,local,container,entity,manager,factory,bean,param,bootstrap,executor,the,executor,since,2,1,0;public,void,set,bootstrap,executor,async,task,executor,bootstrap,executor,this,bootstrap,executor,bootstrap,executor
