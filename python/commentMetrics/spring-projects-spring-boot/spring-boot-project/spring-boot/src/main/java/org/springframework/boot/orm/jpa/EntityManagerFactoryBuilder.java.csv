commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public Builder dataSource(DataSource dataSource) {     return new Builder(dataSource). }
true;public;1;3;/**  * Configure the bootstrap executor to be used by the  * {@link LocalContainerEntityManagerFactoryBean}.  * @param bootstrapExecutor the executor  * @since 2.1.0  */ ;/**  * Configure the bootstrap executor to be used by the  * {@link LocalContainerEntityManagerFactoryBean}.  * @param bootstrapExecutor the executor  * @since 2.1.0  */ public void setBootstrapExecutor(AsyncTaskExecutor bootstrapExecutor) {     this.bootstrapExecutor = bootstrapExecutor. }
true;public;1;4;/**  * The names of packages to scan for {@code @Entity} annotations.  * @param packagesToScan packages to scan  * @return the builder for fluent usage  */ ;/**  * The names of packages to scan for {@code @Entity} annotations.  * @param packagesToScan packages to scan  * @return the builder for fluent usage  */ public Builder packages(String... packagesToScan) {     this.packagesToScan = packagesToScan.     return this. }
true;public;1;8;/**  * The classes whose packages should be scanned for {@code @Entity} annotations.  * @param basePackageClasses the classes to use  * @return the builder for fluent usage  */ ;/**  * The classes whose packages should be scanned for {@code @Entity} annotations.  * @param basePackageClasses the classes to use  * @return the builder for fluent usage  */ public Builder packages(Class<?>... basePackageClasses) {     Set<String> packages = new HashSet<>().     for (Class<?> type : basePackageClasses) {         packages.add(ClassUtils.getPackageName(type)).     }     this.packagesToScan = StringUtils.toStringArray(packages).     return this. }
true;public;1;4;/**  * The name of the persistence unit. If only building one EntityManagerFactory you  * can omit this, but if there are more than one in the same application you  * should give them distinct names.  * @param persistenceUnit the name of the persistence unit  * @return the builder for fluent usage  */ ;/**  * The name of the persistence unit. If only building one EntityManagerFactory you  * can omit this, but if there are more than one in the same application you  * should give them distinct names.  * @param persistenceUnit the name of the persistence unit  * @return the builder for fluent usage  */ public Builder persistenceUnit(String persistenceUnit) {     this.persistenceUnit = persistenceUnit.     return this. }
true;public;1;4;/**  * Generic properties for standard JPA or vendor-specific configuration. These  * properties override any values provided in the constructor.  * @param properties the properties to use  * @return the builder for fluent usage  */ ;/**  * Generic properties for standard JPA or vendor-specific configuration. These  * properties override any values provided in the constructor.  * @param properties the properties to use  * @return the builder for fluent usage  */ public Builder properties(Map<String, ?> properties) {     this.properties.putAll(properties).     return this. }
true;public;1;4;/**  * The mapping resources (equivalent to {@code <mapping-file>} entries in  * {@code persistence.xml}) for the persistence unit.  * <p>  * Note that mapping resources must be relative to the classpath root, e.g.  * "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml", so that  * they can be loaded through {@code ClassLoader.getResource()}.  * @param mappingResources the mapping resources to use  * @return the builder for fluent usage  */ ;/**  * The mapping resources (equivalent to {@code <mapping-file>} entries in  * {@code persistence.xml}) for the persistence unit.  * <p>  * Note that mapping resources must be relative to the classpath root, e.g.  * "META-INF/mappings.xml" or "com/mycompany/repository/mappings.xml", so that  * they can be loaded through {@code ClassLoader.getResource()}.  * @param mappingResources the mapping resources to use  * @return the builder for fluent usage  */ public Builder mappingResources(String... mappingResources) {     this.mappingResources = mappingResources.     return this. }
true;public;1;4;/**  * Configure if using a JTA {@link DataSource}, i.e. if  * {@link LocalContainerEntityManagerFactoryBean#setDataSource(DataSource)  * setDataSource} or  * {@link LocalContainerEntityManagerFactoryBean#setJtaDataSource(DataSource)  * setJtaDataSource} should be called on the  * {@link LocalContainerEntityManagerFactoryBean}.  * @param jta if the data source is JTA  * @return the builder for fluent usage  */ ;/**  * Configure if using a JTA {@link DataSource}, i.e. if  * {@link LocalContainerEntityManagerFactoryBean#setDataSource(DataSource)  * setDataSource} or  * {@link LocalContainerEntityManagerFactoryBean#setJtaDataSource(DataSource)  * setJtaDataSource} should be called on the  * {@link LocalContainerEntityManagerFactoryBean}.  * @param jta if the data source is JTA  * @return the builder for fluent usage  */ public Builder jta(boolean jta) {     this.jta = jta.     return this. }
false;public;0;36;;public LocalContainerEntityManagerFactoryBean build() {     LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new LocalContainerEntityManagerFactoryBean().     if (EntityManagerFactoryBuilder.this.persistenceUnitManager != null) {         entityManagerFactoryBean.setPersistenceUnitManager(EntityManagerFactoryBuilder.this.persistenceUnitManager).     }     if (this.persistenceUnit != null) {         entityManagerFactoryBean.setPersistenceUnitName(this.persistenceUnit).     }     entityManagerFactoryBean.setJpaVendorAdapter(EntityManagerFactoryBuilder.this.jpaVendorAdapter).     if (this.jta) {         entityManagerFactoryBean.setJtaDataSource(this.dataSource).     } else {         entityManagerFactoryBean.setDataSource(this.dataSource).     }     entityManagerFactoryBean.setPackagesToScan(this.packagesToScan).     entityManagerFactoryBean.getJpaPropertyMap().putAll(EntityManagerFactoryBuilder.this.jpaProperties).     entityManagerFactoryBean.getJpaPropertyMap().putAll(this.properties).     if (!ObjectUtils.isEmpty(this.mappingResources)) {         entityManagerFactoryBean.setMappingResources(this.mappingResources).     }     URL rootLocation = EntityManagerFactoryBuilder.this.persistenceUnitRootLocation.     if (rootLocation != null) {         entityManagerFactoryBean.setPersistenceUnitRootLocation(rootLocation.toString()).     }     if (EntityManagerFactoryBuilder.this.bootstrapExecutor != null) {         entityManagerFactoryBean.setBootstrapExecutor(EntityManagerFactoryBuilder.this.bootstrapExecutor).     }     return entityManagerFactoryBean. }
