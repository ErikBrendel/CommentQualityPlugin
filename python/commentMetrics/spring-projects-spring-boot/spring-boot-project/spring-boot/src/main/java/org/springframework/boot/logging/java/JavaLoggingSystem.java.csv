commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String[] getStandardConfigLocations() {     return new String[] { "logging.properties" }. }
false;public;0;5;;@Override public void beforeInitialize() {     super.beforeInitialize().     Logger.getLogger("").setLevel(Level.SEVERE). }
false;protected;2;10;;@Override protected void loadDefaults(LoggingInitializationContext initializationContext, LogFile logFile) {     if (logFile != null) {         loadConfiguration(getPackagedConfigFile("logging-file.properties"), logFile).     } else {         loadConfiguration(getPackagedConfigFile("logging.properties"), logFile).     } }
false;protected;3;5;;@Override protected void loadConfiguration(LoggingInitializationContext initializationContext, String location, LogFile logFile) {     loadConfiguration(location, logFile). }
false;protected;2;17;;protected void loadConfiguration(String location, LogFile logFile) {     Assert.notNull(location, "Location must not be null").     try {         String configuration = FileCopyUtils.copyToString(new InputStreamReader(ResourceUtils.getURL(location).openStream())).         if (logFile != null) {             configuration = configuration.replace("${LOG_FILE}", StringUtils.cleanPath(logFile.toString())).         }         LogManager.getLogManager().readConfiguration(new ByteArrayInputStream(configuration.getBytes())).     } catch (Exception ex) {         throw new IllegalStateException("Could not initialize Java logging from " + location, ex).     } }
false;public;0;4;;@Override public Set<LogLevel> getSupportedLogLevels() {     return LEVELS.getSupported(). }
false;public;2;10;;@Override public void setLogLevel(String loggerName, LogLevel level) {     if (loggerName == null || ROOT_LOGGER_NAME.equals(loggerName)) {         loggerName = "".     }     Logger logger = Logger.getLogger(loggerName).     if (logger != null) {         logger.setLevel(LEVELS.convertSystemToNative(level)).     } }
false;public;0;10;;@Override public List<LoggerConfiguration> getLoggerConfigurations() {     List<LoggerConfiguration> result = new ArrayList<>().     Enumeration<String> names = LogManager.getLogManager().getLoggerNames().     while (names.hasMoreElements()) {         result.add(getLoggerConfiguration(names.nextElement())).     }     result.sort(CONFIGURATION_COMPARATOR).     return Collections.unmodifiableList(result). }
false;public;1;12;;@Override public LoggerConfiguration getLoggerConfiguration(String loggerName) {     Logger logger = Logger.getLogger(loggerName).     if (logger == null) {         return null.     }     LogLevel level = LEVELS.convertNativeToSystem(logger.getLevel()).     LogLevel effectiveLevel = LEVELS.convertNativeToSystem(getEffectiveLevel(logger)).     String name = (StringUtils.hasLength(logger.getName()) ? logger.getName() : ROOT_LOGGER_NAME).     return new LoggerConfiguration(name, level, effectiveLevel). }
false;private;1;7;;private Level getEffectiveLevel(Logger root) {     Logger logger = root.     while (logger.getLevel() == null) {         logger = logger.getParent().     }     return logger.getLevel(). }
false;public;0;4;;@Override public Runnable getShutdownHandler() {     return new ShutdownHandler(). }
false;public;0;4;;@Override public void run() {     LogManager.getLogManager().reset(). }
