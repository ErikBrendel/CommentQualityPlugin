commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public boolean isActive(Environment environment) {     return environment.containsProperty("VCAP_APPLICATION") || environment.containsProperty("VCAP_SERVICES"). }
false;public;1;4;;@Override public boolean isActive(Environment environment) {     return environment.containsProperty("DYNO"). }
false;public;1;4;;@Override public boolean isActive(Environment environment) {     return environment.containsProperty("HC_LANDSCAPE"). }
false;public;1;21;;@Override public boolean isActive(Environment environment) {     if (environment instanceof ConfigurableEnvironment) {         MapPropertySource propertySource = (MapPropertySource) ((ConfigurableEnvironment) environment).getPropertySources().get(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME).         if (propertySource != null) {             for (String name : propertySource.getPropertyNames()) {                 if (name.endsWith("_SERVICE_HOST")) {                     String serviceName = StringUtils.split(name, "_SERVICE_HOST")[0].                     if (propertySource.getProperty(serviceName + "_SERVICE_PORT") != null) {                         return true.                     }                 }             }         }     }     return false. }
true;public,abstract;1;1;/**  * Determines if the platform is active (i.e. the application is running in it).  * @param environment the environment  * @return if the platform is active.  */ ;/**  * Determines if the platform is active (i.e. the application is running in it).  * @param environment the environment  * @return if the platform is active.  */ public abstract boolean isActive(Environment environment).
true;public;0;3;/**  * Returns if the platform is behind a load balancer and uses  * {@literal X-Forwarded-For} headers.  * @return if {@literal X-Forwarded-For} headers are used  */ ;/**  * Returns if the platform is behind a load balancer and uses  * {@literal X-Forwarded-For} headers.  * @return if {@literal X-Forwarded-For} headers are used  */ public boolean isUsingForwardHeaders() {     return true. }
true;public,static;1;10;/**  * Returns the active {@link CloudPlatform} or {@code null} if one cannot be deduced.  * @param environment the environment  * @return the {@link CloudPlatform} or {@code null}  */ ;/**  * Returns the active {@link CloudPlatform} or {@code null} if one cannot be deduced.  * @param environment the environment  * @return the {@link CloudPlatform} or {@code null}  */ public static CloudPlatform getActive(Environment environment) {     if (environment != null) {         for (CloudPlatform cloudPlatform : values()) {             if (cloudPlatform.isActive(environment)) {                 return cloudPlatform.             }         }     }     return null. }
