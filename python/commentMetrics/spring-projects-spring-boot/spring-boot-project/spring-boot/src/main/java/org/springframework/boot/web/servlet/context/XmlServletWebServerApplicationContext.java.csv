commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set whether to use XML validation. Default is {@code true}.  * @param validating if validating the XML  */ ;/**  * Set whether to use XML validation. Default is {@code true}.  * @param validating if validating the XML  */ public void setValidating(boolean validating) {     this.reader.setValidating(validating). }
true;public;1;5;/**  * {@inheritDoc}  * <p>  * Delegates the given environment to underlying {@link XmlBeanDefinitionReader}.  * Should be called before any call to {@link #load}.  */ ;/**  * {@inheritDoc}  * <p>  * Delegates the given environment to underlying {@link XmlBeanDefinitionReader}.  * Should be called before any call to {@link #load}.  */ @Override public void setEnvironment(ConfigurableEnvironment environment) {     super.setEnvironment(environment).     this.reader.setEnvironment(this.getEnvironment()). }
true;public,final;1;3;/**  * Load bean definitions from the given XML resources.  * @param resources one or more resources to load from  */ ;/**  * Load bean definitions from the given XML resources.  * @param resources one or more resources to load from  */ public final void load(Resource... resources) {     this.reader.loadBeanDefinitions(resources). }
true;public,final;1;3;/**  * Load bean definitions from the given XML resources.  * @param resourceLocations one or more resource locations to load from  */ ;/**  * Load bean definitions from the given XML resources.  * @param resourceLocations one or more resource locations to load from  */ public final void load(String... resourceLocations) {     this.reader.loadBeanDefinitions(resourceLocations). }
true;public,final;2;7;/**  * Load bean definitions from the given XML resources.  * @param relativeClass class whose package will be used as a prefix when loading each  * specified resource name  * @param resourceNames relatively-qualified names of resources to load  */ ;/**  * Load bean definitions from the given XML resources.  * @param relativeClass class whose package will be used as a prefix when loading each  * specified resource name  * @param resourceNames relatively-qualified names of resources to load  */ public final void load(Class<?> relativeClass, String... resourceNames) {     Resource[] resources = new Resource[resourceNames.length].     for (int i = 0. i < resourceNames.length. i++) {         resources[i] = new ClassPathResource(resourceNames[i], relativeClass).     }     this.reader.loadBeanDefinitions(resources). }
