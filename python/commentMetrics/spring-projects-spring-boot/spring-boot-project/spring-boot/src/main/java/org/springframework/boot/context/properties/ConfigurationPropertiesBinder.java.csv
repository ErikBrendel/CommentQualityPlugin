commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;public void bind(Bindable<?> target) {     ConfigurationProperties annotation = target.getAnnotation(ConfigurationProperties.class).     Assert.state(annotation != null, () -> "Missing @ConfigurationProperties on " + target).     List<Validator> validators = getValidators(target).     BindHandler bindHandler = getBindHandler(annotation, validators).     getBinder().bind(annotation.prefix(), target, bindHandler). }
false;private;2;7;;private Validator getConfigurationPropertiesValidator(ApplicationContext applicationContext, String validatorBeanName) {     if (applicationContext.containsBean(validatorBeanName)) {         return applicationContext.getBean(validatorBeanName, Validator.class).     }     return null. }
false;private;1;13;;private List<Validator> getValidators(Bindable<?> target) {     List<Validator> validators = new ArrayList<>(3).     if (this.configurationPropertiesValidator != null) {         validators.add(this.configurationPropertiesValidator).     }     if (this.jsr303Present && target.getAnnotation(Validated.class) != null) {         validators.add(getJsr303Validator()).     }     if (target.getValue() != null && target.getValue().get() instanceof Validator) {         validators.add((Validator) target.getValue().get()).     }     return validators. }
false;private;0;7;;private Validator getJsr303Validator() {     if (this.jsr303Validator == null) {         this.jsr303Validator = new ConfigurationPropertiesJsr303Validator(this.applicationContext).     }     return this.jsr303Validator. }
false;private;2;19;;private BindHandler getBindHandler(ConfigurationProperties annotation, List<Validator> validators) {     BindHandler handler = new IgnoreTopLevelConverterNotFoundBindHandler().     if (annotation.ignoreInvalidFields()) {         handler = new IgnoreErrorsBindHandler(handler).     }     if (!annotation.ignoreUnknownFields()) {         UnboundElementsSourceFilter filter = new UnboundElementsSourceFilter().         handler = new NoUnboundElementsBindHandler(handler, filter).     }     if (!validators.isEmpty()) {         handler = new ValidationBindHandler(handler, validators.toArray(new Validator[0])).     }     for (ConfigurationPropertiesBindHandlerAdvisor advisor : getBindHandlerAdvisors()) {         handler = advisor.apply(handler).     }     return handler. }
false;private;0;5;;private List<ConfigurationPropertiesBindHandlerAdvisor> getBindHandlerAdvisors() {     return this.applicationContext.getBeanProvider(ConfigurationPropertiesBindHandlerAdvisor.class).orderedStream().collect(Collectors.toList()). }
false;private;0;8;;private Binder getBinder() {     if (this.binder == null) {         this.binder = new Binder(getConfigurationPropertySources(), getPropertySourcesPlaceholdersResolver(), getConversionService(), getPropertyEditorInitializer()).     }     return this.binder. }
false;private;0;3;;private Iterable<ConfigurationPropertySource> getConfigurationPropertySources() {     return ConfigurationPropertySources.from(this.propertySources). }
false;private;0;3;;private PropertySourcesPlaceholdersResolver getPropertySourcesPlaceholdersResolver() {     return new PropertySourcesPlaceholdersResolver(this.propertySources). }
false;private;0;4;;private ConversionService getConversionService() {     return new ConversionServiceDeducer(this.applicationContext).getConversionService(). }
false;private;0;7;;private Consumer<PropertyEditorRegistry> getPropertyEditorInitializer() {     if (this.applicationContext instanceof ConfigurableApplicationContext) {         return ((ConfigurableApplicationContext) this.applicationContext).getBeanFactory()::copyRegisteredEditorsTo.     }     return null. }
