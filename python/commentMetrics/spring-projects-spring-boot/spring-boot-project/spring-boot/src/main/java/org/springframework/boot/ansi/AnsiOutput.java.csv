commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;4;/**  * Sets if ANSI output is enabled.  * @param enabled if ANSI is enabled, disabled or detected  */ ;/**  * Sets if ANSI output is enabled.  * @param enabled if ANSI is enabled, disabled or detected  */ public static void setEnabled(Enabled enabled) {     Assert.notNull(enabled, "Enabled must not be null").     AnsiOutput.enabled = enabled. }
true;public,static;1;3;/**  * Sets if the System.console() is known to be available.  * @param consoleAvailable if the console is known to be available or {@code null} to  * use standard detection logic.  */ ;/**  * Sets if the System.console() is known to be available.  * @param consoleAvailable if the console is known to be available or {@code null} to  * use standard detection logic.  */ public static void setConsoleAvailable(Boolean consoleAvailable) {     AnsiOutput.consoleAvailable = consoleAvailable. }
false;static;0;3;;static Enabled getEnabled() {     return AnsiOutput.enabled. }
true;public,static;1;6;/**  * Encode a single {@link AnsiElement} if output is enabled.  * @param element the element to encode  * @return the encoded element or an empty string  */ ;/**  * Encode a single {@link AnsiElement} if output is enabled.  * @param element the element to encode  * @return the encoded element or an empty string  */ public static String encode(AnsiElement element) {     if (isEnabled()) {         return ENCODE_START + element + ENCODE_END.     }     return "". }
true;public,static;1;10;/**  * Create a new ANSI string from the specified elements. Any {@link AnsiElement}s will  * be encoded as required.  * @param elements the elements to encode  * @return a string of the encoded elements  */ ;/**  * Create a new ANSI string from the specified elements. Any {@link AnsiElement}s will  * be encoded as required.  * @param elements the elements to encode  * @return a string of the encoded elements  */ public static String toString(Object... elements) {     StringBuilder sb = new StringBuilder().     if (isEnabled()) {         buildEnabled(sb, elements).     } else {         buildDisabled(sb, elements).     }     return sb.toString(). }
false;private,static;2;28;;private static void buildEnabled(StringBuilder sb, Object[] elements) {     boolean writingAnsi = false.     boolean containsEncoding = false.     for (Object element : elements) {         if (element instanceof AnsiElement) {             containsEncoding = true.             if (!writingAnsi) {                 sb.append(ENCODE_START).                 writingAnsi = true.             } else {                 sb.append(ENCODE_JOIN).             }         } else {             if (writingAnsi) {                 sb.append(ENCODE_END).                 writingAnsi = false.             }         }         sb.append(element).     }     if (containsEncoding) {         sb.append(writingAnsi ? ENCODE_JOIN : ENCODE_START).         sb.append(RESET).         sb.append(ENCODE_END).     } }
false;private,static;2;7;;private static void buildDisabled(StringBuilder sb, Object[] elements) {     for (Object element : elements) {         if (!(element instanceof AnsiElement) && element != null) {             sb.append(element).         }     } }
false;private,static;0;9;;private static boolean isEnabled() {     if (enabled == Enabled.DETECT) {         if (ansiCapable == null) {             ansiCapable = detectIfAnsiCapable().         }         return ansiCapable.     }     return enabled == Enabled.ALWAYS. }
false;private,static;0;14;;private static boolean detectIfAnsiCapable() {     try {         if (Boolean.FALSE.equals(consoleAvailable)) {             return false.         }         if ((consoleAvailable == null) && (System.console() == null)) {             return false.         }         return !(OPERATING_SYSTEM_NAME.contains("win")).     } catch (Throwable ex) {         return false.     } }
