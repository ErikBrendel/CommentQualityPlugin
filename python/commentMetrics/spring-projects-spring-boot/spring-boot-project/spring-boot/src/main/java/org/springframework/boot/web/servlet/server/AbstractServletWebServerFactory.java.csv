commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the context path for the web server. The path will start with "/" and not  * end with "/". The root context is represented by an empty string.  * @return the context path  */ ;/**  * Returns the context path for the web server. The path will start with "/" and not  * end with "/". The root context is represented by an empty string.  * @return the context path  */ public String getContextPath() {     return this.contextPath. }
false;public;1;5;;@Override public void setContextPath(String contextPath) {     checkContextPath(contextPath).     this.contextPath = contextPath. }
false;private;1;13;;private void checkContextPath(String contextPath) {     Assert.notNull(contextPath, "ContextPath must not be null").     if (!contextPath.isEmpty()) {         if ("/".equals(contextPath)) {             throw new IllegalArgumentException("Root ContextPath must be specified using an empty string").         }         if (!contextPath.startsWith("/") || contextPath.endsWith("/")) {             throw new IllegalArgumentException("ContextPath must start with '/' and not end with '/'").         }     } }
false;public;0;3;;public String getDisplayName() {     return this.displayName. }
false;public;1;4;;@Override public void setDisplayName(String displayName) {     this.displayName = displayName. }
true;public;0;3;/**  * Flag to indicate that the default servlet should be registered.  * @return true if the default servlet is to be registered  */ ;/**  * Flag to indicate that the default servlet should be registered.  * @return true if the default servlet is to be registered  */ public boolean isRegisterDefaultServlet() {     return this.registerDefaultServlet. }
false;public;1;4;;@Override public void setRegisterDefaultServlet(boolean registerDefaultServlet) {     this.registerDefaultServlet = registerDefaultServlet. }
true;public;0;3;/**  * Returns the mime-type mappings.  * @return the mimeMappings the mime-type mappings.  */ ;/**  * Returns the mime-type mappings.  * @return the mimeMappings the mime-type mappings.  */ public MimeMappings getMimeMappings() {     return this.mimeMappings. }
false;public;1;4;;@Override public void setMimeMappings(MimeMappings mimeMappings) {     this.mimeMappings = new MimeMappings(mimeMappings). }
true;public;0;3;/**  * Returns the document root which will be used by the web context to serve static  * files.  * @return the document root  */ ;/**  * Returns the document root which will be used by the web context to serve static  * files.  * @return the document root  */ public File getDocumentRoot() {     return this.documentRoot.getDirectory(). }
false;public;1;4;;@Override public void setDocumentRoot(File documentRoot) {     this.documentRoot.setDirectory(documentRoot). }
false;public;1;5;;@Override public void setInitializers(List<? extends ServletContextInitializer> initializers) {     Assert.notNull(initializers, "Initializers must not be null").     this.initializers = new ArrayList<>(initializers). }
false;public;1;5;;@Override public void addInitializers(ServletContextInitializer... initializers) {     Assert.notNull(initializers, "Initializers must not be null").     this.initializers.addAll(Arrays.asList(initializers)). }
false;public;0;3;;public Jsp getJsp() {     return this.jsp. }
false;public;1;4;;@Override public void setJsp(Jsp jsp) {     this.jsp = jsp. }
false;public;0;3;;public Session getSession() {     return this.session. }
false;public;1;4;;@Override public void setSession(Session session) {     this.session = session. }
true;public;0;3;/**  * Return the Locale to Charset mappings.  * @return the charset mappings  */ ;/**  * Return the Locale to Charset mappings.  * @return the charset mappings  */ public Map<Locale, Charset> getLocaleCharsetMappings() {     return this.localeCharsetMappings. }
false;public;1;5;;@Override public void setLocaleCharsetMappings(Map<Locale, Charset> localeCharsetMappings) {     Assert.notNull(localeCharsetMappings, "localeCharsetMappings must not be null").     this.localeCharsetMappings = localeCharsetMappings. }
false;public;1;4;;@Override public void setInitParameters(Map<String, String> initParameters) {     this.initParameters = initParameters. }
false;public;0;3;;public Map<String, String> getInitParameters() {     return this.initParameters. }
true;protected,final;1;10;/**  * Utility method that can be used by subclasses wishing to combine the specified  * {@link ServletContextInitializer} parameters with those defined in this instance.  * @param initializers the initializers to merge  * @return a complete set of merged initializers (with the specified parameters  * appearing first)  */ ;/**  * Utility method that can be used by subclasses wishing to combine the specified  * {@link ServletContextInitializer} parameters with those defined in this instance.  * @param initializers the initializers to merge  * @return a complete set of merged initializers (with the specified parameters  * appearing first)  */ protected final ServletContextInitializer[] mergeInitializers(ServletContextInitializer... initializers) {     List<ServletContextInitializer> mergedInitializers = new ArrayList<>().     mergedInitializers.add((servletContext) -> this.initParameters.forEach(servletContext::setInitParameter)).     mergedInitializers.add(new SessionConfiguringInitializer(this.session)).     mergedInitializers.addAll(Arrays.asList(initializers)).     mergedInitializers.addAll(this.initializers).     return mergedInitializers.toArray(new ServletContextInitializer[0]). }
true;protected;0;4;/**  * Returns whether or not the JSP servlet should be registered with the web server.  * @return {@code true} if the servlet should be registered, otherwise {@code false}  */ ;/**  * Returns whether or not the JSP servlet should be registered with the web server.  * @return {@code true} if the servlet should be registered, otherwise {@code false}  */ protected boolean shouldRegisterJspServlet() {     return this.jsp != null && this.jsp.getRegistered() && ClassUtils.isPresent(this.jsp.getClassName(), getClass().getClassLoader()). }
true;protected,final;0;3;/**  * Returns the absolute document root when it points to a valid directory, logging a  * warning and returning {@code null} otherwise.  * @return the valid document root  */ ;/**  * Returns the absolute document root when it points to a valid directory, logging a  * warning and returning {@code null} otherwise.  * @return the valid document root  */ protected final File getValidDocumentRoot() {     return this.documentRoot.getValidDirectory(). }
false;protected,final;0;3;;protected final List<URL> getUrlsOfJarsWithMetaInfResources() {     return this.staticResourceJars.getUrls(). }
false;protected,final;0;3;;protected final File getValidSessionStoreDir() {     return getValidSessionStoreDir(true). }
false;protected,final;1;3;;protected final File getValidSessionStoreDir(boolean mkdirs) {     return this.session.getSessionStoreDirectory().getValidDirectory(mkdirs). }
false;public;1;8;;@Override public void onStartup(ServletContext servletContext) throws ServletException {     if (this.session.getTrackingModes() != null) {         servletContext.setSessionTrackingModes(unwrap(this.session.getTrackingModes())).     }     configureSessionCookie(servletContext.getSessionCookieConfig()). }
false;private;1;24;;private void configureSessionCookie(SessionCookieConfig config) {     Session.Cookie cookie = this.session.getCookie().     if (cookie.getName() != null) {         config.setName(cookie.getName()).     }     if (cookie.getDomain() != null) {         config.setDomain(cookie.getDomain()).     }     if (cookie.getPath() != null) {         config.setPath(cookie.getPath()).     }     if (cookie.getComment() != null) {         config.setComment(cookie.getComment()).     }     if (cookie.getHttpOnly() != null) {         config.setHttpOnly(cookie.getHttpOnly()).     }     if (cookie.getSecure() != null) {         config.setSecure(cookie.getSecure()).     }     if (cookie.getMaxAge() != null) {         config.setMaxAge((int) cookie.getMaxAge().getSeconds()).     } }
false;private;1;11;;private Set<javax.servlet.SessionTrackingMode> unwrap(Set<Session.SessionTrackingMode> modes) {     if (modes == null) {         return null.     }     Set<javax.servlet.SessionTrackingMode> result = new LinkedHashSet<>().     for (Session.SessionTrackingMode mode : modes) {         result.add(javax.servlet.SessionTrackingMode.valueOf(mode.name())).     }     return result. }
