commented;modifiers;parameterAmount;loc;comment;code
false;private;0;12;;private ServletContainerInitializer newInitializer() {     for (String className : INITIALIZER_CLASSES) {         try {             Class<?> initializerClass = ClassUtils.forName(className, null).             return (ServletContainerInitializer) initializerClass.newInstance().         } catch (Exception ex) {         // Ignore         }     }     return null. }
false;protected;0;33;;@Override protected void doStart() throws Exception {     if (this.initializer == null) {         return.     }     if (ClassUtils.isPresent("org.apache.catalina.webresources.TomcatURLStreamHandlerFactory", getClass().getClassLoader())) {         TomcatURLStreamHandlerFactory.register().     } else {         try {             URL.setURLStreamHandlerFactory(new WarUrlStreamHandlerFactory()).         } catch (Error ex) {         // Ignore         }     }     ClassLoader classLoader = Thread.currentThread().getContextClassLoader().     try {         Thread.currentThread().setContextClassLoader(this.context.getClassLoader()).         try {             setExtendedListenerTypes(true).             this.initializer.onStartup(null, this.context.getServletContext()).         } finally {             setExtendedListenerTypes(false).         }     } finally {         Thread.currentThread().setContextClassLoader(classLoader).     } }
false;private;1;8;;private void setExtendedListenerTypes(boolean extended) {     try {         this.context.getServletContext().setExtendedListenerTypes(extended).     } catch (NoSuchMethodError ex) {     // Not available on Jetty 8     } }
false;public;1;7;;@Override public URLStreamHandler createURLStreamHandler(String protocol) {     if ("war".equals(protocol)) {         return new WarUrlStreamHandler().     }     return null. }
false;protected;4;10;;@Override protected void parseURL(URL u, String spec, int start, int limit) {     String path = "jar:" + spec.substring("war:".length()).     int separator = path.indexOf("*/").     if (separator >= 0) {         path = path.substring(0, separator) + "!/" + path.substring(separator + 2).     }     setURL(u, u.getProtocol(), "", -1, null, null, path, null, null). }
false;protected;1;4;;@Override protected URLConnection openConnection(URL u) throws IOException {     return new WarURLConnection(u). }
false;public;0;7;;@Override public void connect() throws IOException {     if (!this.connected) {         this.connection.connect().         this.connected = true.     } }
false;public;0;5;;@Override public InputStream getInputStream() throws IOException {     connect().     return this.connection.getInputStream(). }
