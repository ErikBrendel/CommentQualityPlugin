commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@Override public PropertyMapping[] map(ConfigurationPropertyName configurationPropertyName) {     // Use a local copy in case another thread changes things     LastMapping<ConfigurationPropertyName> last = this.lastMappedConfigurationPropertyName.     if (last != null && last.isFrom(configurationPropertyName)) {         return last.getMapping().     }     String convertedName = configurationPropertyName.toString().     PropertyMapping[] mapping = { new PropertyMapping(convertedName, configurationPropertyName) }.     this.lastMappedConfigurationPropertyName = new LastMapping<>(configurationPropertyName, mapping).     return mapping. }
false;public;1;11;;@Override public PropertyMapping[] map(String propertySourceName) {     // Use a local copy in case another thread changes things     LastMapping<String> last = this.lastMappedPropertyName.     if (last != null && last.isFrom(propertySourceName)) {         return last.getMapping().     }     PropertyMapping[] mapping = tryMap(propertySourceName).     this.lastMappedPropertyName = new LastMapping<>(propertySourceName, mapping).     return mapping. }
false;private;1;13;;private PropertyMapping[] tryMap(String propertySourceName) {     try {         ConfigurationPropertyName convertedName = ConfigurationPropertyName.adapt(propertySourceName, '.').         if (!convertedName.isEmpty()) {             return new PropertyMapping[] { new PropertyMapping(propertySourceName, convertedName) }.         }     } catch (Exception ex) {     }     return NO_MAPPINGS. }
false;public;1;3;;public boolean isFrom(T from) {     return ObjectUtils.nullSafeEquals(from, this.from). }
false;public;0;3;;public PropertyMapping[] getMapping() {     return this.mapping. }
