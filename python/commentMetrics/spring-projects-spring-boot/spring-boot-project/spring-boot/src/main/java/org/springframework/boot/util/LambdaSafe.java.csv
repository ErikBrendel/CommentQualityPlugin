# id;timestamp;commentText;codeText;commentWords;codeWords
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1517265071;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<R>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,r,value
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1517290556;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<R>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,r,value
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1517295938;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<R>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,r,value
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1517470612;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<R>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,r,value
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1518087233;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<R>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,r,value
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1518511836;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<R>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,r,value
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1519669562;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,value
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1520076393;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,value
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1520864302;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,value
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1525416882;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,value
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1525476706;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,value
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1532738143;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,value
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1533887302;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,value
LambdaSafe -> InvocationResult -> public static <R> InvocationResult<R> of(R value);1533887337;Create a new {@link InvocationResult} instance with the specified value._@param value the value (may be {@code null})_@param <R> the result type_@return an {@link InvocationResult};public static <R> InvocationResult<R> of(R value) {_			return new InvocationResult<>(value)__		};create,a,new,link,invocation,result,instance,with,the,specified,value,param,value,the,value,may,be,code,null,param,r,the,result,type,return,an,link,invocation,result;public,static,r,invocation,result,r,of,r,value,return,new,invocation,result,value
LambdaSafe -> InvocationResult -> public R get();1517265071;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get();1517290556;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get();1517295938;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get();1517470612;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get();1518087233;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get();1518511836;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get();1519669562;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get();1520076393;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get();1520864302;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get();1525416882;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get();1525476706;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get();1532738143;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get();1533887302;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get();1533887337;Return the result of the invocation or {@code null} if the callback wasn't_suitable._@return the result of the invocation or {@code null};public R get() {_			return this.value__		};return,the,result,of,the,invocation,or,code,null,if,the,callback,wasn,t,suitable,return,the,result,of,the,invocation,or,code,null;public,r,get,return,this,value
LambdaSafe -> InvocationResult -> public R get(R fallback);1517265071;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this == NONE ? fallback : this.value)__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,fallback,this,value
LambdaSafe -> InvocationResult -> public R get(R fallback);1517290556;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this == NONE ? fallback : this.value)__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,fallback,this,value
LambdaSafe -> InvocationResult -> public R get(R fallback);1517295938;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this == NONE ? fallback : this.value)__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,fallback,this,value
LambdaSafe -> InvocationResult -> public R get(R fallback);1517470612;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this == NONE ? fallback : this.value)__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,fallback,this,value
LambdaSafe -> InvocationResult -> public R get(R fallback);1518087233;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this == NONE ? fallback : this.value)__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,fallback,this,value
LambdaSafe -> InvocationResult -> public R get(R fallback);1518511836;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this == NONE ? fallback : this.value)__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,fallback,this,value
LambdaSafe -> InvocationResult -> public R get(R fallback);1519669562;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this == NONE ? fallback : this.value)__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,fallback,this,value
LambdaSafe -> InvocationResult -> public R get(R fallback);1520076393;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this == NONE ? fallback : this.value)__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,fallback,this,value
LambdaSafe -> InvocationResult -> public R get(R fallback);1520864302;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this == NONE ? fallback : this.value)__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,fallback,this,value
LambdaSafe -> InvocationResult -> public R get(R fallback);1525416882;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this != NONE ? this.value : fallback)__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,this,value,fallback
LambdaSafe -> InvocationResult -> public R get(R fallback);1525476706;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this != NONE ? this.value : fallback)__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,this,value,fallback
LambdaSafe -> InvocationResult -> public R get(R fallback);1532738143;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this != NONE) ? this.value : fallback__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,this,value,fallback
LambdaSafe -> InvocationResult -> public R get(R fallback);1533887302;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this != NONE) ? this.value : fallback__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,this,value,fallback
LambdaSafe -> InvocationResult -> public R get(R fallback);1533887337;Return the result of the invocation or the given fallback if the callback_wasn't suitable._@param fallback the fallback to use when there is no result_@return the result of the invocation or the fallback;public R get(R fallback) {_			return (this != NONE) ? this.value : fallback__		};return,the,result,of,the,invocation,or,the,given,fallback,if,the,callback,wasn,t,suitable,param,fallback,the,fallback,to,use,when,there,is,no,result,return,the,result,of,the,invocation,or,the,fallback;public,r,get,r,fallback,return,this,none,this,value,fallback
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1517265071;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1517290556;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1517295938;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1517470612;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1518087233;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1518511836;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1519669562;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1520076393;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1520864302;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1525416882;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1525476706;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1532738143;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1533887302;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> Callback -> public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker);1533887337;Invoke the callback instance where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the result of the invocation (may be {@link InvocationResult#noResult}_if the callback was not invoked);public <R> InvocationResult<R> invokeAnd(Function<C, R> invoker) {_			return invoke(this.callbackInstance,_					() -> invoker.apply(this.callbackInstance))__		};invoke,the,callback,instance,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,result,of,the,invocation,may,be,link,invocation,result,no,result,if,the,callback,was,not,invoked;public,r,invocation,result,r,invoke,and,function,c,r,invoker,return,invoke,this,callback,instance,invoker,apply,this,callback,instance
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1517265071;Use a specific filter to determine when a callback should apply. If not_explicit filter is set filter will be attempted using the generic type on the_callback type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,not,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1517290556;Use a specific filter to determine when a callback should apply. If not_explicit filter is set filter will be attempted using the generic type on the_callback type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,not,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1517295938;Use a specific filter to determine when a callback should apply. If not_explicit filter is set filter will be attempted using the generic type on the_callback type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,not,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1517470612;Use a specific filter to determine when a callback should apply. If not_explicit filter is set filter will be attempted using the generic type on the_callback type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,not,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1518087233;Use a specific filter to determine when a callback should apply. If not_explicit filter is set filter will be attempted using the generic type on the_callback type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,not,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1518511836;Use a specific filter to determine when a callback should apply. If not_explicit filter is set filter will be attempted using the generic type on the_callback type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,not,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1519669562;Use a specific filter to determine when a callback should apply. If not_explicit filter is set filter will be attempted using the generic type on the_callback type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,not,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1520076393;Use a specific filter to determine when a callback should apply. If no_explicit filter is set filter will be attempted using the generic type on the_callback type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,no,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1520864302;Use a specific filter to determine when a callback should apply. If no_explicit filter is set filter will be attempted using the generic type on the_callback type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,no,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1525416882;Use a specific filter to determine when a callback should apply. If no explicit_filter is set filter will be attempted using the generic type on the callback_type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,no,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1525476706;Use a specific filter to determine when a callback should apply. If no explicit_filter is set filter will be attempted using the generic type on the callback_type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,no,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1532738143;Use a specific filter to determine when a callback should apply. If no explicit_filter is set filter will be attempted using the generic type on the callback_type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,no,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1533887302;Use a specific filter to determine when a callback should apply. If no explicit_filter is set filter will be attempted using the generic type on the callback_type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,no,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withFilter(Filter<C, A> filter);1533887337;Use a specific filter to determine when a callback should apply. If no explicit_filter is set filter will be attempted using the generic type on the callback_type._@param filter the filter to use_@return this instance;public SELF withFilter(Filter<C, A> filter) {_			Assert.notNull(filter, "Filter must not be null")__			this.filter = filter__			return self()__		};use,a,specific,filter,to,determine,when,a,callback,should,apply,if,no,explicit,filter,is,set,filter,will,be,attempted,using,the,generic,type,on,the,callback,type,param,filter,the,filter,to,use,return,this,instance;public,self,with,filter,filter,c,a,filter,assert,not,null,filter,filter,must,not,be,null,this,filter,filter,return,self
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1517265071;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1517290556;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1517295938;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1517470612;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1518087233;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1518511836;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1519669562;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1520076393;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1520864302;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1525416882;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1525476706;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1532738143;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1533887302;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> Callback -> public void invoke(Consumer<C> invoker);1533887337;Invoke the callback instance where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			invoke(this.callbackInstance, () -> {_				invoker.accept(this.callbackInstance)__				return null__			})__		};invoke,the,callback,instance,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,invoke,this,callback,instance,invoker,accept,this,callback,instance,return,null
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1517265071;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1517290556;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1517295938;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1517470612;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1518087233;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1518511836;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1519669562;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1520076393;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1520864302;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1525416882;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1525476706;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1532738143;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1533887302;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> InvocationResult -> @SuppressWarnings("unchecked") 		public static <R> InvocationResult<R> noResult();1533887337;Return an {@link InvocationResult} instance representing no result._@param <R> the result type_@return an {@link InvocationResult};@SuppressWarnings("unchecked")_		public static <R> InvocationResult<R> noResult() {_			return (InvocationResult<R>) NONE__		};return,an,link,invocation,result,instance,representing,no,result,param,r,the,result,type,return,an,link,invocation,result;suppress,warnings,unchecked,public,static,r,invocation,result,r,no,result,return,invocation,result,r,none
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1517265071;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1517290556;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1517295938;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1517470612;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1518087233;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1518511836;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1519669562;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1520076393;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1520864302;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1525416882;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1525476706;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1532738143;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1533887302;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> Filter -> boolean match(Class<C> callbackType, C callbackInstance, A argument, 				Object[] additionalArguments)_;1533887337;Determine if the given callback matches and should be invoked._@param callbackType the callback type (the functional interface)_@param callbackInstance the callback instance (the implementation)_@param argument the primary argument_@param additionalArguments any additional arguments_@return if the callback matches and should be invoked;boolean match(Class<C> callbackType, C callbackInstance, A argument,_				Object[] additionalArguments)_;determine,if,the,given,callback,matches,and,should,be,invoked,param,callback,type,the,callback,type,the,functional,interface,param,callback,instance,the,callback,instance,the,implementation,param,argument,the,primary,argument,param,additional,arguments,any,additional,arguments,return,if,the,callback,matches,and,should,be,invoked;boolean,match,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1517265071;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional argument passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<C, A>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,argument,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,c,a,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1517290556;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional argument passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,argument,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1517295938;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional argument passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,argument,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1517470612;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional argument passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,argument,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1518087233;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional argument passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,argument,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1518511836;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional argument passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,argument,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1519669562;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional argument passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,argument,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1520076393;Start a call to callback instances, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional arguments passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,callback,instances,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,arguments,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1520864302;Start a call to callback instances, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional arguments passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,callback,instances,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,arguments,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1525416882;Start a call to callback instances, dealing with common generic type concerns and_exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional arguments passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,callback,instances,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,arguments,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1525476706;Start a call to callback instances, dealing with common generic type concerns and_exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional arguments passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,callback,instances,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,arguments,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1532738143;Start a call to callback instances, dealing with common generic type concerns and_exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional arguments passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,callback,instances,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,arguments,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1533887302;Start a call to callback instances, dealing with common generic type concerns and_exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional arguments passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,callback,instances,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,arguments,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType, 			Collection<? extends C> callbackInstances, A argument, 			Object... additionalArguments);1533887337;Start a call to callback instances, dealing with common generic type concerns and_exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstances the callback instances (elements may be lambdas)_@param argument the primary argument passed to the callbacks_@param additionalArguments any additional arguments passed to the callbacks_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callbacks} instance that can be invoked.;public static <C, A> Callbacks<C, A> callbacks(Class<C> callbackType,_			Collection<? extends C> callbackInstances, A argument,_			Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstances, "CallbackInstances must not be null")__		return new Callbacks<>(callbackType, callbackInstances, argument,_				additionalArguments)__	};start,a,call,to,callback,instances,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instances,the,callback,instances,elements,may,be,lambdas,param,argument,the,primary,argument,passed,to,the,callbacks,param,additional,arguments,any,additional,arguments,passed,to,the,callbacks,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callbacks,instance,that,can,be,invoked;public,static,c,a,callbacks,c,a,callbacks,class,c,callback,type,collection,extends,c,callback,instances,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instances,callback,instances,must,not,be,null,return,new,callbacks,callback,type,callback,instances,argument,additional,arguments
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1517265071;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1517290556;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1517295938;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1517470612;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1518087233;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1518511836;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1519669562;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1520076393;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1520864302;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1525416882;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1525476706;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1532738143;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1533887302;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Log logger);1533887337;Use the specified logger to report any lambda failures._@param logger the logger to use_@return this instance;public SELF withLogger(Log logger) {_			Assert.notNull(logger, "Logger must not be null")__			this.logger = logger__			return self()__		};use,the,specified,logger,to,report,any,lambda,failures,param,logger,the,logger,to,use,return,this,instance;public,self,with,logger,log,logger,assert,not,null,logger,logger,must,not,be,null,this,logger,logger,return,self
LambdaSafe -> InvocationResult -> public boolean hasResult();1517265071;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> InvocationResult -> public boolean hasResult();1517290556;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> InvocationResult -> public boolean hasResult();1517295938;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> InvocationResult -> public boolean hasResult();1517470612;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> InvocationResult -> public boolean hasResult();1518087233;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> InvocationResult -> public boolean hasResult();1518511836;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> InvocationResult -> public boolean hasResult();1519669562;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> InvocationResult -> public boolean hasResult();1520076393;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> InvocationResult -> public boolean hasResult();1520864302;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> InvocationResult -> public boolean hasResult();1525416882;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> InvocationResult -> public boolean hasResult();1525476706;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> InvocationResult -> public boolean hasResult();1532738143;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> InvocationResult -> public boolean hasResult();1533887302;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> InvocationResult -> public boolean hasResult();1533887337;Return true if a result in present._@return if a result is present;public boolean hasResult() {_			return this != NONE__		};return,true,if,a,result,in,present,return,if,a,result,is,present;public,boolean,has,result,return,this,none
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1517265071;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1517290556;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1517295938;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1517470612;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1518087233;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1518511836;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1519669562;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1520076393;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1520864302;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1525416882;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1525476706;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1532738143;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1533887302;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> LambdaSafeCallback -> public SELF withLogger(Class<?> loggerSource);1533887337;Use the specified logger source to report any lambda failures._@param loggerSource the logger source to use_@return this instance;public SELF withLogger(Class<?> loggerSource) {_			return withLogger(LogFactory.getLog(loggerSource))__		};use,the,specified,logger,source,to,report,any,lambda,failures,param,logger,source,the,logger,source,to,use,return,this,instance;public,self,with,logger,class,logger,source,return,with,logger,log,factory,get,log,logger,source
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1517265071;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional argument passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,argument,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1517290556;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional argument passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,argument,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1517295938;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional argument passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,argument,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1517470612;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional argument passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,argument,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1518087233;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional argument passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,argument,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1518511836;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional argument passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,argument,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1519669562;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional argument passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,argument,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1520076393;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional arguments passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,arguments,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1520864302;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional arguments passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,arguments,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1525416882;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional arguments passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,arguments,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1525476706;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional arguments passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,arguments,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1532738143;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional arguments passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,arguments,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1533887302;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional arguments passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,arguments,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> public static <C, A> Callback<C, A> callback(Class<C> callbackType, 			C callbackInstance, A argument, Object... additionalArguments);1533887337;Start a call to a single callback instance, dealing with common generic type_concerns and exceptions._@param callbackType the callback type (a {@link FunctionalInterface functional_interface})_@param callbackInstance the callback instance (may be a lambda)_@param argument the primary argument passed to the callback_@param additionalArguments any additional arguments passed to the callback_@param <C> the callback type_@param <A> the primary argument type_@return a {@link Callback} instance that can be invoked.;public static <C, A> Callback<C, A> callback(Class<C> callbackType,_			C callbackInstance, A argument, Object... additionalArguments) {_		Assert.notNull(callbackType, "CallbackType must not be null")__		Assert.notNull(callbackInstance, "CallbackInstance must not be null")__		return new Callback<>(callbackType, callbackInstance, argument,_				additionalArguments)__	};start,a,call,to,a,single,callback,instance,dealing,with,common,generic,type,concerns,and,exceptions,param,callback,type,the,callback,type,a,link,functional,interface,functional,interface,param,callback,instance,the,callback,instance,may,be,a,lambda,param,argument,the,primary,argument,passed,to,the,callback,param,additional,arguments,any,additional,arguments,passed,to,the,callback,param,c,the,callback,type,param,a,the,primary,argument,type,return,a,link,callback,instance,that,can,be,invoked;public,static,c,a,callback,c,a,callback,class,c,callback,type,c,callback,instance,a,argument,object,additional,arguments,assert,not,null,callback,type,callback,type,must,not,be,null,assert,not,null,callback,instance,callback,instance,must,not,be,null,return,new,callback,callback,type,callback,instance,argument,additional,arguments
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1517265071;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1517290556;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1517295938;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1517470612;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1518087233;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1518511836;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1519669562;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1520076393;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1520864302;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1525416882;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1525476706;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1532738143;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1533887302;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Filter -> static <C, A> Filter<C, A> allowAll();1533887337;Return a {@link Filter} that allows all callbacks to be invoked._@param <C> the callback type_@param <A> the primary argument type_@return an "allow all" filter;static <C, A> Filter<C, A> allowAll() {_			return (callbackType, callbackInstance, argument,_					additionalArguments) -> true__		};return,a,link,filter,that,allows,all,callbacks,to,be,invoked,param,c,the,callback,type,param,a,the,primary,argument,type,return,an,allow,all,filter;static,c,a,filter,c,a,allow,all,return,callback,type,callback,instance,argument,additional,arguments,true
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1517265071;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			Function<C, InvocationResult<Void>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> {_						invoker.accept(callbackInstance)__						return null__					})__			this.callbackInstances.stream().map(mapper).forEach((result) -> {_			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,function,c,invocation,result,void,mapper,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null,this,callback,instances,stream,map,mapper,for,each,result
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1517290556;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			Function<C, InvocationResult<Void>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> {_						invoker.accept(callbackInstance)__						return null__					})__			this.callbackInstances.stream().map(mapper).forEach((result) -> {_			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,function,c,invocation,result,void,mapper,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null,this,callback,instances,stream,map,mapper,for,each,result
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1517295938;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			Function<C, InvocationResult<Void>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> {_						invoker.accept(callbackInstance)__						return null__					})__			this.callbackInstances.stream().map(mapper).forEach((result) -> {_			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,function,c,invocation,result,void,mapper,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null,this,callback,instances,stream,map,mapper,for,each,result
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1517470612;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			Function<C, InvocationResult<Void>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> {_						invoker.accept(callbackInstance)__						return null__					})__			this.callbackInstances.stream().map(mapper).forEach((result) -> {_			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,function,c,invocation,result,void,mapper,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null,this,callback,instances,stream,map,mapper,for,each,result
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1518087233;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			Function<C, InvocationResult<Void>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> {_						invoker.accept(callbackInstance)__						return null__					})__			this.callbackInstances.stream().map(mapper).forEach((result) -> {_			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,function,c,invocation,result,void,mapper,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null,this,callback,instances,stream,map,mapper,for,each,result
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1518511836;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			Function<C, InvocationResult<Void>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> {_						invoker.accept(callbackInstance)__						return null__					})__			this.callbackInstances.stream().map(mapper).forEach((result) -> {_			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,function,c,invocation,result,void,mapper,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null,this,callback,instances,stream,map,mapper,for,each,result
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1519669562;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			Function<C, InvocationResult<Void>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> {_						invoker.accept(callbackInstance)__						return null__					})__			this.callbackInstances.stream().map(mapper).forEach((result) -> {_			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,function,c,invocation,result,void,mapper,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null,this,callback,instances,stream,map,mapper,for,each,result
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1520076393;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			Function<C, InvocationResult<Void>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> {_						invoker.accept(callbackInstance)__						return null__					})__			this.callbackInstances.stream().map(mapper).forEach((result) -> {_			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,function,c,invocation,result,void,mapper,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null,this,callback,instances,stream,map,mapper,for,each,result
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1520864302;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			Function<C, InvocationResult<Void>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> {_						invoker.accept(callbackInstance)__						return null__					})__			this.callbackInstances.stream().map(mapper).forEach((result) -> {_			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,function,c,invocation,result,void,mapper,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null,this,callback,instances,stream,map,mapper,for,each,result
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1525416882;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			this.callbackInstances.forEach((callbackInstance) -> {_				invoke(callbackInstance, () -> {_					invoker.accept(callbackInstance)__					return null__				})__			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,this,callback,instances,for,each,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1525476706;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			this.callbackInstances.forEach((callbackInstance) -> {_				invoke(callbackInstance, () -> {_					invoker.accept(callbackInstance)__					return null__				})__			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,this,callback,instances,for,each,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1532738143;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			this.callbackInstances.forEach((callbackInstance) -> {_				invoke(callbackInstance, () -> {_					invoker.accept(callbackInstance)__					return null__				})__			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,this,callback,instances,for,each,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1533887302;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			this.callbackInstances.forEach((callbackInstance) -> {_				invoke(callbackInstance, () -> {_					invoker.accept(callbackInstance)__					return null__				})__			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,this,callback,instances,for,each,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null
LambdaSafe -> Callbacks -> public void invoke(Consumer<C> invoker);1533887337;Invoke the callback instances where the callback method returns void._@param invoker the invoker used to invoke the callback;public void invoke(Consumer<C> invoker) {_			this.callbackInstances.forEach((callbackInstance) -> {_				invoke(callbackInstance, () -> {_					invoker.accept(callbackInstance)__					return null__				})__			})__		};invoke,the,callback,instances,where,the,callback,method,returns,void,param,invoker,the,invoker,used,to,invoke,the,callback;public,void,invoke,consumer,c,invoker,this,callback,instances,for,each,callback,instance,invoke,callback,instance,invoker,accept,callback,instance,return,null
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1517265071;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if not callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,not,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1517290556;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if not callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,not,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1517295938;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if not callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,not,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1517470612;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if not callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,not,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1518087233;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if not callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,not,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1518511836;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if not callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,not,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1519669562;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if not callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,not,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1520076393;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if no callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,no,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1520864302;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if no callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,no,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1525416882;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if no callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,no,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1525476706;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if no callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,no,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1532738143;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if no callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,no,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1533887302;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if no callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,no,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
LambdaSafe -> Callbacks -> public <R> Stream<R> invokeAnd(Function<C, R> invoker);1533887337;Invoke the callback instances where the callback method returns a result._@param invoker the invoker used to invoke the callback_@param <R> the result type_@return the results of the invocation (may be an empty stream if no callbacks_could be called);public <R> Stream<R> invokeAnd(Function<C, R> invoker) {_			Function<C, InvocationResult<R>> mapper = (callbackInstance) -> invoke(_					callbackInstance, () -> invoker.apply(callbackInstance))__			return this.callbackInstances.stream().map(mapper)_					.filter(InvocationResult::hasResult).map(InvocationResult::get)__		};invoke,the,callback,instances,where,the,callback,method,returns,a,result,param,invoker,the,invoker,used,to,invoke,the,callback,param,r,the,result,type,return,the,results,of,the,invocation,may,be,an,empty,stream,if,no,callbacks,could,be,called;public,r,stream,r,invoke,and,function,c,r,invoker,function,c,invocation,result,r,mapper,callback,instance,invoke,callback,instance,invoker,apply,callback,instance,return,this,callback,instances,stream,map,mapper,filter,invocation,result,has,result,map,invocation,result,get
