commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static AnsiColor getClosest(Color color) {     return getClosest(new LabColor(color)). }
false;private,static;1;12;;private static AnsiColor getClosest(LabColor color) {     AnsiColor result = null.     double resultDistance = Float.MAX_VALUE.     for (Entry<AnsiColor, LabColor> entry : ANSI_COLOR_MAP.entrySet()) {         double distance = color.getDistance(entry.getValue()).         if (result == null || distance < resultDistance) {             resultDistance = distance.             result = entry.getKey().         }     }     return result. }
false;private;1;3;;private float[] fromXyz(float[] xyz) {     return fromXyz(xyz[0], xyz[1], xyz[2]). }
false;private;3;6;;private float[] fromXyz(float x, float y, float z) {     double l = (f(y) - 16.0) * 116.0.     double a = (f(x) - f(y)) * 500.0.     double b = (f(y) - f(z)) * 200.0.     return new float[] { (float) l, (float) a, (float) b }. }
false;private;1;4;;private double f(double t) {     return (t > (216.0 / 24389.0)) ? Math.cbrt(t) : (1.0 / 3.0) * Math.pow(29.0 / 6.0, 2) * t + (4.0 / 29.0). }
true;public;1;12;// See http://en.wikipedia.org/wiki/Color_difference#CIE94 ;// See http://en.wikipedia.org/wiki/Color_difference#CIE94 public double getDistance(LabColor other) {     double c1 = Math.sqrt(this.a * this.a + this.b * this.b).     double deltaC = c1 - Math.sqrt(other.a * other.a + other.b * other.b).     double deltaA = this.a - other.a.     double deltaB = this.b - other.b.     double deltaH = Math.sqrt(Math.max(0.0, deltaA * deltaA + deltaB * deltaB - deltaC * deltaC)).     return Math.sqrt(Math.max(0.0, Math.pow((this.l - other.l) / (1.0), 2) + Math.pow(deltaC / (1 + 0.045 * c1), 2) + Math.pow(deltaH / (1 + 0.015 * c1), 2.0))). }
