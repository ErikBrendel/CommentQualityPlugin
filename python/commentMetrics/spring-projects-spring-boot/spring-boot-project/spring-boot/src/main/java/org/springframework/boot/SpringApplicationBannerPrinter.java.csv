commented;modifiers;parameterAmount;loc;comment;code
false;public;3;10;;public Banner print(Environment environment, Class<?> sourceClass, Log logger) {     Banner banner = getBanner(environment).     try {         logger.info(createStringFromBanner(banner, environment, sourceClass)).     } catch (UnsupportedEncodingException ex) {         logger.warn("Failed to create String for banner", ex).     }     return new PrintedBanner(banner, sourceClass). }
false;public;3;5;;public Banner print(Environment environment, Class<?> sourceClass, PrintStream out) {     Banner banner = getBanner(environment).     banner.printBanner(environment, sourceClass, out).     return new PrintedBanner(banner, sourceClass). }
false;private;1;12;;private Banner getBanner(Environment environment) {     Banners banners = new Banners().     banners.addIfNotNull(getImageBanner(environment)).     banners.addIfNotNull(getTextBanner(environment)).     if (banners.hasAtLeastOneBanner()) {         return banners.     }     if (this.fallbackBanner != null) {         return this.fallbackBanner.     }     return DEFAULT_BANNER. }
false;private;1;9;;private Banner getTextBanner(Environment environment) {     String location = environment.getProperty(BANNER_LOCATION_PROPERTY, DEFAULT_BANNER_LOCATION).     Resource resource = this.resourceLoader.getResource(location).     if (resource.exists()) {         return new ResourceBanner(resource).     }     return null. }
false;private;1;14;;private Banner getImageBanner(Environment environment) {     String location = environment.getProperty(BANNER_IMAGE_LOCATION_PROPERTY).     if (StringUtils.hasLength(location)) {         Resource resource = this.resourceLoader.getResource(location).         return resource.exists() ? new ImageBanner(resource) : null.     }     for (String ext : IMAGE_EXTENSION) {         Resource resource = this.resourceLoader.getResource("banner." + ext).         if (resource.exists()) {             return new ImageBanner(resource).         }     }     return null. }
false;private;3;7;;private String createStringFromBanner(Banner banner, Environment environment, Class<?> mainApplicationClass) throws UnsupportedEncodingException {     ByteArrayOutputStream baos = new ByteArrayOutputStream().     banner.printBanner(environment, mainApplicationClass, new PrintStream(baos)).     String charset = environment.getProperty("spring.banner.charset", "UTF-8").     return baos.toString(charset). }
false;public;1;5;;public void addIfNotNull(Banner banner) {     if (banner != null) {         this.banners.add(banner).     } }
false;public;0;3;;public boolean hasAtLeastOneBanner() {     return !this.banners.isEmpty(). }
false;public;3;7;;@Override public void printBanner(Environment environment, Class<?> sourceClass, PrintStream out) {     for (Banner banner : this.banners) {         banner.printBanner(environment, sourceClass, out).     } }
false;public;3;6;;@Override public void printBanner(Environment environment, Class<?> sourceClass, PrintStream out) {     sourceClass = (sourceClass != null) ? sourceClass : this.sourceClass.     this.banner.printBanner(environment, sourceClass, out). }
