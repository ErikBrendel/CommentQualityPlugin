commented;modifiers;parameterAmount;loc;comment;code
true;static;2;11;/**  * Search the given iterable using a predicate to determine if content is  * {@link #PRESENT} or {@link #ABSENT}.  * @param <T> the data type  * @param source the source iterable to search  * @param predicate the predicate used to test for presence  * @return {@link #PRESENT} if the iterable contains a matching item, otherwise  * {@link #ABSENT}.  */ ;/**  * Search the given iterable using a predicate to determine if content is  * {@link #PRESENT} or {@link #ABSENT}.  * @param <T> the data type  * @param source the source iterable to search  * @param predicate the predicate used to test for presence  * @return {@link #PRESENT} if the iterable contains a matching item, otherwise  * {@link #ABSENT}.  */ static <T> ConfigurationPropertyState search(Iterable<T> source, Predicate<T> predicate) {     Assert.notNull(source, "Source must not be null").     Assert.notNull(predicate, "Predicate must not be null").     for (T item : source) {         if (predicate.test(item)) {             return PRESENT.         }     }     return ABSENT. }
