# id;timestamp;commentText;codeText;commentWords;codeWords
JsonObjectDeserializer -> @SuppressWarnings({ "unchecked" }) 	protected final <D> D nullSafeValue(JsonNode jsonNode, Class<D> type);1507173536;Helper method to extract a value from the given {@code jsonNode} or return_{@code null} when the node itself is {@code null}._@param jsonNode the source node (may be {@code null})_@param type the data type. May be {@link String}, {@link Boolean}, {@link Long},_{@link Integer}, {@link Short}, {@link Double}, {@link Float}, {@link BigDecimal}_or {@link BigInteger}._@param <D> the data type requested_@return the node value or {@code null};@SuppressWarnings({ "unchecked" })_	protected final <D> D nullSafeValue(JsonNode jsonNode, Class<D> type) {_		Assert.notNull(type, "Type must not be null")__		if (jsonNode == null) {_			return null__		}_		if (type == String.class) {_			return (D) jsonNode.textValue()__		}_		if (type == Boolean.class) {_			return (D) Boolean.valueOf(jsonNode.booleanValue())__		}_		if (type == Long.class) {_			return (D) Long.valueOf(jsonNode.longValue())__		}_		if (type == Integer.class) {_			return (D) Integer.valueOf(jsonNode.intValue())__		}_		if (type == Short.class) {_			return (D) Short.valueOf(jsonNode.shortValue())__		}_		if (type == Double.class) {_			return (D) Double.valueOf(jsonNode.doubleValue())__		}_		if (type == Float.class) {_			return (D) Float.valueOf(jsonNode.floatValue())__		}_		if (type == BigDecimal.class) {_			return (D) jsonNode.decimalValue()__		}_		if (type == BigInteger.class) {_			return (D) jsonNode.bigIntegerValue()__		}_		throw new IllegalArgumentException("Unsupported value type " + type.getName())__	};helper,method,to,extract,a,value,from,the,given,code,json,node,or,return,code,null,when,the,node,itself,is,code,null,param,json,node,the,source,node,may,be,code,null,param,type,the,data,type,may,be,link,string,link,boolean,link,long,link,integer,link,short,link,double,link,float,link,big,decimal,or,link,big,integer,param,d,the,data,type,requested,return,the,node,value,or,code,null;suppress,warnings,unchecked,protected,final,d,d,null,safe,value,json,node,json,node,class,d,type,assert,not,null,type,type,must,not,be,null,if,json,node,null,return,null,if,type,string,class,return,d,json,node,text,value,if,type,boolean,class,return,d,boolean,value,of,json,node,boolean,value,if,type,long,class,return,d,long,value,of,json,node,long,value,if,type,integer,class,return,d,integer,value,of,json,node,int,value,if,type,short,class,return,d,short,value,of,json,node,short,value,if,type,double,class,return,d,double,value,of,json,node,double,value,if,type,float,class,return,d,float,value,of,json,node,float,value,if,type,big,decimal,class,return,d,json,node,decimal,value,if,type,big,integer,class,return,d,json,node,big,integer,value,throw,new,illegal,argument,exception,unsupported,value,type,type,get,name
JsonObjectDeserializer -> @SuppressWarnings({ "unchecked" }) 	protected final <D> D nullSafeValue(JsonNode jsonNode, Class<D> type);1507661773;Helper method to extract a value from the given {@code jsonNode} or return_{@code null} when the node itself is {@code null}._@param jsonNode the source node (may be {@code null})_@param type the data type. May be {@link String}, {@link Boolean}, {@link Long},_{@link Integer}, {@link Short}, {@link Double}, {@link Float}, {@link BigDecimal}_or {@link BigInteger}._@param <D> the data type requested_@return the node value or {@code null};@SuppressWarnings({ "unchecked" })_	protected final <D> D nullSafeValue(JsonNode jsonNode, Class<D> type) {_		Assert.notNull(type, "Type must not be null")__		if (jsonNode == null) {_			return null__		}_		if (type == String.class) {_			return (D) jsonNode.textValue()__		}_		if (type == Boolean.class) {_			return (D) Boolean.valueOf(jsonNode.booleanValue())__		}_		if (type == Long.class) {_			return (D) Long.valueOf(jsonNode.longValue())__		}_		if (type == Integer.class) {_			return (D) Integer.valueOf(jsonNode.intValue())__		}_		if (type == Short.class) {_			return (D) Short.valueOf(jsonNode.shortValue())__		}_		if (type == Double.class) {_			return (D) Double.valueOf(jsonNode.doubleValue())__		}_		if (type == Float.class) {_			return (D) Float.valueOf(jsonNode.floatValue())__		}_		if (type == BigDecimal.class) {_			return (D) jsonNode.decimalValue()__		}_		if (type == BigInteger.class) {_			return (D) jsonNode.bigIntegerValue()__		}_		throw new IllegalArgumentException("Unsupported value type " + type.getName())__	};helper,method,to,extract,a,value,from,the,given,code,json,node,or,return,code,null,when,the,node,itself,is,code,null,param,json,node,the,source,node,may,be,code,null,param,type,the,data,type,may,be,link,string,link,boolean,link,long,link,integer,link,short,link,double,link,float,link,big,decimal,or,link,big,integer,param,d,the,data,type,requested,return,the,node,value,or,code,null;suppress,warnings,unchecked,protected,final,d,d,null,safe,value,json,node,json,node,class,d,type,assert,not,null,type,type,must,not,be,null,if,json,node,null,return,null,if,type,string,class,return,d,json,node,text,value,if,type,boolean,class,return,d,boolean,value,of,json,node,boolean,value,if,type,long,class,return,d,long,value,of,json,node,long,value,if,type,integer,class,return,d,integer,value,of,json,node,int,value,if,type,short,class,return,d,short,value,of,json,node,short,value,if,type,double,class,return,d,double,value,of,json,node,double,value,if,type,float,class,return,d,float,value,of,json,node,float,value,if,type,big,decimal,class,return,d,json,node,decimal,value,if,type,big,integer,class,return,d,json,node,big,integer,value,throw,new,illegal,argument,exception,unsupported,value,type,type,get,name
JsonObjectDeserializer -> @SuppressWarnings({ "unchecked" }) 	protected final <D> D nullSafeValue(JsonNode jsonNode, Class<D> type);1508247426;Helper method to extract a value from the given {@code jsonNode} or return_{@code null} when the node itself is {@code null}._@param jsonNode the source node (may be {@code null})_@param type the data type. May be {@link String}, {@link Boolean}, {@link Long},_{@link Integer}, {@link Short}, {@link Double}, {@link Float}, {@link BigDecimal}_or {@link BigInteger}._@param <D> the data type requested_@return the node value or {@code null};@SuppressWarnings({ "unchecked" })_	protected final <D> D nullSafeValue(JsonNode jsonNode, Class<D> type) {_		Assert.notNull(type, "Type must not be null")__		if (jsonNode == null) {_			return null__		}_		if (type == String.class) {_			return (D) jsonNode.textValue()__		}_		if (type == Boolean.class) {_			return (D) Boolean.valueOf(jsonNode.booleanValue())__		}_		if (type == Long.class) {_			return (D) Long.valueOf(jsonNode.longValue())__		}_		if (type == Integer.class) {_			return (D) Integer.valueOf(jsonNode.intValue())__		}_		if (type == Short.class) {_			return (D) Short.valueOf(jsonNode.shortValue())__		}_		if (type == Double.class) {_			return (D) Double.valueOf(jsonNode.doubleValue())__		}_		if (type == Float.class) {_			return (D) Float.valueOf(jsonNode.floatValue())__		}_		if (type == BigDecimal.class) {_			return (D) jsonNode.decimalValue()__		}_		if (type == BigInteger.class) {_			return (D) jsonNode.bigIntegerValue()__		}_		throw new IllegalArgumentException("Unsupported value type " + type.getName())__	};helper,method,to,extract,a,value,from,the,given,code,json,node,or,return,code,null,when,the,node,itself,is,code,null,param,json,node,the,source,node,may,be,code,null,param,type,the,data,type,may,be,link,string,link,boolean,link,long,link,integer,link,short,link,double,link,float,link,big,decimal,or,link,big,integer,param,d,the,data,type,requested,return,the,node,value,or,code,null;suppress,warnings,unchecked,protected,final,d,d,null,safe,value,json,node,json,node,class,d,type,assert,not,null,type,type,must,not,be,null,if,json,node,null,return,null,if,type,string,class,return,d,json,node,text,value,if,type,boolean,class,return,d,boolean,value,of,json,node,boolean,value,if,type,long,class,return,d,long,value,of,json,node,long,value,if,type,integer,class,return,d,integer,value,of,json,node,int,value,if,type,short,class,return,d,short,value,of,json,node,short,value,if,type,double,class,return,d,double,value,of,json,node,double,value,if,type,float,class,return,d,float,value,of,json,node,float,value,if,type,big,decimal,class,return,d,json,node,decimal,value,if,type,big,integer,class,return,d,json,node,big,integer,value,throw,new,illegal,argument,exception,unsupported,value,type,type,get,name
JsonObjectDeserializer -> @SuppressWarnings({ "unchecked" }) 	protected final <D> D nullSafeValue(JsonNode jsonNode, Class<D> type);1518087233;Helper method to extract a value from the given {@code jsonNode} or return_{@code null} when the node itself is {@code null}._@param jsonNode the source node (may be {@code null})_@param type the data type. May be {@link String}, {@link Boolean}, {@link Long},_{@link Integer}, {@link Short}, {@link Double}, {@link Float}, {@link BigDecimal}_or {@link BigInteger}._@param <D> the data type requested_@return the node value or {@code null};@SuppressWarnings({ "unchecked" })_	protected final <D> D nullSafeValue(JsonNode jsonNode, Class<D> type) {_		Assert.notNull(type, "Type must not be null")__		if (jsonNode == null) {_			return null__		}_		if (type == String.class) {_			return (D) jsonNode.textValue()__		}_		if (type == Boolean.class) {_			return (D) Boolean.valueOf(jsonNode.booleanValue())__		}_		if (type == Long.class) {_			return (D) Long.valueOf(jsonNode.longValue())__		}_		if (type == Integer.class) {_			return (D) Integer.valueOf(jsonNode.intValue())__		}_		if (type == Short.class) {_			return (D) Short.valueOf(jsonNode.shortValue())__		}_		if (type == Double.class) {_			return (D) Double.valueOf(jsonNode.doubleValue())__		}_		if (type == Float.class) {_			return (D) Float.valueOf(jsonNode.floatValue())__		}_		if (type == BigDecimal.class) {_			return (D) jsonNode.decimalValue()__		}_		if (type == BigInteger.class) {_			return (D) jsonNode.bigIntegerValue()__		}_		throw new IllegalArgumentException("Unsupported value type " + type.getName())__	};helper,method,to,extract,a,value,from,the,given,code,json,node,or,return,code,null,when,the,node,itself,is,code,null,param,json,node,the,source,node,may,be,code,null,param,type,the,data,type,may,be,link,string,link,boolean,link,long,link,integer,link,short,link,double,link,float,link,big,decimal,or,link,big,integer,param,d,the,data,type,requested,return,the,node,value,or,code,null;suppress,warnings,unchecked,protected,final,d,d,null,safe,value,json,node,json,node,class,d,type,assert,not,null,type,type,must,not,be,null,if,json,node,null,return,null,if,type,string,class,return,d,json,node,text,value,if,type,boolean,class,return,d,boolean,value,of,json,node,boolean,value,if,type,long,class,return,d,long,value,of,json,node,long,value,if,type,integer,class,return,d,integer,value,of,json,node,int,value,if,type,short,class,return,d,short,value,of,json,node,short,value,if,type,double,class,return,d,double,value,of,json,node,double,value,if,type,float,class,return,d,float,value,of,json,node,float,value,if,type,big,decimal,class,return,d,json,node,decimal,value,if,type,big,integer,class,return,d,json,node,big,integer,value,throw,new,illegal,argument,exception,unsupported,value,type,type,get,name
JsonObjectDeserializer -> protected final JsonNode getRequiredNode(JsonNode tree, String fieldName);1507173536;Helper method to return a {@link JsonNode} from the tree._@param tree the source tree_@param fieldName the field name to extract_@return the {@link JsonNode};protected final JsonNode getRequiredNode(JsonNode tree, String fieldName) {_		Assert.notNull(tree, "Tree must not be null")__		JsonNode node = tree.get(fieldName)__		Assert.state(node != null && !(node instanceof NullNode),_				"Missing JSON field '" + fieldName + "'")__		return node__	};helper,method,to,return,a,link,json,node,from,the,tree,param,tree,the,source,tree,param,field,name,the,field,name,to,extract,return,the,link,json,node;protected,final,json,node,get,required,node,json,node,tree,string,field,name,assert,not,null,tree,tree,must,not,be,null,json,node,node,tree,get,field,name,assert,state,node,null,node,instanceof,null,node,missing,json,field,field,name,return,node
JsonObjectDeserializer -> protected final JsonNode getRequiredNode(JsonNode tree, String fieldName);1507661773;Helper method to return a {@link JsonNode} from the tree._@param tree the source tree_@param fieldName the field name to extract_@return the {@link JsonNode};protected final JsonNode getRequiredNode(JsonNode tree, String fieldName) {_		Assert.notNull(tree, "Tree must not be null")__		JsonNode node = tree.get(fieldName)__		Assert.state(node != null && !(node instanceof NullNode),_				"Missing JSON field '" + fieldName + "'")__		return node__	};helper,method,to,return,a,link,json,node,from,the,tree,param,tree,the,source,tree,param,field,name,the,field,name,to,extract,return,the,link,json,node;protected,final,json,node,get,required,node,json,node,tree,string,field,name,assert,not,null,tree,tree,must,not,be,null,json,node,node,tree,get,field,name,assert,state,node,null,node,instanceof,null,node,missing,json,field,field,name,return,node
JsonObjectDeserializer -> protected final JsonNode getRequiredNode(JsonNode tree, String fieldName);1508247426;Helper method to return a {@link JsonNode} from the tree._@param tree the source tree_@param fieldName the field name to extract_@return the {@link JsonNode};protected final JsonNode getRequiredNode(JsonNode tree, String fieldName) {_		Assert.notNull(tree, "Tree must not be null")__		JsonNode node = tree.get(fieldName)__		Assert.state(node != null && !(node instanceof NullNode),_				() -> "Missing JSON field '" + fieldName + "'")__		return node__	};helper,method,to,return,a,link,json,node,from,the,tree,param,tree,the,source,tree,param,field,name,the,field,name,to,extract,return,the,link,json,node;protected,final,json,node,get,required,node,json,node,tree,string,field,name,assert,not,null,tree,tree,must,not,be,null,json,node,node,tree,get,field,name,assert,state,node,null,node,instanceof,null,node,missing,json,field,field,name,return,node
JsonObjectDeserializer -> protected final JsonNode getRequiredNode(JsonNode tree, String fieldName);1518087233;Helper method to return a {@link JsonNode} from the tree._@param tree the source tree_@param fieldName the field name to extract_@return the {@link JsonNode};protected final JsonNode getRequiredNode(JsonNode tree, String fieldName) {_		Assert.notNull(tree, "Tree must not be null")__		JsonNode node = tree.get(fieldName)__		Assert.state(node != null && !(node instanceof NullNode),_				() -> "Missing JSON field '" + fieldName + "'")__		return node__	};helper,method,to,return,a,link,json,node,from,the,tree,param,tree,the,source,tree,param,field,name,the,field,name,to,extract,return,the,link,json,node;protected,final,json,node,get,required,node,json,node,tree,string,field,name,assert,not,null,tree,tree,must,not,be,null,json,node,node,tree,get,field,name,assert,state,node,null,node,instanceof,null,node,missing,json,field,field,name,return,node
JsonObjectDeserializer -> protected abstract T deserializeObject(JsonParser jsonParser, 			DeserializationContext context, ObjectCodec codec, JsonNode tree) 					throws IOException_;1507173536;Deserialize JSON content into the value type this serializer handles._@param jsonParser the source parser used for reading JSON content_@param context context that can be used to access information about this_deserialization activity_@param codec the {@link ObjectCodec} associated with the parser_@param tree deserialized JSON content as tree expressed using set of_{@link TreeNode} instances_@return the deserialized object_@throws IOException on error_@see #deserialize(JsonParser, DeserializationContext);protected abstract T deserializeObject(JsonParser jsonParser,_			DeserializationContext context, ObjectCodec codec, JsonNode tree)_					throws IOException_;deserialize,json,content,into,the,value,type,this,serializer,handles,param,json,parser,the,source,parser,used,for,reading,json,content,param,context,context,that,can,be,used,to,access,information,about,this,deserialization,activity,param,codec,the,link,object,codec,associated,with,the,parser,param,tree,deserialized,json,content,as,tree,expressed,using,set,of,link,tree,node,instances,return,the,deserialized,object,throws,ioexception,on,error,see,deserialize,json,parser,deserialization,context;protected,abstract,t,deserialize,object,json,parser,json,parser,deserialization,context,context,object,codec,codec,json,node,tree,throws,ioexception
JsonObjectDeserializer -> protected abstract T deserializeObject(JsonParser jsonParser, 			DeserializationContext context, ObjectCodec codec, JsonNode tree) 					throws IOException_;1507661773;Deserialize JSON content into the value type this serializer handles._@param jsonParser the source parser used for reading JSON content_@param context context that can be used to access information about this_deserialization activity_@param codec the {@link ObjectCodec} associated with the parser_@param tree deserialized JSON content as tree expressed using set of_{@link TreeNode} instances_@return the deserialized object_@throws IOException on error_@see #deserialize(JsonParser, DeserializationContext);protected abstract T deserializeObject(JsonParser jsonParser,_			DeserializationContext context, ObjectCodec codec, JsonNode tree)_					throws IOException_;deserialize,json,content,into,the,value,type,this,serializer,handles,param,json,parser,the,source,parser,used,for,reading,json,content,param,context,context,that,can,be,used,to,access,information,about,this,deserialization,activity,param,codec,the,link,object,codec,associated,with,the,parser,param,tree,deserialized,json,content,as,tree,expressed,using,set,of,link,tree,node,instances,return,the,deserialized,object,throws,ioexception,on,error,see,deserialize,json,parser,deserialization,context;protected,abstract,t,deserialize,object,json,parser,json,parser,deserialization,context,context,object,codec,codec,json,node,tree,throws,ioexception
JsonObjectDeserializer -> protected abstract T deserializeObject(JsonParser jsonParser, 			DeserializationContext context, ObjectCodec codec, JsonNode tree) 					throws IOException_;1508247426;Deserialize JSON content into the value type this serializer handles._@param jsonParser the source parser used for reading JSON content_@param context context that can be used to access information about this_deserialization activity_@param codec the {@link ObjectCodec} associated with the parser_@param tree deserialized JSON content as tree expressed using set of_{@link TreeNode} instances_@return the deserialized object_@throws IOException on error_@see #deserialize(JsonParser, DeserializationContext);protected abstract T deserializeObject(JsonParser jsonParser,_			DeserializationContext context, ObjectCodec codec, JsonNode tree)_					throws IOException_;deserialize,json,content,into,the,value,type,this,serializer,handles,param,json,parser,the,source,parser,used,for,reading,json,content,param,context,context,that,can,be,used,to,access,information,about,this,deserialization,activity,param,codec,the,link,object,codec,associated,with,the,parser,param,tree,deserialized,json,content,as,tree,expressed,using,set,of,link,tree,node,instances,return,the,deserialized,object,throws,ioexception,on,error,see,deserialize,json,parser,deserialization,context;protected,abstract,t,deserialize,object,json,parser,json,parser,deserialization,context,context,object,codec,codec,json,node,tree,throws,ioexception
