commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Map<String, Object> parseMap(String json) {     return parseMap(json, this::parseMapInternal). }
false;public;1;4;;@Override public List<Object> parseList(String json) {     return parseList(json, this::parseListInternal). }
false;private;1;8;;private List<Object> parseListInternal(String json) {     List<Object> list = new ArrayList<>().     json = trimLeadingCharacter(trimTrailingCharacter(json, ']'), '[').     for (String value : tokenize(json)) {         list.add(parseInternal(value)).     }     return list. }
false;private;1;24;;private Object parseInternal(String json) {     if (json.startsWith("[")) {         return parseListInternal(json).     }     if (json.startsWith("{")) {         return parseMapInternal(json).     }     if (json.startsWith("\"")) {         return trimTrailingCharacter(trimLeadingCharacter(json, '"'), '"').     }     try {         return Long.valueOf(json).     } catch (NumberFormatException ex) {     // ignore     }     try {         return Double.valueOf(json).     } catch (NumberFormatException ex) {     // ignore     }     return json. }
false;private,static;2;6;;private static String trimTrailingCharacter(String string, char c) {     if (!string.isEmpty() && string.charAt(string.length() - 1) == c) {         return string.substring(0, string.length() - 1).     }     return string. }
false;private,static;2;6;;private static String trimLeadingCharacter(String string, char c) {     if (!string.isEmpty() && string.charAt(0) == c) {         return string.substring(1).     }     return string. }
false;private;1;11;;private Map<String, Object> parseMapInternal(String json) {     Map<String, Object> map = new LinkedHashMap<>().     json = trimLeadingCharacter(trimTrailingCharacter(json, '}'), '{').     for (String pair : tokenize(json)) {         String[] values = StringUtils.trimArrayElements(StringUtils.split(pair, ":")).         String key = trimLeadingCharacter(trimTrailingCharacter(values[0], '"'), '"').         Object value = parseInternal(values[1]).         map.put(key, value).     }     return map. }
false;private;1;48;;private List<String> tokenize(String json) {     List<String> list = new ArrayList<>().     int index = 0.     int inObject = 0.     int inList = 0.     boolean inValue = false.     boolean inEscape = false.     StringBuilder build = new StringBuilder().     while (index < json.length()) {         char current = json.charAt(index).         if (inEscape) {             build.append(current).             index++.             inEscape = false.             continue.         }         if (current == '{') {             inObject++.         }         if (current == '}') {             inObject--.         }         if (current == '[') {             inList++.         }         if (current == ']') {             inList--.         }         if (current == '"') {             inValue = !inValue.         }         if (current == ',' && inObject == 0 && inList == 0 && !inValue) {             list.add(build.toString()).             build.setLength(0).         } else if (current == '\\') {             inEscape = true.         } else {             build.append(current).         }         index++.     }     if (build.length() > 0) {         list.add(build.toString()).     }     return list. }
