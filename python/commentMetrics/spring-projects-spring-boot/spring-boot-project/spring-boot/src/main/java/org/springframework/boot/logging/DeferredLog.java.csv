commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public boolean isTraceEnabled() {     synchronized (this.lines) {         return (this.destination != null) ? this.destination.isTraceEnabled() : true.     } }
false;public;0;6;;@Override public boolean isDebugEnabled() {     synchronized (this.lines) {         return (this.destination != null) ? this.destination.isDebugEnabled() : true.     } }
false;public;0;6;;@Override public boolean isInfoEnabled() {     synchronized (this.lines) {         return (this.destination != null) ? this.destination.isInfoEnabled() : true.     } }
false;public;0;6;;@Override public boolean isWarnEnabled() {     synchronized (this.lines) {         return (this.destination != null) ? this.destination.isWarnEnabled() : true.     } }
false;public;0;6;;@Override public boolean isErrorEnabled() {     synchronized (this.lines) {         return (this.destination != null) ? this.destination.isErrorEnabled() : true.     } }
false;public;0;6;;@Override public boolean isFatalEnabled() {     synchronized (this.lines) {         return (this.destination != null) ? this.destination.isFatalEnabled() : true.     } }
false;public;1;4;;@Override public void trace(Object message) {     log(LogLevel.TRACE, message, null). }
false;public;2;4;;@Override public void trace(Object message, Throwable t) {     log(LogLevel.TRACE, message, t). }
false;public;1;4;;@Override public void debug(Object message) {     log(LogLevel.DEBUG, message, null). }
false;public;2;4;;@Override public void debug(Object message, Throwable t) {     log(LogLevel.DEBUG, message, t). }
false;public;1;4;;@Override public void info(Object message) {     log(LogLevel.INFO, message, null). }
false;public;2;4;;@Override public void info(Object message, Throwable t) {     log(LogLevel.INFO, message, t). }
false;public;1;4;;@Override public void warn(Object message) {     log(LogLevel.WARN, message, null). }
false;public;2;4;;@Override public void warn(Object message, Throwable t) {     log(LogLevel.WARN, message, t). }
false;public;1;4;;@Override public void error(Object message) {     log(LogLevel.ERROR, message, null). }
false;public;2;4;;@Override public void error(Object message, Throwable t) {     log(LogLevel.ERROR, message, t). }
false;public;1;4;;@Override public void fatal(Object message) {     log(LogLevel.FATAL, message, null). }
false;public;2;4;;@Override public void fatal(Object message, Throwable t) {     log(LogLevel.FATAL, message, t). }
false;private;3;10;;private void log(LogLevel level, Object message, Throwable t) {     synchronized (this.lines) {         if (this.destination != null) {             logTo(this.destination, level, message, t).         } else {             this.lines.add(new Line(level, message, t)).         }     } }
true;public;1;3;/**  * Switch from deferred logging to immediate logging to the specified destination.  * @param destination the new log destination  * @since 2.1.0  */ ;/**  * Switch from deferred logging to immediate logging to the specified destination.  * @param destination the new log destination  * @since 2.1.0  */ public void switchTo(Class<?> destination) {     switchTo(LogFactory.getLog(destination)). }
true;public;1;6;/**  * Switch from deferred logging to immediate logging to the specified destination.  * @param destination the new log destination  * @since 2.1.0  */ ;/**  * Switch from deferred logging to immediate logging to the specified destination.  * @param destination the new log destination  * @since 2.1.0  */ public void switchTo(Log destination) {     synchronized (this.lines) {         replayTo(destination).         this.destination = destination.     } }
true;public;1;3;/**  * Replay deferred logging to the specified destination.  * @param destination the destination for the deferred log messages  */ ;/**  * Replay deferred logging to the specified destination.  * @param destination the destination for the deferred log messages  */ public void replayTo(Class<?> destination) {     replayTo(LogFactory.getLog(destination)). }
true;public;1;9;/**  * Replay deferred logging to the specified destination.  * @param destination the destination for the deferred log messages  */ ;/**  * Replay deferred logging to the specified destination.  * @param destination the destination for the deferred log messages  */ public void replayTo(Log destination) {     synchronized (this.lines) {         for (Line line : this.lines) {             logTo(destination, line.getLevel(), line.getMessage(), line.getThrowable()).         }         this.lines.clear().     } }
true;public,static;2;3;/**  * Replay from a source log to a destination log when the source is deferred.  * @param source the source logger  * @param destination the destination logger class  * @return the destination  */ ;/**  * Replay from a source log to a destination log when the source is deferred.  * @param source the source logger  * @param destination the destination logger class  * @return the destination  */ public static Log replay(Log source, Class<?> destination) {     return replay(source, LogFactory.getLog(destination)). }
true;public,static;2;6;/**  * Replay from a source log to a destination log when the source is deferred.  * @param source the source logger  * @param destination the destination logger  * @return the destination  */ ;/**  * Replay from a source log to a destination log when the source is deferred.  * @param source the source logger  * @param destination the destination logger  * @return the destination  */ public static Log replay(Log source, Log destination) {     if (source instanceof DeferredLog) {         ((DeferredLog) source).replayTo(destination).     }     return destination. }
false;private,static;4;23;;private static void logTo(Log log, LogLevel level, Object message, Throwable throwable) {     switch(level) {         case TRACE:             log.trace(message, throwable).             return.         case DEBUG:             log.debug(message, throwable).             return.         case INFO:             log.info(message, throwable).             return.         case WARN:             log.warn(message, throwable).             return.         case ERROR:             log.error(message, throwable).             return.         case FATAL:             log.fatal(message, throwable).             return.     } }
false;public;0;3;;public LogLevel getLevel() {     return this.level. }
false;public;0;3;;public Object getMessage() {     return this.message. }
false;public;0;3;;public Throwable getThrowable() {     return this.throwable. }
