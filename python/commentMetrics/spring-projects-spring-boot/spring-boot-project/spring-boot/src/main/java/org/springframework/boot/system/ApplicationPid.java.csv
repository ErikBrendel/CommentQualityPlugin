commented;modifiers;parameterAmount;loc;comment;code
false;private;0;9;;private String getPid() {     try {         String jvmName = ManagementFactory.getRuntimeMXBean().getName().         return jvmName.split("@")[0].     } catch (Throwable ex) {         return null.     } }
false;public;1;10;;@Override public boolean equals(Object obj) {     if (obj == this) {         return true.     }     if (obj != null && obj instanceof ApplicationPid) {         return ObjectUtils.nullSafeEquals(this.pid, ((ApplicationPid) obj).pid).     }     return false. }
false;public;0;4;;@Override public int hashCode() {     return ObjectUtils.nullSafeHashCode(this.pid). }
false;public;0;4;;@Override public String toString() {     return (this.pid != null) ? this.pid : "???". }
true;public;1;10;/**  * Write the PID to the specified file.  * @param file the PID file  * @throws IllegalStateException if no PID is available.  * @throws IOException if the file cannot be written  */ ;/**  * Write the PID to the specified file.  * @param file the PID file  * @throws IllegalStateException if no PID is available.  * @throws IOException if the file cannot be written  */ public void write(File file) throws IOException {     Assert.state(this.pid != null, "No PID available").     createParentFolder(file).     if (file.exists()) {         assertCanOverwrite(file).     }     try (FileWriter writer = new FileWriter(file)) {         writer.append(this.pid).     } }
false;private;1;6;;private void createParentFolder(File file) {     File parent = file.getParentFile().     if (parent != null) {         parent.mkdirs().     } }
false;private;1;5;;private void assertCanOverwrite(File file) throws IOException {     if (!file.canWrite() || !canWritePosixFile(file)) {         throw new FileNotFoundException(file.toString() + " (permission denied)").     } }
false;private;1;16;;private boolean canWritePosixFile(File file) throws IOException {     try {         Set<PosixFilePermission> permissions = Files.getPosixFilePermissions(file.toPath()).         for (PosixFilePermission permission : WRITE_PERMISSIONS) {             if (permissions.contains(permission)) {                 return true.             }         }         return false.     } catch (UnsupportedOperationException ex) {         // Assume that we can         return true.     } }
