commented;modifiers;parameterAmount;loc;comment;code
true;public;2;3;/**  * Bind the specified target {@link Class} using this binder's  * {@link ConfigurationPropertySource property sources}.  * @param name the configuration property name to bind  * @param target the target class  * @param <T> the bound type  * @return the binding result (never {@code null})  * @see #bind(ConfigurationPropertyName, Bindable, BindHandler)  */ ;/**  * Bind the specified target {@link Class} using this binder's  * {@link ConfigurationPropertySource property sources}.  * @param name the configuration property name to bind  * @param target the target class  * @param <T> the bound type  * @return the binding result (never {@code null})  * @see #bind(ConfigurationPropertyName, Bindable, BindHandler)  */ public <T> BindResult<T> bind(String name, Class<T> target) {     return bind(name, Bindable.of(target)). }
true;public;2;3;/**  * Bind the specified target {@link Bindable} using this binder's  * {@link ConfigurationPropertySource property sources}.  * @param name the configuration property name to bind  * @param target the target bindable  * @param <T> the bound type  * @return the binding result (never {@code null})  * @see #bind(ConfigurationPropertyName, Bindable, BindHandler)  */ ;/**  * Bind the specified target {@link Bindable} using this binder's  * {@link ConfigurationPropertySource property sources}.  * @param name the configuration property name to bind  * @param target the target bindable  * @param <T> the bound type  * @return the binding result (never {@code null})  * @see #bind(ConfigurationPropertyName, Bindable, BindHandler)  */ public <T> BindResult<T> bind(String name, Bindable<T> target) {     return bind(ConfigurationPropertyName.of(name), target, null). }
true;public;2;3;/**  * Bind the specified target {@link Bindable} using this binder's  * {@link ConfigurationPropertySource property sources}.  * @param name the configuration property name to bind  * @param target the target bindable  * @param <T> the bound type  * @return the binding result (never {@code null})  * @see #bind(ConfigurationPropertyName, Bindable, BindHandler)  */ ;/**  * Bind the specified target {@link Bindable} using this binder's  * {@link ConfigurationPropertySource property sources}.  * @param name the configuration property name to bind  * @param target the target bindable  * @param <T> the bound type  * @return the binding result (never {@code null})  * @see #bind(ConfigurationPropertyName, Bindable, BindHandler)  */ public <T> BindResult<T> bind(ConfigurationPropertyName name, Bindable<T> target) {     return bind(name, target, null). }
true;public;3;3;/**  * Bind the specified target {@link Bindable} using this binder's  * {@link ConfigurationPropertySource property sources}.  * @param name the configuration property name to bind  * @param target the target bindable  * @param handler the bind handler (may be {@code null})  * @param <T> the bound type  * @return the binding result (never {@code null})  */ ;/**  * Bind the specified target {@link Bindable} using this binder's  * {@link ConfigurationPropertySource property sources}.  * @param name the configuration property name to bind  * @param target the target bindable  * @param handler the bind handler (may be {@code null})  * @param <T> the bound type  * @return the binding result (never {@code null})  */ public <T> BindResult<T> bind(String name, Bindable<T> target, BindHandler handler) {     return bind(ConfigurationPropertyName.of(name), target, handler). }
true;public;3;9;/**  * Bind the specified target {@link Bindable} using this binder's  * {@link ConfigurationPropertySource property sources}.  * @param name the configuration property name to bind  * @param target the target bindable  * @param handler the bind handler (may be {@code null})  * @param <T> the bound type  * @return the binding result (never {@code null})  */ ;/**  * Bind the specified target {@link Bindable} using this binder's  * {@link ConfigurationPropertySource property sources}.  * @param name the configuration property name to bind  * @param target the target bindable  * @param handler the bind handler (may be {@code null})  * @param <T> the bound type  * @return the binding result (never {@code null})  */ public <T> BindResult<T> bind(ConfigurationPropertyName name, Bindable<T> target, BindHandler handler) {     Assert.notNull(name, "Name must not be null").     Assert.notNull(target, "Target must not be null").     handler = (handler != null) ? handler : BindHandler.DEFAULT.     Context context = new Context().     T bound = bind(name, target, handler, context, false).     return BindResult.of(bound). }
false;protected,final;5;16;;protected final <T> T bind(ConfigurationPropertyName name, Bindable<T> target, BindHandler handler, Context context, boolean allowRecursiveBinding) {     context.clearConfigurationProperty().     try {         target = handler.onStart(name, target, context).         if (target == null) {             return null.         }         Object bound = bindObject(name, target, handler, context, allowRecursiveBinding).         return handleBindResult(name, target, handler, context, bound).     } catch (Exception ex) {         return handleBindError(name, target, handler, context, ex).     } }
false;private;5;9;;private <T> T handleBindResult(ConfigurationPropertyName name, Bindable<T> target, BindHandler handler, Context context, Object result) throws Exception {     if (result != null) {         result = handler.onSuccess(name, target, context, result).         result = context.getConverter().convert(result, target).     }     handler.onFinish(name, target, context, result).     return context.getConverter().convert(result, target). }
false;private;5;13;;private <T> T handleBindError(ConfigurationPropertyName name, Bindable<T> target, BindHandler handler, Context context, Exception error) {     try {         Object result = handler.onFailure(name, target, context, error).         return context.getConverter().convert(result, target).     } catch (Exception ex) {         if (ex instanceof BindException) {             throw (BindException) ex.         }         throw new BindException(name, target, context.getConfigurationProperty(), ex).     } }
false;private;5;26;;private <T> Object bindObject(ConfigurationPropertyName name, Bindable<T> target, BindHandler handler, Context context, boolean allowRecursiveBinding) {     ConfigurationProperty property = findProperty(name, context).     if (property == null && containsNoDescendantOf(context.getSources(), name)) {         return null.     }     AggregateBinder<?> aggregateBinder = getAggregateBinder(target, context).     if (aggregateBinder != null) {         return bindAggregate(name, target, handler, context, aggregateBinder).     }     if (property != null) {         try {             return bindProperty(target, context, property).         } catch (ConverterNotFoundException ex) {             // We might still be able to bind it as a bean             Object bean = bindBean(name, target, handler, context, allowRecursiveBinding).             if (bean != null) {                 return bean.             }             throw ex.         }     }     return bindBean(name, target, handler, context, allowRecursiveBinding). }
false;private;2;13;;private AggregateBinder<?> getAggregateBinder(Bindable<?> target, Context context) {     Class<?> resolvedType = target.getType().resolve(Object.class).     if (Map.class.isAssignableFrom(resolvedType)) {         return new MapBinder(context).     }     if (Collection.class.isAssignableFrom(resolvedType)) {         return new CollectionBinder(context).     }     if (target.getType().isArray()) {         return new ArrayBinder(context).     }     return null. }
false;private;5;12;;private <T> Object bindAggregate(ConfigurationPropertyName name, Bindable<T> target, BindHandler handler, Context context, AggregateBinder<?> aggregateBinder) {     AggregateElementBinder elementBinder = (itemName, itemTarget, source) -> {         boolean allowRecursiveBinding = aggregateBinder.isAllowRecursiveBinding(source).         Supplier<?> supplier = () -> bind(itemName, itemTarget, handler, context, allowRecursiveBinding).         return context.withSource(source, supplier).     }.     return context.withIncreasedDepth(() -> aggregateBinder.bind(name, target, elementBinder)). }
false;private;2;13;;private ConfigurationProperty findProperty(ConfigurationPropertyName name, Context context) {     if (name.isEmpty()) {         return null.     }     for (ConfigurationPropertySource source : context.getSources()) {         ConfigurationProperty property = source.getConfigurationProperty(name).         if (property != null) {             return property.         }     }     return null. }
false;private;3;8;;private <T> Object bindProperty(Bindable<T> target, Context context, ConfigurationProperty property) {     context.setConfigurationProperty(property).     Object result = property.getValue().     result = this.placeholdersResolver.resolvePlaceholders(result).     result = context.getConverter().convert(result, target).     return result. }
false;private;5;18;;private Object bindBean(ConfigurationPropertyName name, Bindable<?> target, BindHandler handler, Context context, boolean allowRecursiveBinding) {     if (containsNoDescendantOf(context.getSources(), name) || isUnbindableBean(name, target, context)) {         return null.     }     Class<?> type = target.getType().resolve(Object.class).     if (!allowRecursiveBinding && context.hasBoundBean(type)) {         return null.     }     BeanPropertyBinder propertyBinder = (propertyName, propertyTarget) -> bind(name.append(propertyName), propertyTarget, handler, context, false).     return context.withBean(type, () -> {         Stream<?> boundBeans = BEAN_BINDERS.stream().map((b) -> b.bind(name, target, context, propertyBinder)).         return boundBeans.filter(Objects::nonNull).findFirst().orElse(null).     }). }
false;private;3;14;;private boolean isUnbindableBean(ConfigurationPropertyName name, Bindable<?> target, Context context) {     for (ConfigurationPropertySource source : context.getSources()) {         if (source.containsDescendantOf(name) == ConfigurationPropertyState.PRESENT) {             // We know there are properties to bind so we can't bypass anything             return false.         }     }     Class<?> resolved = target.getType().resolve(Object.class).     if (resolved.isPrimitive() || NON_BEAN_CLASSES.contains(resolved)) {         return true.     }     return resolved.getName().startsWith("java."). }
false;private;2;9;;private boolean containsNoDescendantOf(Iterable<ConfigurationPropertySource> sources, ConfigurationPropertyName name) {     for (ConfigurationPropertySource source : sources) {         if (source.containsDescendantOf(name) != ConfigurationPropertyState.ABSENT) {             return false.         }     }     return true. }
true;public,static;1;4;/**  * Create a new {@link Binder} instance from the specified environment.  * @param environment the environment source (must have attached  * {@link ConfigurationPropertySources})  * @return a {@link Binder} instance  */ ;/**  * Create a new {@link Binder} instance from the specified environment.  * @param environment the environment source (must have attached  * {@link ConfigurationPropertySources})  * @return a {@link Binder} instance  */ public static Binder get(Environment environment) {     return new Binder(ConfigurationPropertySources.get(environment), new PropertySourcesPlaceholdersResolver(environment)). }
false;private;0;3;;private void increaseDepth() {     this.depth++. }
false;private;0;3;;private void decreaseDepth() {     this.depth--. }
false;private;2;14;;private <T> T withSource(ConfigurationPropertySource source, Supplier<T> supplier) {     if (source == null) {         return supplier.get().     }     this.source.set(0, source).     this.sourcePushCount++.     try {         return supplier.get().     } finally {         this.sourcePushCount--.     } }
false;private;2;9;;private <T> T withBean(Class<?> bean, Supplier<T> supplier) {     this.beans.push(bean).     try {         return withIncreasedDepth(supplier).     } finally {         this.beans.pop().     } }
false;private;1;3;;private boolean hasBoundBean(Class<?> bean) {     return this.beans.contains(bean). }
false;private;1;9;;private <T> T withIncreasedDepth(Supplier<T> supplier) {     increaseDepth().     try {         return supplier.get().     } finally {         decreaseDepth().     } }
false;private;1;4;;private void setConfigurationProperty(ConfigurationProperty configurationProperty) {     this.configurationProperty = configurationProperty. }
false;private;0;3;;private void clearConfigurationProperty() {     this.configurationProperty = null. }
false;public;0;3;;public PlaceholdersResolver getPlaceholdersResolver() {     return Binder.this.placeholdersResolver. }
false;public;0;3;;public BindConverter getConverter() {     return this.converter. }
false;public;0;4;;@Override public Binder getBinder() {     return Binder.this. }
false;public;0;4;;@Override public int getDepth() {     return this.depth. }
false;public;0;7;;@Override public Iterable<ConfigurationPropertySource> getSources() {     if (this.sourcePushCount > 0) {         return this.source.     }     return Binder.this.sources. }
false;public;0;4;;@Override public ConfigurationProperty getConfigurationProperty() {     return this.configurationProperty. }
