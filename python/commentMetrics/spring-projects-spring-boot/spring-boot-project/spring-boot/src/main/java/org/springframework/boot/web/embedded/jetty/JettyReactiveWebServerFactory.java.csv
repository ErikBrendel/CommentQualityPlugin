commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setUseForwardHeaders(boolean useForwardHeaders) {     this.useForwardHeaders = useForwardHeaders. }
false;public;1;4;;@Override public void setAcceptors(int acceptors) {     this.acceptors = acceptors. }
false;public;1;6;;@Override public WebServer getWebServer(HttpHandler httpHandler) {     JettyHttpHandlerAdapter servlet = new JettyHttpHandlerAdapter(httpHandler).     Server server = createJettyServer(servlet).     return new JettyWebServer(server, getPort() >= 0). }
false;public;1;5;;@Override public void addServerCustomizers(JettyServerCustomizer... customizers) {     Assert.notNull(customizers, "Customizers must not be null").     this.jettyServerCustomizers.addAll(Arrays.asList(customizers)). }
true;public;1;5;/**  * Sets {@link JettyServerCustomizer}s that will be applied to the {@link Server}  * before it is started. Calling this method will replace any existing customizers.  * @param customizers the Jetty customizers to apply  */ ;/**  * Sets {@link JettyServerCustomizer}s that will be applied to the {@link Server}  * before it is started. Calling this method will replace any existing customizers.  * @param customizers the Jetty customizers to apply  */ public void setServerCustomizers(Collection<? extends JettyServerCustomizer> customizers) {     Assert.notNull(customizers, "Customizers must not be null").     this.jettyServerCustomizers = new ArrayList<>(customizers). }
true;public;0;3;/**  * Returns a mutable collection of Jetty {@link JettyServerCustomizer}s that will be  * applied to the {@link Server} before it is created.  * @return the Jetty customizers  */ ;/**  * Returns a mutable collection of Jetty {@link JettyServerCustomizer}s that will be  * applied to the {@link Server} before it is created.  * @return the Jetty customizers  */ public Collection<JettyServerCustomizer> getServerCustomizers() {     return this.jettyServerCustomizers. }
true;public;0;3;/**  * Returns a Jetty {@link ThreadPool} that should be used by the {@link Server}.  * @return a Jetty {@link ThreadPool} or {@code null}  */ ;/**  * Returns a Jetty {@link ThreadPool} that should be used by the {@link Server}.  * @return a Jetty {@link ThreadPool} or {@code null}  */ public ThreadPool getThreadPool() {     return this.threadPool. }
true;public;1;3;/**  * Set a Jetty {@link ThreadPool} that should be used by the {@link Server}. If set to  * {@code null} (default), the {@link Server} creates a {@link ThreadPool} implicitly.  * @param threadPool a Jetty ThreadPool to be used  */ ;/**  * Set a Jetty {@link ThreadPool} that should be used by the {@link Server}. If set to  * {@code null} (default), the {@link Server} creates a {@link ThreadPool} implicitly.  * @param threadPool a Jetty ThreadPool to be used  */ public void setThreadPool(ThreadPool threadPool) {     this.threadPool = threadPool. }
false;public;1;4;;@Override public void setSelectors(int selectors) {     this.selectors = selectors. }
true;public;1;3;/**  * Set the {@link JettyResourceFactory} to get the shared resources from.  * @param resourceFactory the server resources  * @since 2.1.0  */ ;/**  * Set the {@link JettyResourceFactory} to get the shared resources from.  * @param resourceFactory the server resources  * @since 2.1.0  */ public void setResourceFactory(JettyResourceFactory resourceFactory) {     this.resourceFactory = resourceFactory. }
false;protected;0;3;;protected JettyResourceFactory getResourceFactory() {     return this.resourceFactory. }
false;protected;1;24;;protected Server createJettyServer(JettyHttpHandlerAdapter servlet) {     int port = (getPort() >= 0) ? getPort() : 0.     InetSocketAddress address = new InetSocketAddress(getAddress(), port).     Server server = new Server(getThreadPool()).     server.addConnector(createConnector(address, server)).     ServletHolder servletHolder = new ServletHolder(servlet).     servletHolder.setAsyncSupported(true).     ServletContextHandler contextHandler = new ServletContextHandler(server, "", false, false).     contextHandler.addServlet(servletHolder, "/").     server.setHandler(addHandlerWrappers(contextHandler)).     JettyReactiveWebServerFactory.logger.info("Server initialized with port: " + port).     if (getSsl() != null && getSsl().isEnabled()) {         customizeSsl(server, address).     }     for (JettyServerCustomizer customizer : getServerCustomizers()) {         customizer.customize(server).     }     if (this.useForwardHeaders) {         new ForwardHeadersCustomizer().customize(server).     }     return server. }
false;private;2;21;;private AbstractConnector createConnector(InetSocketAddress address, Server server) {     ServerConnector connector.     JettyResourceFactory resourceFactory = getResourceFactory().     if (resourceFactory != null) {         connector = new ServerConnector(server, resourceFactory.getExecutor(), resourceFactory.getScheduler(), resourceFactory.getByteBufferPool(), this.acceptors, this.selectors, new HttpConnectionFactory()).     } else {         connector = new ServerConnector(server, this.acceptors, this.selectors).     }     connector.setHost(address.getHostString()).     connector.setPort(address.getPort()).     for (ConnectionFactory connectionFactory : connector.getConnectionFactories()) {         if (connectionFactory instanceof HttpConfiguration.ConnectionFactory) {             ((HttpConfiguration.ConnectionFactory) connectionFactory).getHttpConfiguration().setSendServerVersion(false).         }     }     return connector. }
false;private;1;11;;private Handler addHandlerWrappers(Handler handler) {     if (getCompression() != null && getCompression().getEnabled()) {         handler = applyWrapper(handler, JettyHandlerWrappers.createGzipHandlerWrapper(getCompression())).     }     if (StringUtils.hasText(getServerHeader())) {         handler = applyWrapper(handler, JettyHandlerWrappers.createServerHeaderHandlerWrapper(getServerHeader())).     }     return handler. }
false;private;2;4;;private Handler applyWrapper(Handler handler, HandlerWrapper wrapper) {     wrapper.setHandler(handler).     return wrapper. }
false;private;2;4;;private void customizeSsl(Server server, InetSocketAddress address) {     new SslServerCustomizer(address, getSsl(), getSslStoreProvider(), getHttp2()).customize(server). }
