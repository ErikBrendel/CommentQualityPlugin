commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void apply() {     apply(null). }
false;public;1;18;;public void apply(LogFile logFile) {     PropertyResolver resolver = getPropertyResolver().     setSystemProperty(resolver, EXCEPTION_CONVERSION_WORD, "exception-conversion-word").     setSystemProperty(PID_KEY, new ApplicationPid().toString()).     setSystemProperty(resolver, CONSOLE_LOG_PATTERN, "pattern.console").     setSystemProperty(resolver, FILE_LOG_PATTERN, "pattern.file").     setSystemProperty(resolver, FILE_CLEAN_HISTORY_ON_START, "file.clean-history-on-start").     setSystemProperty(resolver, FILE_MAX_HISTORY, "file.max-history").     setSystemProperty(resolver, FILE_MAX_SIZE, "file.max-size").     setSystemProperty(resolver, FILE_TOTAL_SIZE_CAP, "file.total-size-cap").     setSystemProperty(resolver, LOG_LEVEL_PATTERN, "pattern.level").     setSystemProperty(resolver, LOG_DATEFORMAT_PATTERN, "pattern.dateformat").     if (logFile != null) {         logFile.applyToSystemProperties().     } }
false;private;0;9;;private PropertyResolver getPropertyResolver() {     if (this.environment instanceof ConfigurableEnvironment) {         PropertySourcesPropertyResolver resolver = new PropertySourcesPropertyResolver(((ConfigurableEnvironment) this.environment).getPropertySources()).         resolver.setIgnoreUnresolvableNestedPlaceholders(true).         return resolver.     }     return this.environment. }
false;private;3;5;;private void setSystemProperty(PropertyResolver resolver, String systemPropertyName, String propertyName) {     setSystemProperty(systemPropertyName, resolver.getProperty("logging." + propertyName)). }
false;private;2;5;;private void setSystemProperty(String name, String value) {     if (System.getProperty(name) == null && value != null) {         System.setProperty(name, value).     } }
