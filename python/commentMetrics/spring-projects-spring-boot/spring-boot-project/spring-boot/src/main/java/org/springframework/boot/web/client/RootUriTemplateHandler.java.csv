commented;modifiers;parameterAmount;loc;comment;code
false;public;2;4;;@Override public URI expand(String uriTemplate, Map<String, ?> uriVariables) {     return this.handler.expand(apply(uriTemplate), uriVariables). }
false;public;2;4;;@Override public URI expand(String uriTemplate, Object... uriVariables) {     return this.handler.expand(apply(uriTemplate), uriVariables). }
false;private;1;6;;private String apply(String uriTemplate) {     if (StringUtils.startsWithIgnoreCase(uriTemplate, "/")) {         return getRootUri() + uriTemplate.     }     return uriTemplate. }
false;public;0;3;;public String getRootUri() {     return this.rootUri. }
true;public,static;2;8;/**  * Add a {@link RootUriTemplateHandler} instance to the given {@link RestTemplate}.  * @param restTemplate the {@link RestTemplate} to add the handler to  * @param rootUri the root URI  * @return the added {@link RootUriTemplateHandler}.  */ ;/**  * Add a {@link RootUriTemplateHandler} instance to the given {@link RestTemplate}.  * @param restTemplate the {@link RestTemplate} to add the handler to  * @param rootUri the root URI  * @return the added {@link RootUriTemplateHandler}.  */ public static RootUriTemplateHandler addTo(RestTemplate restTemplate, String rootUri) {     Assert.notNull(restTemplate, "RestTemplate must not be null").     RootUriTemplateHandler handler = new RootUriTemplateHandler(rootUri, restTemplate.getUriTemplateHandler()).     restTemplate.setUriTemplateHandler(handler).     return handler. }
