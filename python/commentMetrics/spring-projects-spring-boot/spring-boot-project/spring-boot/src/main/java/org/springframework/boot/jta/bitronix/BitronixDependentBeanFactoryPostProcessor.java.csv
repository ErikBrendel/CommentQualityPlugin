commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {     String[] transactionManagers = beanFactory.getBeanNamesForType(TransactionManager.class, true, false).     for (String transactionManager : transactionManagers) {         addTransactionManagerDependencies(beanFactory, transactionManager).     } }
false;private;2;11;;private void addTransactionManagerDependencies(ConfigurableListableBeanFactory beanFactory, String transactionManager) {     for (String dependentBeanName : getBeanNamesForType(beanFactory, "javax.jms.ConnectionFactory")) {         beanFactory.registerDependentBean(transactionManager, dependentBeanName).     }     for (String dependentBeanName : getBeanNamesForType(beanFactory, "javax.sql.DataSource")) {         beanFactory.registerDependentBean(transactionManager, dependentBeanName).     } }
false;private;2;10;;private String[] getBeanNamesForType(ConfigurableListableBeanFactory beanFactory, String type) {     try {         return beanFactory.getBeanNamesForType(Class.forName(type), true, false).     } catch (ClassNotFoundException | NoClassDefFoundError ex) {     // Ignore     }     return NO_BEANS. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;1;3;;public void setOrder(int order) {     this.order = order. }
