commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Result filter(LogEvent event) {     return Result.DENY. }
false;public;5;5;;@Override public Result filter(Logger logger, Level level, Marker marker, Message msg, Throwable t) {     return Result.DENY. }
false;public;5;5;;@Override public Result filter(Logger logger, Level level, Marker marker, Object msg, Throwable t) {     return Result.DENY. }
false;public;5;5;;@Override public Result filter(Logger logger, Level level, Marker marker, String msg, Object... params) {     return Result.DENY. }
false;protected;0;4;;@Override protected String[] getStandardConfigLocations() {     return getCurrentlySupportedConfigLocations(). }
false;private;0;11;;private String[] getCurrentlySupportedConfigLocations() {     List<String> supportedConfigLocations = new ArrayList<>().     if (isClassAvailable("com.fasterxml.jackson.dataformat.yaml.YAMLParser")) {         Collections.addAll(supportedConfigLocations, "log4j2.yaml", "log4j2.yml").     }     if (isClassAvailable("com.fasterxml.jackson.databind.ObjectMapper")) {         Collections.addAll(supportedConfigLocations, "log4j2.json", "log4j2.jsn").     }     supportedConfigLocations.add("log4j2.xml").     return StringUtils.toStringArray(supportedConfigLocations). }
false;protected;1;3;;protected boolean isClassAvailable(String className) {     return ClassUtils.isPresent(className, getClassLoader()). }
false;public;0;9;;@Override public void beforeInitialize() {     LoggerContext loggerContext = getLoggerContext().     if (isAlreadyInitialized(loggerContext)) {         return.     }     super.beforeInitialize().     loggerContext.getConfiguration().addFilter(FILTER). }
false;public;3;11;;@Override public void initialize(LoggingInitializationContext initializationContext, String configLocation, LogFile logFile) {     LoggerContext loggerContext = getLoggerContext().     if (isAlreadyInitialized(loggerContext)) {         return.     }     loggerContext.getConfiguration().removeFilter(FILTER).     super.initialize(initializationContext, configLocation, logFile).     markAsInitialized(loggerContext). }
false;protected;2;10;;@Override protected void loadDefaults(LoggingInitializationContext initializationContext, LogFile logFile) {     if (logFile != null) {         loadConfiguration(getPackagedConfigFile("log4j2-file.xml"), logFile).     } else {         loadConfiguration(getPackagedConfigFile("log4j2.xml"), logFile).     } }
false;protected;3;6;;@Override protected void loadConfiguration(LoggingInitializationContext initializationContext, String location, LogFile logFile) {     super.loadConfiguration(initializationContext, location, logFile).     loadConfiguration(location, logFile). }
false;protected;2;13;;protected void loadConfiguration(String location, LogFile logFile) {     Assert.notNull(location, "Location must not be null").     try {         LoggerContext ctx = getLoggerContext().         URL url = ResourceUtils.getURL(location).         ConfigurationSource source = getConfigurationSource(url).         ctx.start(ConfigurationFactory.getInstance().getConfiguration(ctx, source)).     } catch (Exception ex) {         throw new IllegalStateException("Could not initialize Log4J2 logging from " + location, ex).     } }
false;private;1;7;;private ConfigurationSource getConfigurationSource(URL url) throws IOException {     InputStream stream = url.openStream().     if (FILE_PROTOCOL.equals(url.getProtocol())) {         return new ConfigurationSource(stream, ResourceUtils.getFile(url)).     }     return new ConfigurationSource(stream, url). }
false;protected;1;4;;@Override protected void reinitialize(LoggingInitializationContext initializationContext) {     getLoggerContext().reconfigure(). }
false;public;0;4;;@Override public Set<LogLevel> getSupportedLogLevels() {     return LEVELS.getSupported(). }
false;public;2;13;;@Override public void setLogLevel(String loggerName, LogLevel logLevel) {     Level level = LEVELS.convertSystemToNative(logLevel).     LoggerConfig loggerConfig = getLoggerConfig(loggerName).     if (loggerConfig == null) {         loggerConfig = new LoggerConfig(loggerName, level, true).         getLoggerContext().getConfiguration().addLogger(loggerName, loggerConfig).     } else {         loggerConfig.setLevel(level).     }     getLoggerContext().updateLoggers(). }
false;public;0;10;;@Override public List<LoggerConfiguration> getLoggerConfigurations() {     List<LoggerConfiguration> result = new ArrayList<>().     Configuration configuration = getLoggerContext().getConfiguration().     for (LoggerConfig loggerConfig : configuration.getLoggers().values()) {         result.add(convertLoggerConfiguration(loggerConfig)).     }     result.sort(CONFIGURATION_COMPARATOR).     return result. }
false;public;1;4;;@Override public LoggerConfiguration getLoggerConfiguration(String loggerName) {     return convertLoggerConfiguration(getLoggerConfig(loggerName)). }
false;private;1;11;;private LoggerConfiguration convertLoggerConfiguration(LoggerConfig loggerConfig) {     if (loggerConfig == null) {         return null.     }     LogLevel level = LEVELS.convertNativeToSystem(loggerConfig.getLevel()).     String name = loggerConfig.getName().     if (!StringUtils.hasLength(name) || LogManager.ROOT_LOGGER_NAME.equals(name)) {         name = ROOT_LOGGER_NAME.     }     return new LoggerConfiguration(name, level, level). }
false;public;0;4;;@Override public Runnable getShutdownHandler() {     return new ShutdownHandler(). }
false;public;0;7;;@Override public void cleanUp() {     super.cleanUp().     LoggerContext loggerContext = getLoggerContext().     markAsUninitialized(loggerContext).     loggerContext.getConfiguration().removeFilter(FILTER). }
false;private;1;6;;private LoggerConfig getLoggerConfig(String name) {     if (!StringUtils.hasLength(name) || ROOT_LOGGER_NAME.equals(name)) {         name = LogManager.ROOT_LOGGER_NAME.     }     return getLoggerContext().getConfiguration().getLoggers().get(name). }
false;private;0;3;;private LoggerContext getLoggerContext() {     return (LoggerContext) LogManager.getContext(false). }
false;private;1;3;;private boolean isAlreadyInitialized(LoggerContext loggerContext) {     return LoggingSystem.class.getName().equals(loggerContext.getExternalContext()). }
false;private;1;3;;private void markAsInitialized(LoggerContext loggerContext) {     loggerContext.setExternalContext(LoggingSystem.class.getName()). }
false;private;1;3;;private void markAsUninitialized(LoggerContext loggerContext) {     loggerContext.setExternalContext(null). }
false;public;0;4;;@Override public void run() {     getLoggerContext().stop(). }
