commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public PropertyMapping[] map(ConfigurationPropertyName configurationPropertyName) {     String name = convertName(configurationPropertyName).     String legacyName = convertLegacyName(configurationPropertyName).     if (name.equals(legacyName)) {         return new PropertyMapping[] { new PropertyMapping(name, configurationPropertyName) }.     }     return new PropertyMapping[] { new PropertyMapping(name, configurationPropertyName), new PropertyMapping(legacyName, configurationPropertyName) }. }
false;public;1;8;;@Override public PropertyMapping[] map(String propertySourceName) {     ConfigurationPropertyName name = convertName(propertySourceName).     if (name == null || name.isEmpty()) {         return NO_MAPPINGS.     }     return new PropertyMapping[] { new PropertyMapping(propertySourceName, name) }. }
false;private;1;9;;private ConfigurationPropertyName convertName(String propertySourceName) {     try {         return ConfigurationPropertyName.adapt(propertySourceName, '_', this::processElementValue).     } catch (Exception ex) {         return null.     } }
false;private;1;3;;private String convertName(ConfigurationPropertyName name) {     return convertName(name, name.getNumberOfElements()). }
false;private;2;10;;private String convertName(ConfigurationPropertyName name, int numberOfElements) {     StringBuilder result = new StringBuilder().     for (int i = 0. i < numberOfElements. i++) {         if (result.length() > 0) {             result.append("_").         }         result.append(name.getElement(i, Form.UNIFORM).toUpperCase(Locale.ENGLISH)).     }     return result.toString(). }
false;private;1;10;;private String convertLegacyName(ConfigurationPropertyName name) {     StringBuilder result = new StringBuilder().     for (int i = 0. i < name.getNumberOfElements(). i++) {         if (result.length() > 0) {             result.append("_").         }         result.append(convertLegacyNameElement(name.getElement(i, Form.ORIGINAL))).     }     return result.toString(). }
false;private;1;3;;private Object convertLegacyNameElement(String element) {     return element.replace('-', '_').toUpperCase(Locale.ENGLISH). }
false;private;1;4;;private CharSequence processElementValue(CharSequence value) {     String result = value.toString().toLowerCase(Locale.ENGLISH).     return isNumber(result) ? "[" + result + "]" : result. }
false;private,static;1;3;;private static boolean isNumber(String string) {     return string.chars().allMatch(Character::isDigit). }
