commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;@Override public FailureAnalysis analyze(Throwable failure) {     T cause = findCause(failure, getCauseType()).     if (cause != null) {         return analyze(failure, cause).     }     return null. }
true;protected,abstract;2;1;/**  * Returns an analysis of the given {@code rootFailure}, or {@code null} if no  * analysis was possible.  * @param rootFailure the root failure passed to the analyzer  * @param cause the actual found cause  * @return the analysis or {@code null}  */ ;/**  * Returns an analysis of the given {@code rootFailure}, or {@code null} if no  * analysis was possible.  * @param rootFailure the root failure passed to the analyzer  * @param cause the actual found cause  * @return the analysis or {@code null}  */ protected abstract FailureAnalysis analyze(Throwable rootFailure, T cause).
true;protected;0;5;/**  * Return the cause type being handled by the analyzer. By default the class generic  * is used.  * @return the cause type  */ ;/**  * Return the cause type being handled by the analyzer. By default the class generic  * is used.  * @return the cause type  */ @SuppressWarnings("unchecked") protected Class<? extends T> getCauseType() {     return (Class<? extends T>) ResolvableType.forClass(AbstractFailureAnalyzer.class, getClass()).resolveGeneric(). }
false;protected,final;2;10;;@SuppressWarnings("unchecked") protected final <E extends Throwable> E findCause(Throwable failure, Class<E> type) {     while (failure != null) {         if (type.isInstance(failure)) {             return (E) failure.         }         failure = failure.getCause().     }     return null. }
