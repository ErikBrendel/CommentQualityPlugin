commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException {     Assert.isInstanceOf(ConfigurableBeanFactory.class, beanFactory).     this.beanFactory = (ConfigurableBeanFactory) beanFactory. }
false;protected;3;22;;@Override protected FailureAnalysis analyze(Throwable rootFailure, NoUniqueBeanDefinitionException cause, String description) {     if (description == null) {         return null.     }     String[] beanNames = extractBeanNames(cause).     if (beanNames == null) {         return null.     }     StringBuilder message = new StringBuilder().     message.append(String.format("%s required a single bean, but %d were found:%n", description, beanNames.length)).     for (String beanName : beanNames) {         buildMessage(message, beanName).     }     return new FailureAnalysis(message.toString(), "Consider marking one of the beans as @Primary, updating the consumer to" + " accept multiple beans, or using @Qualifier to identify the" + " bean that should be consumed", cause). }
false;private;2;11;;private void buildMessage(StringBuilder message, String beanName) {     try {         BeanDefinition definition = this.beanFactory.getMergedBeanDefinition(beanName).         message.append(getDefinitionDescription(beanName, definition)).     } catch (NoSuchBeanDefinitionException ex) {         message.append(String.format("\t- %s: a programmatically registered singleton", beanName)).     } }
false;private;2;9;;private String getDefinitionDescription(String beanName, BeanDefinition definition) {     if (StringUtils.hasText(definition.getFactoryMethodName())) {         return String.format("\t- %s: defined by method '%s' in %s%n", beanName, definition.getFactoryMethodName(), definition.getResourceDescription()).     }     return String.format("\t- %s: defined in %s%n", beanName, definition.getResourceDescription()). }
false;private;1;7;;private String[] extractBeanNames(NoUniqueBeanDefinitionException cause) {     if (cause.getMessage().contains("but found")) {         return StringUtils.commaDelimitedListToStringArray(cause.getMessage().substring(cause.getMessage().lastIndexOf(':') + 1).trim()).     }     return null. }
