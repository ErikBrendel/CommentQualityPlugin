commented;modifiers;parameterAmount;loc;comment;code
true;;2;7;/**  * Converts the given {@code environment} to the given {@link StandardEnvironment}  * type. If the environment is already of the same type, no conversion is performed  * and it is returned unchanged.  * @param environment the Environment to convert  * @param type the type to convert the Environment to  * @return the converted Environment  */ ;/**  * Converts the given {@code environment} to the given {@link StandardEnvironment}  * type. If the environment is already of the same type, no conversion is performed  * and it is returned unchanged.  * @param environment the Environment to convert  * @param type the type to convert the Environment to  * @return the converted Environment  */ StandardEnvironment convertEnvironmentIfNecessary(ConfigurableEnvironment environment, Class<? extends StandardEnvironment> type) {     if (type.equals(environment.getClass())) {         return (StandardEnvironment) environment.     }     return convertEnvironment(environment, type). }
false;private;2;8;;private StandardEnvironment convertEnvironment(ConfigurableEnvironment environment, Class<? extends StandardEnvironment> type) {     StandardEnvironment result = createEnvironment(type).     result.setActiveProfiles(environment.getActiveProfiles()).     result.setConversionService(environment.getConversionService()).     copyPropertySources(environment, result).     return result. }
false;private;1;9;;private StandardEnvironment createEnvironment(Class<? extends StandardEnvironment> type) {     try {         return type.newInstance().     } catch (Exception ex) {         return new StandardEnvironment().     } }
false;private;2;10;;private void copyPropertySources(ConfigurableEnvironment source, StandardEnvironment target) {     removePropertySources(target.getPropertySources(), isServletEnvironment(target.getClass(), this.classLoader)).     for (PropertySource<?> propertySource : source.getPropertySources()) {         if (!SERVLET_ENVIRONMENT_SOURCE_NAMES.contains(propertySource.getName())) {             target.getPropertySources().addLast(propertySource).         }     } }
false;private;2;11;;private boolean isServletEnvironment(Class<?> conversionType, ClassLoader classLoader) {     try {         Class<?> webEnvironmentClass = ClassUtils.forName(CONFIGURABLE_WEB_ENVIRONMENT_CLASS, classLoader).         return webEnvironmentClass.isAssignableFrom(conversionType).     } catch (Throwable ex) {         return false.     } }
false;private;2;13;;private void removePropertySources(MutablePropertySources propertySources, boolean isServletEnvironment) {     Set<String> names = new HashSet<>().     for (PropertySource<?> propertySource : propertySources) {         names.add(propertySource.getName()).     }     for (String name : names) {         if (!isServletEnvironment || !SERVLET_ENVIRONMENT_SOURCE_NAMES.contains(name)) {             propertySources.remove(name).         }     } }
