commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {     Assert.state(applicationContext instanceof ConfigurableApplicationContext, "ApplicationContext does not implement ConfigurableApplicationContext").     this.applicationContext = (ConfigurableApplicationContext) applicationContext. }
false;public;1;4;;@Override public void setEnvironment(Environment environment) {     this.environment = environment. }
false;public;1;9;;@Override public boolean supportsEventType(ResolvableType eventType) {     Class<?> type = eventType.getRawClass().     if (type == null) {         return false.     }     return ApplicationReadyEvent.class.isAssignableFrom(type) || WebServerInitializedEvent.class.isAssignableFrom(type). }
false;public;1;4;;@Override public boolean supportsSourceType(Class<?> sourceType) {     return true. }
false;public;1;9;;@Override public void onApplicationEvent(ApplicationEvent event) {     if (event instanceof ApplicationReadyEvent) {         onApplicationReadyEvent((ApplicationReadyEvent) event).     }     if (event instanceof WebServerInitializedEvent) {         onWebServerInitializedEvent((WebServerInitializedEvent) event).     } }
false;public;0;4;;@Override public int getOrder() {     return Ordered.HIGHEST_PRECEDENCE. }
false;;1;5;;void onApplicationReadyEvent(ApplicationReadyEvent event) {     if (this.applicationContext.equals(event.getApplicationContext())) {         this.ready = true.     } }
false;;1;5;;void onWebServerInitializedEvent(WebServerInitializedEvent event) {     if (this.applicationContext.equals(event.getApplicationContext())) {         this.embeddedWebApplication = true.     } }
false;public;0;9;;@Override public void afterPropertiesSet() throws Exception {     MBeanServer server = ManagementFactory.getPlatformMBeanServer().     server.registerMBean(new SpringApplicationAdmin(), this.objectName).     if (logger.isDebugEnabled()) {         logger.debug("Application Admin MBean registered with name '" + this.objectName + "'").     } }
false;public;0;4;;@Override public void destroy() throws Exception {     ManagementFactory.getPlatformMBeanServer().unregisterMBean(this.objectName). }
false;public;0;4;;@Override public boolean isReady() {     return SpringApplicationAdminMXBeanRegistrar.this.ready. }
false;public;0;4;;@Override public boolean isEmbeddedWebApplication() {     return SpringApplicationAdminMXBeanRegistrar.this.embeddedWebApplication. }
false;public;1;5;;@Override public String getProperty(String key) {     return SpringApplicationAdminMXBeanRegistrar.this.environment.getProperty(key). }
false;public;0;5;;@Override public void shutdown() {     logger.info("Application shutdown requested.").     SpringApplicationAdminMXBeanRegistrar.this.applicationContext.close(). }
