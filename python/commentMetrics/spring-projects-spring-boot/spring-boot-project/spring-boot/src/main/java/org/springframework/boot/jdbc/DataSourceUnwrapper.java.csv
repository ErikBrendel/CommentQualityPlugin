commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;23;/**  * Return an object that implements the given {@code target} type, unwrapping delegate  * or proxy if necessary.  * @param dataSource the datasource to handle  * @param target the type that the result must implement  * @param <T> the target type  * @return an object that implements the target type or {@code null}  */ ;/**  * Return an object that implements the given {@code target} type, unwrapping delegate  * or proxy if necessary.  * @param dataSource the datasource to handle  * @param target the type that the result must implement  * @param <T> the target type  * @return an object that implements the target type or {@code null}  */ public static <T> T unwrap(DataSource dataSource, Class<T> target) {     if (target.isInstance(dataSource)) {         return target.cast(dataSource).     }     T unwrapped = safeUnwrap(dataSource, target).     if (unwrapped != null) {         return unwrapped.     }     if (DELEGATING_DATA_SOURCE_PRESENT) {         DataSource targetDataSource = DelegatingDataSourceUnwrapper.getTargetDataSource(dataSource).         if (targetDataSource != null) {             return unwrap(targetDataSource, target).         }     }     if (AopUtils.isAopProxy(dataSource)) {         Object proxyTarget = AopProxyUtils.getSingletonTarget(dataSource).         if (proxyTarget instanceof DataSource) {             return unwrap((DataSource) proxyTarget, target).         }     }     return null. }
false;private,static;2;8;;private static <S> S safeUnwrap(Wrapper wrapper, Class<S> target) {     try {         return wrapper.unwrap(target).     } catch (Exception ex) {         return null.     } }
false;private,static;1;6;;private static DataSource getTargetDataSource(DataSource dataSource) {     if (dataSource instanceof DelegatingDataSource) {         return ((DelegatingDataSource) dataSource).getTargetDataSource().     }     return null. }
