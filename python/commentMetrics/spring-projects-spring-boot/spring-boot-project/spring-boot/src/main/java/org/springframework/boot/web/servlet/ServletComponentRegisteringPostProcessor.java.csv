commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {     if (isRunningInEmbeddedWebServer()) {         ClassPathScanningCandidateComponentProvider componentProvider = createComponentProvider().         for (String packageToScan : this.packagesToScan) {             scanPackage(componentProvider, packageToScan).         }     } }
false;private;2;13;;private void scanPackage(ClassPathScanningCandidateComponentProvider componentProvider, String packageToScan) {     for (BeanDefinition candidate : componentProvider.findCandidateComponents(packageToScan)) {         if (candidate instanceof ScannedGenericBeanDefinition) {             for (ServletComponentHandler handler : HANDLERS) {                 handler.handle(((ScannedGenericBeanDefinition) candidate), (BeanDefinitionRegistry) this.applicationContext).             }         }     } }
false;private;0;5;;private boolean isRunningInEmbeddedWebServer() {     return this.applicationContext instanceof WebApplicationContext && ((WebApplicationContext) this.applicationContext).getServletContext() == null. }
false;private;0;10;;private ClassPathScanningCandidateComponentProvider createComponentProvider() {     ClassPathScanningCandidateComponentProvider componentProvider = new ClassPathScanningCandidateComponentProvider(false).     componentProvider.setEnvironment(this.applicationContext.getEnvironment()).     componentProvider.setResourceLoader(this.applicationContext).     for (ServletComponentHandler handler : HANDLERS) {         componentProvider.addIncludeFilter(handler.getTypeFilter()).     }     return componentProvider. }
false;;0;3;;Set<String> getPackagesToScan() {     return Collections.unmodifiableSet(this.packagesToScan). }
false;public;1;5;;@Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {     this.applicationContext = applicationContext. }
