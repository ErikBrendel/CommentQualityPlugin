commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Return the value of the specified property or {@code null}.  * @param key the key of the property  * @return the property value  */ ;/**  * Return the value of the specified property or {@code null}.  * @param key the key of the property  * @return the property value  */ public String get(String key) {     return this.entries.getProperty(key). }
true;public;1;12;/**  * Return the value of the specified property as an {@link Instant} or {@code null} if  * the value is not a valid {@link Long} representation of an epoch time.  * @param key the key of the property  * @return the property value  */ ;/**  * Return the value of the specified property as an {@link Instant} or {@code null} if  * the value is not a valid {@link Long} representation of an epoch time.  * @param key the key of the property  * @return the property value  */ public Instant getInstant(String key) {     String s = get(key).     if (s != null) {         try {             return Instant.ofEpochMilli(Long.parseLong(s)).         } catch (NumberFormatException ex) {         // Not valid epoch time         }     }     return null. }
false;public;0;4;;@Override public Iterator<Entry> iterator() {     return new PropertiesIterator(this.entries). }
true;public;0;4;/**  * Return a {@link PropertySource} of this instance.  * @return a {@link PropertySource}  */ ;/**  * Return a {@link PropertySource} of this instance.  * @return a {@link PropertySource}  */ public PropertySource<?> toPropertySource() {     return new PropertiesPropertySource(getClass().getSimpleName(), copy(this.entries)). }
false;private;1;5;;private Properties copy(Properties properties) {     Properties copy = new Properties().     copy.putAll(properties).     return copy. }
false;public;0;4;;@Override public boolean hasNext() {     return this.iterator.hasNext(). }
false;public;0;5;;@Override public Entry next() {     Map.Entry<Object, Object> entry = this.iterator.next().     return new Entry((String) entry.getKey(), (String) entry.getValue()). }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException("InfoProperties are immutable."). }
false;public;0;3;;public String getKey() {     return this.key. }
false;public;0;3;;public String getValue() {     return this.value. }
