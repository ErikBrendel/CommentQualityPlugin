commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the tracked value.  * @return the tracked value  */ ;/**  * Return the tracked value.  * @return the tracked value  */ public Object getValue() {     return this.value. }
false;public;0;4;;@Override public Origin getOrigin() {     return this.origin. }
false;public;1;7;;@Override public boolean equals(Object obj) {     if (obj == null || obj.getClass() != getClass()) {         return false.     }     return ObjectUtils.nullSafeEquals(this.value, ((OriginTrackedValue) obj).value). }
false;public;0;4;;@Override public int hashCode() {     return ObjectUtils.nullSafeHashCode(this.value). }
false;public;0;4;;@Override public String toString() {     return (this.value != null) ? this.value.toString() : null. }
false;public,static;1;3;;public static OriginTrackedValue of(Object value) {     return of(value, null). }
true;public,static;2;9;/**  * Create an {@link OriginTrackedValue} containing the specified {@code value} and  * {@code origin}. If the source value implements {@link CharSequence} then so will  * the resulting {@link OriginTrackedValue}.  * @param value the source value  * @param origin the origin  * @return an {@link OriginTrackedValue} or {@code null} if the source value was  * {@code null}.  */ ;/**  * Create an {@link OriginTrackedValue} containing the specified {@code value} and  * {@code origin}. If the source value implements {@link CharSequence} then so will  * the resulting {@link OriginTrackedValue}.  * @param value the source value  * @param origin the origin  * @return an {@link OriginTrackedValue} or {@code null} if the source value was  * {@code null}.  */ public static OriginTrackedValue of(Object value, Origin origin) {     if (value == null) {         return null.     }     if (value instanceof CharSequence) {         return new OriginTrackedCharSequence((CharSequence) value, origin).     }     return new OriginTrackedValue(value, origin). }
false;public;0;4;;@Override public int length() {     return getValue().length(). }
false;public;1;4;;@Override public char charAt(int index) {     return getValue().charAt(index). }
false;public;2;4;;@Override public CharSequence subSequence(int start, int end) {     return getValue().subSequence(start, end). }
false;public;0;4;;@Override public CharSequence getValue() {     return (CharSequence) super.getValue(). }
