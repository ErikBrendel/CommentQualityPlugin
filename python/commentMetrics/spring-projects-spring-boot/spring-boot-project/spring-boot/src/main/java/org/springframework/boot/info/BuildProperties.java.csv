commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the groupId of the project or {@code null}.  * @return the group  */ ;/**  * Return the groupId of the project or {@code null}.  * @return the group  */ public String getGroup() {     return get("group"). }
true;public;0;3;/**  * Return the artifactId of the project or {@code null}.  * @return the artifact  */ ;/**  * Return the artifactId of the project or {@code null}.  * @return the artifact  */ public String getArtifact() {     return get("artifact"). }
true;public;0;3;/**  * Return the name of the project or {@code null}.  * @return the name  */ ;/**  * Return the name of the project or {@code null}.  * @return the name  */ public String getName() {     return get("name"). }
true;public;0;3;/**  * Return the version of the project or {@code null}.  * @return the version  */ ;/**  * Return the version of the project or {@code null}.  * @return the version  */ public String getVersion() {     return get("version"). }
true;public;0;3;/**  * Return the timestamp of the build or {@code null}.  * <p>  * If the original value could not be parsed properly, it is still available with the  * {@code time} key.  * @return the build time  * @see #get(String)  */ ;/**  * Return the timestamp of the build or {@code null}.  * <p>  * If the original value could not be parsed properly, it is still available with the  * {@code time} key.  * @return the build time  * @see #get(String)  */ public Instant getTime() {     return getInstant("time"). }
false;private,static;1;4;;private static Properties processEntries(Properties properties) {     coerceDate(properties, "time").     return properties. }
false;private,static;2;13;;private static void coerceDate(Properties properties, String key) {     String value = properties.getProperty(key).     if (value != null) {         try {             String updatedValue = String.valueOf(DateTimeFormatter.ISO_INSTANT.parse(value, Instant::from).toEpochMilli()).             properties.setProperty(key, updatedValue).         } catch (DateTimeException ex) {         // Ignore and store the original value         }     } }
