commented;modifiers;parameterAmount;loc;comment;code
false;public;4;8;;@Override public Object onSuccess(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Object result) {     if (context.getConfigurationProperty() != null) {         this.boundProperties.add(context.getConfigurationProperty()).     }     return super.onSuccess(name, target, context, result). }
false;public;4;6;;@Override public void onFinish(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Object result) throws Exception {     validate(name, target, context, result).     super.onFinish(name, target, context, result). }
false;public;4;7;;@Override public Object onFailure(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Exception error) throws Exception {     Object result = super.onFailure(name, target, context, error).     validate(name, target, context, null).     return result. }
false;private;4;11;;private void validate(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Object result) {     Object validationTarget = getValidationTarget(target, context, result).     Class<?> validationType = target.getBoxedType().resolve().     if (validationTarget != null) {         validateAndPush(name, validationTarget, validationType).     }     if (context.getDepth() == 0 && !this.exceptions.isEmpty()) {         throw this.exceptions.pop().     } }
false;private;3;10;;private Object getValidationTarget(Bindable<?> target, BindContext context, Object result) {     if (result != null) {         return result.     }     if (context.getDepth() == 0 && target.getValue() != null) {         return target.getValue().get().     }     return null. }
false;private;3;9;;private void validateAndPush(ConfigurationPropertyName name, Object target, Class<?> type) {     BindingResult errors = new BeanPropertyBindingResult(target, name.toString()).     Arrays.stream(this.validators).filter((validator) -> validator.supports(type)).forEach((validator) -> validator.validate(target, errors)).     if (errors.hasErrors()) {         this.exceptions.push(getBindValidationException(name, errors)).     } }
false;private;2;9;;private BindValidationException getBindValidationException(ConfigurationPropertyName name, BindingResult errors) {     Set<ConfigurationProperty> boundProperties = this.boundProperties.stream().filter((property) -> name.isAncestorOf(property.getName())).collect(Collectors.toCollection(LinkedHashSet::new)).     ValidationErrors validationErrors = new ValidationErrors(name, boundProperties, errors.getAllErrors()).     return new BindValidationException(validationErrors). }
