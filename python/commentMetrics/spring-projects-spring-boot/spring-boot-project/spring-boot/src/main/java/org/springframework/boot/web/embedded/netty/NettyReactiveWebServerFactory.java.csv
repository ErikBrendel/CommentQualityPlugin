commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public WebServer getWebServer(HttpHandler httpHandler) {     HttpServer httpServer = createHttpServer().     ReactorHttpHandlerAdapter handlerAdapter = new ReactorHttpHandlerAdapter(httpHandler).     return new NettyWebServer(httpServer, handlerAdapter, this.lifecycleTimeout). }
true;public;0;3;/**  * Returns a mutable collection of the {@link NettyServerCustomizer}s that will be  * applied to the Netty server builder.  * @return the customizers that will be applied  */ ;/**  * Returns a mutable collection of the {@link NettyServerCustomizer}s that will be  * applied to the Netty server builder.  * @return the customizers that will be applied  */ public Collection<NettyServerCustomizer> getServerCustomizers() {     return this.serverCustomizers. }
true;public;1;5;/**  * Set {@link NettyServerCustomizer}s that should be applied to the Netty server  * builder. Calling this method will replace any existing customizers.  * @param serverCustomizers the customizers to set  */ ;/**  * Set {@link NettyServerCustomizer}s that should be applied to the Netty server  * builder. Calling this method will replace any existing customizers.  * @param serverCustomizers the customizers to set  */ public void setServerCustomizers(Collection<? extends NettyServerCustomizer> serverCustomizers) {     Assert.notNull(serverCustomizers, "ServerCustomizers must not be null").     this.serverCustomizers = new ArrayList<>(serverCustomizers). }
true;public;1;4;/**  * Add {@link NettyServerCustomizer}s that should applied while building the server.  * @param serverCustomizers the customizers to add  */ ;/**  * Add {@link NettyServerCustomizer}s that should applied while building the server.  * @param serverCustomizers the customizers to add  */ public void addServerCustomizers(NettyServerCustomizer... serverCustomizers) {     Assert.notNull(serverCustomizers, "ServerCustomizer must not be null").     this.serverCustomizers.addAll(Arrays.asList(serverCustomizers)). }
true;public;1;3;/**  * Set the maximum amount of time that should be waited when starting or stopping the  * server.  * @param lifecycleTimeout the lifecycle timeout  */ ;/**  * Set the maximum amount of time that should be waited when starting or stopping the  * server.  * @param lifecycleTimeout the lifecycle timeout  */ public void setLifecycleTimeout(Duration lifecycleTimeout) {     this.lifecycleTimeout = lifecycleTimeout. }
true;public;1;3;/**  * Set if x-forward-* headers should be processed.  * @param useForwardHeaders if x-forward headers should be used  * @since 2.1.0  */ ;/**  * Set if x-forward-* headers should be processed.  * @param useForwardHeaders if x-forward headers should be used  * @since 2.1.0  */ public void setUseForwardHeaders(boolean useForwardHeaders) {     this.useForwardHeaders = useForwardHeaders. }
true;public;1;3;/**  * Set the {@link ReactorResourceFactory} to get the shared resources from.  * @param resourceFactory the server resources  * @since 2.1.0  */ ;/**  * Set the {@link ReactorResourceFactory} to get the shared resources from.  * @param resourceFactory the server resources  * @since 2.1.0  */ public void setResourceFactory(ReactorResourceFactory resourceFactory) {     this.resourceFactory = resourceFactory. }
false;private;0;26;;private HttpServer createHttpServer() {     HttpServer server = HttpServer.create().     if (this.resourceFactory != null) {         LoopResources resources = this.resourceFactory.getLoopResources().         Assert.notNull(resources, "No LoopResources: is ReactorResourceFactory not initialized yet?").         server = server.tcpConfiguration((tcpServer) -> tcpServer.runOn(resources).addressSupplier(this::getListenAddress)).     } else {         server = server.tcpConfiguration((tcpServer) -> tcpServer.addressSupplier(this::getListenAddress)).     }     if (getSsl() != null && getSsl().isEnabled()) {         SslServerCustomizer sslServerCustomizer = new SslServerCustomizer(getSsl(), getHttp2(), getSslStoreProvider()).         server = sslServerCustomizer.apply(server).     }     if (getCompression() != null && getCompression().getEnabled()) {         CompressionCustomizer compressionCustomizer = new CompressionCustomizer(getCompression()).         server = compressionCustomizer.apply(server).     }     server = server.protocol(listProtocols()).forwarded(this.useForwardHeaders).     return applyCustomizers(server). }
false;private;0;11;;private HttpProtocol[] listProtocols() {     if (getHttp2() != null && getHttp2().isEnabled()) {         if (getSsl() != null && getSsl().isEnabled()) {             return new HttpProtocol[] { HttpProtocol.H2, HttpProtocol.HTTP11 }.         } else {             return new HttpProtocol[] { HttpProtocol.H2C, HttpProtocol.HTTP11 }.         }     }     return new HttpProtocol[] { HttpProtocol.HTTP11 }. }
false;private;0;6;;private InetSocketAddress getListenAddress() {     if (getAddress() != null) {         return new InetSocketAddress(getAddress().getHostAddress(), getPort()).     }     return new InetSocketAddress(getPort()). }
false;private;1;6;;private HttpServer applyCustomizers(HttpServer server) {     for (NettyServerCustomizer customizer : this.serverCustomizers) {         server = customizer.apply(server).     }     return server. }
