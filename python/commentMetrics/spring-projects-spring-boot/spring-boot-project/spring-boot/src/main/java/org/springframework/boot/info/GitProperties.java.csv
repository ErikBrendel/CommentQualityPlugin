commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Return the name of the branch or {@code null}.  * @return the branch  */ ;/**  * Return the name of the branch or {@code null}.  * @return the branch  */ public String getBranch() {     return get("branch"). }
true;public;0;3;/**  * Return the full id of the commit or {@code null}.  * @return the full commit id  */ ;/**  * Return the full id of the commit or {@code null}.  * @return the full commit id  */ public String getCommitId() {     return get("commit.id"). }
true;public;0;11;/**  * Return the abbreviated id of the commit or {@code null}.  * @return the short commit id  */ ;/**  * Return the abbreviated id of the commit or {@code null}.  * @return the short commit id  */ public String getShortCommitId() {     String shortId = get("commit.id.abbrev").     if (shortId != null) {         return shortId.     }     String id = getCommitId().     if (id == null) {         return null.     }     return (id.length() > 7) ? id.substring(0, 7) : id. }
true;public;0;3;/**  * Return the timestamp of the commit or {@code null}.  * <p>  * If the original value could not be parsed properly, it is still available with the  * {@code commit.time} key.  * @return the commit time  * @see #get(String)  */ ;/**  * Return the timestamp of the commit or {@code null}.  * <p>  * If the original value could not be parsed properly, it is still available with the  * {@code commit.time} key.  * @return the commit time  * @see #get(String)  */ public Instant getCommitTime() {     return getInstant("commit.time"). }
false;private,static;1;10;;private static Properties processEntries(Properties properties) {     coercePropertyToEpoch(properties, "commit.time").     coercePropertyToEpoch(properties, "build.time").     Object commitId = properties.get("commit.id").     if (commitId != null) {         // Can get converted into a map, so we copy the entry as a nested key         properties.put("commit.id.full", commitId).     }     return properties. }
false;private,static;2;6;;private static void coercePropertyToEpoch(Properties properties, String key) {     String value = properties.getProperty(key).     if (value != null) {         properties.setProperty(key, coerceToEpoch(value)).     } }
true;private,static;1;13;/**  * Attempt to convert the specified value to epoch time. Git properties information  * are known to be specified either as epoch time in seconds or using a specific date  * format.  * @param s the value to coerce to  * @return the epoch time in milliseconds or the original value if it couldn't be  * converted  */ ;/**  * Attempt to convert the specified value to epoch time. Git properties information  * are known to be specified either as epoch time in seconds or using a specific date  * format.  * @param s the value to coerce to  * @return the epoch time in milliseconds or the original value if it couldn't be  * converted  */ private static String coerceToEpoch(String s) {     Long epoch = parseEpochSecond(s).     if (epoch != null) {         return String.valueOf(epoch).     }     SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").     try {         return String.valueOf(format.parse(s).getTime()).     } catch (ParseException ex) {         return s.     } }
false;private,static;1;8;;private static Long parseEpochSecond(String s) {     try {         return Long.parseLong(s) * 1000.     } catch (NumberFormatException ex) {         return null.     } }
