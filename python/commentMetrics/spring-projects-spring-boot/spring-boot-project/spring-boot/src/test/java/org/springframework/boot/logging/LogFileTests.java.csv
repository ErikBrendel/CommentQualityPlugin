commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void noProperties() {     PropertyResolver resolver = getPropertyResolver(Collections.emptyMap()).     LogFile logFile = LogFile.get(resolver).     assertThat(logFile).isNull(). }
false;public;0;6;;@Test public void loggingFile() {     PropertyResolver resolver = getPropertyResolver(Collections.singletonMap("logging.file.name", "log.file")).     testLoggingFile(resolver). }
false;public;0;7;;@Test @Deprecated public void loggingFileWithDeprecatedProperties() {     PropertyResolver resolver = getPropertyResolver(Collections.singletonMap("logging.file", "log.file")).     testLoggingFile(resolver). }
false;private;1;9;;private void testLoggingFile(PropertyResolver resolver) {     LogFile logFile = LogFile.get(resolver).     Properties properties = new Properties().     logFile.applyTo(properties).     assertThat(logFile.toString()).isEqualTo("log.file").     assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)).isEqualTo("log.file").     assertThat(properties.getProperty(LoggingSystemProperties.LOG_PATH)).isNull(). }
false;public;0;6;;@Test public void loggingPath() {     PropertyResolver resolver = getPropertyResolver(Collections.singletonMap("logging.file.path", "logpath")).     testLoggingPath(resolver). }
false;public;0;7;;@Test @Deprecated public void loggingPathWithDeprecatedProperties() {     PropertyResolver resolver = getPropertyResolver(Collections.singletonMap("logging.path", "logpath")).     testLoggingPath(resolver). }
false;private;1;11;;private void testLoggingPath(PropertyResolver resolver) {     LogFile logFile = LogFile.get(resolver).     Properties properties = new Properties().     logFile.applyTo(properties).     assertThat(logFile.toString()).isEqualTo("logpath" + File.separatorChar + "spring.log").     assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)).isEqualTo("logpath" + File.separatorChar + "spring.log").     assertThat(properties.getProperty(LoggingSystemProperties.LOG_PATH)).isEqualTo("logpath"). }
false;public;0;8;;@Test public void loggingFileAndPath() {     Map<String, Object> properties = new LinkedHashMap<>().     properties.put("logging.file.name", "log.file").     properties.put("logging.file.path", "logpath").     PropertyResolver resolver = getPropertyResolver(properties).     testLoggingFileAndPath(resolver). }
false;public;0;9;;@Test @Deprecated public void loggingFileAndPathWithDeprecatedProperties() {     Map<String, Object> properties = new LinkedHashMap<>().     properties.put("logging.file", "log.file").     properties.put("logging.path", "logpath").     PropertyResolver resolver = getPropertyResolver(properties).     testLoggingFileAndPath(resolver). }
false;private;1;10;;private void testLoggingFileAndPath(PropertyResolver resolver) {     LogFile logFile = LogFile.get(resolver).     Properties properties = new Properties().     logFile.applyTo(properties).     assertThat(logFile.toString()).isEqualTo("log.file").     assertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE)).isEqualTo("log.file").     assertThat(properties.getProperty(LoggingSystemProperties.LOG_PATH)).isEqualTo("logpath"). }
false;private;1;7;;private PropertyResolver getPropertyResolver(Map<String, Object> properties) {     PropertySource<?> propertySource = new MapPropertySource("properties", properties).     MutablePropertySources propertySources = new MutablePropertySources().     propertySources.addFirst(propertySource).     return new PropertySourcesPropertyResolver(propertySources). }
