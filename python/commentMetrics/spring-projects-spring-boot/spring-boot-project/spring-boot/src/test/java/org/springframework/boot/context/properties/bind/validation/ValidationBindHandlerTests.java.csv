commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     this.binder = new Binder(this.sources).     this.validator = new LocalValidatorFactoryBean().     this.validator.afterPropertiesSet().     this.handler = new ValidationBindHandler(this.validator). }
false;public;0;7;;@Test public void bindShouldBindWithoutHandler() {     this.sources.add(new MockConfigurationPropertySource("foo.age", 4)).     ExampleValidatedBean bean = this.binder.bind("foo", Bindable.of(ExampleValidatedBean.class)).get().     assertThat(bean.getAge()).isEqualTo(4). }
false;public;0;8;;@Test public void bindShouldFailWithHandler() {     this.sources.add(new MockConfigurationPropertySource("foo.age", 4)).     assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("foo", Bindable.of(ExampleValidatedBean.class), this.handler)).withCauseInstanceOf(BindValidationException.class). }
false;public;0;8;;@Test public void bindShouldValidateNestedProperties() {     this.sources.add(new MockConfigurationPropertySource("foo.nested.age", 4)).     assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("foo", Bindable.of(ExampleValidatedWithNestedBean.class), this.handler)).withCauseInstanceOf(BindValidationException.class). }
false;public;0;9;;@Test public void bindShouldFailWithAccessToOrigin() {     this.sources.add(new MockConfigurationPropertySource("foo.age", 4, "file")).     BindValidationException cause = bindAndExpectValidationError(() -> this.binder.bind(ConfigurationPropertyName.of("foo"), Bindable.of(ExampleValidatedBean.class), this.handler)).     ObjectError objectError = cause.getValidationErrors().getAllErrors().get(0).     assertThat(Origin.from(objectError).toString()).isEqualTo("file"). }
false;public;0;15;;@Test public void bindShouldFailWithAccessToBoundProperties() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.nested.name", "baz").     source.put("foo.nested.age", "4").     source.put("faf.bar", "baz").     this.sources.add(source).     BindValidationException cause = bindAndExpectValidationError(() -> this.binder.bind(ConfigurationPropertyName.of("foo"), Bindable.of(ExampleValidatedWithNestedBean.class), this.handler)).     Set<ConfigurationProperty> boundProperties = cause.getValidationErrors().getBoundProperties().     assertThat(boundProperties).extracting((p) -> p.getName().toString()).contains("foo.nested.age", "foo.nested.name"). }
false;public;0;9;;@Test public void bindShouldFailWithAccessToName() {     this.sources.add(new MockConfigurationPropertySource("foo.nested.age", "4")).     BindValidationException cause = bindAndExpectValidationError(() -> this.binder.bind(ConfigurationPropertyName.of("foo"), Bindable.of(ExampleValidatedWithNestedBean.class), this.handler)).     assertThat(cause.getValidationErrors().getName().toString()).isEqualTo("foo").     assertThat(cause.getMessage()).contains("nested.age"). }
false;public;0;11;;@Test public void bindShouldFailIfExistingValueIsInvalid() {     ExampleValidatedBean existingValue = new ExampleValidatedBean().     BindValidationException cause = bindAndExpectValidationError(() -> this.binder.bind(ConfigurationPropertyName.of("foo"), Bindable.of(ExampleValidatedBean.class).withExistingValue(existingValue), this.handler)).     FieldError fieldError = (FieldError) cause.getValidationErrors().getAllErrors().get(0).     assertThat(fieldError.getField()).isEqualTo("age"). }
false;public;0;9;;@Test public void bindShouldValidateWithoutAnnotation() {     ExampleNonValidatedBean existingValue = new ExampleNonValidatedBean().     bindAndExpectValidationError(() -> this.binder.bind(ConfigurationPropertyName.of("foo"), Bindable.of(ExampleNonValidatedBean.class).withExistingValue(existingValue), this.handler)). }
false;public;0;12;;@Test public void bindShouldNotValidateDepthGreaterThanZero() {     // gh-12227     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.bar", "baz").     this.sources.add(source).     ExampleValidatedBeanWithGetterException existingValue = new ExampleValidatedBeanWithGetterException().     this.binder.bind(ConfigurationPropertyName.of("foo"), Bindable.of(ExampleValidatedBeanWithGetterException.class).withExistingValue(existingValue), this.handler). }
false;public;0;12;;@Test public void bindShouldNotValidateIfOtherHandlersInChainThrowError() {     this.sources.add(new MockConfigurationPropertySource("foo", "hello")).     ExampleValidatedBean bean = new ExampleValidatedBean().     assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("foo", Bindable.of(ExampleValidatedBean.class).withExistingValue(bean), this.handler)).withCauseInstanceOf(ConverterNotFoundException.class). }
false;public;0;14;;@Test public void bindShouldValidateIfOtherHandlersInChainIgnoreError() {     TestHandler testHandler = new TestHandler().     this.handler = new ValidationBindHandler(testHandler, this.validator).     this.sources.add(new MockConfigurationPropertySource("foo", "hello")).     ExampleValidatedBean bean = new ExampleValidatedBean().     assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("foo", Bindable.of(ExampleValidatedBean.class).withExistingValue(bean), this.handler)).withCauseInstanceOf(BindValidationException.class). }
false;private;1;10;;private BindValidationException bindAndExpectValidationError(Runnable action) {     try {         action.run().     } catch (BindException ex) {         BindValidationException cause = (BindValidationException) ex.getCause().         return cause.     }     throw new IllegalStateException("Did not throw"). }
false;public;0;3;;public int getAge() {     return this.age. }
false;public;1;3;;public void setAge(int age) {     this.age = age. }
false;public;0;3;;public int getAge() {     return this.age. }
false;public;1;3;;public void setAge(int age) {     this.age = age. }
false;public;0;3;;public ExampleNested getNested() {     return this.nested. }
false;public;1;3;;public void setNested(ExampleNested nested) {     this.nested = nested. }
false;public;0;3;;public String getName() {     return this.name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public int getAge() {     return this.age. }
false;public;1;3;;public void setAge(int age) {     this.age = age. }
false;public;0;3;;public String getAddress() {     return this.address. }
false;public;1;3;;public void setAddress(String address) {     this.address = address. }
false;public;0;3;;public int getAge() {     throw new RuntimeException(). }
false;public;4;5;;@Override public Object onFailure(ConfigurationPropertyName name, Bindable<?> target, BindContext context, Exception error) throws Exception {     return null. }
