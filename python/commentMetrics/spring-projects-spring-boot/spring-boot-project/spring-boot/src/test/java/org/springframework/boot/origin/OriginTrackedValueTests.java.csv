commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void getValueShouldReturnValue() {     Object value = new Object().     assertThat(OriginTrackedValue.of(value).getValue()).isEqualTo(value). }
false;public;0;6;;@Test public void getOriginShouldReturnOrigin() {     Object value = new Object().     Origin origin = mock(Origin.class).     assertThat(OriginTrackedValue.of(value, origin).getOrigin()).isEqualTo(origin). }
false;public;0;5;;@Test public void toStringShouldReturnValueToString() {     Object value = new Object().     assertThat(OriginTrackedValue.of(value).toString()).isEqualTo(value.toString()). }
false;public;0;10;;@Test public void hashCodeAndEqualsShouldIgnoreOrigin() {     Object value1 = new Object().     OriginTrackedValue tracked1 = OriginTrackedValue.of(value1).     OriginTrackedValue tracked2 = OriginTrackedValue.of(value1, mock(Origin.class)).     OriginTrackedValue tracked3 = OriginTrackedValue.of(new Object()).     assertThat(tracked1.hashCode()).isEqualTo(tracked2.hashCode()).     assertThat(tracked1).isEqualTo(tracked1).isEqualTo(tracked2).isNotEqualTo(tracked3). }
false;public;0;5;;@Test public void ofWhenValueIsNullShouldReturnNull() {     assertThat(OriginTrackedValue.of(null)).isNull().     assertThat(OriginTrackedValue.of(null, mock(Origin.class))).isNull(). }
false;public;0;10;;@Test public void ofWhenValueIsCharSequenceShouldReturnCharSequence() {     String value = "foo".     OriginTrackedValue tracked = OriginTrackedValue.of(value).     assertThat(tracked).isInstanceOf(CharSequence.class).     CharSequence charSequence = (CharSequence) tracked.     assertThat(charSequence.length()).isEqualTo(value.length()).     assertThat(charSequence.charAt(0)).isEqualTo(value.charAt(0)).     assertThat(charSequence.subSequence(0, 1)).isEqualTo(value.subSequence(0, 1)). }
