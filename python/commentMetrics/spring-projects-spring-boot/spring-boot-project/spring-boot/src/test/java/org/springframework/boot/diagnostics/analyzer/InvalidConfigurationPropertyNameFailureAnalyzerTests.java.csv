commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void analysisWhenRootCauseIsBeanCreationFailureShouldContainBeanName() {     BeanCreationException failure = createFailure(InvalidPrefixConfiguration.class).     FailureAnalysis analysis = this.analyzer.analyze(failure).     assertThat(analysis.getDescription()).contains(String.format("%n    Invalid characters: %s%n    Bean: %s%n    Reason: %s", "'F', 'P'", "invalidPrefixProperties", "Canonical names should be kebab-case ('-' separated), " + "lowercase alpha-numeric characters and must start with a letter")). }
false;private;1;12;;private BeanCreationException createFailure(Class<?> configuration) {     try {         AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().         context.register(configuration).         context.refresh().         context.close().         return null.     } catch (BeanCreationException ex) {         return ex.     } }
false;public;0;4;;@Bean(name = "invalidPrefixProperties") public InvalidPrefixProperties invalidPrefixProperties() {     return new InvalidPrefixProperties(). }
false;public;0;3;;public String getValue() {     return this.value. }
false;public;1;3;;public void setValue(String value) {     this.value = value. }
