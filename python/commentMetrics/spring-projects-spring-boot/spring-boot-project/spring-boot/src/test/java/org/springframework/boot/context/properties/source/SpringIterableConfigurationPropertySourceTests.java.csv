commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void createWhenPropertySourceIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new SpringIterableConfigurationPropertySource(null, mock(PropertyMapper.class))).withMessageContaining("PropertySource must not be null"). }
false;public;0;7;;@Test public void createWhenMapperIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new SpringIterableConfigurationPropertySource(mock(EnumerablePropertySource.class), null)).withMessageContaining("Mapper must not be null"). }
false;public;0;18;;@Test public void iteratorShouldAdaptNames() {     Map<String, Object> source = new LinkedHashMap<>().     source.put("key1", "value1").     source.put("key2", "value2").     source.put("key3", "value3").     source.put("key4", "value4").     EnumerablePropertySource<?> propertySource = new MapPropertySource("test", source).     TestPropertyMapper mapper = new TestPropertyMapper().     mapper.addFromPropertySource("key1", "my.key1").     mapper.addFromPropertySource("key2", "my.key2a", "my.key2b").     mapper.addFromPropertySource("key4", "my.key4").     SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(propertySource, mapper).     assertThat(adapter.iterator()).extracting(Object::toString).containsExactly("my.key1", "my.key2a", "my.key2b", "my.key4"). }
false;public;0;15;;@Test public void getValueShouldUseDirectMapping() {     Map<String, Object> source = new LinkedHashMap<>().     source.put("key1", "value1").     source.put("key2", "value2").     source.put("key3", "value3").     EnumerablePropertySource<?> propertySource = new MapPropertySource("test", source).     TestPropertyMapper mapper = new TestPropertyMapper().     ConfigurationPropertyName name = ConfigurationPropertyName.of("my.key").     mapper.addFromConfigurationProperty(name, "key2").     SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(propertySource, mapper).     assertThat(adapter.getConfigurationProperty(name).getValue()).isEqualTo("value2"). }
false;public;0;16;;@Test public void getValueShouldUseEnumerableMapping() {     Map<String, Object> source = new LinkedHashMap<>().     source.put("key1", "value1").     source.put("key2", "value2").     source.put("key3", "value3").     EnumerablePropertySource<?> propertySource = new MapPropertySource("test", source).     TestPropertyMapper mapper = new TestPropertyMapper().     mapper.addFromPropertySource("key1", "my.missing").     mapper.addFromPropertySource("key2", "my.k-e-y").     SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(propertySource, mapper).     ConfigurationPropertyName name = ConfigurationPropertyName.of("my.key").     assertThat(adapter.getConfigurationProperty(name).getValue()).isEqualTo("value2"). }
false;public;0;14;;@Test public void getValueOrigin() {     Map<String, Object> source = new LinkedHashMap<>().     source.put("key", "value").     EnumerablePropertySource<?> propertySource = new MapPropertySource("test", source).     TestPropertyMapper mapper = new TestPropertyMapper().     ConfigurationPropertyName name = ConfigurationPropertyName.of("my.key").     mapper.addFromConfigurationProperty(name, "key").     SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(propertySource, mapper).     assertThat(adapter.getConfigurationProperty(name).getOrigin().toString()).isEqualTo("\"key\" from property source \"test\""). }
false;public;0;14;;@Test public void getValueWhenOriginCapableShouldIncludeSourceOrigin() {     Map<String, Object> source = new LinkedHashMap<>().     source.put("key", "value").     EnumerablePropertySource<?> propertySource = new OriginCapablePropertySource<>(new MapPropertySource("test", source)).     TestPropertyMapper mapper = new TestPropertyMapper().     ConfigurationPropertyName name = ConfigurationPropertyName.of("my.key").     mapper.addFromConfigurationProperty(name, "key").     SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(propertySource, mapper).     assertThat(adapter.getConfigurationProperty(name).getOrigin().toString()).isEqualTo("TestOrigin key"). }
false;public;0;16;;@Test public void containsDescendantOfShouldCheckSourceNames() {     Map<String, Object> source = new LinkedHashMap<>().     source.put("foo.bar", "value").     source.put("faf", "value").     EnumerablePropertySource<?> propertySource = new OriginCapablePropertySource<>(new MapPropertySource("test", source)).     SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(propertySource, DefaultPropertyMapper.INSTANCE).     assertThat(adapter.containsDescendantOf(ConfigurationPropertyName.of("foo"))).isEqualTo(ConfigurationPropertyState.PRESENT).     assertThat(adapter.containsDescendantOf(ConfigurationPropertyName.of("faf"))).isEqualTo(ConfigurationPropertyState.ABSENT).     assertThat(adapter.containsDescendantOf(ConfigurationPropertyName.of("fof"))).isEqualTo(ConfigurationPropertyState.ABSENT). }
false;public;0;13;;@Test public void propertySourceKeyDataChangeInvalidatesCache() {     // gh-13344     Map<String, Object> map = new LinkedHashMap<>().     map.put("key1", "value1").     map.put("key2", "value2").     EnumerablePropertySource<?> source = new MapPropertySource("test", map).     SpringIterableConfigurationPropertySource adapter = new SpringIterableConfigurationPropertySource(source, DefaultPropertyMapper.INSTANCE).     assertThat(adapter.stream().count()).isEqualTo(2).     map.put("key3", "value3").     assertThat(adapter.stream().count()).isEqualTo(3). }
false;public;1;4;;@Override public Object getProperty(String name) {     return this.propertySource.getProperty(name). }
false;public;0;4;;@Override public String[] getPropertyNames() {     return this.propertySource.getPropertyNames(). }
false;public;0;4;;@Override public String toString() {     return "TestOrigin " + name. }
false;public;1;11;;@Override public Origin getOrigin(String name) {     return new Origin() {          @Override         public String toString() {             return "TestOrigin " + name.         }     }. }
