commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void createWhenPropertySourceIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new PropertySourceOrigin(null, "name")).withMessageContaining("PropertySource must not be null"). }
false;public;0;7;;@Test public void createWhenPropertyNameIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new PropertySourceOrigin(mock(PropertySource.class), null)).withMessageContaining("PropertyName must not be empty"). }
false;public;0;7;;@Test public void createWhenPropertyNameIsEmptyShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new PropertySourceOrigin(mock(PropertySource.class), "")).withMessageContaining("PropertyName must not be empty"). }
false;public;0;6;;@Test public void getPropertySourceShouldReturnPropertySource() {     MapPropertySource propertySource = new MapPropertySource("test", new HashMap<>()).     PropertySourceOrigin origin = new PropertySourceOrigin(propertySource, "foo").     assertThat(origin.getPropertySource()).isEqualTo(propertySource). }
false;public;0;6;;@Test public void getPropertyNameShouldReturnPropertyName() {     MapPropertySource propertySource = new MapPropertySource("test", new HashMap<>()).     PropertySourceOrigin origin = new PropertySourceOrigin(propertySource, "foo").     assertThat(origin.getPropertyName()).isEqualTo("foo"). }
false;public;0;6;;@Test public void toStringShouldShowDetails() {     MapPropertySource propertySource = new MapPropertySource("test", new HashMap<>()).     PropertySourceOrigin origin = new PropertySourceOrigin(propertySource, "foo").     assertThat(origin.toString()).isEqualTo("\"foo\" from property source \"test\""). }
false;public;0;10;;@Test @SuppressWarnings("unchecked") public void getWhenPropertySourceSupportsOriginLookupShouldReturnOrigin() {     Origin origin = mock(Origin.class).     PropertySource<?> propertySource = mock(PropertySource.class, withSettings().extraInterfaces(OriginLookup.class)).     OriginLookup<String> originCapablePropertySource = (OriginLookup<String>) propertySource.     given(originCapablePropertySource.getOrigin("foo")).willReturn(origin).     assertThat(PropertySourceOrigin.get(propertySource, "foo")).isSameAs(origin). }
false;public;0;7;;@Test public void getWhenPropertySourceSupportsOriginLookupButNoOriginShouldWrap() {     PropertySource<?> propertySource = mock(PropertySource.class, withSettings().extraInterfaces(OriginLookup.class)).     assertThat(PropertySourceOrigin.get(propertySource, "foo")).isInstanceOf(PropertySourceOrigin.class). }
false;public;0;7;;@Test public void getWhenPropertySourceIsNotOriginAwareShouldWrap() {     MapPropertySource propertySource = new MapPropertySource("test", new HashMap<>()).     PropertySourceOrigin origin = new PropertySourceOrigin(propertySource, "foo").     assertThat(origin.getPropertySource()).isEqualTo(propertySource).     assertThat(origin.getPropertyName()).isEqualTo("foo"). }
