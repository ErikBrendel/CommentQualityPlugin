commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void includeJarWithStaticResources() throws Exception {     File jarFile = createResourcesJar("test-resources.jar").     List<URL> staticResourceJarUrls = new StaticResourceJars().getUrlsFrom(jarFile.toURI().toURL()).     assertThat(staticResourceJarUrls).hasSize(1). }
false;public;0;7;;@Test public void includeJarWithStaticResourcesWithUrlEncodedSpaces() throws Exception {     File jarFile = createResourcesJar("test resources.jar").     List<URL> staticResourceJarUrls = new StaticResourceJars().getUrlsFrom(jarFile.toURI().toURL()).     assertThat(staticResourceJarUrls).hasSize(1). }
false;public;0;7;;@Test public void includeJarWithStaticResourcesWithPlusInItsPath() throws Exception {     File jarFile = createResourcesJar("test + resources.jar").     List<URL> staticResourceJarUrls = new StaticResourceJars().getUrlsFrom(jarFile.toURI().toURL()).     assertThat(staticResourceJarUrls).hasSize(1). }
false;public;0;7;;@Test public void excludeJarWithoutStaticResources() throws Exception {     File jarFile = createJar("dependency.jar").     List<URL> staticResourceJarUrls = new StaticResourceJars().getUrlsFrom(jarFile.toURI().toURL()).     assertThat(staticResourceJarUrls).hasSize(0). }
false;public;0;7;;@Test public void uncPathsAreTolerated() throws Exception {     File jarFile = createResourcesJar("test-resources.jar").     List<URL> staticResourceJarUrls = new StaticResourceJars().getUrlsFrom(jarFile.toURI().toURL(), new URL("file://unc.example.com/test.jar")).     assertThat(staticResourceJarUrls).hasSize(1). }
false;private;1;12;;private File createResourcesJar(String name) throws IOException {     return createJar(name, (output) -> {         JarEntry jarEntry = new JarEntry("META-INF/resources").         try {             output.putNextEntry(jarEntry).             output.closeEntry().         } catch (IOException ex) {             throw new RuntimeException(ex).         }     }). }
false;private;1;3;;private File createJar(String name) throws IOException {     return createJar(name, null). }
false;private;2;11;;private File createJar(String name, Consumer<JarOutputStream> customizer) throws IOException {     File jarFile = this.temporaryFolder.newFile(name).     JarOutputStream jarOutputStream = new JarOutputStream(new FileOutputStream(jarFile)).     if (customizer != null) {         customizer.accept(jarOutputStream).     }     jarOutputStream.close().     return jarFile. }
