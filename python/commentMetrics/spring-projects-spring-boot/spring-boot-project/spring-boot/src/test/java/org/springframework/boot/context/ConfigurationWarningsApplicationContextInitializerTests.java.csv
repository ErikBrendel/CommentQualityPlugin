commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void logWarningInDefaultPackage() {     load(InDefaultPackageConfiguration.class).     assertThat(this.output.toString()).contains(DEFAULT_SCAN_WARNING). }
false;public;0;5;;@Test public void logWarningInDefaultPackageAndMetaAnnotation() {     load(InDefaultPackageWithMetaAnnotationConfiguration.class).     assertThat(this.output.toString()).contains(DEFAULT_SCAN_WARNING). }
false;public;0;5;;@Test public void noLogIfInRealPackage() {     load(InRealPackageConfiguration.class).     assertThat(this.output.toString()).doesNotContain(DEFAULT_SCAN_WARNING). }
false;public;0;5;;@Test public void noLogWithoutComponentScanAnnotation() {     load(InDefaultPackageWithoutScanConfiguration.class).     assertThat(this.output.toString()).doesNotContain(DEFAULT_SCAN_WARNING). }
false;public;0;5;;@Test public void noLogIfHasValue() {     load(InDefaultPackageWithValueConfiguration.class).     assertThat(this.output.toString()).doesNotContain(DEFAULT_SCAN_WARNING). }
false;public;0;5;;@Test public void noLogIfHasBasePackages() {     load(InDefaultPackageWithBasePackagesConfiguration.class).     assertThat(this.output.toString()).doesNotContain(DEFAULT_SCAN_WARNING). }
false;public;0;5;;@Test public void noLogIfHasBasePackageClasses() {     load(InDefaultPackageWithBasePackageClassesConfiguration.class).     assertThat(this.output.toString()).doesNotContain(DEFAULT_SCAN_WARNING). }
false;public;0;5;;@Test public void logWarningInOrgSpringPackage() {     load(InOrgSpringPackageConfiguration.class).     assertThat(this.output.toString()).contains(ORGSPRING_SCAN_WARNING). }
false;public;0;8;;@Test public void logWarningIfScanningProblemPackages() {     load(InRealButScanningProblemPackages.class).     assertThat(this.output.toString()).contains("Your ApplicationContext is unlikely to start due to a " + "@ComponentScan of the default package, 'org.springframework'."). }
false;private;1;8;;private void load(Class<?> configClass) {     try (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext()) {         new TestConfigurationWarningsApplicationContextInitializer().initialize(context).         context.register(configClass).         context.refresh().     } }
false;protected;0;4;;@Override protected Check[] getChecks() {     return new Check[] { new TestComponentScanPackageCheck() }. }
false;protected;1;18;;@Override protected Set<String> getComponentScanningPackages(BeanDefinitionRegistry registry) {     Set<String> scannedPackages = super.getComponentScanningPackages(registry).     Set<String> result = new LinkedHashSet<>().     for (String scannedPackage : scannedPackages) {         if (scannedPackage.endsWith("dflt")) {             result.add("").         } else if (scannedPackage.endsWith("orgspring")) {             result.add("org.springframework").         } else {             result.add(scannedPackage).         }     }     return result. }
