commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     this.loggingSystem.cleanUp().     this.logger = LogManager.getLogger(getClass()). }
false;public;0;6;;@Override @After public void clear() {     super.clear().     this.loggingSystem.cleanUp(). }
false;public;0;12;;@Test public void noFile() {     this.loggingSystem.beforeInitialize().     this.logger.info("Hidden").     this.loggingSystem.initialize(null, null, null).     this.logger.info("Hello world").     String output = this.output.toString().trim().     Configuration configuration = this.loggingSystem.getConfiguration().     assertThat(output).contains("Hello world").doesNotContain("Hidden").     assertThat(new File(tmpDir() + "/spring.log").exists()).isFalse().     assertThat(configuration.getConfigurationSource().getFile()).isNotNull(). }
false;public;0;12;;@Test public void withFile() {     this.loggingSystem.beforeInitialize().     this.logger.info("Hidden").     this.loggingSystem.initialize(null, null, getLogFile(null, tmpDir())).     this.logger.info("Hello world").     String output = this.output.toString().trim().     Configuration configuration = this.loggingSystem.getConfiguration().     assertThat(output).contains("Hello world").doesNotContain("Hidden").     assertThat(new File(tmpDir() + "/spring.log").exists()).isTrue().     assertThat(configuration.getConfigurationSource().getFile()).isNotNull(). }
false;public;0;14;;@Test public void testNonDefaultConfigLocation() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(null, "classpath:log4j2-nondefault.xml", getLogFile(tmpDir() + "/tmp.log", null)).     this.logger.info("Hello world").     String output = this.output.toString().trim().     Configuration configuration = this.loggingSystem.getConfiguration().     assertThat(output).contains("Hello world").contains(tmpDir() + "/tmp.log").     assertThat(new File(tmpDir() + "/tmp.log").exists()).isFalse().     assertThat(configuration.getConfigurationSource().getFile().getAbsolutePath()).contains("log4j2-nondefault.xml").     assertThat(configuration.getWatchManager().getIntervalSeconds()).isEqualTo(30). }
false;public;0;5;;@Test(expected = IllegalStateException.class) public void testNonexistentConfigLocation() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(null, "classpath:log4j2-nonexistent.xml", null). }
false;public;0;5;;@Test public void getSupportedLevels() {     assertThat(this.loggingSystem.getSupportedLogLevels()).isEqualTo(EnumSet.allOf(LogLevel.class)). }
false;public;0;10;;@Test public void setLevel() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(null, null, null).     this.logger.debug("Hello").     this.loggingSystem.setLogLevel("org.springframework.boot", LogLevel.DEBUG).     this.logger.debug("Hello").     assertThat(StringUtils.countOccurrencesOf(this.output.toString(), "Hello")).isEqualTo(1). }
false;public;0;12;;@Test public void setLevelToNull() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(null, null, null).     this.logger.debug("Hello").     this.loggingSystem.setLogLevel("org.springframework.boot", LogLevel.DEBUG).     this.logger.debug("Hello").     this.loggingSystem.setLogLevel("org.springframework.boot", null).     this.logger.debug("Hello").     assertThat(StringUtils.countOccurrencesOf(this.output.toString(), "Hello")).isEqualTo(1). }
false;public;0;11;;@Test public void getLoggingConfigurations() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(null, null, null).     this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG).     List<LoggerConfiguration> configurations = this.loggingSystem.getLoggerConfigurations().     assertThat(configurations).isNotEmpty().     assertThat(configurations.get(0).getName()).isEqualTo(LoggingSystem.ROOT_LOGGER_NAME). }
false;public;0;10;;@Test public void getLoggingConfiguration() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(null, null, null).     this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG).     LoggerConfiguration configuration = this.loggingSystem.getLoggerConfiguration(getClass().getName()).     assertThat(configuration).isEqualTo(new LoggerConfiguration(getClass().getName(), LogLevel.DEBUG, LogLevel.DEBUG)). }
false;public;0;9;;@Test public void setLevelOfUnconfiguredLoggerDoesNotAffectRootConfiguration() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(null, null, null).     LogManager.getRootLogger().debug("Hello").     this.loggingSystem.setLogLevel("foo.bar.baz", LogLevel.DEBUG).     LogManager.getRootLogger().debug("Hello").     assertThat(this.output.toString()).doesNotContain("Hello"). }
false;public;0;10;;@Test public void loggingThatUsesJulIsCaptured() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(null, null, null).     java.util.logging.Logger julLogger = java.util.logging.Logger.getLogger(getClass().getName()).     julLogger.severe("Hello world").     String output = this.output.toString().trim().     assertThat(output).contains("Hello world"). }
false;public;0;5;;@Test public void configLocationsWithNoExtraDependencies() {     assertThat(this.loggingSystem.getStandardConfigLocations()).contains("log4j2.xml"). }
false;public;0;6;;@Test public void configLocationsWithJacksonDatabind() {     this.loggingSystem.availableClasses(ObjectMapper.class.getName()).     assertThat(this.loggingSystem.getStandardConfigLocations()).contains("log4j2.json", "log4j2.jsn", "log4j2.xml"). }
false;public;0;7;;@Test public void configLocationsWithJacksonDataformatYaml() {     this.loggingSystem.availableClasses("com.fasterxml.jackson.dataformat.yaml.YAMLParser").     assertThat(this.loggingSystem.getStandardConfigLocations()).contains("log4j2.yaml", "log4j2.yml", "log4j2.xml"). }
false;public;0;8;;@Test public void configLocationsWithJacksonDatabindAndDataformatYaml() {     this.loggingSystem.availableClasses("com.fasterxml.jackson.dataformat.yaml.YAMLParser", ObjectMapper.class.getName()).     assertThat(this.loggingSystem.getStandardConfigLocations()).contains("log4j2.yaml", "log4j2.yml", "log4j2.json", "log4j2.jsn", "log4j2.xml"). }
false;public;0;5;;@Test public void springConfigLocations() {     String[] locations = getSpringConfigLocations(this.loggingSystem).     assertThat(locations).isEqualTo(new String[] { "log4j2-spring.xml" }). }
false;public;0;10;;@Test public void exceptionsIncludeClassPackaging() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(null, null, getLogFile(null, tmpDir())).     Matcher<String> expectedOutput = containsString("[junit-").     this.output.expect(expectedOutput).     this.logger.warn("Expected exception", new RuntimeException("Expected")).     String fileContents = contentOf(new File(tmpDir() + "/spring.log")).     assertThat(fileContents).is(Matched.by(expectedOutput)). }
false;public;0;6;;@Test public void beforeInitializeFilterDisablesErrorLogging() {     this.loggingSystem.beforeInitialize().     assertThat(this.logger.isErrorEnabled()).isFalse().     this.loggingSystem.initialize(null, null, getLogFile(null, tmpDir())). }
false;public;0;20;;@Test public void customExceptionConversionWord() {     System.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, "%ex").     try {         this.loggingSystem.beforeInitialize().         this.logger.info("Hidden").         this.loggingSystem.initialize(null, null, getLogFile(null, tmpDir())).         Matcher<String> expectedOutput = Matchers.allOf(containsString("java.lang.RuntimeException: Expected"), not(containsString("Wrapped by:"))).         this.output.expect(expectedOutput).         this.logger.warn("Expected exception", new RuntimeException("Expected", new RuntimeException("Cause"))).         String fileContents = contentOf(new File(tmpDir() + "/spring.log")).         assertThat(fileContents).is(Matched.by(expectedOutput)).     } finally {         System.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD).     } }
false;public;0;17;;@Test public void initializationIsOnlyPerformedOnceUntilCleanedUp() {     LoggerContext loggerContext = (LoggerContext) LogManager.getContext(false).     PropertyChangeListener listener = mock(PropertyChangeListener.class).     loggerContext.addPropertyChangeListener(listener).     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(null, null, null).     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(null, null, null).     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(null, null, null).     verify(listener, times(2)).propertyChange(any(PropertyChangeEvent.class)).     this.loggingSystem.cleanUp().     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(null, null, null).     verify(listener, times(4)).propertyChange(any(PropertyChangeEvent.class)). }
false;public;0;4;;public Configuration getConfiguration() {     return ((org.apache.logging.log4j.core.LoggerContext) LogManager.getContext(false)).getConfiguration(). }
false;protected;1;4;;@Override protected boolean isClassAvailable(String className) {     return this.availableClasses.contains(className). }
false;private;1;3;;private void availableClasses(String... classNames) {     Collections.addAll(this.availableClasses, classNames). }
