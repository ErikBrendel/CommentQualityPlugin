commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void isTraceEnabled() {     assertThat(this.deferredLog.isTraceEnabled()).isTrue(). }
false;public;0;4;;@Test public void isDebugEnabled() {     assertThat(this.deferredLog.isDebugEnabled()).isTrue(). }
false;public;0;4;;@Test public void isInfoEnabled() {     assertThat(this.deferredLog.isInfoEnabled()).isTrue(). }
false;public;0;4;;@Test public void isWarnEnabled() {     assertThat(this.deferredLog.isWarnEnabled()).isTrue(). }
false;public;0;4;;@Test public void isErrorEnabled() {     assertThat(this.deferredLog.isErrorEnabled()).isTrue(). }
false;public;0;4;;@Test public void isFatalEnabled() {     assertThat(this.deferredLog.isFatalEnabled()).isTrue(). }
false;public;0;6;;@Test public void trace() {     this.deferredLog.trace(this.message).     this.deferredLog.replayTo(this.log).     verify(this.log).trace(this.message, null). }
false;public;0;6;;@Test public void traceWithThrowable() {     this.deferredLog.trace(this.message, this.throwable).     this.deferredLog.replayTo(this.log).     verify(this.log).trace(this.message, this.throwable). }
false;public;0;6;;@Test public void debug() {     this.deferredLog.debug(this.message).     this.deferredLog.replayTo(this.log).     verify(this.log).debug(this.message, null). }
false;public;0;6;;@Test public void debugWithThrowable() {     this.deferredLog.debug(this.message, this.throwable).     this.deferredLog.replayTo(this.log).     verify(this.log).debug(this.message, this.throwable). }
false;public;0;6;;@Test public void info() {     this.deferredLog.info(this.message).     this.deferredLog.replayTo(this.log).     verify(this.log).info(this.message, null). }
false;public;0;6;;@Test public void infoWithThrowable() {     this.deferredLog.info(this.message, this.throwable).     this.deferredLog.replayTo(this.log).     verify(this.log).info(this.message, this.throwable). }
false;public;0;6;;@Test public void warn() {     this.deferredLog.warn(this.message).     this.deferredLog.replayTo(this.log).     verify(this.log).warn(this.message, null). }
false;public;0;6;;@Test public void warnWithThrowable() {     this.deferredLog.warn(this.message, this.throwable).     this.deferredLog.replayTo(this.log).     verify(this.log).warn(this.message, this.throwable). }
false;public;0;6;;@Test public void error() {     this.deferredLog.error(this.message).     this.deferredLog.replayTo(this.log).     verify(this.log).error(this.message, null). }
false;public;0;6;;@Test public void errorWithThrowable() {     this.deferredLog.error(this.message, this.throwable).     this.deferredLog.replayTo(this.log).     verify(this.log).error(this.message, this.throwable). }
false;public;0;6;;@Test public void fatal() {     this.deferredLog.fatal(this.message).     this.deferredLog.replayTo(this.log).     verify(this.log).fatal(this.message, null). }
false;public;0;6;;@Test public void fatalWithThrowable() {     this.deferredLog.fatal(this.message, this.throwable).     this.deferredLog.replayTo(this.log).     verify(this.log).fatal(this.message, this.throwable). }
false;public;0;12;;@Test public void clearsOnReplayTo() {     this.deferredLog.info("1").     this.deferredLog.fatal("2").     Log log2 = mock(Log.class).     this.deferredLog.replayTo(this.log).     this.deferredLog.replayTo(log2).     verify(this.log).info("1", null).     verify(this.log).fatal("2", null).     verifyNoMoreInteractions(this.log).     verifyZeroInteractions(log2). }
false;public;0;19;;@SuppressWarnings("unchecked") @Test public void switchTo() {     List<String> lines = (List<String>) ReflectionTestUtils.getField(this.deferredLog, "lines").     assertThat(lines).isEmpty().     this.deferredLog.error(this.message, this.throwable).     assertThat(lines).hasSize(1).     this.deferredLog.switchTo(this.log).     assertThat(lines).isEmpty().     this.deferredLog.info("Message2").     assertThat(lines).isEmpty().     verify(this.log).error(this.message, this.throwable).     verify(this.log).info("Message2", null). }
