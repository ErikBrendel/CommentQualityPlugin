commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void after() {     if (this.context != null) {         this.context.close().     } }
false;public;0;8;;@Test public void packagesConfiguredWithValue() {     this.context = new AnnotationConfigApplicationContext(ValuePackages.class).     ServletComponentRegisteringPostProcessor postProcessor = this.context.getBean(ServletComponentRegisteringPostProcessor.class).     assertThat(postProcessor.getPackagesToScan()).contains("com.example.foo", "com.example.bar"). }
false;public;0;11;;@Test public void packagesConfiguredWithValueAsm() {     this.context = new AnnotationConfigApplicationContext().     this.context.registerBeanDefinition("valuePackages", new RootBeanDefinition(ValuePackages.class.getName())).     this.context.refresh().     ServletComponentRegisteringPostProcessor postProcessor = this.context.getBean(ServletComponentRegisteringPostProcessor.class).     assertThat(postProcessor.getPackagesToScan()).contains("com.example.foo", "com.example.bar"). }
false;public;0;8;;@Test public void packagesConfiguredWithBackPackages() {     this.context = new AnnotationConfigApplicationContext(BasePackages.class).     ServletComponentRegisteringPostProcessor postProcessor = this.context.getBean(ServletComponentRegisteringPostProcessor.class).     assertThat(postProcessor.getPackagesToScan()).contains("com.example.foo", "com.example.bar"). }
false;public;0;8;;@Test public void packagesConfiguredWithBasePackageClasses() {     this.context = new AnnotationConfigApplicationContext(BasePackageClasses.class).     ServletComponentRegisteringPostProcessor postProcessor = this.context.getBean(ServletComponentRegisteringPostProcessor.class).     assertThat(postProcessor.getPackagesToScan()).contains(getClass().getPackage().getName()). }
false;public;0;9;;@Test public void packagesConfiguredWithBothValueAndBasePackages() {     assertThatExceptionOfType(AnnotationConfigurationException.class).isThrownBy(() -> this.context = new AnnotationConfigApplicationContext(ValueAndBasePackages.class)).withMessageContaining("'value'").withMessageContaining("'basePackages'").withMessageContaining("com.example.foo").withMessageContaining("com.example.bar"). }
false;public;0;9;;@Test public void packagesFromMultipleAnnotationsAreMerged() {     this.context = new AnnotationConfigApplicationContext(BasePackages.class, AdditionalPackages.class).     ServletComponentRegisteringPostProcessor postProcessor = this.context.getBean(ServletComponentRegisteringPostProcessor.class).     assertThat(postProcessor.getPackagesToScan()).contains("com.example.foo", "com.example.bar", "com.example.baz"). }
false;public;0;8;;@Test public void withNoBasePackagesScanningUsesBasePackageOfAnnotatedClass() {     this.context = new AnnotationConfigApplicationContext(NoBasePackages.class).     ServletComponentRegisteringPostProcessor postProcessor = this.context.getBean(ServletComponentRegisteringPostProcessor.class).     assertThat(postProcessor.getPackagesToScan()).containsExactly("org.springframework.boot.web.servlet"). }
false;public;0;10;;@Test public void noBasePackageAndBasePackageAreCombinedCorrectly() {     this.context = new AnnotationConfigApplicationContext(NoBasePackages.class, BasePackages.class).     ServletComponentRegisteringPostProcessor postProcessor = this.context.getBean(ServletComponentRegisteringPostProcessor.class).     assertThat(postProcessor.getPackagesToScan()).containsExactlyInAnyOrder("org.springframework.boot.web.servlet", "com.example.foo", "com.example.bar"). }
false;public;0;10;;@Test public void basePackageAndNoBasePackageAreCombinedCorrectly() {     this.context = new AnnotationConfigApplicationContext(BasePackages.class, NoBasePackages.class).     ServletComponentRegisteringPostProcessor postProcessor = this.context.getBean(ServletComponentRegisteringPostProcessor.class).     assertThat(postProcessor.getPackagesToScan()).containsExactlyInAnyOrder("org.springframework.boot.web.servlet", "com.example.foo", "com.example.bar"). }
