commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void includeTimeStamp() {     Map<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest, false).     assertThat(attributes.get("timestamp")).isInstanceOf(Date.class). }
false;public;0;9;;@Test public void specificStatusCode() {     this.request.setAttribute("javax.servlet.error.status_code", 404).     Map<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest, false).     assertThat(attributes.get("error")).isEqualTo(HttpStatus.NOT_FOUND.getReasonPhrase()).     assertThat(attributes.get("status")).isEqualTo(404). }
false;public;0;7;;@Test public void missingStatusCode() {     Map<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest, false).     assertThat(attributes.get("error")).isEqualTo("None").     assertThat(attributes.get("status")).isEqualTo(999). }
false;public;0;14;;@Test public void mvcError() {     RuntimeException ex = new RuntimeException("Test").     ModelAndView modelAndView = this.errorAttributes.resolveException(this.request, null, null, ex).     this.request.setAttribute("javax.servlet.error.exception", new RuntimeException("Ignored")).     Map<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest, false).     assertThat(this.errorAttributes.getError(this.webRequest)).isSameAs(ex).     assertThat(modelAndView).isNull().     assertThat(attributes.get("exception")).isNull().     assertThat(attributes.get("message")).isEqualTo("Test"). }
false;public;0;10;;@Test public void servletError() {     RuntimeException ex = new RuntimeException("Test").     this.request.setAttribute("javax.servlet.error.exception", ex).     Map<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest, false).     assertThat(this.errorAttributes.getError(this.webRequest)).isSameAs(ex).     assertThat(attributes.get("exception")).isNull().     assertThat(attributes.get("message")).isEqualTo("Test"). }
false;public;0;8;;@Test public void servletMessage() {     this.request.setAttribute("javax.servlet.error.message", "Test").     Map<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest, false).     assertThat(attributes.get("exception")).isNull().     assertThat(attributes.get("message")).isEqualTo("Test"). }
false;public;0;10;;@Test public void nullMessage() {     this.request.setAttribute("javax.servlet.error.exception", new RuntimeException()).     this.request.setAttribute("javax.servlet.error.message", "Test").     Map<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest, false).     assertThat(attributes.get("exception")).isNull().     assertThat(attributes.get("message")).isEqualTo("Test"). }
false;public;0;11;;@Test public void unwrapServletException() {     RuntimeException ex = new RuntimeException("Test").     ServletException wrapped = new ServletException(new ServletException(ex)).     this.request.setAttribute("javax.servlet.error.exception", wrapped).     Map<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest, false).     assertThat(this.errorAttributes.getError(this.webRequest)).isSameAs(wrapped).     assertThat(attributes.get("exception")).isNull().     assertThat(attributes.get("message")).isEqualTo("Test"). }
false;public;0;10;;@Test public void getError() {     Error error = new OutOfMemoryError("Test error").     this.request.setAttribute("javax.servlet.error.exception", error).     Map<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest, false).     assertThat(this.errorAttributes.getError(this.webRequest)).isSameAs(error).     assertThat(attributes.get("exception")).isNull().     assertThat(attributes.get("message")).isEqualTo("Test error"). }
false;public;0;8;;@Test public void extractBindingResultErrors() {     BindingResult bindingResult = new MapBindingResult(Collections.singletonMap("a", "b"), "objectName").     bindingResult.addError(new ObjectError("c", "d")).     Exception ex = new BindException(bindingResult).     testBindingResult(bindingResult, ex). }
false;public;0;8;;@Test public void extractMethodArgumentNotValidExceptionBindingResultErrors() {     BindingResult bindingResult = new MapBindingResult(Collections.singletonMap("a", "b"), "objectName").     bindingResult.addError(new ObjectError("c", "d")).     Exception ex = new MethodArgumentNotValidException(null, bindingResult).     testBindingResult(bindingResult, ex). }
false;private;2;8;;private void testBindingResult(BindingResult bindingResult, Exception ex) {     this.request.setAttribute("javax.servlet.error.exception", ex).     Map<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest, false).     assertThat(attributes.get("message")).isEqualTo("Validation failed for object='objectName'. Error count: 1").     assertThat(attributes.get("errors")).isEqualTo(bindingResult.getAllErrors()). }
false;public;0;11;;@Test public void withExceptionAttribute() {     DefaultErrorAttributes errorAttributes = new DefaultErrorAttributes(true).     RuntimeException ex = new RuntimeException("Test").     this.request.setAttribute("javax.servlet.error.exception", ex).     Map<String, Object> attributes = errorAttributes.getErrorAttributes(this.webRequest, false).     assertThat(attributes.get("exception")).isEqualTo(RuntimeException.class.getName()).     assertThat(attributes.get("message")).isEqualTo("Test"). }
false;public;0;8;;@Test public void trace() {     RuntimeException ex = new RuntimeException("Test").     this.request.setAttribute("javax.servlet.error.exception", ex).     Map<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest, true).     assertThat(attributes.get("trace").toString()).startsWith("java.lang"). }
false;public;0;8;;@Test public void noTrace() {     RuntimeException ex = new RuntimeException("Test").     this.request.setAttribute("javax.servlet.error.exception", ex).     Map<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest, false).     assertThat(attributes.get("trace")).isNull(). }
false;public;0;7;;@Test public void path() {     this.request.setAttribute("javax.servlet.error.request_uri", "path").     Map<String, Object> attributes = this.errorAttributes.getErrorAttributes(this.webRequest, false).     assertThat(attributes.get("path")).isEqualTo("path"). }
