commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@SuppressWarnings("unchecked") @Test public void defaultFilterConfiguration() throws IOException {     ScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(new SimpleMetadataReaderFactory().getMetadataReader(DefaultConfigurationFilter.class.getName())).     this.handler.handle(scanned, this.registry).     BeanDefinition filterRegistrationBean = this.registry.getBeanDefinition(DefaultConfigurationFilter.class.getName()).     MutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues().     assertThat(propertyValues.get("asyncSupported")).isEqualTo(false).     assertThat((EnumSet<DispatcherType>) propertyValues.get("dispatcherTypes")).containsExactly(DispatcherType.REQUEST).     assertThat(((Map<String, String>) propertyValues.get("initParameters"))).isEmpty().     assertThat((String[]) propertyValues.get("servletNames")).isEmpty().     assertThat((String[]) propertyValues.get("urlPatterns")).isEmpty().     assertThat(propertyValues.get("name")).isEqualTo(DefaultConfigurationFilter.class.getName()).     assertThat(propertyValues.get("filter")).isEqualTo(scanned). }
false;public;0;10;;@Test public void filterWithCustomName() throws IOException {     ScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(new SimpleMetadataReaderFactory().getMetadataReader(CustomNameFilter.class.getName())).     this.handler.handle(scanned, this.registry).     BeanDefinition filterRegistrationBean = this.registry.getBeanDefinition("custom").     MutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues().     assertThat(propertyValues.get("name")).isEqualTo("custom"). }
false;public;0;7;;@Test public void asyncSupported() throws IOException {     BeanDefinition filterRegistrationBean = getBeanDefinition(AsyncSupportedFilter.class).     MutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues().     assertThat(propertyValues.get("asyncSupported")).isEqualTo(true). }
false;public;0;10;;@Test @SuppressWarnings("unchecked") public void dispatcherTypes() throws IOException {     BeanDefinition filterRegistrationBean = getBeanDefinition(DispatcherTypesFilter.class).     MutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues().     assertThat((Set<DispatcherType>) propertyValues.get("dispatcherTypes")).containsExactly(DispatcherType.FORWARD, DispatcherType.INCLUDE, DispatcherType.REQUEST). }
false;public;0;9;;@SuppressWarnings("unchecked") @Test public void initParameters() throws IOException {     BeanDefinition filterRegistrationBean = getBeanDefinition(InitParametersFilter.class).     MutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues().     assertThat((Map<String, String>) propertyValues.get("initParameters")).containsEntry("a", "alpha").containsEntry("b", "bravo"). }
false;public;0;8;;@Test public void servletNames() throws IOException {     BeanDefinition filterRegistrationBean = getBeanDefinition(ServletNamesFilter.class).     MutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues().     assertThat((String[]) propertyValues.get("servletNames")).contains("alpha", "bravo"). }
false;public;0;8;;@Test public void urlPatterns() throws IOException {     BeanDefinition filterRegistrationBean = getBeanDefinition(UrlPatternsFilter.class).     MutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues().     assertThat((String[]) propertyValues.get("urlPatterns")).contains("alpha", "bravo"). }
false;public;0;8;;@Test public void urlPatternsFromValue() throws IOException {     BeanDefinition filterRegistrationBean = getBeanDefinition(UrlPatternsFromValueFilter.class).     MutablePropertyValues propertyValues = filterRegistrationBean.getPropertyValues().     assertThat((String[]) propertyValues.get("urlPatterns")).contains("alpha", "bravo"). }
false;public;0;7;;@Test public void urlPatternsDeclaredTwice() throws IOException {     assertThatIllegalStateException().isThrownBy(() -> getBeanDefinition(UrlPatternsDeclaredTwiceFilter.class)).withMessageContaining("The urlPatterns and value attributes are mutually exclusive."). }
false;;1;7;;BeanDefinition getBeanDefinition(Class<?> filterClass) throws IOException {     ScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(new SimpleMetadataReaderFactory().getMetadataReader(filterClass.getName())).     this.handler.handle(scanned, this.registry).     return this.registry.getBeanDefinition(filterClass.getName()). }
false;public;1;4;;@Override public void init(FilterConfig filterConfig) { }
false;public;3;4;;@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) { }
false;public;0;4;;@Override public void destroy() { }
