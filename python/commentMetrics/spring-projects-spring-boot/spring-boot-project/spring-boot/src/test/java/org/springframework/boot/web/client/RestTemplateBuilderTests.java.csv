commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     MockitoAnnotations.initMocks(this). }
false;public;0;7;;@Test public void createWhenCustomizersAreNullShouldThrowException() {     RestTemplateCustomizer[] customizers = null.     assertThatIllegalArgumentException().isThrownBy(() -> new RestTemplateBuilder(customizers)).withMessageContaining("Customizers must not be null"). }
false;public;0;6;;@Test public void createWithCustomizersShouldApplyCustomizers() {     RestTemplateCustomizer customizer = mock(RestTemplateCustomizer.class).     RestTemplate template = new RestTemplateBuilder(customizer).build().     verify(customizer).customize(template). }
false;public;0;6;;@Test public void buildShouldDetectRequestFactory() {     RestTemplate restTemplate = this.builder.build().     assertThat(restTemplate.getRequestFactory()).isInstanceOf(HttpComponentsClientHttpRequestFactory.class). }
false;public;0;6;;@Test public void detectRequestFactoryWhenFalseShouldDisableDetection() {     RestTemplate restTemplate = this.builder.detectRequestFactory(false).build().     assertThat(restTemplate.getRequestFactory()).isInstanceOf(SimpleClientHttpRequestFactory.class). }
false;public;0;8;;@Test public void rootUriShouldApply() {     RestTemplate restTemplate = this.builder.rootUri("http://example.com").build().     MockRestServiceServer server = MockRestServiceServer.bindTo(restTemplate).build().     server.expect(requestTo("http://example.com/hello")).andRespond(withSuccess()).     restTemplate.getForEntity("/hello", String.class).     server.verify(). }
false;public;0;10;;@Test public void rootUriShouldApplyAfterUriTemplateHandler() {     UriTemplateHandler uriTemplateHandler = mock(UriTemplateHandler.class).     RestTemplate template = this.builder.uriTemplateHandler(uriTemplateHandler).rootUri("http://example.com").build().     UriTemplateHandler handler = template.getUriTemplateHandler().     handler.expand("/hello").     assertThat(handler).isInstanceOf(RootUriTemplateHandler.class).     verify(uriTemplateHandler).expand("http://example.com/hello"). }
false;public;0;6;;@Test public void messageConvertersWhenConvertersAreNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.messageConverters((HttpMessageConverter<?>[]) null)).withMessageContaining("MessageConverters must not be null"). }
false;public;0;6;;@Test public void messageConvertersCollectionWhenConvertersAreNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.messageConverters((Set<HttpMessageConverter<?>>) null)).withMessageContaining("MessageConverters must not be null"). }
false;public;0;6;;@Test public void messageConvertersShouldApply() {     RestTemplate template = this.builder.messageConverters(this.messageConverter).build().     assertThat(template.getMessageConverters()).containsOnly(this.messageConverter). }
false;public;0;7;;@Test public void messageConvertersShouldReplaceExisting() {     RestTemplate template = this.builder.messageConverters(new ResourceHttpMessageConverter()).messageConverters(Collections.singleton(this.messageConverter)).build().     assertThat(template.getMessageConverters()).containsOnly(this.messageConverter). }
false;public;0;7;;@Test public void additionalMessageConvertersWhenConvertersAreNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.additionalMessageConverters((HttpMessageConverter<?>[]) null)).withMessageContaining("MessageConverters must not be null"). }
false;public;0;7;;@Test public void additionalMessageConvertersCollectionWhenConvertersAreNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.additionalMessageConverters((Set<HttpMessageConverter<?>>) null)).withMessageContaining("MessageConverters must not be null"). }
false;public;0;8;;@Test public void additionalMessageConvertersShouldAddToExisting() {     HttpMessageConverter<?> resourceConverter = new ResourceHttpMessageConverter().     RestTemplate template = this.builder.messageConverters(resourceConverter).additionalMessageConverters(this.messageConverter).build().     assertThat(template.getMessageConverters()).containsOnly(resourceConverter, this.messageConverter). }
false;public;0;8;;@Test public void defaultMessageConvertersShouldSetDefaultList() {     RestTemplate template = new RestTemplate(Collections.singletonList(new StringHttpMessageConverter())).     this.builder.defaultMessageConverters().configure(template).     assertThat(template.getMessageConverters()).hasSameSizeAs(new RestTemplate().getMessageConverters()). }
false;public;0;9;;@Test public void defaultMessageConvertersShouldClearExisting() {     RestTemplate template = new RestTemplate(Collections.singletonList(new StringHttpMessageConverter())).     this.builder.additionalMessageConverters(this.messageConverter).defaultMessageConverters().configure(template).     assertThat(template.getMessageConverters()).hasSameSizeAs(new RestTemplate().getMessageConverters()). }
false;public;0;6;;@Test public void interceptorsWhenInterceptorsAreNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.interceptors((ClientHttpRequestInterceptor[]) null)).withMessageContaining("interceptors must not be null"). }
false;public;0;6;;@Test public void interceptorsCollectionWhenInterceptorsAreNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.interceptors((Set<ClientHttpRequestInterceptor>) null)).withMessageContaining("interceptors must not be null"). }
false;public;0;5;;@Test public void interceptorsShouldApply() {     RestTemplate template = this.builder.interceptors(this.interceptor).build().     assertThat(template.getInterceptors()).containsOnly(this.interceptor). }
false;public;0;7;;@Test public void interceptorsShouldReplaceExisting() {     RestTemplate template = this.builder.interceptors(mock(ClientHttpRequestInterceptor.class)).interceptors(Collections.singleton(this.interceptor)).build().     assertThat(template.getInterceptors()).containsOnly(this.interceptor). }
false;public;0;7;;@Test public void additionalInterceptorsWhenInterceptorsAreNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.additionalInterceptors((ClientHttpRequestInterceptor[]) null)).withMessageContaining("interceptors must not be null"). }
false;public;0;7;;@Test public void additionalInterceptorsCollectionWhenInterceptorsAreNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.additionalInterceptors((Set<ClientHttpRequestInterceptor>) null)).withMessageContaining("interceptors must not be null"). }
false;public;0;9;;@Test public void additionalInterceptorsShouldAddToExisting() {     ClientHttpRequestInterceptor interceptor = mock(ClientHttpRequestInterceptor.class).     RestTemplate template = this.builder.interceptors(interceptor).additionalInterceptors(this.interceptor).build().     assertThat(template.getInterceptors()).containsOnly(interceptor, this.interceptor). }
false;public;0;6;;@Test public void requestFactoryClassWhenFactoryIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.requestFactory((Class<ClientHttpRequestFactory>) null)).withMessageContaining("RequestFactory must not be null"). }
false;public;0;7;;@Test public void requestFactoryClassShouldApply() {     RestTemplate template = this.builder.requestFactory(SimpleClientHttpRequestFactory.class).build().     assertThat(template.getRequestFactory()).isInstanceOf(SimpleClientHttpRequestFactory.class). }
false;public;0;7;;@Test public void requestFactoryPackagePrivateClassShouldApply() {     RestTemplate template = this.builder.requestFactory(TestClientHttpRequestFactory.class).build().     assertThat(template.getRequestFactory()).isInstanceOf(TestClientHttpRequestFactory.class). }
false;public;0;7;;@Test public void requestFactoryWhenSupplierIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.requestFactory((Supplier<ClientHttpRequestFactory>) null)).withMessageContaining("RequestFactory Supplier must not be null"). }
false;public;0;6;;@Test public void requestFactoryShouldApply() {     ClientHttpRequestFactory requestFactory = mock(ClientHttpRequestFactory.class).     RestTemplate template = this.builder.requestFactory(() -> requestFactory).build().     assertThat(template.getRequestFactory()).isSameAs(requestFactory). }
false;public;0;6;;@Test public void uriTemplateHandlerWhenHandlerIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.uriTemplateHandler(null)).withMessageContaining("UriTemplateHandler must not be null"). }
false;public;0;7;;@Test public void uriTemplateHandlerShouldApply() {     UriTemplateHandler uriTemplateHandler = mock(UriTemplateHandler.class).     RestTemplate template = this.builder.uriTemplateHandler(uriTemplateHandler).build().     assertThat(template.getUriTemplateHandler()).isSameAs(uriTemplateHandler). }
false;public;0;6;;@Test public void errorHandlerWhenHandlerIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.errorHandler(null)).withMessageContaining("ErrorHandler must not be null"). }
false;public;0;6;;@Test public void errorHandlerShouldApply() {     ResponseErrorHandler errorHandler = mock(ResponseErrorHandler.class).     RestTemplate template = this.builder.errorHandler(errorHandler).build().     assertThat(template.getErrorHandler()).isSameAs(errorHandler). }
false;public;0;9;;@Test public void basicAuthenticationShouldApply() {     RestTemplate template = this.builder.basicAuthentication("spring", "boot").build().     ClientHttpRequestInterceptor interceptor = template.getInterceptors().get(0).     assertThat(interceptor).isInstanceOf(BasicAuthenticationInterceptor.class).     assertThat(interceptor).extracting("username").containsExactly("spring").     assertThat(interceptor).extracting("password").containsExactly("boot"). }
false;public;0;7;;@Test public void customizersWhenCustomizersAreNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.customizers((RestTemplateCustomizer[]) null)).withMessageContaining("RestTemplateCustomizers must not be null"). }
false;public;0;6;;@Test public void customizersCollectionWhenCustomizersAreNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.customizers((Set<RestTemplateCustomizer>) null)).withMessageContaining("RestTemplateCustomizers must not be null"). }
false;public;0;6;;@Test public void customizersShouldApply() {     RestTemplateCustomizer customizer = mock(RestTemplateCustomizer.class).     RestTemplate template = this.builder.customizers(customizer).build().     verify(customizer).customize(template). }
false;public;0;7;;@Test public void customizersShouldBeAppliedLast() {     RestTemplate template = spy(new RestTemplate()).     this.builder.additionalCustomizers((restTemplate) -> verify(restTemplate).setRequestFactory(any(ClientHttpRequestFactory.class))).     this.builder.configure(template). }
false;public;0;9;;@Test public void customizersShouldReplaceExisting() {     RestTemplateCustomizer customizer1 = mock(RestTemplateCustomizer.class).     RestTemplateCustomizer customizer2 = mock(RestTemplateCustomizer.class).     RestTemplate template = this.builder.customizers(customizer1).customizers(Collections.singleton(customizer2)).build().     verifyZeroInteractions(customizer1).     verify(customizer2).customize(template). }
false;public;0;6;;@Test public void additionalCustomizersWhenCustomizersAreNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.additionalCustomizers((RestTemplateCustomizer[]) null)).withMessageContaining("RestTemplateCustomizers must not be null"). }
false;public;0;7;;@Test public void additionalCustomizersCollectionWhenCustomizersAreNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.builder.additionalCustomizers((Set<RestTemplateCustomizer>) null)).withMessageContaining("RestTemplateCustomizers must not be null"). }
false;public;0;10;;@Test public void additionalCustomizersShouldAddToExisting() {     RestTemplateCustomizer customizer1 = mock(RestTemplateCustomizer.class).     RestTemplateCustomizer customizer2 = mock(RestTemplateCustomizer.class).     RestTemplate template = this.builder.customizers(customizer1).additionalCustomizers(customizer2).build().     InOrder ordered = inOrder(customizer1, customizer2).     ordered.verify(customizer1).customize(template).     ordered.verify(customizer2).customize(template). }
false;public;0;24;;@Test public void customizerShouldBeAppliedAtTheEnd() {     ResponseErrorHandler errorHandler = mock(ResponseErrorHandler.class).     ClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory().     this.builder.interceptors(this.interceptor).messageConverters(this.messageConverter).rootUri("http://localhost:8080").errorHandler(errorHandler).basicAuthentication("spring", "boot").requestFactory(() -> requestFactory).customizers((restTemplate) -> {         assertThat(restTemplate.getInterceptors()).hasSize(2).contains(this.interceptor).anyMatch((ic) -> ic instanceof BasicAuthenticationInterceptor).         assertThat(restTemplate.getMessageConverters()).contains(this.messageConverter).         assertThat(restTemplate.getUriTemplateHandler()).isInstanceOf(RootUriTemplateHandler.class).         assertThat(restTemplate.getErrorHandler()).isEqualTo(errorHandler).         ClientHttpRequestFactory actualRequestFactory = restTemplate.getRequestFactory().         assertThat(actualRequestFactory).isInstanceOf(InterceptingClientHttpRequestFactory.class).         assertThat(actualRequestFactory).hasFieldOrPropertyWithValue("requestFactory", requestFactory).     }).build(). }
false;public;0;5;;@Test public void buildShouldReturnRestTemplate() {     RestTemplate template = this.builder.build().     assertThat(template.getClass()).isEqualTo(RestTemplate.class). }
false;public;0;5;;@Test public void buildClassShouldReturnClassInstance() {     RestTemplateSubclass template = this.builder.build(RestTemplateSubclass.class).     assertThat(template.getClass()).isEqualTo(RestTemplateSubclass.class). }
false;public;0;7;;@Test public void configureShouldApply() {     RestTemplate template = new RestTemplate().     this.builder.configure(template).     assertThat(template.getRequestFactory()).isInstanceOf(HttpComponentsClientHttpRequestFactory.class). }
false;public;0;7;;@Test public void connectTimeoutCanBeNullToUseDefault() {     ClientHttpRequestFactory requestFactory = this.builder.requestFactory(SimpleClientHttpRequestFactory.class).setConnectTimeout(null).build().getRequestFactory().     assertThat(requestFactory).hasFieldOrPropertyWithValue("connectTimeout", -1). }
false;public;0;7;;@Test public void readTimeoutCanBeNullToUseDefault() {     ClientHttpRequestFactory requestFactory = this.builder.requestFactory(SimpleClientHttpRequestFactory.class).setReadTimeout(null).build().getRequestFactory().     assertThat(requestFactory).hasFieldOrPropertyWithValue("readTimeout", -1). }
false;public;0;8;;@Test public void connectTimeoutCanBeConfiguredOnHttpComponentsRequestFactory() {     ClientHttpRequestFactory requestFactory = this.builder.requestFactory(HttpComponentsClientHttpRequestFactory.class).setConnectTimeout(Duration.ofMillis(1234)).build().getRequestFactory().     assertThat(((RequestConfig) ReflectionTestUtils.getField(requestFactory, "requestConfig")).getConnectTimeout()).isEqualTo(1234). }
false;public;0;8;;@Test public void readTimeoutCanBeConfiguredOnHttpComponentsRequestFactory() {     ClientHttpRequestFactory requestFactory = this.builder.requestFactory(HttpComponentsClientHttpRequestFactory.class).setReadTimeout(Duration.ofMillis(1234)).build().getRequestFactory().     assertThat(((RequestConfig) ReflectionTestUtils.getField(requestFactory, "requestConfig")).getSocketTimeout()).isEqualTo(1234). }
false;public;0;7;;@Test public void connectTimeoutCanBeConfiguredOnSimpleRequestFactory() {     ClientHttpRequestFactory requestFactory = this.builder.requestFactory(SimpleClientHttpRequestFactory.class).setConnectTimeout(Duration.ofMillis(1234)).build().getRequestFactory().     assertThat(requestFactory).hasFieldOrPropertyWithValue("connectTimeout", 1234). }
false;public;0;7;;@Test public void readTimeoutCanBeConfiguredOnSimpleRequestFactory() {     ClientHttpRequestFactory requestFactory = this.builder.requestFactory(SimpleClientHttpRequestFactory.class).setReadTimeout(Duration.ofMillis(1234)).build().getRequestFactory().     assertThat(requestFactory).hasFieldOrPropertyWithValue("readTimeout", 1234). }
false;public;0;9;;@Test public void connectTimeoutCanBeConfiguredOnOkHttp3RequestFactory() {     ClientHttpRequestFactory requestFactory = this.builder.requestFactory(OkHttp3ClientHttpRequestFactory.class).setConnectTimeout(Duration.ofMillis(1234)).build().getRequestFactory().     assertThat(ReflectionTestUtils.getField(ReflectionTestUtils.getField(requestFactory, "client"), "connectTimeout")).isEqualTo(1234). }
false;public;0;9;;@Test public void readTimeoutCanBeConfiguredOnOkHttp3RequestFactory() {     ClientHttpRequestFactory requestFactory = this.builder.requestFactory(OkHttp3ClientHttpRequestFactory.class).setReadTimeout(Duration.ofMillis(1234)).build().getRequestFactory().     assertThat(ReflectionTestUtils.getField(ReflectionTestUtils.getField(requestFactory, "client"), "readTimeout")).isEqualTo(1234). }
false;public;0;9;;@Test public void connectTimeoutCanBeConfiguredOnAWrappedRequestFactory() {     SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory().     this.builder.requestFactory(() -> new BufferingClientHttpRequestFactory(requestFactory)).setConnectTimeout(Duration.ofMillis(1234)).build().     assertThat(requestFactory).hasFieldOrPropertyWithValue("connectTimeout", 1234). }
false;public;0;9;;@Test public void readTimeoutCanBeConfiguredOnAWrappedRequestFactory() {     SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory().     this.builder.requestFactory(() -> new BufferingClientHttpRequestFactory(requestFactory)).setReadTimeout(Duration.ofMillis(1234)).build().     assertThat(requestFactory).hasFieldOrPropertyWithValue("readTimeout", 1234). }
false;public;0;10;;@Test public void unwrappingDoesNotAffectRequestFactoryThatIsSetOnTheBuiltTemplate() {     SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory().     RestTemplate template = this.builder.requestFactory(() -> new BufferingClientHttpRequestFactory(requestFactory)).build().     assertThat(template.getRequestFactory()).isInstanceOf(BufferingClientHttpRequestFactory.class). }
