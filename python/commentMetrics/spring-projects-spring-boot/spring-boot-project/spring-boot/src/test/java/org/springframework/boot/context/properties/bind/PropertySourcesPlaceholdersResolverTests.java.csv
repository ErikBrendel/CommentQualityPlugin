commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void placeholderResolverIfEnvironmentNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new PropertySourcesPlaceholdersResolver((Environment) null)).withMessageContaining("Environment must not be null"). }
false;public;0;7;;@Test public void resolveIfPlaceholderPresentResolvesProperty() {     MutablePropertySources sources = getPropertySources().     this.resolver = new PropertySourcesPlaceholdersResolver(sources).     Object resolved = this.resolver.resolvePlaceholders("${FOO}").     assertThat(resolved).isEqualTo("hello world"). }
false;public;0;6;;@Test public void resolveIfPlaceholderAbsentUsesDefault() {     this.resolver = new PropertySourcesPlaceholdersResolver((PropertySources) null).     Object resolved = this.resolver.resolvePlaceholders("${FOO:bar}").     assertThat(resolved).isEqualTo("bar"). }
false;public;0;6;;@Test public void resolveIfPlaceholderAbsentAndNoDefaultUsesPlaceholder() {     this.resolver = new PropertySourcesPlaceholdersResolver((PropertySources) null).     Object resolved = this.resolver.resolvePlaceholders("${FOO}").     assertThat(resolved).isEqualTo("${FOO}"). }
false;public;0;9;;@Test public void resolveIfHelperPresentShouldUseIt() {     MutablePropertySources sources = getPropertySources().     TestPropertyPlaceholderHelper helper = new TestPropertyPlaceholderHelper("$<", ">").     this.resolver = new PropertySourcesPlaceholdersResolver(sources, helper).     Object resolved = this.resolver.resolvePlaceholders("$<FOO>").     assertThat(resolved).isEqualTo("hello world"). }
false;private;0;7;;private MutablePropertySources getPropertySources() {     MutablePropertySources sources = new MutablePropertySources().     Map<String, Object> source = new HashMap<>().     source.put("FOO", "hello world").     sources.addFirst(new MapPropertySource("test", source)).     return sources. }
