commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@After public void verifyLoggingOutput() {     assertThat(this.output.toString()).doesNotContain(StandardServletEnvironment.class.getSimpleName()). }
false;public;0;7;;@Test public void failsWithoutConfigure() {     assertThatIllegalStateException().isThrownBy(() -> new MockSpringBootServletInitializer().createRootApplicationContext(this.servletContext)).withMessageContaining("No SpringApplication sources have been defined"). }
false;public;0;7;;@Test public void withConfigurationAnnotation() {     new WithConfigurationAnnotation().createRootApplicationContext(this.servletContext).     assertThat(this.application.getAllSources()).containsOnly(WithConfigurationAnnotation.class, ErrorPageFilterConfiguration.class). }
false;public;0;6;;@Test public void withConfiguredSource() {     new WithConfiguredSource().createRootApplicationContext(this.servletContext).     assertThat(this.application.getAllSources()).containsOnly(Config.class, ErrorPageFilterConfiguration.class). }
false;public;0;6;;@Test public void applicationBuilderCanBeCustomized() {     CustomSpringBootServletInitializer servletInitializer = new CustomSpringBootServletInitializer().     servletInitializer.createRootApplicationContext(this.servletContext).     assertThat(servletInitializer.applicationBuilder.built).isTrue(). }
false;public;0;7;;@Test public void mainClassHasSensibleDefault() {     new WithConfigurationAnnotation().createRootApplicationContext(this.servletContext).     assertThat(this.application).hasFieldOrPropertyWithValue("mainApplicationClass", WithConfigurationAnnotation.class). }
false;public;0;17;;@Test public void errorPageFilterRegistrationCanBeDisabled() {     WebServer webServer = new UndertowServletWebServerFactory(0).getWebServer((servletContext) -> {         try (AbstractApplicationContext context = (AbstractApplicationContext) new WithErrorPageFilterNotRegistered().createRootApplicationContext(servletContext)) {             assertThat(context.getBeansOfType(ErrorPageFilter.class)).hasSize(0).         }     }).     try {         webServer.start().     } finally {         webServer.stop().     } }
false;public;0;7;;@Test public void executableWarThatUsesServletInitializerDoesNotHaveErrorPageFilterConfigured() {     try (ConfigurableApplicationContext context = new SpringApplication(ExecutableWar.class).run()) {         assertThat(context.getBeansOfType(ErrorPageFilter.class)).hasSize(0).     } }
false;public;0;15;;@Test public void servletContextPropertySourceIsAvailablePriorToRefresh() {     ServletContext servletContext = mock(ServletContext.class).     given(servletContext.getInitParameterNames()).willReturn(Collections.enumeration(Collections.singletonList("spring.profiles.active"))).     given(servletContext.getInitParameter("spring.profiles.active")).willReturn("from-servlet-context").     given(servletContext.getAttributeNames()).willReturn(Collections.enumeration(Collections.emptyList())).     try (ConfigurableApplicationContext context = (ConfigurableApplicationContext) new PropertySourceVerifyingSpringBootServletInitializer().createRootApplicationContext(servletContext)) {         assertThat(context.getEnvironment().getActiveProfiles()).containsExactly("from-servlet-context").     } }
false;protected;1;5;;@Override protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {     return builder.sources(TestApp.class).listeners(new PropertySourceVerifyingApplicationListener()). }
false;protected;1;5;;@Override protected WebApplicationContext run(SpringApplication application) {     SpringBootServletInitializerTests.this.application = application.     return null. }
false;protected;0;4;;@Override protected SpringApplicationBuilder createSpringApplicationBuilder() {     return this.applicationBuilder. }
false;protected;1;5;;@Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {     return application.sources(Config.class). }
false;protected;1;5;;@Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {     return application.sources(Config.class). }
false;public;0;4;;@Bean public ServletWebServerFactory webServerFactory() {     return new UndertowServletWebServerFactory(0). }
false;public;0;5;;@Override public SpringApplication build() {     this.built = true.     return super.build(). }
false;public;1;7;;@Override public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {     PropertySource<?> propertySource = event.getEnvironment().getPropertySources().get(StandardServletEnvironment.SERVLET_CONTEXT_PROPERTY_SOURCE_NAME).     assertThat(propertySource.getProperty("spring.profiles.active")).isEqualTo("from-servlet-context"). }
