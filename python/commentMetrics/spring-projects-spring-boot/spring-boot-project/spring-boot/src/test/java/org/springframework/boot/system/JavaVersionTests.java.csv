commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void getJavaVersionShouldBeAvailable() {     assertThat(JavaVersion.getJavaVersion()).isNotNull(). }
false;public;0;4;;@Test public void compareToWhenComparingSmallerToGreaterShouldBeLessThanZero() {     assertThat(JavaVersion.EIGHT.compareTo(JavaVersion.NINE)).isLessThan(0). }
false;public;0;4;;@Test public void compareToWhenComparingGreaterToSmallerShouldBeGreaterThanZero() {     assertThat(JavaVersion.NINE.compareTo(JavaVersion.EIGHT)).isGreaterThan(0). }
false;public;0;4;;@Test public void compareToWhenComparingSameShouldBeZero() {     assertThat(JavaVersion.EIGHT.compareTo(JavaVersion.EIGHT)).isEqualTo(0). }
false;public;0;4;;@Test public void isEqualOrNewerThanWhenComparingSameShouldBeTrue() {     assertThat(JavaVersion.EIGHT.isEqualOrNewerThan(JavaVersion.EIGHT)).isTrue(). }
false;public;0;4;;@Test public void isEqualOrNewerThanWhenSmallerToGreaterShouldBeFalse() {     assertThat(JavaVersion.EIGHT.isEqualOrNewerThan(JavaVersion.NINE)).isFalse(). }
false;public;0;4;;@Test public void isEqualOrNewerThanWhenGreaterToSmallerShouldBeTrue() {     assertThat(JavaVersion.NINE.isEqualOrNewerThan(JavaVersion.EIGHT)).isTrue(). }
false;public;0;4;;@Test public void isOlderThanThanWhenComparingSameShouldBeFalse() {     assertThat(JavaVersion.EIGHT.isOlderThan(JavaVersion.EIGHT)).isFalse(). }
false;public;0;4;;@Test public void isOlderThanWhenSmallerToGreaterShouldBeTrue() {     assertThat(JavaVersion.EIGHT.isOlderThan(JavaVersion.NINE)).isTrue(). }
false;public;0;4;;@Test public void isOlderThanWhenGreaterToSmallerShouldBeFalse() {     assertThat(JavaVersion.NINE.isOlderThan(JavaVersion.EIGHT)).isFalse(). }
