commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected UndertowServletWebServerFactory getFactory() {     return new UndertowServletWebServerFactory(0). }
false;public;0;10;;@Test public void errorPage404() throws Exception {     AbstractServletWebServerFactory factory = getFactory().     factory.addErrorPages(new ErrorPage(HttpStatus.NOT_FOUND, "/hello")).     this.webServer = factory.getWebServer(new ServletRegistrationBean<>(new ExampleServlet(), "/hello")).     this.webServer.start().     assertThat(getResponse(getLocalUrl("/hello"))).isEqualTo("Hello World").     assertThat(getResponse(getLocalUrl("/not-found"))).isEqualTo("Hello World"). }
false;public;0;7;;@Test public void setNullBuilderCustomizersThrows() {     UndertowServletWebServerFactory factory = getFactory().     assertThatIllegalArgumentException().isThrownBy(() -> factory.setBuilderCustomizers(null)).withMessageContaining("Customizers must not be null"). }
false;public;0;7;;@Test public void addNullAddBuilderCustomizersThrows() {     UndertowServletWebServerFactory factory = getFactory().     assertThatIllegalArgumentException().isThrownBy(() -> factory.addBuilderCustomizers((UndertowBuilderCustomizer[]) null)).withMessageContaining("Customizers must not be null"). }
false;public;0;13;;@Test public void builderCustomizers() {     UndertowServletWebServerFactory factory = getFactory().     UndertowBuilderCustomizer[] customizers = new UndertowBuilderCustomizer[4].     Arrays.setAll(customizers, (i) -> mock(UndertowBuilderCustomizer.class)).     factory.setBuilderCustomizers(Arrays.asList(customizers[0], customizers[1])).     factory.addBuilderCustomizers(customizers[2], customizers[3]).     this.webServer = factory.getWebServer().     InOrder ordered = inOrder((Object[]) customizers).     for (UndertowBuilderCustomizer customizer : customizers) {         ordered.verify(customizer).customize(any(Builder.class)).     } }
false;public;0;7;;@Test public void setNullDeploymentInfoCustomizersThrows() {     UndertowServletWebServerFactory factory = getFactory().     assertThatIllegalArgumentException().isThrownBy(() -> factory.setDeploymentInfoCustomizers(null)).withMessageContaining("Customizers must not be null"). }
false;public;0;8;;@Test public void addNullAddDeploymentInfoCustomizersThrows() {     UndertowServletWebServerFactory factory = getFactory().     assertThatIllegalArgumentException().isThrownBy(() -> factory.addDeploymentInfoCustomizers((UndertowDeploymentInfoCustomizer[]) null)).withMessageContaining("Customizers must not be null"). }
false;public;0;14;;@Test public void deploymentInfo() {     UndertowServletWebServerFactory factory = getFactory().     UndertowDeploymentInfoCustomizer[] customizers = new UndertowDeploymentInfoCustomizer[4].     Arrays.setAll(customizers, (i) -> mock(UndertowDeploymentInfoCustomizer.class)).     factory.setDeploymentInfoCustomizers(Arrays.asList(customizers[0], customizers[1])).     factory.addDeploymentInfoCustomizers(customizers[2], customizers[3]).     this.webServer = factory.getWebServer().     InOrder ordered = inOrder((Object[]) customizers).     for (UndertowDeploymentInfoCustomizer customizer : customizers) {         ordered.verify(customizer).customize(any(DeploymentInfo.class)).     } }
false;public;0;4;;@Test public void basicSslClasspathKeyStore() throws Exception {     testBasicSslWithKeyStore("classpath:test.jks"). }
false;public;0;9;;@Test public void defaultContextPath() {     UndertowServletWebServerFactory factory = getFactory().     final AtomicReference<String> contextPath = new AtomicReference<>().     factory.addDeploymentInfoCustomizers((deploymentInfo) -> contextPath.set(deploymentInfo.getContextPath())).     this.webServer = factory.getWebServer().     assertThat(contextPath.get()).isEqualTo("/"). }
false;public;0;6;;@Test public void useForwardHeaders() throws Exception {     UndertowServletWebServerFactory factory = getFactory().     factory.setUseForwardHeaders(true).     assertForwardHeaderIsUsed(factory). }
false;public;0;5;;@Test public void eachFactoryUsesADiscreteServletContainer() {     assertThat(getServletContainerFromNewFactory()).isNotEqualTo(getServletContainerFromNewFactory()). }
false;public;0;5;;@Test public void accessLogCanBeEnabled() throws IOException, URISyntaxException, InterruptedException {     testAccessLog(null, null, "access_log.log"). }
false;public;0;5;;@Test public void accessLogCanBeCustomized() throws IOException, URISyntaxException, InterruptedException {     testAccessLog("my_access.", "logz", "my_access.logz"). }
false;private;3;17;;private void testAccessLog(String prefix, String suffix, String expectedFile) throws IOException, URISyntaxException, InterruptedException {     UndertowServletWebServerFactory factory = getFactory().     factory.setAccessLogEnabled(true).     factory.setAccessLogPrefix(prefix).     factory.setAccessLogSuffix(suffix).     File accessLogDirectory = this.temporaryFolder.getRoot().     factory.setAccessLogDirectory(accessLogDirectory).     assertThat(accessLogDirectory.listFiles()).isEmpty().     this.webServer = factory.getWebServer(new ServletRegistrationBean<>(new ExampleServlet(), "/hello")).     this.webServer.start().     assertThat(getResponse(getLocalUrl("/hello"))).isEqualTo("Hello World").     File accessLog = new File(accessLogDirectory, expectedFile).     awaitFile(accessLog).     assertThat(accessLogDirectory.listFiles()).contains(accessLog). }
false;protected;2;5;;@Override protected void addConnector(int port, AbstractServletWebServerFactory factory) {     ((UndertowServletWebServerFactory) factory).addBuilderCustomizers((builder) -> builder.addHttpListener(port, "0.0.0.0")). }
false;public;0;9;;@Test public void sslRestrictedProtocolsEmptyCipherFailure() throws Exception {     assertThatIOException().isThrownBy(() -> testRestrictedSSLProtocolsAndCipherSuites(new String[] { "TLSv1.2" }, new String[] { "TLS_EMPTY_RENEGOTIATION_INFO_SCSV" })).isInstanceOfAny(SSLException.class, SSLHandshakeException.class, SocketException.class). }
false;public;0;8;;@Test public void sslRestrictedProtocolsECDHETLS1Failure() throws Exception {     assertThatIOException().isThrownBy(() -> testRestrictedSSLProtocolsAndCipherSuites(new String[] { "TLSv1" }, new String[] { "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256" })).isInstanceOfAny(SSLException.class, SocketException.class). }
false;public;0;5;;@Test public void sslRestrictedProtocolsECDHESuccess() throws Exception {     testRestrictedSSLProtocolsAndCipherSuites(new String[] { "TLSv1.2" }, new String[] { "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256" }). }
false;public;0;5;;@Test public void sslRestrictedProtocolsRSATLS12Success() throws Exception {     testRestrictedSSLProtocolsAndCipherSuites(new String[] { "TLSv1.2" }, new String[] { "TLS_RSA_WITH_AES_128_CBC_SHA256" }). }
false;public;0;8;;@Test public void sslRestrictedProtocolsRSATLS11Failure() throws Exception {     assertThatIOException().isThrownBy(() -> testRestrictedSSLProtocolsAndCipherSuites(new String[] { "TLSv1.1" }, new String[] { "TLS_RSA_WITH_AES_128_CBC_SHA256" })).isInstanceOfAny(SSLException.class, SocketException.class). }
false;protected;0;4;;@Override protected JspServlet getJspServlet() {     // Undertow does not support JSPs     return null. }
false;private;1;6;;private void awaitFile(File file) throws InterruptedException {     long end = System.currentTimeMillis() + 10000.     while (!file.exists() && System.currentTimeMillis() < end) {         Thread.sleep(100).     } }
false;private;0;10;;private ServletContainer getServletContainerFromNewFactory() {     UndertowServletWebServer container = (UndertowServletWebServer) getFactory().getWebServer().     try {         return container.getDeploymentManager().getDeployment().getServletContainer().     } finally {         container.stop().     } }
false;protected;0;5;;@Override protected Map<String, String> getActualMimeMappings() {     return ((UndertowServletWebServer) this.webServer).getDeploymentManager().getDeployment().getMimeExtensionMappings(). }
false;protected;0;8;;@Override protected Collection<Mapping> getExpectedMimeMappings() {     // Unlike Tomcat and Jetty, Undertow performs a case-sensitive match on file     // extension so it has a mapping for "z" and "Z".     Set<Mapping> expectedMappings = new HashSet<>(super.getExpectedMimeMappings()).     expectedMappings.add(new Mapping("Z", "application/x-compress")).     return expectedMappings. }
false;protected;1;7;;@Override protected Charset getCharset(Locale locale) {     DeploymentInfo info = ((UndertowServletWebServer) this.webServer).getDeploymentManager().getDeployment().getDeploymentInfo().     String charsetName = info.getLocaleCharsetMapping().get(locale.toString()).     return (charsetName != null) ? Charset.forName(charsetName) : null. }
false;protected;2;9;;@Override protected void handleExceptionCausedByBlockedPort(RuntimeException ex, int blockedPort) {     assertThat(ex).isInstanceOf(PortInUseException.class).     assertThat(((PortInUseException) ex).getPort()).isEqualTo(blockedPort).     Undertow undertow = (Undertow) ReflectionTestUtils.getField(this.webServer, "undertow").     assertThat(undertow.getWorker()).isNull(). }
