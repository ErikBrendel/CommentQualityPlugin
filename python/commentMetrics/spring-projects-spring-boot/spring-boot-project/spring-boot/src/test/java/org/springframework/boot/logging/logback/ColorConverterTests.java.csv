commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setupAnsi() {     AnsiOutput.setEnabled(AnsiOutput.Enabled.ALWAYS). }
false;public,static;0;4;;@AfterClass public static void resetAnsi() {     AnsiOutput.setEnabled(AnsiOutput.Enabled.DETECT). }
false;public;0;5;;@Before public void setup() {     this.converter = new ColorConverter().     this.event = new LoggingEvent(). }
false;public;0;6;;@Test public void faint() {     this.converter.setOptionList(Collections.singletonList("faint")).     String out = this.converter.transform(this.event, this.in).     assertThat(out).isEqualTo("\033[2min\033[0.39m"). }
false;public;0;6;;@Test public void red() {     this.converter.setOptionList(Collections.singletonList("red")).     String out = this.converter.transform(this.event, this.in).     assertThat(out).isEqualTo("\033[31min\033[0.39m"). }
false;public;0;6;;@Test public void green() {     this.converter.setOptionList(Collections.singletonList("green")).     String out = this.converter.transform(this.event, this.in).     assertThat(out).isEqualTo("\033[32min\033[0.39m"). }
false;public;0;6;;@Test public void yellow() {     this.converter.setOptionList(Collections.singletonList("yellow")).     String out = this.converter.transform(this.event, this.in).     assertThat(out).isEqualTo("\033[33min\033[0.39m"). }
false;public;0;6;;@Test public void blue() {     this.converter.setOptionList(Collections.singletonList("blue")).     String out = this.converter.transform(this.event, this.in).     assertThat(out).isEqualTo("\033[34min\033[0.39m"). }
false;public;0;6;;@Test public void magenta() {     this.converter.setOptionList(Collections.singletonList("magenta")).     String out = this.converter.transform(this.event, this.in).     assertThat(out).isEqualTo("\033[35min\033[0.39m"). }
false;public;0;6;;@Test public void cyan() {     this.converter.setOptionList(Collections.singletonList("cyan")).     String out = this.converter.transform(this.event, this.in).     assertThat(out).isEqualTo("\033[36min\033[0.39m"). }
false;public;0;6;;@Test public void highlightError() {     this.event.setLevel(Level.ERROR).     String out = this.converter.transform(this.event, this.in).     assertThat(out).isEqualTo("\033[31min\033[0.39m"). }
false;public;0;6;;@Test public void highlightWarn() {     this.event.setLevel(Level.WARN).     String out = this.converter.transform(this.event, this.in).     assertThat(out).isEqualTo("\033[33min\033[0.39m"). }
false;public;0;6;;@Test public void highlightDebug() {     this.event.setLevel(Level.DEBUG).     String out = this.converter.transform(this.event, this.in).     assertThat(out).isEqualTo("\033[32min\033[0.39m"). }
false;public;0;6;;@Test public void highlightTrace() {     this.event.setLevel(Level.TRACE).     String out = this.converter.transform(this.event, this.in).     assertThat(out).isEqualTo("\033[32min\033[0.39m"). }
