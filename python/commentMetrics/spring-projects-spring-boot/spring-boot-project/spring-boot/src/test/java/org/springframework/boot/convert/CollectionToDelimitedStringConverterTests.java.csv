commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void convertListToStringShouldConvert() {     List<String> list = Arrays.asList("a", "b", "c").     String converted = this.conversionService.convert(list, String.class).     assertThat(converted).isEqualTo("a,b,c"). }
false;public;0;9;;@Test public void convertWhenHasDelimiterNoneShouldConvert() {     Data data = new Data().     data.none = Arrays.asList("1", "2", "3").     String converted = (String) this.conversionService.convert(data.none, TypeDescriptor.nested(ReflectionUtils.findField(Data.class, "none"), 0), TypeDescriptor.valueOf(String.class)).     assertThat(converted).isEqualTo("123"). }
false;public;0;9;;@Test public void convertWhenHasDelimiterDashShouldConvert() {     Data data = new Data().     data.dash = Arrays.asList("1", "2", "3").     String converted = (String) this.conversionService.convert(data.dash, TypeDescriptor.nested(ReflectionUtils.findField(Data.class, "dash"), 0), TypeDescriptor.valueOf(String.class)).     assertThat(converted).isEqualTo("1-2-3"). }
false;public;0;12;;@Test public void convertShouldConvertElements() {     if (this.conversionService instanceof ApplicationConversionService) {         Data data = new Data().         data.type = Arrays.asList(1, 2, 3).         String converted = (String) this.conversionService.convert(data.type, TypeDescriptor.nested(ReflectionUtils.findField(Data.class, "type"), 0), TypeDescriptor.valueOf(String.class)).         assertThat(converted).isEqualTo("1.2.3").     } }
false;public;0;6;;@Test public void convertShouldConvertNull() {     List<String> list = null.     String converted = this.conversionService.convert(list, String.class).     assertThat(converted).isNull(). }
false;public,static;0;5;;@Parameters(name = "{0}") public static Iterable<Object[]> conversionServices() {     return new ConversionServiceParameters(CollectionToDelimitedStringConverterTests::addConverter). }
false;private,static;1;3;;private static void addConverter(FormattingConversionService service) {     service.addConverter(new CollectionToDelimitedStringConverter(service)). }
