commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void argumentsMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new DefaultApplicationArguments((String[]) null)).withMessageContaining("Args must not be null"). }
false;public;0;5;;@Test public void getArgs() {     ApplicationArguments arguments = new DefaultApplicationArguments(ARGS).     assertThat(arguments.getSourceArgs()).isEqualTo(ARGS). }
false;public;0;6;;@Test public void optionNames() {     ApplicationArguments arguments = new DefaultApplicationArguments(ARGS).     Set<String> expected = new HashSet<>(Arrays.asList("foo", "debug")).     assertThat(arguments.getOptionNames()).isEqualTo(expected). }
false;public;0;7;;@Test public void containsOption() {     ApplicationArguments arguments = new DefaultApplicationArguments(ARGS).     assertThat(arguments.containsOption("foo")).isTrue().     assertThat(arguments.containsOption("debug")).isTrue().     assertThat(arguments.containsOption("spring")).isFalse(). }
false;public;0;8;;@Test public void getOptionValues() {     ApplicationArguments arguments = new DefaultApplicationArguments(ARGS).     assertThat(arguments.getOptionValues("foo")).isEqualTo(Arrays.asList("bar", "baz")).     assertThat(arguments.getOptionValues("debug")).isEmpty().     assertThat(arguments.getOptionValues("spring")).isNull(). }
false;public;0;5;;@Test public void getNonOptionArgs() {     ApplicationArguments arguments = new DefaultApplicationArguments(ARGS).     assertThat(arguments.getNonOptionArgs()).containsExactly("spring", "boot"). }
false;public;0;5;;@Test public void getNoNonOptionArgs() {     ApplicationArguments arguments = new DefaultApplicationArguments("--debug").     assertThat(arguments.getNonOptionArgs()).isEmpty(). }
