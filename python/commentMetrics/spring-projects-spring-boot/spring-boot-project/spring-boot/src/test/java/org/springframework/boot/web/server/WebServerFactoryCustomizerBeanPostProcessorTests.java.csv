commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() {     MockitoAnnotations.initMocks(this).     this.processor.setBeanFactory(this.beanFactory). }
false;public;0;7;;@Test public void setBeanFactoryWhenNotListableShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.processor.setBeanFactory(mock(BeanFactory.class))).withMessageContaining("WebServerCustomizerBeanPostProcessor can only " + "be used with a ListableBeanFactory"). }
false;public;0;7;;@Test public void postProcessBeforeShouldReturnBean() {     addMockBeans(Collections.emptyMap()).     Object bean = new Object().     Object result = this.processor.postProcessBeforeInitialization(bean, "foo").     assertThat(result).isSameAs(bean). }
false;public;0;7;;@Test public void postProcessAfterShouldReturnBean() {     addMockBeans(Collections.emptyMap()).     Object bean = new Object().     Object result = this.processor.postProcessAfterInitialization(bean, "foo").     assertThat(result).isSameAs(bean). }
false;public;0;9;;@Test public void postProcessAfterShouldCallInterfaceCustomizers() {     Map<String, Object> beans = addInterfaceBeans().     addMockBeans(beans).     postProcessBeforeInitialization(WebServerFactory.class).     assertThat(wasCalled(beans, "one")).isFalse().     assertThat(wasCalled(beans, "two")).isFalse().     assertThat(wasCalled(beans, "all")).isTrue(). }
false;public;0;9;;@Test public void postProcessAfterWhenWebServerFactoryOneShouldCallInterfaceCustomizers() {     Map<String, Object> beans = addInterfaceBeans().     addMockBeans(beans).     postProcessBeforeInitialization(WebServerFactoryOne.class).     assertThat(wasCalled(beans, "one")).isTrue().     assertThat(wasCalled(beans, "two")).isFalse().     assertThat(wasCalled(beans, "all")).isTrue(). }
false;public;0;9;;@Test public void postProcessAfterWhenWebServerFactoryTwoShouldCallInterfaceCustomizers() {     Map<String, Object> beans = addInterfaceBeans().     addMockBeans(beans).     postProcessBeforeInitialization(WebServerFactoryTwo.class).     assertThat(wasCalled(beans, "one")).isFalse().     assertThat(wasCalled(beans, "two")).isTrue().     assertThat(wasCalled(beans, "all")).isTrue(). }
false;private;0;10;;private Map<String, Object> addInterfaceBeans() {     WebServerFactoryOneCustomizer oneCustomizer = new WebServerFactoryOneCustomizer().     WebServerFactoryTwoCustomizer twoCustomizer = new WebServerFactoryTwoCustomizer().     WebServerFactoryAllCustomizer allCustomizer = new WebServerFactoryAllCustomizer().     Map<String, Object> beans = new LinkedHashMap<>().     beans.put("one", oneCustomizer).     beans.put("two", twoCustomizer).     beans.put("all", allCustomizer).     return beans. }
false;public;0;7;;@Test public void postProcessAfterShouldCallLambdaCustomizers() {     List<String> called = new ArrayList<>().     addLambdaBeans(called).     postProcessBeforeInitialization(WebServerFactory.class).     assertThat(called).containsExactly("all"). }
false;public;0;7;;@Test public void postProcessAfterWhenWebServerFactoryOneShouldCallLambdaCustomizers() {     List<String> called = new ArrayList<>().     addLambdaBeans(called).     postProcessBeforeInitialization(WebServerFactoryOne.class).     assertThat(called).containsExactly("one", "all"). }
false;public;0;7;;@Test public void postProcessAfterWhenWebServerFactoryTwoShouldCallLambdaCustomizers() {     List<String> called = new ArrayList<>().     addLambdaBeans(called).     postProcessBeforeInitialization(WebServerFactoryTwo.class).     assertThat(called).containsExactly("two", "all"). }
false;private;1;10;;private void addLambdaBeans(List<String> called) {     WebServerFactoryCustomizer<WebServerFactoryOne> one = (f) -> called.add("one").     WebServerFactoryCustomizer<WebServerFactoryTwo> two = (f) -> called.add("two").     WebServerFactoryCustomizer<WebServerFactory> all = (f) -> called.add("all").     Map<String, Object> beans = new LinkedHashMap<>().     beans.put("one", one).     beans.put("two", two).     beans.put("all", all).     addMockBeans(beans). }
false;private;1;5;;@SuppressWarnings({ "unchecked", "rawtypes" }) private void addMockBeans(Map<String, ?> beans) {     given(this.beanFactory.getBeansOfType(WebServerFactoryCustomizer.class, false, false)).willReturn((Map<String, WebServerFactoryCustomizer>) beans). }
false;private;1;3;;private void postProcessBeforeInitialization(Class<?> type) {     this.processor.postProcessBeforeInitialization(mock(type), "foo"). }
false;private;2;3;;private boolean wasCalled(Map<String, ?> beans, String name) {     return ((MockWebServerFactoryCustomizer<?>) beans.get(name)).wasCalled(). }
false;public;1;4;;@Override public void customize(T factory) {     this.called = true. }
false;public;0;3;;public boolean wasCalled() {     return this.called. }
