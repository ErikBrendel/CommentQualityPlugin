commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;0;1;;protected abstract JsonParser getParser().
false;public;0;7;;@Test public void simpleMap() {     Map<String, Object> map = this.parser.parseMap("{\"foo\":\"bar\",\"spam\":1}").     assertThat(map).hasSize(2).     assertThat(map.get("foo")).isEqualTo("bar").     assertThat(((Number) map.get("spam")).longValue()).isEqualTo(1L). }
false;public;0;7;;@Test public void doubleValue() {     Map<String, Object> map = this.parser.parseMap("{\"foo\":\"bar\",\"spam\":1.23}").     assertThat(map).hasSize(2).     assertThat(map.get("foo")).isEqualTo("bar").     assertThat(map.get("spam")).isEqualTo(1.23d). }
false;public;0;6;;@Test public void stringContainingNumber() {     Map<String, Object> map = this.parser.parseMap("{\"foo\":\"123\"}").     assertThat(map).hasSize(1).     assertThat(map.get("foo")).isEqualTo("123"). }
false;public;0;6;;@Test public void stringContainingComma() {     Map<String, Object> map = this.parser.parseMap("{\"foo\":\"bar1,bar2\"}").     assertThat(map).hasSize(1).     assertThat(map.get("foo")).isEqualTo("bar1,bar2"). }
false;public;0;5;;@Test public void emptyMap() {     Map<String, Object> map = this.parser.parseMap("{}").     assertThat(map).isEmpty(). }
false;public;0;6;;@Test public void simpleList() {     List<Object> list = this.parser.parseList("[\"foo\",\"bar\",1]").     assertThat(list).hasSize(3).     assertThat(list.get(1)).isEqualTo("bar"). }
false;public;0;5;;@Test public void emptyList() {     List<Object> list = this.parser.parseList("[]").     assertThat(list).isEmpty(). }
false;public;0;8;;@SuppressWarnings("unchecked") @Test public void listOfMaps() {     List<Object> list = this.parser.parseList("[{\"foo\":\"bar\",\"spam\":1},{\"foo\":\"baz\",\"spam\":2}]").     assertThat(list).hasSize(2).     assertThat(((Map<String, Object>) list.get(1))).hasSize(2). }
false;public;0;8;;@SuppressWarnings("unchecked") @Test public void mapOfLists() {     Map<String, Object> map = this.parser.parseMap("{\"foo\":[{\"foo\":\"bar\",\"spam\":1},{\"foo\":\"baz\",\"spam\":2}]}").     assertThat(map).hasSize(1).     assertThat(((List<Object>) map.get("foo"))).hasSize(2). }
false;public;0;5;;@Test public void mapWithNullThrowsARuntimeException() {     assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> this.parser.parseMap(null)). }
false;public;0;5;;@Test public void listWithNullThrowsARuntimeException() {     assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> this.parser.parseList(null)). }
false;public;0;5;;@Test public void mapWithEmptyStringThrowsARuntimeException() {     assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> this.parser.parseMap("")). }
false;public;0;5;;@Test public void listWithEmptyStringThrowsARuntimeException() {     assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> this.parser.parseList("")). }
false;public;0;5;;@Test public void mapWithListThrowsARuntimeException() {     assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> this.parser.parseMap("[]")). }
false;public;0;5;;@Test public void listWithMapThrowsARuntimeException() {     assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> this.parser.parseList("{}")). }
false;public;0;6;;@Test public void listWithLeadingWhitespace() {     List<Object> list = this.parser.parseList("\n\t[\"foo\"]").     assertThat(list).hasSize(1).     assertThat(list.get(0)).isEqualTo("foo"). }
false;public;0;6;;@Test public void mapWithLeadingWhitespace() {     Map<String, Object> map = this.parser.parseMap("\n\t{\"foo\":\"bar\"}").     assertThat(map).hasSize(1).     assertThat(map.get("foo")).isEqualTo("bar"). }
false;public;0;5;;@Test public void mapWithLeadingWhitespaceListThrowsARuntimeException() {     assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> this.parser.parseMap("\n\t[]")). }
false;public;0;5;;@Test public void listWithLeadingWhitespaceMapThrowsARuntimeException() {     assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> this.parser.parseList("\n\t{}")). }
false;public;0;6;;@Test public void escapeDoubleQuote() {     String input = "{\"foo\": \"\\\"bar\\\"\"}".     Map<String, Object> map = this.parser.parseMap(input).     assertThat(map.get("foo")).isEqualTo("\"bar\""). }
