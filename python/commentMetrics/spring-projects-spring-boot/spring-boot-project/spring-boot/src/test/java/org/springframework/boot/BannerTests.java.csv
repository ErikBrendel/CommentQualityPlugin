commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void cleanUp() {     if (this.context != null) {         this.context.close().     } }
false;public;0;4;;@Before public void setup() {     MockitoAnnotations.initMocks(this). }
false;public;0;6;;@Test public void testDefaultBanner() {     SpringApplication application = createSpringApplication().     this.context = application.run().     assertThat(this.out.toString()).contains(":: Spring Boot ::"). }
false;public;0;6;;@Test public void testDefaultBannerInLog() {     SpringApplication application = createSpringApplication().     this.context = application.run().     assertThat(this.out.toString()).contains(":: Spring Boot ::"). }
false;public;0;7;;@Test public void testCustomBanner() {     SpringApplication application = createSpringApplication().     application.setBanner(new DummyBanner()).     this.context = application.run().     assertThat(this.out.toString()).contains("My Banner"). }
false;public;0;6;;@Test public void testBannerInContext() {     SpringApplication application = createSpringApplication().     this.context = application.run().     assertThat(this.context.containsBean("springBootBanner")).isTrue(). }
false;public;0;15;;@Test public void testCustomBannerInContext() {     SpringApplication application = createSpringApplication().     Banner banner = mock(Banner.class).     application.setBanner(banner).     this.context = application.run().     Banner printedBanner = (Banner) this.context.getBean("springBootBanner").     assertThat(printedBanner).hasFieldOrPropertyWithValue("banner", banner).     verify(banner).printBanner(any(Environment.class), this.sourceClassCaptor.capture(), any(PrintStream.class)).     reset(banner).     printedBanner.printBanner(this.context.getEnvironment(), null, System.out).     verify(banner).printBanner(any(Environment.class), eq(this.sourceClassCaptor.getValue()), any(PrintStream.class)). }
false;public;0;7;;@Test public void testDisableBannerInContext() {     SpringApplication application = createSpringApplication().     application.setBannerMode(Mode.OFF).     this.context = application.run().     assertThat(this.context.containsBean("springBootBanner")).isFalse(). }
false;private;0;5;;private SpringApplication createSpringApplication() {     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     return application. }
false;public;3;5;;@Override public void printBanner(Environment environment, Class<?> sourceClass, PrintStream out) {     out.println("My Banner"). }
