commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void createWhenContextClassIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new TestApplicationContextRequestMatcher<>(null)).withMessageContaining("Context class must not be null"). }
false;public;0;6;;@Test public void matchesWhenContextClassIsApplicationContextShouldProvideContext() {     StaticWebApplicationContext context = createWebApplicationContext().     assertThat(new TestApplicationContextRequestMatcher<>(ApplicationContext.class).callMatchesAndReturnProvidedContext(context).get()).isEqualTo(context). }
false;public;0;8;;@Test public void matchesWhenContextClassIsExistingBeanShouldProvideBean() {     StaticWebApplicationContext context = createWebApplicationContext().     context.registerSingleton("existingBean", ExistingBean.class).     assertThat(new TestApplicationContextRequestMatcher<>(ExistingBean.class).callMatchesAndReturnProvidedContext(context).get()).isEqualTo(context.getBean(ExistingBean.class)). }
false;public;0;8;;@Test public void matchesWhenContextClassIsBeanThatDoesNotExistShouldSupplyException() {     StaticWebApplicationContext context = createWebApplicationContext().     Supplier<ExistingBean> supplier = new TestApplicationContextRequestMatcher<>(ExistingBean.class).callMatchesAndReturnProvidedContext(context).     assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(supplier::get). }
false;private;0;8;;private StaticWebApplicationContext createWebApplicationContext() {     StaticWebApplicationContext context = new StaticWebApplicationContext().     MockServletContext servletContext = new MockServletContext().     context.setServletContext(servletContext).     servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, context).     return context. }
false;public;0;3;;public ExistingBean getBean() {     return this.bean. }
false;public;1;5;;public Supplier<C> callMatchesAndReturnProvidedContext(WebApplicationContext context) {     return callMatchesAndReturnProvidedContext(new MockHttpServletRequest(context.getServletContext())). }
false;public;1;5;;public Supplier<C> callMatchesAndReturnProvidedContext(HttpServletRequest request) {     matches(request).     return getProvidedContext(). }
false;protected;2;5;;@Override protected boolean matches(HttpServletRequest request, Supplier<C> context) {     this.providedContext = context.     return false. }
false;public;0;3;;public Supplier<C> getProvidedContext() {     return this.providedContext. }
