commented;modifiers;parameterAmount;loc;comment;code
false;private;0;6;;private Environment getEnvironment() {     if (this.context != null) {         return this.context.getEnvironment().     }     throw new IllegalStateException("Could not obtain Environment"). }
false;public;0;5;;@Before public void storeAndClearHeadlessProperty() {     this.headlessProperty = System.getProperty("java.awt.headless").     System.clearProperty("java.awt.headless"). }
false;public;0;9;;@After public void reinstateHeadlessProperty() {     if (this.headlessProperty == null) {         System.clearProperty("java.awt.headless").     } else {         System.setProperty("java.awt.headless", this.headlessProperty).     } }
false;public;0;8;;@After public void cleanUp() {     if (this.context != null) {         this.context.close().     }     System.clearProperty("spring.main.banner-mode").     System.clearProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME). }
false;public;0;6;;@Test public void sourcesMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new SpringApplication((Class<?>[]) null).run()).withMessageContaining("PrimarySources must not be null"). }
false;public;0;6;;@Test public void sourcesMustNotBeEmpty() {     assertThatIllegalArgumentException().isThrownBy(() -> new SpringApplication().run()).withMessageContaining("Sources must not be empty"). }
false;public;0;6;;@Test public void sourcesMustBeAccessible() {     assertThatIllegalStateException().isThrownBy(() -> new SpringApplication(InaccessibleConfiguration.class).run()).withMessageContaining("Cannot load configuration"). }
false;public;0;8;;@Test public void customBanner() {     SpringApplication application = spy(new SpringApplication(ExampleConfig.class)).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run("--spring.banner.location=classpath:test-banner.txt").     assertThat(this.output.toString()).startsWith("Running a Test!"). }
false;public;0;9;;@Test public void customBannerWithProperties() {     SpringApplication application = spy(new SpringApplication(ExampleConfig.class)).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run("--spring.banner.location=classpath:test-banner-with-placeholder.txt", "--test.property=123456").     assertThat(this.output.toString()).containsPattern("Running a Test!\\s+123456"). }
false;public;0;11;;@Test public void imageBannerAndTextBanner() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     MockResourceLoader resourceLoader = new MockResourceLoader().     resourceLoader.addResource("banner.gif", "black-and-white.gif").     resourceLoader.addResource("banner.txt", "foobar.txt").     application.setWebApplicationType(WebApplicationType.NONE).     application.setResourceLoader(resourceLoader).     application.run().     assertThat(this.output.toString()).contains("@@@@").contains("Foo Bar"). }
false;public;0;10;;@Test public void imageBannerLoads() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     MockResourceLoader resourceLoader = new MockResourceLoader().     resourceLoader.addResource("banner.gif", "black-and-white.gif").     application.setWebApplicationType(WebApplicationType.NONE).     application.setResourceLoader(resourceLoader).     application.run().     assertThat(this.output.toString()).contains("@@@@@@"). }
false;public;0;8;;@Test public void logsNoActiveProfiles() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run().     assertThat(this.output.toString()).contains("No active profile set, falling back to default profiles: default"). }
false;public;0;8;;@Test public void logsActiveProfiles() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run("--spring.profiles.active=myprofiles").     assertThat(this.output.toString()).contains("The following profiles are active: myprofile"). }
false;public;0;8;;@Test public void enableBannerInLogViaProperty() {     SpringApplication application = spy(new SpringApplication(ExampleConfig.class)).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run("--spring.main.banner-mode=log").     verify(application, atLeastOnce()).setBannerMode(Banner.Mode.LOG).     assertThat(this.output.toString()).contains("o.s.b.SpringApplication"). }
false;public;0;9;;@Test public void setIgnoreBeanInfoPropertyByDefault() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run().     String property = System.getProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME).     assertThat(property).isEqualTo("true"). }
false;public;0;11;;@Test public void disableIgnoreBeanInfoProperty() {     System.setProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME, "false").     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run().     String property = System.getProperty(CachedIntrospectionResults.IGNORE_BEANINFO_PROPERTY_NAME).     assertThat(property).isEqualTo("false"). }
false;public;0;8;;@Test public void triggersConfigFileApplicationListenerBeforeBinding() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run("--spring.config.name=bindtoapplication").     assertThat(application).hasFieldOrPropertyWithValue("bannerMode", Banner.Mode.OFF). }
false;public;0;9;;@Test public void bindsSystemPropertyToSpringApplication() {     System.setProperty("spring.main.banner-mode", "off").     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run().     assertThat(application).hasFieldOrPropertyWithValue("bannerMode", Banner.Mode.OFF). }
false;public;0;7;;@Test public void customId() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run("--spring.application.name=foo").     assertThat(this.context.getId()).startsWith("foo"). }
false;public;0;7;;@Test public void specificApplicationContextClass() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setApplicationContextClass(StaticApplicationContext.class).     this.context = application.run().     assertThat(this.context).isInstanceOf(StaticApplicationContext.class). }
false;public;0;8;;@Test public void specificWebApplicationContextClassDetectWebApplicationType() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setApplicationContextClass(AnnotationConfigWebApplicationContext.class).     assertThat(application.getWebApplicationType()).isEqualTo(WebApplicationType.SERVLET). }
false;public;0;8;;@Test public void specificReactiveApplicationContextClassDetectReactiveApplicationType() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setApplicationContextClass(AnnotationConfigReactiveWebApplicationContext.class).     assertThat(application.getWebApplicationType()).isEqualTo(WebApplicationType.REACTIVE). }
false;public;0;7;;@Test public void nonWebNorReactiveApplicationContextClassDetectNoneApplicationType() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setApplicationContextClass(StaticApplicationContext.class).     assertThat(application.getWebApplicationType()).isEqualTo(WebApplicationType.NONE). }
false;public;0;12;;@Test public void specificApplicationContextInitializer() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     final AtomicReference<ApplicationContext> reference = new AtomicReference<>().     application.setInitializers(Collections.singletonList((ApplicationContextInitializer<ConfigurableApplicationContext>) reference::set)).     this.context = application.run("--foo=bar").     assertThat(this.context).isSameAs(reference.get()).     // Custom initializers do not switch off the defaults     assertThat(getEnvironment().getProperty("foo")).isEqualTo("bar"). }
false;public;1;4;;@Override public void onApplicationEvent(ApplicationReadyEvent event) {     reference.set(event.getSpringApplication()). }
false;public;0;18;;@Test public void applicationRunningEventListener() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     final AtomicReference<SpringApplication> reference = new AtomicReference<>().     class ApplicationReadyEventListener implements ApplicationListener<ApplicationReadyEvent> {          @Override         public void onApplicationEvent(ApplicationReadyEvent event) {             reference.set(event.getSpringApplication()).         }     }     application.addListeners(new ApplicationReadyEventListener()).     this.context = application.run("--foo=bar").     assertThat(application).isSameAs(reference.get()). }
false;public;1;4;;@Override public void onApplicationEvent(ContextRefreshedEvent event) {     reference.set(event.getApplicationContext()). }
false;public;0;19;;@Test public void contextRefreshedEventListener() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     final AtomicReference<ApplicationContext> reference = new AtomicReference<>().     class InitializerListener implements ApplicationListener<ContextRefreshedEvent> {          @Override         public void onApplicationEvent(ContextRefreshedEvent event) {             reference.set(event.getApplicationContext()).         }     }     application.setListeners(Collections.singletonList(new InitializerListener())).     this.context = application.run("--foo=bar").     assertThat(this.context).isSameAs(reference.get()).     // Custom initializers do not switch off the defaults     assertThat(getEnvironment().getProperty("foo")).isEqualTo("bar"). }
false;public;0;20;;@Test @SuppressWarnings("unchecked") public void eventsArePublishedInExpectedOrder() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     ApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class).     application.addListeners(listener).     this.context = application.run().     InOrder inOrder = Mockito.inOrder(listener).     inOrder.verify(listener).onApplicationEvent(isA(ApplicationStartingEvent.class)).     inOrder.verify(listener).onApplicationEvent(isA(ApplicationEnvironmentPreparedEvent.class)).     inOrder.verify(listener).onApplicationEvent(isA(ApplicationContextInitializedEvent.class)).     inOrder.verify(listener).onApplicationEvent(isA(ApplicationPreparedEvent.class)).     inOrder.verify(listener).onApplicationEvent(isA(ContextRefreshedEvent.class)).     inOrder.verify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class)).     inOrder.verify(listener).onApplicationEvent(isA(ApplicationReadyEvent.class)).     inOrder.verifyNoMoreInteractions(). }
false;public;0;7;;@Test public void defaultApplicationContext() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run().     assertThat(this.context).isInstanceOf(AnnotationConfigApplicationContext.class). }
false;public;0;8;;@Test public void defaultApplicationContextForWeb() {     SpringApplication application = new SpringApplication(ExampleWebConfig.class).     application.setWebApplicationType(WebApplicationType.SERVLET).     this.context = application.run().     assertThat(this.context).isInstanceOf(AnnotationConfigServletWebServerApplicationContext.class). }
false;public;0;9;;@Test public void defaultApplicationContextForReactiveWeb() {     SpringApplication application = new SpringApplication(ExampleReactiveWebConfig.class).     application.setWebApplicationType(WebApplicationType.REACTIVE).     this.context = application.run().     assertThat(this.context).isInstanceOf(AnnotationConfigReactiveWebServerApplicationContext.class). }
false;public;0;8;;@Test public void environmentForWeb() {     SpringApplication application = new SpringApplication(ExampleWebConfig.class).     application.setWebApplicationType(WebApplicationType.SERVLET).     this.context = application.run().     assertThat(this.context.getEnvironment()).isInstanceOf(StandardServletEnvironment.class). }
false;public;0;9;;@Test public void environmentForReactiveWeb() {     SpringApplication application = new SpringApplication(ExampleReactiveWebConfig.class).     application.setWebApplicationType(WebApplicationType.REACTIVE).     this.context = application.run().     assertThat(this.context.getEnvironment()).isInstanceOf(StandardReactiveWebEnvironment.class). }
false;public;0;10;;@Test public void customEnvironment() {     TestSpringApplication application = new TestSpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     ConfigurableEnvironment environment = new StandardEnvironment().     application.setEnvironment(environment).     this.context = application.run().     verify(application.getLoader()).setEnvironment(environment). }
false;public;0;10;;@Test public void customResourceLoader() {     TestSpringApplication application = new TestSpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     ResourceLoader resourceLoader = new DefaultResourceLoader().     application.setResourceLoader(resourceLoader).     this.context = application.run().     verify(application.getLoader()).setResourceLoader(resourceLoader). }
false;public;0;8;;@Test public void customResourceLoaderFromConstructor() {     ResourceLoader resourceLoader = new DefaultResourceLoader().     TestSpringApplication application = new TestSpringApplication(resourceLoader, ExampleWebConfig.class).     this.context = application.run().     verify(application.getLoader()).setResourceLoader(resourceLoader). }
false;public;0;12;;@Test public void customBeanNameGenerator() {     TestSpringApplication application = new TestSpringApplication(ExampleWebConfig.class).     BeanNameGenerator beanNameGenerator = new DefaultBeanNameGenerator().     application.setBeanNameGenerator(beanNameGenerator).     this.context = application.run().     verify(application.getLoader()).setBeanNameGenerator(beanNameGenerator).     Object actualGenerator = this.context.getBean(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR).     assertThat(actualGenerator).isSameAs(beanNameGenerator). }
false;public;0;13;;@Test public void customBeanNameGeneratorWithNonWebApplication() {     TestSpringApplication application = new TestSpringApplication(ExampleWebConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     BeanNameGenerator beanNameGenerator = new DefaultBeanNameGenerator().     application.setBeanNameGenerator(beanNameGenerator).     this.context = application.run().     verify(application.getLoader()).setBeanNameGenerator(beanNameGenerator).     Object actualGenerator = this.context.getBean(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR).     assertThat(actualGenerator).isSameAs(beanNameGenerator). }
false;public;0;10;;@Test public void commandLinePropertySource() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     ConfigurableEnvironment environment = new StandardEnvironment().     application.setEnvironment(environment).     this.context = application.run("--foo=bar").     assertThat(environment).has(matchingPropertySource(CommandLinePropertySource.class, "commandLineArgs")). }
false;public;0;24;;@Test public void commandLinePropertySourceEnhancesEnvironment() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     ConfigurableEnvironment environment = new StandardEnvironment().     environment.getPropertySources().addFirst(new MapPropertySource("commandLineArgs", Collections.singletonMap("foo", "original"))).     application.setEnvironment(environment).     this.context = application.run("--foo=bar", "--bar=foo").     assertThat(environment).has(matchingPropertySource(CompositePropertySource.class, "commandLineArgs")).     assertThat(environment.getProperty("bar")).isEqualTo("foo").     // New command line properties take precedence     assertThat(environment.getProperty("foo")).isEqualTo("bar").     CompositePropertySource composite = (CompositePropertySource) environment.getPropertySources().get("commandLineArgs").     assertThat(composite.getPropertySources()).hasSize(2).     assertThat(composite.getPropertySources()).first().matches((source) -> source.getName().equals("springApplicationCommandLineArgs"), "is named springApplicationCommandLineArgs").     assertThat(composite.getPropertySources()).element(1).matches((source) -> source.getName().equals("commandLineArgs"), "is named commandLineArgs"). }
false;public;0;9;;@Test public void propertiesFileEnhancesEnvironment() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     ConfigurableEnvironment environment = new StandardEnvironment().     application.setEnvironment(environment).     this.context = application.run().     assertThat(environment.getProperty("foo")).isEqualTo("bucket"). }
false;public;0;10;;@Test public void addProfiles() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     application.setAdditionalProfiles("foo").     ConfigurableEnvironment environment = new StandardEnvironment().     application.setEnvironment(environment).     this.context = application.run().     assertThat(environment.acceptsProfiles(Profiles.of("foo"))).isTrue(). }
false;public;0;11;;@Test public void addProfilesOrder() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     application.setAdditionalProfiles("foo").     ConfigurableEnvironment environment = new StandardEnvironment().     application.setEnvironment(environment).     this.context = application.run("--spring.profiles.active=bar,spam").     // Command line should always come last     assertThat(environment.getActiveProfiles()).containsExactly("foo", "bar", "spam"). }
false;public;0;12;;@Test public void addProfilesOrderWithProperties() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     application.setAdditionalProfiles("other").     ConfigurableEnvironment environment = new StandardEnvironment().     application.setEnvironment(environment).     this.context = application.run().     // Active profile should win over default     assertThat(environment.getProperty("my.property")).isEqualTo("fromotherpropertiesfile"). }
false;public;0;9;;@Test public void emptyCommandLinePropertySourceNotAdded() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     ConfigurableEnvironment environment = new StandardEnvironment().     application.setEnvironment(environment).     this.context = application.run().     assertThat(environment.getProperty("foo")).isEqualTo("bucket"). }
false;public;0;11;;@Test public void disableCommandLinePropertySource() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     application.setAddCommandLineProperties(false).     ConfigurableEnvironment environment = new StandardEnvironment().     application.setEnvironment(environment).     this.context = application.run("--foo=bar").     assertThat(environment).doesNotHave(matchingPropertySource(PropertySource.class, "commandLineArgs")). }
false;public;0;10;;@Test public void contextUsesApplicationConversionService() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run().     assertThat(this.context.getBeanFactory().getConversionService()).isInstanceOf(ApplicationConversionService.class).     assertThat(this.context.getEnvironment().getConversionService()).isInstanceOf(ApplicationConversionService.class). }
false;public;0;10;;@Test public void contextWhenHasAddConversionServiceFalseUsesRegularConversionService() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     application.setAddConversionService(false).     this.context = application.run().     assertThat(this.context.getBeanFactory().getConversionService()).isNull().     assertThat(this.context.getEnvironment().getConversionService()).isNotInstanceOf(ApplicationConversionService.class). }
false;public;0;9;;@Test public void runCommandLineRunnersAndApplicationRunners() {     SpringApplication application = new SpringApplication(CommandLineRunConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run("arg").     assertThat(this.context).has(runTestRunnerBean("runnerA")).     assertThat(this.context).has(runTestRunnerBean("runnerB")).     assertThat(this.context).has(runTestRunnerBean("runnerC")). }
false;public;0;39;;@Test @SuppressWarnings("unchecked") public void runnersAreCalledAfterStartedIsLoggedAndBeforeApplicationReadyEventIsPublished() throws Exception {     SpringApplication application = new SpringApplication(ExampleConfig.class).     ApplicationRunner applicationRunner = mock(ApplicationRunner.class).     CommandLineRunner commandLineRunner = mock(CommandLineRunner.class).     application.addInitializers((context) -> {         ConfigurableListableBeanFactory beanFactory = context.getBeanFactory().         beanFactory.registerSingleton("commandLineRunner", (CommandLineRunner) (args) -> {             assertThat(SpringApplicationTests.this.output.toString()).contains("Started").             commandLineRunner.run(args).         }).         beanFactory.registerSingleton("applicationRunner", (ApplicationRunner) (args) -> {             assertThat(SpringApplicationTests.this.output.toString()).contains("Started").             applicationRunner.run(args).         }).     }).     application.setWebApplicationType(WebApplicationType.NONE).     ApplicationListener<ApplicationReadyEvent> eventListener = mock(ApplicationListener.class).     application.addListeners(eventListener).     this.context = application.run().     InOrder applicationRunnerOrder = Mockito.inOrder(eventListener, applicationRunner).     applicationRunnerOrder.verify(applicationRunner).run(ArgumentMatchers.any(ApplicationArguments.class)).     applicationRunnerOrder.verify(eventListener).onApplicationEvent(ArgumentMatchers.any(ApplicationReadyEvent.class)).     InOrder commandLineRunnerOrder = Mockito.inOrder(eventListener, commandLineRunner).     commandLineRunnerOrder.verify(commandLineRunner).run().     commandLineRunnerOrder.verify(eventListener).onApplicationEvent(ArgumentMatchers.any(ApplicationReadyEvent.class)). }
false;public;0;19;;@Test public void applicationRunnerFailureCausesApplicationFailedEventToBePublished() throws Exception {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     @SuppressWarnings("unchecked")     ApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class).     application.addListeners(listener).     ApplicationRunner runner = mock(ApplicationRunner.class).     Exception failure = new Exception().     willThrow(failure).given(runner).run(isA(ApplicationArguments.class)).     application.addInitializers((context) -> context.getBeanFactory().registerSingleton("runner", runner)).     assertThatIllegalStateException().isThrownBy(application::run).withCause(failure).     verify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class)).     verify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class)).     verify(listener, never()).onApplicationEvent(isA(ApplicationReadyEvent.class)). }
false;public;0;19;;@Test public void commandLineRunnerFailureCausesApplicationFailedEventToBePublished() throws Exception {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     @SuppressWarnings("unchecked")     ApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class).     application.addListeners(listener).     CommandLineRunner runner = mock(CommandLineRunner.class).     Exception failure = new Exception().     willThrow(failure).given(runner).run().     application.addInitializers((context) -> context.getBeanFactory().registerSingleton("runner", runner)).     assertThatIllegalStateException().isThrownBy(application::run).withCause(failure).     verify(listener).onApplicationEvent(isA(ApplicationStartedEvent.class)).     verify(listener).onApplicationEvent(isA(ApplicationFailedEvent.class)).     verify(listener, never()).onApplicationEvent(isA(ApplicationReadyEvent.class)). }
false;public;0;16;;@Test public void failureInReadyEventListenerDoesNotCausePublicationOfFailedEvent() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     @SuppressWarnings("unchecked")     ApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class).     application.addListeners(listener).     RuntimeException failure = new RuntimeException().     willThrow(failure).given(listener).onApplicationEvent(isA(ApplicationReadyEvent.class)).     assertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run).isEqualTo(failure).     verify(listener).onApplicationEvent(isA(ApplicationReadyEvent.class)).     verify(listener, never()).onApplicationEvent(isA(ApplicationFailedEvent.class)). }
false;public;0;19;;@Test public void failureInReadyEventListenerCloseApplicationContext() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     ExitCodeListener exitCodeListener = new ExitCodeListener().     application.addListeners(exitCodeListener).     @SuppressWarnings("unchecked")     ApplicationListener<SpringApplicationEvent> listener = mock(ApplicationListener.class).     application.addListeners(listener).     ExitStatusException failure = new ExitStatusException().     willThrow(failure).given(listener).onApplicationEvent(isA(ApplicationReadyEvent.class)).     assertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run).     verify(listener).onApplicationEvent(isA(ApplicationReadyEvent.class)).     verify(listener, never()).onApplicationEvent(isA(ApplicationFailedEvent.class)).     assertThat(exitCodeListener.getExitCode()).isEqualTo(11).     assertThat(this.output.toString()).contains("Application run failed"). }
false;public;0;12;;@Test public void loadSources() {     Class<?>[] sources = { ExampleConfig.class, TestCommandLineRunner.class }.     TestSpringApplication application = new TestSpringApplication(sources).     application.getSources().add("a").     application.setWebApplicationType(WebApplicationType.NONE).     application.setUseMockLoader(true).     this.context = application.run().     Set<Object> allSources = application.getAllSources().     assertThat(allSources).contains(ExampleConfig.class, TestCommandLineRunner.class, "a"). }
false;public;0;8;;@Test public void wildcardSources() {     TestSpringApplication application = new TestSpringApplication().     application.getSources().add("classpath:org/springframework/boot/sample-${sample.app.test.prop}.xml").     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run(). }
false;public;0;5;;@Test public void run() {     this.context = SpringApplication.run(ExampleWebConfig.class).     assertThat(this.context).isNotNull(). }
false;public;0;6;;@Test public void runComponents() {     this.context = SpringApplication.run(new Class<?>[] { ExampleWebConfig.class, Object.class }, new String[0]).     assertThat(this.context).isNotNull(). }
false;public;0;8;;@Test public void exit() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run().     assertThat(this.context).isNotNull().     assertThat(SpringApplication.exit(this.context)).isEqualTo(0). }
false;public;0;12;;@Test public void exitWithExplicitCode() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     ExitCodeListener listener = new ExitCodeListener().     application.addListeners(listener).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run().     assertThat(this.context).isNotNull().     assertThat(SpringApplication.exit(this.context, (ExitCodeGenerator) () -> 2)).isEqualTo(2).     assertThat(listener.getExitCode()).isEqualTo(2). }
false;;0;4;;@Override SpringBootExceptionHandler getSpringBootExceptionHandler() {     return handler. }
false;public;0;19;;@Test public void exitWithExplicitCodeFromException() {     final SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class).     SpringApplication application = new SpringApplication(ExitCodeCommandLineRunConfig.class) {          @Override         SpringBootExceptionHandler getSpringBootExceptionHandler() {             return handler.         }     }.     ExitCodeListener listener = new ExitCodeListener().     application.addListeners(listener).     application.setWebApplicationType(WebApplicationType.NONE).     assertThatIllegalStateException().isThrownBy(application::run).     verify(handler).registerExitCode(11).     assertThat(listener.getExitCode()).isEqualTo(11). }
false;;0;4;;@Override SpringBootExceptionHandler getSpringBootExceptionHandler() {     return handler. }
false;public;0;19;;@Test public void exitWithExplicitCodeFromMappedException() {     final SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class).     SpringApplication application = new SpringApplication(MappedExitCodeCommandLineRunConfig.class) {          @Override         SpringBootExceptionHandler getSpringBootExceptionHandler() {             return handler.         }     }.     ExitCodeListener listener = new ExitCodeListener().     application.addListeners(listener).     application.setWebApplicationType(WebApplicationType.NONE).     assertThatIllegalStateException().isThrownBy(application::run).     verify(handler).registerExitCode(11).     assertThat(listener.getExitCode()).isEqualTo(11). }
false;;0;4;;@Override SpringBootExceptionHandler getSpringBootExceptionHandler() {     return handler. }
false;public;0;23;;@Test public void exceptionFromRefreshIsHandledGracefully() {     final SpringBootExceptionHandler handler = mock(SpringBootExceptionHandler.class).     SpringApplication application = new SpringApplication(RefreshFailureConfig.class) {          @Override         SpringBootExceptionHandler getSpringBootExceptionHandler() {             return handler.         }     }.     ExitCodeListener listener = new ExitCodeListener().     application.addListeners(listener).     application.setWebApplicationType(WebApplicationType.NONE).     assertThatExceptionOfType(RuntimeException.class).isThrownBy(application::run).     ArgumentCaptor<RuntimeException> exceptionCaptor = ArgumentCaptor.forClass(RuntimeException.class).     verify(handler).registerLoggedException(exceptionCaptor.capture()).     assertThat(exceptionCaptor.getValue()).hasCauseInstanceOf(RefreshFailureException.class).     assertThat(this.output.toString()).doesNotContain("NullPointerException"). }
false;public;0;11;;@Test public void defaultCommandLineArgs() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setDefaultProperties(StringUtils.splitArrayElementsIntoProperties(new String[] { "baz=", "bar=spam" }, "=")).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run("--bar=foo", "bucket", "crap").     assertThat(this.context).isInstanceOf(AnnotationConfigApplicationContext.class).     assertThat(getEnvironment().getProperty("bar")).isEqualTo("foo").     assertThat(getEnvironment().getProperty("baz")).isEqualTo(""). }
false;public;0;8;;@Test public void commandLineArgsApplyToSpringApplication() {     TestSpringApplication application = new TestSpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run("--spring.main.banner-mode=OFF").     assertThat(application.getBannerMode()).isEqualTo(Banner.Mode.OFF). }
false;public;0;8;;@Test public void registerShutdownHook() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setApplicationContextClass(SpyApplicationContext.class).     this.context = application.run().     SpyApplicationContext applicationContext = (SpyApplicationContext) this.context.     verify(applicationContext.getApplicationContext()).registerShutdownHook(). }
false;public;0;12;;@Test public void registerListener() {     SpringApplication application = new SpringApplication(ExampleConfig.class, ListenerConfig.class).     application.setApplicationContextClass(SpyApplicationContext.class).     Set<ApplicationEvent> events = new LinkedHashSet<>().     application.addListeners((ApplicationListener<ApplicationEvent>) events::add).     this.context = application.run().     assertThat(events).hasAtLeastOneElementOfType(ApplicationPreparedEvent.class).     assertThat(events).hasAtLeastOneElementOfType(ContextRefreshedEvent.class).     verifyTestListenerEvents(). }
false;public;0;12;;@Test public void registerListenerWithCustomMulticaster() {     SpringApplication application = new SpringApplication(ExampleConfig.class, ListenerConfig.class, Multicaster.class).     application.setApplicationContextClass(SpyApplicationContext.class).     Set<ApplicationEvent> events = new LinkedHashSet<>().     application.addListeners((ApplicationListener<ApplicationEvent>) events::add).     this.context = application.run().     assertThat(events).hasAtLeastOneElementOfType(ApplicationPreparedEvent.class).     assertThat(events).hasAtLeastOneElementOfType(ContextRefreshedEvent.class).     verifyTestListenerEvents(). }
false;private;0;7;;@SuppressWarnings("unchecked") private void verifyTestListenerEvents() {     ApplicationListener<ApplicationEvent> listener = this.context.getBean("testApplicationListener", ApplicationListener.class).     verifyListenerEvents(listener, ContextRefreshedEvent.class, ApplicationStartedEvent.class, ApplicationReadyEvent.class). }
false;private;2;8;;@SuppressWarnings("unchecked") private void verifyListenerEvents(ApplicationListener<ApplicationEvent> listener, Class<? extends ApplicationEvent>... eventTypes) {     for (Class<? extends ApplicationEvent> eventType : eventTypes) {         verify(listener).onApplicationEvent(isA(eventType)).     }     verifyNoMoreInteractions(listener). }
false;public;0;13;;@SuppressWarnings("unchecked") @Test public void applicationListenerFromApplicationIsCalledWhenContextFailsRefreshBeforeListenerRegistration() {     ApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class).     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.addListeners(listener).     assertThatExceptionOfType(ApplicationContextException.class).isThrownBy(application::run).     verifyListenerEvents(listener, ApplicationStartingEvent.class, ApplicationEnvironmentPreparedEvent.class, ApplicationContextInitializedEvent.class, ApplicationPreparedEvent.class, ApplicationFailedEvent.class). }
false;public;0;15;;@SuppressWarnings("unchecked") @Test public void applicationListenerFromApplicationIsCalledWhenContextFailsRefreshAfterListenerRegistration() {     ApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class).     SpringApplication application = new SpringApplication(BrokenPostConstructConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     application.addListeners(listener).     assertThatExceptionOfType(BeanCreationException.class).isThrownBy(application::run).     verifyListenerEvents(listener, ApplicationStartingEvent.class, ApplicationEnvironmentPreparedEvent.class, ApplicationContextInitializedEvent.class, ApplicationPreparedEvent.class, ApplicationFailedEvent.class). }
false;public;0;12;;@SuppressWarnings("unchecked") @Test public void applicationListenerFromContextIsCalledWhenContextFailsRefreshBeforeListenerRegistration() {     final ApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class).     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.addInitializers((applicationContext) -> applicationContext.addApplicationListener(listener)).     assertThatExceptionOfType(ApplicationContextException.class).isThrownBy(application::run).     verifyListenerEvents(listener, ApplicationFailedEvent.class). }
false;public;0;13;;@SuppressWarnings("unchecked") @Test public void applicationListenerFromContextIsCalledWhenContextFailsRefreshAfterListenerRegistration() {     ApplicationListener<ApplicationEvent> listener = mock(ApplicationListener.class).     SpringApplication application = new SpringApplication(BrokenPostConstructConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     application.addInitializers((applicationContext) -> applicationContext.addApplicationListener(listener)).     assertThatExceptionOfType(BeanCreationException.class).isThrownBy(application::run).     verifyListenerEvents(listener, ApplicationFailedEvent.class). }
false;public;0;10;;@Test public void registerShutdownHookOff() {     SpringApplication application = new SpringApplication(ExampleConfig.class).     application.setApplicationContextClass(SpyApplicationContext.class).     application.setRegisterShutdownHook(false).     this.context = application.run().     SpyApplicationContext applicationContext = (SpyApplicationContext) this.context.     verify(applicationContext.getApplicationContext(), never()).registerShutdownHook(). }
false;public;0;8;;@Test public void headless() {     TestSpringApplication application = new TestSpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run().     assertThat(System.getProperty("java.awt.headless")).isEqualTo("true"). }
false;public;0;9;;@Test public void headlessFalse() {     TestSpringApplication application = new TestSpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     application.setHeadless(false).     this.context = application.run().     assertThat(System.getProperty("java.awt.headless")).isEqualTo("false"). }
false;public;0;9;;@Test public void headlessSystemPropertyTakesPrecedence() {     System.setProperty("java.awt.headless", "false").     TestSpringApplication application = new TestSpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run().     assertThat(System.getProperty("java.awt.headless")).isEqualTo("false"). }
false;public;0;10;;@Test public void getApplicationArgumentsBean() {     TestSpringApplication application = new TestSpringApplication(ExampleConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run("--debug", "spring", "boot").     ApplicationArguments args = this.context.getBean(ApplicationArguments.class).     assertThat(args.getNonOptionArgs()).containsExactly("spring", "boot").     assertThat(args.containsOption("debug")).isTrue(). }
false;public;0;23;;@Test public void webApplicationSwitchedOffInListener() {     TestSpringApplication application = new TestSpringApplication(ExampleConfig.class).     application.addListeners((ApplicationListener<ApplicationEnvironmentPreparedEvent>) (event) -> {         Assertions.assertThat(event.getEnvironment()).isInstanceOf(StandardServletEnvironment.class).         TestPropertySourceUtils.addInlinedPropertiesToEnvironment(event.getEnvironment(), "foo=bar").         event.getSpringApplication().setWebApplicationType(WebApplicationType.NONE).     }).     this.context = application.run().     assertThat(this.context.getEnvironment()).isNotInstanceOf(StandardServletEnvironment.class).     assertThat(this.context.getEnvironment().getProperty("foo")).isEqualTo("bar").     Iterator<PropertySource<?>> iterator = this.context.getEnvironment().getPropertySources().iterator().     assertThat(iterator.next().getName()).isEqualTo("configurationProperties").     assertThat(iterator.next().getName()).isEqualTo(TestPropertySourceUtils.INLINED_PROPERTIES_PROPERTY_SOURCE_NAME). }
false;public;0;9;;@Test public void nonWebApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment() {     ConfigurableApplicationContext context = new SpringApplication(ExampleConfig.class).run("--spring.main.web-application-type=none").     assertThat(context).isNotInstanceOfAny(WebApplicationContext.class, ReactiveWebApplicationContext.class).     assertThat(context.getEnvironment()).isNotInstanceOfAny(ConfigurableWebEnvironment.class). }
false;public;0;8;;@Test public void webApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment() {     ConfigurableApplicationContext context = new SpringApplication(ExampleWebConfig.class).run("--spring.main.web-application-type=servlet").     assertThat(context).isInstanceOf(WebApplicationContext.class).     assertThat(context.getEnvironment()).isInstanceOf(StandardServletEnvironment.class). }
false;public;0;9;;@Test public void reactiveApplicationConfiguredViaAPropertyHasTheCorrectTypeOfContextAndEnvironment() {     ConfigurableApplicationContext context = new SpringApplication(ExampleReactiveWebConfig.class).run("--spring.main.web-application-type=reactive").     assertThat(context).isInstanceOf(ReactiveWebApplicationContext.class).     assertThat(context.getEnvironment()).isInstanceOf(StandardReactiveWebEnvironment.class). }
false;public;0;9;;@Test public void environmentIsConvertedIfTypeDoesNotMatch() {     ConfigurableApplicationContext context = new SpringApplication(ExampleReactiveWebConfig.class).run("--spring.profiles.active=withwebapplicationtype").     assertThat(context).isInstanceOf(ReactiveWebApplicationContext.class).     assertThat(context.getEnvironment()).isInstanceOf(StandardReactiveWebEnvironment.class). }
false;public;0;7;;@Override public void run() {     SpringApplication application = new SpringApplication(FailingConfig.class).     application.setWebApplicationType(WebApplicationType.NONE).     application.run(). }
false;public;0;18;;@Test public void failureResultsInSingleStackTrace() throws Exception {     ThreadGroup group = new ThreadGroup("main").     Thread thread = new Thread(group, "main") {          @Override         public void run() {             SpringApplication application = new SpringApplication(FailingConfig.class).             application.setWebApplicationType(WebApplicationType.NONE).             application.run().         }     }.     thread.start().     thread.join(6000).     int occurrences = StringUtils.countOccurrencesOf(this.output.toString(), "Caused by: java.lang.RuntimeException: ExpectedError").     assertThat(occurrences).as("Expected single stacktrace").isEqualTo(1). }
false;public;0;6;;@Test public void beanDefinitionOverridingIsDisabledByDefault() {     assertThatExceptionOfType(BeanDefinitionOverrideException.class).isThrownBy(() -> new SpringApplication(ExampleConfig.class, OverrideConfig.class).run()). }
false;public;0;8;;@Test public void beanDefinitionOverridingCanBeEnabled() {     assertThat(new SpringApplication(ExampleConfig.class, OverrideConfig.class).run("--spring.main.allow-bean-definition-overriding=true", "--spring.main.web-application-type=none").getBean("someBean")).isEqualTo("override"). }
false;public;0;6;;@Test public void lazyInitializationIsDisabledByDefault() {     assertThat(new SpringApplication(LazyInitializationConfig.class).run("--spring.main.web-application-type=none").getBean(AtomicInteger.class)).hasValue(1). }
false;public;0;7;;@Test public void lazyInitializationCanBeEnabled() {     assertThat(new SpringApplication(LazyInitializationConfig.class).run("--spring.main.web-application-type=none", "--spring.main.lazy-initialization=true").getBean(AtomicInteger.class)).hasValue(0). }
false;public;1;10;;@Override public boolean matches(ConfigurableEnvironment value) {     for (PropertySource<?> source : value.getPropertySources()) {         if (propertySourceClass.isInstance(source) && (name == null || name.equals(source.getName()))) {             return true.         }     }     return false. }
false;private;2;17;;private Condition<ConfigurableEnvironment> matchingPropertySource(final Class<?> propertySourceClass, final String name) {     return new Condition<ConfigurableEnvironment>("has property source") {          @Override         public boolean matches(ConfigurableEnvironment value) {             for (PropertySource<?> source : value.getPropertySources()) {                 if (propertySourceClass.isInstance(source) && (name == null || name.equals(source.getName()))) {                     return true.                 }             }             return false.         }     }. }
false;public;1;4;;@Override public boolean matches(ConfigurableApplicationContext value) {     return value.getBean(name, AbstractTestRunner.class).hasRun(). }
false;private;1;11;;private Condition<ConfigurableApplicationContext> runTestRunnerBean(final String name) {     return new Condition<ConfigurableApplicationContext>("run testrunner bean") {          @Override         public boolean matches(ConfigurableApplicationContext value) {             return value.getBean(name, AbstractTestRunner.class).hasRun().         }     }. }
false;public;0;4;;@Override public void registerShutdownHook() {     this.applicationContext.registerShutdownHook(). }
false;public;0;3;;public ConfigurableApplicationContext getApplicationContext() {     return this.applicationContext. }
false;public;0;4;;@Override public void close() {     this.applicationContext.close(). }
false;public;1;3;;public void setUseMockLoader(boolean useMockLoader) {     this.useMockLoader = useMockLoader. }
false;protected;2;11;;@Override protected BeanDefinitionLoader createBeanDefinitionLoader(BeanDefinitionRegistry registry, Object[] sources) {     if (this.useMockLoader) {         this.loader = mock(BeanDefinitionLoader.class).     } else {         this.loader = spy(super.createBeanDefinitionLoader(registry, sources)).     }     return this.loader. }
false;public;0;3;;public BeanDefinitionLoader getLoader() {     return this.loader. }
false;public;1;5;;@Override public void setBannerMode(Banner.Mode bannerMode) {     super.setBannerMode(bannerMode).     this.bannerMode = bannerMode. }
false;public;0;3;;public Banner.Mode getBannerMode() {     return this.bannerMode. }
false;public;0;4;;@Bean public String someBean() {     return "test". }
false;public;0;4;;@Bean public String someBean() {     return "override". }
false;public;0;4;;@Bean public Thing thing() {     return new Thing(). }
false;public;0;4;;@PostConstruct public void boom() {     throw new IllegalStateException(). }
false;public;0;4;;@Bean public ApplicationListener<?> testApplicationListener() {     return mock(ApplicationListener.class). }
false;public;0;4;;@Bean(name = AbstractApplicationContext.APPLICATION_EVENT_MULTICASTER_BEAN_NAME) public ApplicationEventMulticaster applicationEventMulticaster() {     return spy(new SimpleApplicationEventMulticaster()). }
false;public;0;4;;@Bean public TomcatServletWebServerFactory webServer() {     return new TomcatServletWebServerFactory(0). }
false;public;0;4;;@Bean public NettyReactiveWebServerFactory webServerFactory() {     return new NettyReactiveWebServerFactory(0). }
false;public;0;4;;@Bean public HttpHandler httpHandler() {     return (serverHttpRequest, serverHttpResponse) -> Mono.empty(). }
false;public;0;4;;@Bean public Object fail() {     throw new RuntimeException("ExpectedError"). }
false;public;0;5;;@Bean public TestCommandLineRunner runnerC() {     return new TestCommandLineRunner(Ordered.LOWEST_PRECEDENCE, "runnerB", "runnerA"). }
false;public;0;4;;@Bean public TestApplicationRunner runnerB() {     return new TestApplicationRunner(Ordered.LOWEST_PRECEDENCE - 1, "runnerA"). }
false;public;0;4;;@Bean public TestCommandLineRunner runnerA() {     return new TestCommandLineRunner(Ordered.HIGHEST_PRECEDENCE). }
false;public;0;6;;@Bean public CommandLineRunner runner() {     return (args) -> {         throw new IllegalStateException(new ExitStatusException()).     }. }
false;public;0;6;;@Bean public CommandLineRunner runner() {     return (args) -> {         throw new IllegalStateException().     }. }
false;public;0;9;;@Bean public ExitCodeExceptionMapper exceptionMapper() {     return (exception) -> {         if (exception instanceof IllegalStateException) {             return 11.         }         return 0.     }. }
false;public;0;4;;@PostConstruct public void fail() {     throw new RefreshFailureException(). }
false;public;0;4;;@Bean public AtomicInteger counter() {     return new AtomicInteger(0). }
false;public;1;4;;@Bean public LazyBean lazyBean(AtomicInteger counter) {     return new LazyBean(counter). }
false;public;0;4;;@Override public int getExitCode() {     return 11. }
false;public;1;5;;@Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {     this.applicationContext = applicationContext. }
false;public;0;4;;@Override public int getOrder() {     return this.order. }
false;public;0;8;;public void markAsRan() {     this.run = true.     for (String name : this.expectedBefore) {         AbstractTestRunner bean = this.applicationContext.getBean(name, AbstractTestRunner.class).         assertThat(bean.hasRun()).isTrue().     } }
false;public;0;3;;public boolean hasRun() {     return this.run. }
false;public;1;4;;@Override public void run(String... args) {     markAsRan(). }
false;public;1;4;;@Override public void run(ApplicationArguments args) {     markAsRan(). }
false;public;1;4;;@Override public void onApplicationEvent(ExitCodeEvent event) {     this.exitCode = event.getExitCode(). }
false;public;0;3;;public Integer getExitCode() {     return this.exitCode. }
false;public;2;3;;public void addResource(String source, String path) {     this.resources.put(source, new ClassPathResource(path, getClass())). }
false;public;1;5;;@Override public Resource getResource(String path) {     Resource resource = this.resources.get(path).     return (resource != null) ? resource : new ClassPathResource("doesnotexist"). }
false;public;0;4;;@Override public ClassLoader getClassLoader() {     return getClass().getClassLoader(). }
