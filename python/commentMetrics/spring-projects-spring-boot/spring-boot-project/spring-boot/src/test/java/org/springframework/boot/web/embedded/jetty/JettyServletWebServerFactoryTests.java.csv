commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected JettyServletWebServerFactory getFactory() {     return new JettyServletWebServerFactory(0). }
false;public;0;13;;@Test public void jettyConfigurations() throws Exception {     JettyServletWebServerFactory factory = getFactory().     Configuration[] configurations = new Configuration[4].     Arrays.setAll(configurations, (i) -> mock(Configuration.class)).     factory.setConfigurations(Arrays.asList(configurations[0], configurations[1])).     factory.addConfigurations(configurations[2], configurations[3]).     this.webServer = factory.getWebServer().     InOrder ordered = inOrder((Object[]) configurations).     for (Configuration configuration : configurations) {         ordered.verify(configuration).configure(any(WebAppContext.class)).     } }
false;public;0;13;;@Test public void jettyCustomizations() {     JettyServletWebServerFactory factory = getFactory().     JettyServerCustomizer[] configurations = new JettyServerCustomizer[4].     Arrays.setAll(configurations, (i) -> mock(JettyServerCustomizer.class)).     factory.setServerCustomizers(Arrays.asList(configurations[0], configurations[1])).     factory.addServerCustomizers(configurations[2], configurations[3]).     this.webServer = factory.getWebServer().     InOrder ordered = inOrder((Object[]) configurations).     for (JettyServerCustomizer configuration : configurations) {         ordered.verify(configuration).customize(any(Server.class)).     } }
false;public;0;6;;@Test public void sessionTimeout() {     JettyServletWebServerFactory factory = getFactory().     factory.getSession().setTimeout(Duration.ofSeconds(10)).     assertTimeout(factory, 10). }
false;public;0;6;;@Test public void sessionTimeoutInMins() {     JettyServletWebServerFactory factory = getFactory().     factory.getSession().setTimeout(Duration.ofMinutes(1)).     assertTimeout(factory, 60). }
false;public;0;24;;@Test public void sslCiphersConfiguration() {     Ssl ssl = new Ssl().     ssl.setKeyStore("src/test/resources/test.jks").     ssl.setKeyStorePassword("secret").     ssl.setKeyPassword("password").     ssl.setCiphers(new String[] { "ALPHA", "BRAVO", "CHARLIE" }).     JettyServletWebServerFactory factory = getFactory().     factory.setSsl(ssl).     this.webServer = factory.getWebServer().     this.webServer.start().     JettyWebServer jettyWebServer = (JettyWebServer) this.webServer.     ServerConnector connector = (ServerConnector) jettyWebServer.getServer().getConnectors()[0].     SslConnectionFactory connectionFactory = connector.getConnectionFactory(SslConnectionFactory.class).     assertThat(connectionFactory.getSslContextFactory().getIncludeCipherSuites()).containsExactly("ALPHA", "BRAVO", "CHARLIE").     assertThat(connectionFactory.getSslContextFactory().getExcludeCipherSuites()).isEmpty(). }
false;public;0;8;;@Test public void stopCalledWithoutStart() {     JettyServletWebServerFactory factory = getFactory().     this.webServer = factory.getWebServer(exampleServletRegistration()).     this.webServer.stop().     Server server = ((JettyWebServer) this.webServer).getServer().     assertThat(server.isStopped()).isTrue(). }
false;protected;2;8;;@Override protected void addConnector(int port, AbstractServletWebServerFactory factory) {     ((JettyServletWebServerFactory) factory).addServerCustomizers((server) -> {         ServerConnector connector = new ServerConnector(server).         connector.setPort(port).         server.addConnector(connector).     }). }
false;public;0;14;;@Test public void sslEnabledMultiProtocolsConfiguration() {     JettyServletWebServerFactory factory = getFactory().     factory.setSsl(getSslSettings("TLSv1.1", "TLSv1.2")).     this.webServer = factory.getWebServer().     this.webServer.start().     JettyWebServer jettyWebServer = (JettyWebServer) this.webServer.     ServerConnector connector = (ServerConnector) jettyWebServer.getServer().getConnectors()[0].     SslConnectionFactory connectionFactory = connector.getConnectionFactory(SslConnectionFactory.class).     assertThat(connectionFactory.getSslContextFactory().getIncludeProtocols()).containsExactly("TLSv1.1", "TLSv1.2"). }
false;public;0;14;;@Test public void sslEnabledProtocolsConfiguration() {     JettyServletWebServerFactory factory = getFactory().     factory.setSsl(getSslSettings("TLSv1.1")).     this.webServer = factory.getWebServer().     this.webServer.start().     JettyWebServer jettyWebServer = (JettyWebServer) this.webServer.     ServerConnector connector = (ServerConnector) jettyWebServer.getServer().getConnectors()[0].     SslConnectionFactory connectionFactory = connector.getConnectionFactory(SslConnectionFactory.class).     assertThat(connectionFactory.getSslContextFactory().getIncludeProtocols()).containsExactly("TLSv1.1"). }
false;private;1;9;;private Ssl getSslSettings(String... enabledProtocols) {     Ssl ssl = new Ssl().     ssl.setKeyStore("src/test/resources/test.jks").     ssl.setKeyStorePassword("secret").     ssl.setKeyPassword("password").     ssl.setCiphers(new String[] { "ALPHA", "BRAVO", "CHARLIE" }).     ssl.setEnabledProtocols(enabledProtocols).     return ssl. }
false;private;2;9;;private void assertTimeout(JettyServletWebServerFactory factory, int expected) {     this.webServer = factory.getWebServer().     JettyWebServer jettyWebServer = (JettyWebServer) this.webServer.     Handler[] handlers = jettyWebServer.getServer().getChildHandlersByClass(WebAppContext.class).     WebAppContext webAppContext = (WebAppContext) handlers[0].     int actual = webAppContext.getSessionHandler().getMaxInactiveInterval().     assertThat(actual).isEqualTo(expected). }
false;public;0;15;;@Test public void wrappedHandlers() throws Exception {     JettyServletWebServerFactory factory = getFactory().     factory.setServerCustomizers(Collections.singletonList((server) -> {         Handler handler = server.getHandler().         HandlerWrapper wrapper = new HandlerWrapper().         wrapper.setHandler(handler).         HandlerCollection collection = new HandlerCollection().         collection.addHandler(wrapper).         server.setHandler(collection).     })).     this.webServer = factory.getWebServer(exampleServletRegistration()).     this.webServer.start().     assertThat(getResponse(getLocalUrl("/hello"))).isEqualTo("Hello World"). }
false;public;0;4;;@Test public void basicSslClasspathKeyStore() throws Exception {     testBasicSslWithKeyStore("classpath:test.jks"). }
false;public;0;6;;@Test public void useForwardHeaders() throws Exception {     JettyServletWebServerFactory factory = getFactory().     factory.setUseForwardHeaders(true).     assertForwardHeaderIsUsed(factory). }
false;public;0;9;;@Test public void defaultThreadPool() {     JettyServletWebServerFactory factory = getFactory().     factory.setThreadPool(null).     assertThat(factory.getThreadPool()).isNull().     this.webServer = factory.getWebServer().     assertThat(((JettyWebServer) this.webServer).getServer().getThreadPool()).isNotNull(). }
false;public;0;9;;@Test public void customThreadPool() {     JettyServletWebServerFactory factory = getFactory().     ThreadPool threadPool = mock(ThreadPool.class).     factory.setThreadPool(threadPool).     this.webServer = factory.getWebServer().     assertThat(((JettyWebServer) this.webServer).getServer().getThreadPool()).isSameAs(threadPool). }
false;public;0;12;;@Test public void startFailsWhenThreadPoolIsTooSmall() {     JettyServletWebServerFactory factory = getFactory().     factory.addServerCustomizers((server) -> {         QueuedThreadPool threadPool = server.getBean(QueuedThreadPool.class).         threadPool.setMaxThreads(2).         threadPool.setMinThreads(2).     }).     assertThatExceptionOfType(WebServerException.class).isThrownBy(factory.getWebServer()::start).withCauseInstanceOf(IllegalStateException.class). }
false;public;0;12;;@Test public void specificIPAddressNotReverseResolved() throws Exception {     JettyServletWebServerFactory factory = getFactory().     InetAddress localhost = InetAddress.getLocalHost().     factory.setAddress(InetAddress.getByAddress(localhost.getAddress())).     this.webServer = factory.getWebServer().     this.webServer.start().     Connector connector = ((JettyWebServer) this.webServer).getServer().getConnectors()[0].     assertThat(((ServerConnector) connector).getHost()).isEqualTo(localhost.getHostAddress()). }
false;public;0;17;;@Test public void specificIPAddressWithSslIsNotReverseResolved() throws Exception {     JettyServletWebServerFactory factory = getFactory().     InetAddress localhost = InetAddress.getLocalHost().     factory.setAddress(InetAddress.getByAddress(localhost.getAddress())).     Ssl ssl = new Ssl().     ssl.setKeyStore("src/test/resources/test.jks").     ssl.setKeyStorePassword("secret").     ssl.setKeyPassword("password").     factory.setSsl(ssl).     this.webServer = factory.getWebServer().     this.webServer.start().     Connector connector = ((JettyWebServer) this.webServer).getServer().getConnectors()[0].     assertThat(((ServerConnector) connector).getHost()).isEqualTo(localhost.getHostAddress()). }
false;public;1;4;;@Override public void contextInitialized(ServletContextEvent event) {     throw new RuntimeException(). }
false;public;1;3;;@Override public void contextDestroyed(ServletContextEvent event) { }
false;public;0;30;;@Test public void faultyListenerCausesStartFailure() throws Exception {     JettyServletWebServerFactory factory = getFactory().     factory.addServerCustomizers((JettyServerCustomizer) (server) -> {         Collection<WebAppContext> contexts = server.getBeans(WebAppContext.class).         contexts.iterator().next().addEventListener(new ServletContextListener() {              @Override             public void contextInitialized(ServletContextEvent event) {                 throw new RuntimeException().             }              @Override             public void contextDestroyed(ServletContextEvent event) {             }         }).     }).     assertThatExceptionOfType(WebServerException.class).isThrownBy(() -> {         JettyWebServer jettyWebServer = (JettyWebServer) factory.getWebServer().         try {             jettyWebServer.start().         } finally {             QueuedThreadPool threadPool = (QueuedThreadPool) jettyWebServer.getServer().getThreadPool().             assertThat(threadPool.isRunning()).isFalse().         }     }). }
false;protected;0;12;;@Override protected JspServlet getJspServlet() throws Exception {     WebAppContext context = (WebAppContext) ((JettyWebServer) this.webServer).getServer().getHandler().     ServletHolder holder = context.getServletHandler().getServlet("jsp").     if (holder == null) {         return null.     }     holder.start().     holder.initialize().     return (JspServlet) holder.getServlet(). }
false;protected;0;6;;@Override protected Map<String, String> getActualMimeMappings() {     WebAppContext context = (WebAppContext) ((JettyWebServer) this.webServer).getServer().getHandler().     return context.getMimeTypes().getMimeMap(). }
false;protected;1;7;;@Override protected Charset getCharset(Locale locale) {     WebAppContext context = (WebAppContext) ((JettyWebServer) this.webServer).getServer().getHandler().     String charsetName = context.getLocaleEncoding(locale).     return (charsetName != null) ? Charset.forName(charsetName) : null. }
false;protected;2;6;;@Override protected void handleExceptionCausedByBlockedPort(RuntimeException ex, int blockedPort) {     assertThat(ex).isInstanceOf(PortInUseException.class).     assertThat(((PortInUseException) ex).getPort()).isEqualTo(blockedPort). }
