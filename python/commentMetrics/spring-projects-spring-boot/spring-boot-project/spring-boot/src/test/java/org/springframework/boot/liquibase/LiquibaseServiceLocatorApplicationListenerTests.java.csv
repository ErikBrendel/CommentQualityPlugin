commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void cleanUp() {     if (this.context != null) {         this.context.close().     } }
false;public;0;8;;@Test public void replacesServiceLocator() throws IllegalAccessException {     SpringApplication application = new SpringApplication(Conf.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run().     Object resolver = getClassResolver().     assertThat(resolver).isInstanceOf(SpringPackageScanClassResolver.class). }
false;public;0;13;;@Test public void replaceServiceLocatorBacksOffIfNotPresent() throws IllegalAccessException {     SpringApplication application = new SpringApplication(Conf.class).     application.setWebApplicationType(WebApplicationType.NONE).     DefaultResourceLoader resourceLoader = new DefaultResourceLoader().     resourceLoader.setClassLoader(new ClassHidingClassLoader(CustomResolverServiceLocator.class)).     application.setResourceLoader(resourceLoader).     this.context = application.run().     Object resolver = getClassResolver().     assertThat(resolver).isInstanceOf(DefaultPackageScanClassResolver.class). }
false;private;0;6;;private Object getClassResolver() throws IllegalAccessException {     ServiceLocator instance = ServiceLocator.getInstance().     Field field = ReflectionUtils.findField(ServiceLocator.class, "classResolver").     field.setAccessible(true).     return field.get(instance). }
false;public;1;7;;@Override public Class<?> loadClass(String name) throws ClassNotFoundException {     if (isHidden(name)) {         throw new ClassNotFoundException().     }     return super.loadClass(name). }
false;private;1;8;;private boolean isHidden(String name) {     for (Class<?> hiddenClass : this.hiddenClasses) {         if (hiddenClass.getName().equals(name)) {             return true.         }     }     return false. }
