commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.dataSourceMetadata = createDataSourceMetadata(0, 2). }
false;protected;0;4;;@Override protected CommonsDbcp2DataSourcePoolMetadata getDataSourceMetadata() {     return this.dataSourceMetadata. }
false;public;0;4;;@Override public Integer getActive() {     return null. }
false;public;0;11;;@Test public void getPoolUsageWithNoCurrent() {     CommonsDbcp2DataSourcePoolMetadata dsm = new CommonsDbcp2DataSourcePoolMetadata(createDataSource()) {          @Override         public Integer getActive() {             return null.         }     }.     assertThat(dsm.getUsage()).isNull(). }
false;public;0;4;;@Override public Integer getMax() {     return null. }
false;public;0;11;;@Test public void getPoolUsageWithNoMax() {     CommonsDbcp2DataSourcePoolMetadata dsm = new CommonsDbcp2DataSourcePoolMetadata(createDataSource()) {          @Override         public Integer getMax() {             return null.         }     }.     assertThat(dsm.getUsage()).isNull(). }
false;public;0;5;;@Test public void getPoolUsageWithUnlimitedPool() {     DataSourcePoolMetadata unlimitedDataSource = createDataSourceMetadata(0, -1).     assertThat(unlimitedDataSource.getUsage()).isEqualTo(Float.valueOf(-1F)). }
false;public;0;8;;@Override public void getValidationQuery() {     BasicDataSource dataSource = createDataSource().     dataSource.setValidationQuery("SELECT FROM FOO").     assertThat(new CommonsDbcp2DataSourcePoolMetadata(dataSource).getValidationQuery()).isEqualTo("SELECT FROM FOO"). }
false;public;0;8;;@Override public void getDefaultAutoCommit() {     BasicDataSource dataSource = createDataSource().     dataSource.setDefaultAutoCommit(false).     assertThat(new CommonsDbcp2DataSourcePoolMetadata(dataSource).getDefaultAutoCommit()).isFalse(). }
false;private;2;7;;private CommonsDbcp2DataSourcePoolMetadata createDataSourceMetadata(int minSize, int maxSize) {     BasicDataSource dataSource = createDataSource().     dataSource.setMinIdle(minSize).     dataSource.setMaxTotal(maxSize).     return new CommonsDbcp2DataSourcePoolMetadata(dataSource). }
false;private;0;3;;private BasicDataSource createDataSource() {     return initializeBuilder().type(BasicDataSource.class).build(). }
