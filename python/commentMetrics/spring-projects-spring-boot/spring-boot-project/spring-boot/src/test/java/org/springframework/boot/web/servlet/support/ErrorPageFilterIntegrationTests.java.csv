commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void init() {     this.controller.reset(). }
false;public;0;5;;@Test public void created() throws Exception {     doTest(this.context, "/create", HttpStatus.CREATED).     assertThat(this.controller.getStatus()).isEqualTo(201). }
false;public;0;5;;@Test public void ok() throws Exception {     doTest(this.context, "/hello", HttpStatus.OK).     assertThat(this.controller.getStatus()).isEqualTo(200). }
false;private;3;9;;private void doTest(AnnotationConfigServletWebServerApplicationContext context, String resourcePath, HttpStatus status) throws Exception {     int port = context.getWebServer().getPort().     RestTemplate template = new RestTemplate().     ResponseEntity<String> entity = template.getForEntity(new URI("http://localhost:" + port + resourcePath), String.class).     assertThat(entity.getBody()).isEqualTo("Hello World").     assertThat(entity.getStatusCode()).isEqualTo(status). }
false;public;0;4;;@Bean public ServletWebServerFactory webServerFactory() {     return new TomcatServletWebServerFactory(0). }
false;public;0;4;;@Bean public ErrorPageFilter errorPageFilter() {     return new ErrorPageFilter(). }
false;public;0;4;;@Bean public DispatcherServlet dispatcherServlet() {     return new DispatcherServlet(). }
false;public;0;4;;@Bean public HelloWorldController helloWorldController() {     return new HelloWorldController(). }
false;public;0;5;;public int getStatus() throws InterruptedException {     assertThat(this.latch.await(1, TimeUnit.SECONDS)).as("Timed out waiting for latch").isTrue().     return this.status. }
false;public;1;3;;public void setStatus(int status) {     this.status = status. }
false;public;0;4;;public void reset() {     this.status = 0.     this.latch = new CountDownLatch(1). }
false;public;4;7;;@Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) {     HelloWorldController.this.setStatus(response.getStatus()).     HelloWorldController.this.latch.countDown(). }
false;public;1;12;;@Override public void addInterceptors(InterceptorRegistry registry) {     registry.addInterceptor(new HandlerInterceptorAdapter() {          @Override         public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) {             HelloWorldController.this.setStatus(response.getStatus()).             HelloWorldController.this.latch.countDown().         }     }). }
false;public;0;5;;@RequestMapping("/hello") @ResponseBody public String sayHello() {     return "Hello World". }
false;public;0;6;;@RequestMapping("/create") @ResponseBody @ResponseStatus(HttpStatus.CREATED) public String created() {     return "Hello World". }
false;public;1;7;;@Override public ApplicationContext loadContext(MergedContextConfiguration config) {     AnnotationConfigServletWebServerApplicationContext context = new AnnotationConfigServletWebServerApplicationContext(config.getClasses()).     context.registerShutdownHook().     return context. }
false;public;1;4;;@Override public ApplicationContext loadContext(String... locations) {     throw new UnsupportedOptionException(). }
false;protected;0;4;;@Override protected String[] getResourceSuffixes() {     return EMPTY_RESOURCE_SUFFIXES. }
false;protected;0;4;;@Override protected String getResourceSuffix() {     throw new UnsupportedOptionException(). }
