commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void resetAnsi() {     AnsiOutput.setEnabled(Enabled.DETECT). }
false;public;0;7;;@After public void cleanUp() {     resetAnsi().     if (this.context != null) {         this.context.close().     } }
false;public;0;10;;@Test public void enabled() {     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     Map<String, Object> props = new HashMap<>().     props.put("spring.output.ansi.enabled", "ALWAYS").     application.setDefaultProperties(props).     this.context = application.run().     assertThat(AnsiOutputEnabledValue.get()).isEqualTo(Enabled.ALWAYS). }
false;public;0;10;;@Test public void disabled() {     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     Map<String, Object> props = new HashMap<>().     props.put("spring.output.ansi.enabled", "never").     application.setDefaultProperties(props).     this.context = application.run().     assertThat(AnsiOutputEnabledValue.get()).isEqualTo(Enabled.NEVER). }
false;public;0;11;;@Test public void disabledViaApplicationProperties() {     ConfigurableEnvironment environment = new StandardEnvironment().     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(environment, "spring.config.name=ansi").     SpringApplication application = new SpringApplication(Config.class).     application.setEnvironment(environment).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run().     assertThat(AnsiOutputEnabledValue.get()).isEqualTo(Enabled.NEVER). }
