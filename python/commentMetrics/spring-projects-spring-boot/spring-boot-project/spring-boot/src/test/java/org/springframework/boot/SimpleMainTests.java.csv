commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test(expected = IllegalArgumentException.class) public void emptyApplicationContext() throws Exception {     SpringApplication.main(getArgs()).     assertThat(getOutput()).contains(SPRING_STARTUP). }
false;public;0;6;;@Test public void basePackageScan() throws Exception {     SpringApplication.main(getArgs(ClassUtils.getPackageName(getClass()) + ".sampleconfig")).     assertThat(getOutput()).contains(SPRING_STARTUP). }
false;public;0;5;;@Test public void configClassContext() throws Exception {     SpringApplication.main(getArgs(getClass().getName())).     assertThat(getOutput()).contains(SPRING_STARTUP). }
false;public;0;5;;@Test public void xmlContext() throws Exception {     SpringApplication.main(getArgs("org/springframework/boot/sample-beans.xml")).     assertThat(getOutput()).contains(SPRING_STARTUP). }
false;public;0;6;;@Test public void mixedContext() throws Exception {     SpringApplication.main(getArgs(getClass().getName(), "org/springframework/boot/sample-beans.xml")).     assertThat(getOutput()).contains(SPRING_STARTUP). }
false;private;1;11;;private String[] getArgs(String... args) {     List<String> list = new ArrayList<>(Arrays.asList("--spring.main.web-application-type=none", "--spring.main.show-banner=OFF", "--spring.main.register-shutdownHook=false")).     if (args.length > 0) {         list.add("--spring.main.sources=" + StringUtils.arrayToCommaDelimitedString(args)).     }     return StringUtils.toStringArray(list). }
false;private;0;3;;private String getOutput() {     return this.outputCapture.toString(). }
