commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void cleanUp() {     if (this.context != null) {         this.context.close().     } }
false;public;0;11;;@Test public void componentsAreRegistered() {     this.context = new AnnotationConfigServletWebServerApplicationContext().     this.context.register(TestConfiguration.class).     new ServerPortInfoApplicationContextInitializer().initialize(this.context).     this.context.refresh().     String port = this.context.getEnvironment().getProperty("local.server.port").     String response = new RestTemplate().getForObject("http://localhost:" + port + "/test", String.class).     assertThat(response).isEqualTo("alpha bravo"). }
false;public;0;20;;@Test public void multipartConfigIsHonoured() {     this.context = new AnnotationConfigServletWebServerApplicationContext().     this.context.register(TestConfiguration.class).     new ServerPortInfoApplicationContextInitializer().initialize(this.context).     this.context.refresh().     @SuppressWarnings("rawtypes")     Map<String, ServletRegistrationBean> beans = this.context.getBeansOfType(ServletRegistrationBean.class).     ServletRegistrationBean<?> servletRegistrationBean = beans.get(TestMultipartServlet.class.getName()).     assertThat(servletRegistrationBean).isNotNull().     MultipartConfigElement multipartConfig = servletRegistrationBean.getMultipartConfig().     assertThat(multipartConfig).isNotNull().     assertThat(multipartConfig.getLocation()).isEqualTo("test").     assertThat(multipartConfig.getMaxRequestSize()).isEqualTo(2048).     assertThat(multipartConfig.getMaxFileSize()).isEqualTo(1024).     assertThat(multipartConfig.getFileSizeThreshold()).isEqualTo(512). }
false;public;0;4;;@Bean public TomcatServletWebServerFactory webServerFactory() {     return new TomcatServletWebServerFactory(0). }
