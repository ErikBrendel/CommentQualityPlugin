commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void init() throws SecurityException, IOException {     LogManager.getLogManager().readConfiguration(JavaLoggingSystem.class.getResourceAsStream("logging.properties")).     multicastEvent(new ApplicationStartingEvent(new SpringApplication(), NO_ARGS)).     this.logFile = new File(this.temp.getRoot(), "foo.log").     new File(tmpDir() + "/spring.log").delete().     ConfigurableEnvironment environment = this.context.getEnvironment().     ConfigurationPropertySources.attach(environment). }
false;public;0;18;;@After public void clear() {     LoggingSystem loggingSystem = LoggingSystem.get(getClass().getClassLoader()).     loggingSystem.setLogLevel("ROOT", LogLevel.INFO).     loggingSystem.cleanUp().     System.clearProperty(LoggingSystem.class.getName()).     System.clearProperty(LoggingSystemProperties.LOG_FILE).     System.clearProperty(LoggingSystemProperties.LOG_PATH).     System.clearProperty(LoggingSystemProperties.PID_KEY).     System.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD).     System.clearProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN).     System.clearProperty(LoggingSystemProperties.FILE_LOG_PATTERN).     System.clearProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN).     System.clearProperty(LoggingSystem.SYSTEM_PROPERTY).     if (this.context != null) {         this.context.close().     } }
false;private;0;9;;private String tmpDir() {     String path = this.context.getEnvironment().resolvePlaceholders("${java.io.tmpdir}").     path = path.replace("\\", "/").     if (path.endsWith("/")) {         path = path.substring(0, path.length() - 1).     }     return path. }
false;public;0;10;;@Test public void baseConfigLocation() {     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.outputCapture.expect(containsString("Hello world")).     this.outputCapture.expect(not(containsString("???"))).     this.outputCapture.expect(containsString("[junit-")).     this.logger.info("Hello world", new RuntimeException("Expected")).     assertThat(new File(tmpDir() + "/spring.log").exists()).isFalse(). }
false;public;0;11;;@Test public void overrideConfigLocation() {     addPropertiesToEnvironment(this.context, "logging.config=classpath:logback-nondefault.xml").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.info("Hello world").     String output = this.outputCapture.toString().trim().     assertThat(output).contains("Hello world").doesNotContain("???").startsWith("null ").endsWith("BOOTBOOT"). }
false;public;0;10;;@Test public void overrideConfigDoesNotExist() {     addPropertiesToEnvironment(this.context, "logging.config=doesnotexist.xml").     assertThatIllegalStateException().isThrownBy(() -> {         this.outputCapture.expect(containsString("Logging system failed to initialize using configuration from 'doesnotexist.xml'")).         this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     }). }
false;public;0;11;;@Test public void azureDefaultLoggingConfigDoesNotCauseAFailure() {     addPropertiesToEnvironment(this.context, "logging.config=-Djava.util.logging.config.file=\"d:\\home\\site\\wwwroot\\bin\\apache-tomcat-7.0.52\\conf\\logging.properties\"").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.info("Hello world").     String output = this.outputCapture.toString().trim().     assertThat(output).contains("Hello world").doesNotContain("???").     assertThat(new File(tmpDir() + "/spring.log").exists()).isFalse(). }
false;public;0;10;;@Test public void tomcatNopLoggingConfigDoesNotCauseAFailure() {     addPropertiesToEnvironment(this.context, "LOGGING_CONFIG=-Dnop").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.info("Hello world").     String output = this.outputCapture.toString().trim().     assertThat(output).contains("Hello world").doesNotContain("???").     assertThat(new File(tmpDir() + "/spring.log").exists()).isFalse(). }
false;public;0;12;;@Test public void overrideConfigBroken() {     addPropertiesToEnvironment(this.context, "logging.config=classpath:logback-broken.xml").     assertThatIllegalStateException().isThrownBy(() -> {         this.outputCapture.expect(containsString("Logging system failed to initialize using configuration from 'classpath:logback-broken.xml'")).         this.outputCapture.expect(containsString("ConsolAppender")).         this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     }). }
false;public;0;14;;@Test public void addLogFileProperty() {     addPropertiesToEnvironment(this.context, "logging.config=classpath:logback-nondefault.xml", "logging.file.name=" + this.logFile).     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     Log logger = LogFactory.getLog(LoggingApplicationListenerTests.class).     String existingOutput = this.outputCapture.toString().     logger.info("Hello world").     String output = this.outputCapture.toString().substring(existingOutput.length()).trim().     assertThat(output).startsWith(this.logFile.getAbsolutePath()). }
false;public;0;15;;@Test @Deprecated public void addLogFilePropertyWithDeprecatedProperty() {     addPropertiesToEnvironment(this.context, "logging.config=classpath:logback-nondefault.xml", "logging.file=" + this.logFile).     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     Log logger = LogFactory.getLog(LoggingApplicationListenerTests.class).     String existingOutput = this.outputCapture.toString().     logger.info("Hello world").     String output = this.outputCapture.toString().substring(existingOutput.length()).trim().     assertThat(output).startsWith(this.logFile.getAbsolutePath()). }
false;public;0;10;;@Test public void addLogFilePropertyWithDefault() {     assertThat(this.logFile).doesNotExist().     addPropertiesToEnvironment(this.context, "logging.file.name=" + this.logFile).     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     Log logger = LogFactory.getLog(LoggingApplicationListenerTests.class).     logger.info("Hello world").     assertThat(this.logFile).isFile(). }
false;public;0;11;;@Test @Deprecated public void addLogFilePropertyWithDefaultAndDeprecatedProperty() {     assertThat(this.logFile).doesNotExist().     addPropertiesToEnvironment(this.context, "logging.file=" + this.logFile).     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     Log logger = LogFactory.getLog(LoggingApplicationListenerTests.class).     logger.info("Hello world").     assertThat(this.logFile).isFile(). }
false;public;0;15;;@Test public void addLogPathProperty() {     addPropertiesToEnvironment(this.context, "logging.config=classpath:logback-nondefault.xml", "logging.file.path=" + this.temp.getRoot()).     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     Log logger = LogFactory.getLog(LoggingApplicationListenerTests.class).     String existingOutput = this.outputCapture.toString().     logger.info("Hello world").     String output = this.outputCapture.toString().substring(existingOutput.length()).trim().     assertThat(output).startsWith(new File(this.temp.getRoot(), "spring.log").getAbsolutePath()). }
false;public;0;15;;@Test public void addLogPathPropertyWithDeprecatedProperty() {     addPropertiesToEnvironment(this.context, "logging.config=classpath:logback-nondefault.xml", "logging.path=" + this.temp.getRoot()).     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     Log logger = LogFactory.getLog(LoggingApplicationListenerTests.class).     String existingOutput = this.outputCapture.toString().     logger.info("Hello world").     String output = this.outputCapture.toString().substring(existingOutput.length()).trim().     assertThat(output).startsWith(new File(this.temp.getRoot(), "spring.log").getAbsolutePath()). }
false;public;0;10;;@Test public void parseDebugArg() {     addPropertiesToEnvironment(this.context, "debug").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.debug("testatdebug").     this.logger.trace("testattrace").     assertThat(this.outputCapture.toString()).contains("testatdebug").     assertThat(this.outputCapture.toString()).doesNotContain("testattrace"). }
false;public;0;11;;@Test public void parseDebugArgExpandGroups() {     addPropertiesToEnvironment(this.context, "debug").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.loggerContext.getLogger("org.springframework.boot.actuate.endpoint.web").debug("testdebugwebgroup").     this.loggerContext.getLogger("org.hibernate.SQL").debug("testdebugsqlgroup").     assertThat(this.outputCapture.toString()).contains("testdebugwebgroup").     assertThat(this.outputCapture.toString()).contains("testdebugsqlgroup"). }
false;public;0;10;;@Test public void parseTraceArg() {     addPropertiesToEnvironment(this.context, "trace").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.debug("testatdebug").     this.logger.trace("testattrace").     assertThat(this.outputCapture.toString()).contains("testatdebug").     assertThat(this.outputCapture.toString()).contains("testattrace"). }
false;public;0;4;;@Test public void disableDebugArg() {     disableDebugTraceArg("debug=false"). }
false;public;0;4;;@Test public void disableTraceArg() {     disableDebugTraceArg("trace=false"). }
false;private;1;9;;private void disableDebugTraceArg(String... environment) {     addPropertiesToEnvironment(this.context, environment).     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.debug("testatdebug").     this.logger.trace("testattrace").     assertThat(this.outputCapture.toString()).doesNotContain("testatdebug").     assertThat(this.outputCapture.toString()).doesNotContain("testattrace"). }
false;public;0;11;;@Test public void parseLevels() {     addPropertiesToEnvironment(this.context, "logging.level.org.springframework.boot=TRACE").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.debug("testatdebug").     this.logger.trace("testattrace").     assertThat(this.outputCapture.toString()).contains("testatdebug").     assertThat(this.outputCapture.toString()).contains("testattrace"). }
false;public;0;11;;@Test public void parseLevelsCaseInsensitive() {     addPropertiesToEnvironment(this.context, "logging.level.org.springframework.boot=TrAcE").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.debug("testatdebug").     this.logger.trace("testattrace").     assertThat(this.outputCapture.toString()).contains("testatdebug").     assertThat(this.outputCapture.toString()).contains("testattrace"). }
false;public;0;11;;@Test public void parseLevelsTrimsWhitespace() {     addPropertiesToEnvironment(this.context, "logging.level.org.springframework.boot= trace ").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.debug("testatdebug").     this.logger.trace("testattrace").     assertThat(this.outputCapture.toString()).contains("testatdebug").     assertThat(this.outputCapture.toString()).contains("testattrace"). }
false;public;0;11;;@Test public void parseLevelsWithPlaceholder() {     addPropertiesToEnvironment(this.context, "foo=TRACE", "logging.level.org.springframework.boot=${foo}").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.debug("testatdebug").     this.logger.trace("testattrace").     assertThat(this.outputCapture.toString()).contains("testatdebug").     assertThat(this.outputCapture.toString()).contains("testattrace"). }
false;public;0;10;;@Test public void parseLevelsFails() {     addPropertiesToEnvironment(this.context, "logging.level.org.springframework.boot=GARBAGE").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.debug("testatdebug").     assertThat(this.outputCapture.toString()).doesNotContain("testatdebug").contains("Cannot set level 'GARBAGE'"). }
false;public;0;11;;@Test public void parseLevelsNone() {     addPropertiesToEnvironment(this.context, "logging.level.org.springframework.boot=OFF").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.debug("testatdebug").     this.logger.error("testaterror").     assertThat(this.outputCapture.toString()).doesNotContain("testatdebug").doesNotContain("testaterror"). }
false;public;0;11;;@Test public void parseLevelsMapsFalseToOff() {     addPropertiesToEnvironment(this.context, "logging.level.org.springframework.boot=false").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.debug("testatdebug").     this.logger.error("testaterror").     assertThat(this.outputCapture.toString()).doesNotContain("testatdebug").doesNotContain("testaterror"). }
false;public;0;9;;@Test public void parseArgsDisabled() {     this.initializer.setParseArgs(false).     addPropertiesToEnvironment(this.context, "debug").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.debug("testatdebug").     assertThat(this.outputCapture.toString()).doesNotContain("testatdebug"). }
false;public;0;11;;@Test public void parseArgsDoesntReplace() {     this.initializer.setSpringBootLogging(LogLevel.ERROR).     this.initializer.setParseArgs(false).     multicastEvent(new ApplicationStartingEvent(this.springApplication, new String[] { "--debug" })).     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.debug("testatdebug").     assertThat(this.outputCapture.toString()).doesNotContain("testatdebug"). }
false;public;0;6;;@Test public void bridgeHandlerLifecycle() {     assertThat(bridgeHandlerInstalled()).isTrue().     multicastEvent(new ContextClosedEvent(this.context)).     assertThat(bridgeHandlerInstalled()).isFalse(). }
false;public;0;10;;@Test public void defaultExceptionConversionWord() {     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.outputCapture.expect(containsString("Hello world")).     this.outputCapture.expect(not(containsString("Wrapped by: java.lang.RuntimeException: Wrapper"))).     this.logger.info("Hello world", new RuntimeException("Wrapper", new RuntimeException("Expected"))). }
false;public;0;11;;@Test public void overrideExceptionConversionWord() {     addPropertiesToEnvironment(this.context, "logging.exceptionConversionWord=%rEx").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.outputCapture.expect(containsString("Hello world")).     this.outputCapture.expect(containsString("Wrapped by: java.lang.RuntimeException: Wrapper")).     this.logger.info("Hello world", new RuntimeException("Wrapper", new RuntimeException("Expected"))). }
false;public;0;10;;@Test public void shutdownHookIsNotRegisteredByDefault() {     TestLoggingApplicationListener listener = new TestLoggingApplicationListener().     System.setProperty(LoggingSystem.class.getName(), TestShutdownHandlerLoggingSystem.class.getName()).     multicastEvent(listener, new ApplicationStartingEvent(new SpringApplication(), NO_ARGS)).     listener.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     assertThat(listener.shutdownHook).isNull(). }
false;public;0;14;;@Test public void shutdownHookCanBeRegistered() throws Exception {     TestLoggingApplicationListener listener = new TestLoggingApplicationListener().     System.setProperty(LoggingSystem.class.getName(), TestShutdownHandlerLoggingSystem.class.getName()).     addPropertiesToEnvironment(this.context, "logging.register_shutdown_hook=true").     multicastEvent(listener, new ApplicationStartingEvent(new SpringApplication(), NO_ARGS)).     listener.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     assertThat(listener.shutdownHook).isNotNull().     listener.shutdownHook.start().     assertThat(TestShutdownHandlerLoggingSystem.shutdownLatch.await(30, TimeUnit.SECONDS)).isTrue(). }
false;public;0;12;;@Test public void closingContextCleansUpLoggingSystem() {     System.setProperty(LoggingSystem.SYSTEM_PROPERTY, TestCleanupLoggingSystem.class.getName()).     multicastEvent(new ApplicationStartingEvent(this.springApplication, new String[0])).     TestCleanupLoggingSystem loggingSystem = (TestCleanupLoggingSystem) ReflectionTestUtils.getField(this.initializer, "loggingSystem").     assertThat(loggingSystem.cleanedUp).isFalse().     multicastEvent(new ContextClosedEvent(this.context)).     assertThat(loggingSystem.cleanedUp).isTrue(). }
false;public;0;17;;@Test public void closingChildContextDoesNotCleanUpLoggingSystem() {     System.setProperty(LoggingSystem.SYSTEM_PROPERTY, TestCleanupLoggingSystem.class.getName()).     multicastEvent(new ApplicationStartingEvent(this.springApplication, new String[0])).     TestCleanupLoggingSystem loggingSystem = (TestCleanupLoggingSystem) ReflectionTestUtils.getField(this.initializer, "loggingSystem").     assertThat(loggingSystem.cleanedUp).isFalse().     GenericApplicationContext childContext = new GenericApplicationContext().     childContext.setParent(this.context).     multicastEvent(new ContextClosedEvent(childContext)).     assertThat(loggingSystem.cleanedUp).isFalse().     multicastEvent(new ContextClosedEvent(this.context)).     assertThat(loggingSystem.cleanedUp).isTrue().     childContext.close(). }
false;public;0;23;;@Test public void systemPropertiesAreSetForLoggingConfiguration() {     addPropertiesToEnvironment(this.context, "logging.exception-conversion-word=conversion", "logging.file.name=" + this.logFile, "logging.file.path=path", "logging.pattern.console=console", "logging.pattern.file=file", "logging.pattern.level=level").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     assertThat(System.getProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN)).isEqualTo("console").     assertThat(System.getProperty(LoggingSystemProperties.FILE_LOG_PATTERN)).isEqualTo("file").     assertThat(System.getProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD)).isEqualTo("conversion").     assertThat(System.getProperty(LoggingSystemProperties.LOG_FILE)).isEqualTo(this.logFile.getAbsolutePath()).     assertThat(System.getProperty(LoggingSystemProperties.LOG_LEVEL_PATTERN)).isEqualTo("level").     assertThat(System.getProperty(LoggingSystemProperties.LOG_PATH)).isEqualTo("path").     assertThat(System.getProperty(LoggingSystemProperties.PID_KEY)).isNotNull(). }
false;public;0;12;;@Test @Deprecated public void systemPropertiesAreSetForLoggingConfigurationWithDeprecatedProperties() {     addPropertiesToEnvironment(this.context, "logging.file=" + this.logFile, "logging.path=path").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     assertThat(System.getProperty(LoggingSystemProperties.LOG_FILE)).isEqualTo(this.logFile.getAbsolutePath()).     assertThat(System.getProperty(LoggingSystemProperties.LOG_PATH)).isEqualTo("path"). }
false;public;0;10;;@Test public void environmentPropertiesIgnoreUnresolvablePlaceholders() {     // gh-7719     addPropertiesToEnvironment(this.context, "logging.pattern.console=console ${doesnotexist}").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     assertThat(System.getProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN)).isEqualTo("console ${doesnotexist}"). }
false;public;0;10;;@Test public void environmentPropertiesResolvePlaceholders() {     addPropertiesToEnvironment(this.context, "logging.pattern.console=console ${pid}").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     assertThat(System.getProperty(LoggingSystemProperties.CONSOLE_LOG_PATTERN)).isEqualTo(this.context.getEnvironment().getProperty("logging.pattern.console")). }
false;public;0;10;;@Test public void logFilePropertiesCanReferenceSystemProperties() {     addPropertiesToEnvironment(this.context, "logging.file.name=" + this.temp.getRoot().getAbsolutePath() + "${PID}.log").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     assertThat(System.getProperty(LoggingSystemProperties.LOG_FILE)).isEqualTo(this.temp.getRoot().getAbsolutePath() + new ApplicationPid().toString() + ".log"). }
false;public;0;13;;@Test public void applicationFailedEventCleansUpLoggingSystem() {     System.setProperty(LoggingSystem.SYSTEM_PROPERTY, TestCleanupLoggingSystem.class.getName()).     multicastEvent(new ApplicationStartingEvent(this.springApplication, new String[0])).     TestCleanupLoggingSystem loggingSystem = (TestCleanupLoggingSystem) ReflectionTestUtils.getField(this.initializer, "loggingSystem").     assertThat(loggingSystem.cleanedUp).isFalse().     multicastEvent(new ApplicationFailedEvent(this.springApplication, new String[0], new GenericApplicationContext(), new Exception())).     assertThat(loggingSystem.cleanedUp).isTrue(). }
false;public;0;13;;@Test public void lowPriorityPropertySourceShouldNotOverrideRootLoggerConfig() {     MutablePropertySources propertySources = this.context.getEnvironment().getPropertySources().     propertySources.addFirst(new MapPropertySource("test1", Collections.singletonMap("logging.level.ROOT", "DEBUG"))).     propertySources.addLast(new MapPropertySource("test2", Collections.singletonMap("logging.level.root", "WARN"))).     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     this.logger.debug("testatdebug").     assertThat(this.outputCapture.toString()).contains("testatdebug"). }
false;public;0;14;;@Test public void loggingGroupsDefaultsAreApplied() {     addPropertiesToEnvironment(this.context, "logging.level.web=TRACE").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     assertTraceEnabled("org.springframework.core", false).     assertTraceEnabled("org.springframework.core.codec", true).     assertTraceEnabled("org.springframework.http", true).     assertTraceEnabled("org.springframework.web", true).     assertTraceEnabled("org.springframework.boot.actuate.endpoint.web", true).     assertTraceEnabled("org.springframework.boot.web.servlet.ServletContextInitializerBeans", true). }
false;public;0;10;;@Test public void loggingGroupsCanBeDefined() {     addPropertiesToEnvironment(this.context, "logging.group.foo=com.foo.bar,com.foo.baz", "logging.level.foo=TRACE").     this.initializer.initialize(this.context.getEnvironment(), this.context.getClassLoader()).     assertTraceEnabled("com.foo", false).     assertTraceEnabled("com.foo.bar", true).     assertTraceEnabled("com.foo.baz", true). }
false;private;2;4;;private void assertTraceEnabled(String name, boolean expected) {     assertThat(this.loggerContext.getLogger(name).isTraceEnabled()).isEqualTo(expected). }
false;private;1;3;;private void multicastEvent(ApplicationEvent event) {     multicastEvent(this.initializer, event). }
false;private;2;5;;private void multicastEvent(ApplicationListener<?> listener, ApplicationEvent event) {     SimpleApplicationEventMulticaster multicaster = new SimpleApplicationEventMulticaster().     multicaster.addApplicationListener(listener).     multicaster.multicastEvent(event). }
false;private;0;10;;private boolean bridgeHandlerInstalled() {     Logger rootLogger = LogManager.getLogManager().getLogger("").     Handler[] handlers = rootLogger.getHandlers().     for (Handler handler : handlers) {         if (handler instanceof SLF4JBridgeHandler) {             return true.         }     }     return false. }
false;private;2;12;;private void addPropertiesToEnvironment(ConfigurableApplicationContext context, String... pairs) {     ConfigurableEnvironment environment = context.getEnvironment().     Map<String, Object> properties = new HashMap<>().     for (String pair : pairs) {         String[] split = pair.split("=", 2).         properties.put(split[0], (split.length == 2) ? split[1] : "").     }     MapPropertySource propertySource = new MapPropertySource("logging-config", properties).     environment.getPropertySources().addFirst(propertySource). }
false;protected;0;4;;@Override protected String[] getStandardConfigLocations() {     return new String[] { "foo.bar" }. }
false;protected;2;4;;@Override protected void loadDefaults(LoggingInitializationContext initializationContext, LogFile logFile) { }
false;protected;3;5;;@Override protected void loadConfiguration(LoggingInitializationContext initializationContext, String location, LogFile logFile) { }
false;public;2;3;;@Override public void setLogLevel(String loggerName, LogLevel level) { }
false;public;0;4;;@Override public List<LoggerConfiguration> getLoggerConfigurations() {     return null. }
false;public;1;4;;@Override public LoggerConfiguration getLoggerConfiguration(String loggerName) {     return null. }
false;public;0;4;;@Override public Runnable getShutdownHandler() {     return () -> TestShutdownHandlerLoggingSystem.shutdownLatch.countDown(). }
false;;1;4;;@Override void registerShutdownHook(Thread shutdownHook) {     this.shutdownHook = shutdownHook. }
false;public;0;3;;@Override public void beforeInitialize() { }
false;public;2;3;;@Override public void setLogLevel(String loggerName, LogLevel level) { }
false;public;0;4;;@Override public List<LoggerConfiguration> getLoggerConfigurations() {     return null. }
false;public;1;4;;@Override public LoggerConfiguration getLoggerConfiguration(String loggerName) {     return null. }
false;public;0;4;;@Override public void cleanUp() {     this.cleanedUp = true. }
