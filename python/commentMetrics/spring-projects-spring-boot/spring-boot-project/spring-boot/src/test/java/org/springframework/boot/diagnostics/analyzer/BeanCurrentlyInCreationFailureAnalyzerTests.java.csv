commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void cyclicBeanMethods() throws IOException {     FailureAnalysis analysis = performAnalysis(CyclicBeanMethodsConfiguration.class).     List<String> lines = readDescriptionLines(analysis).     assertThat(lines).hasSize(9).     assertThat(lines.get(0)).isEqualTo("The dependencies of some of the beans in the application context form a cycle:").     assertThat(lines.get(1)).isEqualTo("").     assertThat(lines.get(2)).isEqualTo("┌─────┐").     assertThat(lines.get(3)).startsWith("|  one defined in " + InnerInnerConfiguration.class.getName()).     assertThat(lines.get(4)).isEqualTo("↑     ↓").     assertThat(lines.get(5)).startsWith("|  two defined in " + InnerConfiguration.class.getName()).     assertThat(lines.get(6)).isEqualTo("↑     ↓").     assertThat(lines.get(7)).startsWith("|  three defined in " + CyclicBeanMethodsConfiguration.class.getName()).     assertThat(lines.get(8)).isEqualTo("└─────┘"). }
false;public;0;21;;@Test public void cycleWithAutowiredFields() throws IOException {     FailureAnalysis analysis = performAnalysis(CycleWithAutowiredFields.class).     assertThat(analysis.getDescription()).startsWith("The dependencies of some of the beans in the application context form a cycle:").     List<String> lines = readDescriptionLines(analysis).     assertThat(lines).hasSize(9).     assertThat(lines.get(0)).isEqualTo("The dependencies of some of the beans in the application context form a cycle:").     assertThat(lines.get(1)).isEqualTo("").     assertThat(lines.get(2)).isEqualTo("┌─────┐").     assertThat(lines.get(3)).startsWith("|  three defined in " + BeanThreeConfiguration.class.getName()).     assertThat(lines.get(4)).isEqualTo("↑     ↓").     assertThat(lines.get(5)).startsWith("|  one defined in " + CycleWithAutowiredFields.class.getName()).     assertThat(lines.get(6)).isEqualTo("↑     ↓").     assertThat(lines.get(7)).startsWith("|  " + BeanTwoConfiguration.class.getName() + " (field private " + BeanThree.class.getName()).     assertThat(lines.get(8)).isEqualTo("└─────┘"). }
false;public;0;25;;@Test public void cycleReferencedViaOtherBeans() throws IOException {     FailureAnalysis analysis = performAnalysis(CycleReferencedViaOtherBeansConfiguration.class).     List<String> lines = readDescriptionLines(analysis).     assertThat(lines).hasSize(12).     assertThat(lines.get(0)).isEqualTo("The dependencies of some of the beans in the application context form a cycle:").     assertThat(lines.get(1)).isEqualTo("").     assertThat(lines.get(2)).contains("refererOne " + "(field " + RefererTwo.class.getName()).     assertThat(lines.get(3)).isEqualTo("      ↓").     assertThat(lines.get(4)).contains("refererTwo " + "(field " + BeanOne.class.getName()).     assertThat(lines.get(5)).isEqualTo("┌─────┐").     assertThat(lines.get(6)).startsWith("|  one defined in " + CycleReferencedViaOtherBeansConfiguration.class.getName()).     assertThat(lines.get(7)).isEqualTo("↑     ↓").     assertThat(lines.get(8)).startsWith("|  two defined in " + CycleReferencedViaOtherBeansConfiguration.class.getName()).     assertThat(lines.get(9)).isEqualTo("↑     ↓").     assertThat(lines.get(10)).startsWith("|  three defined in " + CycleReferencedViaOtherBeansConfiguration.class.getName()).     assertThat(lines.get(11)).isEqualTo("└─────┘"). }
false;public;0;5;;@Test public void cycleWithAnUnknownStartIsNotAnalyzed() {     assertThat(this.analyzer.analyze(new BeanCurrentlyInCreationException("test"))).isNull(). }
false;private;1;7;;private List<String> readDescriptionLines(FailureAnalysis analysis) throws IOException {     try (BufferedReader reader = new BufferedReader(new StringReader(analysis.getDescription()))) {         return reader.lines().collect(Collectors.toList()).     } }
false;private;1;5;;private FailureAnalysis performAnalysis(Class<?> configuration) {     FailureAnalysis analysis = this.analyzer.analyze(createFailure(configuration)).     assertThat(analysis).isNotNull().     return analysis. }
false;private;1;10;;private Exception createFailure(Class<?> configuration) {     try (ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(configuration)) {         fail("Expected failure did not occur").         return null.     } catch (Exception ex) {         return ex.     } }
false;public;1;4;;@Bean public BeanThree three(BeanOne one) {     return new BeanThree(). }
false;public;1;4;;@Bean public BeanTwo two(BeanThree three) {     return new BeanTwo(). }
false;public;1;4;;@Bean public BeanOne one(BeanTwo two) {     return new BeanOne(). }
false;public;1;4;;@Bean public BeanOne one(BeanTwo two) {     return new BeanOne(). }
false;public;1;4;;@Bean public BeanTwo two(BeanThree three) {     return new BeanTwo(). }
false;public;1;4;;@Bean public BeanThree three(BeanOne beanOne) {     return new BeanThree(). }
false;public;0;4;;@Bean public RefererTwo refererTwo() {     return new RefererTwo(). }
false;public;0;4;;@Bean public RefererOne refererOne() {     return new RefererOne(). }
false;public;1;4;;@Bean public BeanOne one(BeanTwo two) {     return new BeanOne(). }
false;public;0;4;;@Bean public BeanTwo two() {     return new BeanTwo(). }
false;public;1;4;;@Bean public BeanThree three(BeanOne one) {     return new BeanThree(). }
