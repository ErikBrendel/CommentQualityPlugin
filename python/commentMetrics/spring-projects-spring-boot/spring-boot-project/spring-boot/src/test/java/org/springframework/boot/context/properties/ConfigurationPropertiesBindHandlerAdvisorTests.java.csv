commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void cleanup() {     this.context.close(). }
false;public;0;16;;@Test public void loadWithoutConfigurationPropertiesBindHandlerAdvisor() {     load(WithoutConfigurationPropertiesBindHandlerAdvisor.class, "foo.bar.default.content-type=text/plain", "foo.bar.bindings.input.destination=d1", "foo.bar.bindings.input.content-type=text/xml", "foo.bar.bindings.output.destination=d2").     BindingServiceProperties properties = this.context.getBean(BindingServiceProperties.class).     BindingProperties input = properties.getBindings().get("input").     assertThat(input.getDestination()).isEqualTo("d1").     assertThat(input.getContentType()).isEqualTo("text/xml").     BindingProperties output = properties.getBindings().get("output").     assertThat(output.getDestination()).isEqualTo("d2").     assertThat(output.getContentType()).isEqualTo("application/json"). }
false;public;0;16;;@Test public void loadWithConfigurationPropertiesBindHandlerAdvisor() {     load(WithConfigurationPropertiesBindHandlerAdvisor.class, "foo.bar.default.content-type=text/plain", "foo.bar.bindings.input.destination=d1", "foo.bar.bindings.input.content-type=text/xml", "foo.bar.bindings.output.destination=d2").     BindingServiceProperties properties = this.context.getBean(BindingServiceProperties.class).     BindingProperties input = properties.getBindings().get("input").     assertThat(input.getDestination()).isEqualTo("d1").     assertThat(input.getContentType()).isEqualTo("text/xml").     BindingProperties output = properties.getBindings().get("output").     assertThat(output.getDestination()).isEqualTo("d2").     assertThat(output.getContentType()).isEqualTo("text/plain"). }
false;private;2;4;;private AnnotationConfigApplicationContext load(Class<?> configuration, String... inlinedProperties) {     return load(new Class<?>[] { configuration }, inlinedProperties). }
false;private;2;8;;private AnnotationConfigApplicationContext load(Class<?>[] configuration, String... inlinedProperties) {     this.context.register(configuration).     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context, inlinedProperties).     this.context.refresh().     return this.context. }
false;public;1;4;;@Override public BindHandler apply(BindHandler bindHandler) {     return new DefaultValuesBindHandler(bindHandler). }
false;public;3;13;;@Override public <T> Bindable<T> onStart(ConfigurationPropertyName name, Bindable<T> target, BindContext context) {     ConfigurationPropertyName defaultName = getDefaultName(name).     if (defaultName != null) {         BindResult<T> result = context.getBinder().bind(defaultName, target).         if (result.isBound()) {             return target.withExistingValue(result.get()).         }     }     return super.onStart(name, target, context). }
false;private;1;12;;private ConfigurationPropertyName getDefaultName(ConfigurationPropertyName name) {     for (Map.Entry<ConfigurationPropertyName, ConfigurationPropertyName> mapping : this.mappings.entrySet()) {         ConfigurationPropertyName from = mapping.getKey().         ConfigurationPropertyName to = mapping.getValue().         if (name.getNumberOfElements() == from.getNumberOfElements() + 1 && from.isParentOf(name)) {             return to.         }     }     return null. }
false;public;0;3;;public Map<String, BindingProperties> getBindings() {     return this.bindings. }
false;public;0;3;;public String getDestination() {     return this.destination. }
false;public;1;3;;public void setDestination(String destination) {     this.destination = destination. }
false;public;0;3;;public String getContentType() {     return this.contentType. }
false;public;1;3;;public void setContentType(String contentType) {     this.contentType = contentType. }
