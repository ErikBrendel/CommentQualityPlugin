commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void convertWhenSimpleWithoutSuffixShouldReturnDataSize() {     assertThat(convert(10)).isEqualTo(DataSize.ofBytes(10)).     assertThat(convert(+10)).isEqualTo(DataSize.ofBytes(10)).     assertThat(convert(-10)).isEqualTo(DataSize.ofBytes(-10)). }
false;public;0;6;;@Test public void convertWhenSimpleWithoutSuffixButWithAnnotationShouldReturnDataSize() {     assertThat(convert(10, DataUnit.KILOBYTES)).isEqualTo(DataSize.ofKilobytes(10)).     assertThat(convert(+10, DataUnit.KILOBYTES)).isEqualTo(DataSize.ofKilobytes(10)).     assertThat(convert(-10, DataUnit.KILOBYTES)).isEqualTo(DataSize.ofKilobytes(-10)). }
false;private;1;3;;private DataSize convert(Integer source) {     return this.conversionService.convert(source, DataSize.class). }
false;private;2;14;;@SuppressWarnings({ "rawtypes", "unchecked" }) private DataSize convert(Integer source, DataUnit defaultUnit) {     TypeDescriptor targetType = mock(TypeDescriptor.class).     if (defaultUnit != null) {         DataSizeUnit unitAnnotation = AnnotationUtils.synthesizeAnnotation(Collections.singletonMap("value", defaultUnit), DataSizeUnit.class, null).         given(targetType.getAnnotation(DataSizeUnit.class)).willReturn(unitAnnotation).     }     given(targetType.getType()).willReturn((Class) DataSize.class).     return (DataSize) this.conversionService.convert(source, TypeDescriptor.forObject(source), targetType). }
false;public,static;0;4;;@Parameterized.Parameters(name = "{0}") public static Iterable<Object[]> conversionServices() {     return new ConversionServiceParameters(new NumberToDataSizeConverter()). }
