commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void setupAnsi() {     AnsiOutput.setEnabled(AnsiOutput.Enabled.ALWAYS). }
false;public,static;0;4;;@AfterClass public static void resetAnsi() {     AnsiOutput.setEnabled(AnsiOutput.Enabled.DETECT). }
false;public;0;4;;@Before public void setUp() {     this.event = new TestLogEvent(). }
false;private;1;3;;private ColorConverter newConverter(String styling) {     return ColorConverter.newInstance(null, new String[] { this.in, styling }). }
false;public;0;6;;@Test public void faint() {     StringBuilder output = new StringBuilder().     newConverter("faint").format(this.event, output).     assertThat(output.toString()).isEqualTo("\033[2min\033[0.39m"). }
false;public;0;6;;@Test public void red() {     StringBuilder output = new StringBuilder().     newConverter("red").format(this.event, output).     assertThat(output.toString()).isEqualTo("\033[31min\033[0.39m"). }
false;public;0;6;;@Test public void green() {     StringBuilder output = new StringBuilder().     newConverter("green").format(this.event, output).     assertThat(output.toString()).isEqualTo("\033[32min\033[0.39m"). }
false;public;0;6;;@Test public void yellow() {     StringBuilder output = new StringBuilder().     newConverter("yellow").format(this.event, output).     assertThat(output.toString()).isEqualTo("\033[33min\033[0.39m"). }
false;public;0;6;;@Test public void blue() {     StringBuilder output = new StringBuilder().     newConverter("blue").format(this.event, output).     assertThat(output.toString()).isEqualTo("\033[34min\033[0.39m"). }
false;public;0;6;;@Test public void magenta() {     StringBuilder output = new StringBuilder().     newConverter("magenta").format(this.event, output).     assertThat(output.toString()).isEqualTo("\033[35min\033[0.39m"). }
false;public;0;6;;@Test public void cyan() {     StringBuilder output = new StringBuilder().     newConverter("cyan").format(this.event, output).     assertThat(output.toString()).isEqualTo("\033[36min\033[0.39m"). }
false;public;0;7;;@Test public void highlightFatal() {     this.event.setLevel(Level.FATAL).     StringBuilder output = new StringBuilder().     newConverter(null).format(this.event, output).     assertThat(output.toString()).isEqualTo("\033[31min\033[0.39m"). }
false;public;0;7;;@Test public void highlightError() {     this.event.setLevel(Level.ERROR).     StringBuilder output = new StringBuilder().     newConverter(null).format(this.event, output).     assertThat(output.toString()).isEqualTo("\033[31min\033[0.39m"). }
false;public;0;7;;@Test public void highlightWarn() {     this.event.setLevel(Level.WARN).     StringBuilder output = new StringBuilder().     newConverter(null).format(this.event, output).     assertThat(output.toString()).isEqualTo("\033[33min\033[0.39m"). }
false;public;0;7;;@Test public void highlightDebug() {     this.event.setLevel(Level.DEBUG).     StringBuilder output = new StringBuilder().     newConverter(null).format(this.event, output).     assertThat(output.toString()).isEqualTo("\033[32min\033[0.39m"). }
false;public;0;7;;@Test public void highlightTrace() {     this.event.setLevel(Level.TRACE).     StringBuilder output = new StringBuilder().     newConverter(null).format(this.event, output).     assertThat(output.toString()).isEqualTo("\033[32min\033[0.39m"). }
false;public;0;4;;@Override public Level getLevel() {     return this.level. }
false;public;1;3;;public void setLevel(Level level) {     this.level = level. }
