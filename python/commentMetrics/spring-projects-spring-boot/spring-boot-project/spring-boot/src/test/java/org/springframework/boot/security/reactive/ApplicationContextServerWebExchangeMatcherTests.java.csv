commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void createWhenContextClassIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new TestApplicationContextServerWebExchangeMatcher<>(null)).withMessageContaining("Context class must not be null"). }
false;public;0;9;;@Test public void matchesWhenContextClassIsApplicationContextShouldProvideContext() {     ServerWebExchange exchange = createExchange().     StaticApplicationContext context = (StaticApplicationContext) exchange.getApplicationContext().     assertThat(new TestApplicationContextServerWebExchangeMatcher<>(ApplicationContext.class).callMatchesAndReturnProvidedContext(exchange).get()).isEqualTo(context). }
false;public;0;11;;@Test public void matchesWhenContextClassIsExistingBeanShouldProvideBean() {     ServerWebExchange exchange = createExchange().     StaticApplicationContext context = (StaticApplicationContext) exchange.getApplicationContext().     context.registerSingleton("existingBean", ExistingBean.class).     assertThat(new TestApplicationContextServerWebExchangeMatcher<>(ExistingBean.class).callMatchesAndReturnProvidedContext(exchange).get()).isEqualTo(context.getBean(ExistingBean.class)). }
false;public;0;8;;@Test public void matchesWhenContextClassIsMissingBeanShouldProvideException() {     ServerWebExchange exchange = createExchange().     Supplier<ExistingBean> supplier = new TestApplicationContextServerWebExchangeMatcher<>(ExistingBean.class).callMatchesAndReturnProvidedContext(exchange).     assertThatExceptionOfType(NoSuchBeanDefinitionException.class).isThrownBy(supplier::get). }
false;public;0;10;;@Test public void matchesWhenContextIsNull() {     MockServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get("/path").build()).     assertThatIllegalStateException().isThrownBy(() -> new TestApplicationContextServerWebExchangeMatcher<>(ExistingBean.class).callMatchesAndReturnProvidedContext(exchange)).withMessageContaining("No ApplicationContext found on ServerWebExchange."). }
false;private;0;8;;private ServerWebExchange createExchange() {     StaticApplicationContext context = new StaticApplicationContext().     TestHttpWebHandlerAdapter adapter = new TestHttpWebHandlerAdapter(mock(WebHandler.class)).     adapter.setApplicationContext(context).     return adapter.createExchange(MockServerHttpRequest.get("/path").build(), new MockServerHttpResponse()). }
false;protected;2;5;;@Override protected ServerWebExchange createExchange(ServerHttpRequest request, ServerHttpResponse response) {     return super.createExchange(request, response). }
false;public;0;3;;public ExistingBean getBean() {     return this.bean. }
false;;1;4;;Supplier<C> callMatchesAndReturnProvidedContext(ServerWebExchange exchange) {     matches(exchange).     return getProvidedContext(). }
false;protected;2;6;;@Override protected Mono<MatchResult> matches(ServerWebExchange exchange, Supplier<C> context) {     this.providedContext = context.     return MatchResult.match(). }
false;;0;3;;Supplier<C> getProvidedContext() {     return this.providedContext. }
