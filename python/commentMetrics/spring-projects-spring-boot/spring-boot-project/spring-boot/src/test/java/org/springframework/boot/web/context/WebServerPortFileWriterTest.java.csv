commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before @After public void reset() {     System.clearProperty("PORTFILE"). }
false;public;0;7;;@Test public void createPortFile() throws Exception {     File file = this.temporaryFolder.newFile().     WebServerPortFileWriter listener = new WebServerPortFileWriter(file).     listener.onApplicationEvent(mockEvent("", 8080)).     assertThat(contentOf(file)).isEqualTo("8080"). }
false;public;0;8;;@Test public void overridePortFileWithDefault() throws Exception {     System.setProperty("PORTFILE", this.temporaryFolder.newFile().getAbsolutePath()).     WebServerPortFileWriter listener = new WebServerPortFileWriter().     listener.onApplicationEvent(mockEvent("", 8080)).     String content = contentOf(new File(System.getProperty("PORTFILE"))).     assertThat(content).isEqualTo("8080"). }
false;public;0;9;;@Test public void overridePortFileWithExplicitFile() throws Exception {     File file = this.temporaryFolder.newFile().     System.setProperty("PORTFILE", this.temporaryFolder.newFile().getAbsolutePath()).     WebServerPortFileWriter listener = new WebServerPortFileWriter(file).     listener.onApplicationEvent(mockEvent("", 8080)).     String content = contentOf(new File(System.getProperty("PORTFILE"))).     assertThat(content).isEqualTo("8080"). }
false;public;0;16;;@Test public void createManagementPortFile() throws Exception {     File file = this.temporaryFolder.newFile().     WebServerPortFileWriter listener = new WebServerPortFileWriter(file).     listener.onApplicationEvent(mockEvent("", 8080)).     listener.onApplicationEvent(mockEvent("management", 9090)).     assertThat(contentOf(file)).isEqualTo("8080").     String managementFile = file.getName().     managementFile = managementFile.substring(0, managementFile.length() - StringUtils.getFilenameExtension(managementFile).length() - 1).     managementFile = managementFile + "-management." + StringUtils.getFilenameExtension(file.getName()).     String content = contentOf(new File(file.getParentFile(), managementFile)).     assertThat(content).isEqualTo("9090").     assertThat(collectFileNames(file.getParentFile())).contains(managementFile). }
false;public;0;15;;@Test public void createUpperCaseManagementPortFile() throws Exception {     File file = this.temporaryFolder.newFile().     file = new File(file.getParentFile(), file.getName().toUpperCase(Locale.ENGLISH)).     WebServerPortFileWriter listener = new WebServerPortFileWriter(file).     listener.onApplicationEvent(mockEvent("management", 9090)).     String managementFile = file.getName().     managementFile = managementFile.substring(0, managementFile.length() - StringUtils.getFilenameExtension(managementFile).length() - 1).     managementFile = managementFile + "-MANAGEMENT." + StringUtils.getFilenameExtension(file.getName()).     String content = contentOf(new File(file.getParentFile(), managementFile)).     assertThat(content).isEqualTo("9090").     assertThat(collectFileNames(file.getParentFile())).contains(managementFile). }
false;private;2;12;;private WebServerInitializedEvent mockEvent(String namespace, int port) {     WebServer webServer = mock(WebServer.class).     given(webServer.getPort()).willReturn(port).     WebServerApplicationContext applicationContext = mock(WebServerApplicationContext.class).     given(applicationContext.getServerNamespace()).willReturn(namespace).     given(applicationContext.getWebServer()).willReturn(webServer).     WebServerInitializedEvent event = mock(WebServerInitializedEvent.class).     given(event.getApplicationContext()).willReturn(applicationContext).     given(event.getWebServer()).willReturn(webServer).     return event. }
false;private;1;9;;private Set<String> collectFileNames(File directory) {     Set<String> names = new HashSet<>().     if (directory.isDirectory()) {         for (File file : directory.listFiles()) {             names.add(file.getName()).         }     }     return names. }
