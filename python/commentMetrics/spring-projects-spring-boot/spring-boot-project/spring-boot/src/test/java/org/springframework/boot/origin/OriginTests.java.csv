commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void fromWhenSourceIsNullShouldReturnNull() {     assertThat(Origin.from(null)).isNull(). }
false;public;0;5;;@Test public void fromWhenSourceIsRegularObjectShouldReturnNull() {     Object source = new Object().     assertThat(Origin.from(source)).isNull(). }
false;public;0;5;;@Test public void fromWhenSourceIsOriginShouldReturnSource() {     Origin origin = mock(Origin.class).     assertThat(Origin.from(origin)).isEqualTo(origin). }
false;public;0;7;;@Test public void fromWhenSourceIsOriginProviderShouldReturnProvidedOrigin() {     Origin origin = mock(Origin.class).     OriginProvider originProvider = mock(OriginProvider.class).     given(originProvider.getOrigin()).willReturn(origin).     assertThat(Origin.from(origin)).isEqualTo(origin). }
false;public;0;6;;@Test public void fromWhenSourceIsThrowableShouldUseCause() {     Origin origin = mock(Origin.class).     Exception exception = new RuntimeException(new TestException(origin, null)).     assertThat(Origin.from(exception)).isEqualTo(origin). }
false;public;0;6;;@Test public void fromWhenSourceIsThrowableAndOriginProviderThatReturnsNullShouldUseCause() {     Origin origin = mock(Origin.class).     Exception exception = new TestException(null, new TestException(origin, null)).     assertThat(Origin.from(exception)).isEqualTo(origin). }
false;public;0;4;;@Override public Origin getOrigin() {     return this.origin. }
