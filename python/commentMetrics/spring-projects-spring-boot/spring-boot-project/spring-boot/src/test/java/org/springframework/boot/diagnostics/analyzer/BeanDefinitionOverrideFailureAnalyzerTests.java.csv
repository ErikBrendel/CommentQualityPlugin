commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void analyzeBeanDefinitionOverrideException() {     FailureAnalysis analysis = performAnalysis(BeanOverrideConfiguration.class).     String description = analysis.getDescription().     assertThat(description).contains("The bean 'testBean', defined in " + SecondConfiguration.class.getName() + ", could not be registered.").     assertThat(description).contains(FirstConfiguration.class.getName()). }
false;private;1;5;;private FailureAnalysis performAnalysis(Class<?> configuration) {     BeanDefinitionOverrideException failure = createFailure(configuration).     assertThat(failure).isNotNull().     return new BeanDefinitionOverrideFailureAnalyzer().analyze(failure). }
false;private;1;13;;private BeanDefinitionOverrideException createFailure(Class<?> configuration) {     try {         AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().         context.setAllowBeanDefinitionOverriding(false).         context.register(configuration).         context.refresh().         context.close().         return null.     } catch (BeanDefinitionOverrideException ex) {         return ex.     } }
false;public;0;4;;@Bean public String testBean() {     return "test". }
false;public;0;4;;@Bean public String testBean() {     return "test". }
