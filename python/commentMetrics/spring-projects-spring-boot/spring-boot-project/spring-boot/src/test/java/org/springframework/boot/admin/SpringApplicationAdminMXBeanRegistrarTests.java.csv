commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.mBeanServer = ManagementFactory.getPlatformMBeanServer(). }
false;public;0;6;;@After public void closeContext() {     if (this.context != null) {         this.context.close().     } }
false;public;0;17;;@Test public void validateReadyFlag() {     final ObjectName objectName = createObjectName(OBJECT_NAME).     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     application.addListeners((ContextRefreshedEvent event) -> {         try {             assertThat(isApplicationReady(objectName)).isFalse().         } catch (Exception ex) {             throw new IllegalStateException("Could not contact spring application admin bean", ex).         }     }).     this.context = application.run().     assertThat(isApplicationReady(objectName)).isTrue(). }
false;public;0;15;;@Test public void eventsFromOtherContextsAreIgnored() throws MalformedObjectNameException {     SpringApplicationAdminMXBeanRegistrar registrar = new SpringApplicationAdminMXBeanRegistrar(OBJECT_NAME).     ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class).     registrar.setApplicationContext(context).     registrar.onApplicationReadyEvent(new ApplicationReadyEvent(new SpringApplication(), null, mock(ConfigurableApplicationContext.class))).     assertThat(isApplicationReady(registrar)).isFalse().     registrar.onApplicationReadyEvent(new ApplicationReadyEvent(new SpringApplication(), null, context)).     assertThat(isApplicationReady(registrar)).isTrue(). }
false;private;1;3;;private boolean isApplicationReady(SpringApplicationAdminMXBeanRegistrar registrar) {     return (Boolean) ReflectionTestUtils.getField(registrar, "ready"). }
false;public;0;11;;@Test public void environmentIsExposed() {     final ObjectName objectName = createObjectName(OBJECT_NAME).     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run("--foo.bar=blam").     assertThat(isApplicationReady(objectName)).isTrue().     assertThat(isApplicationEmbeddedWebApplication(objectName)).isFalse().     assertThat(getProperty(objectName, "foo.bar")).isEqualTo("blam").     assertThat(getProperty(objectName, "does.not.exist.test")).isNull(). }
false;public;0;13;;@Test public void shutdownApp() throws InstanceNotFoundException {     final ObjectName objectName = createObjectName(OBJECT_NAME).     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run().     assertThat(this.context.isRunning()).isTrue().     invokeShutdown(objectName).     assertThat(this.context.isRunning()).isFalse().     // JMX cleanup     assertThatExceptionOfType(InstanceNotFoundException.class).isThrownBy(() -> this.mBeanServer.getObjectInstance(objectName)). }
false;private;1;3;;private Boolean isApplicationReady(ObjectName objectName) {     return getAttribute(objectName, Boolean.class, "Ready"). }
false;private;1;3;;private Boolean isApplicationEmbeddedWebApplication(ObjectName objectName) {     return getAttribute(objectName, Boolean.class, "EmbeddedWebApplication"). }
false;private;2;9;;private String getProperty(ObjectName objectName, String key) {     try {         return (String) this.mBeanServer.invoke(objectName, "getProperty", new Object[] { key }, new String[] { String.class.getName() }).     } catch (Exception ex) {         throw new IllegalStateException(ex.getMessage(), ex).     } }
false;private;3;10;;private <T> T getAttribute(ObjectName objectName, Class<T> type, String attribute) {     try {         Object value = this.mBeanServer.getAttribute(objectName, attribute).         assertThat(value == null || type.isInstance(value)).isTrue().         return type.cast(value).     } catch (Exception ex) {         throw new IllegalStateException(ex.getMessage(), ex).     } }
false;private;1;8;;private void invokeShutdown(ObjectName objectName) {     try {         this.mBeanServer.invoke(objectName, "shutdown", null, null).     } catch (Exception ex) {         throw new IllegalStateException(ex.getMessage(), ex).     } }
false;private;1;8;;private ObjectName createObjectName(String jmxName) {     try {         return new ObjectName(jmxName).     } catch (MalformedObjectNameException ex) {         throw new IllegalStateException("Invalid jmx name " + jmxName, ex).     } }
false;public;0;5;;@Bean public SpringApplicationAdminMXBeanRegistrar springApplicationAdminRegistrar() throws MalformedObjectNameException {     return new SpringApplicationAdminMXBeanRegistrar(OBJECT_NAME). }
