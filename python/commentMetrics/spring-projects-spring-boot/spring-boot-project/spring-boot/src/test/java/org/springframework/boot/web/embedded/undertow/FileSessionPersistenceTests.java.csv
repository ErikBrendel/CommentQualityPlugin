commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setup() throws IOException {     this.dir = this.temp.newFolder().     this.persistence = new FileSessionPersistence(this.dir). }
false;public;0;6;;@Test public void loadsNullForMissingFile() {     Map<String, PersistentSession> attributes = this.persistence.loadSessionAttributes("test", this.classLoader).     assertThat(attributes).isNull(). }
false;public;0;14;;@Test public void persistAndLoad() {     Map<String, PersistentSession> sessionData = new LinkedHashMap<>().     Map<String, Object> data = new LinkedHashMap<>().     data.put("spring", "boot").     PersistentSession session = new PersistentSession(this.expiration, data).     sessionData.put("abc", session).     this.persistence.persistSessions("test", sessionData).     Map<String, PersistentSession> restored = this.persistence.loadSessionAttributes("test", this.classLoader).     assertThat(restored).isNotNull().     assertThat(restored.get("abc").getExpiration()).isEqualTo(this.expiration).     assertThat(restored.get("abc").getSessionData().get("spring")).isEqualTo("boot"). }
false;public;0;14;;@Test public void dontRestoreExpired() {     Date expired = new Date(System.currentTimeMillis() - 1000).     Map<String, PersistentSession> sessionData = new LinkedHashMap<>().     Map<String, Object> data = new LinkedHashMap<>().     data.put("spring", "boot").     PersistentSession session = new PersistentSession(expired, data).     sessionData.put("abc", session).     this.persistence.persistSessions("test", sessionData).     Map<String, PersistentSession> restored = this.persistence.loadSessionAttributes("test", this.classLoader).     assertThat(restored).isNotNull().     assertThat(restored.containsKey("abc")).isFalse(). }
false;public;0;9;;@Test public void deleteFileOnClear() {     File sessionFile = new File(this.dir, "test.session").     Map<String, PersistentSession> sessionData = new LinkedHashMap<>().     this.persistence.persistSessions("test", sessionData).     assertThat(sessionFile.exists()).isTrue().     this.persistence.clear("test").     assertThat(sessionFile.exists()).isFalse(). }
