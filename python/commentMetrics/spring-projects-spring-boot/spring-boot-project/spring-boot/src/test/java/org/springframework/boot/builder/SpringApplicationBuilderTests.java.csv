commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void close() {     close(this.context). }
false;private;1;8;;private void close(ApplicationContext context) {     if (context != null) {         if (context instanceof ConfigurableApplicationContext) {             ((ConfigurableApplicationContext) context).close().         }         close(context.getParent()).     } }
false;public;0;11;;@Test public void profileAndProperties() {     SpringApplicationBuilder application = new SpringApplicationBuilder().sources(ExampleConfig.class).contextClass(StaticApplicationContext.class).profiles("foo").properties("foo=bar").     this.context = application.run().     assertThat(this.context).isInstanceOf(StaticApplicationContext.class).     assertThat(this.context.getEnvironment().getProperty("foo")).isEqualTo("bucket").     assertThat(this.context.getEnvironment().acceptsProfiles(Profiles.of("foo"))).isTrue(). }
false;public;0;8;;@Test public void propertiesAsMap() {     SpringApplicationBuilder application = new SpringApplicationBuilder().sources(ExampleConfig.class).contextClass(StaticApplicationContext.class).properties(Collections.singletonMap("bar", "foo")).     this.context = application.run().     assertThat(this.context.getEnvironment().getProperty("bar")).isEqualTo("foo"). }
false;public;0;9;;@Test public void propertiesAsProperties() {     SpringApplicationBuilder application = new SpringApplicationBuilder().sources(ExampleConfig.class).contextClass(StaticApplicationContext.class).properties(StringUtils.splitArrayElementsIntoProperties(new String[] { "bar=foo" }, "=")).     this.context = application.run().     assertThat(this.context.getEnvironment().getProperty("bar")).isEqualTo("foo"). }
false;public;0;13;;@Test public void propertiesWithRepeatSeparator() {     SpringApplicationBuilder application = new SpringApplicationBuilder().sources(ExampleConfig.class).contextClass(StaticApplicationContext.class).properties("one=c:\\logging.file.name", "two=a:b", "three:c:\\logging.file.name", "four:a:b").     this.context = application.run().     ConfigurableEnvironment environment = this.context.getEnvironment().     assertThat(environment.getProperty("one")).isEqualTo("c:\\logging.file.name").     assertThat(environment.getProperty("two")).isEqualTo("a:b").     assertThat(environment.getProperty("three")).isEqualTo("c:\\logging.file.name").     assertThat(environment.getProperty("four")).isEqualTo("a:b"). }
false;public;0;8;;@Test public void specificApplicationContextClass() {     SpringApplicationBuilder application = new SpringApplicationBuilder().sources(ExampleConfig.class).contextClass(StaticApplicationContext.class).     this.context = application.run().     assertThat(this.context).isInstanceOf(StaticApplicationContext.class). }
false;public;0;15;;@Test public void parentContextCreationThatIsRunDirectly() {     SpringApplicationBuilder application = new SpringApplicationBuilder(ChildConfig.class).contextClass(SpyApplicationContext.class).     application.parent(ExampleConfig.class).     this.context = application.run("foo.bar=baz").     verify(((SpyApplicationContext) this.context).getApplicationContext()).setParent(any(ApplicationContext.class)).     assertThat(((SpyApplicationContext) this.context).getRegisteredShutdownHook()).isFalse().     assertThat(this.context.getParent().getBean(ApplicationArguments.class).getNonOptionArgs()).contains("foo.bar=baz").     assertThat(this.context.getBean(ApplicationArguments.class).getNonOptionArgs()).contains("foo.bar=baz"). }
false;public;0;15;;@Test public void parentContextCreationThatIsBuiltThenRun() {     SpringApplicationBuilder application = new SpringApplicationBuilder(ChildConfig.class).contextClass(SpyApplicationContext.class).     application.parent(ExampleConfig.class).     this.context = application.build("a=alpha").run("b=bravo").     verify(((SpyApplicationContext) this.context).getApplicationContext()).setParent(any(ApplicationContext.class)).     assertThat(((SpyApplicationContext) this.context).getRegisteredShutdownHook()).isFalse().     assertThat(this.context.getParent().getBean(ApplicationArguments.class).getNonOptionArgs()).contains("a=alpha").     assertThat(this.context.getBean(ApplicationArguments.class).getNonOptionArgs()).contains("b=bravo"). }
false;public;0;12;;@Test public void parentContextCreationWithChildShutdown() {     SpringApplicationBuilder application = new SpringApplicationBuilder(ChildConfig.class).contextClass(SpyApplicationContext.class).registerShutdownHook(true).     application.parent(ExampleConfig.class).     this.context = application.run().     verify(((SpyApplicationContext) this.context).getApplicationContext()).setParent(any(ApplicationContext.class)).     assertThat(((SpyApplicationContext) this.context).getRegisteredShutdownHook()).isTrue(). }
false;public;0;11;;@Test public void contextWithClassLoader() {     SpringApplicationBuilder application = new SpringApplicationBuilder(ExampleConfig.class).contextClass(SpyApplicationContext.class).     ClassLoader classLoader = new URLClassLoader(new URL[0], getClass().getClassLoader()).     application.resourceLoader(new DefaultResourceLoader(classLoader)).     this.context = application.run().     assertThat(((SpyApplicationContext) this.context).getClassLoader()).isEqualTo(classLoader). }
false;public;0;12;;@Test public void parentContextWithClassLoader() {     SpringApplicationBuilder application = new SpringApplicationBuilder(ChildConfig.class).contextClass(SpyApplicationContext.class).     ClassLoader classLoader = new URLClassLoader(new URL[0], getClass().getClassLoader()).     application.resourceLoader(new DefaultResourceLoader(classLoader)).     application.parent(ExampleConfig.class).     this.context = application.run().     assertThat(((SpyApplicationContext) this.context).getResourceLoader().getClassLoader()).isEqualTo(classLoader). }
false;public;0;11;;@Test public void parentFirstCreation() {     SpringApplicationBuilder application = new SpringApplicationBuilder(ExampleConfig.class).child(ChildConfig.class).     application.contextClass(SpyApplicationContext.class).     this.context = application.run().     verify(((SpyApplicationContext) this.context).getApplicationContext()).setParent(any(ApplicationContext.class)).     assertThat(((SpyApplicationContext) this.context).getRegisteredShutdownHook()).isFalse(). }
false;public;0;17;;@Test public void parentFirstCreationWithProfileAndDefaultArgs() {     SpringApplicationBuilder application = new SpringApplicationBuilder(ExampleConfig.class).profiles("node").properties("transport=redis").child(ChildConfig.class).web(WebApplicationType.NONE).     this.context = application.run().     assertThat(this.context.getEnvironment().acceptsProfiles(Profiles.of("node"))).isTrue().     assertThat(this.context.getEnvironment().getProperty("transport")).isEqualTo("redis").     assertThat(this.context.getParent().getEnvironment().acceptsProfiles(Profiles.of("node"))).isTrue().     assertThat(this.context.getParent().getEnvironment().getProperty("transport")).isEqualTo("redis").     // only defined in node profile     assertThat(this.context.getEnvironment().getProperty("bar")).isEqualTo("spam"). }
false;public;0;12;;@Test public void parentFirstWithDifferentProfile() {     SpringApplicationBuilder application = new SpringApplicationBuilder(ExampleConfig.class).profiles("node").properties("transport=redis").child(ChildConfig.class).profiles("admin").web(WebApplicationType.NONE).     this.context = application.run().     assertThat(this.context.getEnvironment().acceptsProfiles(Profiles.of("node", "admin"))).isTrue().     assertThat(this.context.getParent().getEnvironment().acceptsProfiles(Profiles.of("admin"))).isFalse(). }
false;public;0;15;;@Test public void parentWithDifferentProfile() {     SpringApplicationBuilder shared = new SpringApplicationBuilder(ExampleConfig.class).profiles("node").properties("transport=redis").     SpringApplicationBuilder application = shared.child(ChildConfig.class).profiles("admin").web(WebApplicationType.NONE).     shared.profiles("parent").     this.context = application.run().     assertThat(this.context.getEnvironment().acceptsProfiles(Profiles.of("node", "admin"))).isTrue().     assertThat(this.context.getParent().getEnvironment().acceptsProfiles(Profiles.of("node", "parent"))).isTrue().     assertThat(this.context.getParent().getEnvironment().acceptsProfiles(Profiles.of("admin"))).isFalse(). }
false;public;0;15;;@Test public void parentFirstWithDifferentProfileAndExplicitEnvironment() {     SpringApplicationBuilder application = new SpringApplicationBuilder(ExampleConfig.class).environment(new StandardEnvironment()).profiles("node").properties("transport=redis").child(ChildConfig.class).profiles("admin").web(WebApplicationType.NONE).     this.context = application.run().     assertThat(this.context.getEnvironment().acceptsProfiles(Profiles.of("node", "admin"))).isTrue().     // Now they share an Environment explicitly so there's no way to keep the profiles     // separate     assertThat(this.context.getParent().getEnvironment().acceptsProfiles(Profiles.of("admin"))).isTrue(). }
false;public;0;10;;@Test public void parentContextIdentical() {     SpringApplicationBuilder application = new SpringApplicationBuilder(ExampleConfig.class).     application.parent(ExampleConfig.class).     application.contextClass(SpyApplicationContext.class).     this.context = application.run().     verify(((SpyApplicationContext) this.context).getApplicationContext()).setParent(any(ApplicationContext.class)). }
false;public;0;7;;@Test public void initializersCreatedOnce() {     SpringApplicationBuilder application = new SpringApplicationBuilder(ExampleConfig.class).web(WebApplicationType.NONE).     this.context = application.run().     assertThat(application.application().getInitializers()).hasSize(4). }
false;public;0;8;;@Test public void initializersCreatedOnceForChild() {     SpringApplicationBuilder application = new SpringApplicationBuilder(ExampleConfig.class).child(ChildConfig.class).web(WebApplicationType.NONE).     this.context = application.run().     assertThat(application.application().getInitializers()).hasSize(5). }
false;public;0;9;;@Test public void initializersIncludeDefaults() {     SpringApplicationBuilder application = new SpringApplicationBuilder(ExampleConfig.class).web(WebApplicationType.NONE).initializers((ConfigurableApplicationContext applicationContext) -> {     }).     this.context = application.run().     assertThat(application.application().getInitializers()).hasSize(5). }
false;public;0;9;;@Test public void sourcesWithBoundSources() {     SpringApplicationBuilder application = new SpringApplicationBuilder().web(WebApplicationType.NONE).sources(ExampleConfig.class).properties("spring.main.sources=" + ChildConfig.class.getName()).     this.context = application.run().     this.context.getBean(ExampleConfig.class).     this.context.getBean(ChildConfig.class). }
false;public;1;4;;@Override public void setParent(ApplicationContext parent) {     this.applicationContext.setParent(parent). }
false;public;0;3;;public ConfigurableApplicationContext getApplicationContext() {     return this.applicationContext. }
false;public;1;5;;@Override public void setResourceLoader(ResourceLoader resourceLoader) {     super.setResourceLoader(resourceLoader).     this.resourceLoader = resourceLoader. }
false;public;0;3;;public ResourceLoader getResourceLoader() {     return this.resourceLoader. }
false;public;0;5;;@Override public void registerShutdownHook() {     super.registerShutdownHook().     this.registeredShutdownHook = true. }
false;public;0;3;;public boolean getRegisteredShutdownHook() {     return this.registeredShutdownHook. }
false;public;0;5;;@Override public void close() {     super.close().     this.applicationContext.close(). }
false;public;0;4;;@Override public ApplicationContext getParent() {     return this.applicationContext.getParent(). }
