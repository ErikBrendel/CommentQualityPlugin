commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.binder = new Binder(this.sources). }
false;public;0;7;;@Test public void createWhenSourcesIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new Binder((Iterable<ConfigurationPropertySource>) null)).withMessageContaining("Sources must not be null"). }
false;public;0;7;;@Test public void bindWhenNameIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.binder.bind((ConfigurationPropertyName) null, Bindable.of(String.class), BindHandler.DEFAULT)).withMessageContaining("Name must not be null"). }
false;public;0;7;;@Test public void bindWhenTargetIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.binder.bind(ConfigurationPropertyName.of("foo"), null, BindHandler.DEFAULT)).withMessageContaining("Target must not be null"). }
false;public;0;6;;@Test public void bindToValueWhenPropertyIsMissingShouldReturnUnbound() {     this.sources.add(new MockConfigurationPropertySource()).     BindResult<String> result = this.binder.bind("foo", Bindable.of(String.class)).     assertThat(result.isBound()).isFalse(). }
false;public;0;6;;@Test public void bindToValueShouldReturnPropertyValue() {     this.sources.add(new MockConfigurationPropertySource("foo", 123)).     BindResult<Integer> result = this.binder.bind("foo", Bindable.of(Integer.class)).     assertThat(result.get()).isEqualTo(123). }
false;public;0;7;;@Test public void bindToValueShouldReturnPropertyValueFromSecondSource() {     this.sources.add(new MockConfigurationPropertySource("foo", 123)).     this.sources.add(new MockConfigurationPropertySource("bar", 234)).     BindResult<Integer> result = this.binder.bind("bar", Bindable.of(Integer.class)).     assertThat(result.get()).isEqualTo(234). }
false;public;0;6;;@Test public void bindToValueShouldReturnConvertedPropertyValue() {     this.sources.add(new MockConfigurationPropertySource("foo", "123")).     BindResult<Integer> result = this.binder.bind("foo", Bindable.of(Integer.class)).     assertThat(result.get()).isEqualTo(123). }
false;public;0;7;;@Test public void bindToValueWhenMultipleCandidatesShouldReturnFirst() {     this.sources.add(new MockConfigurationPropertySource("foo", 123)).     this.sources.add(new MockConfigurationPropertySource("foo", 234)).     BindResult<Integer> result = this.binder.bind("foo", Bindable.of(Integer.class)).     assertThat(result.get()).isEqualTo(123). }
false;public;0;10;;@Test public void bindToValueWithPlaceholdersShouldResolve() {     StandardEnvironment environment = new StandardEnvironment().     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(environment, "bar=23").     this.sources.add(new MockConfigurationPropertySource("foo", "1${bar}")).     this.binder = new Binder(this.sources, new PropertySourcesPlaceholdersResolver(environment)).     BindResult<Integer> result = this.binder.bind("foo", Bindable.of(Integer.class)).     assertThat(result.get()).isEqualTo(123). }
false;public;0;9;;@Test public void bindToValueWithMissingPlaceholderShouldResolveToValueWithPlaceholder() {     StandardEnvironment environment = new StandardEnvironment().     this.sources.add(new MockConfigurationPropertySource("foo", "${bar}")).     this.binder = new Binder(this.sources, new PropertySourcesPlaceholdersResolver(environment)).     BindResult<String> result = this.binder.bind("foo", Bindable.of(String.class)).     assertThat(result.get()).isEqualTo("${bar}"). }
false;public;0;9;;@Test public void bindToValueWithCustomPropertyEditorShouldReturnConvertedValue() {     this.binder = new Binder(this.sources, null, null, (registry) -> registry.registerCustomEditor(JavaBean.class, new JavaBeanPropertyEditor())).     this.sources.add(new MockConfigurationPropertySource("foo", "123")).     BindResult<JavaBean> result = this.binder.bind("foo", Bindable.of(JavaBean.class)).     assertThat(result.get().getValue()).isEqualTo("123"). }
false;public;0;10;;@Test public void bindToValueShouldTriggerOnSuccess() {     this.sources.add(new MockConfigurationPropertySource("foo", "1", "line1")).     BindHandler handler = mock(BindHandler.class, Answers.CALLS_REAL_METHODS).     Bindable<Integer> target = Bindable.of(Integer.class).     this.binder.bind("foo", target, handler).     InOrder ordered = inOrder(handler).     ordered.verify(handler).onSuccess(eq(ConfigurationPropertyName.of("foo")), eq(target), any(), eq(1)). }
false;public;0;6;;@Test public void bindToJavaBeanShouldReturnPopulatedBean() {     this.sources.add(new MockConfigurationPropertySource("foo.value", "bar")).     JavaBean result = this.binder.bind("foo", Bindable.of(JavaBean.class)).get().     assertThat(result.getValue()).isEqualTo("bar"). }
false;public;0;8;;@Test public void bindToJavaBeanWhenNonIterableShouldReturnPopulatedBean() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource("foo.value", "bar").     this.sources.add(source.nonIterable()).     JavaBean result = this.binder.bind("foo", Bindable.of(JavaBean.class)).get().     assertThat(result.getValue()).isEqualTo("bar"). }
false;public;0;10;;@Test public void bindToJavaBeanWhenHasPropertyWithSameNameShouldStillBind() {     // gh-10945     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo", "boom").     source.put("foo.value", "bar").     this.sources.add(source).     JavaBean result = this.binder.bind("foo", Bindable.of(JavaBean.class)).get().     assertThat(result.getValue()).isEqualTo("bar"). }
false;public;0;13;;@Test public void bindToJavaBeanShouldTriggerOnSuccess() {     this.sources.add(new MockConfigurationPropertySource("foo.value", "bar", "line1")).     BindHandler handler = mock(BindHandler.class, Answers.CALLS_REAL_METHODS).     Bindable<JavaBean> target = Bindable.of(JavaBean.class).     this.binder.bind("foo", target, handler).     InOrder inOrder = inOrder(handler).     inOrder.verify(handler).onSuccess(eq(ConfigurationPropertyName.of("foo.value")), eq(Bindable.of(String.class)), any(), eq("bar")).     inOrder.verify(handler).onSuccess(eq(ConfigurationPropertyName.of("foo")), eq(target), any(), isA(JavaBean.class)). }
false;public;0;8;;@Test public void bindWhenHasMalformedDateShouldThrowException() {     this.sources.add(new MockConfigurationPropertySource("foo", "2014-04-01T01:30:00.000-05:00")).     assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("foo", Bindable.of(LocalDate.class))).withCauseInstanceOf(ConversionFailedException.class). }
false;public;0;12;;@Test public void bindWhenHasAnnotationsShouldChangeConvertedValue() {     this.sources.add(new MockConfigurationPropertySource("foo", "2014-04-01T01:30:00.000-05:00")).     DateTimeFormat annotation = AnnotationUtils.synthesizeAnnotation(Collections.singletonMap("iso", DateTimeFormat.ISO.DATE_TIME), DateTimeFormat.class, null).     LocalDate result = this.binder.bind("foo", Bindable.of(LocalDate.class).withAnnotations(annotation)).get().     assertThat(result.toString()).isEqualTo("2014-04-01"). }
false;public;0;11;;@Test public void bindExceptionWhenBeanBindingFailsShouldHaveNullConfigurationProperty() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.value", "hello").     source.put("foo.items", "bar,baz").     this.sources.add(source).     Bindable<JavaBean> target = Bindable.of(JavaBean.class).     assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("foo", target)).satisfies(this::noItemsSetterRequirements). }
false;private;1;5;;private void noItemsSetterRequirements(BindException ex) {     assertThat(ex.getCause().getMessage()).isEqualTo("No setter found for property: items").     assertThat(ex.getProperty()).isNull(). }
false;public;1;4;;@Override public Object getProperty(String name) {     return null. }
false;public;0;15;;@Test public void bindToValidatedBeanWithResourceAndNonEnumerablePropertySource() {     ConfigurationPropertySources.from(new PropertySource<String>("test") {          @Override         public Object getProperty(String name) {             return null.         }     }).forEach(this.sources::add).     Validator validator = new SpringValidatorAdapter(Validation.byDefaultProvider().configure().buildValidatorFactory().getValidator()).     this.binder.bind("foo", Bindable.of(ResourceBean.class), new ValidationBindHandler(validator)). }
false;public;0;7;;@Test public void bindToBeanWithCycle() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     this.sources.add(source.nonIterable()).     Bindable<CycleBean1> target = Bindable.of(CycleBean1.class).     this.binder.bind("foo", target). }
false;public;0;9;;@Test @SuppressWarnings("rawtypes") public void bindToBeanWithUnresolvableGenerics() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.bar", "hello").     this.sources.add(source).     Bindable<GenericBean> target = Bindable.of(GenericBean.class).     this.binder.bind("foo", target). }
false;public;0;12;;@Test public void bindWithEmptyPrefixShouldIgnorePropertiesWithEmptyName() {     Map<String, Object> source = new HashMap<>().     source.put("value", "hello").     source.put("", "bar").     Iterable<ConfigurationPropertySource> propertySources = ConfigurationPropertySources.from(new MapPropertySource("test", source)).     propertySources.forEach(this.sources::add).     Bindable<JavaBean> target = Bindable.of(JavaBean.class).     JavaBean result = this.binder.bind("", target).get().     assertThat(result.getValue()).isEqualTo("hello"). }
false;public;0;3;;public String getValue() {     return this.value. }
false;public;1;3;;public void setValue(String value) {     this.value = value. }
false;public;0;3;;public List<String> getItems() {     return this.items. }
false;public;0;3;;public Resource getResource() {     return this.resource. }
false;public;1;3;;public void setResource(Resource resource) {     this.resource = resource. }
false;public;0;3;;public CycleBean2 getTwo() {     return this.two. }
false;public;1;3;;public void setTwo(CycleBean2 two) {     this.two = two. }
false;public;0;3;;public CycleBean1 getOne() {     return this.one. }
false;public;1;3;;public void setOne(CycleBean1 one) {     this.one = one. }
false;public;0;3;;public T getBar() {     return this.bar. }
false;public;1;3;;public void setBar(T bar) {     this.bar = bar. }
false;public;1;6;;@Override public void setAsText(String text) throws IllegalArgumentException {     JavaBean value = new JavaBean().     value.setValue(text).     setValue(value). }
