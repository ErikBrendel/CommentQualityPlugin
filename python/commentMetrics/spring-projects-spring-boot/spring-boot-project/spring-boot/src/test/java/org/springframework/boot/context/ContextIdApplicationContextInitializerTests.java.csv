commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@After public void closeContexts() {     Collections.reverse(this.contexts).     this.contexts.forEach(ConfigurableApplicationContext::close). }
false;public;0;5;;@Test public void singleContextWithDefaultName() {     ConfigurableApplicationContext context = createContext(null).     assertThat(context.getId()).isEqualTo("application"). }
false;public;0;6;;@Test public void singleContextWithCustomName() {     ConfigurableApplicationContext context = createContext(null, "spring.application.name=test").     assertThat(context.getId()).isEqualTo("test"). }
false;public;0;7;;@Test public void linearHierarchy() {     ConfigurableApplicationContext grandparent = createContext(null).     ConfigurableApplicationContext parent = createContext(grandparent).     ConfigurableApplicationContext child = createContext(parent).     assertThat(child.getId()).isEqualTo("application-1-1"). }
false;public;0;12;;@Test public void complexHierarchy() {     ConfigurableApplicationContext grandparent = createContext(null).     ConfigurableApplicationContext parent1 = createContext(grandparent).     ConfigurableApplicationContext parent2 = createContext(grandparent).     ConfigurableApplicationContext child1_1 = createContext(parent1).     assertThat(child1_1.getId()).isEqualTo("application-1-1").     ConfigurableApplicationContext child1_2 = createContext(parent1).     assertThat(child1_2.getId()).isEqualTo("application-1-2").     ConfigurableApplicationContext child2_1 = createContext(parent2).     assertThat(child2_1.getId()).isEqualTo("application-2-1"). }
false;public;0;7;;@Test public void contextWithParentWithNoContextIdFallsBackToDefaultId() {     ConfigurableApplicationContext parent = new AnnotationConfigApplicationContext().     this.contexts.add(parent).     parent.refresh().     assertThat(createContext(parent).getId()).isEqualTo("application"). }
false;private;2;12;;private ConfigurableApplicationContext createContext(ConfigurableApplicationContext parent, String... properties) {     ConfigurableApplicationContext context = new AnnotationConfigApplicationContext().     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, properties).     if (parent != null) {         context.setParent(parent).     }     this.initializer.initialize(context).     context.refresh().     this.contexts.add(context).     return context. }
