commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@After public void reset() {     AnsiOutput.setEnabled(Enabled.DETECT). }
false;public;0;7;;@Test public void renderVersions() {     Resource resource = new ByteArrayResource("banner ${a} ${spring-boot.version} ${application.version}".getBytes()).     String banner = printBanner(resource, "10.2", "2.0", null).     assertThat(banner).startsWith("banner 1 10.2 2.0"). }
false;public;0;7;;@Test public void renderWithoutVersions() {     Resource resource = new ByteArrayResource("banner ${a} ${spring-boot.version} ${application.version}".getBytes()).     String banner = printBanner(resource, null, null, null).     assertThat(banner).startsWith("banner 1  "). }
false;public;0;8;;@Test public void renderFormattedVersions() {     Resource resource = new ByteArrayResource("banner ${a}${spring-boot.formatted-version}${application.formatted-version}".getBytes()).     String banner = printBanner(resource, "10.2", "2.0", null).     assertThat(banner).startsWith("banner 1 (v10.2) (v2.0)"). }
false;public;0;8;;@Test public void renderWithoutFormattedVersions() {     Resource resource = new ByteArrayResource("banner ${a}${spring-boot.formatted-version}${application.formatted-version}".getBytes()).     String banner = printBanner(resource, null, null, null).     assertThat(banner).startsWith("banner 1"). }
false;public;0;8;;@Test public void renderWithColors() {     Resource resource = new ByteArrayResource("${Ansi.RED}This is red.${Ansi.NORMAL}".getBytes()).     AnsiOutput.setEnabled(AnsiOutput.Enabled.ALWAYS).     String banner = printBanner(resource, null, null, null).     assertThat(banner).startsWith("\u001B[31mThis is red.\u001B[0m"). }
false;public;0;8;;@Test public void renderWithColorsButDisabled() {     Resource resource = new ByteArrayResource("${Ansi.RED}This is red.${Ansi.NORMAL}".getBytes()).     AnsiOutput.setEnabled(AnsiOutput.Enabled.NEVER).     String banner = printBanner(resource, null, null, null).     assertThat(banner).startsWith("This is red."). }
false;public;0;7;;@Test public void renderWithTitle() {     Resource resource = new ByteArrayResource("banner ${application.title} ${a}".getBytes()).     String banner = printBanner(resource, null, null, "title").     assertThat(banner).startsWith("banner title 1"). }
false;public;0;7;;@Test public void renderWithoutTitle() {     Resource resource = new ByteArrayResource("banner ${application.title} ${a}".getBytes()).     String banner = printBanner(resource, null, null, null).     assertThat(banner).startsWith("banner  1"). }
false;private;4;11;;private String printBanner(Resource resource, String bootVersion, String applicationVersion, String applicationTitle) {     ResourceBanner banner = new MockResourceBanner(resource, bootVersion, applicationVersion, applicationTitle).     ConfigurableEnvironment environment = new MockEnvironment().     Map<String, Object> source = Collections.singletonMap("a", "1").     environment.getPropertySources().addLast(new MapPropertySource("map", source)).     ByteArrayOutputStream out = new ByteArrayOutputStream().     banner.printBanner(environment, getClass(), new PrintStream(out)).     return out.toString(). }
false;protected;0;4;;@Override protected String getBootVersion() {     return this.bootVersion. }
false;protected;1;4;;@Override protected String getApplicationVersion(Class<?> sourceClass) {     return this.applicationVersion. }
false;protected;1;4;;@Override protected String getApplicationTitle(Class<?> sourceClass) {     return this.applicationTitle. }
