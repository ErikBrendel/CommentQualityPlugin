commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before @After public void resetListener() {     System.clearProperty("PIDFILE").     System.clearProperty("PID_FAIL_ON_WRITE_ERROR").     ApplicationPidFileWriter.reset(). }
false;public;0;7;;@Test public void createPidFile() throws Exception {     File file = this.temporaryFolder.newFile().     ApplicationPidFileWriter listener = new ApplicationPidFileWriter(file).     listener.onApplicationEvent(EVENT).     assertThat(contentOf(file)).isNotEmpty(). }
false;public;0;8;;@Test public void overridePidFile() throws Exception {     File file = this.temporaryFolder.newFile().     System.setProperty("PIDFILE", this.temporaryFolder.newFile().getAbsolutePath()).     ApplicationPidFileWriter listener = new ApplicationPidFileWriter(file).     listener.onApplicationEvent(EVENT).     assertThat(contentOf(new File(System.getProperty("PIDFILE")))).isNotEmpty(). }
false;public;0;9;;@Test public void overridePidFileWithSpring() throws Exception {     File file = this.temporaryFolder.newFile().     SpringApplicationEvent event = createPreparedEvent("spring.pid.file", file.getAbsolutePath()).     ApplicationPidFileWriter listener = new ApplicationPidFileWriter().     listener.onApplicationEvent(event).     assertThat(contentOf(file)).isNotEmpty(). }
false;public;0;12;;@Test public void tryEnvironmentPreparedEvent() throws Exception {     File file = this.temporaryFolder.newFile().     SpringApplicationEvent event = createEnvironmentPreparedEvent("spring.pid.file", file.getAbsolutePath()).     ApplicationPidFileWriter listener = new ApplicationPidFileWriter().     listener.onApplicationEvent(event).     assertThat(contentOf(file)).isEmpty().     listener.setTriggerEventType(ApplicationEnvironmentPreparedEvent.class).     listener.onApplicationEvent(event).     assertThat(contentOf(file)).isNotEmpty(). }
false;public;0;12;;@Test public void tryReadyEvent() throws Exception {     File file = this.temporaryFolder.newFile().     SpringApplicationEvent event = createReadyEvent("spring.pid.file", file.getAbsolutePath()).     ApplicationPidFileWriter listener = new ApplicationPidFileWriter().     listener.onApplicationEvent(event).     assertThat(contentOf(file)).isEmpty().     listener.setTriggerEventType(ApplicationReadyEvent.class).     listener.onApplicationEvent(event).     assertThat(contentOf(file)).isNotEmpty(). }
false;public;0;9;;@Test public void withNoEnvironment() throws Exception {     File file = this.temporaryFolder.newFile().     ApplicationPidFileWriter listener = new ApplicationPidFileWriter(file).     listener.setTriggerEventType(ApplicationStartingEvent.class).     listener.onApplicationEvent(new ApplicationStartingEvent(new SpringApplication(), new String[] {})).     assertThat(contentOf(file)).isNotEmpty(). }
false;public;0;8;;@Test public void continueWhenPidFileIsReadOnly() throws Exception {     File file = this.temporaryFolder.newFile().     file.setReadOnly().     ApplicationPidFileWriter listener = new ApplicationPidFileWriter(file).     listener.onApplicationEvent(EVENT).     assertThat(contentOf(file)).isEmpty(). }
false;public;0;10;;@Test public void throwWhenPidFileIsReadOnly() throws Exception {     File file = this.temporaryFolder.newFile().     file.setReadOnly().     System.setProperty("PID_FAIL_ON_WRITE_ERROR", "true").     ApplicationPidFileWriter listener = new ApplicationPidFileWriter(file).     assertThatIllegalStateException().isThrownBy(() -> listener.onApplicationEvent(EVENT)).withMessageContaining("Cannot create pid file"). }
false;public;0;11;;@Test public void throwWhenPidFileIsReadOnlyWithSpring() throws Exception {     File file = this.temporaryFolder.newFile().     file.setReadOnly().     SpringApplicationEvent event = createPreparedEvent("spring.pid.fail-on-write-error", "true").     ApplicationPidFileWriter listener = new ApplicationPidFileWriter(file).     assertThatIllegalStateException().isThrownBy(() -> listener.onApplicationEvent(event)).withMessageContaining("Cannot create pid file"). }
false;private;2;6;;private SpringApplicationEvent createEnvironmentPreparedEvent(String propName, String propValue) {     ConfigurableEnvironment environment = createEnvironment(propName, propValue).     return new ApplicationEnvironmentPreparedEvent(new SpringApplication(), new String[] {}, environment). }
false;private;2;9;;private SpringApplicationEvent createPreparedEvent(String propName, String propValue) {     ConfigurableEnvironment environment = createEnvironment(propName, propValue).     ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class).     given(context.getEnvironment()).willReturn(environment).     return new ApplicationPreparedEvent(new SpringApplication(), new String[] {}, context). }
false;private;2;8;;private SpringApplicationEvent createReadyEvent(String propName, String propValue) {     ConfigurableEnvironment environment = createEnvironment(propName, propValue).     ConfigurableApplicationContext context = mock(ConfigurableApplicationContext.class).     given(context.getEnvironment()).willReturn(environment).     return new ApplicationReadyEvent(new SpringApplication(), new String[] {}, context). }
false;private;2;6;;private ConfigurableEnvironment createEnvironment(String propName, String propValue) {     MockPropertySource propertySource = mockPropertySource(propName, propValue).     ConfigurableEnvironment environment = new StandardEnvironment().     environment.getPropertySources().addLast(propertySource).     return environment. }
false;private;2;5;;private MockPropertySource mockPropertySource(String name, String value) {     MockPropertySource propertySource = new MockPropertySource().     propertySource.setProperty(name, value).     return propertySource. }
