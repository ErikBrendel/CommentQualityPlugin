commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void closeContext() {     if (this.context != null) {         this.context.close().     } }
false;public;0;6;;@Test public void moduleShouldRegisterSerializers() throws Exception {     load(OnlySerializer.class).     JsonComponentModule module = this.context.getBean(JsonComponentModule.class).     assertSerialize(module). }
false;public;0;6;;@Test public void moduleShouldRegisterDeserializers() throws Exception {     load(OnlyDeserializer.class).     JsonComponentModule module = this.context.getBean(JsonComponentModule.class).     assertDeserialize(module). }
false;public;0;7;;@Test public void moduleShouldRegisterInnerClasses() throws Exception {     load(NameAndAgeJsonComponent.class).     JsonComponentModule module = this.context.getBean(JsonComponentModule.class).     assertSerialize(module).     assertDeserialize(module). }
false;public;0;8;;@Test public void moduleShouldAllowInnerAbstractClasses() throws Exception {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(JsonComponentModule.class, ComponentWithInnerAbstractClass.class).     JsonComponentModule module = context.getBean(JsonComponentModule.class).     assertSerialize(module).     context.close(). }
false;private;1;7;;private void load(Class<?>... configs) {     AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().     context.register(configs).     context.register(JsonComponentModule.class).     context.refresh().     this.context = context. }
false;private;1;6;;private void assertSerialize(Module module) throws Exception {     ObjectMapper mapper = new ObjectMapper().     mapper.registerModule(module).     String json = mapper.writeValueAsString(new NameAndAge("spring", 100)).     assertThat(json).isEqualToIgnoringWhitespace("{\"name\":\"spring\",\"age\":100}"). }
false;private;1;8;;private void assertDeserialize(Module module) throws Exception {     ObjectMapper mapper = new ObjectMapper().     mapper.registerModule(module).     NameAndAge nameAndAge = mapper.readValue("{\"name\":\"spring\",\"age\":100}", NameAndAge.class).     assertThat(nameAndAge.getName()).isEqualTo("spring").     assertThat(nameAndAge.getAge()).isEqualTo(100). }
