commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setupMocks() {     MockitoAnnotations.initMocks(this).     given(this.servletContext.addFilter(anyString(), any(Filter.class))).willReturn(this.registration). }
false;public;0;9;;@Test public void startupWithDefaults() throws Exception {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     bean.onStartup(this.servletContext).     verify(this.servletContext).addFilter(eq("mockFilter"), getExpectedFilter()).     verify(this.registration).setAsyncSupported(true).     verify(this.registration).addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), false, "/*"). }
false;public;0;27;;@Test public void startupWithSpecifiedValues() throws Exception {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     bean.setName("test").     bean.setAsyncSupported(false).     bean.setInitParameters(Collections.singletonMap("a", "b")).     bean.addInitParameter("c", "d").     bean.setUrlPatterns(new LinkedHashSet<>(Arrays.asList("/a", "/b"))).     bean.addUrlPatterns("/c").     bean.setServletNames(new LinkedHashSet<>(Arrays.asList("s1", "s2"))).     bean.addServletNames("s3").     bean.setServletRegistrationBeans(Collections.singleton(mockServletRegistration("s4"))).     bean.addServletRegistrationBeans(mockServletRegistration("s5")).     bean.setMatchAfter(true).     bean.onStartup(this.servletContext).     verify(this.servletContext).addFilter(eq("test"), getExpectedFilter()).     verify(this.registration).setAsyncSupported(false).     Map<String, String> expectedInitParameters = new HashMap<>().     expectedInitParameters.put("a", "b").     expectedInitParameters.put("c", "d").     verify(this.registration).setInitParameters(expectedInitParameters).     verify(this.registration).addMappingForUrlPatterns(EnumSet.of(DispatcherType.REQUEST), true, "/a", "/b", "/c").     verify(this.registration).addMappingForServletNames(EnumSet.of(DispatcherType.REQUEST), true, "s4", "s5", "s1", "s2", "s3"). }
false;public;0;7;;@Test public void specificName() throws Exception {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     bean.setName("specificName").     bean.onStartup(this.servletContext).     verify(this.servletContext).addFilter(eq("specificName"), getExpectedFilter()). }
false;public;0;6;;@Test public void deducedName() throws Exception {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     bean.onStartup(this.servletContext).     verify(this.servletContext).addFilter(eq("mockFilter"), getExpectedFilter()). }
false;public;0;8;;@Test public void disable() throws Exception {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     bean.setEnabled(false).     bean.onStartup(this.servletContext).     verify(this.servletContext, never()).addFilter(eq("mockFilter"), getExpectedFilter()). }
false;public;0;7;;@Test public void setServletRegistrationBeanMustNotBeNull() {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     assertThatIllegalArgumentException().isThrownBy(() -> bean.setServletRegistrationBeans(null)).withMessageContaining("ServletRegistrationBeans must not be null"). }
false;public;0;7;;@Test public void addServletRegistrationBeanMustNotBeNull() {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     assertThatIllegalArgumentException().isThrownBy(() -> bean.addServletRegistrationBeans((ServletRegistrationBean[]) null)).withMessageContaining("ServletRegistrationBeans must not be null"). }
false;public;0;10;;@Test public void setServletRegistrationBeanReplacesValue() throws Exception {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean(mockServletRegistration("a")).     bean.setServletRegistrationBeans(new LinkedHashSet<ServletRegistrationBean<?>>(Collections.singletonList(mockServletRegistration("b")))).     bean.onStartup(this.servletContext).     verify(this.registration).addMappingForServletNames(EnumSet.of(DispatcherType.REQUEST), false, "b"). }
false;public;0;8;;@Test public void modifyInitParameters() throws Exception {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     bean.addInitParameter("a", "b").     bean.getInitParameters().put("a", "c").     bean.onStartup(this.servletContext).     verify(this.registration).setInitParameters(Collections.singletonMap("a", "c")). }
false;public;0;6;;@Test public void setUrlPatternMustNotBeNull() {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     assertThatIllegalArgumentException().isThrownBy(() -> bean.setUrlPatterns(null)).withMessageContaining("UrlPatterns must not be null"). }
false;public;0;7;;@Test public void addUrlPatternMustNotBeNull() {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     assertThatIllegalArgumentException().isThrownBy(() -> bean.addUrlPatterns((String[]) null)).withMessageContaining("UrlPatterns must not be null"). }
false;public;0;6;;@Test public void setServletNameMustNotBeNull() {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     assertThatIllegalArgumentException().isThrownBy(() -> bean.setServletNames(null)).withMessageContaining("ServletNames must not be null"). }
false;public;0;7;;@Test public void addServletNameMustNotBeNull() {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     assertThatIllegalArgumentException().isThrownBy(() -> bean.addServletNames((String[]) null)).withMessageContaining("ServletNames must not be null"). }
false;public;0;8;;@Test public void withSpecificDispatcherTypes() throws Exception {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     bean.setDispatcherTypes(DispatcherType.INCLUDE, DispatcherType.FORWARD).     bean.onStartup(this.servletContext).     verify(this.registration).addMappingForUrlPatterns(EnumSet.of(DispatcherType.INCLUDE, DispatcherType.FORWARD), false, "/*"). }
false;public;0;9;;@Test public void withSpecificDispatcherTypesEnumSet() throws Exception {     AbstractFilterRegistrationBean<?> bean = createFilterRegistrationBean().     EnumSet<DispatcherType> types = EnumSet.of(DispatcherType.INCLUDE, DispatcherType.FORWARD).     bean.setDispatcherTypes(types).     bean.onStartup(this.servletContext).     verify(this.registration).addMappingForUrlPatterns(types, false, "/*"). }
false;protected,abstract;0;1;;protected abstract Filter getExpectedFilter().
false;protected,abstract;1;2;;protected abstract AbstractFilterRegistrationBean<?> createFilterRegistrationBean(ServletRegistrationBean<?>... servletRegistrationBeans).
false;protected,final;1;5;;protected final ServletRegistrationBean<?> mockServletRegistration(String name) {     ServletRegistrationBean<?> bean = new ServletRegistrationBean<>().     bean.setName(name).     return bean. }
