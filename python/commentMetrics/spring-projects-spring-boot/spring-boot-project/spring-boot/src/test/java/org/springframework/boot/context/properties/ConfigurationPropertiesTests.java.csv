commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@After public void cleanup() {     this.context.close().     System.clearProperty("name").     System.clearProperty("nested.name").     System.clearProperty("nested_name"). }
false;public;0;7;;@Test public void loadShouldBind() {     load(BasicConfiguration.class, "name=foo").     assertThat(this.context.getBeanNamesForType(BasicProperties.class)).hasSize(1).     assertThat(this.context.containsBean(BasicProperties.class.getName())).isTrue().     assertThat(this.context.getBean(BasicProperties.class).name).isEqualTo("foo"). }
false;public;0;8;;@Test public void loadShouldBindNested() {     load(NestedConfiguration.class, "name=foo", "nested.name=bar").     assertThat(this.context.getBeanNamesForType(NestedProperties.class)).hasSize(1).     assertThat(this.context.getBean(NestedProperties.class).name).isEqualTo("foo").     assertThat(this.context.getBean(NestedProperties.class).nested.name).isEqualTo("bar"). }
false;public;0;7;;@Test public void loadWhenUsingSystemPropertiesShouldBind() {     System.setProperty("name", "foo").     load(BasicConfiguration.class).     assertThat(this.context.getBeanNamesForType(BasicProperties.class)).hasSize(1).     assertThat(this.context.getBean(BasicProperties.class).name).isEqualTo("foo"). }
false;public;0;10;;@Test public void loadWhenUsingSystemPropertiesShouldBindNested() {     System.setProperty("name", "foo").     System.setProperty("nested.name", "bar").     load(NestedConfiguration.class).     assertThat(this.context.getBeanNamesForType(NestedProperties.class)).hasSize(1).     assertThat(this.context.getBean(NestedProperties.class).name).isEqualTo("foo").     assertThat(this.context.getBean(NestedProperties.class).nested.name).isEqualTo("bar"). }
false;public;0;8;;@Test public void loadWhenHasIgnoreUnknownFieldsFalseAndNoUnknownFieldsShouldBind() {     removeSystemProperties().     load(IgnoreUnknownFieldsFalseConfiguration.class, "name=foo").     IgnoreUnknownFieldsFalseProperties bean = this.context.getBean(IgnoreUnknownFieldsFalseProperties.class).     assertThat(((BasicProperties) bean).name).isEqualTo("foo"). }
false;public;0;8;;@Test public void loadWhenHasIgnoreUnknownFieldsFalseAndUnknownFieldsShouldFail() {     removeSystemProperties().     assertThatExceptionOfType(ConfigurationPropertiesBindException.class).isThrownBy(() -> load(IgnoreUnknownFieldsFalseConfiguration.class, "name=foo", "bar=baz")).withCauseInstanceOf(BindException.class). }
false;public;0;7;;@Test public void loadWhenHasIgnoreInvalidFieldsTrueAndInvalidFieldsShouldBind() {     load(IgnoreInvalidFieldsFalseProperties.class, "com.example.bar=spam").     IgnoreInvalidFieldsFalseProperties bean = this.context.getBean(IgnoreInvalidFieldsFalseProperties.class).     assertThat(bean.getBar()).isEqualTo(0). }
false;public;0;6;;@Test public void loadWhenHasPrefixShouldBind() {     load(PrefixConfiguration.class, "spring.foo.name=foo").     PrefixProperties bean = this.context.getBean(PrefixProperties.class).     assertThat(((BasicProperties) bean).name).isEqualTo("foo"). }
false;public;0;7;;@Test public void loadWhenPropertiesHaveAnnotationOnBaseClassShouldBind() {     load(AnnotationOnBaseClassConfiguration.class, "name=foo").     AnnotationOnBaseClassProperties bean = this.context.getBean(AnnotationOnBaseClassProperties.class).     assertThat(((BasicProperties) bean).name).isEqualTo("foo"). }
false;public;0;6;;@Test public void loadWhenBindingArrayShouldBind() {     load(BasicConfiguration.class, "name=foo", "array=1,2,3").     BasicProperties bean = this.context.getBean(BasicProperties.class).     assertThat(bean.array).containsExactly(1, 2, 3). }
false;public;0;6;;@Test public void loadWhenBindingArrayFromYamlArrayShouldBind() {     load(BasicConfiguration.class, "name=foo", "list[0]=1", "list[1]=2", "list[2]=3").     BasicProperties bean = this.context.getBean(BasicProperties.class).     assertThat(bean.list).containsExactly(1, 2, 3). }
false;public;0;11;;@Test public void loadWhenBindingOver256ElementsShouldBind() {     List<String> pairs = new ArrayList<>().     pairs.add("name:foo").     for (int i = 0. i < 1000. i++) {         pairs.add("list[" + i + "]:" + i).     }     load(BasicConfiguration.class, StringUtils.toStringArray(pairs)).     BasicProperties bean = this.context.getBean(BasicProperties.class).     assertThat(bean.list).hasSize(1000). }
false;public;0;7;;@Test public void loadWhenBindingWithoutAndAnnotationShouldFail() {     assertThatIllegalArgumentException().isThrownBy(() -> load(WithoutAndAnnotationConfiguration.class, "name:foo")).withMessageContaining("No ConfigurationProperties annotation found"). }
false;public;0;7;;@Test public void loadWhenBindingWithoutAnnotationValueShouldBind() {     load(WithoutAnnotationValueConfiguration.class, "name=foo").     WithoutAnnotationValueProperties bean = this.context.getBean(WithoutAnnotationValueProperties.class).     assertThat(bean.name).isEqualTo("foo"). }
false;public;0;7;;@Test public void loadWhenBindingWithDefaultsInXmlShouldBind() {     load(new Class<?>[] { BasicConfiguration.class, DefaultsInXmlConfiguration.class }).     BasicProperties bean = this.context.getBean(BasicProperties.class).     assertThat(bean.name).isEqualTo("bar"). }
false;public;0;6;;@Test public void loadWhenBindingWithDefaultsInJavaConfigurationShouldBind() {     load(DefaultsInJavaConfiguration.class).     BasicProperties bean = this.context.getBean(BasicProperties.class).     assertThat(bean.name).isEqualTo("bar"). }
false;public;0;8;;@Test public void loadWhenBindingTwoBeansShouldBind() {     load(new Class<?>[] { WithoutAnnotationValueConfiguration.class, BasicConfiguration.class }).     assertThat(this.context.getBean(BasicProperties.class)).isNotNull().     assertThat(this.context.getBean(WithoutAnnotationValueProperties.class)).isNotNull(). }
false;public;0;14;;@Test public void loadWhenBindingWithParentContextShouldBind() {     AnnotationConfigApplicationContext parent = load(BasicConfiguration.class, "name=parent").     this.context = new AnnotationConfigApplicationContext().     this.context.setParent(parent).     load(new Class[] { BasicConfiguration.class, BasicPropertiesConsumer.class }, "name=child").     assertThat(this.context.getBean(BasicProperties.class)).isNotNull().     assertThat(parent.getBean(BasicProperties.class)).isNotNull().     assertThat(this.context.getBean(BasicPropertiesConsumer.class).getName()).isEqualTo("parent").     parent.close(). }
false;public;0;12;;@Test public void loadWhenBindingOnlyParentContextShouldBind() {     AnnotationConfigApplicationContext parent = load(BasicConfiguration.class, "name=foo").     this.context = new AnnotationConfigApplicationContext().     this.context.setParent(parent).     load(BasicPropertiesConsumer.class).     assertThat(this.context.getBeanNamesForType(BasicProperties.class)).isEmpty().     assertThat(parent.getBeanNamesForType(BasicProperties.class)).hasSize(1).     assertThat(this.context.getBean(BasicPropertiesConsumer.class).getName()).isEqualTo("foo"). }
false;public;0;6;;@Test public void loadWhenPrefixedPropertiesDeclaredAsBeanShouldBind() {     load(PrefixPropertiesDeclaredAsBeanConfiguration.class, "spring.foo.name=foo").     PrefixProperties bean = this.context.getBean(PrefixProperties.class).     assertThat(((BasicProperties) bean).name).isEqualTo("foo"). }
false;public;0;8;;@Test public void loadWhenPrefixedPropertiesDeclaredAsAnnotationValueShouldBind() {     load(PrefixPropertiesDeclaredAsAnnotationValueConfiguration.class, "spring.foo.name=foo").     PrefixProperties bean = this.context.getBean("spring.foo-" + PrefixProperties.class.getName(), PrefixProperties.class).     assertThat(((BasicProperties) bean).name).isEqualTo("foo"). }
false;public;0;10;;@Test public void loadWhenMultiplePrefixedPropertiesDeclaredAsAnnotationValueShouldBind() {     load(MultiplePrefixPropertiesDeclaredAsAnnotationValueConfiguration.class, "spring.foo.name=foo", "spring.bar.name=bar").     PrefixProperties bean1 = this.context.getBean(PrefixProperties.class).     AnotherPrefixProperties bean2 = this.context.getBean(AnotherPrefixProperties.class).     assertThat(((BasicProperties) bean1).name).isEqualTo("foo").     assertThat(((BasicProperties) bean2).name).isEqualTo("bar"). }
false;public;0;7;;@Test public void loadWhenBindingToMapKeyWithPeriodShouldBind() {     load(MapProperties.class, "mymap.key1.key2:value12", "mymap.key3:value3").     MapProperties bean = this.context.getBean(MapProperties.class).     assertThat(bean.mymap).containsOnly(entry("key3", "value3"), entry("key1.key2", "value12")). }
false;public;0;7;;@Test public void loadWhenPrefixedPropertiesAreReplacedOnBeanMethodShouldBind() {     load(PrefixedPropertiesReplacedOnBeanMethodConfiguration.class, "external.name=bar", "spam.name=foo").     PrefixProperties bean = this.context.getBean(PrefixProperties.class).     assertThat(((BasicProperties) bean).name).isEqualTo("foo"). }
false;public;0;6;;@Test public void loadShouldBindToJavaTimeDuration() {     load(BasicConfiguration.class, "duration=PT1M").     BasicProperties bean = this.context.getBean(BasicProperties.class).     assertThat(bean.getDuration().getSeconds()).isEqualTo(60). }
false;public;0;7;;@Test public void loadWhenBindingToValidatedImplementationOfInterfaceShouldBind() {     load(ValidatedImplementationConfiguration.class, "test.foo=bar").     ValidatedImplementationProperties bean = this.context.getBean(ValidatedImplementationProperties.class).     assertThat(bean.getFoo()).isEqualTo("bar"). }
false;public;0;7;;@Test public void loadWithPropertyPlaceholderValueShouldBind() {     load(WithPropertyPlaceholderValueConfiguration.class, "default.value=foo").     WithPropertyPlaceholderValueProperties bean = this.context.getBean(WithPropertyPlaceholderValueProperties.class).     assertThat(bean.getValue()).isEqualTo("foo"). }
false;public;0;8;;@Test public void loadWithPropertyPlaceholderShouldNotAlterPropertySourceOrder() {     load(WithPropertyPlaceholderWithLocalPropertiesValueConfiguration.class, "com.example.bar=a").     SimplePrefixedProperties bean = this.context.getBean(SimplePrefixedProperties.class).     assertThat(bean.getBar()).isEqualTo("a"). }
false;public;0;11;;@Test public void loadWhenHasPostConstructShouldTriggerPostConstructWithBoundBean() {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("bar", "foo").     this.context.setEnvironment(environment).     this.context.register(WithPostConstructConfiguration.class).     this.context.refresh().     WithPostConstructConfiguration bean = this.context.getBean(WithPostConstructConfiguration.class).     assertThat(bean.initialized).isTrue(). }
false;protected;0;6;;@Override protected void onRefresh() throws BeansException {     assertThat(WithFactoryBeanConfiguration.factoryBeanInitialized).as("Initialized too early").isFalse().     super.onRefresh(). }
false;public;0;22;;@Test public void loadShouldNotInitializeFactoryBeans() {     WithFactoryBeanConfiguration.factoryBeanInitialized = false.     this.context = new AnnotationConfigApplicationContext() {          @Override         protected void onRefresh() throws BeansException {             assertThat(WithFactoryBeanConfiguration.factoryBeanInitialized).as("Initialized too early").isFalse().             super.onRefresh().         }     }.     this.context.register(WithFactoryBeanConfiguration.class).     GenericBeanDefinition beanDefinition = new GenericBeanDefinition().     beanDefinition.setBeanClass(FactoryBeanTester.class).     beanDefinition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE).     this.context.registerBeanDefinition("test", beanDefinition).     this.context.refresh().     assertThat(WithFactoryBeanConfiguration.factoryBeanInitialized).as("Not Initialized").isTrue(). }
false;public;0;7;;@Test public void loadWhenUsingRelaxedFormsShouldBindToEnum() {     bindToEnum("test.theValue=FOO").     bindToEnum("test.theValue=foo").     bindToEnum("test.the-value=FoO").     bindToEnum("test.THE_VALUE=FoO"). }
false;private;1;6;;private void bindToEnum(String... inlinedProperties) {     load(WithEnumProperties.class, inlinedProperties).     WithEnumProperties bean = this.context.getBean(WithEnumProperties.class).     assertThat(bean.getTheValue()).isEqualTo(FooEnum.FOO).     resetContext(). }
false;public;0;5;;@Test public void loadWhenUsingRelaxedFormsShouldBindToEnumSet() {     bindToEnumSet("test.the-values=foo,bar", FooEnum.FOO, FooEnum.BAR).     bindToEnumSet("test.the-values=foo", FooEnum.FOO). }
false;private;2;6;;private void bindToEnumSet(String inlinedProperty, FooEnum... expected) {     load(WithEnumProperties.class, inlinedProperty).     WithEnumProperties bean = this.context.getBean(WithEnumProperties.class).     assertThat(bean.getTheValues()).contains(expected).     resetContext(). }
false;public;0;7;;@Test public void loadShouldBindToCharArray() {     load(WithCharArrayProperties.class, "test.chars=word").     WithCharArrayProperties bean = this.context.getBean(WithCharArrayProperties.class).     assertThat(bean.getChars()).isEqualTo("word".toCharArray()). }
false;public;0;9;;@Test public void loadWhenUsingRelaxedFormsAndOverrideShouldBind() {     load(WithRelaxedNamesProperties.class, "test.FOO_BAR=test1", "test.FOO_BAR=test2", "test.BAR-B-A-Z=testa", "test.BAR-B-A-Z=testb").     WithRelaxedNamesProperties bean = this.context.getBean(WithRelaxedNamesProperties.class).     assertThat(bean.getFooBar()).isEqualTo("test2").     assertThat(bean.getBarBAZ()).isEqualTo("testb"). }
false;public;0;6;;@Test public void loadShouldBindToMap() {     load(WithMapProperties.class, "test.map.foo=bar").     WithMapProperties bean = this.context.getBean(WithMapProperties.class).     assertThat(bean.getMap()).containsOnly(entry("foo", "bar")). }
false;public;0;7;;@Test public void loadShouldBindToMapWithNumericKey() {     load(MapWithNumericKeyProperties.class, "sample.properties.1.name=One").     MapWithNumericKeyProperties bean = this.context.getBean(MapWithNumericKeyProperties.class).     assertThat(bean.getProperties().get("1").name).isEqualTo("One"). }
false;public;0;12;;@Test public void loadWhenUsingSystemPropertiesShouldBindToMap() {     this.context.getEnvironment().getPropertySources().addLast(new SystemEnvironmentPropertySource(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, Collections.singletonMap("TEST_MAP_FOO_BAR", "baz"))).     load(WithComplexMapProperties.class).     WithComplexMapProperties bean = this.context.getBean(WithComplexMapProperties.class).     assertThat(bean.getMap()).containsOnlyKeys("foo").     assertThat(bean.getMap().get("foo")).containsOnly(entry("bar", "baz")). }
false;public;0;11;;@Test public void loadWhenDotsInSystemEnvironmentPropertiesShouldBind() {     this.context.getEnvironment().getPropertySources().addLast(new SystemEnvironmentPropertySource(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, Collections.singletonMap("com.example.bar", "baz"))).     load(SimplePrefixedProperties.class).     SimplePrefixedProperties bean = this.context.getBean(SimplePrefixedProperties.class).     assertThat(bean.getBar()).isEqualTo("baz"). }
false;public;0;12;;@Test public void loadWhenOverridingPropertiesShouldBind() {     MutablePropertySources sources = this.context.getEnvironment().getPropertySources().     sources.addFirst(new SystemEnvironmentPropertySource("system", Collections.singletonMap("SPRING_FOO_NAME", "Jane"))).     sources.addLast(new MapPropertySource("test", Collections.singletonMap("spring.foo.name", "John"))).     load(PrefixConfiguration.class).     BasicProperties bean = this.context.getBean(BasicProperties.class).     assertThat(bean.name).isEqualTo("Jane"). }
false;public;0;7;;@Test public void loadWhenJsr303ConstraintDoesNotMatchShouldFail() {     assertThatExceptionOfType(ConfigurationPropertiesBindException.class).isThrownBy(() -> load(ValidatedJsr303Configuration.class, "description=")).withCauseInstanceOf(BindException.class). }
false;public;0;6;;@Test public void loadValidatedOnBeanMethodAndJsr303ConstraintDoesNotMatchShouldFail() {     assertThatExceptionOfType(ConfigurationPropertiesBindException.class).isThrownBy(() -> load(ValidatedOnBeanJsr303Configuration.class, "description=")).withCauseInstanceOf(BindException.class). }
false;public;0;7;;@Test public void loadWhenJsr303ConstraintDoesNotMatchOnNestedThatIsNotDirectlyAnnotatedShouldFail() {     assertThatExceptionOfType(ConfigurationPropertiesBindException.class).isThrownBy(() -> load(ValidatedNestedJsr303Properties.class, "properties.description=")).withCauseInstanceOf(BindException.class). }
false;public;0;6;;@Test public void loadWhenJsr303ConstraintDoesNotMatchOnNestedThatIsNotDirectlyAnnotatedButIsValidShouldFail() {     assertThatExceptionOfType(ConfigurationPropertiesBindException.class).isThrownBy(() -> load(ValidatedValidNestedJsr303Properties.class)).withCauseInstanceOf(BindException.class). }
false;public;0;7;;@Test public void loadWhenJsr303ConstraintMatchesShouldBind() {     load(ValidatedJsr303Configuration.class, "description=foo").     ValidatedJsr303Properties bean = this.context.getBean(ValidatedJsr303Properties.class).     assertThat(bean.getDescription()).isEqualTo("foo"). }
false;public;0;7;;@Test public void loadWhenJsr303ConstraintDoesNotMatchAndNotValidatedAnnotationShouldBind() {     load(NonValidatedJsr303Configuration.class, "name=foo").     NonValidatedJsr303Properties bean = this.context.getBean(NonValidatedJsr303Properties.class).     assertThat(((BasicProperties) bean).name).isEqualTo("foo"). }
false;public;0;6;;@Test public void loadWhenHasMultiplePropertySourcesPlaceholderConfigurerShouldLogWarning() {     load(MultiplePropertySourcesPlaceholderConfigurerConfiguration.class).     assertThat(this.output.toString()).contains("Multiple PropertySourcesPlaceholderConfigurer beans registered"). }
false;public;0;15;;@Test public void loadWhenOverridingPropertiesWithPlaceholderResolutionInEnvironmentShouldBindWithOverride() {     MutablePropertySources sources = this.context.getEnvironment().getPropertySources().     sources.addFirst(new SystemEnvironmentPropertySource("system", Collections.singletonMap("COM_EXAMPLE_BAR", "10"))).     Map<String, Object> source = new HashMap<>().     source.put("com.example.bar", 5).     source.put("com.example.foo", "${com.example.bar}").     sources.addLast(new MapPropertySource("test", source)).     load(SimplePrefixedProperties.class).     SimplePrefixedProperties bean = this.context.getBean(SimplePrefixedProperties.class).     assertThat(bean.getFoo()).isEqualTo(10). }
false;public;0;14;;@Test public void loadWhenHasUnboundElementsFromSystemEnvironmentShouldNotThrowException() {     MutablePropertySources sources = this.context.getEnvironment().getPropertySources().     sources.addFirst(new MapPropertySource("test", Collections.singletonMap("com.example.foo", 5))).     sources.addLast(new SystemEnvironmentPropertySource(StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, Collections.singletonMap("COM_EXAMPLE_OTHER", "10"))).     load(SimplePrefixedProperties.class).     SimplePrefixedProperties bean = this.context.getBean(SimplePrefixedProperties.class).     assertThat(bean.getFoo()).isEqualTo(5). }
false;public;0;19;;@Test public void loadShouldSupportRebindableConfigurationProperties() {     // gh-9160     MutablePropertySources sources = this.context.getEnvironment().getPropertySources().     Map<String, Object> source = new LinkedHashMap<>().     source.put("example.one", "foo").     sources.addFirst(new MapPropertySource("test-source", source)).     this.context.register(PrototypePropertiesConfiguration.class).     this.context.refresh().     PrototypeBean first = this.context.getBean(PrototypeBean.class).     assertThat(first.getOne()).isEqualTo("foo").     source.put("example.one", "bar").     sources.addFirst(new MapPropertySource("extra", Collections.singletonMap("example.two", "baz"))).     PrototypeBean second = this.context.getBean(PrototypeBean.class).     assertThat(second.getOne()).isEqualTo("bar").     assertThat(second.getTwo()).isEqualTo("baz"). }
false;public;0;19;;@Test public void loadWhenHasPropertySourcesPlaceholderConfigurerShouldSupportRebindableConfigurationProperties() {     MutablePropertySources sources = this.context.getEnvironment().getPropertySources().     Map<String, Object> source = new LinkedHashMap<>().     source.put("example.one", "foo").     sources.addFirst(new MapPropertySource("test-source", source)).     this.context.register(PrototypePropertiesConfiguration.class).     this.context.register(PropertySourcesPlaceholderConfigurer.class).     this.context.refresh().     PrototypeBean first = this.context.getBean(PrototypeBean.class).     assertThat(first.getOne()).isEqualTo("foo").     source.put("example.one", "bar").     sources.addFirst(new MapPropertySource("extra", Collections.singletonMap("example.two", "baz"))).     PrototypeBean second = this.context.getBean(PrototypeBean.class).     assertThat(second.getOne()).isEqualTo("bar").     assertThat(second.getTwo()).isEqualTo("baz"). }
false;public;0;14;;@Test public void customProtocolResolverIsInvoked() {     this.context = new AnnotationConfigApplicationContext().     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context, "test.resource=application.properties").     ProtocolResolver protocolResolver = mock(ProtocolResolver.class).     given(protocolResolver.resolve(anyString(), any(ResourceLoader.class))).willReturn(null).     this.context.addProtocolResolver(protocolResolver).     this.context.register(PropertiesWithResource.class).     this.context.refresh().     verify(protocolResolver).resolve(eq("application.properties"), any(ResourceLoader.class)). }
false;public;0;16;;@Test public void customProtocolResolver() {     this.context = new AnnotationConfigApplicationContext().     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context, "test.resource=test:/application.properties").     this.context.addProtocolResolver(new TestProtocolResolver()).     this.context.register(PropertiesWithResource.class).     this.context.refresh().     Resource resource = this.context.getBean(PropertiesWithResource.class).getResource().     assertThat(resource).isNotNull().     assertThat(resource).isInstanceOf(ClassPathResource.class).     assertThat(resource.exists()).isTrue().     assertThat(((ClassPathResource) resource).getPath()).isEqualTo("application.properties"). }
false;public;0;7;;@Test public void loadShouldUseConfigurationConverter() {     prepareConverterContext(ConverterConfiguration.class, PersonProperties.class).     Person person = this.context.getBean(PersonProperties.class).getPerson().     assertThat(person.firstName).isEqualTo("John").     assertThat(person.lastName).isEqualTo("Smith"). }
false;public;0;7;;@Test public void loadWhenConfigurationConverterIsNotQualifiedShouldNotConvert() {     assertThatExceptionOfType(BeanCreationException.class).isThrownBy(() -> prepareConverterContext(NonQualifiedConverterConfiguration.class, PersonProperties.class)).withCauseInstanceOf(BindException.class). }
false;public;0;8;;@Test public void loadShouldUseGenericConfigurationConverter() {     prepareConverterContext(GenericConverterConfiguration.class, PersonProperties.class).     Person person = this.context.getBean(PersonProperties.class).getPerson().     assertThat(person.firstName).isEqualTo("John").     assertThat(person.lastName).isEqualTo("Smith"). }
false;public;0;8;;@Test public void loadWhenGenericConfigurationConverterIsNotQualifiedShouldNotConvert() {     assertThatExceptionOfType(BeanCreationException.class).isThrownBy(() -> prepareConverterContext(NonQualifiedGenericConverterConfiguration.class, PersonProperties.class)).withCauseInstanceOf(BindException.class). }
false;public;0;7;;@Test @SuppressWarnings("rawtypes") public void loadShouldBindToBeanWithGenerics() {     load(GenericConfiguration.class, "foo.bar=hello").     AGenericClass foo = this.context.getBean(AGenericClass.class).     assertThat(foo.getBar()).isNotNull(). }
false;private;1;3;;private void prepareConverterContext(Class<?>... config) {     load(config, "test.person=John Smith"). }
false;public;0;10;;@Test public void loadWhenHasConfigurationPropertiesValidatorShouldApplyValidator() {     assertThatExceptionOfType(Exception.class).isThrownBy(() -> load(WithCustomValidatorConfiguration.class)).satisfies((ex) -> {         assertThat(ex).hasCauseInstanceOf(BindException.class).         assertThat(ex.getCause()).hasCauseExactlyInstanceOf(BindValidationException.class).     }). }
false;public;0;7;;@Test public void loadWhenHasUnsupportedConfigurationPropertiesValidatorShouldBind() {     load(WithUnsupportedCustomValidatorConfiguration.class, "test.foo=bar").     WithSetterThatThrowsValidationExceptionProperties bean = this.context.getBean(WithSetterThatThrowsValidationExceptionProperties.class).     assertThat(bean.getFoo()).isEqualTo("bar"). }
false;public;0;9;;@Test public void loadWhenConfigurationPropertiesIsAlsoValidatorShouldApplyValidator() {     assertThatExceptionOfType(Exception.class).isThrownBy(() -> load(ValidatorProperties.class)).satisfies((ex) -> {         assertThat(ex).hasCauseInstanceOf(BindException.class).         assertThat(ex.getCause()).hasCauseExactlyInstanceOf(BindValidationException.class).     }). }
false;public;0;7;;@Test public void loadWhenSetterThrowsValidationExceptionShouldFail() {     assertThatExceptionOfType(BeanCreationException.class).isThrownBy(() -> load(WithSetterThatThrowsValidationExceptionProperties.class, "test.foo=spam")).withCauseInstanceOf(BindException.class). }
false;public;0;10;;@Test public void loadWhenFailsShouldIncludeAnnotationDetails() {     removeSystemProperties().     assertThatExceptionOfType(ConfigurationPropertiesBindException.class).isThrownBy(() -> load(IgnoreUnknownFieldsFalseConfiguration.class, "name=foo", "bar=baz")).withMessageContaining("Could not bind properties to " + "'ConfigurationPropertiesTests.IgnoreUnknownFieldsFalseProperties' : " + "prefix=, ignoreInvalidFields=false, ignoreUnknownFields=false."). }
false;public;0;9;;@Test public void loadWhenHasCustomPropertyEditorShouldBind() {     this.context.getBeanFactory().registerCustomEditor(Person.class, PersonPropertyEditor.class).     load(PersonProperties.class, "test.person=boot,spring").     PersonProperties bean = this.context.getBean(PersonProperties.class).     assertThat(bean.getPerson().firstName).isEqualTo("spring").     assertThat(bean.getPerson().lastName).isEqualTo("boot"). }
false;public;0;8;;@Test public void loadWhenBindingToListOfGenericClassShouldBind() {     // gh-12166     load(ListOfGenericClassProperties.class, "test.list=java.lang.RuntimeException").     ListOfGenericClassProperties bean = this.context.getBean(ListOfGenericClassProperties.class).     assertThat(bean.getList()).containsExactly(RuntimeException.class). }
false;public;0;6;;@Test public void loadWhenBindingCurrentDirectoryToFileShouldBind() {     load(FileProperties.class, "test.file=.").     FileProperties bean = this.context.getBean(FileProperties.class).     assertThat(bean.getFile()).isEqualTo(new File(".")). }
false;public;0;7;;@Test public void loadWhenBindingToDataSizeShouldBind() {     load(DataSizeProperties.class, "test.size=10GB", "test.another-size=5").     DataSizeProperties bean = this.context.getBean(DataSizeProperties.class).     assertThat(bean.getSize()).isEqualTo(DataSize.ofGigabytes(10)).     assertThat(bean.getAnotherSize()).isEqualTo(DataSize.ofKilobytes(5)). }
false;public;0;4;;@Test public void loadWhenTopLevelConverterNotFoundExceptionShouldNotFail() {     load(PersonProperties.class, "test=boot"). }
false;public;0;19;;@Test public void loadWhenConfigurationPropertiesContainsMapWithPositiveAndNegativeIntegerKeys() {     // gh-14136     MutablePropertySources sources = this.context.getEnvironment().getPropertySources().     Map<String, Object> source = new HashMap<>().     source.put("test.map.x.[-1].a", "baz").     source.put("test.map.x.1.a", "bar").     source.put("test.map.x.1.b", 1).     sources.addLast(new MapPropertySource("test", source)).     load(WithIntegerMapProperties.class).     WithIntegerMapProperties bean = this.context.getBean(WithIntegerMapProperties.class).     Map<Integer, Foo> x = bean.getMap().get("x").     assertThat(x.get(-1).getA()).isEqualTo("baz").     assertThat(x.get(-1).getB()).isEqualTo(0).     assertThat(x.get(1).getA()).isEqualTo("bar").     assertThat(x.get(1).getB()).isEqualTo(1). }
false;private;2;4;;private AnnotationConfigApplicationContext load(Class<?> configuration, String... inlinedProperties) {     return load(new Class<?>[] { configuration }, inlinedProperties). }
false;private;2;8;;private AnnotationConfigApplicationContext load(Class<?>[] configuration, String... inlinedProperties) {     this.context.register(configuration).     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context, inlinedProperties).     this.context.refresh().     return this.context. }
true;private;0;6;/**  * Strict tests need a known set of properties so we remove system items which may be  * environment specific.  */ ;/**  * Strict tests need a known set of properties so we remove system items which may be  * environment specific.  */ private void removeSystemProperties() {     MutablePropertySources sources = this.context.getEnvironment().getPropertySources().     sources.remove("systemProperties").     sources.remove("systemEnvironment"). }
false;private;0;4;;private void resetContext() {     this.context.close().     this.context = new AnnotationConfigApplicationContext(). }
false;public;0;5;;@Bean @Validated public NonValidatedJsr303Properties properties() {     return new NonValidatedJsr303Properties(). }
false;public;0;6;;@Bean public BasicProperties basicProperties() {     BasicProperties test = new BasicProperties().     test.setName("bar").     return test. }
false;public;0;4;;@Bean public PrefixProperties prefixProperties() {     return new PrefixProperties(). }
false;public;0;5;;@Bean @ConfigurationProperties(prefix = "spam") public PrefixProperties prefixProperties() {     return new PrefixProperties(). }
false;public;0;4;;@Bean public ValidatedImplementationProperties testProperties() {     return new ValidatedImplementationProperties(). }
false;public;1;3;;public void setBar(String bar) {     this.bar = bar. }
false;public;0;3;;public String getBar() {     return this.bar. }
false;public;0;5;;@PostConstruct public void init() {     assertThat(this.bar).isNotNull().     this.initialized = true. }
false;public,static;0;4;;@Bean public static PropertySourcesPlaceholderConfigurer configurer() {     return new PropertySourcesPlaceholderConfigurer(). }
false;public,static;0;8;;@Bean public static PropertySourcesPlaceholderConfigurer configurer() {     PropertySourcesPlaceholderConfigurer placeholderConfigurer = new PropertySourcesPlaceholderConfigurer().     Properties properties = new Properties().     properties.put("com.example.bar", "b").     placeholderConfigurer.setProperties(properties).     return placeholderConfigurer. }
false;public,static;0;4;;@Bean public static PropertySourcesPlaceholderConfigurer configurer1() {     return new PropertySourcesPlaceholderConfigurer(). }
false;public,static;0;4;;@Bean public static PropertySourcesPlaceholderConfigurer configurer2() {     return new PropertySourcesPlaceholderConfigurer(). }
false;public;0;6;;@Bean @Scope("prototype") @ConfigurationProperties("example") public PrototypeBean prototypeBean() {     return new PrototypeBean(). }
false;public;0;3;;public Resource getResource() {     return this.resource. }
false;public;1;3;;public void setResource(Resource resource) {     this.resource = resource. }
false;public;2;8;;@Override public Resource resolve(String location, ResourceLoader resourceLoader) {     if (location.startsWith(PREFIX)) {         String path = location.substring(PREFIX.length()).         return new ClassPathResource(path).     }     return null. }
false;public;0;5;;@Bean @ConfigurationPropertiesBinding public Converter<String, Person> personConverter() {     return new PersonConverter(). }
false;public;0;4;;@Bean public Converter<String, Person> personConverter() {     return new PersonConverter(). }
false;public;0;5;;@Bean @ConfigurationPropertiesBinding public GenericConverter genericPersonConverter() {     return new GenericPersonConverter(). }
false;public;0;4;;@Bean public GenericConverter genericPersonConverter() {     return new GenericPersonConverter(). }
false;public;0;5;;@Bean @ConfigurationProperties("foo") public AGenericClass<String> aBeanToBind() {     return new AGenericClass<>(). }
false;public;0;4;;@Bean(name = ConfigurationPropertiesBindingPostProcessor.VALIDATOR_BEAN_NAME) public CustomPropertiesValidator validator() {     return new CustomPropertiesValidator(). }
false;public;0;4;;@Bean(name = ConfigurationPropertiesBindingPostProcessor.VALIDATOR_BEAN_NAME) public CustomPropertiesValidator validator() {     return new CustomPropertiesValidator(). }
false;public;0;3;;public T getBar() {     return this.bar. }
false;public;1;3;;public void setBar(T bar) {     this.bar = bar. }
false;public;0;3;;public String getOne() {     return this.one. }
false;public;1;3;;public void setOne(String one) {     this.one = one. }
false;public;0;3;;public String getTwo() {     return this.two. }
false;public;1;3;;public void setTwo(String two) {     this.two = two. }
false;public;0;4;;@Override public Object getObject() {     return Object.class. }
false;public;0;4;;@Override public Class<?> getObjectType() {     return null. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public void afterPropertiesSet() {     WithFactoryBeanConfiguration.factoryBeanInitialized = true. }
false;public;1;3;;// No getter - you should be able to bind to a write-only bean public void setName(String name) {     this.name = name. }
false;public;1;3;;public void setArray(int... values) {     this.array = values. }
false;public;0;3;;public int[] getArray() {     return this.array. }
false;public;0;3;;public List<Integer> getList() {     return this.list. }
false;public;1;3;;public void setList(List<Integer> list) {     this.list = list. }
false;public;0;3;;public Duration getDuration() {     return this.duration. }
false;public;1;3;;public void setDuration(Duration duration) {     this.duration = duration. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public Nested getNested() {     return this.nested. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;1;3;;public void setBar(long bar) {     this.bar = bar. }
false;public;0;3;;public long getBar() {     return this.bar. }
false;public;0;3;;public String getDescription() {     return this.description. }
false;public;1;3;;public void setDescription(String description) {     this.description = description. }
false;public;0;3;;public Jsr303Properties getProperties() {     return this.properties. }
false;public;0;3;;public List<Jsr303Properties> getProperties() {     return this.properties. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;1;3;;public void setMymap(Map<String, String> mymap) {     this.mymap = mymap. }
false;public;0;3;;public Map<String, String> getMymap() {     return this.mymap. }
false;public;0;4;;@PostConstruct public void init() {     assertThat(this.properties).isNotNull(). }
false;public;0;3;;public String getName() {     return this.properties.name. }
false;;0;1;;String getFoo().
false;public;0;4;;@Override public String getFoo() {     return this.foo. }
false;public;1;3;;public void setFoo(String foo) {     this.foo = foo. }
false;public;1;3;;public void setValue(String value) {     this.value = value. }
false;public;0;3;;public String getValue() {     return this.value. }
false;public;1;3;;public void setTheValue(FooEnum value) {     this.theValue = value. }
false;public;0;3;;public FooEnum getTheValue() {     return this.theValue. }
false;public;0;3;;public List<FooEnum> getTheValues() {     return this.theValues. }
false;public;1;3;;public void setTheValues(List<FooEnum> theValues) {     this.theValues = theValues. }
false;public;0;3;;public char[] getChars() {     return this.chars. }
false;public;1;3;;public void setChars(char[] chars) {     this.chars = chars. }
false;public;0;3;;public String getFooBar() {     return this.fooBar. }
false;public;1;3;;public void setFooBar(String fooBar) {     this.fooBar = fooBar. }
false;public;0;3;;public String getBarBAZ() {     return this.barBAZ. }
false;public;1;3;;public void setBarBAZ(String barBAZ) {     this.barBAZ = barBAZ. }
false;public;0;3;;public Map<String, String> getMap() {     return this.map. }
false;public;1;3;;public void setMap(Map<String, String> map) {     this.map = map. }
false;public;0;3;;public Map<String, Map<String, String>> getMap() {     return this.map. }
false;public;1;3;;public void setMap(Map<String, Map<String, String>> map) {     this.map = map. }
false;public;0;3;;public Map<String, Map<Integer, Foo>> getMap() {     return this.map. }
false;public;1;3;;public void setMap(Map<String, Map<Integer, Foo>> map) {     this.map = map. }
false;public;1;3;;public void setBar(String bar) {     this.bar = bar. }
false;public;0;3;;public String getBar() {     return this.bar. }
false;public;0;3;;public int getFoo() {     return this.foo. }
false;public;1;3;;public void setFoo(int foo) {     this.foo = foo. }
false;public;0;3;;public Person getPerson() {     return this.person. }
false;public;1;3;;public void setPerson(Person person) {     this.person = person. }
false;public;0;3;;public Map<String, BasicProperties> getProperties() {     return this.properties. }
false;public;1;4;;@Override public boolean supports(Class<?> type) {     return type == ValidatorProperties.class. }
false;public;2;4;;@Override public void validate(Object target, Errors errors) {     ValidationUtils.rejectIfEmpty(errors, "foo", "TEST1"). }
false;public;0;3;;public String getFoo() {     return this.foo. }
false;public;1;3;;public void setFoo(String foo) {     this.foo = foo. }
false;public;0;3;;public String getFoo() {     return this.foo. }
false;public;1;6;;public void setFoo(String foo) {     this.foo = foo.     if (!foo.equals("bar")) {         throw new IllegalArgumentException("Wrong value for foo").     } }
false;public;0;3;;public String getFoo() {     return this.foo. }
false;public;1;3;;public void setFoo(String foo) {     this.foo = foo. }
false;public;0;3;;public List<Class<? extends Throwable>> getList() {     return this.list. }
false;public;1;3;;public void setList(List<Class<? extends Throwable>> list) {     this.list = list. }
false;public;0;3;;public File getFile() {     return this.file. }
false;public;1;3;;public void setFile(File file) {     this.file = file. }
false;public;0;3;;public DataSize getSize() {     return this.size. }
false;public;1;3;;public void setSize(DataSize size) {     this.size = size. }
false;public;0;3;;public DataSize getAnotherSize() {     return this.anotherSize. }
false;public;1;3;;public void setAnotherSize(DataSize anotherSize) {     this.anotherSize = anotherSize. }
false;public;1;4;;@Override public boolean supports(Class<?> type) {     return type == WithCustomValidatorProperties.class. }
false;public;2;4;;@Override public void validate(Object target, Errors errors) {     ValidationUtils.rejectIfEmpty(errors, "foo", "TEST1"). }
false;public;1;5;;@Override public Person convert(String source) {     String[] content = StringUtils.split(source, " ").     return new Person(content[0], content[1]). }
false;public;0;4;;@Override public Set<ConvertiblePair> getConvertibleTypes() {     return Collections.singleton(new ConvertiblePair(String.class, Person.class)). }
false;public;3;6;;@Override public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {     String[] content = StringUtils.split((String) source, " ").     return new Person(content[0], content[1]). }
false;public;1;5;;@Override public void setAsText(String text) throws IllegalArgumentException {     String[] split = text.split(",").     setValue(new Person(split[1], split[0])). }
false;public;0;3;;public String getA() {     return this.a. }
false;public;1;3;;public void setA(String a) {     this.a = a. }
false;public;0;3;;public int getB() {     return this.b. }
false;public;1;3;;public void setB(int b) {     this.b = b. }
