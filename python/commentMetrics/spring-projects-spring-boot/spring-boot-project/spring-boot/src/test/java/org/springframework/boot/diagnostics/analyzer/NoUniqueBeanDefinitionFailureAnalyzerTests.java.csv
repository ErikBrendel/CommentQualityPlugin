commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void failureAnalysisForFieldConsumer() {     FailureAnalysis failureAnalysis = analyzeFailure(createFailure(FieldConsumer.class)).     assertThat(failureAnalysis.getDescription()).startsWith("Field testBean in " + FieldConsumer.class.getName() + " required a single bean, but 6 were found:").     assertFoundBeans(failureAnalysis). }
false;public;0;9;;@Test public void failureAnalysisForMethodConsumer() {     FailureAnalysis failureAnalysis = analyzeFailure(createFailure(MethodConsumer.class)).     assertThat(failureAnalysis.getDescription()).startsWith("Parameter 0 of method consumer in " + MethodConsumer.class.getName() + " required a single bean, but 6 were found:").     assertFoundBeans(failureAnalysis). }
false;public;0;9;;@Test public void failureAnalysisForConstructorConsumer() {     FailureAnalysis failureAnalysis = analyzeFailure(createFailure(ConstructorConsumer.class)).     assertThat(failureAnalysis.getDescription()).startsWith("Parameter 0 of constructor in " + ConstructorConsumer.class.getName() + " required a single bean, but 6 were found:").     assertFoundBeans(failureAnalysis). }
false;public;0;9;;@Test public void failureAnalysisForObjectProviderMethodConsumer() {     FailureAnalysis failureAnalysis = analyzeFailure(createFailure(ObjectProviderMethodConsumer.class)).     assertThat(failureAnalysis.getDescription()).startsWith("Method consumer in " + ObjectProviderMethodConsumer.class.getName() + " required a single bean, but 6 were found:").     assertFoundBeans(failureAnalysis). }
false;public;0;9;;@Test public void failureAnalysisForXmlConsumer() {     FailureAnalysis failureAnalysis = analyzeFailure(createFailure(XmlConsumer.class)).     assertThat(failureAnalysis.getDescription()).startsWith("Parameter 0 of constructor in " + TestBeanConsumer.class.getName() + " required a single bean, but 6 were found:").     assertFoundBeans(failureAnalysis). }
false;public;0;9;;@Test public void failureAnalysisForObjectProviderConstructorConsumer() {     FailureAnalysis failureAnalysis = analyzeFailure(createFailure(ObjectProviderConstructorConsumer.class)).     assertThat(failureAnalysis.getDescription()).startsWith("Constructor in " + ObjectProviderConstructorConsumer.class.getName() + " required a single bean, but 6 were found:").     assertFoundBeans(failureAnalysis). }
false;private;1;15;;private BeanCreationException createFailure(Class<?> consumer) {     try (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext()) {         context.register(DuplicateBeansProducer.class, consumer).         context.setParent(new AnnotationConfigApplicationContext(ParentProducer.class)).         try {             context.refresh().         } catch (BeanCreationException ex) {             this.analyzer.setBeanFactory(context.getBeanFactory()).             return ex.         }         return null.     } }
false;private;1;3;;private FailureAnalysis analyzeFailure(BeanCreationException failure) {     return this.analyzer.analyze(failure). }
false;private;1;14;;private void assertFoundBeans(FailureAnalysis analysis) {     assertThat(analysis.getDescription()).contains("beanOne: defined by method 'beanOne' in " + DuplicateBeansProducer.class.getName()).     assertThat(analysis.getDescription()).contains("beanTwo: defined by method 'beanTwo' in " + DuplicateBeansProducer.class.getName()).     assertThat(analysis.getDescription()).contains("beanThree: defined by method 'beanThree' in " + ParentProducer.class.getName()).     assertThat(analysis.getDescription()).contains("barTestBean").     assertThat(analysis.getDescription()).contains("fooTestBean").     assertThat(analysis.getDescription()).contains("xmlTestBean"). }
false;;0;4;;@Bean TestBean beanOne() {     return new TestBean(). }
false;;0;4;;@Bean TestBean beanTwo() {     return new TestBean(). }
false;;0;4;;@Bean TestBean beanThree() {     return new TestBean(). }
false;;1;4;;@Bean String consumer(TestBean testBean) {     return "foo". }
false;;1;5;;@Bean String consumer(ObjectProvider<TestBean> testBeanProvider) {     testBeanProvider.getIfAvailable().     return "foo". }
