commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     AnsiOutput.setEnabled(AnsiOutput.Enabled.ALWAYS). }
false;public;0;4;;@After public void cleanup() {     AnsiOutput.setEnabled(Enabled.DETECT). }
false;public;0;7;;@Test public void printBannerShouldResetForegroundAndBackground() {     String banner = printBanner("black-and-white.gif").     String expected = AnsiOutput.encode(AnsiColor.DEFAULT) + AnsiOutput.encode(AnsiBackground.DEFAULT).     assertThat(banner).startsWith(expected). }
false;public;0;7;;@Test public void printBannerWhenInvertedShouldResetForegroundAndBackground() {     String banner = printBanner("black-and-white.gif", INVERT_TRUE).     String expected = AnsiOutput.encode(AnsiColor.DEFAULT) + AnsiOutput.encode(AnsiBackground.BLACK).     assertThat(banner).startsWith(expected). }
false;public;0;7;;@Test public void printBannerShouldPrintWhiteAsBrightWhiteHighLuminance() {     String banner = printBanner("black-and-white.gif").     String expected = AnsiOutput.encode(AnsiColor.BRIGHT_WHITE) + HIGH_LUMINANCE_CHARACTER.     assertThat(banner).contains(expected). }
false;public;0;7;;@Test public void printBannerWhenInvertedShouldPrintWhiteAsBrightWhiteLowLuminance() {     String banner = printBanner("black-and-white.gif", INVERT_TRUE).     String expected = AnsiOutput.encode(AnsiColor.BRIGHT_WHITE) + LOW_LUMINANCE_CHARACTER.     assertThat(banner).contains(expected). }
false;public;0;6;;@Test public void printBannerShouldPrintBlackAsBlackLowLuminance() {     String banner = printBanner("black-and-white.gif").     String expected = AnsiOutput.encode(AnsiColor.BLACK) + LOW_LUMINANCE_CHARACTER.     assertThat(banner).contains(expected). }
false;public;0;6;;@Test public void printBannerWhenInvertedShouldPrintBlackAsBlackHighLuminance() {     String banner = printBanner("black-and-white.gif", INVERT_TRUE).     String expected = AnsiOutput.encode(AnsiColor.BLACK) + HIGH_LUMINANCE_CHARACTER.     assertThat(banner).contains(expected). }
false;public;0;9;;@Test public void printBannerWhenShouldPrintAllColors() {     String banner = printBanner("colors.gif").     for (AnsiColor color : AnsiColor.values()) {         if (color != AnsiColor.DEFAULT) {             assertThat(banner).contains(AnsiOutput.encode(color)).         }     } }
false;public;0;7;;@Test public void printBannerShouldRenderGradient() {     AnsiOutput.setEnabled(AnsiOutput.Enabled.NEVER).     String banner = printBanner("gradient.gif", "spring.banner.image.width=10", "spring.banner.image.margin=0").     assertThat(banner).contains("@#8&o:*.  "). }
false;public;0;5;;@Test public void printBannerShouldCalculateHeight() {     String banner = printBanner("large.gif", "spring.banner.image.width=20").     assertThat(getBannerHeight(banner)).isEqualTo(10). }
false;public;0;6;;@Test public void printBannerWhenHasHeightPropertyShouldSetHeight() {     String banner = printBanner("large.gif", "spring.banner.image.width=20", "spring.banner.image.height=30").     assertThat(getBannerHeight(banner)).isEqualTo(30). }
false;public;0;7;;@Test public void printBannerShouldCapWidthAndCalculateHeight() {     AnsiOutput.setEnabled(AnsiOutput.Enabled.NEVER).     String banner = printBanner("large.gif", "spring.banner.image.margin=0").     assertThat(getBannerWidth(banner)).isEqualTo(76).     assertThat(getBannerHeight(banner)).isEqualTo(37). }
false;public;0;9;;@Test public void printBannerShouldPrintMargin() {     AnsiOutput.setEnabled(AnsiOutput.Enabled.NEVER).     String banner = printBanner("large.gif").     String[] lines = banner.split(System.lineSeparator()).     for (int i = 2. i < lines.length - 1. i++) {         assertThat(lines[i]).startsWith("  @").     } }
false;public;0;9;;@Test public void printBannerWhenHasMarginPropertyShouldPrintSizedMargin() {     AnsiOutput.setEnabled(AnsiOutput.Enabled.NEVER).     String banner = printBanner("large.gif", "spring.banner.image.margin=4").     String[] lines = banner.split(System.lineSeparator()).     for (int i = 2. i < lines.length - 1. i++) {         assertThat(lines[i]).startsWith("    @").     } }
false;public;0;10;;@Test public void printBannerWhenAnimatesShouldPrintAllFrames() {     AnsiOutput.setEnabled(AnsiOutput.Enabled.NEVER).     String banner = printBanner("animated.gif").     String[] lines = banner.split(System.lineSeparator()).     int frames = 138.     int linesPerFrame = 36.     assertThat(banner).contains("\r").     assertThat(lines.length).isEqualTo(frames * linesPerFrame - 1). }
false;private;1;3;;private int getBannerHeight(String banner) {     return banner.split(System.lineSeparator()).length - 3. }
false;private;1;7;;private int getBannerWidth(String banner) {     int width = 0.     for (String line : banner.split(System.lineSeparator())) {         width = Math.max(width, line.length()).     }     return width. }
false;private;2;9;;private String printBanner(String path, String... properties) {     ImageBanner banner = new ImageBanner(new ClassPathResource(path, getClass())).     ConfigurableEnvironment environment = new MockEnvironment().     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(environment, properties).     ByteArrayOutputStream out = new ByteArrayOutputStream().     banner.printBanner(environment, getClass(), new PrintStream(out)).     return out.toString(). }
