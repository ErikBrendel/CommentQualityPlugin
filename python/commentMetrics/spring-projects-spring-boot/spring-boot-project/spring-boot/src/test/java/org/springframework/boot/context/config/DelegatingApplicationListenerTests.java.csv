commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void close() {     if (this.context != null) {         this.context.close().     } }
false;public;0;12;;@Test public void orderedInitialize() {     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context, "context.listener.classes=" + MockInitB.class.getName() + "," + MockInitA.class.getName()).     this.listener.onApplicationEvent(new ApplicationEnvironmentPreparedEvent(new SpringApplication(), new String[0], this.context.getEnvironment())).     this.context.getBeanFactory().registerSingleton("testListener", this.listener).     this.context.refresh().     assertThat(this.context.getBeanFactory().getSingleton("a")).isEqualTo("a").     assertThat(this.context.getBeanFactory().getSingleton("b")).isEqualTo("b"). }
false;public;0;5;;@Test public void noInitializers() {     this.listener.onApplicationEvent(new ApplicationEnvironmentPreparedEvent(new SpringApplication(), new String[0], this.context.getEnvironment())). }
false;public;0;7;;@Test public void emptyInitializers() {     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context, "context.listener.classes:").     this.listener.onApplicationEvent(new ApplicationEnvironmentPreparedEvent(new SpringApplication(), new String[0], this.context.getEnvironment())). }
false;public;1;6;;@Override public void onApplicationEvent(ContextRefreshedEvent event) {     ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) event.getApplicationContext().     applicationContext.getBeanFactory().registerSingleton("a", "a"). }
false;public;1;8;;@Override public void onApplicationEvent(ContextRefreshedEvent event) {     ConfigurableApplicationContext applicationContext = (ConfigurableApplicationContext) event.getApplicationContext().     assertThat(applicationContext.getBeanFactory().getSingleton("a")).isEqualTo("a").     applicationContext.getBeanFactory().registerSingleton("b", "b"). }
