commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.binder = new Binder(this.sources). }
false;public;0;15;;@Test public void bindToClassShouldCreateBoundBean() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.int-value", "12").     source.put("foo.long-value", "34").     source.put("foo.string-value", "foo").     source.put("foo.enum-value", "foo-bar").     this.sources.add(source).     ExampleValueBean bean = this.binder.bind("foo", Bindable.of(ExampleValueBean.class)).get().     assertThat(bean.getIntValue()).isEqualTo(12).     assertThat(bean.getLongValue()).isEqualTo(34).     assertThat(bean.getStringValue()).isEqualTo("foo").     assertThat(bean.getEnumValue()).isEqualTo(ExampleEnum.FOO_BAR). }
false;public;0;15;;@Test public void bindToClassWhenHasNoPrefixShouldCreateBoundBean() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("int-value", "12").     source.put("long-value", "34").     source.put("string-value", "foo").     source.put("enum-value", "foo-bar").     this.sources.add(source).     ExampleValueBean bean = this.binder.bind(ConfigurationPropertyName.of(""), Bindable.of(ExampleValueBean.class)).get().     assertThat(bean.getIntValue()).isEqualTo(12).     assertThat(bean.getLongValue()).isEqualTo(34).     assertThat(bean.getStringValue()).isEqualTo("foo").     assertThat(bean.getEnumValue()).isEqualTo(ExampleEnum.FOO_BAR). }
false;public;0;18;;@Test public void bindToInstanceShouldBindToInstance() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.int-value", "12").     source.put("foo.long-value", "34").     source.put("foo.string-value", "foo").     source.put("foo.enum-value", "foo-bar").     this.sources.add(source).     ExampleValueBean bean = new ExampleValueBean().     ExampleValueBean boundBean = this.binder.bind("foo", Bindable.of(ExampleValueBean.class).withExistingValue(bean)).get().     assertThat(boundBean).isSameAs(bean).     assertThat(bean.getIntValue()).isEqualTo(12).     assertThat(bean.getLongValue()).isEqualTo(34).     assertThat(bean.getStringValue()).isEqualTo("foo").     assertThat(bean.getEnumValue()).isEqualTo(ExampleEnum.FOO_BAR). }
false;public;0;11;;@Test public void bindToInstanceWithNoPropertiesShouldReturnUnbound() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     this.sources.add(source).     ExampleDefaultsBean bean = new ExampleDefaultsBean().     BindResult<ExampleDefaultsBean> boundBean = this.binder.bind("foo", Bindable.of(ExampleDefaultsBean.class).withExistingValue(bean)).     assertThat(boundBean.isBound()).isFalse().     assertThat(bean.getFoo()).isEqualTo(123).     assertThat(bean.getBar()).isEqualTo(456). }
false;public;0;10;;@Test public void bindToClassShouldLeaveDefaults() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.bar", "999").     this.sources.add(source).     ExampleDefaultsBean bean = this.binder.bind("foo", Bindable.of(ExampleDefaultsBean.class)).get().     assertThat(bean.getFoo()).isEqualTo(123).     assertThat(bean.getBar()).isEqualTo(999). }
false;public;0;15;;@Test public void bindToExistingInstanceShouldLeaveDefaults() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.bar", "999").     this.sources.add(source).     ExampleDefaultsBean bean = new ExampleDefaultsBean().     bean.setFoo(888).     ExampleDefaultsBean boundBean = this.binder.bind("foo", Bindable.of(ExampleDefaultsBean.class).withExistingValue(bean)).get().     assertThat(boundBean).isSameAs(bean).     assertThat(bean.getFoo()).isEqualTo(888).     assertThat(bean.getBar()).isEqualTo(999). }
false;public;0;11;;@Test public void bindToClassShouldBindToMap() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.map.foo-bar", "1").     source.put("foo.map.bar-baz", "2").     this.sources.add(source).     ExampleMapBean bean = this.binder.bind("foo", Bindable.of(ExampleMapBean.class)).get().     assertThat(bean.getMap()).containsExactly(entry(ExampleEnum.FOO_BAR, 1), entry(ExampleEnum.BAR_BAZ, 2)). }
false;public;0;11;;@Test public void bindToClassShouldBindToList() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.list[0]", "foo-bar").     source.put("foo.list[1]", "bar-baz").     this.sources.add(source).     ExampleListBean bean = this.binder.bind("foo", Bindable.of(ExampleListBean.class)).get().     assertThat(bean.getList()).containsExactly(ExampleEnum.FOO_BAR, ExampleEnum.BAR_BAZ). }
false;public;0;11;;@Test public void bindToListIfUnboundElementsPresentShouldThrowException() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.list[0]", "foo-bar").     source.put("foo.list[2]", "bar-baz").     this.sources.add(source).     assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("foo", Bindable.of(ExampleListBean.class))).withCauseInstanceOf(UnboundConfigurationPropertiesException.class). }
false;public;0;11;;@Test public void bindToClassShouldBindToSet() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.set[0]", "foo-bar").     source.put("foo.set[1]", "bar-baz").     this.sources.add(source).     ExampleSetBean bean = this.binder.bind("foo", Bindable.of(ExampleSetBean.class)).get().     assertThat(bean.getSet()).containsExactly(ExampleEnum.FOO_BAR, ExampleEnum.BAR_BAZ). }
false;public;0;11;;@Test public void bindToClassShouldBindToCollection() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.collection[0]", "foo-bar").     source.put("foo.collection[1]", "bar-baz").     this.sources.add(source).     ExampleCollectionBean bean = this.binder.bind("foo", Bindable.of(ExampleCollectionBean.class)).get().     assertThat(bean.getCollection()).containsExactly(ExampleEnum.FOO_BAR, ExampleEnum.BAR_BAZ). }
false;public;0;10;;@Test public void bindToClassShouldBindToCollectionWithDelimiter() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.collection", "foo-bar|bar-baz").     this.sources.add(source).     ExampleCollectionBeanWithDelimiter bean = this.binder.bind("foo", Bindable.of(ExampleCollectionBeanWithDelimiter.class)).get().     assertThat(bean.getCollection()).containsExactly(ExampleEnum.FOO_BAR, ExampleEnum.BAR_BAZ). }
false;public;0;11;;@Test public void bindToClassWhenHasNoSetterShouldBindToMap() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.map.foo-bar", "1").     source.put("foo.map.bar-baz", "2").     this.sources.add(source).     ExampleMapBeanWithoutSetter bean = this.binder.bind("foo", Bindable.of(ExampleMapBeanWithoutSetter.class)).get().     assertThat(bean.getMap()).containsExactly(entry(ExampleEnum.FOO_BAR, 1), entry(ExampleEnum.BAR_BAZ, 2)). }
false;public;0;11;;@Test public void bindToClassWhenHasNoSetterShouldBindToList() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.list[0]", "foo-bar").     source.put("foo.list[1]", "bar-baz").     this.sources.add(source).     ExampleListBeanWithoutSetter bean = this.binder.bind("foo", Bindable.of(ExampleListBeanWithoutSetter.class)).get().     assertThat(bean.getList()).containsExactly(ExampleEnum.FOO_BAR, ExampleEnum.BAR_BAZ). }
false;public;0;11;;@Test public void bindToClassWhenHasNoSetterShouldBindToSet() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.set[0]", "foo-bar").     source.put("foo.set[1]", "bar-baz").     this.sources.add(source).     ExampleSetBeanWithoutSetter bean = this.binder.bind("foo", Bindable.of(ExampleSetBeanWithoutSetter.class)).get().     assertThat(bean.getSet()).containsExactly(ExampleEnum.FOO_BAR, ExampleEnum.BAR_BAZ). }
false;public;0;11;;@Test public void bindToClassWhenHasNoSetterShouldBindToCollection() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.collection[0]", "foo-bar").     source.put("foo.collection[1]", "bar-baz").     this.sources.add(source).     ExampleCollectionBeanWithoutSetter bean = this.binder.bind("foo", Bindable.of(ExampleCollectionBeanWithoutSetter.class)).get().     assertThat(bean.getCollection()).containsExactly(ExampleEnum.FOO_BAR, ExampleEnum.BAR_BAZ). }
false;public;0;11;;@Test public void bindToClassShouldBindNested() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.value-bean.int-value", "123").     source.put("foo.value-bean.string-value", "foo").     this.sources.add(source).     ExampleNestedBean bean = this.binder.bind("foo", Bindable.of(ExampleNestedBean.class)).get().     assertThat(bean.getValueBean().getIntValue()).isEqualTo(123).     assertThat(bean.getValueBean().getStringValue()).isEqualTo("foo"). }
false;public;0;13;;@Test public void bindToClassWhenIterableShouldBindNestedBasedOnInstance() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.value-bean.int-value", "123").     source.put("foo.value-bean.string-value", "foo").     this.sources.add(source).     ExampleNestedBeanWithoutSetterOrType bean = this.binder.bind("foo", Bindable.of(ExampleNestedBeanWithoutSetterOrType.class)).get().     ExampleValueBean valueBean = (ExampleValueBean) bean.getValueBean().     assertThat(valueBean.getIntValue()).isEqualTo(123).     assertThat(valueBean.getStringValue()).isEqualTo("foo"). }
false;public;0;12;;@Test public void bindToClassWhenNotIterableShouldNotBindNestedBasedOnInstance() {     // If we can't tell that binding will happen, we don't want to randomly invoke     // getters on the class and cause side effects     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.value-bean.int-value", "123").     source.put("foo.value-bean.string-value", "foo").     this.sources.add(source.nonIterable()).     BindResult<ExampleNestedBeanWithoutSetterOrType> bean = this.binder.bind("foo", Bindable.of(ExampleNestedBeanWithoutSetterOrType.class)).     assertThat(bean.isBound()).isFalse(). }
false;public;0;11;;@Test public void bindToClassWhenHasNoSetterShouldBindNested() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.value-bean.int-value", "123").     source.put("foo.value-bean.string-value", "foo").     this.sources.add(source).     ExampleNestedBeanWithoutSetter bean = this.binder.bind("foo", Bindable.of(ExampleNestedBeanWithoutSetter.class)).get().     assertThat(bean.getValueBean().getIntValue()).isEqualTo(123).     assertThat(bean.getValueBean().getStringValue()).isEqualTo("foo"). }
false;public;0;8;;@Test public void bindToClassWhenHasNoSetterAndImmutableShouldThrowException() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.nested.foo", "bar").     this.sources.add(source).     assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("foo", Bindable.of(ExampleImmutableNestedBeanWithoutSetter.class))). }
false;public;0;11;;@Test public void bindToInstanceWhenNoNestedShouldLeaveNestedAsNull() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("faf.value-bean.int-value", "123").     this.sources.add(source).     ExampleNestedBean bean = new ExampleNestedBean().     BindResult<ExampleNestedBean> boundBean = this.binder.bind("foo", Bindable.of(ExampleNestedBean.class).withExistingValue(bean)).     assertThat(boundBean.isBound()).isFalse().     assertThat(bean.getValueBean()).isNull(). }
false;public;0;9;;@Test public void bindToClassWhenPropertiesMissingShouldReturnUnbound() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("faf.int-value", "12").     this.sources.add(source).     BindResult<ExampleValueBean> bean = this.binder.bind("foo", Bindable.of(ExampleValueBean.class)).     assertThat(bean.isBound()).isFalse(). }
false;public;0;9;;@Test public void bindToClassWhenNoDefaultConstructorShouldReturnUnbound() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.value", "bar").     this.sources.add(source).     BindResult<ExampleWithNonDefaultConstructor> bean = this.binder.bind("foo", Bindable.of(ExampleWithNonDefaultConstructor.class)).     assertThat(bean.isBound()).isFalse(). }
false;public;0;13;;@Test public void bindToInstanceWhenNoDefaultConstructorShouldBind() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.value", "bar").     this.sources.add(source).     ExampleWithNonDefaultConstructor bean = new ExampleWithNonDefaultConstructor("faf").     ExampleWithNonDefaultConstructor boundBean = this.binder.bind("foo", Bindable.of(ExampleWithNonDefaultConstructor.class).withExistingValue(bean)).get().     assertThat(boundBean).isSameAs(bean).     assertThat(bean.getValue()).isEqualTo("bar"). }
false;public;0;11;;@Test public void bindToClassShouldBindHierarchy() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.int-value", "123").     source.put("foo.long-value", "456").     this.sources.add(source).     ExampleSubclassBean bean = this.binder.bind("foo", Bindable.of(ExampleSubclassBean.class)).get().     assertThat(bean.getIntValue()).isEqualTo(123).     assertThat(bean.getLongValue()).isEqualTo(456). }
false;public;0;6;;@Test public void bindToClassWhenPropertyCannotBeConvertedShouldThrowException() {     this.sources.add(new MockConfigurationPropertySource("foo.int-value", "foo")).     assertThatExceptionOfType(BindException.class).isThrownBy(() -> this.binder.bind("foo", Bindable.of(ExampleValueBean.class))). }
false;public;0;16;;@Test public void bindToClassWhenPropertyCannotBeConvertedAndIgnoreErrorsShouldNotSetValue() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.int-value", "12").     source.put("foo.long-value", "bang").     source.put("foo.string-value", "foo").     source.put("foo.enum-value", "foo-bar").     this.sources.add(source).     IgnoreErrorsBindHandler handler = new IgnoreErrorsBindHandler().     ExampleValueBean bean = this.binder.bind("foo", Bindable.of(ExampleValueBean.class), handler).get().     assertThat(bean.getIntValue()).isEqualTo(12).     assertThat(bean.getLongValue()).isEqualTo(0).     assertThat(bean.getStringValue()).isEqualTo("foo").     assertThat(bean.getEnumValue()).isEqualTo(ExampleEnum.FOO_BAR). }
false;public;0;9;;@Test public void bindToClassWhenMismatchedGetSetShouldBind() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.value", "123").     this.sources.add(source).     ExampleMismatchBean bean = this.binder.bind("foo", Bindable.of(ExampleMismatchBean.class)).get().     assertThat(bean.getValue()).isEqualTo("123"). }
false;public;0;9;;@Test public void bindToClassShouldNotInvokeExtraMethods() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource("foo.value", "123").     this.sources.add(source.nonIterable()).     ExampleWithThrowingGetters bean = this.binder.bind("foo", Bindable.of(ExampleWithThrowingGetters.class)).get().     assertThat(bean.getValue()).isEqualTo(123). }
false;public;0;9;;@Test public void bindToClassWithSelfReferenceShouldBind() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.value", "123").     this.sources.add(source).     ExampleWithSelfReference bean = this.binder.bind("foo", Bindable.of(ExampleWithSelfReference.class)).get().     assertThat(bean.getValue()).isEqualTo(123). }
false;public;0;11;;@Test public void bindToInstanceWithExistingValueShouldReturnUnbound() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     this.sources.add(source).     ExampleNestedBean existingValue = new ExampleNestedBean().     ExampleValueBean valueBean = new ExampleValueBean().     existingValue.setValueBean(valueBean).     BindResult<ExampleNestedBean> result = this.binder.bind("foo", Bindable.of(ExampleNestedBean.class).withExistingValue(existingValue)).     assertThat(result.isBound()).isFalse(). }
false;public;0;9;;@Test public void bindWithAnnotations() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.date", "2014-04-01").     this.sources.add(source).     ConverterAnnotatedExampleBean bean = this.binder.bind("foo", Bindable.of(ConverterAnnotatedExampleBean.class)).get().     assertThat(bean.getDate().toString()).isEqualTo("2014-04-01"). }
false;public;0;10;;@Test public void bindWhenValueIsConvertedWithPropertyEditorShouldBind() {     // gh-12166     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.value", "java.lang.RuntimeException").     this.sources.add(source).     ExampleWithPropertyEditorType bean = this.binder.bind("foo", Bindable.of(ExampleWithPropertyEditorType.class)).get().     assertThat(bean.getValue()).isEqualTo(RuntimeException.class). }
false;public;0;9;;@Test public void bindToClassShouldIgnoreInvalidAccessors() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.name", "something").     this.sources.add(source).     ExampleWithInvalidAccessors bean = this.binder.bind("foo", Bindable.of(ExampleWithInvalidAccessors.class)).get().     assertThat(bean.getName()).isEqualTo("something"). }
false;public;0;11;;@Test public void bindToClassShouldIgnoreStaticAccessors() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.name", "invalid").     source.put("foo.counter", "42").     this.sources.add(source).     ExampleWithStaticAccessors bean = this.binder.bind("foo", Bindable.of(ExampleWithStaticAccessors.class)).get().     assertThat(ExampleWithStaticAccessors.name).isNull().     assertThat(bean.getCounter()).isEqualTo(42). }
false;public;0;3;;public int getIntValue() {     return this.intValue. }
false;public;1;3;;public void setIntValue(int intValue) {     this.intValue = intValue. }
false;public;0;3;;public long getLongValue() {     return this.longValue. }
false;public;1;3;;public void setLongValue(long longValue) {     this.longValue = longValue. }
false;public;0;3;;public String getStringValue() {     return this.stringValue. }
false;public;1;3;;public void setStringValue(String stringValue) {     this.stringValue = stringValue. }
false;public;0;3;;public ExampleEnum getEnumValue() {     return this.enumValue. }
false;public;1;3;;public void setEnumValue(ExampleEnum enumValue) {     this.enumValue = enumValue. }
false;public;0;3;;public int getFoo() {     return this.foo. }
false;public;1;3;;public void setFoo(int foo) {     this.foo = foo. }
false;public;0;3;;public int getBar() {     return this.bar. }
false;public;1;3;;public void setBar(int bar) {     this.bar = bar. }
false;public;0;3;;public Map<ExampleEnum, Integer> getMap() {     return this.map. }
false;public;1;3;;public void setMap(Map<ExampleEnum, Integer> map) {     this.map = map. }
false;public;0;3;;public List<ExampleEnum> getList() {     return this.list. }
false;public;1;3;;public void setList(List<ExampleEnum> list) {     this.list = list. }
false;public;0;3;;public Set<ExampleEnum> getSet() {     return this.set. }
false;public;1;3;;public void setSet(Set<ExampleEnum> set) {     this.set = set. }
false;public;0;3;;public Collection<ExampleEnum> getCollection() {     return this.collection. }
false;public;1;3;;public void setCollection(Collection<ExampleEnum> collection) {     this.collection = collection. }
false;public;0;3;;public Map<ExampleEnum, Integer> getMap() {     return this.map. }
false;public;0;3;;public List<ExampleEnum> getList() {     return this.list. }
false;public;0;3;;public Set<ExampleEnum> getSet() {     return this.set. }
false;public;0;3;;public Collection<ExampleEnum> getCollection() {     return this.collection. }
false;public;0;3;;public Collection<ExampleEnum> getCollection() {     return this.collection. }
false;public;1;3;;public void setCollection(Collection<ExampleEnum> collection) {     this.collection = collection. }
false;public;0;3;;public ExampleValueBean getValueBean() {     return this.valueBean. }
false;public;1;3;;public void setValueBean(ExampleValueBean valueBean) {     this.valueBean = valueBean. }
false;public;0;3;;public ExampleValueBean getValueBean() {     return this.valueBean. }
false;public;0;3;;public Object getValueBean() {     return this.valueBean. }
false;public;0;3;;public NestedImmutable getNested() {     return this.nested. }
false;public;0;3;;public String getFoo() {     return "foo". }
false;public;0;3;;public String getValue() {     return this.value. }
false;public;1;3;;public void setValue(String value) {     this.value = value. }
false;public;0;3;;public int getIntValue() {     return this.intValue. }
false;public;1;3;;public void setIntValue(int intValue) {     this.intValue = intValue. }
false;public;0;3;;public long getLongValue() {     return this.longValue. }
false;public;1;3;;public void setLongValue(long longValue) {     this.longValue = longValue. }
false;public;0;3;;public String getValue() {     return String.valueOf(this.value). }
false;public;1;3;;public void setValue(int value) {     this.value = value. }
false;public;0;3;;public int getValue() {     return this.value. }
false;public;1;3;;public void setValue(int value) {     this.value = value. }
false;public;0;3;;public List<String> getNames() {     throw new RuntimeException(). }
false;public;0;3;;public ExampleValueBean getNested() {     throw new RuntimeException(). }
false;public;0;3;;public int getValue() {     return this.value. }
false;public;1;3;;public void setValue(int value) {     this.value = value. }
false;public;0;3;;public ExampleWithSelfReference getSelf() {     return this.self. }
false;public;1;3;;public void setSelf(ExampleWithSelfReference self) {     this.self = self. }
false;public;0;3;;public String getName() {     return this.name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String get() {     throw new IllegalArgumentException("should not be invoked"). }
false;public;0;3;;public boolean is() {     throw new IllegalArgumentException("should not be invoked"). }
false;public,static;0;3;;public static String getName() {     return name. }
false;public,static;1;3;;public static void setName(String name) {     ExampleWithStaticAccessors.name = name. }
false;public;0;3;;public int getCounter() {     return this.counter. }
false;public;1;3;;public void setCounter(int counter) {     this.counter = counter. }
false;public;0;3;;public LocalDate getDate() {     return this.date. }
false;public;1;3;;public void setDate(LocalDate date) {     this.date = date. }
false;public;0;3;;public Class<? extends Throwable> getValue() {     return this.value. }
false;public;1;3;;public void setValue(Class<? extends Throwable> value) {     this.value = value. }
