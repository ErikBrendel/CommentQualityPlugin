commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void orderedInitialize() {     StaticApplicationContext context = new StaticApplicationContext().     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, "context.initializer.classes=" + MockInitB.class.getName() + "," + MockInitA.class.getName()).     this.initializer.initialize(context).     assertThat(context.getBeanFactory().getSingleton("a")).isEqualTo("a").     assertThat(context.getBeanFactory().getSingleton("b")).isEqualTo("b"). }
false;public;0;5;;@Test public void noInitializers() {     StaticApplicationContext context = new StaticApplicationContext().     this.initializer.initialize(context). }
false;public;0;7;;@Test public void emptyInitializers() {     StaticApplicationContext context = new StaticApplicationContext().     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, "context.initializer.classes:").     this.initializer.initialize(context). }
false;public;0;8;;@Test public void noSuchInitializerClass() {     StaticApplicationContext context = new StaticApplicationContext().     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, "context.initializer.classes=missing.madeup.class").     assertThatExceptionOfType(ApplicationContextException.class).isThrownBy(() -> this.initializer.initialize(context)). }
false;public;0;8;;@Test public void notAnInitializerClass() {     StaticApplicationContext context = new StaticApplicationContext().     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, "context.initializer.classes=" + Object.class.getName()).     assertThatIllegalArgumentException().isThrownBy(() -> this.initializer.initialize(context)). }
false;public;0;9;;@Test public void genericNotSuitable() {     StaticApplicationContext context = new StaticApplicationContext().     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, "context.initializer.classes=" + NotSuitableInit.class.getName()).     assertThatIllegalArgumentException().isThrownBy(() -> this.initializer.initialize(context)).withMessageContaining("generic parameter"). }
false;public;1;4;;@Override public void initialize(ConfigurableApplicationContext applicationContext) {     applicationContext.getBeanFactory().registerSingleton("a", "a"). }
false;public;1;6;;@Override public void initialize(ConfigurableApplicationContext applicationContext) {     assertThat(applicationContext.getBeanFactory().getSingleton("a")).isEqualTo("a").     applicationContext.getBeanFactory().registerSingleton("b", "b"). }
false;public;1;3;;@Override public void initialize(ConfigurableWebApplicationContext applicationContext) { }
