commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setup() {     this.loggingSystem.cleanUp().     this.logger = ((LoggerContext) StaticLoggerBinder.getSingleton().getLoggerFactory()).getLogger(getClass()).     MockEnvironment environment = new MockEnvironment().     this.initializationContext = new LoggingInitializationContext(environment). }
false;public;0;6;;@Override @After public void clear() {     super.clear().     this.loggingSystem.cleanUp(). }
false;public;0;11;;@Test public void noFile() {     this.loggingSystem.beforeInitialize().     this.logger.info("Hidden").     this.loggingSystem.initialize(this.initializationContext, null, null).     this.logger.info("Hello world").     String output = this.output.toString().trim().     assertThat(output).contains("Hello world").doesNotContain("Hidden").     assertThat(getLineWithText(output, "Hello world")).contains("INFO").     assertThat(new File(tmpDir() + "/spring.log").exists()).isFalse(). }
false;public;0;18;;@Test public void withFile() {     this.loggingSystem.beforeInitialize().     this.logger.info("Hidden").     this.loggingSystem.initialize(this.initializationContext, null, getLogFile(null, tmpDir())).     this.logger.info("Hello world").     String output = this.output.toString().trim().     File file = new File(tmpDir() + "/spring.log").     assertThat(output).contains("Hello world").doesNotContain("Hidden").     assertThat(getLineWithText(output, "Hello world")).contains("INFO").     assertThat(file.exists()).isTrue().     assertThat(getLineWithText(file, "Hello world")).contains("INFO").     assertThat(ReflectionTestUtils.getField(getRollingPolicy(), "maxFileSize").toString()).isEqualTo("10 MB").     assertThat(getRollingPolicy().getMaxHistory()).isEqualTo(CoreConstants.UNBOUND_HISTORY). }
false;public;0;5;;@Test public void testBasicConfigLocation() {     this.loggingSystem.beforeInitialize().     assertThat(getConsoleAppender()).isNotNull(). }
false;public;0;14;;@Test public void testNonDefaultConfigLocation() {     int existingOutputLength = this.output.toString().length().     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, "classpath:logback-nondefault.xml", getLogFile(tmpDir() + "/tmp.log", null)).     this.logger.info("Hello world").     String output = this.output.toString().trim().     assertThat(output.substring(existingOutputLength)).doesNotContain("DEBUG").     assertThat(output).contains("Hello world").contains(tmpDir() + "/tmp.log").     assertThat(output).endsWith("BOOTBOOT").     assertThat(new File(tmpDir() + "/tmp.log").exists()).isFalse(). }
false;public;0;14;;@Test public void testLogbackSpecificSystemProperty() {     System.setProperty("logback.configurationFile", "/foo/my-file.xml").     try {         this.loggingSystem.beforeInitialize().         this.loggingSystem.initialize(this.initializationContext, null, null).         String output = this.output.toString().trim().         assertThat(output).contains("Ignoring 'logback.configurationFile' " + "system property. Please use 'logging.config' instead.").     } finally {         System.clearProperty("logback.configurationFile").     } }
false;public;0;6;;@Test(expected = IllegalStateException.class) public void testNonexistentConfigLocation() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, "classpath:logback-nonexistent.xml", null). }
false;public;0;6;;@Test public void getSupportedLevels() {     assertThat(this.loggingSystem.getSupportedLogLevels()).isEqualTo(EnumSet.of(LogLevel.TRACE, LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR, LogLevel.OFF)). }
false;public;0;10;;@Test public void setLevel() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, null, null).     this.logger.debug("Hello").     this.loggingSystem.setLogLevel("org.springframework.boot", LogLevel.DEBUG).     this.logger.debug("Hello").     assertThat(StringUtils.countOccurrencesOf(this.output.toString(), "Hello")).isEqualTo(1). }
false;public;0;12;;@Test public void setLevelToNull() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, null, null).     this.logger.debug("Hello").     this.loggingSystem.setLogLevel("org.springframework.boot", LogLevel.DEBUG).     this.logger.debug("Hello").     this.loggingSystem.setLogLevel("org.springframework.boot", null).     this.logger.debug("Hello").     assertThat(StringUtils.countOccurrencesOf(this.output.toString(), "Hello")).isEqualTo(1). }
false;public;0;11;;@Test public void getLoggingConfigurations() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, null, null).     this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG).     List<LoggerConfiguration> configurations = this.loggingSystem.getLoggerConfigurations().     assertThat(configurations).isNotEmpty().     assertThat(configurations.get(0).getName()).isEqualTo(LoggingSystem.ROOT_LOGGER_NAME). }
false;public;0;10;;@Test public void getLoggingConfiguration() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, null, null).     this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG).     LoggerConfiguration configuration = this.loggingSystem.getLoggerConfiguration(getClass().getName()).     assertThat(configuration).isEqualTo(new LoggerConfiguration(getClass().getName(), LogLevel.DEBUG, LogLevel.DEBUG)). }
false;public;0;12;;@Test public void getLoggingConfigurationForALL() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, null, null).     Logger logger = (Logger) StaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(getClass().getName()).     logger.setLevel(Level.ALL).     LoggerConfiguration configuration = this.loggingSystem.getLoggerConfiguration(getClass().getName()).     assertThat(configuration).isEqualTo(new LoggerConfiguration(getClass().getName(), LogLevel.TRACE, LogLevel.TRACE)). }
false;public;0;9;;@Test public void systemLevelTraceShouldReturnNativeLevelTraceNotAll() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, null, null).     this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.TRACE).     Logger logger = (Logger) StaticLoggerBinder.getSingleton().getLoggerFactory().getLogger(getClass().getName()).     assertThat(logger.getLevel()).isEqualTo(Level.TRACE). }
false;public;0;10;;@Test public void loggingThatUsesJulIsCaptured() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, null, null).     java.util.logging.Logger julLogger = java.util.logging.Logger.getLogger(getClass().getName()).     julLogger.info("Hello world").     String output = this.output.toString().trim().     assertThat(output).contains("Hello world"). }
false;public;0;11;;@Test public void loggingLevelIsPropagatedToJul() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, null, null).     this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG).     java.util.logging.Logger julLogger = java.util.logging.Logger.getLogger(getClass().getName()).     julLogger.fine("Hello debug world").     String output = this.output.toString().trim().     assertThat(output).contains("Hello debug world"). }
false;public;0;8;;@Test public void bridgeHandlerLifecycle() {     assertThat(bridgeHandlerInstalled()).isFalse().     this.loggingSystem.beforeInitialize().     assertThat(bridgeHandlerInstalled()).isTrue().     this.loggingSystem.cleanUp().     assertThat(bridgeHandlerInstalled()).isFalse(). }
false;public;0;6;;@Test public void standardConfigLocations() {     String[] locations = this.loggingSystem.getStandardConfigLocations().     assertThat(locations).containsExactly("logback-test.groovy", "logback-test.xml", "logback.groovy", "logback.xml"). }
false;public;0;6;;@Test public void springConfigLocations() {     String[] locations = getSpringConfigLocations(this.loggingSystem).     assertThat(locations).containsExactly("logback-test-spring.groovy", "logback-test-spring.xml", "logback-spring.groovy", "logback-spring.xml"). }
false;private;0;10;;private boolean bridgeHandlerInstalled() {     java.util.logging.Logger rootLogger = LogManager.getLogManager().getLogger("").     Handler[] handlers = rootLogger.getHandlers().     for (Handler handler : handlers) {         if (handler instanceof SLF4JBridgeHandler) {             return true.         }     }     return false. }
false;public;0;11;;@Test public void testConsolePatternProperty() {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("logging.pattern.console", "%logger %msg").     LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment).     this.loggingSystem.initialize(loggingInitializationContext, null, null).     this.logger.info("Hello world").     String output = this.output.toString().trim().     assertThat(getLineWithText(output, "Hello world")).doesNotContain("INFO"). }
false;public;0;11;;@Test public void testLevelPatternProperty() {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("logging.pattern.level", "X%clr(%p)X").     LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment).     this.loggingSystem.initialize(loggingInitializationContext, null, null).     this.logger.info("Hello world").     String output = this.output.toString().trim().     assertThat(getLineWithText(output, "Hello world")).contains("XINFOX"). }
false;public;0;14;;@Test public void testFilePatternProperty() {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("logging.pattern.file", "%logger %msg").     LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment).     File file = new File(tmpDir(), "logback-test.log").     LogFile logFile = getLogFile(file.getPath(), null).     this.loggingSystem.initialize(loggingInitializationContext, null, logFile).     this.logger.info("Hello world").     String output = this.output.toString().trim().     assertThat(getLineWithText(output, "Hello world")).contains("INFO").     assertThat(getLineWithText(file, "Hello world")).doesNotContain("INFO"). }
false;public;0;13;;@Test public void testCleanHistoryOnStartProperty() {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("logging.file.clean-history-on-start", "true").     LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment).     File file = new File(tmpDir(), "logback-test.log").     LogFile logFile = getLogFile(file.getPath(), null).     this.loggingSystem.initialize(loggingInitializationContext, null, logFile).     this.logger.info("Hello world").     assertThat(getLineWithText(file, "Hello world")).contains("INFO").     assertThat(getRollingPolicy().isCleanHistoryOnStart()).isTrue(). }
false;public;0;14;;@Test public void testCleanHistoryOnStartPropertyWithXmlConfiguration() {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("logging.file.clean-history-on-start", "true").     LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment).     File file = new File(tmpDir(), "logback-test.log").     LogFile logFile = getLogFile(file.getPath(), null).     this.loggingSystem.initialize(loggingInitializationContext, "classpath:logback-include-base.xml", logFile).     this.logger.info("Hello world").     assertThat(getLineWithText(file, "Hello world")).contains("INFO").     assertThat(getRollingPolicy().isCleanHistoryOnStart()).isTrue(). }
false;public;0;4;;@Test public void testMaxFileSizePropertyWithLogbackFileSize() {     testMaxFileSizeProperty("100 MB", "100 MB"). }
false;public;0;4;;@Test public void testMaxFileSizePropertyWithDataSize() {     testMaxFileSizeProperty("15MB", "15 MB"). }
false;public;0;4;;@Test public void testMaxFileSizePropertyWithBytesValue() {     testMaxFileSizeProperty(String.valueOf(10 * 1024 * 1024), "10 MB"). }
false;private;2;13;;private void testMaxFileSizeProperty(String sizeValue, String expectedFileSize) {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("logging.file.max-size", sizeValue).     LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment).     File file = new File(tmpDir(), "logback-test.log").     LogFile logFile = getLogFile(file.getPath(), null).     this.loggingSystem.initialize(loggingInitializationContext, null, logFile).     this.logger.info("Hello world").     assertThat(getLineWithText(file, "Hello world")).contains("INFO").     assertThat(ReflectionTestUtils.getField(getRollingPolicy(), "maxFileSize").toString()).isEqualTo(expectedFileSize). }
false;public;0;15;;@Test public void testMaxFileSizePropertyWithXmlConfiguration() {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("logging.file.max-size", "100MB").     LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment).     File file = new File(tmpDir(), "logback-test.log").     LogFile logFile = getLogFile(file.getPath(), null).     this.loggingSystem.initialize(loggingInitializationContext, "classpath:logback-include-base.xml", logFile).     this.logger.info("Hello world").     assertThat(getLineWithText(file, "Hello world")).contains("INFO").     assertThat(ReflectionTestUtils.getField(getRollingPolicy(), "maxFileSize").toString()).isEqualTo("100 MB"). }
false;public;0;13;;@Test public void testMaxHistoryProperty() {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("logging.file.max-history", "30").     LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment).     File file = new File(tmpDir(), "logback-test.log").     LogFile logFile = getLogFile(file.getPath(), null).     this.loggingSystem.initialize(loggingInitializationContext, null, logFile).     this.logger.info("Hello world").     assertThat(getLineWithText(file, "Hello world")).contains("INFO").     assertThat(getRollingPolicy().getMaxHistory()).isEqualTo(30). }
false;public;0;14;;@Test public void testMaxHistoryPropertyWithXmlConfiguration() throws Exception {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("logging.file.max-history", "30").     LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment).     File file = new File(tmpDir(), "logback-test.log").     LogFile logFile = getLogFile(file.getPath(), null).     this.loggingSystem.initialize(loggingInitializationContext, "classpath:logback-include-base.xml", logFile).     this.logger.info("Hello world").     assertThat(getLineWithText(file, "Hello world")).contains("INFO").     assertThat(getRollingPolicy().getMaxHistory()).isEqualTo(30). }
false;public;0;4;;@Test public void testTotalSizeCapPropertyWithLogbackFileSize() {     testTotalSizeCapProperty("101 MB", "101 MB"). }
false;public;0;4;;@Test public void testTotalSizeCapPropertyWithDataSize() {     testTotalSizeCapProperty("10MB", "10 MB"). }
false;public;0;4;;@Test public void testTotalSizeCapPropertyWithBytesValue() {     testTotalSizeCapProperty(String.valueOf(10 * 1024 * 1024), "10 MB"). }
false;private;2;13;;private void testTotalSizeCapProperty(String sizeValue, String expectFileSize) {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("logging.file.total-size-cap", sizeValue).     LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment).     File file = new File(tmpDir(), "logback-test.log").     LogFile logFile = getLogFile(file.getPath(), null).     this.loggingSystem.initialize(loggingInitializationContext, null, logFile).     this.logger.info("Hello world").     assertThat(getLineWithText(file, "Hello world")).contains("INFO").     assertThat(ReflectionTestUtils.getField(getRollingPolicy(), "totalSizeCap").toString()).isEqualTo(expectFileSize). }
false;public;0;16;;@Test public void testTotalSizeCapPropertyWithXmlConfiguration() {     String expectedSize = "101 MB".     MockEnvironment environment = new MockEnvironment().     environment.setProperty("logging.file.total-size-cap", expectedSize).     LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment).     File file = new File(tmpDir(), "logback-test.log").     LogFile logFile = getLogFile(file.getPath(), null).     this.loggingSystem.initialize(loggingInitializationContext, "classpath:logback-include-base.xml", logFile).     this.logger.info("Hello world").     assertThat(getLineWithText(file, "Hello world")).contains("INFO").     assertThat(ReflectionTestUtils.getField(getRollingPolicy(), "totalSizeCap").toString()).isEqualTo(expectedSize). }
false;public;0;11;;@Test public void exceptionsIncludeClassPackaging() {     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, null, getLogFile(null, tmpDir())).     Matcher<String> expectedOutput = containsString("[junit-").     this.output.expect(expectedOutput).     this.logger.warn("Expected exception", new RuntimeException("Expected")).     String fileContents = contentOf(new File(tmpDir() + "/spring.log")).     assertThat(fileContents).is(Matched.by(expectedOutput)). }
false;public;0;21;;@Test public void customExceptionConversionWord() {     System.setProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD, "%ex").     try {         this.loggingSystem.beforeInitialize().         this.logger.info("Hidden").         this.loggingSystem.initialize(this.initializationContext, null, getLogFile(null, tmpDir())).         Matcher<String> expectedOutput = Matchers.allOf(containsString("java.lang.RuntimeException: Expected"), not(containsString("Wrapped by:"))).         this.output.expect(expectedOutput).         this.logger.warn("Expected exception", new RuntimeException("Expected", new RuntimeException("Cause"))).         String fileContents = contentOf(new File(tmpDir() + "/spring.log")).         assertThat(fileContents).is(Matched.by(expectedOutput)).     } finally {         System.clearProperty(LoggingSystemProperties.EXCEPTION_CONVERSION_WORD).     } }
false;public;0;11;;@Test public void initializeShouldSetSystemProperty() {     // gh-5491     this.loggingSystem.beforeInitialize().     this.logger.info("Hidden").     LogFile logFile = getLogFile(tmpDir() + "/example.log", null, false).     this.loggingSystem.initialize(this.initializationContext, "classpath:logback-nondefault.xml", logFile).     assertThat(System.getProperty(LoggingSystemProperties.LOG_FILE)).endsWith("example.log"). }
false;public;0;17;;@Test public void initializationIsOnlyPerformedOnceUntilCleanedUp() {     LoggerContext loggerContext = (LoggerContext) StaticLoggerBinder.getSingleton().getLoggerFactory().     LoggerContextListener listener = mock(LoggerContextListener.class).     loggerContext.addListener(listener).     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, null, null).     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, null, null).     verify(listener, times(1)).onReset(loggerContext).     this.loggingSystem.cleanUp().     loggerContext.addListener(listener).     this.loggingSystem.beforeInitialize().     this.loggingSystem.initialize(this.initializationContext, null, null).     verify(listener, times(2)).onReset(loggerContext). }
false;public;0;13;;@Test public void testDateformatPatternProperty() {     MockEnvironment environment = new MockEnvironment().     environment.setProperty("logging.pattern.dateformat", "yyyy-MM-dd'T'hh:mm:ss.SSSZ").     LoggingInitializationContext loggingInitializationContext = new LoggingInitializationContext(environment).     this.loggingSystem.initialize(loggingInitializationContext, null, null).     this.logger.info("Hello world").     String output = this.output.toString().trim().     assertThat(getLineWithText(output, "Hello world")).containsPattern("\\d{4}-\\d{2}\\-\\d{2}T\\d{2}:\\d{2}:\\d{2}"). }
false;private,static;0;5;;private static Logger getRootLogger() {     ILoggerFactory factory = StaticLoggerBinder.getSingleton().getLoggerFactory().     LoggerContext context = (LoggerContext) factory.     return context.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME). }
false;private,static;0;3;;private static ConsoleAppender<?> getConsoleAppender() {     return (ConsoleAppender<?>) getRootLogger().getAppender("CONSOLE"). }
false;private,static;0;3;;private static RollingFileAppender<?> getFileAppender() {     return (RollingFileAppender<?>) getRootLogger().getAppender("FILE"). }
false;private,static;0;3;;private static SizeAndTimeBasedRollingPolicy<?> getRollingPolicy() {     return (SizeAndTimeBasedRollingPolicy<?>) getFileAppender().getRollingPolicy(). }
false;private;2;3;;private String getLineWithText(File file, String outputSearch) {     return getLineWithText(contentOf(file), outputSearch). }
false;private;2;9;;private String getLineWithText(String output, String outputSearch) {     String[] lines = output.split("\\r?\\n").     for (String line : lines) {         if (line.contains(outputSearch)) {             return line.         }     }     return null. }
