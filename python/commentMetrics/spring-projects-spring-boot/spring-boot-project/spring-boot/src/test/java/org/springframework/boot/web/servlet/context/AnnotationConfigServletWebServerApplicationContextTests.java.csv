commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void createFromScan() {     this.context = new AnnotationConfigServletWebServerApplicationContext(ExampleServletWebServerApplicationConfiguration.class.getPackage().getName()).     verifyContext(). }
false;public;0;7;;@Test public void sessionScopeAvailable() {     this.context = new AnnotationConfigServletWebServerApplicationContext(ExampleServletWebServerApplicationConfiguration.class, SessionScopedComponent.class).     verifyContext(). }
false;public;0;8;;@Test public void sessionScopeAvailableToServlet() {     this.context = new AnnotationConfigServletWebServerApplicationContext(ExampleServletWebServerApplicationConfiguration.class, ExampleServletWithAutowired.class, SessionScopedComponent.class).     Servlet servlet = this.context.getBean(ExampleServletWithAutowired.class).     assertThat(servlet).isNotNull(). }
false;public;0;6;;@Test public void createFromConfigClass() {     this.context = new AnnotationConfigServletWebServerApplicationContext(ExampleServletWebServerApplicationConfiguration.class).     verifyContext(). }
false;public;0;7;;@Test public void registerAndRefresh() {     this.context = new AnnotationConfigServletWebServerApplicationContext().     this.context.register(ExampleServletWebServerApplicationConfiguration.class).     this.context.refresh().     verifyContext(). }
false;public;0;9;;@Test public void multipleRegistersAndRefresh() {     this.context = new AnnotationConfigServletWebServerApplicationContext().     this.context.register(WebServerConfiguration.class).     this.context.register(ServletContextAwareConfiguration.class).     this.context.refresh().     assertThat(this.context.getBeansOfType(Servlet.class)).hasSize(1).     assertThat(this.context.getBeansOfType(ServletWebServerFactory.class)).hasSize(1). }
false;public;0;8;;@Test public void scanAndRefresh() {     this.context = new AnnotationConfigServletWebServerApplicationContext().     this.context.scan(ExampleServletWebServerApplicationConfiguration.class.getPackage().getName()).     this.context.refresh().     verifyContext(). }
false;public;0;10;;@Test public void createAndInitializeCyclic() {     this.context = new AnnotationConfigServletWebServerApplicationContext(ServletContextAwareEmbeddedConfiguration.class).     verifyContext().     // You can't initialize the application context and inject the servlet context     // because of a cycle - we'd like this to be not null but it never will be     assertThat(this.context.getBean(ServletContextAwareEmbeddedConfiguration.class).getServletContext()).isNull(). }
false;public;0;13;;@Test public void createAndInitializeWithParent() {     AnnotationConfigServletWebServerApplicationContext parent = new AnnotationConfigServletWebServerApplicationContext(WebServerConfiguration.class).     this.context = new AnnotationConfigServletWebServerApplicationContext().     this.context.register(WebServerConfiguration.class, ServletContextAwareConfiguration.class).     this.context.setParent(parent).     this.context.refresh().     verifyContext().     assertThat(this.context.getBean(ServletContextAwareConfiguration.class).getServletContext()).isNotNull(). }
false;private;0;6;;private void verifyContext() {     MockServletWebServerFactory factory = this.context.getBean(MockServletWebServerFactory.class).     Servlet servlet = this.context.getBean(Servlet.class).     verify(factory.getServletContext()).addServlet("servlet", servlet). }
false;public;2;4;;@Override public void service(ServletRequest req, ServletResponse res) {     assertThat(this.component).isNotNull(). }
false;public;0;4;;@Bean public ServletWebServerFactory webServerFactory() {     return new MockServletWebServerFactory(). }
false;public;0;4;;@Bean public Servlet servlet() {     return new MockServlet(). }
false;public;1;4;;@Override public void setServletContext(ServletContext servletContext) {     this.servletContext = servletContext. }
false;public;0;3;;public ServletContext getServletContext() {     return this.servletContext. }
false;public;0;4;;@Bean public ServletWebServerFactory webServerFactory() {     return new MockServletWebServerFactory(). }
false;public;0;4;;@Bean public Servlet servlet() {     return new MockServlet(). }
false;public;1;4;;@Override public void setServletContext(ServletContext servletContext) {     this.servletContext = servletContext. }
false;public;0;3;;public ServletContext getServletContext() {     return this.servletContext. }
