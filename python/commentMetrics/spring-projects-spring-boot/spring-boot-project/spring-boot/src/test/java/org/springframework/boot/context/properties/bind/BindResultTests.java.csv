commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     MockitoAnnotations.initMocks(this). }
false;public;0;5;;@Test public void getWhenHasValueShouldReturnValue() {     BindResult<String> result = BindResult.of("foo").     assertThat(result.get()).isEqualTo("foo"). }
false;public;0;6;;@Test public void getWhenHasNoValueShouldThrowException() {     BindResult<String> result = BindResult.of(null).     assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(result::get).withMessageContaining("No value bound"). }
false;public;0;5;;@Test public void isBoundWhenHasValueShouldReturnTrue() {     BindResult<String> result = BindResult.of("foo").     assertThat(result.isBound()).isTrue(). }
false;public;0;5;;@Test public void isBoundWhenHasNoValueShouldFalse() {     BindResult<String> result = BindResult.of(null).     assertThat(result.isBound()).isFalse(). }
false;public;0;6;;@Test public void ifBoundWhenConsumerIsNullShouldThrowException() {     BindResult<String> result = BindResult.of("foo").     assertThatIllegalArgumentException().isThrownBy(() -> result.ifBound(null)).withMessageContaining("Consumer must not be null"). }
false;public;0;6;;@Test public void ifBoundWhenHasValueShouldCallConsumer() {     BindResult<String> result = BindResult.of("foo").     result.ifBound(this.consumer).     verify(this.consumer).accept("foo"). }
false;public;0;6;;@Test public void ifBoundWhenHasNoValueShouldNotCallConsumer() {     BindResult<String> result = BindResult.of(null).     result.ifBound(this.consumer).     verifyZeroInteractions(this.consumer). }
false;public;0;6;;@Test public void mapWhenMapperIsNullShouldThrowException() {     BindResult<String> result = BindResult.of("foo").     assertThatIllegalArgumentException().isThrownBy(() -> result.map(null)).withMessageContaining("Mapper must not be null"). }
false;public;0;6;;@Test public void mapWhenHasValueShouldCallMapper() {     BindResult<String> result = BindResult.of("foo").     given(this.mapper.apply("foo")).willReturn("bar").     assertThat(result.map(this.mapper).get()).isEqualTo("bar"). }
false;public;0;6;;@Test public void mapWhenHasNoValueShouldNotCallMapper() {     BindResult<String> result = BindResult.of(null).     result.map(this.mapper).     verifyZeroInteractions(this.mapper). }
false;public;0;5;;@Test public void orElseWhenHasValueShouldReturnValue() {     BindResult<String> result = BindResult.of("foo").     assertThat(result.orElse("bar")).isEqualTo("foo"). }
false;public;0;5;;@Test public void orElseWhenHasValueNoShouldReturnOther() {     BindResult<String> result = BindResult.of(null).     assertThat(result.orElse("bar")).isEqualTo("bar"). }
false;public;0;6;;@Test public void orElseGetWhenHasValueShouldReturnValue() {     BindResult<String> result = BindResult.of("foo").     assertThat(result.orElseGet(this.supplier)).isEqualTo("foo").     verifyZeroInteractions(this.supplier). }
false;public;0;6;;@Test public void orElseGetWhenHasValueNoShouldReturnOther() {     BindResult<String> result = BindResult.of(null).     given(this.supplier.get()).willReturn("bar").     assertThat(result.orElseGet(this.supplier)).isEqualTo("bar"). }
false;public;0;6;;@Test public void orElseCreateWhenTypeIsNullShouldThrowException() {     BindResult<String> result = BindResult.of("foo").     assertThatIllegalArgumentException().isThrownBy(() -> result.orElseCreate(null)).withMessageContaining("Type must not be null"). }
false;public;0;5;;@Test public void orElseCreateWhenHasValueShouldReturnValue() {     BindResult<ExampleBean> result = BindResult.of(new ExampleBean("foo")).     assertThat(result.orElseCreate(ExampleBean.class).getValue()).isEqualTo("foo"). }
false;public;0;5;;@Test public void orElseCreateWhenHasValueNoShouldReturnCreatedValue() {     BindResult<ExampleBean> result = BindResult.of(null).     assertThat(result.orElseCreate(ExampleBean.class).getValue()).isEqualTo("new"). }
false;public;0;5;;@Test public void orElseThrowWhenHasValueShouldReturnValue() throws Exception {     BindResult<String> result = BindResult.of("foo").     assertThat(result.orElseThrow(IOException::new)).isEqualTo("foo"). }
false;public;0;5;;@Test public void orElseThrowWhenHasNoValueShouldThrowException() throws Exception {     BindResult<String> result = BindResult.of(null).     assertThatIOException().isThrownBy(() -> result.orElseThrow(IOException::new)). }
false;public;0;10;;@Test public void hashCodeAndEquals() {     BindResult<?> result1 = BindResult.of("foo").     BindResult<?> result2 = BindResult.of("foo").     BindResult<?> result3 = BindResult.of("bar").     BindResult<?> result4 = BindResult.of(null).     assertThat(result1.hashCode()).isEqualTo(result2.hashCode()).     assertThat(result1).isEqualTo(result1).isEqualTo(result2).isNotEqualTo(result3).isNotEqualTo(result4). }
false;public;0;6;;@Test public void ofWhenHasValueShouldReturnBoundResultOfValue() {     BindResult<Object> result = BindResult.of("foo").     assertThat(result.isBound()).isTrue().     assertThat(result.get()).isEqualTo("foo"). }
false;public;0;6;;@Test public void ofWhenValueIsNullShouldReturnUnbound() {     BindResult<Object> result = BindResult.of(null).     assertThat(result.isBound()).isFalse().     assertThat(result).isSameAs(BindResult.of(null)). }
false;public;0;3;;public String getValue() {     return this.value. }
