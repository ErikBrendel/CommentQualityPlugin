commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void getConfigurationPropertyShouldConsiderAliases() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.bar", "bing").     source.put("foo.baz", "biff").     ConfigurationPropertySource aliased = source.nonIterable().withAliases(new ConfigurationPropertyNameAliases("foo.bar", "foo.bar1")).     assertThat(getValue(aliased, "foo.bar")).isEqualTo("bing").     assertThat(getValue(aliased, "foo.bar1")).isEqualTo("bing"). }
false;public;0;9;;@Test public void getConfigurationPropertyWhenNotAliasesShouldReturnValue() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.bar", "bing").     source.put("foo.baz", "biff").     ConfigurationPropertySource aliased = source.nonIterable().withAliases(new ConfigurationPropertyNameAliases("foo.bar", "foo.bar1")).     assertThat(getValue(aliased, "foo.baz")).isEqualTo("biff"). }
false;public;0;12;;@Test public void containsDescendantOfWhenSourceReturnsUnknownShouldReturnUnknown() {     ConfigurationPropertyName name = ConfigurationPropertyName.of("foo").     ConfigurationPropertySource source = mock(ConfigurationPropertySource.class, Answers.CALLS_REAL_METHODS).     given(source.containsDescendantOf(name)).willReturn(ConfigurationPropertyState.UNKNOWN).     ConfigurationPropertySource aliased = source.withAliases(new ConfigurationPropertyNameAliases("foo.bar", "foo.bar1")).     assertThat(aliased.containsDescendantOf(name)).isEqualTo(ConfigurationPropertyState.UNKNOWN). }
false;public;0;14;;@Test public void containsDescendantOfWhenSourceReturnsPresentShouldReturnPresent() {     ConfigurationPropertyName name = ConfigurationPropertyName.of("foo").     ConfigurationPropertySource source = mock(ConfigurationPropertySource.class, Answers.CALLS_REAL_METHODS).     given(source.containsDescendantOf(name)).willReturn(ConfigurationPropertyState.PRESENT).     given(source.containsDescendantOf(ConfigurationPropertyName.of("bar"))).willReturn(ConfigurationPropertyState.UNKNOWN).     ConfigurationPropertySource aliased = source.withAliases(new ConfigurationPropertyNameAliases("foo.bar", "foo.bar1")).     assertThat(aliased.containsDescendantOf(name)).isEqualTo(ConfigurationPropertyState.PRESENT). }
false;public;0;14;;@Test public void containsDescendantOfWhenAllAreAbsentShouldReturnAbsent() {     ConfigurationPropertyName name = ConfigurationPropertyName.of("foo").     ConfigurationPropertySource source = mock(ConfigurationPropertySource.class, Answers.CALLS_REAL_METHODS).     given(source.containsDescendantOf(name)).willReturn(ConfigurationPropertyState.ABSENT).     given(source.containsDescendantOf(ConfigurationPropertyName.of("bar"))).willReturn(ConfigurationPropertyState.ABSENT).     ConfigurationPropertySource aliased = source.withAliases(new ConfigurationPropertyNameAliases("foo", "bar")).     assertThat(aliased.containsDescendantOf(name)).isEqualTo(ConfigurationPropertyState.ABSENT). }
false;public;0;14;;@Test public void containsDescendantOfWhenAnyIsPresentShouldReturnPresent() {     ConfigurationPropertyName name = ConfigurationPropertyName.of("foo").     ConfigurationPropertySource source = mock(ConfigurationPropertySource.class, Answers.CALLS_REAL_METHODS).     given(source.containsDescendantOf(name)).willReturn(ConfigurationPropertyState.ABSENT).     given(source.containsDescendantOf(ConfigurationPropertyName.of("bar"))).willReturn(ConfigurationPropertyState.PRESENT).     ConfigurationPropertySource aliased = source.withAliases(new ConfigurationPropertyNameAliases("foo", "bar")).     assertThat(aliased.containsDescendantOf(name)).isEqualTo(ConfigurationPropertyState.PRESENT). }
false;public;0;9;;@Test public void containsDescendantOfWhenPresentInAliasShouldReturnPresent() {     ConfigurationPropertySource source = new MapConfigurationPropertySource(Collections.singletonMap("foo.bar", "foobar")).     ConfigurationPropertySource aliased = source.withAliases(new ConfigurationPropertyNameAliases("foo.bar", "baz.foo")).     assertThat(aliased.containsDescendantOf(ConfigurationPropertyName.of("baz"))).isEqualTo(ConfigurationPropertyState.PRESENT). }
false;private;2;5;;private Object getValue(ConfigurationPropertySource source, String name) {     ConfigurationProperty property = source.getConfigurationProperty(ConfigurationPropertyName.of(name)).     return (property != null) ? property.getValue() : null. }
