commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@SuppressWarnings("unchecked") @Test public void defaultServletConfiguration() throws IOException {     ScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(new SimpleMetadataReaderFactory().getMetadataReader(DefaultConfigurationServlet.class.getName())).     this.handler.handle(scanned, this.registry).     BeanDefinition servletRegistrationBean = this.registry.getBeanDefinition(DefaultConfigurationServlet.class.getName()).     MutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues().     assertThat(propertyValues.get("asyncSupported")).isEqualTo(false).     assertThat(((Map<String, String>) propertyValues.get("initParameters"))).isEmpty().     assertThat((Integer) propertyValues.get("loadOnStartup")).isEqualTo(-1).     assertThat(propertyValues.get("name")).isEqualTo(DefaultConfigurationServlet.class.getName()).     assertThat((String[]) propertyValues.get("urlMappings")).isEmpty().     assertThat(propertyValues.get("servlet")).isEqualTo(scanned). }
false;public;0;12;;@Test public void servletWithCustomName() throws IOException {     ScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(new SimpleMetadataReaderFactory().getMetadataReader(CustomNameServlet.class.getName())).     this.handler.handle(scanned, this.registry).     BeanDefinition servletRegistrationBean = this.registry.getBeanDefinition("custom").     MutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues().     assertThat(propertyValues.get("name")).isEqualTo("custom"). }
false;public;0;8;;@Test public void asyncSupported() throws IOException {     BeanDefinition servletRegistrationBean = getBeanDefinition(AsyncSupportedServlet.class).     MutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues().     assertThat(propertyValues.get("asyncSupported")).isEqualTo(true). }
false;public;0;10;;@SuppressWarnings("unchecked") @Test public void initParameters() throws IOException {     BeanDefinition servletRegistrationBean = getBeanDefinition(InitParametersServlet.class).     MutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues().     assertThat((Map<String, String>) propertyValues.get("initParameters")).containsEntry("a", "alpha").containsEntry("b", "bravo"). }
false;public;0;9;;@Test public void urlMappings() throws IOException {     BeanDefinition servletRegistrationBean = getBeanDefinition(UrlPatternsServlet.class).     MutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues().     assertThat((String[]) propertyValues.get("urlMappings")).contains("alpha", "bravo"). }
false;public;0;9;;@Test public void urlMappingsFromValue() throws IOException {     BeanDefinition servletRegistrationBean = getBeanDefinition(UrlPatternsFromValueServlet.class).     MutablePropertyValues propertyValues = servletRegistrationBean.getPropertyValues().     assertThat((String[]) propertyValues.get("urlMappings")).contains("alpha", "bravo"). }
false;public;0;8;;@Test public void urlPatternsDeclaredTwice() throws IOException {     assertThatIllegalStateException().isThrownBy(() -> getBeanDefinition(UrlPatternsDeclaredTwiceServlet.class)).withMessageContaining("The urlPatterns and value attributes are mutually exclusive."). }
false;private;1;7;;private BeanDefinition getBeanDefinition(Class<?> filterClass) throws IOException {     ScannedGenericBeanDefinition scanned = new ScannedGenericBeanDefinition(new SimpleMetadataReaderFactory().getMetadataReader(filterClass.getName())).     this.handler.handle(scanned, this.registry).     return this.registry.getBeanDefinition(filterClass.getName()). }
