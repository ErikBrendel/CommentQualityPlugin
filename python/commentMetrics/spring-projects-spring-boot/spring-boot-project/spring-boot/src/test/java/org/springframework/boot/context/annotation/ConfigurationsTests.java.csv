commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void createWhenClassesIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new TestConfigurations(null)).withMessageContaining("Classes must not be null"). }
false;public;0;7;;@Test public void createShouldSortClasses() {     TestSortedConfigurations configurations = new TestSortedConfigurations(Arrays.asList(OutputStream.class, InputStream.class)).     assertThat(configurations.getClasses()).containsExactly(InputStream.class, OutputStream.class). }
false;public;0;13;;@Test public void getClassesShouldMergeByClassAndSort() {     Configurations c1 = new TestSortedConfigurations(Arrays.asList(OutputStream.class, InputStream.class)).     Configurations c2 = new TestConfigurations(Collections.singletonList(Short.class)).     Configurations c3 = new TestSortedConfigurations(Arrays.asList(String.class, Integer.class)).     Configurations c4 = new TestConfigurations(Arrays.asList(Long.class, Byte.class)).     Class<?>[] classes = Configurations.getClasses(c1, c2, c3, c4).     assertThat(classes).containsExactly(Short.class, Long.class, Byte.class, InputStream.class, Integer.class, OutputStream.class, String.class). }
false;protected;1;4;;@Override protected Configurations merge(Set<Class<?>> mergedClasses) {     return new TestConfigurations(mergedClasses). }
false;protected;1;6;;@Override protected Collection<Class<?>> sort(Collection<Class<?>> classes) {     ArrayList<Class<?>> sorted = new ArrayList<>(classes).     sorted.sort(Comparator.comparing(ClassUtils::getShortName)).     return sorted. }
false;protected;1;4;;@Override protected Configurations merge(Set<Class<?>> mergedClasses) {     return new TestSortedConfigurations(mergedClasses). }
