commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void canConvertFromStringToCollectionShouldReturnTrue() {     assertThat(this.conversionService.canConvert(String.class, Collection.class)).isTrue(). }
false;public;0;8;;@Test public void matchesWhenTargetIsNotAnnotatedShouldReturnTrue() {     TypeDescriptor sourceType = TypeDescriptor.valueOf(String.class).     TypeDescriptor targetType = TypeDescriptor.nested(ReflectionUtils.findField(Values.class, "noAnnotation"), 0).     assertThat(new DelimitedStringToCollectionConverter(this.conversionService).matches(sourceType, targetType)).isTrue(). }
false;public;0;8;;@Test public void matchesWhenHasAnnotationAndNoElementTypeShouldReturnTrue() {     TypeDescriptor sourceType = TypeDescriptor.valueOf(String.class).     TypeDescriptor targetType = TypeDescriptor.nested(ReflectionUtils.findField(Values.class, "noElementType"), 0).     assertThat(new DelimitedStringToCollectionConverter(this.conversionService).matches(sourceType, targetType)).isTrue(). }
false;public;0;10;;@Test public void matchesWhenHasAnnotationAndConvertibleElementTypeShouldReturnTrue() {     if (this.conversionService instanceof ApplicationConversionService) {         TypeDescriptor sourceType = TypeDescriptor.valueOf(String.class).         TypeDescriptor targetType = TypeDescriptor.nested(ReflectionUtils.findField(Values.class, "convertibleElementType"), 0).         assertThat(new DelimitedStringToCollectionConverter(this.conversionService).matches(sourceType, targetType)).isTrue().     } }
false;public;0;8;;@Test public void matchesWhenHasAnnotationAndNonConvertibleElementTypeShouldReturnFalse() {     TypeDescriptor sourceType = TypeDescriptor.valueOf(String.class).     TypeDescriptor targetType = TypeDescriptor.nested(ReflectionUtils.findField(Values.class, "nonConvertibleElementType"), 0).     assertThat(new DelimitedStringToCollectionConverter(this.conversionService).matches(sourceType, targetType)).isFalse(). }
false;public;0;10;;@Test @SuppressWarnings("unchecked") public void convertWhenHasNoElementTypeShouldReturnTrimmedString() {     TypeDescriptor sourceType = TypeDescriptor.valueOf(String.class).     TypeDescriptor targetType = TypeDescriptor.nested(ReflectionUtils.findField(Values.class, "noElementType"), 0).     Collection<String> converted = (Collection<String>) this.conversionService.convert(" a |  b| c  ", sourceType, targetType).     assertThat(converted).containsExactly("a", "b", "c"). }
false;public;0;12;;@Test @SuppressWarnings("unchecked") public void convertWhenHasConvertibleElementTypeShouldReturnConvertedType() {     if (this.conversionService instanceof ApplicationConversionService) {         TypeDescriptor sourceType = TypeDescriptor.valueOf(String.class).         TypeDescriptor targetType = TypeDescriptor.nested(ReflectionUtils.findField(Values.class, "convertibleElementType"), 0).         List<Integer> converted = (List<Integer>) this.conversionService.convert(" 1 |  2| 3  ", sourceType, targetType).         assertThat(converted).containsExactly(1, 2, 3).     } }
false;public;0;10;;@Test @SuppressWarnings("unchecked") public void convertWhenHasDelimiterOfNoneShouldReturnWholeString() {     TypeDescriptor sourceType = TypeDescriptor.valueOf(String.class).     TypeDescriptor targetType = TypeDescriptor.nested(ReflectionUtils.findField(Values.class, "delimiterNone"), 0).     List<String> converted = (List<String>) this.conversionService.convert("a,b,c", sourceType, targetType).     assertThat(converted).containsExactly("a,b,c"). }
false;public;0;10;;@SuppressWarnings("unchecked") @Test public void convertWhenHasCollectionObjectTypeShouldUseCollectionObjectType() {     TypeDescriptor sourceType = TypeDescriptor.valueOf(String.class).     TypeDescriptor targetType = TypeDescriptor.nested(ReflectionUtils.findField(Values.class, "specificType"), 0).     MyCustomList<String> converted = (MyCustomList<String>) this.conversionService.convert("a*b", sourceType, targetType).     assertThat(converted).containsExactly("a", "b"). }
false;public,static;0;5;;@Parameters(name = "{0}") public static Iterable<Object[]> conversionServices() {     return new ConversionServiceParameters(DelimitedStringToCollectionConverterTests::addConverter). }
false;private,static;1;3;;private static void addConverter(FormattingConversionService service) {     service.addConverter(new DelimitedStringToCollectionConverter(service)). }
