commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setup() {     this.tomcat = new Tomcat().     this.connector = new Connector("org.apache.coyote.http11.Http11NioProtocol").     this.connector.setPort(0).     this.tomcat.setConnector(this.connector). }
false;public;0;8;;@After public void stop() throws Exception {     System.clearProperty("javax.net.ssl.trustStorePassword").     ReflectionTestUtils.setField(TomcatURLStreamHandlerFactory.class, "instance", null).     ReflectionTestUtils.setField(URL.class, "factory", null).     this.tomcat.stop(). }
false;public;0;14;;@Test public void sslCiphersConfiguration() throws Exception {     Ssl ssl = new Ssl().     ssl.setKeyStore("test.jks").     ssl.setKeyStorePassword("secret").     ssl.setCiphers(new String[] { "ALPHA", "BRAVO", "CHARLIE" }).     SslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, null).     Connector connector = this.tomcat.getConnector().     customizer.customize(connector).     this.tomcat.start().     SSLHostConfig[] sslHostConfigs = connector.getProtocolHandler().findSslHostConfigs().     assertThat(sslHostConfigs[0].getCiphers()).isEqualTo("ALPHA:BRAVO:CHARLIE"). }
false;public;0;17;;@Test public void sslEnabledMultipleProtocolsConfiguration() throws Exception {     Ssl ssl = new Ssl().     ssl.setKeyPassword("password").     ssl.setKeyStore("src/test/resources/test.jks").     ssl.setEnabledProtocols(new String[] { "TLSv1.1", "TLSv1.2" }).     ssl.setCiphers(new String[] { "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", "BRAVO" }).     SslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, null).     Connector connector = this.tomcat.getConnector().     customizer.customize(connector).     this.tomcat.start().     SSLHostConfig sslHostConfig = connector.getProtocolHandler().findSslHostConfigs()[0].     assertThat(sslHostConfig.getSslProtocol()).isEqualTo("TLS").     assertThat(sslHostConfig.getEnabledProtocols()).containsExactlyInAnyOrder("TLSv1.1", "TLSv1.2"). }
false;public;0;16;;@Test public void sslEnabledProtocolsConfiguration() throws Exception {     Ssl ssl = new Ssl().     ssl.setKeyPassword("password").     ssl.setKeyStore("src/test/resources/test.jks").     ssl.setEnabledProtocols(new String[] { "TLSv1.2" }).     ssl.setCiphers(new String[] { "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", "BRAVO" }).     SslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, null).     Connector connector = this.tomcat.getConnector().     customizer.customize(connector).     this.tomcat.start().     SSLHostConfig sslHostConfig = connector.getProtocolHandler().findSslHostConfigs()[0].     assertThat(sslHostConfig.getSslProtocol()).isEqualTo("TLS").     assertThat(sslHostConfig.getEnabledProtocols()).containsExactly("TLSv1.2"). }
false;public;0;21;;@Test public void customizeWhenSslStoreProviderProvidesOnlyKeyStoreShouldUseDefaultTruststore() throws Exception {     Ssl ssl = new Ssl().     ssl.setKeyPassword("password").     ssl.setTrustStore("src/test/resources/test.jks").     SslStoreProvider sslStoreProvider = mock(SslStoreProvider.class).     given(sslStoreProvider.getKeyStore()).willReturn(loadStore()).     SslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider).     Connector connector = this.tomcat.getConnector().     customizer.customize(connector).     this.tomcat.start().     SSLHostConfig sslHostConfig = connector.getProtocolHandler().findSslHostConfigs()[0].     SSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig().     assertThat(sslHostConfig.getTruststoreFile()).isEqualTo(sslHostConfigWithDefaults.getTruststoreFile()).     assertThat(sslHostConfig.getCertificateKeystoreFile()).isEqualTo(SslStoreProviderUrlStreamHandlerFactory.KEY_STORE_URL). }
false;public;0;21;;@Test public void customizeWhenSslStoreProviderProvidesOnlyTrustStoreShouldUseDefaultKeystore() throws Exception {     Ssl ssl = new Ssl().     ssl.setKeyPassword("password").     ssl.setKeyStore("src/test/resources/test.jks").     SslStoreProvider sslStoreProvider = mock(SslStoreProvider.class).     given(sslStoreProvider.getTrustStore()).willReturn(loadStore()).     SslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider).     Connector connector = this.tomcat.getConnector().     customizer.customize(connector).     this.tomcat.start().     SSLHostConfig sslHostConfig = connector.getProtocolHandler().findSslHostConfigs()[0].     SSLHostConfig sslHostConfigWithDefaults = new SSLHostConfig().     assertThat(sslHostConfig.getTruststoreFile()).isEqualTo(SslStoreProviderUrlStreamHandlerFactory.TRUST_STORE_URL).     assertThat(sslHostConfig.getCertificateKeystoreFile()).contains(sslHostConfigWithDefaults.getCertificateKeystoreFile()). }
false;public;0;18;;@Test public void customizeWhenSslStoreProviderPresentShouldIgnorePasswordFromSsl() throws Exception {     System.setProperty("javax.net.ssl.trustStorePassword", "trustStoreSecret").     Ssl ssl = new Ssl().     ssl.setKeyPassword("password").     ssl.setKeyStorePassword("secret").     SslStoreProvider sslStoreProvider = mock(SslStoreProvider.class).     given(sslStoreProvider.getTrustStore()).willReturn(loadStore()).     given(sslStoreProvider.getKeyStore()).willReturn(loadStore()).     SslConnectorCustomizer customizer = new SslConnectorCustomizer(ssl, sslStoreProvider).     Connector connector = this.tomcat.getConnector().     customizer.customize(connector).     this.tomcat.start().     assertThat(connector.getState()).isEqualTo(LifecycleState.STARTED).     assertThat(this.output.toString()).doesNotContain("Password verification failed"). }
false;public;0;7;;@Test public void customizeWhenSslIsEnabledWithNoKeyStoreThrowsWebServerException() {     assertThatExceptionOfType(WebServerException.class).isThrownBy(() -> new SslConnectorCustomizer(new Ssl(), null).customize(this.tomcat.getConnector())).withMessageContaining("Could not load key store 'null'"). }
false;private;0;9;;private KeyStore loadStore() throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException {     KeyStore keyStore = KeyStore.getInstance("JKS").     Resource resource = new ClassPathResource("test.jks").     try (InputStream inputStream = resource.getInputStream()) {         keyStore.load(inputStream, "secret".toCharArray()).         return keyStore.     } }
