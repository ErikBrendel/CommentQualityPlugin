commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setUp() {     this.action.setContext(this.context). }
false;public;0;14;;@Test public void environmentIsQueriedWithProfileFromNameAttribute() throws ActionException {     given(this.attributes.getValue(Action.NAME_ATTRIBUTE)).willReturn("dev").     this.action.begin(this.interpretationContext, null, this.attributes).     ArgumentCaptor<Profiles> profiles = ArgumentCaptor.forClass(Profiles.class).     verify(this.environment).acceptsProfiles(profiles.capture()).     List<String> profileNames = new ArrayList<>().     profiles.getValue().matches((profile) -> {         profileNames.add(profile).         return false.     }).     assertThat(profileNames).containsExactly("dev"). }
false;public;0;14;;@Test public void environmentIsQueriedWithMultipleProfilesFromCommaSeparatedNameAttribute() throws ActionException {     given(this.attributes.getValue(Action.NAME_ATTRIBUTE)).willReturn("dev,qa").     this.action.begin(this.interpretationContext, null, this.attributes).     ArgumentCaptor<Profiles> profiles = ArgumentCaptor.forClass(Profiles.class).     verify(this.environment).acceptsProfiles(profiles.capture()).     List<String> profileNames = new ArrayList<>().     profiles.getValue().matches((profile) -> {         profileNames.add(profile).         return false.     }).     assertThat(profileNames).containsExactly("dev", "qa"). }
false;public;0;15;;@Test public void environmentIsQueriedWithResolvedValueWhenNameAttributeUsesAPlaceholder() throws ActionException {     given(this.attributes.getValue(Action.NAME_ATTRIBUTE)).willReturn("${profile}").     this.context.putProperty("profile", "dev").     this.action.begin(this.interpretationContext, null, this.attributes).     ArgumentCaptor<Profiles> profiles = ArgumentCaptor.forClass(Profiles.class).     verify(this.environment).acceptsProfiles(profiles.capture()).     List<String> profileNames = new ArrayList<>().     profiles.getValue().matches((profile) -> {         profileNames.add(profile).         return false.     }).     assertThat(profileNames).containsExactly("dev"). }
false;public;0;17;;@Test public void environmentIsQueriedWithResolvedValuesFromCommaSeparatedNameNameAttributeWithPlaceholders() throws ActionException {     given(this.attributes.getValue(Action.NAME_ATTRIBUTE)).willReturn("${profile1},${profile2}").     this.context.putProperty("profile1", "dev").     this.context.putProperty("profile2", "qa").     this.action.begin(this.interpretationContext, null, this.attributes).     ArgumentCaptor<Profiles> profiles = ArgumentCaptor.forClass(Profiles.class).     verify(this.environment).acceptsProfiles(profiles.capture()).     List<String> profileNames = new ArrayList<>().     profiles.getValue().matches((profile) -> {         profileNames.add(profile).         return false.     }).     assertThat(profileNames).containsExactly("dev", "qa"). }
