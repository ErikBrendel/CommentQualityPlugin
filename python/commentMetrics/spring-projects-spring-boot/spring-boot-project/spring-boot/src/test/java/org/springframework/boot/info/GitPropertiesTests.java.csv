commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void basicInfo() {     GitProperties properties = new GitProperties(createProperties("master", "abcdefghijklmno", "abcdefg", "1457527123")).     assertThat(properties.getBranch()).isEqualTo("master").     assertThat(properties.getCommitId()).isEqualTo("abcdefghijklmno").     assertThat(properties.getShortCommitId()).isEqualTo("abcdefg"). }
false;public;0;8;;@Test public void noInfo() {     GitProperties properties = new GitProperties(new Properties()).     assertThat(properties.getBranch()).isNull().     assertThat(properties.getCommitId()).isNull().     assertThat(properties.getShortCommitId()).isNull().     assertThat(properties.getCommitTime()).isNull(). }
false;public;0;8;;@Test public void coerceEpochSecond() {     GitProperties properties = new GitProperties(createProperties("master", "abcdefg", null, "1457527123")).     assertThat(properties.getCommitTime()).isNotNull().     assertThat(properties.get("commit.time")).isEqualTo("1457527123000").     assertThat(properties.getCommitTime().toEpochMilli()).isEqualTo(1457527123000L). }
false;public;0;8;;@Test public void coerceDateString() {     GitProperties properties = new GitProperties(createProperties("master", "abcdefg", null, "2016-03-04T14:36:33+0100")).     assertThat(properties.getCommitTime()).isNotNull().     assertThat(properties.get("commit.time")).isEqualTo("1457098593000").     assertThat(properties.getCommitTime().toEpochMilli()).isEqualTo(1457098593000L). }
false;public;0;7;;@Test public void coerceUnsupportedFormat() {     GitProperties properties = new GitProperties(createProperties("master", "abcdefg", null, "2016-03-04 15:22:24")).     assertThat(properties.getCommitTime()).isNull().     assertThat(properties.get("commit.time")).isEqualTo("2016-03-04 15:22:24"). }
false;public;0;7;;@Test public void shortCommitUsedIfPresent() {     GitProperties properties = new GitProperties(createProperties("master", "abcdefghijklmno", "abcdefgh", "1457527123")).     assertThat(properties.getCommitId()).isEqualTo("abcdefghijklmno").     assertThat(properties.getShortCommitId()).isEqualTo("abcdefgh"). }
false;public;0;7;;@Test public void shortenCommitIdShorterThan7() {     GitProperties properties = new GitProperties(createProperties("master", "abc", null, "1457527123")).     assertThat(properties.getCommitId()).isEqualTo("abc").     assertThat(properties.getShortCommitId()).isEqualTo("abc"). }
false;public;0;7;;@Test public void shortenCommitIdLongerThan7() {     GitProperties properties = new GitProperties(createProperties("master", "abcdefghijklmno", null, "1457527123")).     assertThat(properties.getCommitId()).isEqualTo("abcdefghijklmno").     assertThat(properties.getShortCommitId()).isEqualTo("abcdefg"). }
false;private,static;4;11;;private static Properties createProperties(String branch, String commitId, String commitIdAbbrev, String commitTime) {     Properties properties = new Properties().     properties.put("branch", branch).     properties.put("commit.id", commitId).     if (commitIdAbbrev != null) {         properties.put("commit.id.abbrev", commitIdAbbrev).     }     properties.put("commit.time", commitTime).     return properties. }
