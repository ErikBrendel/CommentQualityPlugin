commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void createWhenNameIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new ConfigurationProperty(null, "bar", null)).withMessageContaining("Name must not be null"). }
false;public;0;6;;@Test public void createWhenValueIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new ConfigurationProperty(NAME, null, null)).withMessageContaining("Value must not be null"). }
false;public;0;5;;@Test public void getNameShouldReturnName() {     ConfigurationProperty property = ConfigurationProperty.of(NAME, "foo", null).     assertThat((Object) property.getName()).isEqualTo(NAME). }
false;public;0;5;;@Test public void getValueShouldReturnValue() {     ConfigurationProperty property = ConfigurationProperty.of(NAME, "foo", null).     assertThat(property.getValue()).isEqualTo("foo"). }
false;public;0;6;;@Test public void getPropertyOriginShouldReturnValuePropertyOrigin() {     Origin origin = mock(Origin.class).     OriginProvider property = ConfigurationProperty.of(NAME, "foo", origin).     assertThat(property.getOrigin()).isEqualTo(origin). }
false;public;0;14;;@Test public void equalsAndHashCode() {     ConfigurationProperty property1 = new ConfigurationProperty(ConfigurationPropertyName.of("foo"), "bar", null).     ConfigurationProperty property2 = new ConfigurationProperty(ConfigurationPropertyName.of("foo"), "bar", null).     ConfigurationProperty property3 = new ConfigurationProperty(ConfigurationPropertyName.of("foo"), "baz", null).     ConfigurationProperty property4 = new ConfigurationProperty(ConfigurationPropertyName.of("baz"), "bar", null).     assertThat(property1.hashCode()).isEqualTo(property2.hashCode()).     assertThat(property1).isEqualTo(property2).isNotEqualTo(property3).isNotEqualTo(property4). }
false;public;0;5;;@Test public void toStringShouldReturnValue() {     ConfigurationProperty property = ConfigurationProperty.of(NAME, "foo", null).     assertThat(property.toString()).contains("name").contains("value"). }
