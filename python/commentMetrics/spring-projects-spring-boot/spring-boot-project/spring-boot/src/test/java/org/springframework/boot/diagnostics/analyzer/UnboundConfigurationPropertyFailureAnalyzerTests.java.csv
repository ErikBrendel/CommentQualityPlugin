commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     LocaleContextHolder.setLocale(Locale.US). }
false;public;0;4;;@After public void cleanup() {     LocaleContextHolder.resetLocaleContext(). }
false;public;0;9;;@Test public void bindExceptionDueToUnboundElements() {     FailureAnalysis analysis = performAnalysis(UnboundElementsFailureConfiguration.class, "test.foo.listValue[0]=hello", "test.foo.listValue[2]=world").     assertThat(analysis.getDescription()).contains(failure("test.foo.listvalue[2]", "world", "\"test.foo.listValue[2]\" from property source \"test\"", "The elements [test.foo.listvalue[2]] were left unbound.")). }
false;private,static;4;6;;private static String failure(String property, String value, String origin, String reason) {     return String.format("Property: %s%n    Value: %s%n    Origin: %s%n    Reason: %s", property, value, origin, reason). }
false;private;2;6;;private FailureAnalysis performAnalysis(Class<?> configuration, String... environment) {     BeanCreationException failure = createFailure(configuration, environment).     assertThat(failure).isNotNull().     return new UnboundConfigurationPropertyFailureAnalyzer().analyze(failure). }
false;private;2;14;;private BeanCreationException createFailure(Class<?> configuration, String... environment) {     try {         AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().         addEnvironment(context, environment).         context.register(configuration).         context.refresh().         context.close().         return null.     } catch (BeanCreationException ex) {         return ex.     } }
false;private;2;12;;private void addEnvironment(AnnotationConfigApplicationContext context, String[] environment) {     MutablePropertySources sources = context.getEnvironment().getPropertySources().     Map<String, Object> map = new HashMap<>().     for (String pair : environment) {         int index = pair.indexOf("=").         String key = (index > 0) ? pair.substring(0, index) : pair.         String value = (index > 0) ? pair.substring(index + 1) : "".         map.put(key.trim(), value.trim()).     }     sources.addFirst(new MapPropertySource("test", map)). }
false;public;0;3;;public List<String> getListValue() {     return this.listValue. }
false;public;1;3;;public void setListValue(List<String> listValue) {     this.listValue = listValue. }
