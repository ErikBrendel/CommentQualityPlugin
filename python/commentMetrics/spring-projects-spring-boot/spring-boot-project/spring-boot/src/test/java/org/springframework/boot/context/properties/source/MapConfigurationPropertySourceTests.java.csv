commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void createWhenMapIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new MapConfigurationPropertySource(null)).withMessageContaining("Map must not be null"). }
false;public;0;9;;@Test public void createWhenMapHasEntriesShouldAdaptMap() {     Map<Object, Object> map = new LinkedHashMap<>().     map.put("foo.BAR", "spring").     map.put(ConfigurationPropertyName.of("foo.baz"), "boot").     MapConfigurationPropertySource source = new MapConfigurationPropertySource(map).     assertThat(getValue(source, "foo.bar")).isEqualTo("spring").     assertThat(getValue(source, "foo.baz")).isEqualTo("boot"). }
false;public;0;6;;@Test public void putAllWhenMapIsNullShouldThrowException() {     MapConfigurationPropertySource source = new MapConfigurationPropertySource().     assertThatIllegalArgumentException().isThrownBy(() -> source.putAll(null)).withMessageContaining("Map must not be null"). }
false;public;0;10;;@Test public void putAllShouldPutEntries() {     Map<Object, Object> map = new LinkedHashMap<>().     map.put("foo.BAR", "spring").     map.put("foo.baz", "boot").     MapConfigurationPropertySource source = new MapConfigurationPropertySource().     source.putAll(map).     assertThat(getValue(source, "foo.bar")).isEqualTo("spring").     assertThat(getValue(source, "foo.baz")).isEqualTo("boot"). }
false;public;0;6;;@Test public void putShouldPutEntry() {     MapConfigurationPropertySource source = new MapConfigurationPropertySource().     source.put("foo.bar", "baz").     assertThat(getValue(source, "foo.bar")).isEqualTo("baz"). }
false;public;0;8;;@Test public void getConfigurationPropertyShouldGetFromMemory() {     MapConfigurationPropertySource source = new MapConfigurationPropertySource().     source.put("foo.bar", "baz").     assertThat(getValue(source, "foo.bar")).isEqualTo("baz").     source.put("foo.bar", "big").     assertThat(getValue(source, "foo.bar")).isEqualTo("big"). }
false;public;0;9;;@Test public void iteratorShouldGetFromMemory() {     MapConfigurationPropertySource source = new MapConfigurationPropertySource().     source.put("foo.BAR", "spring").     source.put("foo.baz", "boot").     assertThat(source.iterator()).containsExactly(ConfigurationPropertyName.of("foo.bar"), ConfigurationPropertyName.of("foo.baz")). }
false;public;0;10;;@Test public void streamShouldGetFromMemory() {     MapConfigurationPropertySource source = new MapConfigurationPropertySource().     source.put("foo.BAR", "spring").     source.put("foo.baz", "boot").     assertThat(source.stream()).containsExactly(ConfigurationPropertyName.of("foo.bar"), ConfigurationPropertyName.of("foo.baz")). }
false;private;2;5;;private Object getValue(ConfigurationPropertySource source, String name) {     ConfigurationProperty property = source.getConfigurationProperty(ConfigurationPropertyName.of(name)).     return (property != null) ? property.getValue() : null. }
