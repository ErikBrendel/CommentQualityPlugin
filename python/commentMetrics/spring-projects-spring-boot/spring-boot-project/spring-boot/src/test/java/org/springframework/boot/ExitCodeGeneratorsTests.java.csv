commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void addAllWhenGeneratorsIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> {         List<ExitCodeGenerator> generators = null.         new ExitCodeGenerators().addAll(generators).     }).withMessageContaining("Generators must not be null"). }
false;public;0;6;;@Test public void addWhenGeneratorIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> new ExitCodeGenerators().add(null)).withMessageContaining("Generator must not be null"). }
false;public;0;4;;@Test public void getExitCodeWhenNoGeneratorsShouldReturnZero() {     assertThat(new ExitCodeGenerators().getExitCode()).isEqualTo(0). }
false;public;0;8;;@Test public void getExitCodeWhenGeneratorThrowsShouldReturnOne() {     ExitCodeGenerator generator = mock(ExitCodeGenerator.class).     given(generator.getExitCode()).willThrow(new IllegalStateException()).     ExitCodeGenerators generators = new ExitCodeGenerators().     generators.add(generator).     assertThat(generators.getExitCode()).isEqualTo(1). }
false;public;0;8;;@Test public void getExitCodeWhenAllNegativeShouldReturnLowestValue() {     ExitCodeGenerators generators = new ExitCodeGenerators().     generators.add(mockGenerator(-1)).     generators.add(mockGenerator(-3)).     generators.add(mockGenerator(-2)).     assertThat(generators.getExitCode()).isEqualTo(-3). }
false;public;0;8;;@Test public void getExitCodeWhenAllPositiveShouldReturnHighestValue() {     ExitCodeGenerators generators = new ExitCodeGenerators().     generators.add(mockGenerator(1)).     generators.add(mockGenerator(3)).     generators.add(mockGenerator(2)).     assertThat(generators.getExitCode()).isEqualTo(3). }
false;public;0;9;;@Test public void getExitCodeWhenUsingExitCodeExceptionMapperShouldCallMapper() {     ExitCodeGenerators generators = new ExitCodeGenerators().     Exception e = new IOException().     generators.add(e, mockMapper(IllegalStateException.class, 1)).     generators.add(e, mockMapper(IOException.class, 2)).     generators.add(e, mockMapper(UnsupportedOperationException.class, 3)).     assertThat(generators.getExitCode()).isEqualTo(2). }
false;private;1;5;;private ExitCodeGenerator mockGenerator(int exitCode) {     ExitCodeGenerator generator = mock(ExitCodeGenerator.class).     given(generator.getExitCode()).willReturn(exitCode).     return generator. }
false;private;2;8;;private ExitCodeExceptionMapper mockMapper(Class<?> exceptionType, int exitCode) {     return (exception) -> {         if (exceptionType.isInstance(exception)) {             return exitCode.         }         return 0.     }. }
