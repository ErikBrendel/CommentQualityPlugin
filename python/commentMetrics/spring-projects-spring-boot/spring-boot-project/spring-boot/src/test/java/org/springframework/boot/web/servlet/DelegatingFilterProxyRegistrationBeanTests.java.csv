commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void targetBeanNameMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new DelegatingFilterProxyRegistrationBean(null)).withMessageContaining("TargetBeanName must not be null or empty"). }
false;public;0;6;;@Test public void targetBeanNameMustNotBeEmpty() {     assertThatIllegalArgumentException().isThrownBy(() -> new DelegatingFilterProxyRegistrationBean("")).withMessageContaining("TargetBeanName must not be null or empty"). }
false;public;0;5;;@Test public void nameDefaultsToTargetBeanName() {     assertThat(new DelegatingFilterProxyRegistrationBean("myFilter").getOrDeduceName(null)).isEqualTo("myFilter"). }
false;public;0;10;;@Test public void getFilterUsesDelegatingFilterProxy() {     DelegatingFilterProxyRegistrationBean registrationBean = createFilterRegistrationBean().     Filter filter = registrationBean.getFilter().     assertThat(filter).isInstanceOf(DelegatingFilterProxy.class).     assertThat(ReflectionTestUtils.getField(filter, "webApplicationContext")).isEqualTo(this.applicationContext).     assertThat(ReflectionTestUtils.getField(filter, "targetBeanName")).isEqualTo("mockFilter"). }
false;public;0;12;;@Test public void initShouldNotCauseEarlyInitialization() throws Exception {     this.applicationContext.registerBeanDefinition("mockFilter", new RootBeanDefinition(MockFilter.class)).     DelegatingFilterProxyRegistrationBean registrationBean = createFilterRegistrationBean().     Filter filter = registrationBean.getFilter().     filter.init(new MockFilterConfig()).     assertThat(mockFilterInitialized.get()).isNull().     filter.doFilter(new MockHttpServletRequest(), new MockHttpServletResponse(), new MockFilterChain()).     assertThat(mockFilterInitialized.get()).isTrue(). }
false;public;0;7;;@Test public void createServletRegistrationBeanMustNotBeNull() {     assertThatIllegalArgumentException().isThrownBy(() -> new DelegatingFilterProxyRegistrationBean("mockFilter", (ServletRegistrationBean[]) null)).withMessageContaining("ServletRegistrationBeans must not be null"). }
false;protected;1;8;;@Override protected DelegatingFilterProxyRegistrationBean createFilterRegistrationBean(ServletRegistrationBean<?>... servletRegistrationBeans) {     DelegatingFilterProxyRegistrationBean bean = new DelegatingFilterProxyRegistrationBean("mockFilter", servletRegistrationBeans).     bean.setApplicationContext(this.applicationContext).     return bean. }
false;protected;0;4;;@Override protected Filter getExpectedFilter() {     return isA(DelegatingFilterProxy.class). }
false;public;3;4;;@Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) { }
