commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void buildUseUseSimpleClientByDefault() {     WebServiceMessageSender messageSender = this.builder.build().     assertSimpleClientRequestFactory(messageSender). }
false;public;0;10;;@Test public void buildWithCustomTimeouts() {     WebServiceMessageSender messageSender = this.builder.setConnectTimeout(Duration.ofSeconds(5)).setReadTimeout(Duration.ofSeconds(2)).build().     SimpleClientHttpRequestFactory requestFactory = assertSimpleClientRequestFactory(messageSender).     assertThat(requestFactory).hasFieldOrPropertyWithValue("connectTimeout", 5000).     assertThat(requestFactory).hasFieldOrPropertyWithValue("readTimeout", 2000). }
false;private;1;8;;private SimpleClientHttpRequestFactory assertSimpleClientRequestFactory(WebServiceMessageSender messageSender) {     assertThat(messageSender).isInstanceOf(ClientHttpRequestMessageSender.class).     ClientHttpRequestMessageSender sender = (ClientHttpRequestMessageSender) messageSender.     ClientHttpRequestFactory requestFactory = sender.getRequestFactory().     assertThat(requestFactory).isInstanceOf(SimpleClientHttpRequestFactory.class).     return (SimpleClientHttpRequestFactory) requestFactory. }
