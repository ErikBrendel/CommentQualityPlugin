commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void fromNullValue() {     ExampleDest dest = new ExampleDest().     this.map.from((String) null).to(dest::setName).     assertThat(dest.getName()).isNull(). }
false;public;0;6;;@Test public void fromValue() {     ExampleDest dest = new ExampleDest().     this.map.from("Hello World").to(dest::setName).     assertThat(dest.getName()).isEqualTo("Hello World"). }
false;public;0;6;;@Test public void fromValueAsIntShouldAdaptValue() {     Integer result = this.map.from("123").asInt(Long::valueOf).toInstance(Integer::valueOf).     assertThat(result).isEqualTo(123). }
false;public;0;4;;@Test public void fromValueAlwaysApplyingWhenNonNullShouldAlwaysApplyNonNullToSource() {     this.map.alwaysApplyingWhenNonNull().from((String) null).toCall(Assert::fail). }
false;public;0;6;;@Test public void fromWhenSupplierIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.map.from((Supplier<?>) null)).withMessageContaining("Supplier must not be null"). }
false;public;0;6;;@Test public void toWhenConsumerIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.map.from(() -> "").to(null)).withMessageContaining("Consumer must not be null"). }
false;public;0;7;;@Test public void toShouldMapFromSupplier() {     ExampleSource source = new ExampleSource("test").     ExampleDest dest = new ExampleDest().     this.map.from(source::getName).to(dest::setName).     assertThat(dest.getName()).isEqualTo("test"). }
false;public;0;6;;@Test public void asIntShouldAdaptSupplier() {     Integer result = this.map.from(() -> "123").asInt(Long::valueOf).toInstance(Integer::valueOf).     assertThat(result).isEqualTo(123). }
false;public;0;6;;@Test public void asWhenAdapterIsNullShouldThrowException() {     assertThatIllegalArgumentException().isThrownBy(() -> this.map.from(() -> "").as(null)).withMessageContaining("Adapter must not be null"). }
false;public;0;6;;@Test public void asShouldAdaptSupplier() {     ExampleDest dest = new ExampleDest().     this.map.from(() -> 123).as(String::valueOf).to(dest::setName).     assertThat(dest.getName()).isEqualTo("123"). }
false;public;0;4;;@Test public void whenNonNullWhenSuppliedNullShouldNotMap() {     this.map.from(() -> null).whenNonNull().as(String::valueOf).toCall(Assert::fail). }
false;public;0;6;;@Test public void whenNonNullWhenSuppliedThrowsNullPointerExceptionShouldNotMap() {     this.map.from(() -> {         throw new NullPointerException().     }).whenNonNull().as(String::valueOf).toCall(Assert::fail). }
false;public;0;5;;@Test public void whenTrueWhenValueIsTrueShouldMap() {     Boolean result = this.map.from(true).whenTrue().toInstance(Boolean::valueOf).     assertThat(result).isTrue(). }
false;public;0;4;;@Test public void whenTrueWhenValueIsFalseShouldNotMap() {     this.map.from(false).whenTrue().toCall(Assert::fail). }
false;public;0;5;;@Test public void whenFalseWhenValueIsFalseShouldMap() {     Boolean result = this.map.from(false).whenFalse().toInstance(Boolean::valueOf).     assertThat(result).isFalse(). }
false;public;0;4;;@Test public void whenFalseWhenValueIsTrueShouldNotMap() {     this.map.from(true).whenFalse().toCall(Assert::fail). }
false;public;0;4;;@Test public void whenHasTextWhenValueIsNullShouldNotMap() {     this.map.from(() -> null).whenHasText().toCall(Assert::fail). }
false;public;0;4;;@Test public void whenHasTextWhenValueIsEmptyShouldNotMap() {     this.map.from("").whenHasText().toCall(Assert::fail). }
false;public;0;5;;@Test public void whenHasTextWhenValueHasTextShouldMap() {     Integer result = this.map.from(123).whenHasText().toInstance(Integer::valueOf).     assertThat(result).isEqualTo(123). }
false;public;0;5;;@Test public void whenEqualToWhenValueIsEqualShouldMatch() {     String result = this.map.from("123").whenEqualTo("123").toInstance(String::new).     assertThat(result).isEqualTo("123"). }
false;public;0;4;;@Test public void whenEqualToWhenValueIsNotEqualShouldNotMatch() {     this.map.from("123").whenEqualTo("321").toCall(Assert::fail). }
false;public;0;6;;@Test public void whenInstanceOfWhenValueIsTargetTypeShouldMatch() {     Long result = this.map.from(123L).whenInstanceOf(Long.class).toInstance((value) -> value + 1).     assertThat(result).isEqualTo(124L). }
false;public;0;5;;@Test public void whenInstanceOfWhenValueIsNotTargetTypeShouldNotMatch() {     Supplier<Number> supplier = () -> 123L.     this.map.from(supplier).whenInstanceOf(Double.class).toCall(Assert::fail). }
false;public;0;5;;@Test public void whenWhenValueMatchesShouldMap() {     String result = this.map.from("123").when("123"::equals).toInstance(String::new).     assertThat(result).isEqualTo("123"). }
false;public;0;4;;@Test public void whenWhenValueDoesNotMatchShouldNotMap() {     this.map.from("123").when("321"::equals).toCall(Assert::fail). }
false;public;0;8;;@Test public void whenWhenCombinedWithAsUsesSourceValue() {     Count<String> source = new Count<>(() -> "123").     Long result = this.map.from(source).when("123"::equals).as(Integer::valueOf).when((v) -> v == 123).as(Integer::longValue).toInstance(Long::valueOf).     assertThat(result).isEqualTo(123).     assertThat(source.getCount()).isOne(). }
false;public;0;4;;@Test public void alwaysApplyingWhenNonNullShouldAlwaysApplyNonNullToSource() {     this.map.alwaysApplyingWhenNonNull().from(() -> null).toCall(Assert::fail). }
false;public;0;5;;@Override public T get() {     this.count++.     return this.source.get(). }
false;public;0;3;;public int getCount() {     return this.count. }
false;public;0;3;;public String getName() {     return this.name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getName() {     return this.name. }
