commented;modifiers;parameterAmount;loc;comment;code
true;protected,abstract;0;1;/**  * Return a data source metadata instance with a min size of 0 and max size of 2.  * @return the data source metadata  */ ;/**  * Return a data source metadata instance with a min size of 0 and max size of 2.  * @return the data source metadata  */ protected abstract D getDataSourceMetadata().
false;public;0;4;;@Test public void getMaxPoolSize() {     assertThat(getDataSourceMetadata().getMax()).isEqualTo(Integer.valueOf(2)). }
false;public;0;4;;@Test public void getMinPoolSize() {     assertThat(getDataSourceMetadata().getMin()).isEqualTo(Integer.valueOf(0)). }
false;public;0;9;;@Test public void getPoolSizeNoConnection() {     // Make sure the pool is initialized     JdbcTemplate jdbcTemplate = new JdbcTemplate(getDataSourceMetadata().getDataSource()).     jdbcTemplate.execute((ConnectionCallback<Void>) (connection) -> null).     assertThat(getDataSourceMetadata().getActive()).isEqualTo(Integer.valueOf(0)).     assertThat(getDataSourceMetadata().getUsage()).isEqualTo(Float.valueOf(0)). }
false;public;0;10;;@Test public void getPoolSizeOneConnection() {     JdbcTemplate jdbcTemplate = new JdbcTemplate(getDataSourceMetadata().getDataSource()).     jdbcTemplate.execute((ConnectionCallback<Void>) (connection) -> {         assertThat(getDataSourceMetadata().getActive()).isEqualTo(Integer.valueOf(1)).         assertThat(getDataSourceMetadata().getUsage()).isEqualTo(Float.valueOf(0.5F)).         return null.     }). }
false;public;0;13;;@Test public void getPoolSizeTwoConnections() {     final JdbcTemplate jdbcTemplate = new JdbcTemplate(getDataSourceMetadata().getDataSource()).     jdbcTemplate.execute((ConnectionCallback<Void>) (connection) -> {         jdbcTemplate.execute((ConnectionCallback<Void>) (connection1) -> {             assertThat(getDataSourceMetadata().getActive()).isEqualTo(2).             assertThat(getDataSourceMetadata().getUsage()).isEqualTo(1.0f).             return null.         }).         return null.     }). }
false;public,abstract;0;2;;@Test public abstract void getValidationQuery().
false;public,abstract;0;2;;@Test public abstract void getDefaultAutoCommit().
false;protected;0;4;;protected DataSourceBuilder<?> initializeBuilder() {     return DataSourceBuilder.create().driverClassName("org.hsqldb.jdbc.JDBCDriver").url("jdbc:hsqldb:mem:test").username("sa"). }
