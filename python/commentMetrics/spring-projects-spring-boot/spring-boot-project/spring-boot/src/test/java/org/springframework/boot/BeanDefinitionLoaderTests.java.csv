commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     this.registry = new StaticApplicationContext(). }
false;public;0;4;;@After public void cleanUp() {     this.registry.close(). }
false;public;0;7;;@Test public void loadClass() {     BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry, MyComponent.class).     assertThat(loader.load()).isEqualTo(1).     assertThat(this.registry.containsBean("myComponent")).isTrue(). }
false;public;0;9;;@Test public void loadXmlResource() {     ClassPathResource resource = new ClassPathResource("sample-beans.xml", getClass()).     BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry, resource).     assertThat(loader.load()).isEqualTo(1).     assertThat(this.registry.containsBean("myXmlComponent")).isTrue(). }
false;public;0;9;;@Test public void loadGroovyResource() {     ClassPathResource resource = new ClassPathResource("sample-beans.groovy", getClass()).     BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry, resource).     assertThat(loader.load()).isEqualTo(1).     assertThat(this.registry.containsBean("myGroovyComponent")).isTrue(). }
false;public;0;9;;@Test public void loadGroovyResourceWithNamespace() {     ClassPathResource resource = new ClassPathResource("sample-namespace.groovy", getClass()).     BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry, resource).     assertThat(loader.load()).isEqualTo(1).     assertThat(this.registry.containsBean("myGroovyComponent")).isTrue(). }
false;public;0;7;;@Test public void loadPackage() {     BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry, MyComponent.class.getPackage()).     assertThat(loader.load()).isEqualTo(1).     assertThat(this.registry.containsBean("myComponent")).isTrue(). }
false;public;0;7;;@Test public void loadClassName() {     BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry, MyComponent.class.getName()).     assertThat(loader.load()).isEqualTo(1).     assertThat(this.registry.containsBean("myComponent")).isTrue(). }
false;public;0;7;;@Test public void loadResourceName() {     BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry, "classpath:org/springframework/boot/sample-beans.xml").     assertThat(loader.load()).isEqualTo(1).     assertThat(this.registry.containsBean("myXmlComponent")).isTrue(). }
false;public;0;7;;@Test public void loadGroovyName() {     BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry, "classpath:org/springframework/boot/sample-beans.groovy").     assertThat(loader.load()).isEqualTo(1).     assertThat(this.registry.containsBean("myGroovyComponent")).isTrue(). }
false;public;0;7;;@Test public void loadPackageName() {     BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry, MyComponent.class.getPackage().getName()).     assertThat(loader.load()).isEqualTo(1).     assertThat(this.registry.containsBean("myComponent")).isTrue(). }
false;public;0;9;;@Test public void loadPackageNameWithoutDot() {     // See gh-6126     BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry, MyComponentInPackageWithoutDot.class.getPackage().getName()).     int loaded = loader.load().     assertThat(loaded).isEqualTo(1).     assertThat(this.registry.containsBean("myComponentInPackageWithoutDot")).isTrue(). }
false;public;0;7;;@Test public void loadPackageAndClassDoesNotDoubleAdd() {     BeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry, MyComponent.class.getPackage(), MyComponent.class).     assertThat(loader.load()).isEqualTo(1).     assertThat(this.registry.containsBean("myComponent")).isTrue(). }
