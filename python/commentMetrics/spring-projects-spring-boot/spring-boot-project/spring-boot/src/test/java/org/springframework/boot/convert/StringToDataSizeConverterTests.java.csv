commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void convertWhenSimpleBytesShouldReturnDataSize() {     assertThat(convert("10B")).isEqualTo(DataSize.ofBytes(10)).     assertThat(convert("+10B")).isEqualTo(DataSize.ofBytes(10)).     assertThat(convert("-10B")).isEqualTo(DataSize.ofBytes(-10)). }
false;public;0;6;;@Test public void convertWhenSimpleKilobytesShouldReturnDataSize() {     assertThat(convert("10KB")).isEqualTo(DataSize.ofKilobytes(10)).     assertThat(convert("+10KB")).isEqualTo(DataSize.ofKilobytes(10)).     assertThat(convert("-10KB")).isEqualTo(DataSize.ofKilobytes(-10)). }
false;public;0;6;;@Test public void convertWhenSimpleMegabytesShouldReturnDataSize() {     assertThat(convert("10MB")).isEqualTo(DataSize.ofMegabytes(10)).     assertThat(convert("+10MB")).isEqualTo(DataSize.ofMegabytes(10)).     assertThat(convert("-10MB")).isEqualTo(DataSize.ofMegabytes(-10)). }
false;public;0;6;;@Test public void convertWhenSimpleGigabytesShouldReturnDataSize() {     assertThat(convert("10GB")).isEqualTo(DataSize.ofGigabytes(10)).     assertThat(convert("+10GB")).isEqualTo(DataSize.ofGigabytes(10)).     assertThat(convert("-10GB")).isEqualTo(DataSize.ofGigabytes(-10)). }
false;public;0;6;;@Test public void convertWhenSimpleTerabytesShouldReturnDataSize() {     assertThat(convert("10TB")).isEqualTo(DataSize.ofTerabytes(10)).     assertThat(convert("+10TB")).isEqualTo(DataSize.ofTerabytes(10)).     assertThat(convert("-10TB")).isEqualTo(DataSize.ofTerabytes(-10)). }
false;public;0;6;;@Test public void convertWhenSimpleWithoutSuffixShouldReturnDataSize() {     assertThat(convert("10")).isEqualTo(DataSize.ofBytes(10)).     assertThat(convert("+10")).isEqualTo(DataSize.ofBytes(10)).     assertThat(convert("-10")).isEqualTo(DataSize.ofBytes(-10)). }
false;public;0;8;;@Test public void convertWhenSimpleWithoutSuffixButWithAnnotationShouldReturnDataSize() {     assertThat(convert("10", DataUnit.KILOBYTES)).isEqualTo(DataSize.ofKilobytes(10)).     assertThat(convert("+10", DataUnit.KILOBYTES)).isEqualTo(DataSize.ofKilobytes(10)).     assertThat(convert("-10", DataUnit.KILOBYTES)).isEqualTo(DataSize.ofKilobytes(-10)). }
false;public;0;6;;@Test public void convertWhenBadFormatShouldThrowException() {     assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> convert("10WB")).withMessageContaining("'10WB' is not a valid data size"). }
false;public;0;4;;@Test public void convertWhenEmptyShouldReturnNull() {     assertThat(convert("")).isNull(). }
false;private;1;3;;private DataSize convert(String source) {     return this.conversionService.convert(source, DataSize.class). }
false;private;2;4;;private DataSize convert(String source, DataUnit unit) {     return (DataSize) this.conversionService.convert(source, TypeDescriptor.forObject(source), MockDataSizeTypeDescriptor.get(unit)). }
false;public,static;0;4;;@Parameters(name = "{0}") public static Iterable<Object[]> conversionServices() {     return new ConversionServiceParameters(new StringToDataSizeConverter()). }
