commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void analysisWithNullEnvironment() {     InvalidConfigurationPropertyValueException failure = new InvalidConfigurationPropertyValueException("test.property", "invalid", "This is not valid.").     FailureAnalysis analysis = new InvalidConfigurationPropertyValueFailureAnalyzer().analyze(failure).     assertThat(analysis).isNull(). }
false;public;0;17;;@Test public void analysisWithKnownProperty() {     MapPropertySource source = new MapPropertySource("test", Collections.singletonMap("test.property", "invalid")).     this.environment.getPropertySources().addFirst(OriginCapablePropertySource.get(source)).     InvalidConfigurationPropertyValueException failure = new InvalidConfigurationPropertyValueException("test.property", "invalid", "This is not valid.").     FailureAnalysis analysis = performAnalysis(failure).     assertCommonParts(failure, analysis).     assertThat(analysis.getAction()).contains("Review the value of the property with the provided reason.").     assertThat(analysis.getDescription()).contains("Validation failed for the following reason").contains("This is not valid.").doesNotContain("Additionally, this property is also set"). }
false;public;0;13;;@Test public void analysisWithKnownPropertyAndNoReason() {     MapPropertySource source = new MapPropertySource("test", Collections.singletonMap("test.property", "invalid")).     this.environment.getPropertySources().addFirst(OriginCapablePropertySource.get(source)).     InvalidConfigurationPropertyValueException failure = new InvalidConfigurationPropertyValueException("test.property", "invalid", null).     FailureAnalysis analysis = performAnalysis(failure).     assertThat(analysis.getAction()).contains("Review the value of the property.").     assertThat(analysis.getDescription()).contains("No reason was provided.").doesNotContain("Additionally, this property is also set"). }
false;public;0;25;;@Test public void analysisWithKnownPropertyAndOtherCandidates() {     MapPropertySource source = new MapPropertySource("test", Collections.singletonMap("test.property", "invalid")).     MapPropertySource additional = new MapPropertySource("additional", Collections.singletonMap("test.property", "valid")).     MapPropertySource another = new MapPropertySource("another", Collections.singletonMap("test.property", "test")).     this.environment.getPropertySources().addFirst(OriginCapablePropertySource.get(source)).     this.environment.getPropertySources().addLast(additional).     this.environment.getPropertySources().addLast(OriginCapablePropertySource.get(another)).     InvalidConfigurationPropertyValueException failure = new InvalidConfigurationPropertyValueException("test.property", "invalid", "This is not valid.").     FailureAnalysis analysis = performAnalysis(failure).     assertCommonParts(failure, analysis).     assertThat(analysis.getAction()).contains("Review the value of the property with the provided reason.").     assertThat(analysis.getDescription()).contains("Additionally, this property is also set in the following " + "property sources:").contains("In 'additional' with the value 'valid'").contains("In 'another' with the value 'test' (originating from 'TestOrigin test.property')"). }
false;public;0;6;;@Test public void analysisWithUnknownKey() {     InvalidConfigurationPropertyValueException failure = new InvalidConfigurationPropertyValueException("test.key.not.defined", "invalid", "This is not valid.").     assertThat(performAnalysis(failure)).isNull(). }
false;private;2;6;;private void assertCommonParts(InvalidConfigurationPropertyValueException failure, FailureAnalysis analysis) {     assertThat(analysis.getDescription()).contains("test.property").contains("invalid").contains("TestOrigin test.property").     assertThat(analysis.getCause()).isSameAs(failure). }
false;private;1;6;;private FailureAnalysis performAnalysis(InvalidConfigurationPropertyValueException failure) {     InvalidConfigurationPropertyValueFailureAnalyzer analyzer = new InvalidConfigurationPropertyValueFailureAnalyzer().     analyzer.setEnvironment(this.environment).     return analyzer.analyze(failure). }
false;public;1;4;;@Override public Object getProperty(String name) {     return this.propertySource.getProperty(name). }
false;public;0;4;;@Override public String[] getPropertyNames() {     return this.propertySource.getPropertyNames(). }
false;public;0;4;;@Override public String toString() {     return "TestOrigin " + name. }
false;public;1;11;;@Override public Origin getOrigin(String name) {     return new Origin() {          @Override         public String toString() {             return "TestOrigin " + name.         }     }. }
false;static;1;4;;static <T> OriginCapablePropertySource<T> get(EnumerablePropertySource<T> propertySource) {     return new OriginCapablePropertySource<>(propertySource). }
