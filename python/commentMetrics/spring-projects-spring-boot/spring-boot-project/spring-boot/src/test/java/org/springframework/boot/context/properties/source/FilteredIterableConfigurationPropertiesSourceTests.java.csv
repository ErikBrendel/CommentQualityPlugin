commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void iteratorShouldFilterNames() {     MockConfigurationPropertySource source = (MockConfigurationPropertySource) createTestSource().     IterableConfigurationPropertySource filtered = source.filter(this::noBrackets).     assertThat(filtered.iterator()).extracting(ConfigurationPropertyName::toString).containsExactly("a", "b", "c"). }
false;protected;1;5;;@Override protected ConfigurationPropertySource convertSource(MockConfigurationPropertySource source) {     return source. }
false;public;0;12;;@Test public void containsDescendantOfShouldUseContents() {     MockConfigurationPropertySource source = new MockConfigurationPropertySource().     source.put("foo.bar.baz", "1").     source.put("foo.bar[0]", "1").     source.put("faf.bar[0]", "1").     IterableConfigurationPropertySource filtered = source.filter(this::noBrackets).     assertThat(filtered.containsDescendantOf(ConfigurationPropertyName.of("foo"))).isEqualTo(ConfigurationPropertyState.PRESENT).     assertThat(filtered.containsDescendantOf(ConfigurationPropertyName.of("faf"))).isEqualTo(ConfigurationPropertyState.ABSENT). }
false;private;1;3;;private boolean noBrackets(ConfigurationPropertyName name) {     return !name.toString().contains("["). }
