commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void convertFromInetAddressToStringShouldConvert() throws UnknownHostException {     assumeResolves("example.com", true).     InetAddress address = InetAddress.getByName("example.com").     String converted = this.conversionService.convert(address, String.class).     assertThat(converted).isEqualTo(address.getHostAddress()). }
false;public;0;7;;@Test public void convertFromStringToInetAddressShouldConvert() {     assumeResolves("example.com", true).     InetAddress converted = this.conversionService.convert("example.com", InetAddress.class).     assertThat(converted.toString()).startsWith("example.com"). }
false;public;0;7;;@Test public void convertFromStringToInetAddressWhenHostDoesNotExistShouldThrowException() {     String missingDomain = "ireallydontexist.example.com".     assumeResolves(missingDomain, false).     assertThatExceptionOfType(ConversionFailedException.class).isThrownBy(() -> this.conversionService.convert(missingDomain, InetAddress.class)). }
false;private;2;7;;private void assumeResolves(String host, boolean expectedToResolve) {     boolean resolved = isResolvable(host).     if (resolved != expectedToResolve) {         throw new AssumptionViolatedException("Host " + host + " resolved " + resolved).     } }
false;private;1;9;;private boolean isResolvable(String host) {     try {         InetAddress.getByName(host).         return true.     } catch (UnknownHostException ex) {         return false.     } }
false;public,static;0;4;;@Parameters(name = "{0}") public static Iterable<Object[]> conversionServices() {     return new ConversionServiceParameters(new InetAddressFormatter()). }
