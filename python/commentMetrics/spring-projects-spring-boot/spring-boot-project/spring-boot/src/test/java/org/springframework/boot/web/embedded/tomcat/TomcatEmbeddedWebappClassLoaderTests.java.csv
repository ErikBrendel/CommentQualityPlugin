commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void getResourceFindsResourceFromParentClassLoader() throws Exception {     File war = createWar().     withWebappClassLoader(war, (classLoader) -> assertThat(classLoader.getResource("test.txt")).isEqualTo(new URL(webInfClassesUrlString(war) + "test.txt"))). }
false;public;0;11;;@Test public void getResourcesOnlyFindsResourcesFromParentClassLoader() throws Exception {     File warFile = createWar().     withWebappClassLoader(warFile, (classLoader) -> {         List<URL> urls = new ArrayList<>().         CollectionUtils.toIterator(classLoader.getResources("test.txt")).forEachRemaining(urls::add).         assertThat(urls).containsExactly(new URL(webInfClassesUrlString(warFile) + "test.txt")).     }). }
false;private;2;18;;private void withWebappClassLoader(File war, ClassLoaderConsumer consumer) throws Exception {     URLClassLoader parent = new URLClassLoader(new URL[] { new URL(webInfClassesUrlString(war)) }, null).     try (ParallelWebappClassLoader classLoader = new TomcatEmbeddedWebappClassLoader(parent)) {         StandardContext context = new StandardContext().         context.setName("test").         StandardRoot resources = new StandardRoot().         resources.setContext(context).         resources.addJarResources(new WarResourceSet(resources, "/", war.getAbsolutePath())).         resources.start().         classLoader.setResources(resources).         classLoader.start().         consumer.accept(classLoader).     } }
false;private;1;3;;private String webInfClassesUrlString(File war) {     return "jar:file:" + war.getAbsolutePath() + "!/WEB-INF/classes/". }
false;private;0;9;;private File createWar() throws IOException {     File warFile = this.temp.newFile("test.war").     try (JarOutputStream warOut = new JarOutputStream(new FileOutputStream(warFile))) {         createEntries(warOut, "WEB-INF/", "WEB-INF/classes/", "WEB-INF/classes/test.txt").     }     return warFile. }
false;private;2;6;;private void createEntries(JarOutputStream out, String... names) throws IOException {     for (String name : names) {         out.putNextEntry(new ZipEntry(name)).         out.closeEntry().     } }
false;;1;1;;void accept(ClassLoader classLoader) throws Exception.
