commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void inputIsImmutable() {     Properties p = new Properties().     p.put("foo", "bar").     InfoProperties infoProperties = new InfoProperties(p).     assertThat(infoProperties.get("foo")).isEqualTo("bar").     p.remove("foo").     assertThat(infoProperties.get("foo")).isEqualTo("bar"). }
false;public;0;12;;@Test public void iterator() {     Properties p = new Properties().     p.put("one", "first").     p.put("two", "second").     InfoProperties infoProperties = new InfoProperties(p).     Properties copy = new Properties().     for (InfoProperties.Entry entry : infoProperties) {         copy.put(entry.getKey(), entry.getValue()).     }     assertThat(p).isEqualTo(copy). }
false;public;0;8;;@Test public void removeNotSupported() {     Properties p = new Properties().     p.put("foo", "bar").     InfoProperties infoProperties = new InfoProperties(p).     assertThatExceptionOfType(UnsupportedOperationException.class).isThrownBy(infoProperties.iterator()::remove). }
false;public;0;11;;@Test public void toPropertySources() {     Properties p = new Properties().     p.put("one", "first").     p.put("two", "second").     InfoProperties infoProperties = new MyInfoProperties(p).     PropertySource<?> source = infoProperties.toPropertySource().     assertThat(source.getProperty("one")).isEqualTo("first").     assertThat(source.getProperty("two")).isEqualTo("second").     assertThat(source.getName()).isEqualTo("MyInfoProperties"). }
