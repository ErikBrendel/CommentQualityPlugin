commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setup() {     this.environment = new MockEnvironment().     this.initializationContext = new LoggingInitializationContext(this.environment).     this.configurator = new SpringBootJoranConfigurator(this.initializationContext).     StaticLoggerBinder binder = StaticLoggerBinder.getSingleton().     this.context = (LoggerContext) binder.getLoggerFactory().     this.logger = this.context.getLogger(getClass()). }
false;public;0;6;;@After public void reset() {     this.context.stop().     new BasicConfigurator().configure((LoggerContext) LoggerFactory.getILoggerFactory()). }
false;public;0;7;;@Test public void profileActive() throws Exception {     this.environment.setActiveProfiles("production").     initialize("production-profile.xml").     this.logger.trace("Hello").     this.out.expect(containsString("Hello")). }
false;public;0;7;;@Test public void multipleNamesFirstProfileActive() throws Exception {     this.environment.setActiveProfiles("production").     initialize("multi-profile-names.xml").     this.logger.trace("Hello").     this.out.expect(containsString("Hello")). }
false;public;0;7;;@Test public void multipleNamesSecondProfileActive() throws Exception {     this.environment.setActiveProfiles("test").     initialize("multi-profile-names.xml").     this.logger.trace("Hello").     this.out.expect(containsString("Hello")). }
false;public;0;6;;@Test public void profileNotActive() throws Exception {     initialize("production-profile.xml").     this.logger.trace("Hello").     this.out.expect(not(containsString("Hello"))). }
false;public;0;7;;@Test public void profileExpressionMatchFirst() throws Exception {     this.environment.setActiveProfiles("production").     initialize("profile-expression.xml").     this.logger.trace("Hello").     this.out.expect(containsString("Hello")). }
false;public;0;7;;@Test public void profileExpressionMatchSecond() throws Exception {     this.environment.setActiveProfiles("test").     initialize("profile-expression.xml").     this.logger.trace("Hello").     this.out.expect(containsString("Hello")). }
false;public;0;7;;@Test public void profileExpressionNoMatch() throws Exception {     this.environment.setActiveProfiles("development").     initialize("profile-expression.xml").     this.logger.trace("Hello").     this.out.expect(not(containsString("Hello"))). }
false;public;0;4;;@Test public void profileNestedActiveActive() throws Exception {     doTestNestedProfile(true, "outer", "inner"). }
false;public;0;4;;@Test public void profileNestedActiveNotActive() throws Exception {     doTestNestedProfile(false, "outer"). }
false;public;0;4;;@Test public void profileNestedNotActiveActive() throws Exception {     doTestNestedProfile(false, "inner"). }
false;public;0;4;;@Test public void profileNestedNotActiveNotActive() throws Exception {     doTestNestedProfile(false). }
false;public;0;7;;@Test public void springProperty() throws Exception {     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, "my.example-property=test").     initialize("property.xml").     assertThat(this.context.getProperty("MINE")).isEqualTo("test"). }
false;public;0;8;;@Test public void relaxedSpringProperty() throws Exception {     TestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment, "my.EXAMPLE_PROPERTY=test").     ConfigurationPropertySources.attach(this.environment).     initialize("property.xml").     assertThat(this.context.getProperty("MINE")).isEqualTo("test"). }
false;public;0;5;;@Test public void springPropertyNoValue() throws Exception {     initialize("property.xml").     assertThat(this.context.getProperty("SIMPLE")).isNull(). }
false;public;0;5;;@Test public void relaxedSpringPropertyNoValue() throws Exception {     initialize("property.xml").     assertThat(this.context.getProperty("MINE")).isNull(). }
false;public;0;5;;@Test public void springPropertyWithDefaultValue() throws Exception {     initialize("property-default-value.xml").     assertThat(this.context.getProperty("SIMPLE")).isEqualTo("foo"). }
false;public;0;5;;@Test public void relaxedSpringPropertyWithDefaultValue() throws Exception {     initialize("property-default-value.xml").     assertThat(this.context.getProperty("MINE")).isEqualTo("bar"). }
false;private;2;13;;private void doTestNestedProfile(boolean expected, String... profiles) throws JoranException {     this.environment.setActiveProfiles(profiles).     initialize("nested.xml").     this.logger.trace("Hello").     if (expected) {         this.out.expect(containsString("Hello")).     } else {         this.out.expect(not(containsString("Hello"))).     } }
false;private;1;4;;private void initialize(String config) throws JoranException {     this.configurator.setContext(this.context).     this.configurator.doConfigure(getClass().getResourceAsStream(config)). }
