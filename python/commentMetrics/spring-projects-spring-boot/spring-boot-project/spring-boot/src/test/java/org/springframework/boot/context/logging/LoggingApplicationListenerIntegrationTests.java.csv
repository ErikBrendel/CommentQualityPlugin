commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void loggingSystemRegisteredInTheContext() {     try (ConfigurableApplicationContext context = new SpringApplicationBuilder(SampleService.class).web(WebApplicationType.NONE).run()) {         SampleService service = context.getBean(SampleService.class).         assertThat(service.loggingSystem).isNotNull().     } }
false;public;1;4;;@Override public void onApplicationEvent(ApplicationStartingEvent event) {     this.logger.info("Child application starting"). }
false;public;0;16;;@Test public void loggingPerformedDuringChildApplicationStartIsNotLost() {     new SpringApplicationBuilder(Config.class).web(WebApplicationType.NONE).child(Config.class).web(WebApplicationType.NONE).listeners(new ApplicationListener<ApplicationStartingEvent>() {          private final Logger logger = LoggerFactory.getLogger(getClass()).          @Override         public void onApplicationEvent(ApplicationStartingEvent event) {             this.logger.info("Child application starting").         }     }).run().     assertThat(this.outputCapture.toString()).contains("Child application starting"). }
