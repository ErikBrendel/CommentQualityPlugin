commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void createFromScan() {     this.context = new AnnotationConfigReactiveWebServerApplicationContext(ExampleReactiveWebServerApplicationConfiguration.class.getPackage().getName()).     verifyContext(). }
false;public;0;6;;@Test public void createFromConfigClass() {     this.context = new AnnotationConfigReactiveWebServerApplicationContext(ExampleReactiveWebServerApplicationConfiguration.class).     verifyContext(). }
false;public;0;7;;@Test public void registerAndRefresh() {     this.context = new AnnotationConfigReactiveWebServerApplicationContext().     this.context.register(ExampleReactiveWebServerApplicationConfiguration.class).     this.context.refresh().     verifyContext(). }
false;public;0;10;;@Test public void multipleRegistersAndRefresh() {     this.context = new AnnotationConfigReactiveWebServerApplicationContext().     this.context.register(WebServerConfiguration.class).     this.context.register(HttpHandlerConfiguration.class).     this.context.refresh().     assertThat(this.context.getBeansOfType(WebServerConfiguration.class)).hasSize(1).     assertThat(this.context.getBeansOfType(HttpHandlerConfiguration.class)).hasSize(1). }
false;public;0;8;;@Test public void scanAndRefresh() {     this.context = new AnnotationConfigReactiveWebServerApplicationContext().     this.context.scan(ExampleReactiveWebServerApplicationConfiguration.class.getPackage().getName()).     this.context.refresh().     verifyContext(). }
false;public;0;7;;@Test public void httpHandlerInitialization() {     // gh-14666     this.context = new AnnotationConfigReactiveWebServerApplicationContext(InitializationTestConfig.class).     verifyContext(). }
false;private;0;10;;private void verifyContext() {     MockReactiveWebServerFactory factory = this.context.getBean(MockReactiveWebServerFactory.class).     HttpHandler expectedHandler = this.context.getBean(HttpHandler.class).     HttpHandler actualHandler = factory.getWebServer().getHttpHandler().     if (actualHandler instanceof ServerManager) {         actualHandler = ((ServerManager) actualHandler).getHandler().     }     assertThat(actualHandler).isEqualTo(expectedHandler). }
false;public;0;4;;@Bean public ReactiveWebServerFactory webServerFactory() {     return new MockReactiveWebServerFactory(). }
false;public;0;4;;@Bean public HttpHandler httpHandler() {     return mock(HttpHandler.class). }
false;public;0;4;;@Bean public ReactiveWebServerFactory webServerFactory() {     return new MockReactiveWebServerFactory(). }
false;public;0;8;;@Bean public HttpHandler httpHandler() {     if (!addedListener) {         throw new RuntimeException("Handlers should be added after listeners, we're being initialized too early!").     }     return mock(HttpHandler.class). }
false;public;0;4;;@Bean public Listener listener() {     return new Listener(). }
false;public;1;7;;@Override public void addApplicationListenerBean(String listenerBeanName) {     super.addApplicationListenerBean(listenerBeanName).     if ("listener".equals(listenerBeanName)) {         addedListener = true.     } }
false;public;0;14;;@Bean public ApplicationEventMulticaster applicationEventMulticaster() {     return new SimpleApplicationEventMulticaster() {          @Override         public void addApplicationListenerBean(String listenerBeanName) {             super.addApplicationListenerBean(listenerBeanName).             if ("listener".equals(listenerBeanName)) {                 addedListener = true.             }         }     }. }
false;public;1;3;;@Override public void onApplicationEvent(ContextRefreshedEvent event) { }
