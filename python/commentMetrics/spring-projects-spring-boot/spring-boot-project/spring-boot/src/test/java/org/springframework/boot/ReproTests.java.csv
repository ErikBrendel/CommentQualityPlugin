commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@After public void cleanUp() {     if (this.context != null) {         this.context.close().     } }
false;public;0;14;;@Test public void enableProfileViaApplicationProperties() {     // gh-308     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     this.context = application.run("--spring.config.name=enableprofileviaapplicationproperties", "--spring.profiles.active=dev").     assertThat(this.context.getEnvironment().acceptsProfiles(Profiles.of("dev"))).isTrue().     assertThat(this.context.getEnvironment().acceptsProfiles(Profiles.of("a"))).isTrue(). }
false;public;0;9;;@Test public void activeProfilesWithYamlAndCommandLine() {     // gh-322, gh-342     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     String configName = "--spring.config.name=activeprofilerepro".     this.context = application.run(configName, "--spring.profiles.active=B").     assertVersionProperty(this.context, "B", "B"). }
false;public;0;9;;@Test public void activeProfilesWithYamlOnly() {     // gh-322, gh-342     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     String configName = "--spring.config.name=activeprofilerepro".     this.context = application.run(configName).     assertVersionProperty(this.context, "B", "B"). }
false;public;0;9;;@Test public void orderActiveProfilesWithYamlOnly() {     // gh-322, gh-342     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     String configName = "--spring.config.name=activeprofilerepro-ordered".     this.context = application.run(configName).     assertVersionProperty(this.context, "B", "A", "B"). }
false;public;0;9;;@Test public void commandLineBeatsProfilesWithYaml() {     // gh-322, gh-342     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     String configName = "--spring.config.name=activeprofilerepro".     this.context = application.run(configName, "--spring.profiles.active=C").     assertVersionProperty(this.context, "C", "C"). }
false;public;0;9;;@Test public void orderProfilesWithYaml() {     // gh-322, gh-342     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     String configName = "--spring.config.name=activeprofilerepro".     this.context = application.run(configName, "--spring.profiles.active=A,C").     assertVersionProperty(this.context, "C", "A", "C"). }
false;public;0;9;;@Test public void reverseOrderOfProfilesWithYaml() {     // gh-322, gh-342     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     String configName = "--spring.config.name=activeprofilerepro".     this.context = application.run(configName, "--spring.profiles.active=C,A").     assertVersionProperty(this.context, "A", "C", "A"). }
false;public;0;9;;@Test public void activeProfilesWithYamlAndCommandLineAndNoOverride() {     // gh-322, gh-342     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     String configName = "--spring.config.name=activeprofilerepro-without-override".     this.context = application.run(configName, "--spring.profiles.active=B").     assertVersionProperty(this.context, "B", "B"). }
false;public;0;9;;@Test public void activeProfilesWithYamlOnlyAndNoOverride() {     // gh-322, gh-342     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     String configName = "--spring.config.name=activeprofilerepro-without-override".     this.context = application.run(configName).     assertVersionProperty(this.context, null). }
false;public;0;9;;@Test public void commandLineBeatsProfilesWithYamlAndNoOverride() {     // gh-322, gh-342     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     String configName = "--spring.config.name=activeprofilerepro-without-override".     this.context = application.run(configName, "--spring.profiles.active=C").     assertVersionProperty(this.context, "C", "C"). }
false;public;0;9;;@Test public void orderProfilesWithYamlAndNoOverride() {     // gh-322, gh-342     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     String configName = "--spring.config.name=activeprofilerepro-without-override".     this.context = application.run(configName, "--spring.profiles.active=A,C").     assertVersionProperty(this.context, "C", "A", "C"). }
false;public;0;9;;@Test public void reverseOrderOfProfilesWithYamlAndNoOverride() {     // gh-322, gh-342     SpringApplication application = new SpringApplication(Config.class).     application.setWebApplicationType(WebApplicationType.NONE).     String configName = "--spring.config.name=activeprofilerepro-without-override".     this.context = application.run(configName, "--spring.profiles.active=C,A").     assertVersionProperty(this.context, "A", "C", "A"). }
false;private;3;7;;private void assertVersionProperty(ConfigurableApplicationContext context, String expectedVersion, String... expectedActiveProfiles) {     assertThat(context.getEnvironment().getActiveProfiles()).isEqualTo(expectedActiveProfiles).     assertThat(context.getEnvironment().getProperty("version")).as("version mismatch").isEqualTo(expectedVersion). }
