commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before public void setup() {     LocaleContextHolder.setLocale(Locale.US). }
false;public;0;4;;@After public void cleanup() {     LocaleContextHolder.resetLocaleContext(). }
false;public;0;11;;@Test public void bindExceptionWithFieldErrorsDueToValidationFailure() {     FailureAnalysis analysis = performAnalysis(FieldValidationFailureConfiguration.class).     assertThat(analysis.getDescription()).contains(failure("test.foo.foo", "null", "must not be null")).     assertThat(analysis.getDescription()).contains(failure("test.foo.value", "0", "at least five")).     assertThat(analysis.getDescription()).contains(failure("test.foo.nested.bar", "null", "must not be null")). }
false;public;0;7;;@Test public void bindExceptionWithOriginDueToValidationFailure() {     FailureAnalysis analysis = performAnalysis(FieldValidationFailureConfiguration.class, "test.foo.value=4").     assertThat(analysis.getDescription()).contains("Origin: \"test.foo.value\" from property source \"test\""). }
false;public;0;7;;@Test public void bindExceptionWithObjectErrorsDueToValidationFailure() {     FailureAnalysis analysis = performAnalysis(ObjectValidationFailureConfiguration.class).     assertThat(analysis.getDescription()).contains("Reason: This object could not be bound."). }
false;public;0;12;;@Test public void otherBindExceptionShouldReturnAnalysis() {     BindException cause = new BindException(new FieldValidationFailureProperties(), "fieldValidationFailureProperties").     cause.addError(new FieldError("test", "value", "must not be null")).     BeanCreationException rootFailure = new BeanCreationException("bean creation failure", cause).     FailureAnalysis analysis = new BindValidationFailureAnalyzer().analyze(rootFailure, rootFailure).     assertThat(analysis.getDescription()).contains(failure("test.value", "null", "must not be null")). }
false;private,static;3;4;;private static String failure(String property, String value, String reason) {     return String.format("Property: %s%n    Value: %s%n    Reason: %s", property, value, reason). }
false;private;2;6;;private FailureAnalysis performAnalysis(Class<?> configuration, String... environment) {     BeanCreationException failure = createFailure(configuration, environment).     assertThat(failure).isNotNull().     return new BindValidationFailureAnalyzer().analyze(failure). }
false;private;2;14;;private BeanCreationException createFailure(Class<?> configuration, String... environment) {     try {         AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext().         addEnvironment(context, environment).         context.register(configuration).         context.refresh().         context.close().         return null.     } catch (BeanCreationException ex) {         return ex.     } }
false;private;2;12;;private void addEnvironment(AnnotationConfigApplicationContext context, String[] environment) {     MutablePropertySources sources = context.getEnvironment().getPropertySources().     Map<String, Object> map = new HashMap<>().     for (String pair : environment) {         int index = pair.indexOf("=").         String key = (index > 0) ? pair.substring(0, index) : pair.         String value = (index > 0) ? pair.substring(index + 1) : "".         map.put(key.trim(), value.trim()).     }     sources.addFirst(new MapPropertySource("test", map)). }
false;public;0;3;;public String getFoo() {     return this.foo. }
false;public;1;3;;public void setFoo(String foo) {     this.foo = foo. }
false;public;0;3;;public int getValue() {     return this.value. }
false;public;1;3;;public void setValue(int value) {     this.value = value. }
false;public;0;3;;public FieldValidationFailureProperties.Nested getNested() {     return this.nested. }
false;public;1;3;;public void setNested(FieldValidationFailureProperties.Nested nested) {     this.nested = nested. }
false;public;0;3;;public String getBar() {     return this.bar. }
false;public;1;3;;public void setBar(String bar) {     this.bar = bar. }
false;public;2;4;;@Override public void validate(Object target, Errors errors) {     errors.reject("my.objectError", "This object could not be bound."). }
false;public;1;4;;@Override public boolean supports(Class<?> clazz) {     return true. }
