commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void canConvertFromStringToEnumShouldReturnTrue() {     assertThat(this.conversionService.canConvert(String.class, TestEnum.class)).isTrue(). }
false;public;0;5;;@Test public void canConvertFromStringToEnumSubclassShouldReturnTrue() {     assertThat(this.conversionService.canConvert(String.class, TestSubclassEnum.ONE.getClass())).isTrue(). }
false;public;0;9;;@Test public void convertFromStringToEnumWhenExactMatchShouldConvertValue() {     ConversionService service = this.conversionService.     assertThat(service.convert("", TestEnum.class)).isNull().     assertThat(service.convert("ONE", TestEnum.class)).isEqualTo(TestEnum.ONE).     assertThat(service.convert("TWO", TestEnum.class)).isEqualTo(TestEnum.TWO).     assertThat(service.convert("THREE_AND_FOUR", TestEnum.class)).isEqualTo(TestEnum.THREE_AND_FOUR). }
false;public;0;15;;@Test public void convertFromStringToEnumWhenFuzzyMatchShouldConvertValue() {     ConversionService service = this.conversionService.     assertThat(service.convert("", TestEnum.class)).isNull().     assertThat(service.convert("one", TestEnum.class)).isEqualTo(TestEnum.ONE).     assertThat(service.convert("tWo", TestEnum.class)).isEqualTo(TestEnum.TWO).     assertThat(service.convert("three_and_four", TestEnum.class)).isEqualTo(TestEnum.THREE_AND_FOUR).     assertThat(service.convert("threeandfour", TestEnum.class)).isEqualTo(TestEnum.THREE_AND_FOUR).     assertThat(service.convert("three-and-four", TestEnum.class)).isEqualTo(TestEnum.THREE_AND_FOUR).     assertThat(service.convert("threeAndFour", TestEnum.class)).isEqualTo(TestEnum.THREE_AND_FOUR). }
false;public;0;14;;@Test public void convertFromStringToEnumWhenUsingNonEnglishLocaleShouldConvertValue() {     Locale defaultLocale = Locale.getDefault().     try {         Locale.setDefault(new Locale("tr")).         LocaleSensitiveEnum result = this.conversionService.convert("accept-case-insensitive-properties", LocaleSensitiveEnum.class).         assertThat(result).isEqualTo(LocaleSensitiveEnum.ACCEPT_CASE_INSENSITIVE_PROPERTIES).     } finally {         Locale.setDefault(defaultLocale).     } }
false;public,static;0;5;;@Parameters(name = "{0}") public static Iterable<Object[]> conversionServices() {     return new ConversionServiceParameters(new StringToEnumIgnoringCaseConverterFactory()). }
false;public;0;4;;@Override public String toString() {     return "foo". }
