commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;17;;@Parameters(name = "{0} {2}") public static List<Object[]> parameters() {     DatabaseDriver[] databaseDrivers = DatabaseDriver.values().     List<Object[]> parameters = new ArrayList<>().     for (DatabaseDriver databaseDriver : databaseDrivers) {         if (EXCLUDED_DRIVERS.contains(databaseDriver)) {             continue.         }         parameters.add(new Object[] { databaseDriver, databaseDriver.getDriverClassName(), Driver.class }).         if (databaseDriver.getXaDataSourceClassName() != null) {             parameters.add(new Object[] { databaseDriver, databaseDriver.getXaDataSourceClassName(), XADataSource.class }).         }     }     return parameters. }
false;public;0;5;;@Test public void databaseClassIsOfRequiredType() throws Exception {     assertThat(getInterfaceNames(this.className.replace('.', '/'))).contains(this.requiredType.getName().replace('.', '/')). }
false;private;1;11;;private List<String> getInterfaceNames(String className) throws IOException {     // Use ASM to avoid unwanted side-effects of loading JDBC drivers     ClassReader classReader = new ClassReader(getClass().getResourceAsStream("/" + className + ".class")).     List<String> interfaceNames = new ArrayList<>().     for (String name : classReader.getInterfaces()) {         interfaceNames.add(name).         interfaceNames.addAll(getInterfaceNames(name)).     }     return interfaceNames. }
