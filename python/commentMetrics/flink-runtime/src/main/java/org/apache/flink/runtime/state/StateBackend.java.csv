# id;timestamp;commentText;codeText;commentWords;codeWords
StateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1445247002;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
StateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1445849929;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
StateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1448126995;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
StateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1448967451;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
StateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1450118410;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
StateBackend -> OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;1486992577;Creates a new {@link OperatorStateBackend} that can be used for storing operator state.__<p>Operator state is state that is associated with parallel operator (or function) instances,_rather than with keys.__@param env The runtime environment of the executing task._@param operatorIdentifier The identifier of the operator whose state should be stored.__@return The OperatorStateBackend for operator identified by the job and operator identifier.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;creates,a,new,link,operator,state,backend,that,can,be,used,for,storing,operator,state,p,operator,state,is,state,that,is,associated,with,parallel,operator,or,function,instances,rather,than,with,keys,param,env,the,runtime,environment,of,the,executing,task,param,operator,identifier,the,identifier,of,the,operator,whose,state,should,be,stored,return,the,operator,state,backend,for,operator,identified,by,the,job,and,operator,identifier,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;operator,state,backend,create,operator,state,backend,environment,env,string,operator,identifier,throws,exception
StateBackend -> OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;1487264183;Creates a new {@link OperatorStateBackend} that can be used for storing operator state.__<p>Operator state is state that is associated with parallel operator (or function) instances,_rather than with keys.__@param env The runtime environment of the executing task._@param operatorIdentifier The identifier of the operator whose state should be stored.__@return The OperatorStateBackend for operator identified by the job and operator identifier.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;creates,a,new,link,operator,state,backend,that,can,be,used,for,storing,operator,state,p,operator,state,is,state,that,is,associated,with,parallel,operator,or,function,instances,rather,than,with,keys,param,env,the,runtime,environment,of,the,executing,task,param,operator,identifier,the,identifier,of,the,operator,whose,state,should,be,stored,return,the,operator,state,backend,for,operator,identified,by,the,job,and,operator,identifier,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;operator,state,backend,create,operator,state,backend,environment,env,string,operator,identifier,throws,exception
StateBackend -> OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;1509045960;Creates a new {@link OperatorStateBackend} that can be used for storing operator state.__<p>Operator state is state that is associated with parallel operator (or function) instances,_rather than with keys.__@param env The runtime environment of the executing task._@param operatorIdentifier The identifier of the operator whose state should be stored.__@return The OperatorStateBackend for operator identified by the job and operator identifier.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;creates,a,new,link,operator,state,backend,that,can,be,used,for,storing,operator,state,p,operator,state,is,state,that,is,associated,with,parallel,operator,or,function,instances,rather,than,with,keys,param,env,the,runtime,environment,of,the,executing,task,param,operator,identifier,the,identifier,of,the,operator,whose,state,should,be,stored,return,the,operator,state,backend,for,operator,identified,by,the,job,and,operator,identifier,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;operator,state,backend,create,operator,state,backend,environment,env,string,operator,identifier,throws,exception
StateBackend -> OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;1515600846;Creates a new {@link OperatorStateBackend} that can be used for storing operator state.__<p>Operator state is state that is associated with parallel operator (or function) instances,_rather than with keys.__@param env The runtime environment of the executing task._@param operatorIdentifier The identifier of the operator whose state should be stored.__@return The OperatorStateBackend for operator identified by the job and operator identifier.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;creates,a,new,link,operator,state,backend,that,can,be,used,for,storing,operator,state,p,operator,state,is,state,that,is,associated,with,parallel,operator,or,function,instances,rather,than,with,keys,param,env,the,runtime,environment,of,the,executing,task,param,operator,identifier,the,identifier,of,the,operator,whose,state,should,be,stored,return,the,operator,state,backend,for,operator,identified,by,the,job,and,operator,identifier,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;operator,state,backend,create,operator,state,backend,environment,env,string,operator,identifier,throws,exception
StateBackend -> OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;1517414098;Creates a new {@link OperatorStateBackend} that can be used for storing operator state.__<p>Operator state is state that is associated with parallel operator (or function) instances,_rather than with keys.__@param env The runtime environment of the executing task._@param operatorIdentifier The identifier of the operator whose state should be stored.__@return The OperatorStateBackend for operator identified by the job and operator identifier.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;creates,a,new,link,operator,state,backend,that,can,be,used,for,storing,operator,state,p,operator,state,is,state,that,is,associated,with,parallel,operator,or,function,instances,rather,than,with,keys,param,env,the,runtime,environment,of,the,executing,task,param,operator,identifier,the,identifier,of,the,operator,whose,state,should,be,stored,return,the,operator,state,backend,for,operator,identified,by,the,job,and,operator,identifier,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;operator,state,backend,create,operator,state,backend,environment,env,string,operator,identifier,throws,exception
StateBackend -> OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;1530638621;Creates a new {@link OperatorStateBackend} that can be used for storing operator state.__<p>Operator state is state that is associated with parallel operator (or function) instances,_rather than with keys.__@param env The runtime environment of the executing task._@param operatorIdentifier The identifier of the operator whose state should be stored.__@return The OperatorStateBackend for operator identified by the job and operator identifier.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;creates,a,new,link,operator,state,backend,that,can,be,used,for,storing,operator,state,p,operator,state,is,state,that,is,associated,with,parallel,operator,or,function,instances,rather,than,with,keys,param,env,the,runtime,environment,of,the,executing,task,param,operator,identifier,the,identifier,of,the,operator,whose,state,should,be,stored,return,the,operator,state,backend,for,operator,identified,by,the,job,and,operator,identifier,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;operator,state,backend,create,operator,state,backend,environment,env,string,operator,identifier,throws,exception
StateBackend -> OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;1539939663;Creates a new {@link OperatorStateBackend} that can be used for storing operator state.__<p>Operator state is state that is associated with parallel operator (or function) instances,_rather than with keys.__@param env The runtime environment of the executing task._@param operatorIdentifier The identifier of the operator whose state should be stored.__@return The OperatorStateBackend for operator identified by the job and operator identifier.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;creates,a,new,link,operator,state,backend,that,can,be,used,for,storing,operator,state,p,operator,state,is,state,that,is,associated,with,parallel,operator,or,function,instances,rather,than,with,keys,param,env,the,runtime,environment,of,the,executing,task,param,operator,identifier,the,identifier,of,the,operator,whose,state,should,be,stored,return,the,operator,state,backend,for,operator,identified,by,the,job,and,operator,identifier,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;operator,state,backend,create,operator,state,backend,environment,env,string,operator,identifier,throws,exception
StateBackend -> OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;1550863001;Creates a new {@link OperatorStateBackend} that can be used for storing operator state.__<p>Operator state is state that is associated with parallel operator (or function) instances,_rather than with keys.__@param env The runtime environment of the executing task._@param operatorIdentifier The identifier of the operator whose state should be stored.__@return The OperatorStateBackend for operator identified by the job and operator identifier.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;OperatorStateBackend createOperatorStateBackend(Environment env, String operatorIdentifier) throws Exception_;creates,a,new,link,operator,state,backend,that,can,be,used,for,storing,operator,state,p,operator,state,is,state,that,is,associated,with,parallel,operator,or,function,instances,rather,than,with,keys,param,env,the,runtime,environment,of,the,executing,task,param,operator,identifier,the,identifier,of,the,operator,whose,state,should,be,stored,return,the,operator,state,backend,for,operator,identified,by,the,job,and,operator,identifier,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;operator,state,backend,create,operator,state,backend,environment,env,string,operator,identifier,throws,exception
StateBackend -> CheckpointStreamFactory createStreamFactory(JobID jobId, String operatorIdentifier) throws IOException_;1486992577;Creates a {@link CheckpointStreamFactory} that can be used to create streams_that should end up in a checkpoint.__@param jobId              The {@link JobID} of the job for which we are creating checkpoint streams._@param operatorIdentifier An identifier of the operator for which we create streams.;CheckpointStreamFactory createStreamFactory(JobID jobId, String operatorIdentifier) throws IOException_;creates,a,link,checkpoint,stream,factory,that,can,be,used,to,create,streams,that,should,end,up,in,a,checkpoint,param,job,id,the,link,job,id,of,the,job,for,which,we,are,creating,checkpoint,streams,param,operator,identifier,an,identifier,of,the,operator,for,which,we,create,streams;checkpoint,stream,factory,create,stream,factory,job,id,job,id,string,operator,identifier,throws,ioexception
StateBackend -> CheckpointStreamFactory createStreamFactory(JobID jobId, String operatorIdentifier) throws IOException_;1487264183;Creates a {@link CheckpointStreamFactory} that can be used to create streams_that should end up in a checkpoint.__@param jobId              The {@link JobID} of the job for which we are creating checkpoint streams._@param operatorIdentifier An identifier of the operator for which we create streams.;CheckpointStreamFactory createStreamFactory(JobID jobId, String operatorIdentifier) throws IOException_;creates,a,link,checkpoint,stream,factory,that,can,be,used,to,create,streams,that,should,end,up,in,a,checkpoint,param,job,id,the,link,job,id,of,the,job,for,which,we,are,creating,checkpoint,streams,param,operator,identifier,an,identifier,of,the,operator,for,which,we,create,streams;checkpoint,stream,factory,create,stream,factory,job,id,job,id,string,operator,identifier,throws,ioexception
StateBackend -> CheckpointStreamFactory createStreamFactory(JobID jobId, String operatorIdentifier) throws IOException_;1509045960;Creates a {@link CheckpointStreamFactory} that can be used to create streams_that should end up in a checkpoint.__<p>NOTE: This method will probably go into the {@link CheckpointStorage} in the future.__@param jobId              The {@link JobID} of the job for which we are creating checkpoint streams._@param operatorIdentifier An identifier of the operator for which we create streams.;CheckpointStreamFactory createStreamFactory(JobID jobId, String operatorIdentifier) throws IOException_;creates,a,link,checkpoint,stream,factory,that,can,be,used,to,create,streams,that,should,end,up,in,a,checkpoint,p,note,this,method,will,probably,go,into,the,link,checkpoint,storage,in,the,future,param,job,id,the,link,job,id,of,the,job,for,which,we,are,creating,checkpoint,streams,param,operator,identifier,an,identifier,of,the,operator,for,which,we,create,streams;checkpoint,stream,factory,create,stream,factory,job,id,job,id,string,operator,identifier,throws,ioexception
StateBackend -> CompletedCheckpointStorageLocation resolveCheckpoint(String externalPointer) throws IOException_;1517414098;Resolves the given pointer to a checkpoint/savepoint into a checkpoint location. The location_supports reading the checkpoint metadata, or disposing the checkpoint storage location.__<p>If the state backend cannot understand the format of the pointer (for example because it_was created by a different state backend) this method should throw an {@code IOException}.__@param externalPointer The external checkpoint pointer to resolve._@return The checkpoint location handle.__@throws IOException Thrown, if the state backend does not understand the pointer, or if_the pointer could not be resolved due to an I/O error.;CompletedCheckpointStorageLocation resolveCheckpoint(String externalPointer) throws IOException_;resolves,the,given,pointer,to,a,checkpoint,savepoint,into,a,checkpoint,location,the,location,supports,reading,the,checkpoint,metadata,or,disposing,the,checkpoint,storage,location,p,if,the,state,backend,cannot,understand,the,format,of,the,pointer,for,example,because,it,was,created,by,a,different,state,backend,this,method,should,throw,an,code,ioexception,param,external,pointer,the,external,checkpoint,pointer,to,resolve,return,the,checkpoint,location,handle,throws,ioexception,thrown,if,the,state,backend,does,not,understand,the,pointer,or,if,the,pointer,could,not,be,resolved,due,to,an,i,o,error;completed,checkpoint,storage,location,resolve,checkpoint,string,external,pointer,throws,ioexception
StateBackend -> CompletedCheckpointStorageLocation resolveCheckpoint(String externalPointer) throws IOException_;1530638621;Resolves the given pointer to a checkpoint/savepoint into a checkpoint location. The location_supports reading the checkpoint metadata, or disposing the checkpoint storage location.__<p>If the state backend cannot understand the format of the pointer (for example because it_was created by a different state backend) this method should throw an {@code IOException}.__@param externalPointer The external checkpoint pointer to resolve._@return The checkpoint location handle.__@throws IOException Thrown, if the state backend does not understand the pointer, or if_the pointer could not be resolved due to an I/O error.;CompletedCheckpointStorageLocation resolveCheckpoint(String externalPointer) throws IOException_;resolves,the,given,pointer,to,a,checkpoint,savepoint,into,a,checkpoint,location,the,location,supports,reading,the,checkpoint,metadata,or,disposing,the,checkpoint,storage,location,p,if,the,state,backend,cannot,understand,the,format,of,the,pointer,for,example,because,it,was,created,by,a,different,state,backend,this,method,should,throw,an,code,ioexception,param,external,pointer,the,external,checkpoint,pointer,to,resolve,return,the,checkpoint,location,handle,throws,ioexception,thrown,if,the,state,backend,does,not,understand,the,pointer,or,if,the,pointer,could,not,be,resolved,due,to,an,i,o,error;completed,checkpoint,storage,location,resolve,checkpoint,string,external,pointer,throws,ioexception
StateBackend -> CompletedCheckpointStorageLocation resolveCheckpoint(String externalPointer) throws IOException_;1539939663;Resolves the given pointer to a checkpoint/savepoint into a checkpoint location. The location_supports reading the checkpoint metadata, or disposing the checkpoint storage location.__<p>If the state backend cannot understand the format of the pointer (for example because it_was created by a different state backend) this method should throw an {@code IOException}.__@param externalPointer The external checkpoint pointer to resolve._@return The checkpoint location handle.__@throws IOException Thrown, if the state backend does not understand the pointer, or if_the pointer could not be resolved due to an I/O error.;CompletedCheckpointStorageLocation resolveCheckpoint(String externalPointer) throws IOException_;resolves,the,given,pointer,to,a,checkpoint,savepoint,into,a,checkpoint,location,the,location,supports,reading,the,checkpoint,metadata,or,disposing,the,checkpoint,storage,location,p,if,the,state,backend,cannot,understand,the,format,of,the,pointer,for,example,because,it,was,created,by,a,different,state,backend,this,method,should,throw,an,code,ioexception,param,external,pointer,the,external,checkpoint,pointer,to,resolve,return,the,checkpoint,location,handle,throws,ioexception,thrown,if,the,state,backend,does,not,understand,the,pointer,or,if,the,pointer,could,not,be,resolved,due,to,an,i,o,error;completed,checkpoint,storage,location,resolve,checkpoint,string,external,pointer,throws,ioexception
StateBackend -> CompletedCheckpointStorageLocation resolveCheckpoint(String externalPointer) throws IOException_;1550863001;Resolves the given pointer to a checkpoint/savepoint into a checkpoint location. The location_supports reading the checkpoint metadata, or disposing the checkpoint storage location.__<p>If the state backend cannot understand the format of the pointer (for example because it_was created by a different state backend) this method should throw an {@code IOException}.__@param externalPointer The external checkpoint pointer to resolve._@return The checkpoint location handle.__@throws IOException Thrown, if the state backend does not understand the pointer, or if_the pointer could not be resolved due to an I/O error.;CompletedCheckpointStorageLocation resolveCheckpoint(String externalPointer) throws IOException_;resolves,the,given,pointer,to,a,checkpoint,savepoint,into,a,checkpoint,location,the,location,supports,reading,the,checkpoint,metadata,or,disposing,the,checkpoint,storage,location,p,if,the,state,backend,cannot,understand,the,format,of,the,pointer,for,example,because,it,was,created,by,a,different,state,backend,this,method,should,throw,an,code,ioexception,param,external,pointer,the,external,checkpoint,pointer,to,resolve,return,the,checkpoint,location,handle,throws,ioexception,thrown,if,the,state,backend,does,not,understand,the,pointer,or,if,the,pointer,could,not,be,resolved,due,to,an,i,o,error;completed,checkpoint,storage,location,resolve,checkpoint,string,external,pointer,throws,ioexception
StateBackend -> StreamStateHandle resolveCheckpoint(String pointer) throws IOException_;1509045960;Resolves the given pointer to a checkpoint/savepoint into a state handle from which the_checkpoint metadata can be read. If the state backend cannot understand the format of_the pointer (for example because it was created by a different state backend) this method_should throw an {@code IOException}.__@param pointer The pointer to resolve._@return The state handler from which one can read the checkpoint metadata.__@throws IOException Thrown, if the state backend does not understand the pointer, or if_the pointer could not be resolved due to an I/O error.;StreamStateHandle resolveCheckpoint(String pointer) throws IOException_;resolves,the,given,pointer,to,a,checkpoint,savepoint,into,a,state,handle,from,which,the,checkpoint,metadata,can,be,read,if,the,state,backend,cannot,understand,the,format,of,the,pointer,for,example,because,it,was,created,by,a,different,state,backend,this,method,should,throw,an,code,ioexception,param,pointer,the,pointer,to,resolve,return,the,state,handler,from,which,one,can,read,the,checkpoint,metadata,throws,ioexception,thrown,if,the,state,backend,does,not,understand,the,pointer,or,if,the,pointer,could,not,be,resolved,due,to,an,i,o,error;stream,state,handle,resolve,checkpoint,string,pointer,throws,ioexception
StateBackend -> StreamStateHandle resolveCheckpoint(String pointer) throws IOException_;1515600846;Resolves the given pointer to a checkpoint/savepoint into a state handle from which the_checkpoint metadata can be read. If the state backend cannot understand the format of_the pointer (for example because it was created by a different state backend) this method_should throw an {@code IOException}.__@param pointer The pointer to resolve._@return The state handler from which one can read the checkpoint metadata.__@throws IOException Thrown, if the state backend does not understand the pointer, or if_the pointer could not be resolved due to an I/O error.;StreamStateHandle resolveCheckpoint(String pointer) throws IOException_;resolves,the,given,pointer,to,a,checkpoint,savepoint,into,a,state,handle,from,which,the,checkpoint,metadata,can,be,read,if,the,state,backend,cannot,understand,the,format,of,the,pointer,for,example,because,it,was,created,by,a,different,state,backend,this,method,should,throw,an,code,ioexception,param,pointer,the,pointer,to,resolve,return,the,state,handler,from,which,one,can,read,the,checkpoint,metadata,throws,ioexception,thrown,if,the,state,backend,does,not,understand,the,pointer,or,if,the,pointer,could,not,be,resolved,due,to,an,i,o,error;stream,state,handle,resolve,checkpoint,string,pointer,throws,ioexception
StateBackend -> CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException_;1509045960;Creates a storage for checkpoints for the given job. The checkpoint storage is_used to write checkpoint data and metadata.__@param jobId The job to store checkpoint data for._@return A checkpoint storage for the given job.__@throws IOException Thrown if the checkpoint storage cannot be initialized.;CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException_;creates,a,storage,for,checkpoints,for,the,given,job,the,checkpoint,storage,is,used,to,write,checkpoint,data,and,metadata,param,job,id,the,job,to,store,checkpoint,data,for,return,a,checkpoint,storage,for,the,given,job,throws,ioexception,thrown,if,the,checkpoint,storage,cannot,be,initialized;checkpoint,storage,create,checkpoint,storage,job,id,job,id,throws,ioexception
StateBackend -> CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException_;1515600846;Creates a storage for checkpoints for the given job. The checkpoint storage is_used to write checkpoint data and metadata.__@param jobId The job to store checkpoint data for._@return A checkpoint storage for the given job.__@throws IOException Thrown if the checkpoint storage cannot be initialized.;CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException_;creates,a,storage,for,checkpoints,for,the,given,job,the,checkpoint,storage,is,used,to,write,checkpoint,data,and,metadata,param,job,id,the,job,to,store,checkpoint,data,for,return,a,checkpoint,storage,for,the,given,job,throws,ioexception,thrown,if,the,checkpoint,storage,cannot,be,initialized;checkpoint,storage,create,checkpoint,storage,job,id,job,id,throws,ioexception
StateBackend -> CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException_;1517414098;Creates a storage for checkpoints for the given job. The checkpoint storage is_used to write checkpoint data and metadata.__@param jobId The job to store checkpoint data for._@return A checkpoint storage for the given job.__@throws IOException Thrown if the checkpoint storage cannot be initialized.;CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException_;creates,a,storage,for,checkpoints,for,the,given,job,the,checkpoint,storage,is,used,to,write,checkpoint,data,and,metadata,param,job,id,the,job,to,store,checkpoint,data,for,return,a,checkpoint,storage,for,the,given,job,throws,ioexception,thrown,if,the,checkpoint,storage,cannot,be,initialized;checkpoint,storage,create,checkpoint,storage,job,id,job,id,throws,ioexception
StateBackend -> CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException_;1530638621;Creates a storage for checkpoints for the given job. The checkpoint storage is_used to write checkpoint data and metadata.__@param jobId The job to store checkpoint data for._@return A checkpoint storage for the given job.__@throws IOException Thrown if the checkpoint storage cannot be initialized.;CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException_;creates,a,storage,for,checkpoints,for,the,given,job,the,checkpoint,storage,is,used,to,write,checkpoint,data,and,metadata,param,job,id,the,job,to,store,checkpoint,data,for,return,a,checkpoint,storage,for,the,given,job,throws,ioexception,thrown,if,the,checkpoint,storage,cannot,be,initialized;checkpoint,storage,create,checkpoint,storage,job,id,job,id,throws,ioexception
StateBackend -> CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException_;1539939663;Creates a storage for checkpoints for the given job. The checkpoint storage is_used to write checkpoint data and metadata.__@param jobId The job to store checkpoint data for._@return A checkpoint storage for the given job.__@throws IOException Thrown if the checkpoint storage cannot be initialized.;CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException_;creates,a,storage,for,checkpoints,for,the,given,job,the,checkpoint,storage,is,used,to,write,checkpoint,data,and,metadata,param,job,id,the,job,to,store,checkpoint,data,for,return,a,checkpoint,storage,for,the,given,job,throws,ioexception,thrown,if,the,checkpoint,storage,cannot,be,initialized;checkpoint,storage,create,checkpoint,storage,job,id,job,id,throws,ioexception
StateBackend -> CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException_;1550863001;Creates a storage for checkpoints for the given job. The checkpoint storage is_used to write checkpoint data and metadata.__@param jobId The job to store checkpoint data for._@return A checkpoint storage for the given job.__@throws IOException Thrown if the checkpoint storage cannot be initialized.;CheckpointStorage createCheckpointStorage(JobID jobId) throws IOException_;creates,a,storage,for,checkpoints,for,the,given,job,the,checkpoint,storage,is,used,to,write,checkpoint,data,and,metadata,param,job,id,the,job,to,store,checkpoint,data,for,return,a,checkpoint,storage,for,the,given,job,throws,ioexception,thrown,if,the,checkpoint,storage,cannot,be,initialized;checkpoint,storage,create,checkpoint,storage,job,id,job,id,throws,ioexception
StateBackend -> default <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 		Environment env, 		JobID jobID, 		String operatorIdentifier, 		TypeSerializer<K> keySerializer, 		int numberOfKeyGroups, 		KeyGroupRange keyGroupRange, 		TaskKvStateRegistry kvStateRegistry, 		TtlTimeProvider ttlTimeProvider 	) throws Exception;1539939663;Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>_and checkpointing it.__<p><i>Keyed State</i> is state where each value is bound to a key.__@param <K> The type of the keys by which the state is organized.__@return The Keyed State Backend for the given job, operator, and key group range.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;default <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_		Environment env,_		JobID jobID,_		String operatorIdentifier,_		TypeSerializer<K> keySerializer,_		int numberOfKeyGroups,_		KeyGroupRange keyGroupRange,_		TaskKvStateRegistry kvStateRegistry,_		TtlTimeProvider ttlTimeProvider_	) throws Exception {_		return createKeyedStateBackend(_			env,_			jobID,_			operatorIdentifier,_			keySerializer,_			numberOfKeyGroups,_			keyGroupRange,_			kvStateRegistry,_			ttlTimeProvider,_			new UnregisteredMetricsGroup())__	};creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,holding,b,keyed,state,b,and,checkpointing,it,p,i,keyed,state,i,is,state,where,each,value,is,bound,to,a,key,param,k,the,type,of,the,keys,by,which,the,state,is,organized,return,the,keyed,state,backend,for,the,given,job,operator,and,key,group,range,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;default,k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,ttl,time,provider,ttl,time,provider,throws,exception,return,create,keyed,state,backend,env,job,id,operator,identifier,key,serializer,number,of,key,groups,key,group,range,kv,state,registry,ttl,time,provider,new,unregistered,metrics,group
StateBackend -> default <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 		Environment env, 		JobID jobID, 		String operatorIdentifier, 		TypeSerializer<K> keySerializer, 		int numberOfKeyGroups, 		KeyGroupRange keyGroupRange, 		TaskKvStateRegistry kvStateRegistry, 		TtlTimeProvider ttlTimeProvider 	) throws Exception;1550863001;Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>_and checkpointing it.__<p><i>Keyed State</i> is state where each value is bound to a key.__@param <K> The type of the keys by which the state is organized.__@return The Keyed State Backend for the given job, operator, and key group range.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;default <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_		Environment env,_		JobID jobID,_		String operatorIdentifier,_		TypeSerializer<K> keySerializer,_		int numberOfKeyGroups,_		KeyGroupRange keyGroupRange,_		TaskKvStateRegistry kvStateRegistry,_		TtlTimeProvider ttlTimeProvider_	) throws Exception {_		return createKeyedStateBackend(_			env,_			jobID,_			operatorIdentifier,_			keySerializer,_			numberOfKeyGroups,_			keyGroupRange,_			kvStateRegistry,_			ttlTimeProvider,_			new UnregisteredMetricsGroup(),_			Collections.emptyList())__	};creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,holding,b,keyed,state,b,and,checkpointing,it,p,i,keyed,state,i,is,state,where,each,value,is,bound,to,a,key,param,k,the,type,of,the,keys,by,which,the,state,is,organized,return,the,keyed,state,backend,for,the,given,job,operator,and,key,group,range,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;default,k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,ttl,time,provider,ttl,time,provider,throws,exception,return,create,keyed,state,backend,env,job,id,operator,identifier,key,serializer,number,of,key,groups,key,group,range,kv,state,registry,ttl,time,provider,new,unregistered,metrics,group,collections,empty,list
StateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1445247002;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
StateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1445849929;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
StateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1448126995;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
StateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1448967451;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
StateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1450118410;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
StateBackend -> public abstract <K, V> KvState<K, V, Backend> createKvState(String stateId, String stateName, 			TypeSerializer<K> keySerializer, TypeSerializer<V> valueSerializer, 			V defaultValue) throws Exception_;1448126995;Creates a key/value state backed by this state backend.__@param stateId Unique id that identifies the kv state in the streaming program._@param stateName Name of the created state_@param keySerializer The serializer for the key._@param valueSerializer The serializer for the value._@param defaultValue The value that is returned when no other value has been associated with a key, yet._@param <K> The type of the key._@param <V> The type of the value.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;public abstract <K, V> KvState<K, V, Backend> createKvState(String stateId, String stateName,_			TypeSerializer<K> keySerializer, TypeSerializer<V> valueSerializer,_			V defaultValue) throws Exception_;creates,a,key,value,state,backed,by,this,state,backend,param,state,id,unique,id,that,identifies,the,kv,state,in,the,streaming,program,param,state,name,name,of,the,created,state,param,key,serializer,the,serializer,for,the,key,param,value,serializer,the,serializer,for,the,value,param,default,value,the,value,that,is,returned,when,no,other,value,has,been,associated,with,a,key,yet,param,k,the,type,of,the,key,param,v,the,type,of,the,value,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;public,abstract,k,v,kv,state,k,v,backend,create,kv,state,string,state,id,string,state,name,type,serializer,k,key,serializer,type,serializer,v,value,serializer,v,default,value,throws,exception
StateBackend -> public abstract <K, V> KvState<K, V, Backend> createKvState(String stateId, String stateName, 			TypeSerializer<K> keySerializer, TypeSerializer<V> valueSerializer, 			V defaultValue) throws Exception_;1448967451;Creates a key/value state backed by this state backend.__@param stateId Unique id that identifies the kv state in the streaming program._@param stateName Name of the created state_@param keySerializer The serializer for the key._@param valueSerializer The serializer for the value._@param defaultValue The value that is returned when no other value has been associated with a key, yet._@param <K> The type of the key._@param <V> The type of the value.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;public abstract <K, V> KvState<K, V, Backend> createKvState(String stateId, String stateName,_			TypeSerializer<K> keySerializer, TypeSerializer<V> valueSerializer,_			V defaultValue) throws Exception_;creates,a,key,value,state,backed,by,this,state,backend,param,state,id,unique,id,that,identifies,the,kv,state,in,the,streaming,program,param,state,name,name,of,the,created,state,param,key,serializer,the,serializer,for,the,key,param,value,serializer,the,serializer,for,the,value,param,default,value,the,value,that,is,returned,when,no,other,value,has,been,associated,with,a,key,yet,param,k,the,type,of,the,key,param,v,the,type,of,the,value,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;public,abstract,k,v,kv,state,k,v,backend,create,kv,state,string,state,id,string,state,name,type,serializer,k,key,serializer,type,serializer,v,value,serializer,v,default,value,throws,exception
StateBackend -> public abstract <K, V> KvState<K, V, Backend> createKvState(String stateId, String stateName, 			TypeSerializer<K> keySerializer, TypeSerializer<V> valueSerializer, 			V defaultValue) throws Exception_;1450118410;Creates a key/value state backed by this state backend.__@param stateId Unique id that identifies the kv state in the streaming program._@param stateName Name of the created state_@param keySerializer The serializer for the key._@param valueSerializer The serializer for the value._@param defaultValue The value that is returned when no other value has been associated with a key, yet._@param <K> The type of the key._@param <V> The type of the value.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;public abstract <K, V> KvState<K, V, Backend> createKvState(String stateId, String stateName,_			TypeSerializer<K> keySerializer, TypeSerializer<V> valueSerializer,_			V defaultValue) throws Exception_;creates,a,key,value,state,backed,by,this,state,backend,param,state,id,unique,id,that,identifies,the,kv,state,in,the,streaming,program,param,state,name,name,of,the,created,state,param,key,serializer,the,serializer,for,the,key,param,value,serializer,the,serializer,for,the,value,param,default,value,the,value,that,is,returned,when,no,other,value,has,been,associated,with,a,key,yet,param,k,the,type,of,the,key,param,v,the,type,of,the,value,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;public,abstract,k,v,kv,state,k,v,backend,create,kv,state,string,state,id,string,state,name,type,serializer,k,key,serializer,type,serializer,v,value,serializer,v,default,value,throws,exception
StateBackend -> CheckpointStreamFactory createSavepointStreamFactory( 			JobID jobId, 			String operatorIdentifier, 			@Nullable String targetLocation) throws IOException_;1487264183;Creates a {@link CheckpointStreamFactory} that can be used to create streams_that should end up in a savepoint.__<p>This is only called if the triggered checkpoint is a savepoint. Commonly_this will return the same factory as for regular checkpoints, but maybe_slightly adjusted.__@param jobId The {@link JobID} of the job for which we are creating checkpoint streams._@param operatorIdentifier An identifier of the operator for which we create streams._@param targetLocation An optional custom location for the savepoint stream.__@return The stream factory for savepoints.__@throws IOException Failures during stream creation are forwarded.;CheckpointStreamFactory createSavepointStreamFactory(_			JobID jobId,_			String operatorIdentifier,_			@Nullable String targetLocation) throws IOException_;creates,a,link,checkpoint,stream,factory,that,can,be,used,to,create,streams,that,should,end,up,in,a,savepoint,p,this,is,only,called,if,the,triggered,checkpoint,is,a,savepoint,commonly,this,will,return,the,same,factory,as,for,regular,checkpoints,but,maybe,slightly,adjusted,param,job,id,the,link,job,id,of,the,job,for,which,we,are,creating,checkpoint,streams,param,operator,identifier,an,identifier,of,the,operator,for,which,we,create,streams,param,target,location,an,optional,custom,location,for,the,savepoint,stream,return,the,stream,factory,for,savepoints,throws,ioexception,failures,during,stream,creation,are,forwarded;checkpoint,stream,factory,create,savepoint,stream,factory,job,id,job,id,string,operator,identifier,nullable,string,target,location,throws,ioexception
StateBackend -> CheckpointStreamFactory createSavepointStreamFactory( 			JobID jobId, 			String operatorIdentifier, 			@Nullable String targetLocation) throws IOException_;1509045960;Creates a {@link CheckpointStreamFactory} that can be used to create streams_that should end up in a savepoint.__<p>This is only called if the triggered checkpoint is a savepoint. Commonly_this will return the same factory as for regular checkpoints, but maybe_slightly adjusted.__<p>NOTE: This method will probably go into the {@link CheckpointStorage} in the future.__@param jobId The {@link JobID} of the job for which we are creating checkpoint streams._@param operatorIdentifier An identifier of the operator for which we create streams._@param targetLocation An optional custom location for the savepoint stream.__@return The stream factory for savepoints.__@throws IOException Failures during stream creation are forwarded.;CheckpointStreamFactory createSavepointStreamFactory(_			JobID jobId,_			String operatorIdentifier,_			@Nullable String targetLocation) throws IOException_;creates,a,link,checkpoint,stream,factory,that,can,be,used,to,create,streams,that,should,end,up,in,a,savepoint,p,this,is,only,called,if,the,triggered,checkpoint,is,a,savepoint,commonly,this,will,return,the,same,factory,as,for,regular,checkpoints,but,maybe,slightly,adjusted,p,note,this,method,will,probably,go,into,the,link,checkpoint,storage,in,the,future,param,job,id,the,link,job,id,of,the,job,for,which,we,are,creating,checkpoint,streams,param,operator,identifier,an,identifier,of,the,operator,for,which,we,create,streams,param,target,location,an,optional,custom,location,for,the,savepoint,stream,return,the,stream,factory,for,savepoints,throws,ioexception,failures,during,stream,creation,are,forwarded;checkpoint,stream,factory,create,savepoint,stream,factory,job,id,job,id,string,operator,identifier,nullable,string,target,location,throws,ioexception
StateBackend -> default <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			TaskKvStateRegistry kvStateRegistry) throws Exception;1530638621;Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>_and checkpointing it. Uses default TTL time provider.__<p><i>Keyed State</i> is state where each value is bound to a key.__@param <K> The type of the keys by which the state is organized.__@return The Keyed State Backend for the given job, operator, and key group range.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;default <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			TaskKvStateRegistry kvStateRegistry) throws Exception {_		return createKeyedStateBackend(_			env,_			jobID,_			operatorIdentifier,_			keySerializer,_			numberOfKeyGroups,_			keyGroupRange,_			kvStateRegistry,_			TtlTimeProvider.DEFAULT)__	};creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,holding,b,keyed,state,b,and,checkpointing,it,uses,default,ttl,time,provider,p,i,keyed,state,i,is,state,where,each,value,is,bound,to,a,key,param,k,the,type,of,the,keys,by,which,the,state,is,organized,return,the,keyed,state,backend,for,the,given,job,operator,and,key,group,range,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;default,k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,throws,exception,return,create,keyed,state,backend,env,job,id,operator,identifier,key,serializer,number,of,key,groups,key,group,range,kv,state,registry,ttl,time,provider,default
StateBackend -> default <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			TaskKvStateRegistry kvStateRegistry) throws Exception;1539939663;Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>_and checkpointing it. Uses default TTL time provider.__<p><i>Keyed State</i> is state where each value is bound to a key.__@param <K> The type of the keys by which the state is organized.__@return The Keyed State Backend for the given job, operator, and key group range.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;default <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			TaskKvStateRegistry kvStateRegistry) throws Exception {_		return createKeyedStateBackend(_			env,_			jobID,_			operatorIdentifier,_			keySerializer,_			numberOfKeyGroups,_			keyGroupRange,_			kvStateRegistry,_			TtlTimeProvider.DEFAULT_		)__	};creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,holding,b,keyed,state,b,and,checkpointing,it,uses,default,ttl,time,provider,p,i,keyed,state,i,is,state,where,each,value,is,bound,to,a,key,param,k,the,type,of,the,keys,by,which,the,state,is,organized,return,the,keyed,state,backend,for,the,given,job,operator,and,key,group,range,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;default,k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,throws,exception,return,create,keyed,state,backend,env,job,id,operator,identifier,key,serializer,number,of,key,groups,key,group,range,kv,state,registry,ttl,time,provider,default
StateBackend -> default <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			TaskKvStateRegistry kvStateRegistry) throws Exception;1550863001;Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>_and checkpointing it. Uses default TTL time provider.__<p><i>Keyed State</i> is state where each value is bound to a key.__@param <K> The type of the keys by which the state is organized.__@return The Keyed State Backend for the given job, operator, and key group range.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;default <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			TaskKvStateRegistry kvStateRegistry) throws Exception {_		return createKeyedStateBackend(_			env,_			jobID,_			operatorIdentifier,_			keySerializer,_			numberOfKeyGroups,_			keyGroupRange,_			kvStateRegistry,_			TtlTimeProvider.DEFAULT_		)__	};creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,holding,b,keyed,state,b,and,checkpointing,it,uses,default,ttl,time,provider,p,i,keyed,state,i,is,state,where,each,value,is,bound,to,a,key,param,k,the,type,of,the,keys,by,which,the,state,is,organized,return,the,keyed,state,backend,for,the,given,job,operator,and,key,group,range,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;default,k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,throws,exception,return,create,keyed,state,backend,env,job,id,operator,identifier,key,serializer,number,of,key,groups,key,group,range,kv,state,registry,ttl,time,provider,default
StateBackend -> public abstract void close() throws Exception_;1445247002;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
StateBackend -> public abstract void close() throws Exception_;1445849929;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
StateBackend -> public abstract void close() throws Exception_;1448126995;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
StateBackend -> public abstract void close() throws Exception_;1448967451;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
StateBackend -> public abstract void close() throws Exception_;1450118410;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
StateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1445247002;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
StateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1445849929;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
StateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1448126995;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
StateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1448967451;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
StateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1450118410;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
StateBackend -> public abstract void initializeForJob(Environment env) throws Exception_;1445849929;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param The {@link Environment} of the task that instantiated the state backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public abstract void initializeForJob(Environment env) throws Exception_;this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,the,link,environment,of,the,task,that,instantiated,the,state,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,abstract,void,initialize,for,job,environment,env,throws,exception
StateBackend -> public abstract void initializeForJob(Environment env) throws Exception_;1448126995;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param The {@link Environment} of the task that instantiated the state backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public abstract void initializeForJob(Environment env) throws Exception_;this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,the,link,environment,of,the,task,that,instantiated,the,state,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,abstract,void,initialize,for,job,environment,env,throws,exception
StateBackend -> public abstract void initializeForJob(Environment env) throws Exception_;1448967451;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param env The {@link Environment} of the task that instantiated the state backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public abstract void initializeForJob(Environment env) throws Exception_;this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,env,the,link,environment,of,the,task,that,instantiated,the,state,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,abstract,void,initialize,for,job,environment,env,throws,exception
StateBackend -> public abstract void initializeForJob(Environment env) throws Exception_;1450118410;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param env The {@link Environment} of the task that instantiated the state backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public abstract void initializeForJob(Environment env) throws Exception_;this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,env,the,link,environment,of,the,task,that,instantiated,the,state,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,abstract,void,initialize,for,job,environment,env,throws,exception
StateBackend -> <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			TaskKvStateRegistry kvStateRegistry) throws Exception_;1486992577;Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>_and checkpointing it.__<p><i>Keyed State</i> is state where each value is bound to a key.__@param env_@param jobID_@param operatorIdentifier_@param keySerializer_@param numberOfKeyGroups_@param keyGroupRange_@param kvStateRegistry__@param <K> The type of the keys by which the state is organized.__@return The Keyed State Backend for the given job, operator, and key group range.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;<K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			TaskKvStateRegistry kvStateRegistry) throws Exception_;creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,holding,b,keyed,state,b,and,checkpointing,it,p,i,keyed,state,i,is,state,where,each,value,is,bound,to,a,key,param,env,param,job,id,param,operator,identifier,param,key,serializer,param,number,of,key,groups,param,key,group,range,param,kv,state,registry,param,k,the,type,of,the,keys,by,which,the,state,is,organized,return,the,keyed,state,backend,for,the,given,job,operator,and,key,group,range,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,throws,exception
StateBackend -> <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			TaskKvStateRegistry kvStateRegistry) throws Exception_;1487264183;Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>_and checkpointing it.__<p><i>Keyed State</i> is state where each value is bound to a key.__@param env_@param jobID_@param operatorIdentifier_@param keySerializer_@param numberOfKeyGroups_@param keyGroupRange_@param kvStateRegistry__@param <K> The type of the keys by which the state is organized.__@return The Keyed State Backend for the given job, operator, and key group range.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;<K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			TaskKvStateRegistry kvStateRegistry) throws Exception_;creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,holding,b,keyed,state,b,and,checkpointing,it,p,i,keyed,state,i,is,state,where,each,value,is,bound,to,a,key,param,env,param,job,id,param,operator,identifier,param,key,serializer,param,number,of,key,groups,param,key,group,range,param,kv,state,registry,param,k,the,type,of,the,keys,by,which,the,state,is,organized,return,the,keyed,state,backend,for,the,given,job,operator,and,key,group,range,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,throws,exception
StateBackend -> <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			TaskKvStateRegistry kvStateRegistry) throws Exception_;1509045960;Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>_and checkpointing it.__<p><i>Keyed State</i> is state where each value is bound to a key.__@param <K> The type of the keys by which the state is organized.__@return The Keyed State Backend for the given job, operator, and key group range.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;<K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			TaskKvStateRegistry kvStateRegistry) throws Exception_;creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,holding,b,keyed,state,b,and,checkpointing,it,p,i,keyed,state,i,is,state,where,each,value,is,bound,to,a,key,param,k,the,type,of,the,keys,by,which,the,state,is,organized,return,the,keyed,state,backend,for,the,given,job,operator,and,key,group,range,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,throws,exception
StateBackend -> <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			TaskKvStateRegistry kvStateRegistry) throws Exception_;1515600846;Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>_and checkpointing it.__<p><i>Keyed State</i> is state where each value is bound to a key.__@param <K> The type of the keys by which the state is organized.__@return The Keyed State Backend for the given job, operator, and key group range.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;<K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			TaskKvStateRegistry kvStateRegistry) throws Exception_;creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,holding,b,keyed,state,b,and,checkpointing,it,p,i,keyed,state,i,is,state,where,each,value,is,bound,to,a,key,param,k,the,type,of,the,keys,by,which,the,state,is,organized,return,the,keyed,state,backend,for,the,given,job,operator,and,key,group,range,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,throws,exception
StateBackend -> <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			TaskKvStateRegistry kvStateRegistry) throws Exception_;1517414098;Creates a new {@link AbstractKeyedStateBackend} that is responsible for holding <b>keyed state</b>_and checkpointing it.__<p><i>Keyed State</i> is state where each value is bound to a key.__@param <K> The type of the keys by which the state is organized.__@return The Keyed State Backend for the given job, operator, and key group range.__@throws Exception This method may forward all exceptions that occur while instantiating the backend.;<K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			TaskKvStateRegistry kvStateRegistry) throws Exception_;creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,holding,b,keyed,state,b,and,checkpointing,it,p,i,keyed,state,i,is,state,where,each,value,is,bound,to,a,key,param,k,the,type,of,the,keys,by,which,the,state,is,organized,return,the,keyed,state,backend,for,the,given,job,operator,and,key,group,range,throws,exception,this,method,may,forward,all,exceptions,that,occur,while,instantiating,the,backend;k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,throws,exception
StateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1445247002;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
StateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1445849929;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
StateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1448126995;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
StateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1448967451;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
StateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1450118410;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
StateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1445247002;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
StateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1445849929;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
StateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1448126995;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
StateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1448967451;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
StateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1450118410;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
StateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1445247002;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
StateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1445849929;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
StateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1448126995;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
StateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1448967451;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
StateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1450118410;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
