# id;timestamp;commentText;codeText;commentWords;codeWords
HeapPriorityQueueSet -> @SuppressWarnings("unchecked") 	public HeapPriorityQueueSet( 		@Nonnull PriorityComparator<T> elementPriorityComparator, 		@Nonnull KeyExtractorFunction<T> keyExtractor, 		@Nonnegative int minimumCapacity, 		@Nonnull KeyGroupRange keyGroupRange, 		@Nonnegative int totalNumberOfKeyGroups);1530704629;Creates an empty {@link HeapPriorityQueueSet} with the requested initial capacity.__@param elementPriorityComparator comparator for the priority of contained elements._@param keyExtractor function to extract a key from the contained elements._@param minimumCapacity the minimum and initial capacity of this priority queue._@param keyGroupRange the key-group range of the elements in this set._@param totalNumberOfKeyGroups the total number of key-groups of the job.;@SuppressWarnings("unchecked")_	public HeapPriorityQueueSet(_		@Nonnull PriorityComparator<T> elementPriorityComparator,_		@Nonnull KeyExtractorFunction<T> keyExtractor,_		@Nonnegative int minimumCapacity,_		@Nonnull KeyGroupRange keyGroupRange,_		@Nonnegative int totalNumberOfKeyGroups) {__		super(elementPriorityComparator, minimumCapacity)___		this.keyExtractor = keyExtractor___		this.totalNumberOfKeyGroups = totalNumberOfKeyGroups__		this.keyGroupRange = keyGroupRange___		final int keyGroupsInLocalRange = keyGroupRange.getNumberOfKeyGroups()__		final int deduplicationSetSize = 1 + minimumCapacity / keyGroupsInLocalRange__		this.deduplicationMapsByKeyGroup = new HashMap[keyGroupsInLocalRange]__		for (int i = 0_ i < keyGroupsInLocalRange_ ++i) {_			deduplicationMapsByKeyGroup[i] = new HashMap<>(deduplicationSetSize)__		}_	};creates,an,empty,link,heap,priority,queue,set,with,the,requested,initial,capacity,param,element,priority,comparator,comparator,for,the,priority,of,contained,elements,param,key,extractor,function,to,extract,a,key,from,the,contained,elements,param,minimum,capacity,the,minimum,and,initial,capacity,of,this,priority,queue,param,key,group,range,the,key,group,range,of,the,elements,in,this,set,param,total,number,of,key,groups,the,total,number,of,key,groups,of,the,job;suppress,warnings,unchecked,public,heap,priority,queue,set,nonnull,priority,comparator,t,element,priority,comparator,nonnull,key,extractor,function,t,key,extractor,nonnegative,int,minimum,capacity,nonnull,key,group,range,key,group,range,nonnegative,int,total,number,of,key,groups,super,element,priority,comparator,minimum,capacity,this,key,extractor,key,extractor,this,total,number,of,key,groups,total,number,of,key,groups,this,key,group,range,key,group,range,final,int,key,groups,in,local,range,key,group,range,get,number,of,key,groups,final,int,deduplication,set,size,1,minimum,capacity,key,groups,in,local,range,this,deduplication,maps,by,key,group,new,hash,map,key,groups,in,local,range,for,int,i,0,i,key,groups,in,local,range,i,deduplication,maps,by,key,group,i,new,hash,map,deduplication,set,size
HeapPriorityQueueSet -> @SuppressWarnings("unchecked") 	public HeapPriorityQueueSet( 		@Nonnull PriorityComparator<T> elementPriorityComparator, 		@Nonnull KeyExtractorFunction<T> keyExtractor, 		@Nonnegative int minimumCapacity, 		@Nonnull KeyGroupRange keyGroupRange, 		@Nonnegative int totalNumberOfKeyGroups);1531911289;Creates an empty {@link HeapPriorityQueueSet} with the requested initial capacity.__@param elementPriorityComparator comparator for the priority of contained elements._@param keyExtractor function to extract a key from the contained elements._@param minimumCapacity the minimum and initial capacity of this priority queue._@param keyGroupRange the key-group range of the elements in this set._@param totalNumberOfKeyGroups the total number of key-groups of the job.;@SuppressWarnings("unchecked")_	public HeapPriorityQueueSet(_		@Nonnull PriorityComparator<T> elementPriorityComparator,_		@Nonnull KeyExtractorFunction<T> keyExtractor,_		@Nonnegative int minimumCapacity,_		@Nonnull KeyGroupRange keyGroupRange,_		@Nonnegative int totalNumberOfKeyGroups) {__		super(elementPriorityComparator, minimumCapacity)___		this.keyExtractor = keyExtractor___		this.totalNumberOfKeyGroups = totalNumberOfKeyGroups__		this.keyGroupRange = keyGroupRange___		final int keyGroupsInLocalRange = keyGroupRange.getNumberOfKeyGroups()__		final int deduplicationSetSize = 1 + minimumCapacity / keyGroupsInLocalRange__		this.deduplicationMapsByKeyGroup = new HashMap[keyGroupsInLocalRange]__		for (int i = 0_ i < keyGroupsInLocalRange_ ++i) {_			deduplicationMapsByKeyGroup[i] = new HashMap<>(deduplicationSetSize)__		}_	};creates,an,empty,link,heap,priority,queue,set,with,the,requested,initial,capacity,param,element,priority,comparator,comparator,for,the,priority,of,contained,elements,param,key,extractor,function,to,extract,a,key,from,the,contained,elements,param,minimum,capacity,the,minimum,and,initial,capacity,of,this,priority,queue,param,key,group,range,the,key,group,range,of,the,elements,in,this,set,param,total,number,of,key,groups,the,total,number,of,key,groups,of,the,job;suppress,warnings,unchecked,public,heap,priority,queue,set,nonnull,priority,comparator,t,element,priority,comparator,nonnull,key,extractor,function,t,key,extractor,nonnegative,int,minimum,capacity,nonnull,key,group,range,key,group,range,nonnegative,int,total,number,of,key,groups,super,element,priority,comparator,minimum,capacity,this,key,extractor,key,extractor,this,total,number,of,key,groups,total,number,of,key,groups,this,key,group,range,key,group,range,final,int,key,groups,in,local,range,key,group,range,get,number,of,key,groups,final,int,deduplication,set,size,1,minimum,capacity,key,groups,in,local,range,this,deduplication,maps,by,key,group,new,hash,map,key,groups,in,local,range,for,int,i,0,i,key,groups,in,local,range,i,deduplication,maps,by,key,group,i,new,hash,map,deduplication,set,size
HeapPriorityQueueSet -> @Override 	public boolean add(@Nonnull T element);1529325481;Adds the element to the queue. In contrast to the superclass and to maintain set semantics, this happens only if_no such element is already contained (determined by {@link #equals(Object)}).__@return <code>true</code> if the operation changed the head element or if is it unclear if the head element changed._Only returns <code>false</code> iff the head element was not changed by this operation.;@Override_	public boolean add(@Nonnull T element) {_		return getDedupMapForElement(element).putIfAbsent(element, element) == null && super.add(element)__	};adds,the,element,to,the,queue,in,contrast,to,the,superclass,and,to,maintain,set,semantics,this,happens,only,if,no,such,element,is,already,contained,determined,by,link,equals,object,return,code,true,code,if,the,operation,changed,the,head,element,or,if,is,it,unclear,if,the,head,element,changed,only,returns,code,false,code,iff,the,head,element,was,not,changed,by,this,operation;override,public,boolean,add,nonnull,t,element,return,get,dedup,map,for,element,element,put,if,absent,element,element,null,super,add,element
HeapPriorityQueueSet -> @Override 	public boolean add(@Nonnull T element);1530704629;Adds the element to the queue. In contrast to the superclass and to maintain set semantics, this happens only if_no such element is already contained (determined by {@link #equals(Object)}).__@return <code>true</code> if the operation changed the head element or if is it unclear if the head element changed._Only returns <code>false</code> iff the head element was not changed by this operation.;@Override_	public boolean add(@Nonnull T element) {_		return getDedupMapForElement(element).putIfAbsent(element, element) == null && super.add(element)__	};adds,the,element,to,the,queue,in,contrast,to,the,superclass,and,to,maintain,set,semantics,this,happens,only,if,no,such,element,is,already,contained,determined,by,link,equals,object,return,code,true,code,if,the,operation,changed,the,head,element,or,if,is,it,unclear,if,the,head,element,changed,only,returns,code,false,code,iff,the,head,element,was,not,changed,by,this,operation;override,public,boolean,add,nonnull,t,element,return,get,dedup,map,for,element,element,put,if,absent,element,element,null,super,add,element
HeapPriorityQueueSet -> @Override 	public boolean add(@Nonnull T element);1531911289;Adds the element to the queue. In contrast to the superclass and to maintain set semantics, this happens only if_no such element is already contained (determined by {@link #equals(Object)}).__@return <code>true</code> if the operation changed the head element or if is it unclear if the head element changed._Only returns <code>false</code> iff the head element was not changed by this operation.;@Override_	public boolean add(@Nonnull T element) {_		return getDedupMapForElement(element).putIfAbsent(element, element) == null && super.add(element)__	};adds,the,element,to,the,queue,in,contrast,to,the,superclass,and,to,maintain,set,semantics,this,happens,only,if,no,such,element,is,already,contained,determined,by,link,equals,object,return,code,true,code,if,the,operation,changed,the,head,element,or,if,is,it,unclear,if,the,head,element,changed,only,returns,code,false,code,iff,the,head,element,was,not,changed,by,this,operation;override,public,boolean,add,nonnull,t,element,return,get,dedup,map,for,element,element,put,if,absent,element,element,null,super,add,element
HeapPriorityQueueSet -> @Override 	public boolean remove(@Nonnull T toRemove);1529325481;In contrast to the superclass and to maintain set semantics, removal here is based on comparing the given element_via {@link #equals(Object)}.__@return <code>true</code> if the operation changed the head element or if is it unclear if the head element changed._Only returns <code>false</code> iff the head element was not changed by this operation.;@Override_	public boolean remove(@Nonnull T toRemove) {_		T storedElement = getDedupMapForElement(toRemove).remove(toRemove)__		return storedElement != null && super.remove(storedElement)__	};in,contrast,to,the,superclass,and,to,maintain,set,semantics,removal,here,is,based,on,comparing,the,given,element,via,link,equals,object,return,code,true,code,if,the,operation,changed,the,head,element,or,if,is,it,unclear,if,the,head,element,changed,only,returns,code,false,code,iff,the,head,element,was,not,changed,by,this,operation;override,public,boolean,remove,nonnull,t,to,remove,t,stored,element,get,dedup,map,for,element,to,remove,remove,to,remove,return,stored,element,null,super,remove,stored,element
HeapPriorityQueueSet -> @Override 	public boolean remove(@Nonnull T toRemove);1530704629;In contrast to the superclass and to maintain set semantics, removal here is based on comparing the given element_via {@link #equals(Object)}.__@return <code>true</code> if the operation changed the head element or if is it unclear if the head element changed._Only returns <code>false</code> iff the head element was not changed by this operation.;@Override_	public boolean remove(@Nonnull T toRemove) {_		T storedElement = getDedupMapForElement(toRemove).remove(toRemove)__		return storedElement != null && super.remove(storedElement)__	};in,contrast,to,the,superclass,and,to,maintain,set,semantics,removal,here,is,based,on,comparing,the,given,element,via,link,equals,object,return,code,true,code,if,the,operation,changed,the,head,element,or,if,is,it,unclear,if,the,head,element,changed,only,returns,code,false,code,iff,the,head,element,was,not,changed,by,this,operation;override,public,boolean,remove,nonnull,t,to,remove,t,stored,element,get,dedup,map,for,element,to,remove,remove,to,remove,return,stored,element,null,super,remove,stored,element
HeapPriorityQueueSet -> @Override 	public boolean remove(@Nonnull T toRemove);1531911289;In contrast to the superclass and to maintain set semantics, removal here is based on comparing the given element_via {@link #equals(Object)}.__@return <code>true</code> if the operation changed the head element or if is it unclear if the head element changed._Only returns <code>false</code> iff the head element was not changed by this operation.;@Override_	public boolean remove(@Nonnull T toRemove) {_		T storedElement = getDedupMapForElement(toRemove).remove(toRemove)__		return storedElement != null && super.remove(storedElement)__	};in,contrast,to,the,superclass,and,to,maintain,set,semantics,removal,here,is,based,on,comparing,the,given,element,via,link,equals,object,return,code,true,code,if,the,operation,changed,the,head,element,or,if,is,it,unclear,if,the,head,element,changed,only,returns,code,false,code,iff,the,head,element,was,not,changed,by,this,operation;override,public,boolean,remove,nonnull,t,to,remove,t,stored,element,get,dedup,map,for,element,to,remove,remove,to,remove,return,stored,element,null,super,remove,stored,element
