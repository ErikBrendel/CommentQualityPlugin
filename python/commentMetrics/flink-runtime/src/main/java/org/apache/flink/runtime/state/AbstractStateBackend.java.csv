# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractStateBackend -> public abstract CheckpointStreamFactory createStreamFactory( 			JobID jobId, 			String operatorIdentifier 	) throws IOException_;1472680767;Creates a {@link CheckpointStreamFactory} that can be used to create streams_that should end up in a checkpoint.__@param jobId              The {@link JobID} of the job for which we are creating checkpoint streams._@param operatorIdentifier An identifier of the operator for which we create streams.;public abstract CheckpointStreamFactory createStreamFactory(_			JobID jobId,_			String operatorIdentifier_	) throws IOException_;creates,a,link,checkpoint,stream,factory,that,can,be,used,to,create,streams,that,should,end,up,in,a,checkpoint,param,job,id,the,link,job,id,of,the,job,for,which,we,are,creating,checkpoint,streams,param,operator,identifier,an,identifier,of,the,operator,for,which,we,create,streams;public,abstract,checkpoint,stream,factory,create,stream,factory,job,id,job,id,string,operator,identifier,throws,ioexception
AbstractStateBackend -> public abstract CheckpointStreamFactory createStreamFactory( 			JobID jobId, 			String operatorIdentifier 	) throws IOException_;1475571578;Creates a {@link CheckpointStreamFactory} that can be used to create streams_that should end up in a checkpoint.__@param jobId              The {@link JobID} of the job for which we are creating checkpoint streams._@param operatorIdentifier An identifier of the operator for which we create streams.;public abstract CheckpointStreamFactory createStreamFactory(_			JobID jobId,_			String operatorIdentifier_	) throws IOException_;creates,a,link,checkpoint,stream,factory,that,can,be,used,to,create,streams,that,should,end,up,in,a,checkpoint,param,job,id,the,link,job,id,of,the,job,for,which,we,are,creating,checkpoint,streams,param,operator,identifier,an,identifier,of,the,operator,for,which,we,create,streams;public,abstract,checkpoint,stream,factory,create,stream,factory,job,id,job,id,string,operator,identifier,throws,ioexception
AbstractStateBackend -> public abstract CheckpointStreamFactory createStreamFactory( 			JobID jobId, 			String operatorIdentifier 	) throws IOException_;1475656513;Creates a {@link CheckpointStreamFactory} that can be used to create streams_that should end up in a checkpoint.__@param jobId              The {@link JobID} of the job for which we are creating checkpoint streams._@param operatorIdentifier An identifier of the operator for which we create streams.;public abstract CheckpointStreamFactory createStreamFactory(_			JobID jobId,_			String operatorIdentifier_	) throws IOException_;creates,a,link,checkpoint,stream,factory,that,can,be,used,to,create,streams,that,should,end,up,in,a,checkpoint,param,job,id,the,link,job,id,of,the,job,for,which,we,are,creating,checkpoint,streams,param,operator,identifier,an,identifier,of,the,operator,for,which,we,create,streams;public,abstract,checkpoint,stream,factory,create,stream,factory,job,id,job,id,string,operator,identifier,throws,ioexception
AbstractStateBackend -> public abstract CheckpointStreamFactory createStreamFactory( 			JobID jobId, 			String operatorIdentifier 	) throws IOException_;1483656313;Creates a {@link CheckpointStreamFactory} that can be used to create streams_that should end up in a checkpoint.__@param jobId              The {@link JobID} of the job for which we are creating checkpoint streams._@param operatorIdentifier An identifier of the operator for which we create streams.;public abstract CheckpointStreamFactory createStreamFactory(_			JobID jobId,_			String operatorIdentifier_	) throws IOException_;creates,a,link,checkpoint,stream,factory,that,can,be,used,to,create,streams,that,should,end,up,in,a,checkpoint,param,job,id,the,link,job,id,of,the,job,for,which,we,are,creating,checkpoint,streams,param,operator,identifier,an,identifier,of,the,operator,for,which,we,create,streams;public,abstract,checkpoint,stream,factory,create,stream,factory,job,id,job,id,string,operator,identifier,throws,ioexception
AbstractStateBackend -> abstract protected <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1453721631;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;abstract protected <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;abstract,protected,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> abstract protected <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1454517847;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;abstract protected <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;abstract,protected,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1450197468;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1455287708;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1460120330;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1464608559;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1468423895;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1468438360;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;1470909547;Creates and returns a new {@link FoldingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> Type of the values folded into the state_@param <ACC> Type of the value in the state	 *;protected abstract <N, T, ACC> FoldingState<T, ACC> createFoldingState(TypeSerializer<N> namespaceSerializer, FoldingStateDescriptor<T, ACC> stateDesc) throws Exception_;creates,and,returns,a,new,link,folding,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,type,of,the,values,folded,into,the,state,param,acc,type,of,the,value,in,the,state;protected,abstract,n,t,acc,folding,state,t,acc,create,folding,state,type,serializer,n,namespace,serializer,folding,state,descriptor,t,acc,state,desc,throws,exception
AbstractStateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1450197468;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
AbstractStateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1453721631;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
AbstractStateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1454517847;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
AbstractStateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1454939779;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
AbstractStateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1455225217;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
AbstractStateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1455287708;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
AbstractStateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1460120330;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
AbstractStateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1464608559;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
AbstractStateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1468423895;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
AbstractStateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1468438360;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
AbstractStateBackend -> public abstract void disposeAllStateForCurrentJob() throws Exception_;1470909547;Disposes all state associated with the current job.__@throws Exception Exceptions may occur during disposal of the state and should be forwarded.;public abstract void disposeAllStateForCurrentJob() throws Exception_;disposes,all,state,associated,with,the,current,job,throws,exception,exceptions,may,occur,during,disposal,of,the,state,and,should,be,forwarded;public,abstract,void,dispose,all,state,for,current,job,throws,exception
AbstractStateBackend -> @SuppressWarnings("unchecked,rawtypes") 	public final void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots, long recoveryTimestamp) throws Exception;1450197468;Injects K/V state snapshots for lazy restore._@param keyValueStateSnapshots The Map of snapshots;@SuppressWarnings("unchecked,rawtypes")_	public final void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots, long recoveryTimestamp) throws Exception {_		if (keyValueStateSnapshots != null) {_			if (keyValueStatesByName == null) {_				keyValueStatesByName = new HashMap<>()__			}__			for (Map.Entry<String, KvStateSnapshot> state : keyValueStateSnapshots.entrySet()) {_				KvState kvState = state.getValue().restoreState(this,_					keySerializer,_					userCodeClassLoader,_					recoveryTimestamp)__				keyValueStatesByName.put(state.getKey(), kvState)__			}_			keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])__		}_	};injects,k,v,state,snapshots,for,lazy,restore,param,key,value,state,snapshots,the,map,of,snapshots;suppress,warnings,unchecked,rawtypes,public,final,void,inject,key,value,state,snapshots,hash,map,string,kv,state,snapshot,key,value,state,snapshots,long,recovery,timestamp,throws,exception,if,key,value,state,snapshots,null,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,for,map,entry,string,kv,state,snapshot,state,key,value,state,snapshots,entry,set,kv,state,kv,state,state,get,value,restore,state,this,key,serializer,user,code,class,loader,recovery,timestamp,key,value,states,by,name,put,state,get,key,kv,state,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size
AbstractStateBackend -> @SuppressWarnings("unchecked,rawtypes") 	public final void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots, long recoveryTimestamp) throws Exception;1453721631;Injects K/V state snapshots for lazy restore._@param keyValueStateSnapshots The Map of snapshots;@SuppressWarnings("unchecked,rawtypes")_	public final void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots, long recoveryTimestamp) throws Exception {_		if (keyValueStateSnapshots != null) {_			if (keyValueStatesByName == null) {_				keyValueStatesByName = new HashMap<>()__			}__			for (Map.Entry<String, KvStateSnapshot> state : keyValueStateSnapshots.entrySet()) {_				KvState kvState = state.getValue().restoreState(this,_					keySerializer,_					userCodeClassLoader,_					recoveryTimestamp)__				keyValueStatesByName.put(state.getKey(), kvState)__			}_			keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])__		}_	};injects,k,v,state,snapshots,for,lazy,restore,param,key,value,state,snapshots,the,map,of,snapshots;suppress,warnings,unchecked,rawtypes,public,final,void,inject,key,value,state,snapshots,hash,map,string,kv,state,snapshot,key,value,state,snapshots,long,recovery,timestamp,throws,exception,if,key,value,state,snapshots,null,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,for,map,entry,string,kv,state,snapshot,state,key,value,state,snapshots,entry,set,kv,state,kv,state,state,get,value,restore,state,this,key,serializer,user,code,class,loader,recovery,timestamp,key,value,states,by,name,put,state,get,key,kv,state,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size
AbstractStateBackend -> @SuppressWarnings("unchecked,rawtypes") 	public final void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots, long recoveryTimestamp) throws Exception;1454517847;Injects K/V state snapshots for lazy restore._@param keyValueStateSnapshots The Map of snapshots;@SuppressWarnings("unchecked,rawtypes")_	public final void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots, long recoveryTimestamp) throws Exception {_		if (keyValueStateSnapshots != null) {_			if (keyValueStatesByName == null) {_				keyValueStatesByName = new HashMap<>()__			}__			for (Map.Entry<String, KvStateSnapshot> state : keyValueStateSnapshots.entrySet()) {_				KvState kvState = state.getValue().restoreState(this,_					keySerializer,_					userCodeClassLoader,_					recoveryTimestamp)__				keyValueStatesByName.put(state.getKey(), kvState)__			}_			keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])__		}_	};injects,k,v,state,snapshots,for,lazy,restore,param,key,value,state,snapshots,the,map,of,snapshots;suppress,warnings,unchecked,rawtypes,public,final,void,inject,key,value,state,snapshots,hash,map,string,kv,state,snapshot,key,value,state,snapshots,long,recovery,timestamp,throws,exception,if,key,value,state,snapshots,null,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,for,map,entry,string,kv,state,snapshot,state,key,value,state,snapshots,entry,set,kv,state,kv,state,state,get,value,restore,state,this,key,serializer,user,code,class,loader,recovery,timestamp,key,value,states,by,name,put,state,get,key,kv,state,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size
AbstractStateBackend -> @SuppressWarnings("unchecked,rawtypes") 	public final void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots, long recoveryTimestamp) throws Exception;1454939779;Injects K/V state snapshots for lazy restore._@param keyValueStateSnapshots The Map of snapshots;@SuppressWarnings("unchecked,rawtypes")_	public final void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots, long recoveryTimestamp) throws Exception {_		if (keyValueStateSnapshots != null) {_			if (keyValueStatesByName == null) {_				keyValueStatesByName = new HashMap<>()__			}__			for (Map.Entry<String, KvStateSnapshot> state : keyValueStateSnapshots.entrySet()) {_				KvState kvState = state.getValue().restoreState(this,_					keySerializer,_					userCodeClassLoader,_					recoveryTimestamp)__				keyValueStatesByName.put(state.getKey(), kvState)__			}_			keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])__		}_	};injects,k,v,state,snapshots,for,lazy,restore,param,key,value,state,snapshots,the,map,of,snapshots;suppress,warnings,unchecked,rawtypes,public,final,void,inject,key,value,state,snapshots,hash,map,string,kv,state,snapshot,key,value,state,snapshots,long,recovery,timestamp,throws,exception,if,key,value,state,snapshots,null,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,for,map,entry,string,kv,state,snapshot,state,key,value,state,snapshots,entry,set,kv,state,kv,state,state,get,value,restore,state,this,key,serializer,user,code,class,loader,recovery,timestamp,key,value,states,by,name,put,state,get,key,kv,state,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size
AbstractStateBackend -> @SuppressWarnings("unchecked,rawtypes") 	public final void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots, long recoveryTimestamp) throws Exception;1455225217;Injects K/V state snapshots for lazy restore._@param keyValueStateSnapshots The Map of snapshots;@SuppressWarnings("unchecked,rawtypes")_	public final void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots, long recoveryTimestamp) throws Exception {_		if (keyValueStateSnapshots != null) {_			if (keyValueStatesByName == null) {_				keyValueStatesByName = new HashMap<>()__			}__			for (Map.Entry<String, KvStateSnapshot> state : keyValueStateSnapshots.entrySet()) {_				KvState kvState = state.getValue().restoreState(this,_					keySerializer,_					userCodeClassLoader,_					recoveryTimestamp)__				keyValueStatesByName.put(state.getKey(), kvState)__			}_			keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])__		}_	};injects,k,v,state,snapshots,for,lazy,restore,param,key,value,state,snapshots,the,map,of,snapshots;suppress,warnings,unchecked,rawtypes,public,final,void,inject,key,value,state,snapshots,hash,map,string,kv,state,snapshot,key,value,state,snapshots,long,recovery,timestamp,throws,exception,if,key,value,state,snapshots,null,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,for,map,entry,string,kv,state,snapshot,state,key,value,state,snapshots,entry,set,kv,state,kv,state,state,get,value,restore,state,this,key,serializer,user,code,class,loader,recovery,timestamp,key,value,states,by,name,put,state,get,key,kv,state,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size
AbstractStateBackend -> @SuppressWarnings("unchecked,rawtypes") 	public final void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots, long recoveryTimestamp) throws Exception;1455287708;Injects K/V state snapshots for lazy restore._@param keyValueStateSnapshots The Map of snapshots;@SuppressWarnings("unchecked,rawtypes")_	public final void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots, long recoveryTimestamp) throws Exception {_		if (keyValueStateSnapshots != null) {_			if (keyValueStatesByName == null) {_				keyValueStatesByName = new HashMap<>()__			}__			for (Map.Entry<String, KvStateSnapshot> state : keyValueStateSnapshots.entrySet()) {_				KvState kvState = state.getValue().restoreState(this,_					keySerializer,_					userCodeClassLoader,_					recoveryTimestamp)__				keyValueStatesByName.put(state.getKey(), kvState)__			}_			keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])__		}_	};injects,k,v,state,snapshots,for,lazy,restore,param,key,value,state,snapshots,the,map,of,snapshots;suppress,warnings,unchecked,rawtypes,public,final,void,inject,key,value,state,snapshots,hash,map,string,kv,state,snapshot,key,value,state,snapshots,long,recovery,timestamp,throws,exception,if,key,value,state,snapshots,null,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,for,map,entry,string,kv,state,snapshot,state,key,value,state,snapshots,entry,set,kv,state,kv,state,state,get,value,restore,state,this,key,serializer,user,code,class,loader,recovery,timestamp,key,value,states,by,name,put,state,get,key,kv,state,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size
AbstractStateBackend -> @SuppressWarnings("unchecked,rawtypes") 	public void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots) throws Exception;1464608559;Injects K/V state snapshots for lazy restore._@param keyValueStateSnapshots The Map of snapshots;@SuppressWarnings("unchecked,rawtypes")_	public void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots) throws Exception {_		if (keyValueStateSnapshots != null) {_			if (keyValueStatesByName == null) {_				keyValueStatesByName = new HashMap<>()__			}__			for (Map.Entry<String, KvStateSnapshot> state : keyValueStateSnapshots.entrySet()) {_				KvState kvState = state.getValue().restoreState(this,_					keySerializer,_					userCodeClassLoader)__				keyValueStatesByName.put(state.getKey(), kvState)___				try {_					_					StateDescriptor stateDesc = kvState.getStateDescriptor()__					if (stateDesc.isQueryable()) {_						String queryableStateName = stateDesc.getQueryableStateName()__						kvStateRegistry.registerKvState(keyGroupIndex, queryableStateName, kvState)__					}_				} catch (Throwable ignored) {_				}_			}_			keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])__		}_	};injects,k,v,state,snapshots,for,lazy,restore,param,key,value,state,snapshots,the,map,of,snapshots;suppress,warnings,unchecked,rawtypes,public,void,inject,key,value,state,snapshots,hash,map,string,kv,state,snapshot,key,value,state,snapshots,throws,exception,if,key,value,state,snapshots,null,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,for,map,entry,string,kv,state,snapshot,state,key,value,state,snapshots,entry,set,kv,state,kv,state,state,get,value,restore,state,this,key,serializer,user,code,class,loader,key,value,states,by,name,put,state,get,key,kv,state,try,state,descriptor,state,desc,kv,state,get,state,descriptor,if,state,desc,is,queryable,string,queryable,state,name,state,desc,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,index,queryable,state,name,kv,state,catch,throwable,ignored,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size
AbstractStateBackend -> @SuppressWarnings("unchecked,rawtypes") 	public void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots) throws Exception;1468423895;Injects K/V state snapshots for lazy restore._@param keyValueStateSnapshots The Map of snapshots;@SuppressWarnings("unchecked,rawtypes")_	public void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots) throws Exception {_		if (keyValueStateSnapshots != null) {_			if (keyValueStatesByName == null) {_				keyValueStatesByName = new HashMap<>()__			}__			for (Map.Entry<String, KvStateSnapshot> state : keyValueStateSnapshots.entrySet()) {_				KvState kvState = state.getValue().restoreState(this,_					keySerializer,_					userCodeClassLoader)__				keyValueStatesByName.put(state.getKey(), kvState)__			}_			keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])__		}_	};injects,k,v,state,snapshots,for,lazy,restore,param,key,value,state,snapshots,the,map,of,snapshots;suppress,warnings,unchecked,rawtypes,public,void,inject,key,value,state,snapshots,hash,map,string,kv,state,snapshot,key,value,state,snapshots,throws,exception,if,key,value,state,snapshots,null,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,for,map,entry,string,kv,state,snapshot,state,key,value,state,snapshots,entry,set,kv,state,kv,state,state,get,value,restore,state,this,key,serializer,user,code,class,loader,key,value,states,by,name,put,state,get,key,kv,state,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size
AbstractStateBackend -> @SuppressWarnings("unchecked,rawtypes") 	public void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots) throws Exception;1468438360;Injects K/V state snapshots for lazy restore._@param keyValueStateSnapshots The Map of snapshots;@SuppressWarnings("unchecked,rawtypes")_	public void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots) throws Exception {_		if (keyValueStateSnapshots != null) {_			if (keyValueStatesByName == null) {_				keyValueStatesByName = new HashMap<>()__			}__			for (Map.Entry<String, KvStateSnapshot> state : keyValueStateSnapshots.entrySet()) {_				KvState kvState = state.getValue().restoreState(this,_					keySerializer,_					userCodeClassLoader)__				keyValueStatesByName.put(state.getKey(), kvState)__			}_			keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])__		}_	};injects,k,v,state,snapshots,for,lazy,restore,param,key,value,state,snapshots,the,map,of,snapshots;suppress,warnings,unchecked,rawtypes,public,void,inject,key,value,state,snapshots,hash,map,string,kv,state,snapshot,key,value,state,snapshots,throws,exception,if,key,value,state,snapshots,null,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,for,map,entry,string,kv,state,snapshot,state,key,value,state,snapshots,entry,set,kv,state,kv,state,state,get,value,restore,state,this,key,serializer,user,code,class,loader,key,value,states,by,name,put,state,get,key,kv,state,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size
AbstractStateBackend -> @SuppressWarnings("unchecked,rawtypes") 	public void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots) throws Exception;1470909547;Injects K/V state snapshots for lazy restore._@param keyValueStateSnapshots The Map of snapshots;@SuppressWarnings("unchecked,rawtypes")_	public void injectKeyValueStateSnapshots(HashMap<String, KvStateSnapshot> keyValueStateSnapshots) throws Exception {_		if (keyValueStateSnapshots != null) {_			if (keyValueStatesByName == null) {_				keyValueStatesByName = new HashMap<>()__			}__			for (Map.Entry<String, KvStateSnapshot> state : keyValueStateSnapshots.entrySet()) {_				KvState kvState = state.getValue().restoreState(this,_					keySerializer,_					userCodeClassLoader)__				keyValueStatesByName.put(state.getKey(), kvState)___				try {_					_					StateDescriptor stateDesc = kvState.getStateDescriptor()__					if (stateDesc.isQueryable()) {_						String queryableStateName = stateDesc.getQueryableStateName()__						kvStateRegistry.registerKvState(keyGroupIndex, queryableStateName, kvState)__					}_				} catch (Throwable ignored) {_				}_			}_			keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])__		}_	};injects,k,v,state,snapshots,for,lazy,restore,param,key,value,state,snapshots,the,map,of,snapshots;suppress,warnings,unchecked,rawtypes,public,void,inject,key,value,state,snapshots,hash,map,string,kv,state,snapshot,key,value,state,snapshots,throws,exception,if,key,value,state,snapshots,null,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,for,map,entry,string,kv,state,snapshot,state,key,value,state,snapshots,entry,set,kv,state,kv,state,state,get,value,restore,state,this,key,serializer,user,code,class,loader,key,value,states,by,name,put,state,get,key,kv,state,try,state,descriptor,state,desc,kv,state,get,state,descriptor,if,state,desc,is,queryable,string,queryable,state,name,state,desc,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,index,queryable,state,name,kv,state,catch,throwable,ignored,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size
AbstractStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1450197468;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1454939779;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1455225217;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1455287708;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1460120330;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1464608559;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1468423895;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1468438360;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;1470909547;Creates and returns a new {@link ReducingState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ReducingState<T> createReducingState(TypeSerializer<N> namespaceSerializer, ReducingStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,reducing,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,reducing,state,t,create,reducing,state,type,serializer,n,namespace,serializer,reducing,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1450197468;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The state identifier for the state. This contains name_and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?, ?, ?, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S kvstate = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		keyValueStatesByName.put(stateDescriptor.getName(), (KvState) kvstate)__		keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])___		lastName = stateDescriptor.getName()__		lastState = (KvState<?, ?, ?, ?, ?>) kvstate___		((KvState) kvstate).setCurrentKey(currentKey)__		((KvState) kvstate).setCurrentNamespace(namespace)___		return kvstate__	};creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,kvstate,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,state,backend,this,create,folding,state,namespace,serializer,state,desc,key,value,states,by,name,put,state,descriptor,get,name,kv,state,kvstate,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size,last,name,state,descriptor,get,name,last,state,kv,state,kvstate,kv,state,kvstate,set,current,key,current,key,kv,state,kvstate,set,current,namespace,namespace,return,kvstate
AbstractStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1454939779;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The state identifier for the state. This contains name_and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		if (keySerializer == null) {_			throw new Exception("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?, ?, ?, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S kvstate = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		keyValueStatesByName.put(stateDescriptor.getName(), (KvState) kvstate)__		keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])___		lastName = stateDescriptor.getName()__		lastState = (KvState<?, ?, ?, ?, ?>) kvstate___		((KvState) kvstate).setCurrentKey(currentKey)__		((KvState) kvstate).setCurrentNamespace(namespace)___		return kvstate__	};creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,if,key,serializer,null,throw,new,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,kvstate,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,state,backend,this,create,folding,state,namespace,serializer,state,desc,key,value,states,by,name,put,state,descriptor,get,name,kv,state,kvstate,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size,last,name,state,descriptor,get,name,last,state,kv,state,kvstate,kv,state,kvstate,set,current,key,current,key,kv,state,kvstate,set,current,namespace,namespace,return,kvstate
AbstractStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1455225217;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The state identifier for the state. This contains name_and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		if (keySerializer == null) {_			throw new Exception("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?, ?, ?, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S kvstate = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}_		})___		keyValueStatesByName.put(stateDescriptor.getName(), (KvState) kvstate)__		keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])___		lastName = stateDescriptor.getName()__		lastState = (KvState<?, ?, ?, ?, ?>) kvstate___		((KvState) kvstate).setCurrentKey(currentKey)__		((KvState) kvstate).setCurrentNamespace(namespace)___		return kvstate__	};creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,if,key,serializer,null,throw,new,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,kvstate,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,reducing,state,namespace,serializer,state,desc,key,value,states,by,name,put,state,descriptor,get,name,kv,state,kvstate,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size,last,name,state,descriptor,get,name,last,state,kv,state,kvstate,kv,state,kvstate,set,current,key,current,key,kv,state,kvstate,set,current,namespace,namespace,return,kvstate
AbstractStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1455287708;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The state identifier for the state. This contains name_and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		if (keySerializer == null) {_			throw new Exception("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?, ?, ?, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S kvstate = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		keyValueStatesByName.put(stateDescriptor.getName(), (KvState) kvstate)__		keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])___		lastName = stateDescriptor.getName()__		lastState = (KvState<?, ?, ?, ?, ?>) kvstate___		((KvState) kvstate).setCurrentKey(currentKey)__		((KvState) kvstate).setCurrentNamespace(namespace)___		return kvstate__	};creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,if,key,serializer,null,throw,new,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,kvstate,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,state,backend,this,create,folding,state,namespace,serializer,state,desc,key,value,states,by,name,put,state,descriptor,get,name,kv,state,kvstate,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size,last,name,state,descriptor,get,name,last,state,kv,state,kvstate,kv,state,kvstate,set,current,key,current,key,kv,state,kvstate,set,current,namespace,namespace,return,kvstate
AbstractStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1460120330;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The state identifier for the state. This contains name_and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?, ?, ?, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S kvstate = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		keyValueStatesByName.put(stateDescriptor.getName(), (KvState) kvstate)__		keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])___		lastName = stateDescriptor.getName()__		lastState = (KvState<?, ?, ?, ?, ?>) kvstate___		((KvState) kvstate).setCurrentKey(currentKey)__		((KvState) kvstate).setCurrentNamespace(namespace)___		return kvstate__	};creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,kvstate,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,state,backend,this,create,folding,state,namespace,serializer,state,desc,key,value,states,by,name,put,state,descriptor,get,name,kv,state,kvstate,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size,last,name,state,descriptor,get,name,last,state,kv,state,kvstate,kv,state,kvstate,set,current,key,current,key,kv,state,kvstate,set,current,namespace,namespace,return,kvstate
AbstractStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1464608559;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The state identifier for the state. This contains name_and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {_		Preconditions.checkNotNull(namespace, "Namespace")__		Preconditions.checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?, ?, ?, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S state = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		KvState kvState = (KvState) state___		keyValueStatesByName.put(stateDescriptor.getName(), kvState)__		keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])___		lastName = stateDescriptor.getName()__		lastState = kvState___		if (currentKey != null) {_			kvState.setCurrentKey(currentKey)__		}__		kvState.setCurrentNamespace(namespace)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupIndex, name, kvState)__		}__		return state__	};creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,preconditions,check,not,null,namespace,namespace,preconditions,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,state,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,state,backend,this,create,folding,state,namespace,serializer,state,desc,kv,state,kv,state,kv,state,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size,last,name,state,descriptor,get,name,last,state,kv,state,if,current,key,null,kv,state,set,current,key,current,key,kv,state,set,current,namespace,namespace,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,index,name,kv,state,return,state
AbstractStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1468423895;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The state identifier for the state. This contains name_and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?, ?, ?, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S kvstate = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		keyValueStatesByName.put(stateDescriptor.getName(), (KvState) kvstate)__		keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])___		lastName = stateDescriptor.getName()__		lastState = (KvState<?, ?, ?, ?, ?>) kvstate___		((KvState) kvstate).setCurrentKey(currentKey)__		((KvState) kvstate).setCurrentNamespace(namespace)___		return kvstate__	};creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,kvstate,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,state,backend,this,create,folding,state,namespace,serializer,state,desc,key,value,states,by,name,put,state,descriptor,get,name,kv,state,kvstate,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size,last,name,state,descriptor,get,name,last,state,kv,state,kvstate,kv,state,kvstate,set,current,key,current,key,kv,state,kvstate,set,current,namespace,namespace,return,kvstate
AbstractStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1468438360;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The state identifier for the state. This contains name_and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {__		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?, ?, ?, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S kvstate = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		keyValueStatesByName.put(stateDescriptor.getName(), (KvState) kvstate)__		keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])___		lastName = stateDescriptor.getName()__		lastState = (KvState<?, ?, ?, ?, ?>) kvstate___		((KvState) kvstate).setCurrentKey(currentKey)__		((KvState) kvstate).setCurrentNamespace(namespace)___		return kvstate__	};creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,kvstate,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,state,backend,this,create,folding,state,namespace,serializer,state,desc,key,value,states,by,name,put,state,descriptor,get,name,kv,state,kvstate,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size,last,name,state,descriptor,get,name,last,state,kv,state,kvstate,kv,state,kvstate,set,current,key,current,key,kv,state,kvstate,set,current,namespace,namespace,return,kvstate
AbstractStateBackend -> @SuppressWarnings({"rawtypes", "unchecked"}) 	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception;1470909547;Creates or retrieves a partitioned state backed by this state backend.__@param stateDescriptor The state identifier for the state. This contains name_and can create a default state value.__@param <N> The type of the namespace._@param <S> The type of the state.__@return A new key/value state backed by this backend.__@throws Exception Exceptions may occur during initialization of the state and should be forwarded.;@SuppressWarnings({"rawtypes", "unchecked"})_	public <N, S extends State> S getPartitionedState(final N namespace, final TypeSerializer<N> namespaceSerializer, final StateDescriptor<S, ?> stateDescriptor) throws Exception {_		Preconditions.checkNotNull(namespace, "Namespace")__		Preconditions.checkNotNull(namespaceSerializer, "Namespace serializer")___		if (keySerializer == null) {_			throw new RuntimeException("State key serializer has not been configured in the config. " +_					"This operation cannot use partitioned state.")__		}_		_		if (!stateDescriptor.isSerializerInitialized()) {_			stateDescriptor.initializeSerializerUnlessSet(new ExecutionConfig())__		}__		if (keyValueStatesByName == null) {_			keyValueStatesByName = new HashMap<>()__		}__		if (lastName != null && lastName.equals(stateDescriptor.getName())) {_			lastState.setCurrentNamespace(namespace)__			return (S) lastState__		}__		KvState<?, ?, ?, ?, ?> previous = keyValueStatesByName.get(stateDescriptor.getName())__		if (previous != null) {_			lastState = previous__			lastState.setCurrentNamespace(namespace)__			lastName = stateDescriptor.getName()__			return (S) previous__		}__		_		S state = stateDescriptor.bind(new StateBackend() {_			@Override_			public <T> ValueState<T> createValueState(ValueStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createValueState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ListState<T> createListState(ListStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createListState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T> ReducingState<T> createReducingState(ReducingStateDescriptor<T> stateDesc) throws Exception {_				return AbstractStateBackend.this.createReducingState(namespaceSerializer, stateDesc)__			}__			@Override_			public <T, ACC> FoldingState<T, ACC> createFoldingState(FoldingStateDescriptor<T, ACC> stateDesc) throws Exception {_				return AbstractStateBackend.this.createFoldingState(namespaceSerializer, stateDesc)__			}__		})___		KvState kvState = (KvState) state___		keyValueStatesByName.put(stateDescriptor.getName(), kvState)__		keyValueStates = keyValueStatesByName.values().toArray(new KvState[keyValueStatesByName.size()])___		lastName = stateDescriptor.getName()__		lastState = kvState___		if (currentKey != null) {_			kvState.setCurrentKey(currentKey)__		}__		kvState.setCurrentNamespace(namespace)___		_		if (stateDescriptor.isQueryable()) {_			if (kvStateRegistry == null) {_				throw new IllegalStateException("State backend has not been initialized for job.")__			}__			String name = stateDescriptor.getQueryableStateName()__			kvStateRegistry.registerKvState(keyGroupIndex, name, kvState)__		}__		return state__	};creates,or,retrieves,a,partitioned,state,backed,by,this,state,backend,param,state,descriptor,the,state,identifier,for,the,state,this,contains,name,and,can,create,a,default,state,value,param,n,the,type,of,the,namespace,param,s,the,type,of,the,state,return,a,new,key,value,state,backed,by,this,backend,throws,exception,exceptions,may,occur,during,initialization,of,the,state,and,should,be,forwarded;suppress,warnings,rawtypes,unchecked,public,n,s,extends,state,s,get,partitioned,state,final,n,namespace,final,type,serializer,n,namespace,serializer,final,state,descriptor,s,state,descriptor,throws,exception,preconditions,check,not,null,namespace,namespace,preconditions,check,not,null,namespace,serializer,namespace,serializer,if,key,serializer,null,throw,new,runtime,exception,state,key,serializer,has,not,been,configured,in,the,config,this,operation,cannot,use,partitioned,state,if,state,descriptor,is,serializer,initialized,state,descriptor,initialize,serializer,unless,set,new,execution,config,if,key,value,states,by,name,null,key,value,states,by,name,new,hash,map,if,last,name,null,last,name,equals,state,descriptor,get,name,last,state,set,current,namespace,namespace,return,s,last,state,kv,state,previous,key,value,states,by,name,get,state,descriptor,get,name,if,previous,null,last,state,previous,last,state,set,current,namespace,namespace,last,name,state,descriptor,get,name,return,s,previous,s,state,state,descriptor,bind,new,state,backend,override,public,t,value,state,t,create,value,state,value,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,value,state,namespace,serializer,state,desc,override,public,t,list,state,t,create,list,state,list,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,list,state,namespace,serializer,state,desc,override,public,t,reducing,state,t,create,reducing,state,reducing,state,descriptor,t,state,desc,throws,exception,return,abstract,state,backend,this,create,reducing,state,namespace,serializer,state,desc,override,public,t,acc,folding,state,t,acc,create,folding,state,folding,state,descriptor,t,acc,state,desc,throws,exception,return,abstract,state,backend,this,create,folding,state,namespace,serializer,state,desc,kv,state,kv,state,kv,state,state,key,value,states,by,name,put,state,descriptor,get,name,kv,state,key,value,states,key,value,states,by,name,values,to,array,new,kv,state,key,value,states,by,name,size,last,name,state,descriptor,get,name,last,state,kv,state,if,current,key,null,kv,state,set,current,key,current,key,kv,state,set,current,namespace,namespace,if,state,descriptor,is,queryable,if,kv,state,registry,null,throw,new,illegal,state,exception,state,backend,has,not,been,initialized,for,job,string,name,state,descriptor,get,queryable,state,name,kv,state,registry,register,kv,state,key,group,index,name,kv,state,return,state
AbstractStateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1450197468;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
AbstractStateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1453721631;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
AbstractStateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1454517847;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
AbstractStateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1454939779;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
AbstractStateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1455225217;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
AbstractStateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1455287708;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
AbstractStateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1460120330;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
AbstractStateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1464608559;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
AbstractStateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1468423895;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
AbstractStateBackend -> public CheckpointStateOutputView createCheckpointStateOutputView( 			long checkpointID, long timestamp) throws Exception;1468438360;Creates a {@link DataOutputView} stream that writes into the state of the given checkpoint._When the stream is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An DataOutputView stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public CheckpointStateOutputView createCheckpointStateOutputView(_			long checkpointID, long timestamp) throws Exception {_		return new CheckpointStateOutputView(createCheckpointStateOutputStream(checkpointID, timestamp))__	};creates,a,link,data,output,view,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,data,output,view,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,checkpoint,state,output,view,create,checkpoint,state,output,view,long,checkpoint,id,long,timestamp,throws,exception,return,new,checkpoint,state,output,view,create,checkpoint,state,output,stream,checkpoint,id,timestamp
AbstractStateBackend -> public void initializeForJob( 			Environment env, 			String operatorIdentifier, 			TypeSerializer<?> keySerializer) throws Exception;1464608559;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param env The {@link Environment} of the task that instantiated the state backend_@param operatorIdentifier Unique identifier for naming states created by this backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public void initializeForJob(_			Environment env,_			String operatorIdentifier,_			TypeSerializer<?> keySerializer) throws Exception {__		this.userCodeClassLoader = env.getUserClassLoader()__		this.keySerializer = keySerializer___		this.keyGroupIndex = env.getTaskInfo().getIndexOfThisSubtask()__		this.kvStateRegistry = env.getTaskKvStateRegistry()__	};this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,env,the,link,environment,of,the,task,that,instantiated,the,state,backend,param,operator,identifier,unique,identifier,for,naming,states,created,by,this,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,void,initialize,for,job,environment,env,string,operator,identifier,type,serializer,key,serializer,throws,exception,this,user,code,class,loader,env,get,user,class,loader,this,key,serializer,key,serializer,this,key,group,index,env,get,task,info,get,index,of,this,subtask,this,kv,state,registry,env,get,task,kv,state,registry
AbstractStateBackend -> public void initializeForJob( 			Environment env, 			String operatorIdentifier, 			TypeSerializer<?> keySerializer) throws Exception;1470909547;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param env The {@link Environment} of the task that instantiated the state backend_@param operatorIdentifier Unique identifier for naming states created by this backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public void initializeForJob(_			Environment env,_			String operatorIdentifier,_			TypeSerializer<?> keySerializer) throws Exception {__		this.userCodeClassLoader = env.getUserClassLoader()__		this.keySerializer = keySerializer___		this.keyGroupIndex = env.getTaskInfo().getIndexOfThisSubtask()__		this.kvStateRegistry = env.getTaskKvStateRegistry()__	};this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,env,the,link,environment,of,the,task,that,instantiated,the,state,backend,param,operator,identifier,unique,identifier,for,naming,states,created,by,this,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,void,initialize,for,job,environment,env,string,operator,identifier,type,serializer,key,serializer,throws,exception,this,user,code,class,loader,env,get,user,class,loader,this,key,serializer,key,serializer,this,key,group,index,env,get,task,info,get,index,of,this,subtask,this,kv,state,registry,env,get,task,kv,state,registry
AbstractStateBackend -> public abstract <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			TaskKvStateRegistry kvStateRegistry 	) throws Exception_;1472680767;Creates a new {@link AbstractKeyedStateBackend} that is responsible for keeping keyed state_and can be checkpointed to checkpoint streams.;public abstract <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			TaskKvStateRegistry kvStateRegistry_	) throws Exception_;creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,keeping,keyed,state,and,can,be,checkpointed,to,checkpoint,streams;public,abstract,k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,throws,exception
AbstractStateBackend -> public abstract <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			TaskKvStateRegistry kvStateRegistry 	) throws Exception_;1475571578;Creates a new {@link AbstractKeyedStateBackend} that is responsible for keeping keyed state_and can be checkpointed to checkpoint streams.;public abstract <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			TaskKvStateRegistry kvStateRegistry_	) throws Exception_;creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,keeping,keyed,state,and,can,be,checkpointed,to,checkpoint,streams;public,abstract,k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,throws,exception
AbstractStateBackend -> public abstract <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			TaskKvStateRegistry kvStateRegistry 	) throws Exception_;1475656513;Creates a new {@link AbstractKeyedStateBackend} that is responsible for keeping keyed state_and can be checkpointed to checkpoint streams.;public abstract <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			TaskKvStateRegistry kvStateRegistry_	) throws Exception_;creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,keeping,keyed,state,and,can,be,checkpointed,to,checkpoint,streams;public,abstract,k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,throws,exception
AbstractStateBackend -> public abstract <K> AbstractKeyedStateBackend<K> createKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			TaskKvStateRegistry kvStateRegistry 	) throws Exception_;1483656313;Creates a new {@link AbstractKeyedStateBackend} that is responsible for keeping keyed state_and can be checkpointed to checkpoint streams.;public abstract <K> AbstractKeyedStateBackend<K> createKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			TaskKvStateRegistry kvStateRegistry_	) throws Exception_;creates,a,new,link,abstract,keyed,state,backend,that,is,responsible,for,keeping,keyed,state,and,can,be,checkpointed,to,checkpoint,streams;public,abstract,k,abstract,keyed,state,backend,k,create,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,task,kv,state,registry,kv,state,registry,throws,exception
AbstractStateBackend -> public OperatorStateBackend restoreOperatorStateBackend( 			Environment env, 			String operatorIdentifier, 			Collection<OperatorStateHandle> restoreSnapshots 	) throws Exception;1472680767;Creates a new {@link OperatorStateBackend} that restores its state from the given collection of_{@link OperatorStateHandle}.;public OperatorStateBackend restoreOperatorStateBackend(_			Environment env,_			String operatorIdentifier,_			Collection<OperatorStateHandle> restoreSnapshots_	) throws Exception {_		return new DefaultOperatorStateBackend(restoreSnapshots)__	};creates,a,new,link,operator,state,backend,that,restores,its,state,from,the,given,collection,of,link,operator,state,handle;public,operator,state,backend,restore,operator,state,backend,environment,env,string,operator,identifier,collection,operator,state,handle,restore,snapshots,throws,exception,return,new,default,operator,state,backend,restore,snapshots
AbstractStateBackend -> public OperatorStateBackend restoreOperatorStateBackend( 			Environment env, 			String operatorIdentifier, 			Collection<OperatorStateHandle> restoreSnapshots 	) throws Exception;1475571578;Creates a new {@link OperatorStateBackend} that restores its state from the given collection of_{@link OperatorStateHandle}.;public OperatorStateBackend restoreOperatorStateBackend(_			Environment env,_			String operatorIdentifier,_			Collection<OperatorStateHandle> restoreSnapshots_	) throws Exception {_		return new DefaultOperatorStateBackend(env.getUserClassLoader(), restoreSnapshots)__	};creates,a,new,link,operator,state,backend,that,restores,its,state,from,the,given,collection,of,link,operator,state,handle;public,operator,state,backend,restore,operator,state,backend,environment,env,string,operator,identifier,collection,operator,state,handle,restore,snapshots,throws,exception,return,new,default,operator,state,backend,env,get,user,class,loader,restore,snapshots
AbstractStateBackend -> public OperatorStateBackend restoreOperatorStateBackend( 			Environment env, 			String operatorIdentifier, 			Collection<OperatorStateHandle> restoreSnapshots 	) throws Exception;1475656513;Creates a new {@link OperatorStateBackend} that restores its state from the given collection of_{@link OperatorStateHandle}.;public OperatorStateBackend restoreOperatorStateBackend(_			Environment env,_			String operatorIdentifier,_			Collection<OperatorStateHandle> restoreSnapshots_	) throws Exception {_		return new DefaultOperatorStateBackend(env.getUserClassLoader(), restoreSnapshots)__	};creates,a,new,link,operator,state,backend,that,restores,its,state,from,the,given,collection,of,link,operator,state,handle;public,operator,state,backend,restore,operator,state,backend,environment,env,string,operator,identifier,collection,operator,state,handle,restore,snapshots,throws,exception,return,new,default,operator,state,backend,env,get,user,class,loader,restore,snapshots
AbstractStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1450197468;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1454939779;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1455225217;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1455287708;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1460120330;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1464608559;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1468423895;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1468438360;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1470909547;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;protected abstract <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;protected,abstract,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> public static StateBackend loadStateBackendFromConfig( 			Configuration config, 			ClassLoader classLoader, 			@Nullable Logger logger) throws IllegalConfigurationException, DynamicCodeLoadingException, IOException;1487350260;Loads the state backend from the configuration, from the parameter 'state.backend', as defined_in {@link CoreOptions#STATE_BACKEND}.__<p>The state backends can be specified either via their shortcut name, or via the class name_of a {@link StateBackendFactory}. If a StateBackendFactory class name is specified, the factory_is instantiated (via its zero-argument constructor) and its_{@link StateBackendFactory#createFromConfig(Configuration)} method is called.__<p>Recognized shortcut names are '{@value AbstractStateBackend#MEMORY_STATE_BACKEND_NAME}',_'{@value AbstractStateBackend#FS_STATE_BACKEND_NAME}', and_'{@value AbstractStateBackend#ROCKSDB_STATE_BACKEND_NAME}'.__@param config The configuration to load the state backend from_@param classLoader The class loader that should be used to load the state backend_@param logger Optionally, a logger to log actions to (may be null)__@return The instantiated state backend.__@throws DynamicCodeLoadingException_Thrown if a state backend factory is configured and the factory class was not_found or the factory could not be instantiated_@throws IllegalConfigurationException_May be thrown by the StateBackendFactory when creating / configuring the state_backend in the factory_@throws IOException_May be thrown by the StateBackendFactory when instantiating the state backend;public static StateBackend loadStateBackendFromConfig(_			Configuration config,_			ClassLoader classLoader,_			@Nullable Logger logger) throws IllegalConfigurationException, DynamicCodeLoadingException, IOException {__		checkNotNull(config, "config")__		checkNotNull(classLoader, "classLoader")___		final String backendName = config.getString(CoreOptions.STATE_BACKEND)__		if (backendName == null) {_			return null__		}__		_		String factoryClassName = backendName___		switch (backendName.toLowerCase()) {_			case MEMORY_STATE_BACKEND_NAME:_				if (logger != null) {_					logger.info("State backend is set to heap memory (checkpoint to JobManager)")__				}_				return new MemoryStateBackend()___			case FS_STATE_BACKEND_NAME:_				FsStateBackend fsBackend = new FsStateBackendFactory().createFromConfig(config)__				if (logger != null) {_					logger.info("State backend is set to heap memory (checkpoints to filesystem \"{}\")",_							fsBackend.getBasePath())__				}_				return fsBackend___			case ROCKSDB_STATE_BACKEND_NAME:_				factoryClassName = "org.apache.flink.contrib.streaming.state.RocksDBStateBackendFactory"__				_				__			default:_				if (logger != null) {_					logger.info("Loading state backend via factory {}", factoryClassName)__				}__				StateBackendFactory<?> factory__				try {_					@SuppressWarnings("rawtypes")_					Class<? extends StateBackendFactory> clazz = _							Class.forName(factoryClassName, false, classLoader)_									.asSubclass(StateBackendFactory.class)___					factory = clazz.newInstance()__				}_				catch (ClassNotFoundException e) {_					throw new DynamicCodeLoadingException(_							"Cannot find configured state backend factory class: " + backendName, e)__				}_				catch (ClassCastException | InstantiationException | IllegalAccessException e) {_					throw new DynamicCodeLoadingException("The class configured under '" +_							CoreOptions.STATE_BACKEND.key() + "' is not a valid state backend factory (" +_							backendName + ')', e)__				}_				_				return factory.createFromConfig(config)__		}_	};loads,the,state,backend,from,the,configuration,from,the,parameter,state,backend,as,defined,in,link,core,options,p,the,state,backends,can,be,specified,either,via,their,shortcut,name,or,via,the,class,name,of,a,link,state,backend,factory,if,a,state,backend,factory,class,name,is,specified,the,factory,is,instantiated,via,its,zero,argument,constructor,and,its,link,state,backend,factory,create,from,config,configuration,method,is,called,p,recognized,shortcut,names,are,value,abstract,state,backend,value,abstract,state,backend,and,value,abstract,state,backend,param,config,the,configuration,to,load,the,state,backend,from,param,class,loader,the,class,loader,that,should,be,used,to,load,the,state,backend,param,logger,optionally,a,logger,to,log,actions,to,may,be,null,return,the,instantiated,state,backend,throws,dynamic,code,loading,exception,thrown,if,a,state,backend,factory,is,configured,and,the,factory,class,was,not,found,or,the,factory,could,not,be,instantiated,throws,illegal,configuration,exception,may,be,thrown,by,the,state,backend,factory,when,creating,configuring,the,state,backend,in,the,factory,throws,ioexception,may,be,thrown,by,the,state,backend,factory,when,instantiating,the,state,backend;public,static,state,backend,load,state,backend,from,config,configuration,config,class,loader,class,loader,nullable,logger,logger,throws,illegal,configuration,exception,dynamic,code,loading,exception,ioexception,check,not,null,config,config,check,not,null,class,loader,class,loader,final,string,backend,name,config,get,string,core,options,if,backend,name,null,return,null,string,factory,class,name,backend,name,switch,backend,name,to,lower,case,case,if,logger,null,logger,info,state,backend,is,set,to,heap,memory,checkpoint,to,job,manager,return,new,memory,state,backend,case,fs,state,backend,fs,backend,new,fs,state,backend,factory,create,from,config,config,if,logger,null,logger,info,state,backend,is,set,to,heap,memory,checkpoints,to,filesystem,fs,backend,get,base,path,return,fs,backend,case,factory,class,name,org,apache,flink,contrib,streaming,state,rocks,dbstate,backend,factory,default,if,logger,null,logger,info,loading,state,backend,via,factory,factory,class,name,state,backend,factory,factory,try,suppress,warnings,rawtypes,class,extends,state,backend,factory,clazz,class,for,name,factory,class,name,false,class,loader,as,subclass,state,backend,factory,class,factory,clazz,new,instance,catch,class,not,found,exception,e,throw,new,dynamic,code,loading,exception,cannot,find,configured,state,backend,factory,class,backend,name,e,catch,class,cast,exception,instantiation,exception,illegal,access,exception,e,throw,new,dynamic,code,loading,exception,the,class,configured,under,core,options,key,is,not,a,valid,state,backend,factory,backend,name,e,return,factory,create,from,config,config
AbstractStateBackend -> public static StateBackend loadStateBackendFromConfig( 			Configuration config, 			ClassLoader classLoader, 			@Nullable Logger logger) throws IllegalConfigurationException, DynamicCodeLoadingException, IOException;1489109397;Loads the state backend from the configuration, from the parameter 'state.backend', as defined_in {@link CoreOptions#STATE_BACKEND}.__<p>The state backends can be specified either via their shortcut name, or via the class name_of a {@link StateBackendFactory}. If a StateBackendFactory class name is specified, the factory_is instantiated (via its zero-argument constructor) and its_{@link StateBackendFactory#createFromConfig(Configuration)} method is called.__<p>Recognized shortcut names are '{@value AbstractStateBackend#MEMORY_STATE_BACKEND_NAME}',_'{@value AbstractStateBackend#FS_STATE_BACKEND_NAME}', and_'{@value AbstractStateBackend#ROCKSDB_STATE_BACKEND_NAME}'.__@param config The configuration to load the state backend from_@param classLoader The class loader that should be used to load the state backend_@param logger Optionally, a logger to log actions to (may be null)__@return The instantiated state backend.__@throws DynamicCodeLoadingException_Thrown if a state backend factory is configured and the factory class was not_found or the factory could not be instantiated_@throws IllegalConfigurationException_May be thrown by the StateBackendFactory when creating / configuring the state_backend in the factory_@throws IOException_May be thrown by the StateBackendFactory when instantiating the state backend;public static StateBackend loadStateBackendFromConfig(_			Configuration config,_			ClassLoader classLoader,_			@Nullable Logger logger) throws IllegalConfigurationException, DynamicCodeLoadingException, IOException {__		checkNotNull(config, "config")__		checkNotNull(classLoader, "classLoader")___		final String backendName = config.getString(CoreOptions.STATE_BACKEND)__		if (backendName == null) {_			return null__		}__		_		String factoryClassName = backendName___		switch (backendName.toLowerCase()) {_			case MEMORY_STATE_BACKEND_NAME:_				if (logger != null) {_					logger.info("State backend is set to heap memory (checkpoint to JobManager)")__				}_				return new MemoryStateBackend()___			case FS_STATE_BACKEND_NAME:_				FsStateBackend fsBackend = new FsStateBackendFactory().createFromConfig(config)__				if (logger != null) {_					logger.info("State backend is set to heap memory (checkpoints to filesystem \"{}\")",_							fsBackend.getBasePath())__				}_				return fsBackend___			case ROCKSDB_STATE_BACKEND_NAME:_				factoryClassName = "org.apache.flink.contrib.streaming.state.RocksDBStateBackendFactory"__				_				__			default:_				if (logger != null) {_					logger.info("Loading state backend via factory {}", factoryClassName)__				}__				StateBackendFactory<?> factory__				try {_					@SuppressWarnings("rawtypes")_					Class<? extends StateBackendFactory> clazz = _							Class.forName(factoryClassName, false, classLoader)_									.asSubclass(StateBackendFactory.class)___					factory = clazz.newInstance()__				}_				catch (ClassNotFoundException e) {_					throw new DynamicCodeLoadingException(_							"Cannot find configured state backend factory class: " + backendName, e)__				}_				catch (ClassCastException | InstantiationException | IllegalAccessException e) {_					throw new DynamicCodeLoadingException("The class configured under '" +_							CoreOptions.STATE_BACKEND.key() + "' is not a valid state backend factory (" +_							backendName + ')', e)__				}_				_				return factory.createFromConfig(config)__		}_	};loads,the,state,backend,from,the,configuration,from,the,parameter,state,backend,as,defined,in,link,core,options,p,the,state,backends,can,be,specified,either,via,their,shortcut,name,or,via,the,class,name,of,a,link,state,backend,factory,if,a,state,backend,factory,class,name,is,specified,the,factory,is,instantiated,via,its,zero,argument,constructor,and,its,link,state,backend,factory,create,from,config,configuration,method,is,called,p,recognized,shortcut,names,are,value,abstract,state,backend,value,abstract,state,backend,and,value,abstract,state,backend,param,config,the,configuration,to,load,the,state,backend,from,param,class,loader,the,class,loader,that,should,be,used,to,load,the,state,backend,param,logger,optionally,a,logger,to,log,actions,to,may,be,null,return,the,instantiated,state,backend,throws,dynamic,code,loading,exception,thrown,if,a,state,backend,factory,is,configured,and,the,factory,class,was,not,found,or,the,factory,could,not,be,instantiated,throws,illegal,configuration,exception,may,be,thrown,by,the,state,backend,factory,when,creating,configuring,the,state,backend,in,the,factory,throws,ioexception,may,be,thrown,by,the,state,backend,factory,when,instantiating,the,state,backend;public,static,state,backend,load,state,backend,from,config,configuration,config,class,loader,class,loader,nullable,logger,logger,throws,illegal,configuration,exception,dynamic,code,loading,exception,ioexception,check,not,null,config,config,check,not,null,class,loader,class,loader,final,string,backend,name,config,get,string,core,options,if,backend,name,null,return,null,string,factory,class,name,backend,name,switch,backend,name,to,lower,case,case,if,logger,null,logger,info,state,backend,is,set,to,heap,memory,checkpoint,to,job,manager,return,new,memory,state,backend,case,fs,state,backend,fs,backend,new,fs,state,backend,factory,create,from,config,config,if,logger,null,logger,info,state,backend,is,set,to,heap,memory,checkpoints,to,filesystem,fs,backend,get,base,path,return,fs,backend,case,factory,class,name,org,apache,flink,contrib,streaming,state,rocks,dbstate,backend,factory,default,if,logger,null,logger,info,loading,state,backend,via,factory,factory,class,name,state,backend,factory,factory,try,suppress,warnings,rawtypes,class,extends,state,backend,factory,clazz,class,for,name,factory,class,name,false,class,loader,as,subclass,state,backend,factory,class,factory,clazz,new,instance,catch,class,not,found,exception,e,throw,new,dynamic,code,loading,exception,cannot,find,configured,state,backend,factory,class,backend,name,e,catch,class,cast,exception,instantiation,exception,illegal,access,exception,e,throw,new,dynamic,code,loading,exception,the,class,configured,under,core,options,key,is,not,a,valid,state,backend,factory,backend,name,e,return,factory,create,from,config,config
AbstractStateBackend -> public static StateBackend loadStateBackendFromConfig( 			Configuration config, 			ClassLoader classLoader, 			@Nullable Logger logger) throws IllegalConfigurationException, DynamicCodeLoadingException, IOException;1489497957;Loads the state backend from the configuration, from the parameter 'state.backend', as defined_in {@link CoreOptions#STATE_BACKEND}.__<p>The state backends can be specified either via their shortcut name, or via the class name_of a {@link StateBackendFactory}. If a StateBackendFactory class name is specified, the factory_is instantiated (via its zero-argument constructor) and its_{@link StateBackendFactory#createFromConfig(Configuration)} method is called.__<p>Recognized shortcut names are '{@value AbstractStateBackend#MEMORY_STATE_BACKEND_NAME}',_'{@value AbstractStateBackend#FS_STATE_BACKEND_NAME}', and_'{@value AbstractStateBackend#ROCKSDB_STATE_BACKEND_NAME}'.__@param config The configuration to load the state backend from_@param classLoader The class loader that should be used to load the state backend_@param logger Optionally, a logger to log actions to (may be null)__@return The instantiated state backend.__@throws DynamicCodeLoadingException_Thrown if a state backend factory is configured and the factory class was not_found or the factory could not be instantiated_@throws IllegalConfigurationException_May be thrown by the StateBackendFactory when creating / configuring the state_backend in the factory_@throws IOException_May be thrown by the StateBackendFactory when instantiating the state backend;public static StateBackend loadStateBackendFromConfig(_			Configuration config,_			ClassLoader classLoader,_			@Nullable Logger logger) throws IllegalConfigurationException, DynamicCodeLoadingException, IOException {__		checkNotNull(config, "config")__		checkNotNull(classLoader, "classLoader")___		final String backendName = config.getString(CoreOptions.STATE_BACKEND)__		if (backendName == null) {_			return null__		}__		_		String factoryClassName = backendName___		switch (backendName.toLowerCase()) {_			case MEMORY_STATE_BACKEND_NAME:_				if (logger != null) {_					logger.info("State backend is set to heap memory (checkpoint to JobManager)")__				}_				return new MemoryStateBackend()___			case FS_STATE_BACKEND_NAME:_				FsStateBackend fsBackend = new FsStateBackendFactory().createFromConfig(config)__				if (logger != null) {_					logger.info("State backend is set to heap memory (checkpoints to filesystem \"{}\")",_							fsBackend.getBasePath())__				}_				return fsBackend___			case ROCKSDB_STATE_BACKEND_NAME:_				factoryClassName = "org.apache.flink.contrib.streaming.state.RocksDBStateBackendFactory"__				_				__			default:_				if (logger != null) {_					logger.info("Loading state backend via factory {}", factoryClassName)__				}__				StateBackendFactory<?> factory__				try {_					@SuppressWarnings("rawtypes")_					Class<? extends StateBackendFactory> clazz = _							Class.forName(factoryClassName, false, classLoader)_									.asSubclass(StateBackendFactory.class)___					factory = clazz.newInstance()__				}_				catch (ClassNotFoundException e) {_					throw new DynamicCodeLoadingException(_							"Cannot find configured state backend factory class: " + backendName, e)__				}_				catch (ClassCastException | InstantiationException | IllegalAccessException e) {_					throw new DynamicCodeLoadingException("The class configured under '" +_							CoreOptions.STATE_BACKEND.key() + "' is not a valid state backend factory (" +_							backendName + ')', e)__				}_				_				return factory.createFromConfig(config)__		}_	};loads,the,state,backend,from,the,configuration,from,the,parameter,state,backend,as,defined,in,link,core,options,p,the,state,backends,can,be,specified,either,via,their,shortcut,name,or,via,the,class,name,of,a,link,state,backend,factory,if,a,state,backend,factory,class,name,is,specified,the,factory,is,instantiated,via,its,zero,argument,constructor,and,its,link,state,backend,factory,create,from,config,configuration,method,is,called,p,recognized,shortcut,names,are,value,abstract,state,backend,value,abstract,state,backend,and,value,abstract,state,backend,param,config,the,configuration,to,load,the,state,backend,from,param,class,loader,the,class,loader,that,should,be,used,to,load,the,state,backend,param,logger,optionally,a,logger,to,log,actions,to,may,be,null,return,the,instantiated,state,backend,throws,dynamic,code,loading,exception,thrown,if,a,state,backend,factory,is,configured,and,the,factory,class,was,not,found,or,the,factory,could,not,be,instantiated,throws,illegal,configuration,exception,may,be,thrown,by,the,state,backend,factory,when,creating,configuring,the,state,backend,in,the,factory,throws,ioexception,may,be,thrown,by,the,state,backend,factory,when,instantiating,the,state,backend;public,static,state,backend,load,state,backend,from,config,configuration,config,class,loader,class,loader,nullable,logger,logger,throws,illegal,configuration,exception,dynamic,code,loading,exception,ioexception,check,not,null,config,config,check,not,null,class,loader,class,loader,final,string,backend,name,config,get,string,core,options,if,backend,name,null,return,null,string,factory,class,name,backend,name,switch,backend,name,to,lower,case,case,if,logger,null,logger,info,state,backend,is,set,to,heap,memory,checkpoint,to,job,manager,return,new,memory,state,backend,case,fs,state,backend,fs,backend,new,fs,state,backend,factory,create,from,config,config,if,logger,null,logger,info,state,backend,is,set,to,heap,memory,checkpoints,to,filesystem,fs,backend,get,base,path,return,fs,backend,case,factory,class,name,org,apache,flink,contrib,streaming,state,rocks,dbstate,backend,factory,default,if,logger,null,logger,info,loading,state,backend,via,factory,factory,class,name,state,backend,factory,factory,try,suppress,warnings,rawtypes,class,extends,state,backend,factory,clazz,class,for,name,factory,class,name,false,class,loader,as,subclass,state,backend,factory,class,factory,clazz,new,instance,catch,class,not,found,exception,e,throw,new,dynamic,code,loading,exception,cannot,find,configured,state,backend,factory,class,backend,name,e,catch,class,cast,exception,instantiation,exception,illegal,access,exception,e,throw,new,dynamic,code,loading,exception,the,class,configured,under,core,options,key,is,not,a,valid,state,backend,factory,backend,name,e,return,factory,create,from,config,config
AbstractStateBackend -> public void initializeForJob(Environment env, 		String operatorIdentifier, 		TypeSerializer<?> keySerializer) throws Exception;1450197468;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param env The {@link Environment} of the task that instantiated the state backend_@param operatorIdentifier Unique identifier for naming states created by this backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public void initializeForJob(Environment env,_		String operatorIdentifier,_		TypeSerializer<?> keySerializer) throws Exception {_		this.userCodeClassLoader = env.getUserClassLoader()__		this.keySerializer = keySerializer__	};this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,env,the,link,environment,of,the,task,that,instantiated,the,state,backend,param,operator,identifier,unique,identifier,for,naming,states,created,by,this,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,void,initialize,for,job,environment,env,string,operator,identifier,type,serializer,key,serializer,throws,exception,this,user,code,class,loader,env,get,user,class,loader,this,key,serializer,key,serializer
AbstractStateBackend -> public void initializeForJob(Environment env, 		String operatorIdentifier, 		TypeSerializer<?> keySerializer) throws Exception;1453721631;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param env The {@link Environment} of the task that instantiated the state backend_@param operatorIdentifier Unique identifier for naming states created by this backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public void initializeForJob(Environment env,_		String operatorIdentifier,_		TypeSerializer<?> keySerializer) throws Exception {_		this.userCodeClassLoader = env.getUserClassLoader()__		this.keySerializer = keySerializer__	};this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,env,the,link,environment,of,the,task,that,instantiated,the,state,backend,param,operator,identifier,unique,identifier,for,naming,states,created,by,this,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,void,initialize,for,job,environment,env,string,operator,identifier,type,serializer,key,serializer,throws,exception,this,user,code,class,loader,env,get,user,class,loader,this,key,serializer,key,serializer
AbstractStateBackend -> public void initializeForJob(Environment env, 		String operatorIdentifier, 		TypeSerializer<?> keySerializer) throws Exception;1454517847;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param env The {@link Environment} of the task that instantiated the state backend_@param operatorIdentifier Unique identifier for naming states created by this backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public void initializeForJob(Environment env,_		String operatorIdentifier,_		TypeSerializer<?> keySerializer) throws Exception {_		this.userCodeClassLoader = env.getUserClassLoader()__		this.keySerializer = keySerializer__	};this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,env,the,link,environment,of,the,task,that,instantiated,the,state,backend,param,operator,identifier,unique,identifier,for,naming,states,created,by,this,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,void,initialize,for,job,environment,env,string,operator,identifier,type,serializer,key,serializer,throws,exception,this,user,code,class,loader,env,get,user,class,loader,this,key,serializer,key,serializer
AbstractStateBackend -> public void initializeForJob(Environment env, 		String operatorIdentifier, 		TypeSerializer<?> keySerializer) throws Exception;1454939779;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param env The {@link Environment} of the task that instantiated the state backend_@param operatorIdentifier Unique identifier for naming states created by this backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public void initializeForJob(Environment env,_		String operatorIdentifier,_		TypeSerializer<?> keySerializer) throws Exception {_		this.userCodeClassLoader = env.getUserClassLoader()__		this.keySerializer = keySerializer__	};this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,env,the,link,environment,of,the,task,that,instantiated,the,state,backend,param,operator,identifier,unique,identifier,for,naming,states,created,by,this,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,void,initialize,for,job,environment,env,string,operator,identifier,type,serializer,key,serializer,throws,exception,this,user,code,class,loader,env,get,user,class,loader,this,key,serializer,key,serializer
AbstractStateBackend -> public void initializeForJob(Environment env, 		String operatorIdentifier, 		TypeSerializer<?> keySerializer) throws Exception;1455225217;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param env The {@link Environment} of the task that instantiated the state backend_@param operatorIdentifier Unique identifier for naming states created by this backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public void initializeForJob(Environment env,_		String operatorIdentifier,_		TypeSerializer<?> keySerializer) throws Exception {_		this.userCodeClassLoader = env.getUserClassLoader()__		this.keySerializer = keySerializer__	};this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,env,the,link,environment,of,the,task,that,instantiated,the,state,backend,param,operator,identifier,unique,identifier,for,naming,states,created,by,this,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,void,initialize,for,job,environment,env,string,operator,identifier,type,serializer,key,serializer,throws,exception,this,user,code,class,loader,env,get,user,class,loader,this,key,serializer,key,serializer
AbstractStateBackend -> public void initializeForJob(Environment env, 		String operatorIdentifier, 		TypeSerializer<?> keySerializer) throws Exception;1455287708;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param env The {@link Environment} of the task that instantiated the state backend_@param operatorIdentifier Unique identifier for naming states created by this backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public void initializeForJob(Environment env,_		String operatorIdentifier,_		TypeSerializer<?> keySerializer) throws Exception {_		this.userCodeClassLoader = env.getUserClassLoader()__		this.keySerializer = keySerializer__	};this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,env,the,link,environment,of,the,task,that,instantiated,the,state,backend,param,operator,identifier,unique,identifier,for,naming,states,created,by,this,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,void,initialize,for,job,environment,env,string,operator,identifier,type,serializer,key,serializer,throws,exception,this,user,code,class,loader,env,get,user,class,loader,this,key,serializer,key,serializer
AbstractStateBackend -> public void initializeForJob(Environment env, 		String operatorIdentifier, 		TypeSerializer<?> keySerializer) throws Exception;1460120330;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param env The {@link Environment} of the task that instantiated the state backend_@param operatorIdentifier Unique identifier for naming states created by this backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public void initializeForJob(Environment env,_		String operatorIdentifier,_		TypeSerializer<?> keySerializer) throws Exception {_		this.userCodeClassLoader = env.getUserClassLoader()__		this.keySerializer = keySerializer__	};this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,env,the,link,environment,of,the,task,that,instantiated,the,state,backend,param,operator,identifier,unique,identifier,for,naming,states,created,by,this,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,void,initialize,for,job,environment,env,string,operator,identifier,type,serializer,key,serializer,throws,exception,this,user,code,class,loader,env,get,user,class,loader,this,key,serializer,key,serializer
AbstractStateBackend -> public void initializeForJob(Environment env, 		String operatorIdentifier, 		TypeSerializer<?> keySerializer) throws Exception;1468423895;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param env The {@link Environment} of the task that instantiated the state backend_@param operatorIdentifier Unique identifier for naming states created by this backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public void initializeForJob(Environment env,_		String operatorIdentifier,_		TypeSerializer<?> keySerializer) throws Exception {_		this.userCodeClassLoader = env.getUserClassLoader()__		this.keySerializer = keySerializer__	};this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,env,the,link,environment,of,the,task,that,instantiated,the,state,backend,param,operator,identifier,unique,identifier,for,naming,states,created,by,this,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,void,initialize,for,job,environment,env,string,operator,identifier,type,serializer,key,serializer,throws,exception,this,user,code,class,loader,env,get,user,class,loader,this,key,serializer,key,serializer
AbstractStateBackend -> public void initializeForJob(Environment env, 		String operatorIdentifier, 		TypeSerializer<?> keySerializer) throws Exception;1468438360;This method is called by the task upon deployment to initialize the state backend for_data for a specific job.__@param env The {@link Environment} of the task that instantiated the state backend_@param operatorIdentifier Unique identifier for naming states created by this backend_@throws Exception Overwritten versions of this method may throw exceptions, in which_case the job that uses the state backend is considered failed during_deployment.;public void initializeForJob(Environment env,_		String operatorIdentifier,_		TypeSerializer<?> keySerializer) throws Exception {_		this.userCodeClassLoader = env.getUserClassLoader()__		this.keySerializer = keySerializer__	};this,method,is,called,by,the,task,upon,deployment,to,initialize,the,state,backend,for,data,for,a,specific,job,param,env,the,link,environment,of,the,task,that,instantiated,the,state,backend,param,operator,identifier,unique,identifier,for,naming,states,created,by,this,backend,throws,exception,overwritten,versions,of,this,method,may,throw,exceptions,in,which,case,the,job,that,uses,the,state,backend,is,considered,failed,during,deployment;public,void,initialize,for,job,environment,env,string,operator,identifier,type,serializer,key,serializer,throws,exception,this,user,code,class,loader,env,get,user,class,loader,this,key,serializer,key,serializer
AbstractStateBackend -> public abstract void close() throws Exception_;1450197468;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
AbstractStateBackend -> public abstract void close() throws Exception_;1453721631;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
AbstractStateBackend -> public abstract void close() throws Exception_;1454517847;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
AbstractStateBackend -> public abstract void close() throws Exception_;1454939779;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
AbstractStateBackend -> public abstract void close() throws Exception_;1455225217;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
AbstractStateBackend -> public abstract void close() throws Exception_;1455287708;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
AbstractStateBackend -> public abstract void close() throws Exception_;1460120330;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
AbstractStateBackend -> public abstract void close() throws Exception_;1464608559;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
AbstractStateBackend -> public abstract void close() throws Exception_;1468423895;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
AbstractStateBackend -> public abstract void close() throws Exception_;1468438360;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
AbstractStateBackend -> public abstract void close() throws Exception_;1470909547;Closes the state backend, releasing all internal resources, but does not delete any persistent_checkpoint data.__@throws Exception Exceptions can be forwarded and will be logged by the system;public abstract void close() throws Exception_;closes,the,state,backend,releasing,all,internal,resources,but,does,not,delete,any,persistent,checkpoint,data,throws,exception,exceptions,can,be,forwarded,and,will,be,logged,by,the,system;public,abstract,void,close,throws,exception
AbstractStateBackend -> public abstract <K> AbstractKeyedStateBackend<K> restoreKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			List<KeyGroupsStateHandle> restoredState, 			TaskKvStateRegistry kvStateRegistry 	) throws Exception_;1472680767;Creates a new {@link AbstractKeyedStateBackend} that restores its state from the given list_{@link KeyGroupsStateHandle KeyGroupStateHandles}.;public abstract <K> AbstractKeyedStateBackend<K> restoreKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			List<KeyGroupsStateHandle> restoredState,_			TaskKvStateRegistry kvStateRegistry_	) throws Exception_;creates,a,new,link,abstract,keyed,state,backend,that,restores,its,state,from,the,given,list,link,key,groups,state,handle,key,group,state,handles;public,abstract,k,abstract,keyed,state,backend,k,restore,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,list,key,groups,state,handle,restored,state,task,kv,state,registry,kv,state,registry,throws,exception
AbstractStateBackend -> public abstract <K> AbstractKeyedStateBackend<K> restoreKeyedStateBackend( 			Environment env, 			JobID jobID, 			String operatorIdentifier, 			TypeSerializer<K> keySerializer, 			int numberOfKeyGroups, 			KeyGroupRange keyGroupRange, 			List<KeyGroupsStateHandle> restoredState, 			TaskKvStateRegistry kvStateRegistry 	) throws Exception_;1475656513;Creates a new {@link AbstractKeyedStateBackend} that restores its state from the given list_{@link KeyGroupsStateHandle KeyGroupStateHandles}.;public abstract <K> AbstractKeyedStateBackend<K> restoreKeyedStateBackend(_			Environment env,_			JobID jobID,_			String operatorIdentifier,_			TypeSerializer<K> keySerializer,_			int numberOfKeyGroups,_			KeyGroupRange keyGroupRange,_			List<KeyGroupsStateHandle> restoredState,_			TaskKvStateRegistry kvStateRegistry_	) throws Exception_;creates,a,new,link,abstract,keyed,state,backend,that,restores,its,state,from,the,given,list,link,key,groups,state,handle,key,group,state,handles;public,abstract,k,abstract,keyed,state,backend,k,restore,keyed,state,backend,environment,env,job,id,job,id,string,operator,identifier,type,serializer,k,key,serializer,int,number,of,key,groups,key,group,range,key,group,range,list,key,groups,state,handle,restored,state,task,kv,state,registry,kv,state,registry,throws,exception
AbstractStateBackend -> public OperatorStateBackend createOperatorStateBackend( 			Environment env, 			String operatorIdentifier 	) throws Exception;1472680767;Creates a new {@link OperatorStateBackend} that can be used for storing partitionable operator_state in checkpoint streams.;public OperatorStateBackend createOperatorStateBackend(_			Environment env,_			String operatorIdentifier_	) throws Exception {_		return new DefaultOperatorStateBackend()__	};creates,a,new,link,operator,state,backend,that,can,be,used,for,storing,partitionable,operator,state,in,checkpoint,streams;public,operator,state,backend,create,operator,state,backend,environment,env,string,operator,identifier,throws,exception,return,new,default,operator,state,backend
AbstractStateBackend -> public OperatorStateBackend createOperatorStateBackend( 			Environment env, 			String operatorIdentifier 	) throws Exception;1475571578;Creates a new {@link OperatorStateBackend} that can be used for storing partitionable operator_state in checkpoint streams.;public OperatorStateBackend createOperatorStateBackend(_			Environment env,_			String operatorIdentifier_	) throws Exception {_		return new DefaultOperatorStateBackend(env.getUserClassLoader())__	};creates,a,new,link,operator,state,backend,that,can,be,used,for,storing,partitionable,operator,state,in,checkpoint,streams;public,operator,state,backend,create,operator,state,backend,environment,env,string,operator,identifier,throws,exception,return,new,default,operator,state,backend,env,get,user,class,loader
AbstractStateBackend -> public OperatorStateBackend createOperatorStateBackend( 			Environment env, 			String operatorIdentifier 	) throws Exception;1475656513;Creates a new {@link OperatorStateBackend} that can be used for storing partitionable operator_state in checkpoint streams.;public OperatorStateBackend createOperatorStateBackend(_			Environment env,_			String operatorIdentifier_	) throws Exception {_		return new DefaultOperatorStateBackend(env.getUserClassLoader())__	};creates,a,new,link,operator,state,backend,that,can,be,used,for,storing,partitionable,operator,state,in,checkpoint,streams;public,operator,state,backend,create,operator,state,backend,environment,env,string,operator,identifier,throws,exception,return,new,default,operator,state,backend,env,get,user,class,loader
AbstractStateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1450197468;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1453721631;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1454517847;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1454939779;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1455225217;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1455287708;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1460120330;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1464608559;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1468423895;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1468438360;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract CheckpointStateOutputStream createCheckpointStateOutputStream( 			long checkpointID, long timestamp) throws Exception_;1470909547;Creates an output stream that writes into the state of the given checkpoint. When the stream_is closes, it returns a state handle that can retrieve the state back.__@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@return An output stream that writes state for the given checkpoint.__@throws Exception Exceptions may occur while creating the stream and should be forwarded.;public abstract CheckpointStateOutputStream createCheckpointStateOutputStream(_			long checkpointID, long timestamp) throws Exception_;creates,an,output,stream,that,writes,into,the,state,of,the,given,checkpoint,when,the,stream,is,closes,it,returns,a,state,handle,that,can,retrieve,the,state,back,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,return,an,output,stream,that,writes,state,for,the,given,checkpoint,throws,exception,exceptions,may,occur,while,creating,the,stream,and,should,be,forwarded;public,abstract,checkpoint,state,output,stream,create,checkpoint,state,output,stream,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1450197468;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
AbstractStateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1453721631;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
AbstractStateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1454517847;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
AbstractStateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1454939779;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
AbstractStateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1455225217;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
AbstractStateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1455287708;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
AbstractStateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1460120330;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
AbstractStateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1464608559;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
AbstractStateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1468423895;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
AbstractStateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1468438360;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
AbstractStateBackend -> CheckpointStateOutputStream -> public abstract StreamStateHandle closeAndGetHandle() throws IOException_;1470909547;Closes the stream and gets a state handle that can create an input stream_producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public abstract StreamStateHandle closeAndGetHandle() throws IOException_;closes,the,stream,and,gets,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,abstract,stream,state,handle,close,and,get,handle,throws,ioexception
AbstractStateBackend -> public static StateBackend loadStateBackendFromConfigOrCreateDefault( 			Configuration config, 			ClassLoader classLoader, 			@Nullable Logger logger) throws IllegalConfigurationException, DynamicCodeLoadingException, IOException;1487350260;Loads the state backend from the configuration, from the parameter 'state.backend', as defined_in {@link CoreOptions#STATE_BACKEND}. If no state backend is configures, this instantiates the_default state backend (the {@link MemoryStateBackend}).__<p>Refer to {@link #loadStateBackendFromConfig(Configuration, ClassLoader, Logger)} for details on_how the state backend is loaded from the configuration.__@param config The configuration to load the state backend from_@param classLoader The class loader that should be used to load the state backend_@param logger Optionally, a logger to log actions to (may be null)__@return The instantiated state backend.__@throws DynamicCodeLoadingException_Thrown if a state backend factory is configured and the factory class was not_found or the factory could not be instantiated_@throws IllegalConfigurationException_May be thrown by the StateBackendFactory when creating / configuring the state_backend in the factory_@throws IOException_May be thrown by the StateBackendFactory when instantiating the state backend;public static StateBackend loadStateBackendFromConfigOrCreateDefault(_			Configuration config,_			ClassLoader classLoader,_			@Nullable Logger logger) throws IllegalConfigurationException, DynamicCodeLoadingException, IOException {__		final StateBackend fromConfig = loadStateBackendFromConfig(config, classLoader, logger)___		if (fromConfig != null) {_			return fromConfig__		}_		else {_			if (logger != null) {_				logger.info("No state backend has been configured, using default state backend (Memory / JobManager)")__			}_			return new MemoryStateBackend()__		}_	};loads,the,state,backend,from,the,configuration,from,the,parameter,state,backend,as,defined,in,link,core,options,if,no,state,backend,is,configures,this,instantiates,the,default,state,backend,the,link,memory,state,backend,p,refer,to,link,load,state,backend,from,config,configuration,class,loader,logger,for,details,on,how,the,state,backend,is,loaded,from,the,configuration,param,config,the,configuration,to,load,the,state,backend,from,param,class,loader,the,class,loader,that,should,be,used,to,load,the,state,backend,param,logger,optionally,a,logger,to,log,actions,to,may,be,null,return,the,instantiated,state,backend,throws,dynamic,code,loading,exception,thrown,if,a,state,backend,factory,is,configured,and,the,factory,class,was,not,found,or,the,factory,could,not,be,instantiated,throws,illegal,configuration,exception,may,be,thrown,by,the,state,backend,factory,when,creating,configuring,the,state,backend,in,the,factory,throws,ioexception,may,be,thrown,by,the,state,backend,factory,when,instantiating,the,state,backend;public,static,state,backend,load,state,backend,from,config,or,create,default,configuration,config,class,loader,class,loader,nullable,logger,logger,throws,illegal,configuration,exception,dynamic,code,loading,exception,ioexception,final,state,backend,from,config,load,state,backend,from,config,config,class,loader,logger,if,from,config,null,return,from,config,else,if,logger,null,logger,info,no,state,backend,has,been,configured,using,default,state,backend,memory,job,manager,return,new,memory,state,backend
AbstractStateBackend -> public static StateBackend loadStateBackendFromConfigOrCreateDefault( 			Configuration config, 			ClassLoader classLoader, 			@Nullable Logger logger) throws IllegalConfigurationException, DynamicCodeLoadingException, IOException;1489109397;Loads the state backend from the configuration, from the parameter 'state.backend', as defined_in {@link CoreOptions#STATE_BACKEND}. If no state backend is configures, this instantiates the_default state backend (the {@link MemoryStateBackend}).__<p>Refer to {@link #loadStateBackendFromConfig(Configuration, ClassLoader, Logger)} for details on_how the state backend is loaded from the configuration.__@param config The configuration to load the state backend from_@param classLoader The class loader that should be used to load the state backend_@param logger Optionally, a logger to log actions to (may be null)__@return The instantiated state backend.__@throws DynamicCodeLoadingException_Thrown if a state backend factory is configured and the factory class was not_found or the factory could not be instantiated_@throws IllegalConfigurationException_May be thrown by the StateBackendFactory when creating / configuring the state_backend in the factory_@throws IOException_May be thrown by the StateBackendFactory when instantiating the state backend;public static StateBackend loadStateBackendFromConfigOrCreateDefault(_			Configuration config,_			ClassLoader classLoader,_			@Nullable Logger logger) throws IllegalConfigurationException, DynamicCodeLoadingException, IOException {__		final StateBackend fromConfig = loadStateBackendFromConfig(config, classLoader, logger)___		if (fromConfig != null) {_			return fromConfig__		}_		else {_			if (logger != null) {_				logger.info("No state backend has been configured, using default state backend (Memory / JobManager)")__			}_			return new MemoryStateBackend()__		}_	};loads,the,state,backend,from,the,configuration,from,the,parameter,state,backend,as,defined,in,link,core,options,if,no,state,backend,is,configures,this,instantiates,the,default,state,backend,the,link,memory,state,backend,p,refer,to,link,load,state,backend,from,config,configuration,class,loader,logger,for,details,on,how,the,state,backend,is,loaded,from,the,configuration,param,config,the,configuration,to,load,the,state,backend,from,param,class,loader,the,class,loader,that,should,be,used,to,load,the,state,backend,param,logger,optionally,a,logger,to,log,actions,to,may,be,null,return,the,instantiated,state,backend,throws,dynamic,code,loading,exception,thrown,if,a,state,backend,factory,is,configured,and,the,factory,class,was,not,found,or,the,factory,could,not,be,instantiated,throws,illegal,configuration,exception,may,be,thrown,by,the,state,backend,factory,when,creating,configuring,the,state,backend,in,the,factory,throws,ioexception,may,be,thrown,by,the,state,backend,factory,when,instantiating,the,state,backend;public,static,state,backend,load,state,backend,from,config,or,create,default,configuration,config,class,loader,class,loader,nullable,logger,logger,throws,illegal,configuration,exception,dynamic,code,loading,exception,ioexception,final,state,backend,from,config,load,state,backend,from,config,config,class,loader,logger,if,from,config,null,return,from,config,else,if,logger,null,logger,info,no,state,backend,has,been,configured,using,default,state,backend,memory,job,manager,return,new,memory,state,backend
AbstractStateBackend -> public static StateBackend loadStateBackendFromConfigOrCreateDefault( 			Configuration config, 			ClassLoader classLoader, 			@Nullable Logger logger) throws IllegalConfigurationException, DynamicCodeLoadingException, IOException;1489497957;Loads the state backend from the configuration, from the parameter 'state.backend', as defined_in {@link CoreOptions#STATE_BACKEND}. If no state backend is configures, this instantiates the_default state backend (the {@link MemoryStateBackend}).__<p>Refer to {@link #loadStateBackendFromConfig(Configuration, ClassLoader, Logger)} for details on_how the state backend is loaded from the configuration.__@param config The configuration to load the state backend from_@param classLoader The class loader that should be used to load the state backend_@param logger Optionally, a logger to log actions to (may be null)__@return The instantiated state backend.__@throws DynamicCodeLoadingException_Thrown if a state backend factory is configured and the factory class was not_found or the factory could not be instantiated_@throws IllegalConfigurationException_May be thrown by the StateBackendFactory when creating / configuring the state_backend in the factory_@throws IOException_May be thrown by the StateBackendFactory when instantiating the state backend;public static StateBackend loadStateBackendFromConfigOrCreateDefault(_			Configuration config,_			ClassLoader classLoader,_			@Nullable Logger logger) throws IllegalConfigurationException, DynamicCodeLoadingException, IOException {__		final StateBackend fromConfig = loadStateBackendFromConfig(config, classLoader, logger)___		if (fromConfig != null) {_			return fromConfig__		}_		else {_			if (logger != null) {_				logger.info("No state backend has been configured, using default state backend (Memory / JobManager)")__			}_			return new MemoryStateBackend()__		}_	};loads,the,state,backend,from,the,configuration,from,the,parameter,state,backend,as,defined,in,link,core,options,if,no,state,backend,is,configures,this,instantiates,the,default,state,backend,the,link,memory,state,backend,p,refer,to,link,load,state,backend,from,config,configuration,class,loader,logger,for,details,on,how,the,state,backend,is,loaded,from,the,configuration,param,config,the,configuration,to,load,the,state,backend,from,param,class,loader,the,class,loader,that,should,be,used,to,load,the,state,backend,param,logger,optionally,a,logger,to,log,actions,to,may,be,null,return,the,instantiated,state,backend,throws,dynamic,code,loading,exception,thrown,if,a,state,backend,factory,is,configured,and,the,factory,class,was,not,found,or,the,factory,could,not,be,instantiated,throws,illegal,configuration,exception,may,be,thrown,by,the,state,backend,factory,when,creating,configuring,the,state,backend,in,the,factory,throws,ioexception,may,be,thrown,by,the,state,backend,factory,when,instantiating,the,state,backend;public,static,state,backend,load,state,backend,from,config,or,create,default,configuration,config,class,loader,class,loader,nullable,logger,logger,throws,illegal,configuration,exception,dynamic,code,loading,exception,ioexception,final,state,backend,from,config,load,state,backend,from,config,config,class,loader,logger,if,from,config,null,return,from,config,else,if,logger,null,logger,info,no,state,backend,has,been,configured,using,default,state,backend,memory,job,manager,return,new,memory,state,backend
AbstractStateBackend -> public abstract CheckpointStreamFactory createStreamFactory( 			JobID jobId, 			String operatorIdentifier) throws IOException_;1470847490;Creates a {@link CheckpointStreamFactory} that can be used to create streams_that should end up in a checkpoint.__@param jobId The {@link JobID} of the job for which we are creating checkpoint streams._@param operatorIdentifier An identifier of the operator for which we create streams.;public abstract CheckpointStreamFactory createStreamFactory(_			JobID jobId,_			String operatorIdentifier) throws IOException_;creates,a,link,checkpoint,stream,factory,that,can,be,used,to,create,streams,that,should,end,up,in,a,checkpoint,param,job,id,the,link,job,id,of,the,job,for,which,we,are,creating,checkpoint,streams,param,operator,identifier,an,identifier,of,the,operator,for,which,we,create,streams;public,abstract,checkpoint,stream,factory,create,stream,factory,job,id,job,id,string,operator,identifier,throws,ioexception
AbstractStateBackend -> public abstract CheckpointStreamFactory createStreamFactory( 			JobID jobId, 			String operatorIdentifier) throws IOException_;1472464402;Creates a {@link CheckpointStreamFactory} that can be used to create streams_that should end up in a checkpoint.__@param jobId The {@link JobID} of the job for which we are creating checkpoint streams._@param operatorIdentifier An identifier of the operator for which we create streams.;public abstract CheckpointStreamFactory createStreamFactory(_			JobID jobId,_			String operatorIdentifier) throws IOException_;creates,a,link,checkpoint,stream,factory,that,can,be,used,to,create,streams,that,should,end,up,in,a,checkpoint,param,job,id,the,link,job,id,of,the,job,for,which,we,are,creating,checkpoint,streams,param,operator,identifier,an,identifier,of,the,operator,for,which,we,create,streams;public,abstract,checkpoint,stream,factory,create,stream,factory,job,id,job,id,string,operator,identifier,throws,ioexception
AbstractStateBackend -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void setCurrentKey(Object currentKey);1450197468;Sets the current key that is used for partitioned state._@param currentKey The current key.;@SuppressWarnings({"unchecked", "rawtypes"})_	public void setCurrentKey(Object currentKey) {_		this.currentKey = currentKey__		if (keyValueStates != null) {_			for (KvState kv : keyValueStates) {_				kv.setCurrentKey(currentKey)__			}_		}_	};sets,the,current,key,that,is,used,for,partitioned,state,param,current,key,the,current,key;suppress,warnings,unchecked,rawtypes,public,void,set,current,key,object,current,key,this,current,key,current,key,if,key,value,states,null,for,kv,state,kv,key,value,states,kv,set,current,key,current,key
AbstractStateBackend -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void setCurrentKey(Object currentKey);1453721631;Sets the current key that is used for partitioned state._@param currentKey The current key.;@SuppressWarnings({"unchecked", "rawtypes"})_	public void setCurrentKey(Object currentKey) {_		this.currentKey = currentKey__		if (keyValueStates != null) {_			for (KvState kv : keyValueStates) {_				kv.setCurrentKey(currentKey)__			}_		}_	};sets,the,current,key,that,is,used,for,partitioned,state,param,current,key,the,current,key;suppress,warnings,unchecked,rawtypes,public,void,set,current,key,object,current,key,this,current,key,current,key,if,key,value,states,null,for,kv,state,kv,key,value,states,kv,set,current,key,current,key
AbstractStateBackend -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void setCurrentKey(Object currentKey);1454517847;Sets the current key that is used for partitioned state._@param currentKey The current key.;@SuppressWarnings({"unchecked", "rawtypes"})_	public void setCurrentKey(Object currentKey) {_		this.currentKey = currentKey__		if (keyValueStates != null) {_			for (KvState kv : keyValueStates) {_				kv.setCurrentKey(currentKey)__			}_		}_	};sets,the,current,key,that,is,used,for,partitioned,state,param,current,key,the,current,key;suppress,warnings,unchecked,rawtypes,public,void,set,current,key,object,current,key,this,current,key,current,key,if,key,value,states,null,for,kv,state,kv,key,value,states,kv,set,current,key,current,key
AbstractStateBackend -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void setCurrentKey(Object currentKey);1454939779;Sets the current key that is used for partitioned state._@param currentKey The current key.;@SuppressWarnings({"unchecked", "rawtypes"})_	public void setCurrentKey(Object currentKey) {_		this.currentKey = currentKey__		if (keyValueStates != null) {_			for (KvState kv : keyValueStates) {_				kv.setCurrentKey(currentKey)__			}_		}_	};sets,the,current,key,that,is,used,for,partitioned,state,param,current,key,the,current,key;suppress,warnings,unchecked,rawtypes,public,void,set,current,key,object,current,key,this,current,key,current,key,if,key,value,states,null,for,kv,state,kv,key,value,states,kv,set,current,key,current,key
AbstractStateBackend -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void setCurrentKey(Object currentKey);1455225217;Sets the current key that is used for partitioned state._@param currentKey The current key.;@SuppressWarnings({"unchecked", "rawtypes"})_	public void setCurrentKey(Object currentKey) {_		this.currentKey = currentKey__		if (keyValueStates != null) {_			for (KvState kv : keyValueStates) {_				kv.setCurrentKey(currentKey)__			}_		}_	};sets,the,current,key,that,is,used,for,partitioned,state,param,current,key,the,current,key;suppress,warnings,unchecked,rawtypes,public,void,set,current,key,object,current,key,this,current,key,current,key,if,key,value,states,null,for,kv,state,kv,key,value,states,kv,set,current,key,current,key
AbstractStateBackend -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void setCurrentKey(Object currentKey);1455287708;Sets the current key that is used for partitioned state._@param currentKey The current key.;@SuppressWarnings({"unchecked", "rawtypes"})_	public void setCurrentKey(Object currentKey) {_		this.currentKey = currentKey__		if (keyValueStates != null) {_			for (KvState kv : keyValueStates) {_				kv.setCurrentKey(currentKey)__			}_		}_	};sets,the,current,key,that,is,used,for,partitioned,state,param,current,key,the,current,key;suppress,warnings,unchecked,rawtypes,public,void,set,current,key,object,current,key,this,current,key,current,key,if,key,value,states,null,for,kv,state,kv,key,value,states,kv,set,current,key,current,key
AbstractStateBackend -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void setCurrentKey(Object currentKey);1460120330;Sets the current key that is used for partitioned state._@param currentKey The current key.;@SuppressWarnings({"unchecked", "rawtypes"})_	public void setCurrentKey(Object currentKey) {_		this.currentKey = currentKey__		if (keyValueStates != null) {_			for (KvState kv : keyValueStates) {_				kv.setCurrentKey(currentKey)__			}_		}_	};sets,the,current,key,that,is,used,for,partitioned,state,param,current,key,the,current,key;suppress,warnings,unchecked,rawtypes,public,void,set,current,key,object,current,key,this,current,key,current,key,if,key,value,states,null,for,kv,state,kv,key,value,states,kv,set,current,key,current,key
AbstractStateBackend -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void setCurrentKey(Object currentKey);1464608559;Sets the current key that is used for partitioned state._@param currentKey The current key.;@SuppressWarnings({"unchecked", "rawtypes"})_	public void setCurrentKey(Object currentKey) {_		this.currentKey = Preconditions.checkNotNull(currentKey, "Key")__		if (keyValueStates != null) {_			for (KvState kv : keyValueStates) {_				kv.setCurrentKey(currentKey)__			}_		}_	};sets,the,current,key,that,is,used,for,partitioned,state,param,current,key,the,current,key;suppress,warnings,unchecked,rawtypes,public,void,set,current,key,object,current,key,this,current,key,preconditions,check,not,null,current,key,key,if,key,value,states,null,for,kv,state,kv,key,value,states,kv,set,current,key,current,key
AbstractStateBackend -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void setCurrentKey(Object currentKey);1468423895;Sets the current key that is used for partitioned state._@param currentKey The current key.;@SuppressWarnings({"unchecked", "rawtypes"})_	public void setCurrentKey(Object currentKey) {_		this.currentKey = currentKey__		if (keyValueStates != null) {_			for (KvState kv : keyValueStates) {_				kv.setCurrentKey(currentKey)__			}_		}_	};sets,the,current,key,that,is,used,for,partitioned,state,param,current,key,the,current,key;suppress,warnings,unchecked,rawtypes,public,void,set,current,key,object,current,key,this,current,key,current,key,if,key,value,states,null,for,kv,state,kv,key,value,states,kv,set,current,key,current,key
AbstractStateBackend -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void setCurrentKey(Object currentKey);1468438360;Sets the current key that is used for partitioned state._@param currentKey The current key.;@SuppressWarnings({"unchecked", "rawtypes"})_	public void setCurrentKey(Object currentKey) {_		this.currentKey = currentKey__		if (keyValueStates != null) {_			for (KvState kv : keyValueStates) {_				kv.setCurrentKey(currentKey)__			}_		}_	};sets,the,current,key,that,is,used,for,partitioned,state,param,current,key,the,current,key;suppress,warnings,unchecked,rawtypes,public,void,set,current,key,object,current,key,this,current,key,current,key,if,key,value,states,null,for,kv,state,kv,key,value,states,kv,set,current,key,current,key
AbstractStateBackend -> @SuppressWarnings({"unchecked", "rawtypes"}) 	public void setCurrentKey(Object currentKey);1470909547;Sets the current key that is used for partitioned state._@param currentKey The current key.;@SuppressWarnings({"unchecked", "rawtypes"})_	public void setCurrentKey(Object currentKey) {_		this.currentKey = Preconditions.checkNotNull(currentKey, "Key")__		if (keyValueStates != null) {_			for (KvState kv : keyValueStates) {_				kv.setCurrentKey(currentKey)__			}_		}_	};sets,the,current,key,that,is,used,for,partitioned,state,param,current,key,the,current,key;suppress,warnings,unchecked,rawtypes,public,void,set,current,key,object,current,key,this,current,key,preconditions,check,not,null,current,key,key,if,key,value,states,null,for,kv,state,kv,key,value,states,kv,set,current,key,current,key
AbstractStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1450197468;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1454939779;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1455225217;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1455287708;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1460120330;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1464608559;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1468423895;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1468438360;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1470909547;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;protected abstract <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;protected,abstract,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> abstract protected <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1453721631;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;abstract protected <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;abstract,protected,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> abstract protected <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;1454517847;Creates and returns a new {@link ValueState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the value that the {@code ValueState} can store.;abstract protected <N, T> ValueState<T> createValueState(TypeSerializer<N> namespaceSerializer, ValueStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,value,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,value,that,the,code,value,state,can,store;abstract,protected,n,t,value,state,t,create,value,state,type,serializer,n,namespace,serializer,value,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1450197468;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1453721631;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1454517847;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1454939779;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1455225217;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1455287708;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1460120330;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1464608559;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1468423895;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable( 			S state, long checkpointID, long timestamp) throws Exception_;1468438360;Writes the given state into the checkpoint, and returns a handle that can retrieve the state back.__@param state The state to be checkpointed._@param checkpointID The ID of the checkpoint._@param timestamp The timestamp of the checkpoint._@param <S> The type of the state.__@return A state handle that can retrieve the checkpoined state.__@throws Exception Exceptions may occur during serialization / storing the state and should be forwarded.;public abstract <S extends Serializable> StateHandle<S> checkpointStateSerializable(_			S state, long checkpointID, long timestamp) throws Exception_;writes,the,given,state,into,the,checkpoint,and,returns,a,handle,that,can,retrieve,the,state,back,param,state,the,state,to,be,checkpointed,param,checkpoint,id,the,id,of,the,checkpoint,param,timestamp,the,timestamp,of,the,checkpoint,param,s,the,type,of,the,state,return,a,state,handle,that,can,retrieve,the,checkpoined,state,throws,exception,exceptions,may,occur,during,serialization,storing,the,state,and,should,be,forwarded;public,abstract,s,extends,serializable,state,handle,s,checkpoint,state,serializable,s,state,long,checkpoint,id,long,timestamp,throws,exception
AbstractStateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1450197468;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
AbstractStateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1453721631;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
AbstractStateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1454517847;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
AbstractStateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1454939779;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
AbstractStateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1455225217;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
AbstractStateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1455287708;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
AbstractStateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1460120330;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
AbstractStateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1464608559;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
AbstractStateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1468423895;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
AbstractStateBackend -> CheckpointStateOutputView -> public StateHandle<DataInputView> closeAndGetHandle() throws IOException;1468438360;Closes the stream and gets a state handle that can create a DataInputView._producing the data written to this stream.__@return A state handle that can create an input stream producing the data written to this stream._@throws IOException Thrown, if the stream cannot be closed.;public StateHandle<DataInputView> closeAndGetHandle() throws IOException {_			return new DataInputViewHandle(out.closeAndGetHandle())__		};closes,the,stream,and,gets,a,state,handle,that,can,create,a,data,input,view,producing,the,data,written,to,this,stream,return,a,state,handle,that,can,create,an,input,stream,producing,the,data,written,to,this,stream,throws,ioexception,thrown,if,the,stream,cannot,be,closed;public,state,handle,data,input,view,close,and,get,handle,throws,ioexception,return,new,data,input,view,handle,out,close,and,get,handle
AbstractStateBackend -> abstract protected <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1453721631;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;abstract protected <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;abstract,protected,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
AbstractStateBackend -> abstract protected <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;1454517847;Creates and returns a new {@link ListState}.__@param namespaceSerializer TypeSerializer for the state namespace._@param stateDesc The {@code StateDescriptor} that contains the name of the state.__@param <N> The type of the namespace._@param <T> The type of the values that the {@code ListState} can store.;abstract protected <N, T> ListState<T> createListState(TypeSerializer<N> namespaceSerializer, ListStateDescriptor<T> stateDesc) throws Exception_;creates,and,returns,a,new,link,list,state,param,namespace,serializer,type,serializer,for,the,state,namespace,param,state,desc,the,code,state,descriptor,that,contains,the,name,of,the,state,param,n,the,type,of,the,namespace,param,t,the,type,of,the,values,that,the,code,list,state,can,store;abstract,protected,n,t,list,state,t,create,list,state,type,serializer,n,namespace,serializer,list,state,descriptor,t,state,desc,throws,exception
