# id;timestamp;commentText;codeText;commentWords;codeWords
SavepointV2 -> @Deprecated 	public SavepointV2(long checkpointId, Collection<TaskState> taskStates);1493403095;@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public SavepointV2(long checkpointId, Collection<TaskState> taskStates) {_		this(_			checkpointId, _			null,_			checkNotNull(taskStates, "taskStates"),_			Collections.<MasterState>emptyList()_		)__	};deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,savepoint,v2,long,checkpoint,id,collection,task,state,task,states,this,checkpoint,id,null,check,not,null,task,states,task,states,collections,master,state,empty,list
SavepointV2 -> @Deprecated 	public SavepointV2(long checkpointId, Collection<TaskState> taskStates);1498220069;@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public SavepointV2(long checkpointId, Collection<TaskState> taskStates) {_		this(_			checkpointId, _			null,_			checkNotNull(taskStates, "taskStates"),_			Collections.<MasterState>emptyList()_		)__	};deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,savepoint,v2,long,checkpoint,id,collection,task,state,task,states,this,checkpoint,id,null,check,not,null,task,states,task,states,collections,master,state,empty,list
SavepointV2 -> @Deprecated 	public SavepointV2(long checkpointId, Collection<TaskState> taskStates);1498220069;@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public SavepointV2(long checkpointId, Collection<TaskState> taskStates) {_		this(_			checkpointId, _			null,_			checkNotNull(taskStates, "taskStates"),_			Collections.<MasterState>emptyList()_		)__	};deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,savepoint,v2,long,checkpoint,id,collection,task,state,task,states,this,checkpoint,id,null,check,not,null,task,states,task,states,collections,master,state,empty,list
SavepointV2 -> @Deprecated 	public SavepointV2(long checkpointId, Collection<TaskState> taskStates);1498896128;@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public SavepointV2(long checkpointId, Collection<TaskState> taskStates) {_		this(_			checkpointId, _			null,_			checkNotNull(taskStates, "taskStates"),_			Collections.<MasterState>emptyList()_		)__	};deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,savepoint,v2,long,checkpoint,id,collection,task,state,task,states,this,checkpoint,id,null,check,not,null,task,states,task,states,collections,master,state,empty,list
SavepointV2 -> @Deprecated 	public SavepointV2(long checkpointId, Collection<TaskState> taskStates);1503598628;@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public SavepointV2(long checkpointId, Collection<TaskState> taskStates) {_		this(_			checkpointId, _			null,_			checkNotNull(taskStates, "taskStates"),_			Collections.<MasterState>emptyList()_		)__	};deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,savepoint,v2,long,checkpoint,id,collection,task,state,task,states,this,checkpoint,id,null,check,not,null,task,states,task,states,collections,master,state,empty,list
SavepointV2 -> @Deprecated 	public SavepointV2(long checkpointId, Collection<TaskState> taskStates);1519568061;@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public SavepointV2(long checkpointId, Collection<TaskState> taskStates) {_		this(_			checkpointId, _			null,_			checkNotNull(taskStates, "taskStates"),_			Collections.<MasterState>emptyList()_		)__	};deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,savepoint,v2,long,checkpoint,id,collection,task,state,task,states,this,checkpoint,id,null,check,not,null,task,states,task,states,collections,master,state,empty,list
SavepointV2 -> @Deprecated 	public SavepointV2(long checkpointId, Collection<TaskState> taskStates);1535623502;@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public SavepointV2(long checkpointId, Collection<TaskState> taskStates) {_		this(_			checkpointId, _			null,_			checkNotNull(taskStates, "taskStates"),_			Collections.<MasterState>emptyList()_		)__	};deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,savepoint,v2,long,checkpoint,id,collection,task,state,task,states,this,checkpoint,id,null,check,not,null,task,states,task,states,collections,master,state,empty,list
SavepointV2 -> @Deprecated 	public static Savepoint convertToOperatorStateSavepointV2( 			Map<JobVertexID, ExecutionJobVertex> tasks, 			Savepoint savepoint);1493403095;Converts the {@link Savepoint} containing {@link TaskState TaskStates} to an equivalent savepoint containing_{@link OperatorState OperatorStates}.__@param savepoint savepoint to convert_@param tasks     map of all vertices and their job vertex ids_@return converted completed checkpoint_@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public static Savepoint convertToOperatorStateSavepointV2(_			Map<JobVertexID, ExecutionJobVertex> tasks,_			Savepoint savepoint) {__		if (savepoint.getOperatorStates() != null) {_			return savepoint__		}__		boolean expandedToLegacyIds = false___		Map<OperatorID, OperatorState> operatorStates = new HashMap<>(savepoint.getTaskStates().size() << 1)___		for (TaskState taskState : savepoint.getTaskStates()) {_			ExecutionJobVertex jobVertex = tasks.get(taskState.getJobVertexID())___			_			_			if (jobVertex == null && !expandedToLegacyIds) {_				tasks = ExecutionJobVertex.includeLegacyJobVertexIDs(tasks)__				jobVertex = tasks.get(taskState.getJobVertexID())__				expandedToLegacyIds = true__			}__			List<OperatorID> operatorIDs = jobVertex.getOperatorIDs()___			for (int subtaskIndex = 0_ subtaskIndex < jobVertex.getParallelism()_ subtaskIndex++) {_				SubtaskState subtaskState = taskState.getState(subtaskIndex)___				if (subtaskState == null) {_					continue__				}__				@SuppressWarnings("deprecation")_				ChainedStateHandle<StreamStateHandle> nonPartitionedState =_					subtaskState.getLegacyOperatorState()__				ChainedStateHandle<OperatorStateHandle> partitioneableState =_					subtaskState.getManagedOperatorState()__				ChainedStateHandle<OperatorStateHandle> rawOperatorState =_					subtaskState.getRawOperatorState()___				for (int chainIndex = 0_ chainIndex < taskState.getChainLength()_ chainIndex++) {__					_					for (int o = 0_ o < operatorIDs.size()_ o++) {_						OperatorID operatorID = operatorIDs.get(o)__						OperatorState operatorState = operatorStates.get(operatorID)___						if (operatorState == null) {_							operatorState = new OperatorState(_								operatorID,_								jobVertex.getParallelism(),_								jobVertex.getMaxParallelism())__							operatorStates.put(operatorID, operatorState)__						}__						KeyedStateHandle managedKeyedState = null__						KeyedStateHandle rawKeyedState = null___						_						if (o == operatorIDs.size() - 1) {_							managedKeyedState = subtaskState.getManagedKeyedState()__							rawKeyedState = subtaskState.getRawKeyedState()__						}__						OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_							nonPartitionedState != null ? nonPartitionedState.get(o) : null,_							partitioneableState != null ? partitioneableState.get(o) : null,_							rawOperatorState != null ? rawOperatorState.get(o) : null,_							managedKeyedState,_							rawKeyedState)___						operatorState.putState(subtaskIndex, operatorSubtaskState)__					}_				}_			}_		}__		return new SavepointV2(_			savepoint.getCheckpointId(),_			operatorStates.values(),_			savepoint.getMasterStates())__	};converts,the,link,savepoint,containing,link,task,state,task,states,to,an,equivalent,savepoint,containing,link,operator,state,operator,states,param,savepoint,savepoint,to,convert,param,tasks,map,of,all,vertices,and,their,job,vertex,ids,return,converted,completed,checkpoint,deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,static,savepoint,convert,to,operator,state,savepoint,v2,map,job,vertex,id,execution,job,vertex,tasks,savepoint,savepoint,if,savepoint,get,operator,states,null,return,savepoint,boolean,expanded,to,legacy,ids,false,map,operator,id,operator,state,operator,states,new,hash,map,savepoint,get,task,states,size,1,for,task,state,task,state,savepoint,get,task,states,execution,job,vertex,job,vertex,tasks,get,task,state,get,job,vertex,id,if,job,vertex,null,expanded,to,legacy,ids,tasks,execution,job,vertex,include,legacy,job,vertex,ids,tasks,job,vertex,tasks,get,task,state,get,job,vertex,id,expanded,to,legacy,ids,true,list,operator,id,operator,ids,job,vertex,get,operator,ids,for,int,subtask,index,0,subtask,index,job,vertex,get,parallelism,subtask,index,subtask,state,subtask,state,task,state,get,state,subtask,index,if,subtask,state,null,continue,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,chained,state,handle,operator,state,handle,raw,operator,state,subtask,state,get,raw,operator,state,for,int,chain,index,0,chain,index,task,state,get,chain,length,chain,index,for,int,o,0,o,operator,ids,size,o,operator,id,operator,id,operator,ids,get,o,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,job,vertex,get,parallelism,job,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,keyed,state,handle,managed,keyed,state,null,keyed,state,handle,raw,keyed,state,null,if,o,operator,ids,size,1,managed,keyed,state,subtask,state,get,managed,keyed,state,raw,keyed,state,subtask,state,get,raw,keyed,state,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,non,partitioned,state,null,non,partitioned,state,get,o,null,partitioneable,state,null,partitioneable,state,get,o,null,raw,operator,state,null,raw,operator,state,get,o,null,managed,keyed,state,raw,keyed,state,operator,state,put,state,subtask,index,operator,subtask,state,return,new,savepoint,v2,savepoint,get,checkpoint,id,operator,states,values,savepoint,get,master,states
SavepointV2 -> @Deprecated 	public static Savepoint convertToOperatorStateSavepointV2( 			Map<JobVertexID, ExecutionJobVertex> tasks, 			Savepoint savepoint);1498220069;Converts the {@link Savepoint} containing {@link TaskState TaskStates} to an equivalent savepoint containing_{@link OperatorState OperatorStates}.__@param savepoint savepoint to convert_@param tasks     map of all vertices and their job vertex ids_@return converted completed checkpoint_@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public static Savepoint convertToOperatorStateSavepointV2(_			Map<JobVertexID, ExecutionJobVertex> tasks,_			Savepoint savepoint) {__		if (savepoint.getOperatorStates() != null) {_			return savepoint__		}__		boolean expandedToLegacyIds = false___		Map<OperatorID, OperatorState> operatorStates = new HashMap<>(savepoint.getTaskStates().size() << 1)___		for (TaskState taskState : savepoint.getTaskStates()) {_			ExecutionJobVertex jobVertex = tasks.get(taskState.getJobVertexID())___			_			_			if (jobVertex == null && !expandedToLegacyIds) {_				tasks = ExecutionJobVertex.includeLegacyJobVertexIDs(tasks)__				jobVertex = tasks.get(taskState.getJobVertexID())__				expandedToLegacyIds = true__			}__			List<OperatorID> operatorIDs = jobVertex.getOperatorIDs()___			for (int subtaskIndex = 0_ subtaskIndex < jobVertex.getParallelism()_ subtaskIndex++) {_				SubtaskState subtaskState = taskState.getState(subtaskIndex)___				if (subtaskState == null) {_					continue__				}__				@SuppressWarnings("deprecation")_				ChainedStateHandle<StreamStateHandle> nonPartitionedState =_					subtaskState.getLegacyOperatorState()__				ChainedStateHandle<OperatorStateHandle> partitioneableState =_					subtaskState.getManagedOperatorState()__				ChainedStateHandle<OperatorStateHandle> rawOperatorState =_					subtaskState.getRawOperatorState()___				for (int chainIndex = 0_ chainIndex < taskState.getChainLength()_ chainIndex++) {__					_					for (int operatorIndex = 0_ operatorIndex < operatorIDs.size()_ operatorIndex++) {_						OperatorID operatorID = operatorIDs.get(operatorIndex)__						OperatorState operatorState = operatorStates.get(operatorID)___						if (operatorState == null) {_							operatorState = new OperatorState(_								operatorID,_								jobVertex.getParallelism(),_								jobVertex.getMaxParallelism())__							operatorStates.put(operatorID, operatorState)__						}__						KeyedStateHandle managedKeyedState = null__						KeyedStateHandle rawKeyedState = null___						_						if (operatorIndex == operatorIDs.size() - 1) {_							managedKeyedState = subtaskState.getManagedKeyedState()__							rawKeyedState = subtaskState.getRawKeyedState()__						}__						OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_							nonPartitionedState != null ? nonPartitionedState.get(operatorIndex) : null,_							partitioneableState != null ? partitioneableState.get(operatorIndex) : null,_							rawOperatorState != null ? rawOperatorState.get(operatorIndex) : null,_							managedKeyedState,_							rawKeyedState)___						operatorState.putState(subtaskIndex, operatorSubtaskState)__					}_				}_			}_		}__		return new SavepointV2(_			savepoint.getCheckpointId(),_			operatorStates.values(),_			savepoint.getMasterStates())__	};converts,the,link,savepoint,containing,link,task,state,task,states,to,an,equivalent,savepoint,containing,link,operator,state,operator,states,param,savepoint,savepoint,to,convert,param,tasks,map,of,all,vertices,and,their,job,vertex,ids,return,converted,completed,checkpoint,deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,static,savepoint,convert,to,operator,state,savepoint,v2,map,job,vertex,id,execution,job,vertex,tasks,savepoint,savepoint,if,savepoint,get,operator,states,null,return,savepoint,boolean,expanded,to,legacy,ids,false,map,operator,id,operator,state,operator,states,new,hash,map,savepoint,get,task,states,size,1,for,task,state,task,state,savepoint,get,task,states,execution,job,vertex,job,vertex,tasks,get,task,state,get,job,vertex,id,if,job,vertex,null,expanded,to,legacy,ids,tasks,execution,job,vertex,include,legacy,job,vertex,ids,tasks,job,vertex,tasks,get,task,state,get,job,vertex,id,expanded,to,legacy,ids,true,list,operator,id,operator,ids,job,vertex,get,operator,ids,for,int,subtask,index,0,subtask,index,job,vertex,get,parallelism,subtask,index,subtask,state,subtask,state,task,state,get,state,subtask,index,if,subtask,state,null,continue,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,chained,state,handle,operator,state,handle,raw,operator,state,subtask,state,get,raw,operator,state,for,int,chain,index,0,chain,index,task,state,get,chain,length,chain,index,for,int,operator,index,0,operator,index,operator,ids,size,operator,index,operator,id,operator,id,operator,ids,get,operator,index,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,job,vertex,get,parallelism,job,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,keyed,state,handle,managed,keyed,state,null,keyed,state,handle,raw,keyed,state,null,if,operator,index,operator,ids,size,1,managed,keyed,state,subtask,state,get,managed,keyed,state,raw,keyed,state,subtask,state,get,raw,keyed,state,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,non,partitioned,state,null,non,partitioned,state,get,operator,index,null,partitioneable,state,null,partitioneable,state,get,operator,index,null,raw,operator,state,null,raw,operator,state,get,operator,index,null,managed,keyed,state,raw,keyed,state,operator,state,put,state,subtask,index,operator,subtask,state,return,new,savepoint,v2,savepoint,get,checkpoint,id,operator,states,values,savepoint,get,master,states
SavepointV2 -> @Deprecated 	public static Savepoint convertToOperatorStateSavepointV2( 			Map<JobVertexID, ExecutionJobVertex> tasks, 			Savepoint savepoint);1498220069;Converts the {@link Savepoint} containing {@link TaskState TaskStates} to an equivalent savepoint containing_{@link OperatorState OperatorStates}.__@param savepoint savepoint to convert_@param tasks     map of all vertices and their job vertex ids_@return converted completed checkpoint_@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public static Savepoint convertToOperatorStateSavepointV2(_			Map<JobVertexID, ExecutionJobVertex> tasks,_			Savepoint savepoint) {__		if (savepoint.getOperatorStates() != null) {_			return savepoint__		}__		boolean expandedToLegacyIds = false___		Map<OperatorID, OperatorState> operatorStates = new HashMap<>(savepoint.getTaskStates().size() << 1)___		for (TaskState taskState : savepoint.getTaskStates()) {_			ExecutionJobVertex jobVertex = tasks.get(taskState.getJobVertexID())___			_			_			if (jobVertex == null && !expandedToLegacyIds) {_				tasks = ExecutionJobVertex.includeLegacyJobVertexIDs(tasks)__				jobVertex = tasks.get(taskState.getJobVertexID())__				expandedToLegacyIds = true__			}__			if (jobVertex == null) {_				throw new IllegalStateException(_					"Could not find task for state with ID " + taskState.getJobVertexID() + ". " +_					"When migrating a savepoint from a version < 1.3 please make sure that the topology was not " +_					"changed through removal of a stateful operator or modification of a chain containing a stateful " +_					"operator.")__			}__			List<OperatorID> operatorIDs = jobVertex.getOperatorIDs()___			for (int subtaskIndex = 0_ subtaskIndex < jobVertex.getParallelism()_ subtaskIndex++) {_				SubtaskState subtaskState__				try {_					subtaskState = taskState.getState(subtaskIndex)__				} catch (Exception e) {_					throw new IllegalStateException(_						"Could not find subtask with index " + subtaskIndex + " for task " + jobVertex.getJobVertexId() + ". " +_						"When migrating a savepoint from a version < 1.3 please make sure that no changes were made " +_						"to the parallelism of stateful operators.",_						e)__				}__				if (subtaskState == null) {_					continue__				}__				@SuppressWarnings("deprecation")_				ChainedStateHandle<StreamStateHandle> nonPartitionedState =_					subtaskState.getLegacyOperatorState()__				ChainedStateHandle<OperatorStateHandle> partitioneableState =_					subtaskState.getManagedOperatorState()__				ChainedStateHandle<OperatorStateHandle> rawOperatorState =_					subtaskState.getRawOperatorState()___				for (int chainIndex = 0_ chainIndex < taskState.getChainLength()_ chainIndex++) {__					_					for (int operatorIndex = 0_ operatorIndex < operatorIDs.size()_ operatorIndex++) {_						OperatorID operatorID = operatorIDs.get(operatorIndex)__						OperatorState operatorState = operatorStates.get(operatorID)___						if (operatorState == null) {_							operatorState = new OperatorState(_								operatorID,_								jobVertex.getParallelism(),_								jobVertex.getMaxParallelism())__							operatorStates.put(operatorID, operatorState)__						}__						KeyedStateHandle managedKeyedState = null__						KeyedStateHandle rawKeyedState = null___						_						if (operatorIndex == operatorIDs.size() - 1) {_							managedKeyedState = subtaskState.getManagedKeyedState()__							rawKeyedState = subtaskState.getRawKeyedState()__						}__						OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_							nonPartitionedState != null ? nonPartitionedState.get(operatorIndex) : null,_							partitioneableState != null ? partitioneableState.get(operatorIndex) : null,_							rawOperatorState != null ? rawOperatorState.get(operatorIndex) : null,_							managedKeyedState,_							rawKeyedState)___						operatorState.putState(subtaskIndex, operatorSubtaskState)__					}_				}_			}_		}__		return new SavepointV2(_			savepoint.getCheckpointId(),_			operatorStates.values(),_			savepoint.getMasterStates())__	};converts,the,link,savepoint,containing,link,task,state,task,states,to,an,equivalent,savepoint,containing,link,operator,state,operator,states,param,savepoint,savepoint,to,convert,param,tasks,map,of,all,vertices,and,their,job,vertex,ids,return,converted,completed,checkpoint,deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,static,savepoint,convert,to,operator,state,savepoint,v2,map,job,vertex,id,execution,job,vertex,tasks,savepoint,savepoint,if,savepoint,get,operator,states,null,return,savepoint,boolean,expanded,to,legacy,ids,false,map,operator,id,operator,state,operator,states,new,hash,map,savepoint,get,task,states,size,1,for,task,state,task,state,savepoint,get,task,states,execution,job,vertex,job,vertex,tasks,get,task,state,get,job,vertex,id,if,job,vertex,null,expanded,to,legacy,ids,tasks,execution,job,vertex,include,legacy,job,vertex,ids,tasks,job,vertex,tasks,get,task,state,get,job,vertex,id,expanded,to,legacy,ids,true,if,job,vertex,null,throw,new,illegal,state,exception,could,not,find,task,for,state,with,id,task,state,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,the,topology,was,not,changed,through,removal,of,a,stateful,operator,or,modification,of,a,chain,containing,a,stateful,operator,list,operator,id,operator,ids,job,vertex,get,operator,ids,for,int,subtask,index,0,subtask,index,job,vertex,get,parallelism,subtask,index,subtask,state,subtask,state,try,subtask,state,task,state,get,state,subtask,index,catch,exception,e,throw,new,illegal,state,exception,could,not,find,subtask,with,index,subtask,index,for,task,job,vertex,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,no,changes,were,made,to,the,parallelism,of,stateful,operators,e,if,subtask,state,null,continue,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,chained,state,handle,operator,state,handle,raw,operator,state,subtask,state,get,raw,operator,state,for,int,chain,index,0,chain,index,task,state,get,chain,length,chain,index,for,int,operator,index,0,operator,index,operator,ids,size,operator,index,operator,id,operator,id,operator,ids,get,operator,index,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,job,vertex,get,parallelism,job,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,keyed,state,handle,managed,keyed,state,null,keyed,state,handle,raw,keyed,state,null,if,operator,index,operator,ids,size,1,managed,keyed,state,subtask,state,get,managed,keyed,state,raw,keyed,state,subtask,state,get,raw,keyed,state,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,non,partitioned,state,null,non,partitioned,state,get,operator,index,null,partitioneable,state,null,partitioneable,state,get,operator,index,null,raw,operator,state,null,raw,operator,state,get,operator,index,null,managed,keyed,state,raw,keyed,state,operator,state,put,state,subtask,index,operator,subtask,state,return,new,savepoint,v2,savepoint,get,checkpoint,id,operator,states,values,savepoint,get,master,states
SavepointV2 -> @Deprecated 	public static Savepoint convertToOperatorStateSavepointV2( 			Map<JobVertexID, ExecutionJobVertex> tasks, 			Savepoint savepoint);1498896128;Converts the {@link Savepoint} containing {@link TaskState TaskStates} to an equivalent savepoint containing_{@link OperatorState OperatorStates}.__@param savepoint savepoint to convert_@param tasks     map of all vertices and their job vertex ids_@return converted completed checkpoint_@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public static Savepoint convertToOperatorStateSavepointV2(_			Map<JobVertexID, ExecutionJobVertex> tasks,_			Savepoint savepoint) {__		if (savepoint.getOperatorStates() != null) {_			return savepoint__		}__		boolean expandedToLegacyIds = false___		Map<OperatorID, OperatorState> operatorStates = new HashMap<>(savepoint.getTaskStates().size() << 1)___		for (TaskState taskState : savepoint.getTaskStates()) {_			ExecutionJobVertex jobVertex = tasks.get(taskState.getJobVertexID())___			_			_			if (jobVertex == null && !expandedToLegacyIds) {_				tasks = ExecutionJobVertex.includeLegacyJobVertexIDs(tasks)__				jobVertex = tasks.get(taskState.getJobVertexID())__				expandedToLegacyIds = true__			}__			if (jobVertex == null) {_				throw new IllegalStateException(_					"Could not find task for state with ID " + taskState.getJobVertexID() + ". " +_					"When migrating a savepoint from a version < 1.3 please make sure that the topology was not " +_					"changed through removal of a stateful operator or modification of a chain containing a stateful " +_					"operator.")__			}__			List<OperatorID> operatorIDs = jobVertex.getOperatorIDs()___			Preconditions.checkArgument(_				jobVertex.getParallelism() == taskState.getParallelism(),_				"Detected change in parallelism during migration for task " + jobVertex.getJobVertexId() +"." +_					"When migrating a savepoint from a version < 1.3 please make sure that no changes were made " +_					"to the parallelism of stateful operators.")___			Preconditions.checkArgument(_				operatorIDs.size() == taskState.getChainLength(),_				"Detected change in chain length during migration for task " + jobVertex.getJobVertexId() +". " +_					"When migrating a savepoint from a version < 1.3 please make sure that the topology was not " +_					"changed by modification of a chain containing a stateful operator.")___			for (int subtaskIndex = 0_ subtaskIndex < jobVertex.getParallelism()_ subtaskIndex++) {_				SubtaskState subtaskState__				try {_					subtaskState = taskState.getState(subtaskIndex)__				} catch (Exception e) {_					throw new IllegalStateException(_						"Could not find subtask with index " + subtaskIndex + " for task " + jobVertex.getJobVertexId() + ". " +_						"When migrating a savepoint from a version < 1.3 please make sure that no changes were made " +_						"to the parallelism of stateful operators.",_						e)__				}__				if (subtaskState == null) {_					continue__				}__				@SuppressWarnings("deprecation")_				ChainedStateHandle<StreamStateHandle> nonPartitionedState =_					subtaskState.getLegacyOperatorState()__				ChainedStateHandle<OperatorStateHandle> partitioneableState =_					subtaskState.getManagedOperatorState()__				ChainedStateHandle<OperatorStateHandle> rawOperatorState =_					subtaskState.getRawOperatorState()___				for (int chainIndex = 0_ chainIndex < taskState.getChainLength()_ chainIndex++) {__					_					for (int operatorIndex = 0_ operatorIndex < operatorIDs.size()_ operatorIndex++) {_						OperatorID operatorID = operatorIDs.get(operatorIndex)__						OperatorState operatorState = operatorStates.get(operatorID)___						if (operatorState == null) {_							operatorState = new OperatorState(_								operatorID,_								jobVertex.getParallelism(),_								jobVertex.getMaxParallelism())__							operatorStates.put(operatorID, operatorState)__						}__						KeyedStateHandle managedKeyedState = null__						KeyedStateHandle rawKeyedState = null___						_						if (operatorIndex == operatorIDs.size() - 1) {_							managedKeyedState = subtaskState.getManagedKeyedState()__							rawKeyedState = subtaskState.getRawKeyedState()__						}__						OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_							nonPartitionedState != null ? nonPartitionedState.get(operatorIndex) : null,_							partitioneableState != null ? partitioneableState.get(operatorIndex) : null,_							rawOperatorState != null ? rawOperatorState.get(operatorIndex) : null,_							managedKeyedState,_							rawKeyedState)___						operatorState.putState(subtaskIndex, operatorSubtaskState)__					}_				}_			}_		}__		return new SavepointV2(_			savepoint.getCheckpointId(),_			operatorStates.values(),_			savepoint.getMasterStates())__	};converts,the,link,savepoint,containing,link,task,state,task,states,to,an,equivalent,savepoint,containing,link,operator,state,operator,states,param,savepoint,savepoint,to,convert,param,tasks,map,of,all,vertices,and,their,job,vertex,ids,return,converted,completed,checkpoint,deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,static,savepoint,convert,to,operator,state,savepoint,v2,map,job,vertex,id,execution,job,vertex,tasks,savepoint,savepoint,if,savepoint,get,operator,states,null,return,savepoint,boolean,expanded,to,legacy,ids,false,map,operator,id,operator,state,operator,states,new,hash,map,savepoint,get,task,states,size,1,for,task,state,task,state,savepoint,get,task,states,execution,job,vertex,job,vertex,tasks,get,task,state,get,job,vertex,id,if,job,vertex,null,expanded,to,legacy,ids,tasks,execution,job,vertex,include,legacy,job,vertex,ids,tasks,job,vertex,tasks,get,task,state,get,job,vertex,id,expanded,to,legacy,ids,true,if,job,vertex,null,throw,new,illegal,state,exception,could,not,find,task,for,state,with,id,task,state,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,the,topology,was,not,changed,through,removal,of,a,stateful,operator,or,modification,of,a,chain,containing,a,stateful,operator,list,operator,id,operator,ids,job,vertex,get,operator,ids,preconditions,check,argument,job,vertex,get,parallelism,task,state,get,parallelism,detected,change,in,parallelism,during,migration,for,task,job,vertex,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,no,changes,were,made,to,the,parallelism,of,stateful,operators,preconditions,check,argument,operator,ids,size,task,state,get,chain,length,detected,change,in,chain,length,during,migration,for,task,job,vertex,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,the,topology,was,not,changed,by,modification,of,a,chain,containing,a,stateful,operator,for,int,subtask,index,0,subtask,index,job,vertex,get,parallelism,subtask,index,subtask,state,subtask,state,try,subtask,state,task,state,get,state,subtask,index,catch,exception,e,throw,new,illegal,state,exception,could,not,find,subtask,with,index,subtask,index,for,task,job,vertex,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,no,changes,were,made,to,the,parallelism,of,stateful,operators,e,if,subtask,state,null,continue,suppress,warnings,deprecation,chained,state,handle,stream,state,handle,non,partitioned,state,subtask,state,get,legacy,operator,state,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,chained,state,handle,operator,state,handle,raw,operator,state,subtask,state,get,raw,operator,state,for,int,chain,index,0,chain,index,task,state,get,chain,length,chain,index,for,int,operator,index,0,operator,index,operator,ids,size,operator,index,operator,id,operator,id,operator,ids,get,operator,index,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,job,vertex,get,parallelism,job,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,keyed,state,handle,managed,keyed,state,null,keyed,state,handle,raw,keyed,state,null,if,operator,index,operator,ids,size,1,managed,keyed,state,subtask,state,get,managed,keyed,state,raw,keyed,state,subtask,state,get,raw,keyed,state,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,non,partitioned,state,null,non,partitioned,state,get,operator,index,null,partitioneable,state,null,partitioneable,state,get,operator,index,null,raw,operator,state,null,raw,operator,state,get,operator,index,null,managed,keyed,state,raw,keyed,state,operator,state,put,state,subtask,index,operator,subtask,state,return,new,savepoint,v2,savepoint,get,checkpoint,id,operator,states,values,savepoint,get,master,states
SavepointV2 -> @Deprecated 	public static Savepoint convertToOperatorStateSavepointV2( 			Map<JobVertexID, ExecutionJobVertex> tasks, 			Savepoint savepoint);1503598628;Converts the {@link Savepoint} containing {@link TaskState TaskStates} to an equivalent savepoint containing_{@link OperatorState OperatorStates}.__@param savepoint savepoint to convert_@param tasks     map of all vertices and their job vertex ids_@return converted completed checkpoint_@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public static Savepoint convertToOperatorStateSavepointV2(_			Map<JobVertexID, ExecutionJobVertex> tasks,_			Savepoint savepoint) {__		if (savepoint.getOperatorStates() != null) {_			return savepoint__		}__		boolean expandedToLegacyIds = false___		Map<OperatorID, OperatorState> operatorStates = new HashMap<>(savepoint.getTaskStates().size() << 1)___		for (TaskState taskState : savepoint.getTaskStates()) {_			ExecutionJobVertex jobVertex = tasks.get(taskState.getJobVertexID())___			_			_			if (jobVertex == null && !expandedToLegacyIds) {_				tasks = ExecutionJobVertex.includeLegacyJobVertexIDs(tasks)__				jobVertex = tasks.get(taskState.getJobVertexID())__				expandedToLegacyIds = true__			}__			if (jobVertex == null) {_				throw new IllegalStateException(_					"Could not find task for state with ID " + taskState.getJobVertexID() + ". " +_					"When migrating a savepoint from a version < 1.3 please make sure that the topology was not " +_					"changed through removal of a stateful operator or modification of a chain containing a stateful " +_					"operator.")__			}__			List<OperatorID> operatorIDs = jobVertex.getOperatorIDs()___			Preconditions.checkArgument(_				jobVertex.getParallelism() == taskState.getParallelism(),_				"Detected change in parallelism during migration for task " + jobVertex.getJobVertexId() +"." +_					"When migrating a savepoint from a version < 1.3 please make sure that no changes were made " +_					"to the parallelism of stateful operators.")___			Preconditions.checkArgument(_				operatorIDs.size() == taskState.getChainLength(),_				"Detected change in chain length during migration for task " + jobVertex.getJobVertexId() +". " +_					"When migrating a savepoint from a version < 1.3 please make sure that the topology was not " +_					"changed by modification of a chain containing a stateful operator.")___			for (int subtaskIndex = 0_ subtaskIndex < jobVertex.getParallelism()_ subtaskIndex++) {_				SubtaskState subtaskState__				try {_					subtaskState = taskState.getState(subtaskIndex)__				} catch (Exception e) {_					throw new IllegalStateException(_						"Could not find subtask with index " + subtaskIndex + " for task " + jobVertex.getJobVertexId() + ". " +_						"When migrating a savepoint from a version < 1.3 please make sure that no changes were made " +_						"to the parallelism of stateful operators.",_						e)__				}__				if (subtaskState == null) {_					continue__				}__				ChainedStateHandle<OperatorStateHandle> partitioneableState =_					subtaskState.getManagedOperatorState()__				ChainedStateHandle<OperatorStateHandle> rawOperatorState =_					subtaskState.getRawOperatorState()___				for (int chainIndex = 0_ chainIndex < taskState.getChainLength()_ chainIndex++) {__					_					for (int operatorIndex = 0_ operatorIndex < operatorIDs.size()_ operatorIndex++) {_						OperatorID operatorID = operatorIDs.get(operatorIndex)__						OperatorState operatorState = operatorStates.get(operatorID)___						if (operatorState == null) {_							operatorState = new OperatorState(_								operatorID,_								jobVertex.getParallelism(),_								jobVertex.getMaxParallelism())__							operatorStates.put(operatorID, operatorState)__						}__						KeyedStateHandle managedKeyedState = null__						KeyedStateHandle rawKeyedState = null___						_						if (operatorIndex == operatorIDs.size() - 1) {_							managedKeyedState = subtaskState.getManagedKeyedState()__							rawKeyedState = subtaskState.getRawKeyedState()__						}__						OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_							partitioneableState != null ? partitioneableState.get(operatorIndex) : null,_							rawOperatorState != null ? rawOperatorState.get(operatorIndex) : null,_							managedKeyedState,_							rawKeyedState)___						operatorState.putState(subtaskIndex, operatorSubtaskState)__					}_				}_			}_		}__		return new SavepointV2(_			savepoint.getCheckpointId(),_			operatorStates.values(),_			savepoint.getMasterStates())__	};converts,the,link,savepoint,containing,link,task,state,task,states,to,an,equivalent,savepoint,containing,link,operator,state,operator,states,param,savepoint,savepoint,to,convert,param,tasks,map,of,all,vertices,and,their,job,vertex,ids,return,converted,completed,checkpoint,deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,static,savepoint,convert,to,operator,state,savepoint,v2,map,job,vertex,id,execution,job,vertex,tasks,savepoint,savepoint,if,savepoint,get,operator,states,null,return,savepoint,boolean,expanded,to,legacy,ids,false,map,operator,id,operator,state,operator,states,new,hash,map,savepoint,get,task,states,size,1,for,task,state,task,state,savepoint,get,task,states,execution,job,vertex,job,vertex,tasks,get,task,state,get,job,vertex,id,if,job,vertex,null,expanded,to,legacy,ids,tasks,execution,job,vertex,include,legacy,job,vertex,ids,tasks,job,vertex,tasks,get,task,state,get,job,vertex,id,expanded,to,legacy,ids,true,if,job,vertex,null,throw,new,illegal,state,exception,could,not,find,task,for,state,with,id,task,state,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,the,topology,was,not,changed,through,removal,of,a,stateful,operator,or,modification,of,a,chain,containing,a,stateful,operator,list,operator,id,operator,ids,job,vertex,get,operator,ids,preconditions,check,argument,job,vertex,get,parallelism,task,state,get,parallelism,detected,change,in,parallelism,during,migration,for,task,job,vertex,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,no,changes,were,made,to,the,parallelism,of,stateful,operators,preconditions,check,argument,operator,ids,size,task,state,get,chain,length,detected,change,in,chain,length,during,migration,for,task,job,vertex,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,the,topology,was,not,changed,by,modification,of,a,chain,containing,a,stateful,operator,for,int,subtask,index,0,subtask,index,job,vertex,get,parallelism,subtask,index,subtask,state,subtask,state,try,subtask,state,task,state,get,state,subtask,index,catch,exception,e,throw,new,illegal,state,exception,could,not,find,subtask,with,index,subtask,index,for,task,job,vertex,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,no,changes,were,made,to,the,parallelism,of,stateful,operators,e,if,subtask,state,null,continue,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,chained,state,handle,operator,state,handle,raw,operator,state,subtask,state,get,raw,operator,state,for,int,chain,index,0,chain,index,task,state,get,chain,length,chain,index,for,int,operator,index,0,operator,index,operator,ids,size,operator,index,operator,id,operator,id,operator,ids,get,operator,index,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,job,vertex,get,parallelism,job,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,keyed,state,handle,managed,keyed,state,null,keyed,state,handle,raw,keyed,state,null,if,operator,index,operator,ids,size,1,managed,keyed,state,subtask,state,get,managed,keyed,state,raw,keyed,state,subtask,state,get,raw,keyed,state,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,partitioneable,state,null,partitioneable,state,get,operator,index,null,raw,operator,state,null,raw,operator,state,get,operator,index,null,managed,keyed,state,raw,keyed,state,operator,state,put,state,subtask,index,operator,subtask,state,return,new,savepoint,v2,savepoint,get,checkpoint,id,operator,states,values,savepoint,get,master,states
SavepointV2 -> @Deprecated 	public static Savepoint convertToOperatorStateSavepointV2( 			Map<JobVertexID, ExecutionJobVertex> tasks, 			Savepoint savepoint);1519568061;Converts the {@link Savepoint} containing {@link TaskState TaskStates} to an equivalent savepoint containing_{@link OperatorState OperatorStates}.__@param savepoint savepoint to convert_@param tasks     map of all vertices and their job vertex ids_@return converted completed checkpoint_@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public static Savepoint convertToOperatorStateSavepointV2(_			Map<JobVertexID, ExecutionJobVertex> tasks,_			Savepoint savepoint) {__		if (savepoint.getOperatorStates() != null) {_			return savepoint__		}__		boolean expandedToLegacyIds = false___		Map<OperatorID, OperatorState> operatorStates = new HashMap<>(savepoint.getTaskStates().size() << 1)___		for (TaskState taskState : savepoint.getTaskStates()) {_			ExecutionJobVertex jobVertex = tasks.get(taskState.getJobVertexID())___			_			_			if (jobVertex == null && !expandedToLegacyIds) {_				tasks = ExecutionJobVertex.includeLegacyJobVertexIDs(tasks)__				jobVertex = tasks.get(taskState.getJobVertexID())__				expandedToLegacyIds = true__			}__			if (jobVertex == null) {_				throw new IllegalStateException(_					"Could not find task for state with ID " + taskState.getJobVertexID() + ". " +_					"When migrating a savepoint from a version < 1.3 please make sure that the topology was not " +_					"changed through removal of a stateful operator or modification of a chain containing a stateful " +_					"operator.")__			}__			List<OperatorID> operatorIDs = jobVertex.getOperatorIDs()___			Preconditions.checkArgument(_				jobVertex.getParallelism() == taskState.getParallelism(),_				"Detected change in parallelism during migration for task " + jobVertex.getJobVertexId() +"." +_					"When migrating a savepoint from a version < 1.3 please make sure that no changes were made " +_					"to the parallelism of stateful operators.")___			Preconditions.checkArgument(_				operatorIDs.size() == taskState.getChainLength(),_				"Detected change in chain length during migration for task " + jobVertex.getJobVertexId() +". " +_					"When migrating a savepoint from a version < 1.3 please make sure that the topology was not " +_					"changed by modification of a chain containing a stateful operator.")___			for (int subtaskIndex = 0_ subtaskIndex < jobVertex.getParallelism()_ subtaskIndex++) {_				SubtaskState subtaskState__				try {_					subtaskState = taskState.getState(subtaskIndex)__				} catch (Exception e) {_					throw new IllegalStateException(_						"Could not find subtask with index " + subtaskIndex + " for task " + jobVertex.getJobVertexId() + ". " +_						"When migrating a savepoint from a version < 1.3 please make sure that no changes were made " +_						"to the parallelism of stateful operators.",_						e)__				}__				if (subtaskState == null) {_					continue__				}__				ChainedStateHandle<OperatorStateHandle> partitioneableState =_					subtaskState.getManagedOperatorState()__				ChainedStateHandle<OperatorStateHandle> rawOperatorState =_					subtaskState.getRawOperatorState()___				for (int chainIndex = 0_ chainIndex < taskState.getChainLength()_ chainIndex++) {__					_					for (int operatorIndex = 0_ operatorIndex < operatorIDs.size()_ operatorIndex++) {_						OperatorID operatorID = operatorIDs.get(operatorIndex)__						OperatorState operatorState = operatorStates.get(operatorID)___						if (operatorState == null) {_							operatorState = new OperatorState(_								operatorID,_								jobVertex.getParallelism(),_								jobVertex.getMaxParallelism())__							operatorStates.put(operatorID, operatorState)__						}__						KeyedStateHandle managedKeyedState = null__						KeyedStateHandle rawKeyedState = null___						_						if (operatorIndex == operatorIDs.size() - 1) {_							managedKeyedState = subtaskState.getManagedKeyedState()__							rawKeyedState = subtaskState.getRawKeyedState()__						}__						OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_							partitioneableState != null ? partitioneableState.get(operatorIndex) : null,_							rawOperatorState != null ? rawOperatorState.get(operatorIndex) : null,_							managedKeyedState,_							rawKeyedState)___						operatorState.putState(subtaskIndex, operatorSubtaskState)__					}_				}_			}_		}__		return new SavepointV2(_			savepoint.getCheckpointId(),_			operatorStates.values(),_			savepoint.getMasterStates())__	};converts,the,link,savepoint,containing,link,task,state,task,states,to,an,equivalent,savepoint,containing,link,operator,state,operator,states,param,savepoint,savepoint,to,convert,param,tasks,map,of,all,vertices,and,their,job,vertex,ids,return,converted,completed,checkpoint,deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,static,savepoint,convert,to,operator,state,savepoint,v2,map,job,vertex,id,execution,job,vertex,tasks,savepoint,savepoint,if,savepoint,get,operator,states,null,return,savepoint,boolean,expanded,to,legacy,ids,false,map,operator,id,operator,state,operator,states,new,hash,map,savepoint,get,task,states,size,1,for,task,state,task,state,savepoint,get,task,states,execution,job,vertex,job,vertex,tasks,get,task,state,get,job,vertex,id,if,job,vertex,null,expanded,to,legacy,ids,tasks,execution,job,vertex,include,legacy,job,vertex,ids,tasks,job,vertex,tasks,get,task,state,get,job,vertex,id,expanded,to,legacy,ids,true,if,job,vertex,null,throw,new,illegal,state,exception,could,not,find,task,for,state,with,id,task,state,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,the,topology,was,not,changed,through,removal,of,a,stateful,operator,or,modification,of,a,chain,containing,a,stateful,operator,list,operator,id,operator,ids,job,vertex,get,operator,ids,preconditions,check,argument,job,vertex,get,parallelism,task,state,get,parallelism,detected,change,in,parallelism,during,migration,for,task,job,vertex,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,no,changes,were,made,to,the,parallelism,of,stateful,operators,preconditions,check,argument,operator,ids,size,task,state,get,chain,length,detected,change,in,chain,length,during,migration,for,task,job,vertex,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,the,topology,was,not,changed,by,modification,of,a,chain,containing,a,stateful,operator,for,int,subtask,index,0,subtask,index,job,vertex,get,parallelism,subtask,index,subtask,state,subtask,state,try,subtask,state,task,state,get,state,subtask,index,catch,exception,e,throw,new,illegal,state,exception,could,not,find,subtask,with,index,subtask,index,for,task,job,vertex,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,no,changes,were,made,to,the,parallelism,of,stateful,operators,e,if,subtask,state,null,continue,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,chained,state,handle,operator,state,handle,raw,operator,state,subtask,state,get,raw,operator,state,for,int,chain,index,0,chain,index,task,state,get,chain,length,chain,index,for,int,operator,index,0,operator,index,operator,ids,size,operator,index,operator,id,operator,id,operator,ids,get,operator,index,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,job,vertex,get,parallelism,job,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,keyed,state,handle,managed,keyed,state,null,keyed,state,handle,raw,keyed,state,null,if,operator,index,operator,ids,size,1,managed,keyed,state,subtask,state,get,managed,keyed,state,raw,keyed,state,subtask,state,get,raw,keyed,state,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,partitioneable,state,null,partitioneable,state,get,operator,index,null,raw,operator,state,null,raw,operator,state,get,operator,index,null,managed,keyed,state,raw,keyed,state,operator,state,put,state,subtask,index,operator,subtask,state,return,new,savepoint,v2,savepoint,get,checkpoint,id,operator,states,values,savepoint,get,master,states
SavepointV2 -> @Deprecated 	public static Savepoint convertToOperatorStateSavepointV2( 			Map<JobVertexID, ExecutionJobVertex> tasks, 			Savepoint savepoint);1535623502;Converts the {@link Savepoint} containing {@link TaskState TaskStates} to an equivalent savepoint containing_{@link OperatorState OperatorStates}.__@param savepoint savepoint to convert_@param tasks     map of all vertices and their job vertex ids_@return converted completed checkpoint_@deprecated Only kept for backwards-compatibility with versions < 1.3. Will be removed in the future.;@Deprecated_	public static Savepoint convertToOperatorStateSavepointV2(_			Map<JobVertexID, ExecutionJobVertex> tasks,_			Savepoint savepoint) {__		if (savepoint.getOperatorStates() != null) {_			return savepoint__		}__		boolean expandedToLegacyIds = false___		Map<OperatorID, OperatorState> operatorStates = new HashMap<>(savepoint.getTaskStates().size() << 1)___		for (TaskState taskState : savepoint.getTaskStates()) {_			ExecutionJobVertex jobVertex = tasks.get(taskState.getJobVertexID())___			_			_			if (jobVertex == null && !expandedToLegacyIds) {_				tasks = ExecutionJobVertex.includeLegacyJobVertexIDs(tasks)__				jobVertex = tasks.get(taskState.getJobVertexID())__				expandedToLegacyIds = true__			}__			if (jobVertex == null) {_				throw new IllegalStateException(_					"Could not find task for state with ID " + taskState.getJobVertexID() + ". " +_					"When migrating a savepoint from a version < 1.3 please make sure that the topology was not " +_					"changed through removal of a stateful operator or modification of a chain containing a stateful " +_					"operator.")__			}__			List<OperatorID> operatorIDs = jobVertex.getOperatorIDs()___			Preconditions.checkArgument(_				jobVertex.getParallelism() == taskState.getParallelism(),_				"Detected change in parallelism during migration for task " + jobVertex.getJobVertexId() +"." +_					"When migrating a savepoint from a version < 1.3 please make sure that no changes were made " +_					"to the parallelism of stateful operators.")___			Preconditions.checkArgument(_				operatorIDs.size() == taskState.getChainLength(),_				"Detected change in chain length during migration for task " + jobVertex.getJobVertexId() +". " +_					"When migrating a savepoint from a version < 1.3 please make sure that the topology was not " +_					"changed by modification of a chain containing a stateful operator.")___			for (int subtaskIndex = 0_ subtaskIndex < jobVertex.getParallelism()_ subtaskIndex++) {_				SubtaskState subtaskState__				try {_					subtaskState = taskState.getState(subtaskIndex)__				} catch (Exception e) {_					throw new IllegalStateException(_						"Could not find subtask with index " + subtaskIndex + " for task " + jobVertex.getJobVertexId() + ". " +_						"When migrating a savepoint from a version < 1.3 please make sure that no changes were made " +_						"to the parallelism of stateful operators.",_						e)__				}__				if (subtaskState == null) {_					continue__				}__				ChainedStateHandle<OperatorStateHandle> partitioneableState =_					subtaskState.getManagedOperatorState()__				ChainedStateHandle<OperatorStateHandle> rawOperatorState =_					subtaskState.getRawOperatorState()___				for (int chainIndex = 0_ chainIndex < taskState.getChainLength()_ chainIndex++) {__					_					for (int operatorIndex = 0_ operatorIndex < operatorIDs.size()_ operatorIndex++) {_						OperatorID operatorID = operatorIDs.get(operatorIndex)__						OperatorState operatorState = operatorStates.get(operatorID)___						if (operatorState == null) {_							operatorState = new OperatorState(_								operatorID,_								jobVertex.getParallelism(),_								jobVertex.getMaxParallelism())__							operatorStates.put(operatorID, operatorState)__						}__						KeyedStateHandle managedKeyedState = null__						KeyedStateHandle rawKeyedState = null___						_						if (operatorIndex == operatorIDs.size() - 1) {_							managedKeyedState = subtaskState.getManagedKeyedState()__							rawKeyedState = subtaskState.getRawKeyedState()__						}__						OperatorSubtaskState operatorSubtaskState = new OperatorSubtaskState(_							partitioneableState != null ? partitioneableState.get(operatorIndex) : null,_							rawOperatorState != null ? rawOperatorState.get(operatorIndex) : null,_							managedKeyedState,_							rawKeyedState)___						operatorState.putState(subtaskIndex, operatorSubtaskState)__					}_				}_			}_		}__		return new SavepointV2(_			savepoint.getCheckpointId(),_			operatorStates.values(),_			savepoint.getMasterStates())__	};converts,the,link,savepoint,containing,link,task,state,task,states,to,an,equivalent,savepoint,containing,link,operator,state,operator,states,param,savepoint,savepoint,to,convert,param,tasks,map,of,all,vertices,and,their,job,vertex,ids,return,converted,completed,checkpoint,deprecated,only,kept,for,backwards,compatibility,with,versions,1,3,will,be,removed,in,the,future;deprecated,public,static,savepoint,convert,to,operator,state,savepoint,v2,map,job,vertex,id,execution,job,vertex,tasks,savepoint,savepoint,if,savepoint,get,operator,states,null,return,savepoint,boolean,expanded,to,legacy,ids,false,map,operator,id,operator,state,operator,states,new,hash,map,savepoint,get,task,states,size,1,for,task,state,task,state,savepoint,get,task,states,execution,job,vertex,job,vertex,tasks,get,task,state,get,job,vertex,id,if,job,vertex,null,expanded,to,legacy,ids,tasks,execution,job,vertex,include,legacy,job,vertex,ids,tasks,job,vertex,tasks,get,task,state,get,job,vertex,id,expanded,to,legacy,ids,true,if,job,vertex,null,throw,new,illegal,state,exception,could,not,find,task,for,state,with,id,task,state,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,the,topology,was,not,changed,through,removal,of,a,stateful,operator,or,modification,of,a,chain,containing,a,stateful,operator,list,operator,id,operator,ids,job,vertex,get,operator,ids,preconditions,check,argument,job,vertex,get,parallelism,task,state,get,parallelism,detected,change,in,parallelism,during,migration,for,task,job,vertex,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,no,changes,were,made,to,the,parallelism,of,stateful,operators,preconditions,check,argument,operator,ids,size,task,state,get,chain,length,detected,change,in,chain,length,during,migration,for,task,job,vertex,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,the,topology,was,not,changed,by,modification,of,a,chain,containing,a,stateful,operator,for,int,subtask,index,0,subtask,index,job,vertex,get,parallelism,subtask,index,subtask,state,subtask,state,try,subtask,state,task,state,get,state,subtask,index,catch,exception,e,throw,new,illegal,state,exception,could,not,find,subtask,with,index,subtask,index,for,task,job,vertex,get,job,vertex,id,when,migrating,a,savepoint,from,a,version,1,3,please,make,sure,that,no,changes,were,made,to,the,parallelism,of,stateful,operators,e,if,subtask,state,null,continue,chained,state,handle,operator,state,handle,partitioneable,state,subtask,state,get,managed,operator,state,chained,state,handle,operator,state,handle,raw,operator,state,subtask,state,get,raw,operator,state,for,int,chain,index,0,chain,index,task,state,get,chain,length,chain,index,for,int,operator,index,0,operator,index,operator,ids,size,operator,index,operator,id,operator,id,operator,ids,get,operator,index,operator,state,operator,state,operator,states,get,operator,id,if,operator,state,null,operator,state,new,operator,state,operator,id,job,vertex,get,parallelism,job,vertex,get,max,parallelism,operator,states,put,operator,id,operator,state,keyed,state,handle,managed,keyed,state,null,keyed,state,handle,raw,keyed,state,null,if,operator,index,operator,ids,size,1,managed,keyed,state,subtask,state,get,managed,keyed,state,raw,keyed,state,subtask,state,get,raw,keyed,state,operator,subtask,state,operator,subtask,state,new,operator,subtask,state,partitioneable,state,null,partitioneable,state,get,operator,index,null,raw,operator,state,null,raw,operator,state,get,operator,index,null,managed,keyed,state,raw,keyed,state,operator,state,put,state,subtask,index,operator,subtask,state,return,new,savepoint,v2,savepoint,get,checkpoint,id,operator,states,values,savepoint,get,master,states
