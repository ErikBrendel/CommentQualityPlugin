# id;timestamp;commentText;codeText;commentWords;codeWords
InternalKvState -> TypeSerializer<K> getKeySerializer()_;1520632055;Returns the {@link TypeSerializer} for the type of key this state is associated to.;TypeSerializer<K> getKeySerializer()_;returns,the,link,type,serializer,for,the,type,of,key,this,state,is,associated,to;type,serializer,k,get,key,serializer
InternalKvState -> TypeSerializer<K> getKeySerializer()_;1538063092;Returns the {@link TypeSerializer} for the type of key this state is associated to.;TypeSerializer<K> getKeySerializer()_;returns,the,link,type,serializer,for,the,type,of,key,this,state,is,associated,to;type,serializer,k,get,key,serializer
InternalKvState -> void setCurrentNamespace(N namespace)_;1484317029;Sets the current namespace, which will be used when using the state access methods.__@param namespace The namespace.;void setCurrentNamespace(N namespace)_;sets,the,current,namespace,which,will,be,used,when,using,the,state,access,methods,param,namespace,the,namespace;void,set,current,namespace,n,namespace
InternalKvState -> void setCurrentNamespace(N namespace)_;1520632055;Sets the current namespace, which will be used when using the state access methods.__@param namespace The namespace.;void setCurrentNamespace(N namespace)_;sets,the,current,namespace,which,will,be,used,when,using,the,state,access,methods,param,namespace,the,namespace;void,set,current,namespace,n,namespace
InternalKvState -> void setCurrentNamespace(N namespace)_;1538063092;Sets the current namespace, which will be used when using the state access methods.__@param namespace The namespace.;void setCurrentNamespace(N namespace)_;sets,the,current,namespace,which,will,be,used,when,using,the,state,access,methods,param,namespace,the,namespace;void,set,current,namespace,n,namespace
InternalKvState -> TypeSerializer<N> getNamespaceSerializer()_;1520632055;Returns the {@link TypeSerializer} for the type of namespace this state is associated to.;TypeSerializer<N> getNamespaceSerializer()_;returns,the,link,type,serializer,for,the,type,of,namespace,this,state,is,associated,to;type,serializer,n,get,namespace,serializer
InternalKvState -> TypeSerializer<N> getNamespaceSerializer()_;1538063092;Returns the {@link TypeSerializer} for the type of namespace this state is associated to.;TypeSerializer<N> getNamespaceSerializer()_;returns,the,link,type,serializer,for,the,type,of,namespace,this,state,is,associated,to;type,serializer,n,get,namespace,serializer
InternalKvState -> TypeSerializer<V> getValueSerializer()_;1520632055;Returns the {@link TypeSerializer} for the type of value this state holds.;TypeSerializer<V> getValueSerializer()_;returns,the,link,type,serializer,for,the,type,of,value,this,state,holds;type,serializer,v,get,value,serializer
InternalKvState -> TypeSerializer<V> getValueSerializer()_;1538063092;Returns the {@link TypeSerializer} for the type of value this state holds.;TypeSerializer<V> getValueSerializer()_;returns,the,link,type,serializer,for,the,type,of,value,this,state,holds;type,serializer,v,get,value,serializer
InternalKvState -> byte[] getSerializedValue( 			final byte[] serializedKeyAndNamespace, 			final TypeSerializer<K> safeKeySerializer, 			final TypeSerializer<N> safeNamespaceSerializer, 			final TypeSerializer<V> safeValueSerializer) throws Exception_;1520632055;Returns the serialized value for the given key and namespace.__<p>If no value is associated with key and namespace, <code>null</code>_is returned.__<p><b>TO IMPLEMENTERS:</b> This method is called by multiple threads. Anything_stateful (e.g. serializers) should be either duplicated or protected from undesired_consequences of concurrent invocations.__@param serializedKeyAndNamespace Serialized key and namespace_@param safeKeySerializer A key serializer which is safe to be used even in multi-threaded context_@param safeNamespaceSerializer A namespace serializer which is safe to be used even in multi-threaded context_@param safeValueSerializer A value serializer which is safe to be used even in multi-threaded context_@return Serialized value or <code>null</code> if no value is associated with the key and namespace.__@throws Exception Exceptions during serialization are forwarded;byte[] getSerializedValue(_			final byte[] serializedKeyAndNamespace,_			final TypeSerializer<K> safeKeySerializer,_			final TypeSerializer<N> safeNamespaceSerializer,_			final TypeSerializer<V> safeValueSerializer) throws Exception_;returns,the,serialized,value,for,the,given,key,and,namespace,p,if,no,value,is,associated,with,key,and,namespace,code,null,code,is,returned,p,b,to,implementers,b,this,method,is,called,by,multiple,threads,anything,stateful,e,g,serializers,should,be,either,duplicated,or,protected,from,undesired,consequences,of,concurrent,invocations,param,serialized,key,and,namespace,serialized,key,and,namespace,param,safe,key,serializer,a,key,serializer,which,is,safe,to,be,used,even,in,multi,threaded,context,param,safe,namespace,serializer,a,namespace,serializer,which,is,safe,to,be,used,even,in,multi,threaded,context,param,safe,value,serializer,a,value,serializer,which,is,safe,to,be,used,even,in,multi,threaded,context,return,serialized,value,or,code,null,code,if,no,value,is,associated,with,the,key,and,namespace,throws,exception,exceptions,during,serialization,are,forwarded;byte,get,serialized,value,final,byte,serialized,key,and,namespace,final,type,serializer,k,safe,key,serializer,final,type,serializer,n,safe,namespace,serializer,final,type,serializer,v,safe,value,serializer,throws,exception
InternalKvState -> byte[] getSerializedValue( 			final byte[] serializedKeyAndNamespace, 			final TypeSerializer<K> safeKeySerializer, 			final TypeSerializer<N> safeNamespaceSerializer, 			final TypeSerializer<V> safeValueSerializer) throws Exception_;1538063092;Returns the serialized value for the given key and namespace.__<p>If no value is associated with key and namespace, <code>null</code>_is returned.__<p><b>TO IMPLEMENTERS:</b> This method is called by multiple threads. Anything_stateful (e.g. serializers) should be either duplicated or protected from undesired_consequences of concurrent invocations.__@param serializedKeyAndNamespace Serialized key and namespace_@param safeKeySerializer A key serializer which is safe to be used even in multi-threaded context_@param safeNamespaceSerializer A namespace serializer which is safe to be used even in multi-threaded context_@param safeValueSerializer A value serializer which is safe to be used even in multi-threaded context_@return Serialized value or <code>null</code> if no value is associated with the key and namespace.__@throws Exception Exceptions during serialization are forwarded;byte[] getSerializedValue(_			final byte[] serializedKeyAndNamespace,_			final TypeSerializer<K> safeKeySerializer,_			final TypeSerializer<N> safeNamespaceSerializer,_			final TypeSerializer<V> safeValueSerializer) throws Exception_;returns,the,serialized,value,for,the,given,key,and,namespace,p,if,no,value,is,associated,with,key,and,namespace,code,null,code,is,returned,p,b,to,implementers,b,this,method,is,called,by,multiple,threads,anything,stateful,e,g,serializers,should,be,either,duplicated,or,protected,from,undesired,consequences,of,concurrent,invocations,param,serialized,key,and,namespace,serialized,key,and,namespace,param,safe,key,serializer,a,key,serializer,which,is,safe,to,be,used,even,in,multi,threaded,context,param,safe,namespace,serializer,a,namespace,serializer,which,is,safe,to,be,used,even,in,multi,threaded,context,param,safe,value,serializer,a,value,serializer,which,is,safe,to,be,used,even,in,multi,threaded,context,return,serialized,value,or,code,null,code,if,no,value,is,associated,with,the,key,and,namespace,throws,exception,exceptions,during,serialization,are,forwarded;byte,get,serialized,value,final,byte,serialized,key,and,namespace,final,type,serializer,k,safe,key,serializer,final,type,serializer,n,safe,namespace,serializer,final,type,serializer,v,safe,value,serializer,throws,exception
