# id;timestamp;commentText;codeText;commentWords;codeWords
StateSerializerProvider -> @Nonnull 	public final TypeSerializer<T> currentSchemaSerializer();1544700166;Gets the serializer that recognizes the current serialization schema of the state._This is the serializer that should be used for regular state serialization and_deserialization after state has been restored.__<p>If this provider was created from a restored state's serializer snapshot, while a_new serializer (with a new schema) was not registered for the state (i.e., because_the state was never accessed after it was restored), then the schema of state remains_identical. Therefore, in this case, it is guaranteed that the serializer returned by_this method is the same as the one returned by {@link #previousSchemaSerializer()}.__<p>If this provider was created from a serializer instance, then this always returns the_that same serializer instance. If later on a snapshot of the previous serializer is supplied_via {@link #setPreviousSerializerSnapshotForRestoredState(TypeSerializerSnapshot)}, then_the initially supplied serializer instance will be checked for compatibility.__@return a serializer that reads and writes in the current schema of the state.;@Nonnull_	public final TypeSerializer<T> currentSchemaSerializer() {_		if (registeredSerializer != null) {_			checkState(_				!isRegisteredWithIncompatibleSerializer,_				"Unable to provide a serializer with the current schema, because the restored state was " +_					"registered with a new serializer that has incompatible schema.")___			return registeredSerializer__		}__		_		_		return previousSchemaSerializer()__	};gets,the,serializer,that,recognizes,the,current,serialization,schema,of,the,state,this,is,the,serializer,that,should,be,used,for,regular,state,serialization,and,deserialization,after,state,has,been,restored,p,if,this,provider,was,created,from,a,restored,state,s,serializer,snapshot,while,a,new,serializer,with,a,new,schema,was,not,registered,for,the,state,i,e,because,the,state,was,never,accessed,after,it,was,restored,then,the,schema,of,state,remains,identical,therefore,in,this,case,it,is,guaranteed,that,the,serializer,returned,by,this,method,is,the,same,as,the,one,returned,by,link,previous,schema,serializer,p,if,this,provider,was,created,from,a,serializer,instance,then,this,always,returns,the,that,same,serializer,instance,if,later,on,a,snapshot,of,the,previous,serializer,is,supplied,via,link,set,previous,serializer,snapshot,for,restored,state,type,serializer,snapshot,then,the,initially,supplied,serializer,instance,will,be,checked,for,compatibility,return,a,serializer,that,reads,and,writes,in,the,current,schema,of,the,state;nonnull,public,final,type,serializer,t,current,schema,serializer,if,registered,serializer,null,check,state,is,registered,with,incompatible,serializer,unable,to,provide,a,serializer,with,the,current,schema,because,the,restored,state,was,registered,with,a,new,serializer,that,has,incompatible,schema,return,registered,serializer,return,previous,schema,serializer
StateSerializerProvider -> @Nonnull 	public final TypeSerializer<T> currentSchemaSerializer();1545145598;Gets the serializer that recognizes the current serialization schema of the state._This is the serializer that should be used for regular state serialization and_deserialization after state has been restored.__<p>If this provider was created from a restored state's serializer snapshot, while a_new serializer (with a new schema) was not registered for the state (i.e., because_the state was never accessed after it was restored), then the schema of state remains_identical. Therefore, in this case, it is guaranteed that the serializer returned by_this method is the same as the one returned by {@link #previousSchemaSerializer()}.__<p>If this provider was created from a serializer instance, then this always returns the_that same serializer instance. If later on a snapshot of the previous serializer is supplied_via {@link #setPreviousSerializerSnapshotForRestoredState(TypeSerializerSnapshot)}, then_the initially supplied serializer instance will be checked for compatibility.__@return a serializer that reads and writes in the current schema of the state.;@Nonnull_	public final TypeSerializer<T> currentSchemaSerializer() {_		if (registeredSerializer != null) {_			checkState(_				!isRegisteredWithIncompatibleSerializer,_				"Unable to provide a serializer with the current schema, because the restored state was " +_					"registered with a new serializer that has incompatible schema.")___			return registeredSerializer__		}__		_		_		return previousSchemaSerializer()__	};gets,the,serializer,that,recognizes,the,current,serialization,schema,of,the,state,this,is,the,serializer,that,should,be,used,for,regular,state,serialization,and,deserialization,after,state,has,been,restored,p,if,this,provider,was,created,from,a,restored,state,s,serializer,snapshot,while,a,new,serializer,with,a,new,schema,was,not,registered,for,the,state,i,e,because,the,state,was,never,accessed,after,it,was,restored,then,the,schema,of,state,remains,identical,therefore,in,this,case,it,is,guaranteed,that,the,serializer,returned,by,this,method,is,the,same,as,the,one,returned,by,link,previous,schema,serializer,p,if,this,provider,was,created,from,a,serializer,instance,then,this,always,returns,the,that,same,serializer,instance,if,later,on,a,snapshot,of,the,previous,serializer,is,supplied,via,link,set,previous,serializer,snapshot,for,restored,state,type,serializer,snapshot,then,the,initially,supplied,serializer,instance,will,be,checked,for,compatibility,return,a,serializer,that,reads,and,writes,in,the,current,schema,of,the,state;nonnull,public,final,type,serializer,t,current,schema,serializer,if,registered,serializer,null,check,state,is,registered,with,incompatible,serializer,unable,to,provide,a,serializer,with,the,current,schema,because,the,restored,state,was,registered,with,a,new,serializer,that,has,incompatible,schema,return,registered,serializer,return,previous,schema,serializer
StateSerializerProvider -> @Nonnull 	public abstract TypeSerializerSchemaCompatibility<T> setPreviousSerializerSnapshotForRestoredState(TypeSerializerSnapshot<T> previousSerializerSnapshot)_;1544700166;For restored state, set the state's previous serializer's snapshot.__<p>Users are allowed to set the previous serializer's snapshot once. Therefore, this method_is irrelevant if this provider was created with a serializer snapshot, since the serializer_snapshot had been set already.__<p>For the case where this provider was created from a serializer instance, then this method should_be called at most once. The initially registered state serializer will be checked for its_schema compatibility with the previous serializer's schema, and returned to the caller._The caller is responsible for checking the result and react appropriately to it, as follows:_<ul>_<li>{@link TypeSerializerSchemaCompatibility#isCompatibleAsIs()}: nothing needs to be done._{@link #currentSchemaSerializer()} remains to return the initially registered serializer.</li>_<li>{@link TypeSerializerSchemaCompatibility#isCompatibleAfterMigration()} ()}: state needs to be_migrated before the serializer returned by {@link #currentSchemaSerializer()} can be used._The migration should be performed by reading the state with {@link #previousSchemaSerializer()},_and then writing it again with {@link #currentSchemaSerializer()}.</li>_<li>{@link TypeSerializerSchemaCompatibility#isIncompatible()}: the registered serializer is_incompatible. {@link #currentSchemaSerializer()} can no longer return a serializer for_the state, and therefore this provider shouldn't be used anymore.</li>_</ul>__@param previousSerializerSnapshot the state's previous serializer's snapshot__@return the schema compatibility of the initially registered serializer, with respect to the previous serializer.;@Nonnull_	public abstract TypeSerializerSchemaCompatibility<T> setPreviousSerializerSnapshotForRestoredState(TypeSerializerSnapshot<T> previousSerializerSnapshot)_;for,restored,state,set,the,state,s,previous,serializer,s,snapshot,p,users,are,allowed,to,set,the,previous,serializer,s,snapshot,once,therefore,this,method,is,irrelevant,if,this,provider,was,created,with,a,serializer,snapshot,since,the,serializer,snapshot,had,been,set,already,p,for,the,case,where,this,provider,was,created,from,a,serializer,instance,then,this,method,should,be,called,at,most,once,the,initially,registered,state,serializer,will,be,checked,for,its,schema,compatibility,with,the,previous,serializer,s,schema,and,returned,to,the,caller,the,caller,is,responsible,for,checking,the,result,and,react,appropriately,to,it,as,follows,ul,li,link,type,serializer,schema,compatibility,is,compatible,as,is,nothing,needs,to,be,done,link,current,schema,serializer,remains,to,return,the,initially,registered,serializer,li,li,link,type,serializer,schema,compatibility,is,compatible,after,migration,state,needs,to,be,migrated,before,the,serializer,returned,by,link,current,schema,serializer,can,be,used,the,migration,should,be,performed,by,reading,the,state,with,link,previous,schema,serializer,and,then,writing,it,again,with,link,current,schema,serializer,li,li,link,type,serializer,schema,compatibility,is,incompatible,the,registered,serializer,is,incompatible,link,current,schema,serializer,can,no,longer,return,a,serializer,for,the,state,and,therefore,this,provider,shouldn,t,be,used,anymore,li,ul,param,previous,serializer,snapshot,the,state,s,previous,serializer,s,snapshot,return,the,schema,compatibility,of,the,initially,registered,serializer,with,respect,to,the,previous,serializer;nonnull,public,abstract,type,serializer,schema,compatibility,t,set,previous,serializer,snapshot,for,restored,state,type,serializer,snapshot,t,previous,serializer,snapshot
StateSerializerProvider -> @Nonnull 	public abstract TypeSerializerSchemaCompatibility<T> setPreviousSerializerSnapshotForRestoredState(TypeSerializerSnapshot<T> previousSerializerSnapshot)_;1545145598;For restored state, set the state's previous serializer's snapshot.__<p>Users are allowed to set the previous serializer's snapshot once. Therefore, this method_is irrelevant if this provider was created with a serializer snapshot, since the serializer_snapshot had been set already.__<p>For the case where this provider was created from a serializer instance, then this method should_be called at most once. The initially registered state serializer will be checked for its_schema compatibility with the previous serializer's schema, and returned to the caller._The caller is responsible for checking the result and react appropriately to it, as follows:_<ul>_<li>{@link TypeSerializerSchemaCompatibility#isCompatibleAsIs()}: nothing needs to be done._{@link #currentSchemaSerializer()} remains to return the initially registered serializer.</li>_<li>{@link TypeSerializerSchemaCompatibility#isCompatibleAfterMigration()} ()}: state needs to be_migrated before the serializer returned by {@link #currentSchemaSerializer()} can be used._The migration should be performed by reading the state with {@link #previousSchemaSerializer()},_and then writing it again with {@link #currentSchemaSerializer()}.</li>_<li>{@link TypeSerializerSchemaCompatibility#isIncompatible()}: the registered serializer is_incompatible. {@link #currentSchemaSerializer()} can no longer return a serializer for_the state, and therefore this provider shouldn't be used anymore.</li>_</ul>__@param previousSerializerSnapshot the state's previous serializer's snapshot__@return the schema compatibility of the initially registered serializer, with respect to the previous serializer.;@Nonnull_	public abstract TypeSerializerSchemaCompatibility<T> setPreviousSerializerSnapshotForRestoredState(TypeSerializerSnapshot<T> previousSerializerSnapshot)_;for,restored,state,set,the,state,s,previous,serializer,s,snapshot,p,users,are,allowed,to,set,the,previous,serializer,s,snapshot,once,therefore,this,method,is,irrelevant,if,this,provider,was,created,with,a,serializer,snapshot,since,the,serializer,snapshot,had,been,set,already,p,for,the,case,where,this,provider,was,created,from,a,serializer,instance,then,this,method,should,be,called,at,most,once,the,initially,registered,state,serializer,will,be,checked,for,its,schema,compatibility,with,the,previous,serializer,s,schema,and,returned,to,the,caller,the,caller,is,responsible,for,checking,the,result,and,react,appropriately,to,it,as,follows,ul,li,link,type,serializer,schema,compatibility,is,compatible,as,is,nothing,needs,to,be,done,link,current,schema,serializer,remains,to,return,the,initially,registered,serializer,li,li,link,type,serializer,schema,compatibility,is,compatible,after,migration,state,needs,to,be,migrated,before,the,serializer,returned,by,link,current,schema,serializer,can,be,used,the,migration,should,be,performed,by,reading,the,state,with,link,previous,schema,serializer,and,then,writing,it,again,with,link,current,schema,serializer,li,li,link,type,serializer,schema,compatibility,is,incompatible,the,registered,serializer,is,incompatible,link,current,schema,serializer,can,no,longer,return,a,serializer,for,the,state,and,therefore,this,provider,shouldn,t,be,used,anymore,li,ul,param,previous,serializer,snapshot,the,state,s,previous,serializer,s,snapshot,return,the,schema,compatibility,of,the,initially,registered,serializer,with,respect,to,the,previous,serializer;nonnull,public,abstract,type,serializer,schema,compatibility,t,set,previous,serializer,snapshot,for,restored,state,type,serializer,snapshot,t,previous,serializer,snapshot
StateSerializerProvider -> public static <T> StateSerializerProvider<T> fromNewRegisteredSerializer(TypeSerializer<T> registeredStateSerializer);1544700166;Creates a {@link StateSerializerProvider} from the registered state serializer.__<p>If the state is a restored one, and the previous serializer's snapshot is_obtained later on, is should be supplied via the_{@link #setPreviousSerializerSnapshotForRestoredState(TypeSerializerSnapshot)} method.__@param registeredStateSerializer the new state's registered serializer._@param <T> the type of the state.__@return a new {@link StateSerializerProvider}.;public static <T> StateSerializerProvider<T> fromNewRegisteredSerializer(TypeSerializer<T> registeredStateSerializer) {_		return new EagerlyRegisteredStateSerializerProvider<>(registeredStateSerializer)__	};creates,a,link,state,serializer,provider,from,the,registered,state,serializer,p,if,the,state,is,a,restored,one,and,the,previous,serializer,s,snapshot,is,obtained,later,on,is,should,be,supplied,via,the,link,set,previous,serializer,snapshot,for,restored,state,type,serializer,snapshot,method,param,registered,state,serializer,the,new,state,s,registered,serializer,param,t,the,type,of,the,state,return,a,new,link,state,serializer,provider;public,static,t,state,serializer,provider,t,from,new,registered,serializer,type,serializer,t,registered,state,serializer,return,new,eagerly,registered,state,serializer,provider,registered,state,serializer
StateSerializerProvider -> public static <T> StateSerializerProvider<T> fromNewRegisteredSerializer(TypeSerializer<T> registeredStateSerializer);1545145598;Creates a {@link StateSerializerProvider} from the registered state serializer.__<p>If the state is a restored one, and the previous serializer's snapshot is_obtained later on, is should be supplied via the_{@link #setPreviousSerializerSnapshotForRestoredState(TypeSerializerSnapshot)} method.__@param registeredStateSerializer the new state's registered serializer._@param <T> the type of the state.__@return a new {@link StateSerializerProvider}.;public static <T> StateSerializerProvider<T> fromNewRegisteredSerializer(TypeSerializer<T> registeredStateSerializer) {_		return new EagerlyRegisteredStateSerializerProvider<>(registeredStateSerializer)__	};creates,a,link,state,serializer,provider,from,the,registered,state,serializer,p,if,the,state,is,a,restored,one,and,the,previous,serializer,s,snapshot,is,obtained,later,on,is,should,be,supplied,via,the,link,set,previous,serializer,snapshot,for,restored,state,type,serializer,snapshot,method,param,registered,state,serializer,the,new,state,s,registered,serializer,param,t,the,type,of,the,state,return,a,new,link,state,serializer,provider;public,static,t,state,serializer,provider,t,from,new,registered,serializer,type,serializer,t,registered,state,serializer,return,new,eagerly,registered,state,serializer,provider,registered,state,serializer
StateSerializerProvider -> protected final void invalidateCurrentSchemaSerializerAccess();1544700166;Invalidates access to the current schema serializer. This lets {@link #currentSchemaSerializer()}_fail when invoked.__<p>Access to the current schema serializer should be invalidated by the methods_{@link #registerNewSerializerForRestoredState(TypeSerializer)} or_{@link #setPreviousSerializerSnapshotForRestoredState(TypeSerializerSnapshot)}_once the registered serializer is determined to be incompatible.;protected final void invalidateCurrentSchemaSerializerAccess() {_		this.isRegisteredWithIncompatibleSerializer = true__	};invalidates,access,to,the,current,schema,serializer,this,lets,link,current,schema,serializer,fail,when,invoked,p,access,to,the,current,schema,serializer,should,be,invalidated,by,the,methods,link,register,new,serializer,for,restored,state,type,serializer,or,link,set,previous,serializer,snapshot,for,restored,state,type,serializer,snapshot,once,the,registered,serializer,is,determined,to,be,incompatible;protected,final,void,invalidate,current,schema,serializer,access,this,is,registered,with,incompatible,serializer,true
StateSerializerProvider -> protected final void invalidateCurrentSchemaSerializerAccess();1545145598;Invalidates access to the current schema serializer. This lets {@link #currentSchemaSerializer()}_fail when invoked.__<p>Access to the current schema serializer should be invalidated by the methods_{@link #registerNewSerializerForRestoredState(TypeSerializer)} or_{@link #setPreviousSerializerSnapshotForRestoredState(TypeSerializerSnapshot)}_once the registered serializer is determined to be incompatible.;protected final void invalidateCurrentSchemaSerializerAccess() {_		this.isRegisteredWithIncompatibleSerializer = true__	};invalidates,access,to,the,current,schema,serializer,this,lets,link,current,schema,serializer,fail,when,invoked,p,access,to,the,current,schema,serializer,should,be,invalidated,by,the,methods,link,register,new,serializer,for,restored,state,type,serializer,or,link,set,previous,serializer,snapshot,for,restored,state,type,serializer,snapshot,once,the,registered,serializer,is,determined,to,be,incompatible;protected,final,void,invalidate,current,schema,serializer,access,this,is,registered,with,incompatible,serializer,true
StateSerializerProvider -> public static <T> StateSerializerProvider<T> fromPreviousSerializerSnapshot(TypeSerializerSnapshot<T> stateSerializerSnapshot);1544700166;Creates a {@link StateSerializerProvider} for restored state from the previous serializer's snapshot.__<p>Once a new serializer is registered for the state, it should be provided via_the {@link #registerNewSerializerForRestoredState(TypeSerializer)} method.__@param stateSerializerSnapshot the previous serializer's snapshot._@param <T> the type of the state.__@return a new {@link StateSerializerProvider}.;public static <T> StateSerializerProvider<T> fromPreviousSerializerSnapshot(TypeSerializerSnapshot<T> stateSerializerSnapshot) {_		return new LazilyRegisteredStateSerializerProvider<>(stateSerializerSnapshot)__	};creates,a,link,state,serializer,provider,for,restored,state,from,the,previous,serializer,s,snapshot,p,once,a,new,serializer,is,registered,for,the,state,it,should,be,provided,via,the,link,register,new,serializer,for,restored,state,type,serializer,method,param,state,serializer,snapshot,the,previous,serializer,s,snapshot,param,t,the,type,of,the,state,return,a,new,link,state,serializer,provider;public,static,t,state,serializer,provider,t,from,previous,serializer,snapshot,type,serializer,snapshot,t,state,serializer,snapshot,return,new,lazily,registered,state,serializer,provider,state,serializer,snapshot
StateSerializerProvider -> public static <T> StateSerializerProvider<T> fromPreviousSerializerSnapshot(TypeSerializerSnapshot<T> stateSerializerSnapshot);1545145598;Creates a {@link StateSerializerProvider} for restored state from the previous serializer's snapshot.__<p>Once a new serializer is registered for the state, it should be provided via_the {@link #registerNewSerializerForRestoredState(TypeSerializer)} method.__@param stateSerializerSnapshot the previous serializer's snapshot._@param <T> the type of the state.__@return a new {@link StateSerializerProvider}.;public static <T> StateSerializerProvider<T> fromPreviousSerializerSnapshot(TypeSerializerSnapshot<T> stateSerializerSnapshot) {_		return new LazilyRegisteredStateSerializerProvider<>(stateSerializerSnapshot)__	};creates,a,link,state,serializer,provider,for,restored,state,from,the,previous,serializer,s,snapshot,p,once,a,new,serializer,is,registered,for,the,state,it,should,be,provided,via,the,link,register,new,serializer,for,restored,state,type,serializer,method,param,state,serializer,snapshot,the,previous,serializer,s,snapshot,param,t,the,type,of,the,state,return,a,new,link,state,serializer,provider;public,static,t,state,serializer,provider,t,from,previous,serializer,snapshot,type,serializer,snapshot,t,state,serializer,snapshot,return,new,lazily,registered,state,serializer,provider,state,serializer,snapshot
StateSerializerProvider -> @Nonnull 	public final TypeSerializer<T> previousSchemaSerializer();1544700166;Gets the serializer that recognizes the previous serialization schema of the state._This is the serializer that should be used for restoring the state, i.e. when the state_is still in the previous serialization schema.__<p>This method only returns a serializer if this provider has the previous serializer's_snapshot. Otherwise, trying to access the previous schema serializer will fail_with an exception.__@return a serializer that reads and writes in the previous schema of the state.;@Nonnull_	public final TypeSerializer<T> previousSchemaSerializer() {_		if (cachedRestoredSerializer != null) {_			return cachedRestoredSerializer__		}__		if (previousSerializerSnapshot == null) {_			throw new UnsupportedOperationException(_				"This provider does not contain the state's previous serializer's snapshot. Cannot provider a serializer for previous schema.")__		}__		this.cachedRestoredSerializer = previousSerializerSnapshot.restoreSerializer()__		return cachedRestoredSerializer__	};gets,the,serializer,that,recognizes,the,previous,serialization,schema,of,the,state,this,is,the,serializer,that,should,be,used,for,restoring,the,state,i,e,when,the,state,is,still,in,the,previous,serialization,schema,p,this,method,only,returns,a,serializer,if,this,provider,has,the,previous,serializer,s,snapshot,otherwise,trying,to,access,the,previous,schema,serializer,will,fail,with,an,exception,return,a,serializer,that,reads,and,writes,in,the,previous,schema,of,the,state;nonnull,public,final,type,serializer,t,previous,schema,serializer,if,cached,restored,serializer,null,return,cached,restored,serializer,if,previous,serializer,snapshot,null,throw,new,unsupported,operation,exception,this,provider,does,not,contain,the,state,s,previous,serializer,s,snapshot,cannot,provider,a,serializer,for,previous,schema,this,cached,restored,serializer,previous,serializer,snapshot,restore,serializer,return,cached,restored,serializer
StateSerializerProvider -> @Nonnull 	public final TypeSerializer<T> previousSchemaSerializer();1545145598;Gets the serializer that recognizes the previous serialization schema of the state._This is the serializer that should be used for restoring the state, i.e. when the state_is still in the previous serialization schema.__<p>This method only returns a serializer if this provider has the previous serializer's_snapshot. Otherwise, trying to access the previous schema serializer will fail_with an exception.__@return a serializer that reads and writes in the previous schema of the state.;@Nonnull_	public final TypeSerializer<T> previousSchemaSerializer() {_		if (cachedRestoredSerializer != null) {_			return cachedRestoredSerializer__		}__		if (previousSerializerSnapshot == null) {_			throw new UnsupportedOperationException(_				"This provider does not contain the state's previous serializer's snapshot. Cannot provider a serializer for previous schema.")__		}__		this.cachedRestoredSerializer = previousSerializerSnapshot.restoreSerializer()__		return cachedRestoredSerializer__	};gets,the,serializer,that,recognizes,the,previous,serialization,schema,of,the,state,this,is,the,serializer,that,should,be,used,for,restoring,the,state,i,e,when,the,state,is,still,in,the,previous,serialization,schema,p,this,method,only,returns,a,serializer,if,this,provider,has,the,previous,serializer,s,snapshot,otherwise,trying,to,access,the,previous,schema,serializer,will,fail,with,an,exception,return,a,serializer,that,reads,and,writes,in,the,previous,schema,of,the,state;nonnull,public,final,type,serializer,t,previous,schema,serializer,if,cached,restored,serializer,null,return,cached,restored,serializer,if,previous,serializer,snapshot,null,throw,new,unsupported,operation,exception,this,provider,does,not,contain,the,state,s,previous,serializer,s,snapshot,cannot,provider,a,serializer,for,previous,schema,this,cached,restored,serializer,previous,serializer,snapshot,restore,serializer,return,cached,restored,serializer
StateSerializerProvider -> @Nonnull 	public abstract TypeSerializerSchemaCompatibility<T> registerNewSerializerForRestoredState(TypeSerializer<T> newSerializer)_;1544339704;For restored state, register a new serializer that potentially has a new serialization schema.__<p>Users are allowed to register serializers for state only once. Therefore, this method_is irrelevant if this provider was created from new state, since a state serializer had_been registered already.__<p>For the case where this provider was created from restored state, then this method should_be called at most once. The new serializer will be checked for its schema compatibility with the_previous serializer's schema, and returned to the caller. The caller is responsible for_checking the result and react appropriately to it, as follows:_<ul>_<li>{@link TypeSerializerSchemaCompatibility#isCompatibleAsIs()}: nothing needs to be done._{@link #currentSchemaSerializer()} now returns the newly registered serializer.</li>_<li>{@link TypeSerializerSchemaCompatibility#isCompatibleAfterMigration()} ()}: state needs to be_migrated before the serializer returned by {@link #currentSchemaSerializer()} can be used._The migration should be performed by reading the state with {@link #previousSchemaSerializer()},_and then writing it again with {@link #currentSchemaSerializer()}.</li>_<li>{@link TypeSerializerSchemaCompatibility#isIncompatible()}: the registered serializer is_incompatible. {@link #currentSchemaSerializer()} can no longer return a serializer for_the state, and therefore this provider shouldn't be used anymore.</li>_</ul>__@return the schema compatibility of the new registered serializer, with respect to the previous serializer.;@Nonnull_	public abstract TypeSerializerSchemaCompatibility<T> registerNewSerializerForRestoredState(TypeSerializer<T> newSerializer)_;for,restored,state,register,a,new,serializer,that,potentially,has,a,new,serialization,schema,p,users,are,allowed,to,register,serializers,for,state,only,once,therefore,this,method,is,irrelevant,if,this,provider,was,created,from,new,state,since,a,state,serializer,had,been,registered,already,p,for,the,case,where,this,provider,was,created,from,restored,state,then,this,method,should,be,called,at,most,once,the,new,serializer,will,be,checked,for,its,schema,compatibility,with,the,previous,serializer,s,schema,and,returned,to,the,caller,the,caller,is,responsible,for,checking,the,result,and,react,appropriately,to,it,as,follows,ul,li,link,type,serializer,schema,compatibility,is,compatible,as,is,nothing,needs,to,be,done,link,current,schema,serializer,now,returns,the,newly,registered,serializer,li,li,link,type,serializer,schema,compatibility,is,compatible,after,migration,state,needs,to,be,migrated,before,the,serializer,returned,by,link,current,schema,serializer,can,be,used,the,migration,should,be,performed,by,reading,the,state,with,link,previous,schema,serializer,and,then,writing,it,again,with,link,current,schema,serializer,li,li,link,type,serializer,schema,compatibility,is,incompatible,the,registered,serializer,is,incompatible,link,current,schema,serializer,can,no,longer,return,a,serializer,for,the,state,and,therefore,this,provider,shouldn,t,be,used,anymore,li,ul,return,the,schema,compatibility,of,the,new,registered,serializer,with,respect,to,the,previous,serializer;nonnull,public,abstract,type,serializer,schema,compatibility,t,register,new,serializer,for,restored,state,type,serializer,t,new,serializer
StateSerializerProvider -> @Nonnull 	public abstract TypeSerializerSchemaCompatibility<T> registerNewSerializerForRestoredState(TypeSerializer<T> newSerializer)_;1544700166;For restored state, register a new serializer that potentially has a new serialization schema.__<p>Users are allowed to register serializers for state only once. Therefore, this method_is irrelevant if this provider was created with a serializer instance, since a state serializer had_been registered already.__<p>For the case where this provider was created from a serializer snapshot, then this method should_be called at most once. The new serializer will be checked for its schema compatibility with the_previous serializer's schema, and returned to the caller. The caller is responsible for_checking the result and react appropriately to it, as follows:_<ul>_<li>{@link TypeSerializerSchemaCompatibility#isCompatibleAsIs()}: nothing needs to be done._{@link #currentSchemaSerializer()} now returns the newly registered serializer.</li>_<li>{@link TypeSerializerSchemaCompatibility#isCompatibleAfterMigration()} ()}: state needs to be_migrated before the serializer returned by {@link #currentSchemaSerializer()} can be used._The migration should be performed by reading the state with {@link #previousSchemaSerializer()},_and then writing it again with {@link #currentSchemaSerializer()}.</li>_<li>{@link TypeSerializerSchemaCompatibility#isIncompatible()}: the registered serializer is_incompatible. {@link #currentSchemaSerializer()} can no longer return a serializer for_the state, and therefore this provider shouldn't be used anymore.</li>_</ul>__@return the schema compatibility of the new registered serializer, with respect to the previous serializer.;@Nonnull_	public abstract TypeSerializerSchemaCompatibility<T> registerNewSerializerForRestoredState(TypeSerializer<T> newSerializer)_;for,restored,state,register,a,new,serializer,that,potentially,has,a,new,serialization,schema,p,users,are,allowed,to,register,serializers,for,state,only,once,therefore,this,method,is,irrelevant,if,this,provider,was,created,with,a,serializer,instance,since,a,state,serializer,had,been,registered,already,p,for,the,case,where,this,provider,was,created,from,a,serializer,snapshot,then,this,method,should,be,called,at,most,once,the,new,serializer,will,be,checked,for,its,schema,compatibility,with,the,previous,serializer,s,schema,and,returned,to,the,caller,the,caller,is,responsible,for,checking,the,result,and,react,appropriately,to,it,as,follows,ul,li,link,type,serializer,schema,compatibility,is,compatible,as,is,nothing,needs,to,be,done,link,current,schema,serializer,now,returns,the,newly,registered,serializer,li,li,link,type,serializer,schema,compatibility,is,compatible,after,migration,state,needs,to,be,migrated,before,the,serializer,returned,by,link,current,schema,serializer,can,be,used,the,migration,should,be,performed,by,reading,the,state,with,link,previous,schema,serializer,and,then,writing,it,again,with,link,current,schema,serializer,li,li,link,type,serializer,schema,compatibility,is,incompatible,the,registered,serializer,is,incompatible,link,current,schema,serializer,can,no,longer,return,a,serializer,for,the,state,and,therefore,this,provider,shouldn,t,be,used,anymore,li,ul,return,the,schema,compatibility,of,the,new,registered,serializer,with,respect,to,the,previous,serializer;nonnull,public,abstract,type,serializer,schema,compatibility,t,register,new,serializer,for,restored,state,type,serializer,t,new,serializer
StateSerializerProvider -> @Nonnull 	public abstract TypeSerializerSchemaCompatibility<T> registerNewSerializerForRestoredState(TypeSerializer<T> newSerializer)_;1545145598;For restored state, register a new serializer that potentially has a new serialization schema.__<p>Users are allowed to register serializers for state only once. Therefore, this method_is irrelevant if this provider was created with a serializer instance, since a state serializer had_been registered already.__<p>For the case where this provider was created from a serializer snapshot, then this method should_be called at most once. The new serializer will be checked for its schema compatibility with the_previous serializer's schema, and returned to the caller. The caller is responsible for_checking the result and react appropriately to it, as follows:_<ul>_<li>{@link TypeSerializerSchemaCompatibility#isCompatibleAsIs()}: nothing needs to be done._{@link #currentSchemaSerializer()} now returns the newly registered serializer.</li>_<li>{@link TypeSerializerSchemaCompatibility#isCompatibleAfterMigration()} ()}: state needs to be_migrated before the serializer returned by {@link #currentSchemaSerializer()} can be used._The migration should be performed by reading the state with {@link #previousSchemaSerializer()},_and then writing it again with {@link #currentSchemaSerializer()}.</li>_<li>{@link TypeSerializerSchemaCompatibility#isIncompatible()}: the registered serializer is_incompatible. {@link #currentSchemaSerializer()} can no longer return a serializer for_the state, and therefore this provider shouldn't be used anymore.</li>_</ul>__@return the schema compatibility of the new registered serializer, with respect to the previous serializer.;@Nonnull_	public abstract TypeSerializerSchemaCompatibility<T> registerNewSerializerForRestoredState(TypeSerializer<T> newSerializer)_;for,restored,state,register,a,new,serializer,that,potentially,has,a,new,serialization,schema,p,users,are,allowed,to,register,serializers,for,state,only,once,therefore,this,method,is,irrelevant,if,this,provider,was,created,with,a,serializer,instance,since,a,state,serializer,had,been,registered,already,p,for,the,case,where,this,provider,was,created,from,a,serializer,snapshot,then,this,method,should,be,called,at,most,once,the,new,serializer,will,be,checked,for,its,schema,compatibility,with,the,previous,serializer,s,schema,and,returned,to,the,caller,the,caller,is,responsible,for,checking,the,result,and,react,appropriately,to,it,as,follows,ul,li,link,type,serializer,schema,compatibility,is,compatible,as,is,nothing,needs,to,be,done,link,current,schema,serializer,now,returns,the,newly,registered,serializer,li,li,link,type,serializer,schema,compatibility,is,compatible,after,migration,state,needs,to,be,migrated,before,the,serializer,returned,by,link,current,schema,serializer,can,be,used,the,migration,should,be,performed,by,reading,the,state,with,link,previous,schema,serializer,and,then,writing,it,again,with,link,current,schema,serializer,li,li,link,type,serializer,schema,compatibility,is,incompatible,the,registered,serializer,is,incompatible,link,current,schema,serializer,can,no,longer,return,a,serializer,for,the,state,and,therefore,this,provider,shouldn,t,be,used,anymore,li,ul,return,the,schema,compatibility,of,the,new,registered,serializer,with,respect,to,the,previous,serializer;nonnull,public,abstract,type,serializer,schema,compatibility,t,register,new,serializer,for,restored,state,type,serializer,t,new,serializer
