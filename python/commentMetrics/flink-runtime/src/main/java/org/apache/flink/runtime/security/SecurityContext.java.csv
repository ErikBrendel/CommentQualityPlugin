# id;timestamp;commentText;codeText;commentWords;codeWords
SecurityContext -> private static void populateSystemSecurityProperties(Configuration configuration);1469059713;This method configures some of the system properties that are require for ZK and Kafka SASL authentication_See: https://github.com/apache/kafka/blob/0.9.0/clients/src/main/java/org/apache/kafka/common/security/kerberos/Login.java#L289_See: https://github.com/sgroschupf/zkclient/blob/master/src/main/java/org/I0Itec/zkclient/ZkClient.java#L900_In this method, setting java.security.auth.login.config configuration is configured only to support ZK and_Kafka current code behavior.;private static void populateSystemSecurityProperties(Configuration configuration) {__		_		_		System.setProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG, "")___		if(configuration == null) {_			return__		}__		boolean disableSaslClient = configuration.getBoolean(ConfigConstants.ZOOKEEPER_SASL_DISABLE,_				ConfigConstants.DEFAULT_ZOOKEEPER_SASL_DISABLE)__		if(disableSaslClient) {_			LOG.info("SASL client auth for ZK will be disabled")__			_			System.setProperty(ZOOKEEPER_SASL_CLIENT,"false")__			return__		}__		String baseDir = configuration.getString(ConfigConstants.FLINK_BASE_DIR_PATH_KEY, null)__		if(baseDir == null) {_			String message = "SASL auth is enabled for ZK but unable to locate pseudo Jaas config " +_					"since " + ConfigConstants.FLINK_BASE_DIR_PATH_KEY + " is not provided"__			LOG.error(message)__			throw new IllegalConfigurationException(message)__		}__		File f = new File(baseDir)__		if(!f.exists() || !f.isDirectory()) {_			LOG.error("Invalid flink base directory {} configuration provided", baseDir)__			throw new IllegalConfigurationException("Invalid flink base directory configuration provided")__		}__		File jaasConfigFile = new File(f, JAAS_CONF_FILENAME)___		if (!jaasConfigFile.exists() || !jaasConfigFile.isFile()) {__			_			File confDir = new File(f, "conf")__			if(!confDir.exists() || !confDir.isDirectory()) {_				LOG.error("Could not locate " + JAAS_CONF_FILENAME)__				throw new IllegalConfigurationException("Could not locate " + JAAS_CONF_FILENAME)__			}__			jaasConfigFile = new File(confDir, JAAS_CONF_FILENAME)___			if (!jaasConfigFile.exists() || !jaasConfigFile.isFile()) {_				LOG.error("Could not locate " + JAAS_CONF_FILENAME)__				throw new IllegalConfigurationException("Could not locate " + JAAS_CONF_FILENAME)__			}_		}__		LOG.info("Enabling {} property with pseudo JAAS config file: {}",_				JAVA_SECURITY_AUTH_LOGIN_CONFIG, jaasConfigFile)___		_		_		System.setProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG, jaasConfigFile.getAbsolutePath())__		System.setProperty(ZOOKEEPER_SASL_CLIENT,"true")___		String zkSaslServiceName = configuration.getString(ConfigConstants.ZOOKEEPER_SASL_SERVICE_NAME, null)__		if(!StringUtils.isBlank(zkSaslServiceName)) {_			LOG.info("ZK SASL service name: {} is provided in the configuration", zkSaslServiceName)__			System.setProperty(ZOOKEEPER_SASL_CLIENT_USERNAME,zkSaslServiceName)__		}__	};this,method,configures,some,of,the,system,properties,that,are,require,for,zk,and,kafka,sasl,authentication,see,https,github,com,apache,kafka,blob,0,9,0,clients,src,main,java,org,apache,kafka,common,security,kerberos,login,java,l289,see,https,github,com,sgroschupf,zkclient,blob,master,src,main,java,org,i0itec,zkclient,zk,client,java,l900,in,this,method,setting,java,security,auth,login,config,configuration,is,configured,only,to,support,zk,and,kafka,current,code,behavior;private,static,void,populate,system,security,properties,configuration,configuration,system,set,property,if,configuration,null,return,boolean,disable,sasl,client,configuration,get,boolean,config,constants,config,constants,if,disable,sasl,client,log,info,sasl,client,auth,for,zk,will,be,disabled,system,set,property,false,return,string,base,dir,configuration,get,string,config,constants,null,if,base,dir,null,string,message,sasl,auth,is,enabled,for,zk,but,unable,to,locate,pseudo,jaas,config,since,config,constants,is,not,provided,log,error,message,throw,new,illegal,configuration,exception,message,file,f,new,file,base,dir,if,f,exists,f,is,directory,log,error,invalid,flink,base,directory,configuration,provided,base,dir,throw,new,illegal,configuration,exception,invalid,flink,base,directory,configuration,provided,file,jaas,config,file,new,file,f,if,jaas,config,file,exists,jaas,config,file,is,file,file,conf,dir,new,file,f,conf,if,conf,dir,exists,conf,dir,is,directory,log,error,could,not,locate,throw,new,illegal,configuration,exception,could,not,locate,jaas,config,file,new,file,conf,dir,if,jaas,config,file,exists,jaas,config,file,is,file,log,error,could,not,locate,throw,new,illegal,configuration,exception,could,not,locate,log,info,enabling,property,with,pseudo,jaas,config,file,jaas,config,file,system,set,property,jaas,config,file,get,absolute,path,system,set,property,true,string,zk,sasl,service,name,configuration,get,string,config,constants,null,if,string,utils,is,blank,zk,sasl,service,name,log,info,zk,sasl,service,name,is,provided,in,the,configuration,zk,sasl,service,name,system,set,property,zk,sasl,service,name
SecurityContext -> private static void populateSystemSecurityProperties(Configuration configuration);1474378895;This method configures some of the system properties that are require for ZK and Kafka SASL authentication_See: https://github.com/apache/kafka/blob/0.9.0/clients/src/main/java/org/apache/kafka/common/security/kerberos/Login.java#L289_See: https://github.com/sgroschupf/zkclient/blob/master/src/main/java/org/I0Itec/zkclient/ZkClient.java#L900_In this method, setting java.security.auth.login.config configuration is configured only to support ZK and_Kafka current code behavior.;private static void populateSystemSecurityProperties(Configuration configuration) {_		Preconditions.checkNotNull(configuration, "The supplied configuation was null")___		_		_		System.setProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG, "")___		boolean disableSaslClient = configuration.getBoolean(ConfigConstants.ZOOKEEPER_SASL_DISABLE,_				ConfigConstants.DEFAULT_ZOOKEEPER_SASL_DISABLE)__		if(disableSaslClient) {_			LOG.info("SASL client auth for ZK will be disabled")__			_			System.setProperty(ZOOKEEPER_SASL_CLIENT,"false")__			return__		}__		_		final File jaasConfFile__		try {_			Path jaasConfPath = Files.createTempFile(JAAS_CONF_FILENAME, "")__			InputStream jaasConfStream = SecurityContext.class.getClassLoader().getResourceAsStream(JAAS_CONF_FILENAME)__			Files.copy(jaasConfStream, jaasConfPath, StandardCopyOption.REPLACE_EXISTING)__			jaasConfFile = jaasConfPath.toFile()__			jaasConfFile.deleteOnExit()__		} catch (IOException e) {_			throw new RuntimeException("SASL auth is enabled for ZK but unable to " +_				"locate pseudo Jaas config provided with Flink", e)__		}__		LOG.info("Enabling {} property with pseudo JAAS config file: {}",_				JAVA_SECURITY_AUTH_LOGIN_CONFIG, jaasConfFile.getAbsolutePath())___		_		_		System.setProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG, jaasConfFile.getAbsolutePath())__		System.setProperty(ZOOKEEPER_SASL_CLIENT, "true")___		String zkSaslServiceName = configuration.getString(ConfigConstants.ZOOKEEPER_SASL_SERVICE_NAME, null)__		if(!StringUtils.isBlank(zkSaslServiceName)) {_			LOG.info("ZK SASL service name: {} is provided in the configuration", zkSaslServiceName)__			System.setProperty(ZOOKEEPER_SASL_CLIENT_USERNAME,zkSaslServiceName)__		}__	};this,method,configures,some,of,the,system,properties,that,are,require,for,zk,and,kafka,sasl,authentication,see,https,github,com,apache,kafka,blob,0,9,0,clients,src,main,java,org,apache,kafka,common,security,kerberos,login,java,l289,see,https,github,com,sgroschupf,zkclient,blob,master,src,main,java,org,i0itec,zkclient,zk,client,java,l900,in,this,method,setting,java,security,auth,login,config,configuration,is,configured,only,to,support,zk,and,kafka,current,code,behavior;private,static,void,populate,system,security,properties,configuration,configuration,preconditions,check,not,null,configuration,the,supplied,configuation,was,null,system,set,property,boolean,disable,sasl,client,configuration,get,boolean,config,constants,config,constants,if,disable,sasl,client,log,info,sasl,client,auth,for,zk,will,be,disabled,system,set,property,false,return,final,file,jaas,conf,file,try,path,jaas,conf,path,files,create,temp,file,input,stream,jaas,conf,stream,security,context,class,get,class,loader,get,resource,as,stream,files,copy,jaas,conf,stream,jaas,conf,path,standard,copy,option,jaas,conf,file,jaas,conf,path,to,file,jaas,conf,file,delete,on,exit,catch,ioexception,e,throw,new,runtime,exception,sasl,auth,is,enabled,for,zk,but,unable,to,locate,pseudo,jaas,config,provided,with,flink,e,log,info,enabling,property,with,pseudo,jaas,config,file,jaas,conf,file,get,absolute,path,system,set,property,jaas,conf,file,get,absolute,path,system,set,property,true,string,zk,sasl,service,name,configuration,get,string,config,constants,null,if,string,utils,is,blank,zk,sasl,service,name,log,info,zk,sasl,service,name,is,provided,in,the,configuration,zk,sasl,service,name,system,set,property,zk,sasl,service,name
SecurityContext -> private static void populateSystemSecurityProperties(Configuration configuration);1475883662;This method configures some of the system properties that are require for ZK and Kafka SASL authentication_See: https://github.com/apache/kafka/blob/0.9.0/clients/src/main/java/org/apache/kafka/common/security/kerberos/Login.java#L289_See: https://github.com/sgroschupf/zkclient/blob/master/src/main/java/org/I0Itec/zkclient/ZkClient.java#L900_In this method, setting java.security.auth.login.config configuration is configured only to support ZK and_Kafka current code behavior.;private static void populateSystemSecurityProperties(Configuration configuration) {_		Preconditions.checkNotNull(configuration, "The supplied configuation was null")___		_		_		System.setProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG, "")___		boolean disableSaslClient = configuration.getBoolean(HighAvailabilityOptions.ZOOKEEPER_SASL_DISABLE)___		if (disableSaslClient) {_			LOG.info("SASL client auth for ZK will be disabled")__			_			System.setProperty(ZOOKEEPER_SASL_CLIENT,"false")__			return__		}__		_		final File jaasConfFile__		try {_			Path jaasConfPath = Files.createTempFile(JAAS_CONF_FILENAME, "")__			InputStream jaasConfStream = SecurityContext.class.getClassLoader().getResourceAsStream(JAAS_CONF_FILENAME)__			Files.copy(jaasConfStream, jaasConfPath, StandardCopyOption.REPLACE_EXISTING)__			jaasConfFile = jaasConfPath.toFile()__			jaasConfFile.deleteOnExit()__		} catch (IOException e) {_			throw new RuntimeException("SASL auth is enabled for ZK but unable to " +_				"locate pseudo Jaas config provided with Flink", e)__		}__		LOG.info("Enabling {} property with pseudo JAAS config file: {}",_				JAVA_SECURITY_AUTH_LOGIN_CONFIG, jaasConfFile.getAbsolutePath())___		_		_		System.setProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG, jaasConfFile.getAbsolutePath())__		System.setProperty(ZOOKEEPER_SASL_CLIENT, "true")___		String zkSaslServiceName = configuration.getValue(HighAvailabilityOptions.ZOOKEEPER_SASL_SERVICE_NAME)__		if (!StringUtils.isBlank(zkSaslServiceName)) {_			LOG.info("ZK SASL service name: {} is provided in the configuration", zkSaslServiceName)__			System.setProperty(ZOOKEEPER_SASL_CLIENT_USERNAME,zkSaslServiceName)__		}__	};this,method,configures,some,of,the,system,properties,that,are,require,for,zk,and,kafka,sasl,authentication,see,https,github,com,apache,kafka,blob,0,9,0,clients,src,main,java,org,apache,kafka,common,security,kerberos,login,java,l289,see,https,github,com,sgroschupf,zkclient,blob,master,src,main,java,org,i0itec,zkclient,zk,client,java,l900,in,this,method,setting,java,security,auth,login,config,configuration,is,configured,only,to,support,zk,and,kafka,current,code,behavior;private,static,void,populate,system,security,properties,configuration,configuration,preconditions,check,not,null,configuration,the,supplied,configuation,was,null,system,set,property,boolean,disable,sasl,client,configuration,get,boolean,high,availability,options,if,disable,sasl,client,log,info,sasl,client,auth,for,zk,will,be,disabled,system,set,property,false,return,final,file,jaas,conf,file,try,path,jaas,conf,path,files,create,temp,file,input,stream,jaas,conf,stream,security,context,class,get,class,loader,get,resource,as,stream,files,copy,jaas,conf,stream,jaas,conf,path,standard,copy,option,jaas,conf,file,jaas,conf,path,to,file,jaas,conf,file,delete,on,exit,catch,ioexception,e,throw,new,runtime,exception,sasl,auth,is,enabled,for,zk,but,unable,to,locate,pseudo,jaas,config,provided,with,flink,e,log,info,enabling,property,with,pseudo,jaas,config,file,jaas,conf,file,get,absolute,path,system,set,property,jaas,conf,file,get,absolute,path,system,set,property,true,string,zk,sasl,service,name,configuration,get,value,high,availability,options,if,string,utils,is,blank,zk,sasl,service,name,log,info,zk,sasl,service,name,is,provided,in,the,configuration,zk,sasl,service,name,system,set,property,zk,sasl,service,name
SecurityContext -> private static void populateSystemSecurityProperties(Configuration configuration);1476838040;This method configures some of the system properties that are require for ZK and Kafka SASL authentication_See: https://github.com/apache/kafka/blob/0.9.0/clients/src/main/java/org/apache/kafka/common/security/kerberos/Login.java#L289_See: https://github.com/sgroschupf/zkclient/blob/master/src/main/java/org/I0Itec/zkclient/ZkClient.java#L900_In this method, setting java.security.auth.login.config configuration is configured only to support ZK and_Kafka current code behavior.;private static void populateSystemSecurityProperties(Configuration configuration) {_		Preconditions.checkNotNull(configuration, "The supplied configuation was null")___		_		_		System.setProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG, "")___		boolean disableSaslClient = configuration.getBoolean(HighAvailabilityOptions.ZOOKEEPER_SASL_DISABLE)___		if (disableSaslClient) {_			LOG.info("SASL client auth for ZK will be disabled")__			_			System.setProperty(ZOOKEEPER_SASL_CLIENT,"false")__			return__		}__		_		final File jaasConfFile__		try {_			Path jaasConfPath = Files.createTempFile(JAAS_CONF_FILENAME, "")__			InputStream jaasConfStream = SecurityContext.class.getClassLoader().getResourceAsStream(JAAS_CONF_FILENAME)__			Files.copy(jaasConfStream, jaasConfPath, StandardCopyOption.REPLACE_EXISTING)__			jaasConfFile = jaasConfPath.toFile()__			jaasConfFile.deleteOnExit()__			jaasConfStream.close()__		} catch (IOException e) {_			throw new RuntimeException("SASL auth is enabled for ZK but unable to " +_				"locate pseudo Jaas config provided with Flink", e)__		}__		LOG.info("Enabling {} property with pseudo JAAS config file: {}",_				JAVA_SECURITY_AUTH_LOGIN_CONFIG, jaasConfFile.getAbsolutePath())___		_		_		System.setProperty(JAVA_SECURITY_AUTH_LOGIN_CONFIG, jaasConfFile.getAbsolutePath())__		System.setProperty(ZOOKEEPER_SASL_CLIENT, "true")___		String zkSaslServiceName = configuration.getValue(HighAvailabilityOptions.ZOOKEEPER_SASL_SERVICE_NAME)__		if (!StringUtils.isBlank(zkSaslServiceName)) {_			LOG.info("ZK SASL service name: {} is provided in the configuration", zkSaslServiceName)__			System.setProperty(ZOOKEEPER_SASL_CLIENT_USERNAME,zkSaslServiceName)__		}__	};this,method,configures,some,of,the,system,properties,that,are,require,for,zk,and,kafka,sasl,authentication,see,https,github,com,apache,kafka,blob,0,9,0,clients,src,main,java,org,apache,kafka,common,security,kerberos,login,java,l289,see,https,github,com,sgroschupf,zkclient,blob,master,src,main,java,org,i0itec,zkclient,zk,client,java,l900,in,this,method,setting,java,security,auth,login,config,configuration,is,configured,only,to,support,zk,and,kafka,current,code,behavior;private,static,void,populate,system,security,properties,configuration,configuration,preconditions,check,not,null,configuration,the,supplied,configuation,was,null,system,set,property,boolean,disable,sasl,client,configuration,get,boolean,high,availability,options,if,disable,sasl,client,log,info,sasl,client,auth,for,zk,will,be,disabled,system,set,property,false,return,final,file,jaas,conf,file,try,path,jaas,conf,path,files,create,temp,file,input,stream,jaas,conf,stream,security,context,class,get,class,loader,get,resource,as,stream,files,copy,jaas,conf,stream,jaas,conf,path,standard,copy,option,jaas,conf,file,jaas,conf,path,to,file,jaas,conf,file,delete,on,exit,jaas,conf,stream,close,catch,ioexception,e,throw,new,runtime,exception,sasl,auth,is,enabled,for,zk,but,unable,to,locate,pseudo,jaas,config,provided,with,flink,e,log,info,enabling,property,with,pseudo,jaas,config,file,jaas,conf,file,get,absolute,path,system,set,property,jaas,conf,file,get,absolute,path,system,set,property,true,string,zk,sasl,service,name,configuration,get,value,high,availability,options,if,string,utils,is,blank,zk,sasl,service,name,log,info,zk,sasl,service,name,is,provided,in,the,configuration,zk,sasl,service,name,system,set,property,zk,sasl,service,name
