# id;timestamp;commentText;codeText;commentWords;codeWords
AkkaInvocationHandler -> private static Timeout extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Timeout defaultTimeout);1470847346;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Timeout extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Timeout defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof FiniteDuration) {_						return new Timeout((FiniteDuration) args[i])__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							FiniteDuration.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,timeout,extract,rpc,timeout,annotation,parameter,annotations,object,args,timeout,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,finite,duration,return,new,timeout,finite,duration,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,finite,duration,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Timeout extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Timeout defaultTimeout);1470932005;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Timeout extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Timeout defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof FiniteDuration) {_						return new Timeout((FiniteDuration) args[i])__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							FiniteDuration.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,timeout,extract,rpc,timeout,annotation,parameter,annotations,object,args,timeout,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,finite,duration,return,new,timeout,finite,duration,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,finite,duration,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Timeout extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Timeout defaultTimeout);1470935448;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Timeout extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Timeout defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof FiniteDuration) {_						return new Timeout((FiniteDuration) args[i])__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							FiniteDuration.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,timeout,extract,rpc,timeout,annotation,parameter,annotations,object,args,timeout,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,finite,duration,return,new,timeout,finite,duration,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,finite,duration,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Timeout extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Timeout defaultTimeout);1470990750;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Timeout extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Timeout defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof FiniteDuration) {_						return new Timeout((FiniteDuration) args[i])__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							FiniteDuration.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,timeout,extract,rpc,timeout,annotation,parameter,annotations,object,args,timeout,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,finite,duration,return,new,timeout,finite,duration,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,finite,duration,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Timeout extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Timeout defaultTimeout);1471530887;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Timeout extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Timeout defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof FiniteDuration) {_						return new Timeout((FiniteDuration) args[i])__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							FiniteDuration.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,timeout,extract,rpc,timeout,annotation,parameter,annotations,object,args,timeout,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,finite,duration,return,new,timeout,finite,duration,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,finite,duration,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1474453995;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1474471581;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1474993062;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1489590578;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1492618903;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1501580028;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1502196227;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1503500935;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1506976152;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1515516637;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1518716619;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1539833178;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1548316130;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout);1549533702;Extracts the {@link RpcTimeout} annotated rpc timeout value from the list of given method_arguments. If no {@link RpcTimeout} annotated parameter could be found, then the default_timeout is returned.__@param parameterAnnotations Parameter annotations_@param args Array of arguments_@param defaultTimeout Default timeout to return if no {@link RpcTimeout} annotated parameter_has been found_@return Timeout extracted from the array of arguments or the default timeout;private static Time extractRpcTimeout(Annotation[][] parameterAnnotations, Object[] args, Time defaultTimeout) {_		if (args != null) {_			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			for (int i = 0_ i < parameterAnnotations.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					if (args[i] instanceof Time) {_						return (Time) args[i]__					} else {_						throw new RuntimeException("The rpc timeout parameter must be of type " +_							Time.class.getName() + ". The type " + args[i].getClass().getName() +_							" is not supported.")__					}_				}_			}_		}__		return defaultTimeout__	};extracts,the,link,rpc,timeout,annotated,rpc,timeout,value,from,the,list,of,given,method,arguments,if,no,link,rpc,timeout,annotated,parameter,could,be,found,then,the,default,timeout,is,returned,param,parameter,annotations,parameter,annotations,param,args,array,of,arguments,param,default,timeout,default,timeout,to,return,if,no,link,rpc,timeout,annotated,parameter,has,been,found,return,timeout,extracted,from,the,array,of,arguments,or,the,default,timeout;private,static,time,extract,rpc,timeout,annotation,parameter,annotations,object,args,time,default,timeout,if,args,null,preconditions,check,argument,parameter,annotations,length,args,length,for,int,i,0,i,parameter,annotations,length,i,if,is,rpc,timeout,parameter,annotations,i,if,args,i,instanceof,time,return,time,args,i,else,throw,new,runtime,exception,the,rpc,timeout,parameter,must,be,of,type,time,class,get,name,the,type,args,i,get,class,get,name,is,not,supported,return,default,timeout
AkkaInvocationHandler -> protected RpcInvocation createRpcInvocationMessage( 			final String methodName, 			final Class<?>[] parameterTypes, 			final Object[] args) throws IOException;1503500935;Create the RpcInvocation message for the given RPC.__@param methodName of the RPC_@param parameterTypes of the RPC_@param args of the RPC_@return RpcInvocation message which encapsulates the RPC details_@throws IOException if we cannot serialize the RPC invocation parameters;protected RpcInvocation createRpcInvocationMessage(_			final String methodName,_			final Class<?>[] parameterTypes,_			final Object[] args) throws IOException {_		final RpcInvocation rpcInvocation___		if (isLocal) {_			rpcInvocation = new LocalRpcInvocation(_				methodName,_				parameterTypes,_				args)__		} else {_			try {_				RemoteRpcInvocation remoteRpcInvocation = new RemoteRpcInvocation(_					methodName,_					parameterTypes,_					args)___				if (remoteRpcInvocation.getSize() > maximumFramesize) {_					throw new IOException("The rpc invocation size exceeds the maximum akka framesize.")__				} else {_					rpcInvocation = remoteRpcInvocation__				}_			} catch (IOException e) {_				LOG.warn("Could not create remote rpc invocation message. Failing rpc invocation because...", e)__				throw e__			}_		}__		return rpcInvocation__	};create,the,rpc,invocation,message,for,the,given,rpc,param,method,name,of,the,rpc,param,parameter,types,of,the,rpc,param,args,of,the,rpc,return,rpc,invocation,message,which,encapsulates,the,rpc,details,throws,ioexception,if,we,cannot,serialize,the,rpc,invocation,parameters;protected,rpc,invocation,create,rpc,invocation,message,final,string,method,name,final,class,parameter,types,final,object,args,throws,ioexception,final,rpc,invocation,rpc,invocation,if,is,local,rpc,invocation,new,local,rpc,invocation,method,name,parameter,types,args,else,try,remote,rpc,invocation,remote,rpc,invocation,new,remote,rpc,invocation,method,name,parameter,types,args,if,remote,rpc,invocation,get,size,maximum,framesize,throw,new,ioexception,the,rpc,invocation,size,exceeds,the,maximum,akka,framesize,else,rpc,invocation,remote,rpc,invocation,catch,ioexception,e,log,warn,could,not,create,remote,rpc,invocation,message,failing,rpc,invocation,because,e,throw,e,return,rpc,invocation
AkkaInvocationHandler -> protected RpcInvocation createRpcInvocationMessage( 			final String methodName, 			final Class<?>[] parameterTypes, 			final Object[] args) throws IOException;1506976152;Create the RpcInvocation message for the given RPC.__@param methodName of the RPC_@param parameterTypes of the RPC_@param args of the RPC_@return RpcInvocation message which encapsulates the RPC details_@throws IOException if we cannot serialize the RPC invocation parameters;protected RpcInvocation createRpcInvocationMessage(_			final String methodName,_			final Class<?>[] parameterTypes,_			final Object[] args) throws IOException {_		final RpcInvocation rpcInvocation___		if (isLocal) {_			rpcInvocation = new LocalRpcInvocation(_				methodName,_				parameterTypes,_				args)__		} else {_			try {_				RemoteRpcInvocation remoteRpcInvocation = new RemoteRpcInvocation(_					methodName,_					parameterTypes,_					args)___				if (remoteRpcInvocation.getSize() > maximumFramesize) {_					throw new IOException("The rpc invocation size exceeds the maximum akka framesize.")__				} else {_					rpcInvocation = remoteRpcInvocation__				}_			} catch (IOException e) {_				LOG.warn("Could not create remote rpc invocation message. Failing rpc invocation because...", e)__				throw e__			}_		}__		return rpcInvocation__	};create,the,rpc,invocation,message,for,the,given,rpc,param,method,name,of,the,rpc,param,parameter,types,of,the,rpc,param,args,of,the,rpc,return,rpc,invocation,message,which,encapsulates,the,rpc,details,throws,ioexception,if,we,cannot,serialize,the,rpc,invocation,parameters;protected,rpc,invocation,create,rpc,invocation,message,final,string,method,name,final,class,parameter,types,final,object,args,throws,ioexception,final,rpc,invocation,rpc,invocation,if,is,local,rpc,invocation,new,local,rpc,invocation,method,name,parameter,types,args,else,try,remote,rpc,invocation,remote,rpc,invocation,new,remote,rpc,invocation,method,name,parameter,types,args,if,remote,rpc,invocation,get,size,maximum,framesize,throw,new,ioexception,the,rpc,invocation,size,exceeds,the,maximum,akka,framesize,else,rpc,invocation,remote,rpc,invocation,catch,ioexception,e,log,warn,could,not,create,remote,rpc,invocation,message,failing,rpc,invocation,because,e,throw,e,return,rpc,invocation
AkkaInvocationHandler -> protected RpcInvocation createRpcInvocationMessage( 			final String methodName, 			final Class<?>[] parameterTypes, 			final Object[] args) throws IOException;1515516637;Create the RpcInvocation message for the given RPC.__@param methodName of the RPC_@param parameterTypes of the RPC_@param args of the RPC_@return RpcInvocation message which encapsulates the RPC details_@throws IOException if we cannot serialize the RPC invocation parameters;protected RpcInvocation createRpcInvocationMessage(_			final String methodName,_			final Class<?>[] parameterTypes,_			final Object[] args) throws IOException {_		final RpcInvocation rpcInvocation___		if (isLocal) {_			rpcInvocation = new LocalRpcInvocation(_				methodName,_				parameterTypes,_				args)__		} else {_			try {_				RemoteRpcInvocation remoteRpcInvocation = new RemoteRpcInvocation(_					methodName,_					parameterTypes,_					args)___				if (remoteRpcInvocation.getSize() > maximumFramesize) {_					throw new IOException("The rpc invocation size exceeds the maximum akka framesize.")__				} else {_					rpcInvocation = remoteRpcInvocation__				}_			} catch (IOException e) {_				LOG.warn("Could not create remote rpc invocation message. Failing rpc invocation because...", e)__				throw e__			}_		}__		return rpcInvocation__	};create,the,rpc,invocation,message,for,the,given,rpc,param,method,name,of,the,rpc,param,parameter,types,of,the,rpc,param,args,of,the,rpc,return,rpc,invocation,message,which,encapsulates,the,rpc,details,throws,ioexception,if,we,cannot,serialize,the,rpc,invocation,parameters;protected,rpc,invocation,create,rpc,invocation,message,final,string,method,name,final,class,parameter,types,final,object,args,throws,ioexception,final,rpc,invocation,rpc,invocation,if,is,local,rpc,invocation,new,local,rpc,invocation,method,name,parameter,types,args,else,try,remote,rpc,invocation,remote,rpc,invocation,new,remote,rpc,invocation,method,name,parameter,types,args,if,remote,rpc,invocation,get,size,maximum,framesize,throw,new,ioexception,the,rpc,invocation,size,exceeds,the,maximum,akka,framesize,else,rpc,invocation,remote,rpc,invocation,catch,ioexception,e,log,warn,could,not,create,remote,rpc,invocation,message,failing,rpc,invocation,because,e,throw,e,return,rpc,invocation
AkkaInvocationHandler -> protected RpcInvocation createRpcInvocationMessage( 			final String methodName, 			final Class<?>[] parameterTypes, 			final Object[] args) throws IOException;1518716619;Create the RpcInvocation message for the given RPC.__@param methodName of the RPC_@param parameterTypes of the RPC_@param args of the RPC_@return RpcInvocation message which encapsulates the RPC details_@throws IOException if we cannot serialize the RPC invocation parameters;protected RpcInvocation createRpcInvocationMessage(_			final String methodName,_			final Class<?>[] parameterTypes,_			final Object[] args) throws IOException {_		final RpcInvocation rpcInvocation___		if (isLocal) {_			rpcInvocation = new LocalRpcInvocation(_				methodName,_				parameterTypes,_				args)__		} else {_			try {_				RemoteRpcInvocation remoteRpcInvocation = new RemoteRpcInvocation(_					methodName,_					parameterTypes,_					args)___				if (remoteRpcInvocation.getSize() > maximumFramesize) {_					throw new IOException("The rpc invocation size exceeds the maximum akka framesize.")__				} else {_					rpcInvocation = remoteRpcInvocation__				}_			} catch (IOException e) {_				LOG.warn("Could not create remote rpc invocation message. Failing rpc invocation because...", e)__				throw e__			}_		}__		return rpcInvocation__	};create,the,rpc,invocation,message,for,the,given,rpc,param,method,name,of,the,rpc,param,parameter,types,of,the,rpc,param,args,of,the,rpc,return,rpc,invocation,message,which,encapsulates,the,rpc,details,throws,ioexception,if,we,cannot,serialize,the,rpc,invocation,parameters;protected,rpc,invocation,create,rpc,invocation,message,final,string,method,name,final,class,parameter,types,final,object,args,throws,ioexception,final,rpc,invocation,rpc,invocation,if,is,local,rpc,invocation,new,local,rpc,invocation,method,name,parameter,types,args,else,try,remote,rpc,invocation,remote,rpc,invocation,new,remote,rpc,invocation,method,name,parameter,types,args,if,remote,rpc,invocation,get,size,maximum,framesize,throw,new,ioexception,the,rpc,invocation,size,exceeds,the,maximum,akka,framesize,else,rpc,invocation,remote,rpc,invocation,catch,ioexception,e,log,warn,could,not,create,remote,rpc,invocation,message,failing,rpc,invocation,because,e,throw,e,return,rpc,invocation
AkkaInvocationHandler -> protected RpcInvocation createRpcInvocationMessage( 			final String methodName, 			final Class<?>[] parameterTypes, 			final Object[] args) throws IOException;1539833178;Create the RpcInvocation message for the given RPC.__@param methodName of the RPC_@param parameterTypes of the RPC_@param args of the RPC_@return RpcInvocation message which encapsulates the RPC details_@throws IOException if we cannot serialize the RPC invocation parameters;protected RpcInvocation createRpcInvocationMessage(_			final String methodName,_			final Class<?>[] parameterTypes,_			final Object[] args) throws IOException {_		final RpcInvocation rpcInvocation___		if (isLocal) {_			rpcInvocation = new LocalRpcInvocation(_				methodName,_				parameterTypes,_				args)__		} else {_			try {_				RemoteRpcInvocation remoteRpcInvocation = new RemoteRpcInvocation(_					methodName,_					parameterTypes,_					args)___				if (remoteRpcInvocation.getSize() > maximumFramesize) {_					throw new IOException("The rpc invocation size exceeds the maximum akka framesize.")__				} else {_					rpcInvocation = remoteRpcInvocation__				}_			} catch (IOException e) {_				LOG.warn("Could not create remote rpc invocation message. Failing rpc invocation because...", e)__				throw e__			}_		}__		return rpcInvocation__	};create,the,rpc,invocation,message,for,the,given,rpc,param,method,name,of,the,rpc,param,parameter,types,of,the,rpc,param,args,of,the,rpc,return,rpc,invocation,message,which,encapsulates,the,rpc,details,throws,ioexception,if,we,cannot,serialize,the,rpc,invocation,parameters;protected,rpc,invocation,create,rpc,invocation,message,final,string,method,name,final,class,parameter,types,final,object,args,throws,ioexception,final,rpc,invocation,rpc,invocation,if,is,local,rpc,invocation,new,local,rpc,invocation,method,name,parameter,types,args,else,try,remote,rpc,invocation,remote,rpc,invocation,new,remote,rpc,invocation,method,name,parameter,types,args,if,remote,rpc,invocation,get,size,maximum,framesize,throw,new,ioexception,the,rpc,invocation,size,exceeds,the,maximum,akka,framesize,else,rpc,invocation,remote,rpc,invocation,catch,ioexception,e,log,warn,could,not,create,remote,rpc,invocation,message,failing,rpc,invocation,because,e,throw,e,return,rpc,invocation
AkkaInvocationHandler -> protected RpcInvocation createRpcInvocationMessage( 			final String methodName, 			final Class<?>[] parameterTypes, 			final Object[] args) throws IOException;1548316130;Create the RpcInvocation message for the given RPC.__@param methodName of the RPC_@param parameterTypes of the RPC_@param args of the RPC_@return RpcInvocation message which encapsulates the RPC details_@throws IOException if we cannot serialize the RPC invocation parameters;protected RpcInvocation createRpcInvocationMessage(_			final String methodName,_			final Class<?>[] parameterTypes,_			final Object[] args) throws IOException {_		final RpcInvocation rpcInvocation___		if (isLocal) {_			rpcInvocation = new LocalRpcInvocation(_				methodName,_				parameterTypes,_				args)__		} else {_			try {_				RemoteRpcInvocation remoteRpcInvocation = new RemoteRpcInvocation(_					methodName,_					parameterTypes,_					args)___				if (remoteRpcInvocation.getSize() > maximumFramesize) {_					throw new IOException("The rpc invocation size exceeds the maximum akka framesize.")__				} else {_					rpcInvocation = remoteRpcInvocation__				}_			} catch (IOException e) {_				LOG.warn("Could not create remote rpc invocation message. Failing rpc invocation because...", e)__				throw e__			}_		}__		return rpcInvocation__	};create,the,rpc,invocation,message,for,the,given,rpc,param,method,name,of,the,rpc,param,parameter,types,of,the,rpc,param,args,of,the,rpc,return,rpc,invocation,message,which,encapsulates,the,rpc,details,throws,ioexception,if,we,cannot,serialize,the,rpc,invocation,parameters;protected,rpc,invocation,create,rpc,invocation,message,final,string,method,name,final,class,parameter,types,final,object,args,throws,ioexception,final,rpc,invocation,rpc,invocation,if,is,local,rpc,invocation,new,local,rpc,invocation,method,name,parameter,types,args,else,try,remote,rpc,invocation,remote,rpc,invocation,new,remote,rpc,invocation,method,name,parameter,types,args,if,remote,rpc,invocation,get,size,maximum,framesize,throw,new,ioexception,the,rpc,invocation,size,exceeds,the,maximum,akka,framesize,else,rpc,invocation,remote,rpc,invocation,catch,ioexception,e,log,warn,could,not,create,remote,rpc,invocation,message,failing,rpc,invocation,because,e,throw,e,return,rpc,invocation
AkkaInvocationHandler -> protected RpcInvocation createRpcInvocationMessage( 			final String methodName, 			final Class<?>[] parameterTypes, 			final Object[] args) throws IOException;1549533702;Create the RpcInvocation message for the given RPC.__@param methodName of the RPC_@param parameterTypes of the RPC_@param args of the RPC_@return RpcInvocation message which encapsulates the RPC details_@throws IOException if we cannot serialize the RPC invocation parameters;protected RpcInvocation createRpcInvocationMessage(_			final String methodName,_			final Class<?>[] parameterTypes,_			final Object[] args) throws IOException {_		final RpcInvocation rpcInvocation___		if (isLocal) {_			rpcInvocation = new LocalRpcInvocation(_				methodName,_				parameterTypes,_				args)__		} else {_			try {_				RemoteRpcInvocation remoteRpcInvocation = new RemoteRpcInvocation(_					methodName,_					parameterTypes,_					args)___				if (remoteRpcInvocation.getSize() > maximumFramesize) {_					throw new IOException("The rpc invocation size exceeds the maximum akka framesize.")__				} else {_					rpcInvocation = remoteRpcInvocation__				}_			} catch (IOException e) {_				LOG.warn("Could not create remote rpc invocation message. Failing rpc invocation because...", e)__				throw e__			}_		}__		return rpcInvocation__	};create,the,rpc,invocation,message,for,the,given,rpc,param,method,name,of,the,rpc,param,parameter,types,of,the,rpc,param,args,of,the,rpc,return,rpc,invocation,message,which,encapsulates,the,rpc,details,throws,ioexception,if,we,cannot,serialize,the,rpc,invocation,parameters;protected,rpc,invocation,create,rpc,invocation,message,final,string,method,name,final,class,parameter,types,final,object,args,throws,ioexception,final,rpc,invocation,rpc,invocation,if,is,local,rpc,invocation,new,local,rpc,invocation,method,name,parameter,types,args,else,try,remote,rpc,invocation,remote,rpc,invocation,new,remote,rpc,invocation,method,name,parameter,types,args,if,remote,rpc,invocation,get,size,maximum,framesize,throw,new,ioexception,the,rpc,invocation,size,exceeds,the,maximum,akka,framesize,else,rpc,invocation,remote,rpc,invocation,catch,ioexception,e,log,warn,could,not,create,remote,rpc,invocation,message,failing,rpc,invocation,because,e,throw,e,return,rpc,invocation
AkkaInvocationHandler -> protected void tell(Object message);1503500935;Sends the message to the RPC endpoint.__@param message to send to the RPC endpoint.;protected void tell(Object message) {_		rpcEndpoint.tell(message, ActorRef.noSender())__	};sends,the,message,to,the,rpc,endpoint,param,message,to,send,to,the,rpc,endpoint;protected,void,tell,object,message,rpc,endpoint,tell,message,actor,ref,no,sender
AkkaInvocationHandler -> protected void tell(Object message);1506976152;Sends the message to the RPC endpoint.__@param message to send to the RPC endpoint.;protected void tell(Object message) {_		rpcEndpoint.tell(message, ActorRef.noSender())__	};sends,the,message,to,the,rpc,endpoint,param,message,to,send,to,the,rpc,endpoint;protected,void,tell,object,message,rpc,endpoint,tell,message,actor,ref,no,sender
AkkaInvocationHandler -> protected void tell(Object message);1515516637;Sends the message to the RPC endpoint.__@param message to send to the RPC endpoint.;protected void tell(Object message) {_		rpcEndpoint.tell(message, ActorRef.noSender())__	};sends,the,message,to,the,rpc,endpoint,param,message,to,send,to,the,rpc,endpoint;protected,void,tell,object,message,rpc,endpoint,tell,message,actor,ref,no,sender
AkkaInvocationHandler -> protected void tell(Object message);1518716619;Sends the message to the RPC endpoint.__@param message to send to the RPC endpoint.;protected void tell(Object message) {_		rpcEndpoint.tell(message, ActorRef.noSender())__	};sends,the,message,to,the,rpc,endpoint,param,message,to,send,to,the,rpc,endpoint;protected,void,tell,object,message,rpc,endpoint,tell,message,actor,ref,no,sender
AkkaInvocationHandler -> protected void tell(Object message);1539833178;Sends the message to the RPC endpoint.__@param message to send to the RPC endpoint.;protected void tell(Object message) {_		rpcEndpoint.tell(message, ActorRef.noSender())__	};sends,the,message,to,the,rpc,endpoint,param,message,to,send,to,the,rpc,endpoint;protected,void,tell,object,message,rpc,endpoint,tell,message,actor,ref,no,sender
AkkaInvocationHandler -> protected void tell(Object message);1548316130;Sends the message to the RPC endpoint.__@param message to send to the RPC endpoint.;protected void tell(Object message) {_		rpcEndpoint.tell(message, ActorRef.noSender())__	};sends,the,message,to,the,rpc,endpoint,param,message,to,send,to,the,rpc,endpoint;protected,void,tell,object,message,rpc,endpoint,tell,message,actor,ref,no,sender
AkkaInvocationHandler -> protected void tell(Object message);1549533702;Sends the message to the RPC endpoint.__@param message to send to the RPC endpoint.;protected void tell(Object message) {_		rpcEndpoint.tell(message, ActorRef.noSender())__	};sends,the,message,to,the,rpc,endpoint,param,message,to,send,to,the,rpc,endpoint;protected,void,tell,object,message,rpc,endpoint,tell,message,actor,ref,no,sender
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1470847346;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1470932005;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1470935448;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1470990750;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1471530887;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1474453995;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1474471581;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1474993062;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1489590578;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1492618903;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1501580028;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1502196227;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1503500935;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1506976152;Checks whether any of the annotations is of type {@link RpcTimeout}__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1515516637;Checks whether any of the annotations is of type {@link RpcTimeout}.__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1518716619;Checks whether any of the annotations is of type {@link RpcTimeout}.__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1539833178;Checks whether any of the annotations is of type {@link RpcTimeout}.__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1548316130;Checks whether any of the annotations is of type {@link RpcTimeout}.__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static boolean isRpcTimeout(Annotation[] annotations);1549533702;Checks whether any of the annotations is of type {@link RpcTimeout}.__@param annotations Array of annotations_@return True if {@link RpcTimeout} was found_ otherwise false;private static boolean isRpcTimeout(Annotation[] annotations) {_		for (Annotation annotation : annotations) {_			if (annotation.annotationType().equals(RpcTimeout.class)) {_				return true__			}_		}__		return false__	};checks,whether,any,of,the,annotations,is,of,type,link,rpc,timeout,param,annotations,array,of,annotations,return,true,if,link,rpc,timeout,was,found,otherwise,false;private,static,boolean,is,rpc,timeout,annotation,annotations,for,annotation,annotation,annotations,if,annotation,annotation,type,equals,rpc,timeout,class,return,true,return,false
AkkaInvocationHandler -> private static Tuple2<Class<?>[], Object[]> filterArguments( 		Class<?>[] parameterTypes, 		Annotation[][] parameterAnnotations, 		Object[] args);1470847346;Removes all {@link RpcTimeout} annotated parameters from the parameter type and argument_list.__@param parameterTypes Array of parameter types_@param parameterAnnotations Array of parameter annotations_@param args Arary of arguments_@return Tuple of filtered parameter types and arguments which no longer contain the_{@link RpcTimeout} annotated parameter types and arguments;private static Tuple2<Class<?>[], Object[]> filterArguments(_		Class<?>[] parameterTypes,_		Annotation[][] parameterAnnotations,_		Object[] args) {__		Class<?>[] filteredParameterTypes__		Object[] filteredArgs___		if (args == null) {_			filteredParameterTypes = parameterTypes__			filteredArgs = null__		} else {_			Preconditions.checkArgument(parameterTypes.length == parameterAnnotations.length)__			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			BitSet isRpcTimeoutParameter = new BitSet(parameterTypes.length)__			int numberRpcParameters = parameterTypes.length___			for (int i = 0_ i < parameterTypes.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					isRpcTimeoutParameter.set(i)__					numberRpcParameters--__				}_			}__			if (numberRpcParameters == parameterTypes.length) {_				filteredParameterTypes = parameterTypes__				filteredArgs = args__			} else {_				filteredParameterTypes = new Class<?>[numberRpcParameters]__				filteredArgs = new Object[numberRpcParameters]__				int counter = 0___				for (int i = 0_ i < parameterTypes.length_ i++) {_					if (!isRpcTimeoutParameter.get(i)) {_						filteredParameterTypes[counter] = parameterTypes[i]__						filteredArgs[counter] = args[i]__						counter++__					}_				}_			}_		}__		return Tuple2.of(filteredParameterTypes, filteredArgs)__	};removes,all,link,rpc,timeout,annotated,parameters,from,the,parameter,type,and,argument,list,param,parameter,types,array,of,parameter,types,param,parameter,annotations,array,of,parameter,annotations,param,args,arary,of,arguments,return,tuple,of,filtered,parameter,types,and,arguments,which,no,longer,contain,the,link,rpc,timeout,annotated,parameter,types,and,arguments;private,static,tuple2,class,object,filter,arguments,class,parameter,types,annotation,parameter,annotations,object,args,class,filtered,parameter,types,object,filtered,args,if,args,null,filtered,parameter,types,parameter,types,filtered,args,null,else,preconditions,check,argument,parameter,types,length,parameter,annotations,length,preconditions,check,argument,parameter,annotations,length,args,length,bit,set,is,rpc,timeout,parameter,new,bit,set,parameter,types,length,int,number,rpc,parameters,parameter,types,length,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,annotations,i,is,rpc,timeout,parameter,set,i,number,rpc,parameters,if,number,rpc,parameters,parameter,types,length,filtered,parameter,types,parameter,types,filtered,args,args,else,filtered,parameter,types,new,class,number,rpc,parameters,filtered,args,new,object,number,rpc,parameters,int,counter,0,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,get,i,filtered,parameter,types,counter,parameter,types,i,filtered,args,counter,args,i,counter,return,tuple2,of,filtered,parameter,types,filtered,args
AkkaInvocationHandler -> private static Tuple2<Class<?>[], Object[]> filterArguments( 		Class<?>[] parameterTypes, 		Annotation[][] parameterAnnotations, 		Object[] args);1470932005;Removes all {@link RpcTimeout} annotated parameters from the parameter type and argument_list.__@param parameterTypes Array of parameter types_@param parameterAnnotations Array of parameter annotations_@param args Arary of arguments_@return Tuple of filtered parameter types and arguments which no longer contain the_{@link RpcTimeout} annotated parameter types and arguments;private static Tuple2<Class<?>[], Object[]> filterArguments(_		Class<?>[] parameterTypes,_		Annotation[][] parameterAnnotations,_		Object[] args) {__		Class<?>[] filteredParameterTypes__		Object[] filteredArgs___		if (args == null) {_			filteredParameterTypes = parameterTypes__			filteredArgs = null__		} else {_			Preconditions.checkArgument(parameterTypes.length == parameterAnnotations.length)__			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			BitSet isRpcTimeoutParameter = new BitSet(parameterTypes.length)__			int numberRpcParameters = parameterTypes.length___			for (int i = 0_ i < parameterTypes.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					isRpcTimeoutParameter.set(i)__					numberRpcParameters--__				}_			}__			if (numberRpcParameters == parameterTypes.length) {_				filteredParameterTypes = parameterTypes__				filteredArgs = args__			} else {_				filteredParameterTypes = new Class<?>[numberRpcParameters]__				filteredArgs = new Object[numberRpcParameters]__				int counter = 0___				for (int i = 0_ i < parameterTypes.length_ i++) {_					if (!isRpcTimeoutParameter.get(i)) {_						filteredParameterTypes[counter] = parameterTypes[i]__						filteredArgs[counter] = args[i]__						counter++__					}_				}_			}_		}__		return Tuple2.of(filteredParameterTypes, filteredArgs)__	};removes,all,link,rpc,timeout,annotated,parameters,from,the,parameter,type,and,argument,list,param,parameter,types,array,of,parameter,types,param,parameter,annotations,array,of,parameter,annotations,param,args,arary,of,arguments,return,tuple,of,filtered,parameter,types,and,arguments,which,no,longer,contain,the,link,rpc,timeout,annotated,parameter,types,and,arguments;private,static,tuple2,class,object,filter,arguments,class,parameter,types,annotation,parameter,annotations,object,args,class,filtered,parameter,types,object,filtered,args,if,args,null,filtered,parameter,types,parameter,types,filtered,args,null,else,preconditions,check,argument,parameter,types,length,parameter,annotations,length,preconditions,check,argument,parameter,annotations,length,args,length,bit,set,is,rpc,timeout,parameter,new,bit,set,parameter,types,length,int,number,rpc,parameters,parameter,types,length,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,annotations,i,is,rpc,timeout,parameter,set,i,number,rpc,parameters,if,number,rpc,parameters,parameter,types,length,filtered,parameter,types,parameter,types,filtered,args,args,else,filtered,parameter,types,new,class,number,rpc,parameters,filtered,args,new,object,number,rpc,parameters,int,counter,0,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,get,i,filtered,parameter,types,counter,parameter,types,i,filtered,args,counter,args,i,counter,return,tuple2,of,filtered,parameter,types,filtered,args
AkkaInvocationHandler -> private static Tuple2<Class<?>[], Object[]> filterArguments( 		Class<?>[] parameterTypes, 		Annotation[][] parameterAnnotations, 		Object[] args);1470935448;Removes all {@link RpcTimeout} annotated parameters from the parameter type and argument_list.__@param parameterTypes Array of parameter types_@param parameterAnnotations Array of parameter annotations_@param args Arary of arguments_@return Tuple of filtered parameter types and arguments which no longer contain the_{@link RpcTimeout} annotated parameter types and arguments;private static Tuple2<Class<?>[], Object[]> filterArguments(_		Class<?>[] parameterTypes,_		Annotation[][] parameterAnnotations,_		Object[] args) {__		Class<?>[] filteredParameterTypes__		Object[] filteredArgs___		if (args == null) {_			filteredParameterTypes = parameterTypes__			filteredArgs = null__		} else {_			Preconditions.checkArgument(parameterTypes.length == parameterAnnotations.length)__			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			BitSet isRpcTimeoutParameter = new BitSet(parameterTypes.length)__			int numberRpcParameters = parameterTypes.length___			for (int i = 0_ i < parameterTypes.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					isRpcTimeoutParameter.set(i)__					numberRpcParameters--__				}_			}__			if (numberRpcParameters == parameterTypes.length) {_				filteredParameterTypes = parameterTypes__				filteredArgs = args__			} else {_				filteredParameterTypes = new Class<?>[numberRpcParameters]__				filteredArgs = new Object[numberRpcParameters]__				int counter = 0___				for (int i = 0_ i < parameterTypes.length_ i++) {_					if (!isRpcTimeoutParameter.get(i)) {_						filteredParameterTypes[counter] = parameterTypes[i]__						filteredArgs[counter] = args[i]__						counter++__					}_				}_			}_		}__		return Tuple2.of(filteredParameterTypes, filteredArgs)__	};removes,all,link,rpc,timeout,annotated,parameters,from,the,parameter,type,and,argument,list,param,parameter,types,array,of,parameter,types,param,parameter,annotations,array,of,parameter,annotations,param,args,arary,of,arguments,return,tuple,of,filtered,parameter,types,and,arguments,which,no,longer,contain,the,link,rpc,timeout,annotated,parameter,types,and,arguments;private,static,tuple2,class,object,filter,arguments,class,parameter,types,annotation,parameter,annotations,object,args,class,filtered,parameter,types,object,filtered,args,if,args,null,filtered,parameter,types,parameter,types,filtered,args,null,else,preconditions,check,argument,parameter,types,length,parameter,annotations,length,preconditions,check,argument,parameter,annotations,length,args,length,bit,set,is,rpc,timeout,parameter,new,bit,set,parameter,types,length,int,number,rpc,parameters,parameter,types,length,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,annotations,i,is,rpc,timeout,parameter,set,i,number,rpc,parameters,if,number,rpc,parameters,parameter,types,length,filtered,parameter,types,parameter,types,filtered,args,args,else,filtered,parameter,types,new,class,number,rpc,parameters,filtered,args,new,object,number,rpc,parameters,int,counter,0,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,get,i,filtered,parameter,types,counter,parameter,types,i,filtered,args,counter,args,i,counter,return,tuple2,of,filtered,parameter,types,filtered,args
AkkaInvocationHandler -> private static Tuple2<Class<?>[], Object[]> filterArguments( 		Class<?>[] parameterTypes, 		Annotation[][] parameterAnnotations, 		Object[] args);1470990750;Removes all {@link RpcTimeout} annotated parameters from the parameter type and argument_list.__@param parameterTypes Array of parameter types_@param parameterAnnotations Array of parameter annotations_@param args Arary of arguments_@return Tuple of filtered parameter types and arguments which no longer contain the_{@link RpcTimeout} annotated parameter types and arguments;private static Tuple2<Class<?>[], Object[]> filterArguments(_		Class<?>[] parameterTypes,_		Annotation[][] parameterAnnotations,_		Object[] args) {__		Class<?>[] filteredParameterTypes__		Object[] filteredArgs___		if (args == null) {_			filteredParameterTypes = parameterTypes__			filteredArgs = null__		} else {_			Preconditions.checkArgument(parameterTypes.length == parameterAnnotations.length)__			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			BitSet isRpcTimeoutParameter = new BitSet(parameterTypes.length)__			int numberRpcParameters = parameterTypes.length___			for (int i = 0_ i < parameterTypes.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					isRpcTimeoutParameter.set(i)__					numberRpcParameters--__				}_			}__			if (numberRpcParameters == parameterTypes.length) {_				filteredParameterTypes = parameterTypes__				filteredArgs = args__			} else {_				filteredParameterTypes = new Class<?>[numberRpcParameters]__				filteredArgs = new Object[numberRpcParameters]__				int counter = 0___				for (int i = 0_ i < parameterTypes.length_ i++) {_					if (!isRpcTimeoutParameter.get(i)) {_						filteredParameterTypes[counter] = parameterTypes[i]__						filteredArgs[counter] = args[i]__						counter++__					}_				}_			}_		}__		return Tuple2.of(filteredParameterTypes, filteredArgs)__	};removes,all,link,rpc,timeout,annotated,parameters,from,the,parameter,type,and,argument,list,param,parameter,types,array,of,parameter,types,param,parameter,annotations,array,of,parameter,annotations,param,args,arary,of,arguments,return,tuple,of,filtered,parameter,types,and,arguments,which,no,longer,contain,the,link,rpc,timeout,annotated,parameter,types,and,arguments;private,static,tuple2,class,object,filter,arguments,class,parameter,types,annotation,parameter,annotations,object,args,class,filtered,parameter,types,object,filtered,args,if,args,null,filtered,parameter,types,parameter,types,filtered,args,null,else,preconditions,check,argument,parameter,types,length,parameter,annotations,length,preconditions,check,argument,parameter,annotations,length,args,length,bit,set,is,rpc,timeout,parameter,new,bit,set,parameter,types,length,int,number,rpc,parameters,parameter,types,length,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,annotations,i,is,rpc,timeout,parameter,set,i,number,rpc,parameters,if,number,rpc,parameters,parameter,types,length,filtered,parameter,types,parameter,types,filtered,args,args,else,filtered,parameter,types,new,class,number,rpc,parameters,filtered,args,new,object,number,rpc,parameters,int,counter,0,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,get,i,filtered,parameter,types,counter,parameter,types,i,filtered,args,counter,args,i,counter,return,tuple2,of,filtered,parameter,types,filtered,args
AkkaInvocationHandler -> private static Tuple2<Class<?>[], Object[]> filterArguments( 		Class<?>[] parameterTypes, 		Annotation[][] parameterAnnotations, 		Object[] args);1471530887;Removes all {@link RpcTimeout} annotated parameters from the parameter type and argument_list.__@param parameterTypes Array of parameter types_@param parameterAnnotations Array of parameter annotations_@param args Arary of arguments_@return Tuple of filtered parameter types and arguments which no longer contain the_{@link RpcTimeout} annotated parameter types and arguments;private static Tuple2<Class<?>[], Object[]> filterArguments(_		Class<?>[] parameterTypes,_		Annotation[][] parameterAnnotations,_		Object[] args) {__		Class<?>[] filteredParameterTypes__		Object[] filteredArgs___		if (args == null) {_			filteredParameterTypes = parameterTypes__			filteredArgs = null__		} else {_			Preconditions.checkArgument(parameterTypes.length == parameterAnnotations.length)__			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			BitSet isRpcTimeoutParameter = new BitSet(parameterTypes.length)__			int numberRpcParameters = parameterTypes.length___			for (int i = 0_ i < parameterTypes.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					isRpcTimeoutParameter.set(i)__					numberRpcParameters--__				}_			}__			if (numberRpcParameters == parameterTypes.length) {_				filteredParameterTypes = parameterTypes__				filteredArgs = args__			} else {_				filteredParameterTypes = new Class<?>[numberRpcParameters]__				filteredArgs = new Object[numberRpcParameters]__				int counter = 0___				for (int i = 0_ i < parameterTypes.length_ i++) {_					if (!isRpcTimeoutParameter.get(i)) {_						filteredParameterTypes[counter] = parameterTypes[i]__						filteredArgs[counter] = args[i]__						counter++__					}_				}_			}_		}__		return Tuple2.of(filteredParameterTypes, filteredArgs)__	};removes,all,link,rpc,timeout,annotated,parameters,from,the,parameter,type,and,argument,list,param,parameter,types,array,of,parameter,types,param,parameter,annotations,array,of,parameter,annotations,param,args,arary,of,arguments,return,tuple,of,filtered,parameter,types,and,arguments,which,no,longer,contain,the,link,rpc,timeout,annotated,parameter,types,and,arguments;private,static,tuple2,class,object,filter,arguments,class,parameter,types,annotation,parameter,annotations,object,args,class,filtered,parameter,types,object,filtered,args,if,args,null,filtered,parameter,types,parameter,types,filtered,args,null,else,preconditions,check,argument,parameter,types,length,parameter,annotations,length,preconditions,check,argument,parameter,annotations,length,args,length,bit,set,is,rpc,timeout,parameter,new,bit,set,parameter,types,length,int,number,rpc,parameters,parameter,types,length,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,annotations,i,is,rpc,timeout,parameter,set,i,number,rpc,parameters,if,number,rpc,parameters,parameter,types,length,filtered,parameter,types,parameter,types,filtered,args,args,else,filtered,parameter,types,new,class,number,rpc,parameters,filtered,args,new,object,number,rpc,parameters,int,counter,0,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,get,i,filtered,parameter,types,counter,parameter,types,i,filtered,args,counter,args,i,counter,return,tuple2,of,filtered,parameter,types,filtered,args
AkkaInvocationHandler -> private static Tuple2<Class<?>[], Object[]> filterArguments( 		Class<?>[] parameterTypes, 		Annotation[][] parameterAnnotations, 		Object[] args);1474453995;Removes all {@link RpcTimeout} annotated parameters from the parameter type and argument_list.__@param parameterTypes Array of parameter types_@param parameterAnnotations Array of parameter annotations_@param args Arary of arguments_@return Tuple of filtered parameter types and arguments which no longer contain the_{@link RpcTimeout} annotated parameter types and arguments;private static Tuple2<Class<?>[], Object[]> filterArguments(_		Class<?>[] parameterTypes,_		Annotation[][] parameterAnnotations,_		Object[] args) {__		Class<?>[] filteredParameterTypes__		Object[] filteredArgs___		if (args == null) {_			filteredParameterTypes = parameterTypes__			filteredArgs = null__		} else {_			Preconditions.checkArgument(parameterTypes.length == parameterAnnotations.length)__			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			BitSet isRpcTimeoutParameter = new BitSet(parameterTypes.length)__			int numberRpcParameters = parameterTypes.length___			for (int i = 0_ i < parameterTypes.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					isRpcTimeoutParameter.set(i)__					numberRpcParameters--__				}_			}__			if (numberRpcParameters == parameterTypes.length) {_				filteredParameterTypes = parameterTypes__				filteredArgs = args__			} else {_				filteredParameterTypes = new Class<?>[numberRpcParameters]__				filteredArgs = new Object[numberRpcParameters]__				int counter = 0___				for (int i = 0_ i < parameterTypes.length_ i++) {_					if (!isRpcTimeoutParameter.get(i)) {_						filteredParameterTypes[counter] = parameterTypes[i]__						filteredArgs[counter] = args[i]__						counter++__					}_				}_			}_		}__		return Tuple2.of(filteredParameterTypes, filteredArgs)__	};removes,all,link,rpc,timeout,annotated,parameters,from,the,parameter,type,and,argument,list,param,parameter,types,array,of,parameter,types,param,parameter,annotations,array,of,parameter,annotations,param,args,arary,of,arguments,return,tuple,of,filtered,parameter,types,and,arguments,which,no,longer,contain,the,link,rpc,timeout,annotated,parameter,types,and,arguments;private,static,tuple2,class,object,filter,arguments,class,parameter,types,annotation,parameter,annotations,object,args,class,filtered,parameter,types,object,filtered,args,if,args,null,filtered,parameter,types,parameter,types,filtered,args,null,else,preconditions,check,argument,parameter,types,length,parameter,annotations,length,preconditions,check,argument,parameter,annotations,length,args,length,bit,set,is,rpc,timeout,parameter,new,bit,set,parameter,types,length,int,number,rpc,parameters,parameter,types,length,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,annotations,i,is,rpc,timeout,parameter,set,i,number,rpc,parameters,if,number,rpc,parameters,parameter,types,length,filtered,parameter,types,parameter,types,filtered,args,args,else,filtered,parameter,types,new,class,number,rpc,parameters,filtered,args,new,object,number,rpc,parameters,int,counter,0,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,get,i,filtered,parameter,types,counter,parameter,types,i,filtered,args,counter,args,i,counter,return,tuple2,of,filtered,parameter,types,filtered,args
AkkaInvocationHandler -> private static Tuple2<Class<?>[], Object[]> filterArguments( 		Class<?>[] parameterTypes, 		Annotation[][] parameterAnnotations, 		Object[] args);1474471581;Removes all {@link RpcTimeout} annotated parameters from the parameter type and argument_list.__@param parameterTypes Array of parameter types_@param parameterAnnotations Array of parameter annotations_@param args Arary of arguments_@return Tuple of filtered parameter types and arguments which no longer contain the_{@link RpcTimeout} annotated parameter types and arguments;private static Tuple2<Class<?>[], Object[]> filterArguments(_		Class<?>[] parameterTypes,_		Annotation[][] parameterAnnotations,_		Object[] args) {__		Class<?>[] filteredParameterTypes__		Object[] filteredArgs___		if (args == null) {_			filteredParameterTypes = parameterTypes__			filteredArgs = null__		} else {_			Preconditions.checkArgument(parameterTypes.length == parameterAnnotations.length)__			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			BitSet isRpcTimeoutParameter = new BitSet(parameterTypes.length)__			int numberRpcParameters = parameterTypes.length___			for (int i = 0_ i < parameterTypes.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					isRpcTimeoutParameter.set(i)__					numberRpcParameters--__				}_			}__			if (numberRpcParameters == parameterTypes.length) {_				filteredParameterTypes = parameterTypes__				filteredArgs = args__			} else {_				filteredParameterTypes = new Class<?>[numberRpcParameters]__				filteredArgs = new Object[numberRpcParameters]__				int counter = 0___				for (int i = 0_ i < parameterTypes.length_ i++) {_					if (!isRpcTimeoutParameter.get(i)) {_						filteredParameterTypes[counter] = parameterTypes[i]__						filteredArgs[counter] = args[i]__						counter++__					}_				}_			}_		}__		return Tuple2.of(filteredParameterTypes, filteredArgs)__	};removes,all,link,rpc,timeout,annotated,parameters,from,the,parameter,type,and,argument,list,param,parameter,types,array,of,parameter,types,param,parameter,annotations,array,of,parameter,annotations,param,args,arary,of,arguments,return,tuple,of,filtered,parameter,types,and,arguments,which,no,longer,contain,the,link,rpc,timeout,annotated,parameter,types,and,arguments;private,static,tuple2,class,object,filter,arguments,class,parameter,types,annotation,parameter,annotations,object,args,class,filtered,parameter,types,object,filtered,args,if,args,null,filtered,parameter,types,parameter,types,filtered,args,null,else,preconditions,check,argument,parameter,types,length,parameter,annotations,length,preconditions,check,argument,parameter,annotations,length,args,length,bit,set,is,rpc,timeout,parameter,new,bit,set,parameter,types,length,int,number,rpc,parameters,parameter,types,length,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,annotations,i,is,rpc,timeout,parameter,set,i,number,rpc,parameters,if,number,rpc,parameters,parameter,types,length,filtered,parameter,types,parameter,types,filtered,args,args,else,filtered,parameter,types,new,class,number,rpc,parameters,filtered,args,new,object,number,rpc,parameters,int,counter,0,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,get,i,filtered,parameter,types,counter,parameter,types,i,filtered,args,counter,args,i,counter,return,tuple2,of,filtered,parameter,types,filtered,args
AkkaInvocationHandler -> private static Tuple2<Class<?>[], Object[]> filterArguments( 		Class<?>[] parameterTypes, 		Annotation[][] parameterAnnotations, 		Object[] args);1474993062;Removes all {@link RpcTimeout} annotated parameters from the parameter type and argument_list.__@param parameterTypes Array of parameter types_@param parameterAnnotations Array of parameter annotations_@param args Arary of arguments_@return Tuple of filtered parameter types and arguments which no longer contain the_{@link RpcTimeout} annotated parameter types and arguments;private static Tuple2<Class<?>[], Object[]> filterArguments(_		Class<?>[] parameterTypes,_		Annotation[][] parameterAnnotations,_		Object[] args) {__		Class<?>[] filteredParameterTypes__		Object[] filteredArgs___		if (args == null) {_			filteredParameterTypes = parameterTypes__			filteredArgs = null__		} else {_			Preconditions.checkArgument(parameterTypes.length == parameterAnnotations.length)__			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			BitSet isRpcTimeoutParameter = new BitSet(parameterTypes.length)__			int numberRpcParameters = parameterTypes.length___			for (int i = 0_ i < parameterTypes.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					isRpcTimeoutParameter.set(i)__					numberRpcParameters--__				}_			}__			if (numberRpcParameters == parameterTypes.length) {_				filteredParameterTypes = parameterTypes__				filteredArgs = args__			} else {_				filteredParameterTypes = new Class<?>[numberRpcParameters]__				filteredArgs = new Object[numberRpcParameters]__				int counter = 0___				for (int i = 0_ i < parameterTypes.length_ i++) {_					if (!isRpcTimeoutParameter.get(i)) {_						filteredParameterTypes[counter] = parameterTypes[i]__						filteredArgs[counter] = args[i]__						counter++__					}_				}_			}_		}__		return Tuple2.of(filteredParameterTypes, filteredArgs)__	};removes,all,link,rpc,timeout,annotated,parameters,from,the,parameter,type,and,argument,list,param,parameter,types,array,of,parameter,types,param,parameter,annotations,array,of,parameter,annotations,param,args,arary,of,arguments,return,tuple,of,filtered,parameter,types,and,arguments,which,no,longer,contain,the,link,rpc,timeout,annotated,parameter,types,and,arguments;private,static,tuple2,class,object,filter,arguments,class,parameter,types,annotation,parameter,annotations,object,args,class,filtered,parameter,types,object,filtered,args,if,args,null,filtered,parameter,types,parameter,types,filtered,args,null,else,preconditions,check,argument,parameter,types,length,parameter,annotations,length,preconditions,check,argument,parameter,annotations,length,args,length,bit,set,is,rpc,timeout,parameter,new,bit,set,parameter,types,length,int,number,rpc,parameters,parameter,types,length,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,annotations,i,is,rpc,timeout,parameter,set,i,number,rpc,parameters,if,number,rpc,parameters,parameter,types,length,filtered,parameter,types,parameter,types,filtered,args,args,else,filtered,parameter,types,new,class,number,rpc,parameters,filtered,args,new,object,number,rpc,parameters,int,counter,0,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,get,i,filtered,parameter,types,counter,parameter,types,i,filtered,args,counter,args,i,counter,return,tuple2,of,filtered,parameter,types,filtered,args
AkkaInvocationHandler -> private static Tuple2<Class<?>[], Object[]> filterArguments( 		Class<?>[] parameterTypes, 		Annotation[][] parameterAnnotations, 		Object[] args);1489590578;Removes all {@link RpcTimeout} annotated parameters from the parameter type and argument_list.__@param parameterTypes Array of parameter types_@param parameterAnnotations Array of parameter annotations_@param args Arary of arguments_@return Tuple of filtered parameter types and arguments which no longer contain the_{@link RpcTimeout} annotated parameter types and arguments;private static Tuple2<Class<?>[], Object[]> filterArguments(_		Class<?>[] parameterTypes,_		Annotation[][] parameterAnnotations,_		Object[] args) {__		Class<?>[] filteredParameterTypes__		Object[] filteredArgs___		if (args == null) {_			filteredParameterTypes = parameterTypes__			filteredArgs = null__		} else {_			Preconditions.checkArgument(parameterTypes.length == parameterAnnotations.length)__			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			BitSet isRpcTimeoutParameter = new BitSet(parameterTypes.length)__			int numberRpcParameters = parameterTypes.length___			for (int i = 0_ i < parameterTypes.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					isRpcTimeoutParameter.set(i)__					numberRpcParameters--__				}_			}__			if (numberRpcParameters == parameterTypes.length) {_				filteredParameterTypes = parameterTypes__				filteredArgs = args__			} else {_				filteredParameterTypes = new Class<?>[numberRpcParameters]__				filteredArgs = new Object[numberRpcParameters]__				int counter = 0___				for (int i = 0_ i < parameterTypes.length_ i++) {_					if (!isRpcTimeoutParameter.get(i)) {_						filteredParameterTypes[counter] = parameterTypes[i]__						filteredArgs[counter] = args[i]__						counter++__					}_				}_			}_		}__		return Tuple2.of(filteredParameterTypes, filteredArgs)__	};removes,all,link,rpc,timeout,annotated,parameters,from,the,parameter,type,and,argument,list,param,parameter,types,array,of,parameter,types,param,parameter,annotations,array,of,parameter,annotations,param,args,arary,of,arguments,return,tuple,of,filtered,parameter,types,and,arguments,which,no,longer,contain,the,link,rpc,timeout,annotated,parameter,types,and,arguments;private,static,tuple2,class,object,filter,arguments,class,parameter,types,annotation,parameter,annotations,object,args,class,filtered,parameter,types,object,filtered,args,if,args,null,filtered,parameter,types,parameter,types,filtered,args,null,else,preconditions,check,argument,parameter,types,length,parameter,annotations,length,preconditions,check,argument,parameter,annotations,length,args,length,bit,set,is,rpc,timeout,parameter,new,bit,set,parameter,types,length,int,number,rpc,parameters,parameter,types,length,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,annotations,i,is,rpc,timeout,parameter,set,i,number,rpc,parameters,if,number,rpc,parameters,parameter,types,length,filtered,parameter,types,parameter,types,filtered,args,args,else,filtered,parameter,types,new,class,number,rpc,parameters,filtered,args,new,object,number,rpc,parameters,int,counter,0,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,get,i,filtered,parameter,types,counter,parameter,types,i,filtered,args,counter,args,i,counter,return,tuple2,of,filtered,parameter,types,filtered,args
AkkaInvocationHandler -> private static Tuple2<Class<?>[], Object[]> filterArguments( 		Class<?>[] parameterTypes, 		Annotation[][] parameterAnnotations, 		Object[] args);1492618903;Removes all {@link RpcTimeout} annotated parameters from the parameter type and argument_list.__@param parameterTypes Array of parameter types_@param parameterAnnotations Array of parameter annotations_@param args Arary of arguments_@return Tuple of filtered parameter types and arguments which no longer contain the_{@link RpcTimeout} annotated parameter types and arguments;private static Tuple2<Class<?>[], Object[]> filterArguments(_		Class<?>[] parameterTypes,_		Annotation[][] parameterAnnotations,_		Object[] args) {__		Class<?>[] filteredParameterTypes__		Object[] filteredArgs___		if (args == null) {_			filteredParameterTypes = parameterTypes__			filteredArgs = null__		} else {_			Preconditions.checkArgument(parameterTypes.length == parameterAnnotations.length)__			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			BitSet isRpcTimeoutParameter = new BitSet(parameterTypes.length)__			int numberRpcParameters = parameterTypes.length___			for (int i = 0_ i < parameterTypes.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					isRpcTimeoutParameter.set(i)__					numberRpcParameters--__				}_			}__			if (numberRpcParameters == parameterTypes.length) {_				filteredParameterTypes = parameterTypes__				filteredArgs = args__			} else {_				filteredParameterTypes = new Class<?>[numberRpcParameters]__				filteredArgs = new Object[numberRpcParameters]__				int counter = 0___				for (int i = 0_ i < parameterTypes.length_ i++) {_					if (!isRpcTimeoutParameter.get(i)) {_						filteredParameterTypes[counter] = parameterTypes[i]__						filteredArgs[counter] = args[i]__						counter++__					}_				}_			}_		}__		return Tuple2.of(filteredParameterTypes, filteredArgs)__	};removes,all,link,rpc,timeout,annotated,parameters,from,the,parameter,type,and,argument,list,param,parameter,types,array,of,parameter,types,param,parameter,annotations,array,of,parameter,annotations,param,args,arary,of,arguments,return,tuple,of,filtered,parameter,types,and,arguments,which,no,longer,contain,the,link,rpc,timeout,annotated,parameter,types,and,arguments;private,static,tuple2,class,object,filter,arguments,class,parameter,types,annotation,parameter,annotations,object,args,class,filtered,parameter,types,object,filtered,args,if,args,null,filtered,parameter,types,parameter,types,filtered,args,null,else,preconditions,check,argument,parameter,types,length,parameter,annotations,length,preconditions,check,argument,parameter,annotations,length,args,length,bit,set,is,rpc,timeout,parameter,new,bit,set,parameter,types,length,int,number,rpc,parameters,parameter,types,length,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,annotations,i,is,rpc,timeout,parameter,set,i,number,rpc,parameters,if,number,rpc,parameters,parameter,types,length,filtered,parameter,types,parameter,types,filtered,args,args,else,filtered,parameter,types,new,class,number,rpc,parameters,filtered,args,new,object,number,rpc,parameters,int,counter,0,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,get,i,filtered,parameter,types,counter,parameter,types,i,filtered,args,counter,args,i,counter,return,tuple2,of,filtered,parameter,types,filtered,args
AkkaInvocationHandler -> private static Tuple2<Class<?>[], Object[]> filterArguments( 		Class<?>[] parameterTypes, 		Annotation[][] parameterAnnotations, 		Object[] args);1501580028;Removes all {@link RpcTimeout} annotated parameters from the parameter type and argument_list.__@param parameterTypes Array of parameter types_@param parameterAnnotations Array of parameter annotations_@param args Arary of arguments_@return Tuple of filtered parameter types and arguments which no longer contain the_{@link RpcTimeout} annotated parameter types and arguments;private static Tuple2<Class<?>[], Object[]> filterArguments(_		Class<?>[] parameterTypes,_		Annotation[][] parameterAnnotations,_		Object[] args) {__		Class<?>[] filteredParameterTypes__		Object[] filteredArgs___		if (args == null) {_			filteredParameterTypes = parameterTypes__			filteredArgs = null__		} else {_			Preconditions.checkArgument(parameterTypes.length == parameterAnnotations.length)__			Preconditions.checkArgument(parameterAnnotations.length == args.length)___			BitSet isRpcTimeoutParameter = new BitSet(parameterTypes.length)__			int numberRpcParameters = parameterTypes.length___			for (int i = 0_ i < parameterTypes.length_ i++) {_				if (isRpcTimeout(parameterAnnotations[i])) {_					isRpcTimeoutParameter.set(i)__					numberRpcParameters--__				}_			}__			if (numberRpcParameters == parameterTypes.length) {_				filteredParameterTypes = parameterTypes__				filteredArgs = args__			} else {_				filteredParameterTypes = new Class<?>[numberRpcParameters]__				filteredArgs = new Object[numberRpcParameters]__				int counter = 0___				for (int i = 0_ i < parameterTypes.length_ i++) {_					if (!isRpcTimeoutParameter.get(i)) {_						filteredParameterTypes[counter] = parameterTypes[i]__						filteredArgs[counter] = args[i]__						counter++__					}_				}_			}_		}__		return Tuple2.of(filteredParameterTypes, filteredArgs)__	};removes,all,link,rpc,timeout,annotated,parameters,from,the,parameter,type,and,argument,list,param,parameter,types,array,of,parameter,types,param,parameter,annotations,array,of,parameter,annotations,param,args,arary,of,arguments,return,tuple,of,filtered,parameter,types,and,arguments,which,no,longer,contain,the,link,rpc,timeout,annotated,parameter,types,and,arguments;private,static,tuple2,class,object,filter,arguments,class,parameter,types,annotation,parameter,annotations,object,args,class,filtered,parameter,types,object,filtered,args,if,args,null,filtered,parameter,types,parameter,types,filtered,args,null,else,preconditions,check,argument,parameter,types,length,parameter,annotations,length,preconditions,check,argument,parameter,annotations,length,args,length,bit,set,is,rpc,timeout,parameter,new,bit,set,parameter,types,length,int,number,rpc,parameters,parameter,types,length,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,annotations,i,is,rpc,timeout,parameter,set,i,number,rpc,parameters,if,number,rpc,parameters,parameter,types,length,filtered,parameter,types,parameter,types,filtered,args,args,else,filtered,parameter,types,new,class,number,rpc,parameters,filtered,args,new,object,number,rpc,parameters,int,counter,0,for,int,i,0,i,parameter,types,length,i,if,is,rpc,timeout,parameter,get,i,filtered,parameter,types,counter,parameter,types,i,filtered,args,counter,args,i,counter,return,tuple2,of,filtered,parameter,types,filtered,args
AkkaInvocationHandler -> protected CompletableFuture<?> ask(Object message, Time timeout);1503500935;Sends the message to the RPC endpoint and returns a future containing_its response.__@param message to send to the RPC endpoint_@param timeout time to wait until the response future is failed with a {@link TimeoutException}_@return Response future;protected CompletableFuture<?> ask(Object message, Time timeout) {_		return FutureUtils.toJava(_			Patterns.ask(rpcEndpoint, message, timeout.toMilliseconds()))__	};sends,the,message,to,the,rpc,endpoint,and,returns,a,future,containing,its,response,param,message,to,send,to,the,rpc,endpoint,param,timeout,time,to,wait,until,the,response,future,is,failed,with,a,link,timeout,exception,return,response,future;protected,completable,future,ask,object,message,time,timeout,return,future,utils,to,java,patterns,ask,rpc,endpoint,message,timeout,to,milliseconds
AkkaInvocationHandler -> protected CompletableFuture<?> ask(Object message, Time timeout);1506976152;Sends the message to the RPC endpoint and returns a future containing_its response.__@param message to send to the RPC endpoint_@param timeout time to wait until the response future is failed with a {@link TimeoutException}_@return Response future;protected CompletableFuture<?> ask(Object message, Time timeout) {_		return FutureUtils.toJava(_			Patterns.ask(rpcEndpoint, message, timeout.toMilliseconds()))__	};sends,the,message,to,the,rpc,endpoint,and,returns,a,future,containing,its,response,param,message,to,send,to,the,rpc,endpoint,param,timeout,time,to,wait,until,the,response,future,is,failed,with,a,link,timeout,exception,return,response,future;protected,completable,future,ask,object,message,time,timeout,return,future,utils,to,java,patterns,ask,rpc,endpoint,message,timeout,to,milliseconds
AkkaInvocationHandler -> protected CompletableFuture<?> ask(Object message, Time timeout);1515516637;Sends the message to the RPC endpoint and returns a future containing_its response.__@param message to send to the RPC endpoint_@param timeout time to wait until the response future is failed with a {@link TimeoutException}_@return Response future;protected CompletableFuture<?> ask(Object message, Time timeout) {_		return FutureUtils.toJava(_			Patterns.ask(rpcEndpoint, message, timeout.toMilliseconds()))__	};sends,the,message,to,the,rpc,endpoint,and,returns,a,future,containing,its,response,param,message,to,send,to,the,rpc,endpoint,param,timeout,time,to,wait,until,the,response,future,is,failed,with,a,link,timeout,exception,return,response,future;protected,completable,future,ask,object,message,time,timeout,return,future,utils,to,java,patterns,ask,rpc,endpoint,message,timeout,to,milliseconds
AkkaInvocationHandler -> protected CompletableFuture<?> ask(Object message, Time timeout);1518716619;Sends the message to the RPC endpoint and returns a future containing_its response.__@param message to send to the RPC endpoint_@param timeout time to wait until the response future is failed with a {@link TimeoutException}_@return Response future;protected CompletableFuture<?> ask(Object message, Time timeout) {_		return FutureUtils.toJava(_			Patterns.ask(rpcEndpoint, message, timeout.toMilliseconds()))__	};sends,the,message,to,the,rpc,endpoint,and,returns,a,future,containing,its,response,param,message,to,send,to,the,rpc,endpoint,param,timeout,time,to,wait,until,the,response,future,is,failed,with,a,link,timeout,exception,return,response,future;protected,completable,future,ask,object,message,time,timeout,return,future,utils,to,java,patterns,ask,rpc,endpoint,message,timeout,to,milliseconds
AkkaInvocationHandler -> protected CompletableFuture<?> ask(Object message, Time timeout);1539833178;Sends the message to the RPC endpoint and returns a future containing_its response.__@param message to send to the RPC endpoint_@param timeout time to wait until the response future is failed with a {@link TimeoutException}_@return Response future;protected CompletableFuture<?> ask(Object message, Time timeout) {_		return FutureUtils.toJava(_			Patterns.ask(rpcEndpoint, message, timeout.toMilliseconds()))__	};sends,the,message,to,the,rpc,endpoint,and,returns,a,future,containing,its,response,param,message,to,send,to,the,rpc,endpoint,param,timeout,time,to,wait,until,the,response,future,is,failed,with,a,link,timeout,exception,return,response,future;protected,completable,future,ask,object,message,time,timeout,return,future,utils,to,java,patterns,ask,rpc,endpoint,message,timeout,to,milliseconds
AkkaInvocationHandler -> protected CompletableFuture<?> ask(Object message, Time timeout);1548316130;Sends the message to the RPC endpoint and returns a future containing_its response.__@param message to send to the RPC endpoint_@param timeout time to wait until the response future is failed with a {@link TimeoutException}_@return Response future;protected CompletableFuture<?> ask(Object message, Time timeout) {_		return FutureUtils.toJava(_			Patterns.ask(rpcEndpoint, message, timeout.toMilliseconds()))__	};sends,the,message,to,the,rpc,endpoint,and,returns,a,future,containing,its,response,param,message,to,send,to,the,rpc,endpoint,param,timeout,time,to,wait,until,the,response,future,is,failed,with,a,link,timeout,exception,return,response,future;protected,completable,future,ask,object,message,time,timeout,return,future,utils,to,java,patterns,ask,rpc,endpoint,message,timeout,to,milliseconds
AkkaInvocationHandler -> protected CompletableFuture<?> ask(Object message, Time timeout);1549533702;Sends the message to the RPC endpoint and returns a future containing_its response.__@param message to send to the RPC endpoint_@param timeout time to wait until the response future is failed with a {@link TimeoutException}_@return Response future;protected CompletableFuture<?> ask(Object message, Time timeout) {_		return FutureUtils.toJava(_			Patterns.ask(rpcEndpoint, message, timeout.toMilliseconds()))__	};sends,the,message,to,the,rpc,endpoint,and,returns,a,future,containing,its,response,param,message,to,send,to,the,rpc,endpoint,param,timeout,time,to,wait,until,the,response,future,is,failed,with,a,link,timeout,exception,return,response,future;protected,completable,future,ask,object,message,time,timeout,return,future,utils,to,java,patterns,ask,rpc,endpoint,message,timeout,to,milliseconds
AkkaInvocationHandler -> private Object invokeRpc(Method method, Object[] args) throws Exception;1503500935;Invokes a RPC method by sending the RPC invocation details to the rpc endpoint.__@param method to call_@param args of the method call_@return result of the RPC_@throws Exception if the RPC invocation fails;private Object invokeRpc(Method method, Object[] args) throws Exception {_		String methodName = method.getName()__		Class<?>[] parameterTypes = method.getParameterTypes()__		Annotation[][] parameterAnnotations = method.getParameterAnnotations()__		Time futureTimeout = extractRpcTimeout(parameterAnnotations, args, timeout)___		final RpcInvocation rpcInvocation = createRpcInvocationMessage(methodName, parameterTypes, args)___		Class<?> returnType = method.getReturnType()___		final Object result___		if (Objects.equals(returnType, Void.TYPE)) {_			tell(rpcInvocation)___			result = null__		} else if (Objects.equals(returnType,CompletableFuture.class)) {_			_			result = ask(rpcInvocation, futureTimeout)__		} else {_			_			CompletableFuture<?> futureResult = ask(rpcInvocation, futureTimeout)___			result = futureResult.get(futureTimeout.getSize(), futureTimeout.getUnit())__		}__		return result__	};invokes,a,rpc,method,by,sending,the,rpc,invocation,details,to,the,rpc,endpoint,param,method,to,call,param,args,of,the,method,call,return,result,of,the,rpc,throws,exception,if,the,rpc,invocation,fails;private,object,invoke,rpc,method,method,object,args,throws,exception,string,method,name,method,get,name,class,parameter,types,method,get,parameter,types,annotation,parameter,annotations,method,get,parameter,annotations,time,future,timeout,extract,rpc,timeout,parameter,annotations,args,timeout,final,rpc,invocation,rpc,invocation,create,rpc,invocation,message,method,name,parameter,types,args,class,return,type,method,get,return,type,final,object,result,if,objects,equals,return,type,void,type,tell,rpc,invocation,result,null,else,if,objects,equals,return,type,completable,future,class,result,ask,rpc,invocation,future,timeout,else,completable,future,future,result,ask,rpc,invocation,future,timeout,result,future,result,get,future,timeout,get,size,future,timeout,get,unit,return,result
AkkaInvocationHandler -> private Object invokeRpc(Method method, Object[] args) throws Exception;1506976152;Invokes a RPC method by sending the RPC invocation details to the rpc endpoint.__@param method to call_@param args of the method call_@return result of the RPC_@throws Exception if the RPC invocation fails;private Object invokeRpc(Method method, Object[] args) throws Exception {_		String methodName = method.getName()__		Class<?>[] parameterTypes = method.getParameterTypes()__		Annotation[][] parameterAnnotations = method.getParameterAnnotations()__		Time futureTimeout = extractRpcTimeout(parameterAnnotations, args, timeout)___		final RpcInvocation rpcInvocation = createRpcInvocationMessage(methodName, parameterTypes, args)___		Class<?> returnType = method.getReturnType()___		final Object result___		if (Objects.equals(returnType, Void.TYPE)) {_			tell(rpcInvocation)___			result = null__		} else if (Objects.equals(returnType,CompletableFuture.class)) {_			_			result = ask(rpcInvocation, futureTimeout)__		} else {_			_			CompletableFuture<?> futureResult = ask(rpcInvocation, futureTimeout)___			result = futureResult.get(futureTimeout.getSize(), futureTimeout.getUnit())__		}__		return result__	};invokes,a,rpc,method,by,sending,the,rpc,invocation,details,to,the,rpc,endpoint,param,method,to,call,param,args,of,the,method,call,return,result,of,the,rpc,throws,exception,if,the,rpc,invocation,fails;private,object,invoke,rpc,method,method,object,args,throws,exception,string,method,name,method,get,name,class,parameter,types,method,get,parameter,types,annotation,parameter,annotations,method,get,parameter,annotations,time,future,timeout,extract,rpc,timeout,parameter,annotations,args,timeout,final,rpc,invocation,rpc,invocation,create,rpc,invocation,message,method,name,parameter,types,args,class,return,type,method,get,return,type,final,object,result,if,objects,equals,return,type,void,type,tell,rpc,invocation,result,null,else,if,objects,equals,return,type,completable,future,class,result,ask,rpc,invocation,future,timeout,else,completable,future,future,result,ask,rpc,invocation,future,timeout,result,future,result,get,future,timeout,get,size,future,timeout,get,unit,return,result
AkkaInvocationHandler -> private Object invokeRpc(Method method, Object[] args) throws Exception;1515516637;Invokes a RPC method by sending the RPC invocation details to the rpc endpoint.__@param method to call_@param args of the method call_@return result of the RPC_@throws Exception if the RPC invocation fails;private Object invokeRpc(Method method, Object[] args) throws Exception {_		String methodName = method.getName()__		Class<?>[] parameterTypes = method.getParameterTypes()__		Annotation[][] parameterAnnotations = method.getParameterAnnotations()__		Time futureTimeout = extractRpcTimeout(parameterAnnotations, args, timeout)___		final RpcInvocation rpcInvocation = createRpcInvocationMessage(methodName, parameterTypes, args)___		Class<?> returnType = method.getReturnType()___		final Object result___		if (Objects.equals(returnType, Void.TYPE)) {_			tell(rpcInvocation)___			result = null__		} else if (Objects.equals(returnType, CompletableFuture.class)) {_			_			result = ask(rpcInvocation, futureTimeout)__		} else {_			_			CompletableFuture<?> futureResult = ask(rpcInvocation, futureTimeout)___			result = futureResult.get(futureTimeout.getSize(), futureTimeout.getUnit())__		}__		return result__	};invokes,a,rpc,method,by,sending,the,rpc,invocation,details,to,the,rpc,endpoint,param,method,to,call,param,args,of,the,method,call,return,result,of,the,rpc,throws,exception,if,the,rpc,invocation,fails;private,object,invoke,rpc,method,method,object,args,throws,exception,string,method,name,method,get,name,class,parameter,types,method,get,parameter,types,annotation,parameter,annotations,method,get,parameter,annotations,time,future,timeout,extract,rpc,timeout,parameter,annotations,args,timeout,final,rpc,invocation,rpc,invocation,create,rpc,invocation,message,method,name,parameter,types,args,class,return,type,method,get,return,type,final,object,result,if,objects,equals,return,type,void,type,tell,rpc,invocation,result,null,else,if,objects,equals,return,type,completable,future,class,result,ask,rpc,invocation,future,timeout,else,completable,future,future,result,ask,rpc,invocation,future,timeout,result,future,result,get,future,timeout,get,size,future,timeout,get,unit,return,result
AkkaInvocationHandler -> private Object invokeRpc(Method method, Object[] args) throws Exception;1518716619;Invokes a RPC method by sending the RPC invocation details to the rpc endpoint.__@param method to call_@param args of the method call_@return result of the RPC_@throws Exception if the RPC invocation fails;private Object invokeRpc(Method method, Object[] args) throws Exception {_		String methodName = method.getName()__		Class<?>[] parameterTypes = method.getParameterTypes()__		Annotation[][] parameterAnnotations = method.getParameterAnnotations()__		Time futureTimeout = extractRpcTimeout(parameterAnnotations, args, timeout)___		final RpcInvocation rpcInvocation = createRpcInvocationMessage(methodName, parameterTypes, args)___		Class<?> returnType = method.getReturnType()___		final Object result___		if (Objects.equals(returnType, Void.TYPE)) {_			tell(rpcInvocation)___			result = null__		} else if (Objects.equals(returnType, CompletableFuture.class)) {_			_			result = ask(rpcInvocation, futureTimeout)__		} else {_			_			CompletableFuture<?> futureResult = ask(rpcInvocation, futureTimeout)___			result = futureResult.get(futureTimeout.getSize(), futureTimeout.getUnit())__		}__		return result__	};invokes,a,rpc,method,by,sending,the,rpc,invocation,details,to,the,rpc,endpoint,param,method,to,call,param,args,of,the,method,call,return,result,of,the,rpc,throws,exception,if,the,rpc,invocation,fails;private,object,invoke,rpc,method,method,object,args,throws,exception,string,method,name,method,get,name,class,parameter,types,method,get,parameter,types,annotation,parameter,annotations,method,get,parameter,annotations,time,future,timeout,extract,rpc,timeout,parameter,annotations,args,timeout,final,rpc,invocation,rpc,invocation,create,rpc,invocation,message,method,name,parameter,types,args,class,return,type,method,get,return,type,final,object,result,if,objects,equals,return,type,void,type,tell,rpc,invocation,result,null,else,if,objects,equals,return,type,completable,future,class,result,ask,rpc,invocation,future,timeout,else,completable,future,future,result,ask,rpc,invocation,future,timeout,result,future,result,get,future,timeout,get,size,future,timeout,get,unit,return,result
AkkaInvocationHandler -> private Object invokeRpc(Method method, Object[] args) throws Exception;1539833178;Invokes a RPC method by sending the RPC invocation details to the rpc endpoint.__@param method to call_@param args of the method call_@return result of the RPC_@throws Exception if the RPC invocation fails;private Object invokeRpc(Method method, Object[] args) throws Exception {_		String methodName = method.getName()__		Class<?>[] parameterTypes = method.getParameterTypes()__		Annotation[][] parameterAnnotations = method.getParameterAnnotations()__		Time futureTimeout = extractRpcTimeout(parameterAnnotations, args, timeout)___		final RpcInvocation rpcInvocation = createRpcInvocationMessage(methodName, parameterTypes, args)___		Class<?> returnType = method.getReturnType()___		final Object result___		if (Objects.equals(returnType, Void.TYPE)) {_			tell(rpcInvocation)___			result = null__		} else {_			_			CompletableFuture resultFuture = ask(rpcInvocation, futureTimeout)___			CompletableFuture completableFuture = resultFuture.thenApply((Object o) -> {_				if (o instanceof SerializedValue) {_					try {_						return  ((SerializedValue) o).deserializeValue(getClass().getClassLoader())__					} catch (IOException | ClassNotFoundException e) {_						throw new CompletionException(_							new RpcException("Could not deserialize the serialized payload of RPC method : "_								+ methodName, e))__					}_				} else {_					return o__				}_			})___			if (!Objects.equals(returnType, CompletableFuture.class)) {_				result = completableFuture.get(futureTimeout.getSize(), futureTimeout.getUnit())__			} else {_				result = completableFuture__			}_		}__		return result__	};invokes,a,rpc,method,by,sending,the,rpc,invocation,details,to,the,rpc,endpoint,param,method,to,call,param,args,of,the,method,call,return,result,of,the,rpc,throws,exception,if,the,rpc,invocation,fails;private,object,invoke,rpc,method,method,object,args,throws,exception,string,method,name,method,get,name,class,parameter,types,method,get,parameter,types,annotation,parameter,annotations,method,get,parameter,annotations,time,future,timeout,extract,rpc,timeout,parameter,annotations,args,timeout,final,rpc,invocation,rpc,invocation,create,rpc,invocation,message,method,name,parameter,types,args,class,return,type,method,get,return,type,final,object,result,if,objects,equals,return,type,void,type,tell,rpc,invocation,result,null,else,completable,future,result,future,ask,rpc,invocation,future,timeout,completable,future,completable,future,result,future,then,apply,object,o,if,o,instanceof,serialized,value,try,return,serialized,value,o,deserialize,value,get,class,get,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,completion,exception,new,rpc,exception,could,not,deserialize,the,serialized,payload,of,rpc,method,method,name,e,else,return,o,if,objects,equals,return,type,completable,future,class,result,completable,future,get,future,timeout,get,size,future,timeout,get,unit,else,result,completable,future,return,result
AkkaInvocationHandler -> private Object invokeRpc(Method method, Object[] args) throws Exception;1548316130;Invokes a RPC method by sending the RPC invocation details to the rpc endpoint.__@param method to call_@param args of the method call_@return result of the RPC_@throws Exception if the RPC invocation fails;private Object invokeRpc(Method method, Object[] args) throws Exception {_		String methodName = method.getName()__		Class<?>[] parameterTypes = method.getParameterTypes()__		Annotation[][] parameterAnnotations = method.getParameterAnnotations()__		Time futureTimeout = extractRpcTimeout(parameterAnnotations, args, timeout)___		final RpcInvocation rpcInvocation = createRpcInvocationMessage(methodName, parameterTypes, args)___		Class<?> returnType = method.getReturnType()___		final Object result___		if (Objects.equals(returnType, Void.TYPE)) {_			tell(rpcInvocation)___			result = null__		} else {_			_			CompletableFuture<?> resultFuture = ask(rpcInvocation, futureTimeout)___			CompletableFuture<?> completableFuture = resultFuture.thenApply((Object o) -> {_				if (o instanceof SerializedValue) {_					try {_						return  ((SerializedValue<?>) o).deserializeValue(getClass().getClassLoader())__					} catch (IOException | ClassNotFoundException e) {_						throw new CompletionException(_							new RpcException("Could not deserialize the serialized payload of RPC method : "_								+ methodName, e))__					}_				} else {_					return o__				}_			})___			if (Objects.equals(returnType, CompletableFuture.class)) {_				result = completableFuture__			} else {_				try {_					result = completableFuture.get(futureTimeout.getSize(), futureTimeout.getUnit())__				} catch (ExecutionException ee) {_					throw new RpcException("Failure while obtaining synchronous RPC result.", ExceptionUtils.stripExecutionException(ee))__				}_			}_		}__		return result__	};invokes,a,rpc,method,by,sending,the,rpc,invocation,details,to,the,rpc,endpoint,param,method,to,call,param,args,of,the,method,call,return,result,of,the,rpc,throws,exception,if,the,rpc,invocation,fails;private,object,invoke,rpc,method,method,object,args,throws,exception,string,method,name,method,get,name,class,parameter,types,method,get,parameter,types,annotation,parameter,annotations,method,get,parameter,annotations,time,future,timeout,extract,rpc,timeout,parameter,annotations,args,timeout,final,rpc,invocation,rpc,invocation,create,rpc,invocation,message,method,name,parameter,types,args,class,return,type,method,get,return,type,final,object,result,if,objects,equals,return,type,void,type,tell,rpc,invocation,result,null,else,completable,future,result,future,ask,rpc,invocation,future,timeout,completable,future,completable,future,result,future,then,apply,object,o,if,o,instanceof,serialized,value,try,return,serialized,value,o,deserialize,value,get,class,get,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,completion,exception,new,rpc,exception,could,not,deserialize,the,serialized,payload,of,rpc,method,method,name,e,else,return,o,if,objects,equals,return,type,completable,future,class,result,completable,future,else,try,result,completable,future,get,future,timeout,get,size,future,timeout,get,unit,catch,execution,exception,ee,throw,new,rpc,exception,failure,while,obtaining,synchronous,rpc,result,exception,utils,strip,execution,exception,ee,return,result
AkkaInvocationHandler -> private Object invokeRpc(Method method, Object[] args) throws Exception;1549533702;Invokes a RPC method by sending the RPC invocation details to the rpc endpoint.__@param method to call_@param args of the method call_@return result of the RPC_@throws Exception if the RPC invocation fails;private Object invokeRpc(Method method, Object[] args) throws Exception {_		String methodName = method.getName()__		Class<?>[] parameterTypes = method.getParameterTypes()__		Annotation[][] parameterAnnotations = method.getParameterAnnotations()__		Time futureTimeout = extractRpcTimeout(parameterAnnotations, args, timeout)___		final RpcInvocation rpcInvocation = createRpcInvocationMessage(methodName, parameterTypes, args)___		Class<?> returnType = method.getReturnType()___		final Object result___		if (Objects.equals(returnType, Void.TYPE)) {_			tell(rpcInvocation)___			result = null__		} else {_			_			CompletableFuture<?> resultFuture = ask(rpcInvocation, futureTimeout)___			CompletableFuture<?> completableFuture = resultFuture.thenApply((Object o) -> {_				if (o instanceof SerializedValue) {_					try {_						return  ((SerializedValue<?>) o).deserializeValue(getClass().getClassLoader())__					} catch (IOException | ClassNotFoundException e) {_						throw new CompletionException(_							new RpcException("Could not deserialize the serialized payload of RPC method : "_								+ methodName, e))__					}_				} else {_					return o__				}_			})___			if (Objects.equals(returnType, CompletableFuture.class)) {_				result = completableFuture__			} else {_				try {_					result = completableFuture.get(futureTimeout.getSize(), futureTimeout.getUnit())__				} catch (ExecutionException ee) {_					throw new RpcException("Failure while obtaining synchronous RPC result.", ExceptionUtils.stripExecutionException(ee))__				}_			}_		}__		return result__	};invokes,a,rpc,method,by,sending,the,rpc,invocation,details,to,the,rpc,endpoint,param,method,to,call,param,args,of,the,method,call,return,result,of,the,rpc,throws,exception,if,the,rpc,invocation,fails;private,object,invoke,rpc,method,method,object,args,throws,exception,string,method,name,method,get,name,class,parameter,types,method,get,parameter,types,annotation,parameter,annotations,method,get,parameter,annotations,time,future,timeout,extract,rpc,timeout,parameter,annotations,args,timeout,final,rpc,invocation,rpc,invocation,create,rpc,invocation,message,method,name,parameter,types,args,class,return,type,method,get,return,type,final,object,result,if,objects,equals,return,type,void,type,tell,rpc,invocation,result,null,else,completable,future,result,future,ask,rpc,invocation,future,timeout,completable,future,completable,future,result,future,then,apply,object,o,if,o,instanceof,serialized,value,try,return,serialized,value,o,deserialize,value,get,class,get,class,loader,catch,ioexception,class,not,found,exception,e,throw,new,completion,exception,new,rpc,exception,could,not,deserialize,the,serialized,payload,of,rpc,method,method,name,e,else,return,o,if,objects,equals,return,type,completable,future,class,result,completable,future,else,try,result,completable,future,get,future,timeout,get,size,future,timeout,get,unit,catch,execution,exception,ee,throw,new,rpc,exception,failure,while,obtaining,synchronous,rpc,result,exception,utils,strip,execution,exception,ee,return,result
