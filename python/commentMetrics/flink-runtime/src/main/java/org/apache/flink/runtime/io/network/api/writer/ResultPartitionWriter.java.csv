# id;timestamp;commentText;codeText;commentWords;codeWords
ResultPartitionWriter -> public void writeBufferToAllChannels(final Buffer eventBuffer) throws IOException;1483975430;Writes the given buffer to all available target channels.__The buffer is taken over and used for each of the channels._It will be recycled afterwards.__@param eventBuffer the buffer to write_@throws IOException;public void writeBufferToAllChannels(final Buffer eventBuffer) throws IOException {_		try {_			for (int targetChannel = 0_ targetChannel < partition.getNumberOfSubpartitions()_ targetChannel++) {_				_				eventBuffer.retain()__				writeBuffer(eventBuffer, targetChannel)__			}_		} finally {_			_			_			eventBuffer.recycle()__		}_	};writes,the,given,buffer,to,all,available,target,channels,the,buffer,is,taken,over,and,used,for,each,of,the,channels,it,will,be,recycled,afterwards,param,event,buffer,the,buffer,to,write,throws,ioexception;public,void,write,buffer,to,all,channels,final,buffer,event,buffer,throws,ioexception,try,for,int,target,channel,0,target,channel,partition,get,number,of,subpartitions,target,channel,event,buffer,retain,write,buffer,event,buffer,target,channel,finally,event,buffer,recycle
ResultPartitionWriter -> public void writeBufferToAllChannels(final Buffer eventBuffer) throws IOException;1485269495;Writes the given buffer to all available target channels.__The buffer is taken over and used for each of the channels._It will be recycled afterwards.__@param eventBuffer the buffer to write_@throws IOException;public void writeBufferToAllChannels(final Buffer eventBuffer) throws IOException {_		try {_			for (int targetChannel = 0_ targetChannel < partition.getNumberOfSubpartitions()_ targetChannel++) {_				_				eventBuffer.retain()__				writeBuffer(eventBuffer, targetChannel)__			}_		} finally {_			_			_			eventBuffer.recycle()__		}_	};writes,the,given,buffer,to,all,available,target,channels,the,buffer,is,taken,over,and,used,for,each,of,the,channels,it,will,be,recycled,afterwards,param,event,buffer,the,buffer,to,write,throws,ioexception;public,void,write,buffer,to,all,channels,final,buffer,event,buffer,throws,ioexception,try,for,int,target,channel,0,target,channel,partition,get,number,of,subpartitions,target,channel,event,buffer,retain,write,buffer,event,buffer,target,channel,finally,event,buffer,recycle
ResultPartitionWriter -> public void writeBufferToAllChannels(final Buffer eventBuffer) throws IOException;1513094474;Writes the given buffer to all available target channels.__The buffer is taken over and used for each of the channels._It will be recycled afterwards.__@param eventBuffer the buffer to write_@throws IOException;public void writeBufferToAllChannels(final Buffer eventBuffer) throws IOException {_		try {_			for (int targetChannel = 0_ targetChannel < partition.getNumberOfSubpartitions()_ targetChannel++) {_				_				eventBuffer.retain()__				writeBuffer(eventBuffer, targetChannel)__			}_		} finally {_			_			_			eventBuffer.recycle()__		}_	};writes,the,given,buffer,to,all,available,target,channels,the,buffer,is,taken,over,and,used,for,each,of,the,channels,it,will,be,recycled,afterwards,param,event,buffer,the,buffer,to,write,throws,ioexception;public,void,write,buffer,to,all,channels,final,buffer,event,buffer,throws,ioexception,try,for,int,target,channel,0,target,channel,partition,get,number,of,subpartitions,target,channel,event,buffer,retain,write,buffer,event,buffer,target,channel,finally,event,buffer,recycle
ResultPartitionWriter -> void addBufferConsumer(BufferConsumer bufferConsumer, int subpartitionIndex) throws IOException_;1519039287;Adds the bufferConsumer to the subpartition with the given index.__<p>For PIPELINED {@link org.apache.flink.runtime.io.network.partition.ResultPartitionType}s,_this will trigger the deployment of consuming tasks after the first buffer has been added.__<p>This method takes the ownership of the passed {@code bufferConsumer} and thus is responsible for releasing_it's resources.;void addBufferConsumer(BufferConsumer bufferConsumer, int subpartitionIndex) throws IOException_;adds,the,buffer,consumer,to,the,subpartition,with,the,given,index,p,for,pipelined,link,org,apache,flink,runtime,io,network,partition,result,partition,type,s,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added,p,this,method,takes,the,ownership,of,the,passed,code,buffer,consumer,and,thus,is,responsible,for,releasing,it,s,resources;void,add,buffer,consumer,buffer,consumer,buffer,consumer,int,subpartition,index,throws,ioexception
ResultPartitionWriter -> void addBufferConsumer(BufferConsumer bufferConsumer, int subpartitionIndex) throws IOException_;1519039301;Adds the bufferConsumer to the subpartition with the given index.__<p>For PIPELINED {@link org.apache.flink.runtime.io.network.partition.ResultPartitionType}s,_this will trigger the deployment of consuming tasks after the first buffer has been added.__<p>This method takes the ownership of the passed {@code bufferConsumer} and thus is responsible for releasing_it's resources.__<p>To avoid problems with data re-ordering, before adding new {@link BufferConsumer} the previously added one_the given {@code subpartitionIndex} must be marked as {@link BufferConsumer#isFinished()}.;void addBufferConsumer(BufferConsumer bufferConsumer, int subpartitionIndex) throws IOException_;adds,the,buffer,consumer,to,the,subpartition,with,the,given,index,p,for,pipelined,link,org,apache,flink,runtime,io,network,partition,result,partition,type,s,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added,p,this,method,takes,the,ownership,of,the,passed,code,buffer,consumer,and,thus,is,responsible,for,releasing,it,s,resources,p,to,avoid,problems,with,data,re,ordering,before,adding,new,link,buffer,consumer,the,previously,added,one,the,given,code,subpartition,index,must,be,marked,as,link,buffer,consumer,is,finished;void,add,buffer,consumer,buffer,consumer,buffer,consumer,int,subpartition,index,throws,ioexception
ResultPartitionWriter -> void addBufferConsumer(BufferConsumer bufferConsumer, int subpartitionIndex) throws IOException_;1519308961;Adds the bufferConsumer to the subpartition with the given index.__<p>For PIPELINED {@link org.apache.flink.runtime.io.network.partition.ResultPartitionType}s,_this will trigger the deployment of consuming tasks after the first buffer has been added.__<p>This method takes the ownership of the passed {@code bufferConsumer} and thus is responsible for releasing_it's resources.__<p>To avoid problems with data re-ordering, before adding new {@link BufferConsumer} the previously added one_the given {@code subpartitionIndex} must be marked as {@link BufferConsumer#isFinished()}.;void addBufferConsumer(BufferConsumer bufferConsumer, int subpartitionIndex) throws IOException_;adds,the,buffer,consumer,to,the,subpartition,with,the,given,index,p,for,pipelined,link,org,apache,flink,runtime,io,network,partition,result,partition,type,s,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added,p,this,method,takes,the,ownership,of,the,passed,code,buffer,consumer,and,thus,is,responsible,for,releasing,it,s,resources,p,to,avoid,problems,with,data,re,ordering,before,adding,new,link,buffer,consumer,the,previously,added,one,the,given,code,subpartition,index,must,be,marked,as,link,buffer,consumer,is,finished;void,add,buffer,consumer,buffer,consumer,buffer,consumer,int,subpartition,index,throws,ioexception
ResultPartitionWriter -> default void writeBufferToAllSubpartitions(final Buffer buffer) throws IOException;1513102147;Writes the given buffer to all available target subpartitions.__<p>The buffer is taken over and used for each of the channels._It will be recycled afterwards.__@param buffer the buffer to write;default void writeBufferToAllSubpartitions(final Buffer buffer) throws IOException {_		try {_			for (int subpartition = 0_ subpartition < getNumberOfSubpartitions()_ subpartition++) {_				_				buffer.retain()__				writeBuffer(buffer, subpartition)__			}_		} finally {_			_			_			buffer.recycle()__		}_	};writes,the,given,buffer,to,all,available,target,subpartitions,p,the,buffer,is,taken,over,and,used,for,each,of,the,channels,it,will,be,recycled,afterwards,param,buffer,the,buffer,to,write;default,void,write,buffer,to,all,subpartitions,final,buffer,buffer,throws,ioexception,try,for,int,subpartition,0,subpartition,get,number,of,subpartitions,subpartition,buffer,retain,write,buffer,buffer,subpartition,finally,buffer,recycle
ResultPartitionWriter -> default void writeBufferToAllSubpartitions(final Buffer buffer) throws IOException;1516285878;Writes the given buffer to all available target subpartitions.__<p>The buffer is taken over and used for each of the channels._It will be recycled afterwards.__@param buffer the buffer to write;default void writeBufferToAllSubpartitions(final Buffer buffer) throws IOException {_		try {_			for (int subpartition = 0_ subpartition < getNumberOfSubpartitions()_ subpartition++) {_				_				buffer.retainBuffer()__				writeBuffer(buffer, subpartition)__			}_		} finally {_			_			_			buffer.recycleBuffer()__		}_	};writes,the,given,buffer,to,all,available,target,subpartitions,p,the,buffer,is,taken,over,and,used,for,each,of,the,channels,it,will,be,recycled,afterwards,param,buffer,the,buffer,to,write;default,void,write,buffer,to,all,subpartitions,final,buffer,buffer,throws,ioexception,try,for,int,subpartition,0,subpartition,get,number,of,subpartitions,subpartition,buffer,retain,buffer,write,buffer,buffer,subpartition,finally,buffer,recycle,buffer
ResultPartitionWriter -> default void writeBufferToAllSubpartitions(final Buffer buffer) throws IOException;1519039278;Writes the given buffer to all available target subpartitions.__<p>The buffer is taken over and used for each of the channels._It will be recycled afterwards.__<p>This method takes the ownership of the passed {@code buffer} and thus is responsible for releasing it's_resources.__@param buffer the buffer to write;default void writeBufferToAllSubpartitions(final Buffer buffer) throws IOException {_		try {_			for (int subpartition = 0_ subpartition < getNumberOfSubpartitions()_ subpartition++) {_				_				buffer.retainBuffer()__				writeBuffer(buffer, subpartition)__			}_		} finally {_			_			_			buffer.recycleBuffer()__		}_	};writes,the,given,buffer,to,all,available,target,subpartitions,p,the,buffer,is,taken,over,and,used,for,each,of,the,channels,it,will,be,recycled,afterwards,p,this,method,takes,the,ownership,of,the,passed,code,buffer,and,thus,is,responsible,for,releasing,it,s,resources,param,buffer,the,buffer,to,write;default,void,write,buffer,to,all,subpartitions,final,buffer,buffer,throws,ioexception,try,for,int,subpartition,0,subpartition,get,number,of,subpartitions,subpartition,buffer,retain,buffer,write,buffer,buffer,subpartition,finally,buffer,recycle,buffer
ResultPartitionWriter -> void writeBuffer(Buffer buffer, int subpartitionIndex) throws IOException_;1513102147;Adds a buffer to the subpartition with the given index.__<p>For PIPELINED {@link org.apache.flink.runtime.io.network.partition.ResultPartitionType}s,_this will trigger the deployment of consuming tasks after the first buffer has been added.;void writeBuffer(Buffer buffer, int subpartitionIndex) throws IOException_;adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,link,org,apache,flink,runtime,io,network,partition,result,partition,type,s,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;void,write,buffer,buffer,buffer,int,subpartition,index,throws,ioexception
ResultPartitionWriter -> void writeBuffer(Buffer buffer, int subpartitionIndex) throws IOException_;1516285878;Adds a buffer to the subpartition with the given index.__<p>For PIPELINED {@link org.apache.flink.runtime.io.network.partition.ResultPartitionType}s,_this will trigger the deployment of consuming tasks after the first buffer has been added.;void writeBuffer(Buffer buffer, int subpartitionIndex) throws IOException_;adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,link,org,apache,flink,runtime,io,network,partition,result,partition,type,s,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added;void,write,buffer,buffer,buffer,int,subpartition,index,throws,ioexception
ResultPartitionWriter -> void writeBuffer(Buffer buffer, int subpartitionIndex) throws IOException_;1519039278;Adds a buffer to the subpartition with the given index.__<p>For PIPELINED {@link org.apache.flink.runtime.io.network.partition.ResultPartitionType}s,_this will trigger the deployment of consuming tasks after the first buffer has been added.__<p>This method takes the ownership of the passed {@code buffer} and thus is responsible for releasing it's_resources.;void writeBuffer(Buffer buffer, int subpartitionIndex) throws IOException_;adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,link,org,apache,flink,runtime,io,network,partition,result,partition,type,s,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added,p,this,method,takes,the,ownership,of,the,passed,code,buffer,and,thus,is,responsible,for,releasing,it,s,resources;void,write,buffer,buffer,buffer,int,subpartition,index,throws,ioexception
ResultPartitionWriter -> void writeBuffer(Buffer buffer, int subpartitionIndex) throws IOException_;1519039285;Adds a buffer to the subpartition with the given index.__<p>For PIPELINED {@link org.apache.flink.runtime.io.network.partition.ResultPartitionType}s,_this will trigger the deployment of consuming tasks after the first buffer has been added.__<p>This method takes the ownership of the passed {@code buffer} and thus is responsible for releasing it's_resources.;void writeBuffer(Buffer buffer, int subpartitionIndex) throws IOException_;adds,a,buffer,to,the,subpartition,with,the,given,index,p,for,pipelined,link,org,apache,flink,runtime,io,network,partition,result,partition,type,s,this,will,trigger,the,deployment,of,consuming,tasks,after,the,first,buffer,has,been,added,p,this,method,takes,the,ownership,of,the,passed,code,buffer,and,thus,is,responsible,for,releasing,it,s,resources;void,write,buffer,buffer,buffer,int,subpartition,index,throws,ioexception
