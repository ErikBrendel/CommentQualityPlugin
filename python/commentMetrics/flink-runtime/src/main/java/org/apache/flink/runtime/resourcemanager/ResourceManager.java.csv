# id;timestamp;commentText;codeText;commentWords;codeWords
ResourceManager -> protected abstract void initialize() throws Exception_;1473383484;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1474858756;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1474965482;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1475110587;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1475154512;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1475661506;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1475679726;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1476113770;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1476483941;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1476699326;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> protected abstract void initialize() throws Exception_;1476712982;Initializes the framework specific components.__@throws Exception Exceptions during initialization cause the resource manager to fail.;protected abstract void initialize() throws Exception_;initializes,the,framework,specific,components,throws,exception,exceptions,during,initialization,cause,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,exception
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1472481329;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1472699640;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1472741611;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1473383484;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1474459992;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1474460045;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1474471581;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1474482025;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1474858756;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1474965482;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1475110587;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1475154512;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1475661506;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1475679726;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1476113770;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1476483941;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1476699326;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return this.leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,this,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionID();1476712982;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionID() {_		return leaderSessionID__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1486637985;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)___						slotManager.registerTaskManager(registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,worker,type,new,worker,worker,started,task,executor,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1487842224;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1490105415;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)___						slotManager.registerTaskManager(registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,worker,type,new,worker,worker,started,task,executor,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1495154056;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						}_						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)___						slotManager.registerTaskManager(registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1498565455;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1498568657;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1499156512;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1499354178;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1501251235;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 			final SlotReport slotReport);1501519642;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_			final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___							_							slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__						}__						final WorkerType newWorker = workerStarted(taskExecutorResourceId)___						if(newWorker == null) {_							log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_									"not recognize it", taskExecutorResourceId, taskExecutorAddress)__							return new RegistrationResponse.Decline("unrecognized TaskExecutor")__						} else {_							WorkerRegistration<WorkerType> registration =_								new WorkerRegistration<>(taskExecutorGateway, newWorker)___							taskExecutors.put(taskExecutorResourceId, registration)___							slotManager.registerTaskManager(registration, slotReport)___							taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_								@Override_								public void receiveHeartbeat(ResourceID resourceID, Void payload) {_									_									_								}__								@Override_								public void requestHeartbeat(ResourceID resourceID, Void payload) {_									taskExecutorGateway.heartbeatFromResourceManager(resourceID)__								}_							})___							return new TaskExecutorRegistrationSuccess(_								registration.getInstanceID(),_								resourceId,_								resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__						}_					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1474858756;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)__		JobMasterLeaderListener jobMasterLeaderListener = jobMasterLeaderRetrievalListeners.get(jobId)___		UUID leaderID = jobMasterLeaderListener.getLeaderID()___		if (jobMasterGateway != null_				&& jobMasterLeaderID.equals(leaderID)_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,job,master,leader,listener,job,master,leader,listener,job,master,leader,retrieval,listeners,get,job,id,uuid,leader,id,job,master,leader,listener,get,leader,id,if,job,master,gateway,null,job,master,leader,id,equals,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1474965482;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)__		JobMasterLeaderListener jobMasterLeaderListener = jobMasterLeaderRetrievalListeners.get(jobId)___		UUID leaderID = jobMasterLeaderListener.getLeaderID()___		if (jobMasterGateway != null_				&& jobMasterLeaderID.equals(leaderID)_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,job,master,leader,listener,job,master,leader,listener,job,master,leader,retrieval,listeners,get,job,id,uuid,leader,id,job,master,leader,listener,get,leader,id,if,job,master,gateway,null,job,master,leader,id,equals,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1475110587;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)__		JobMasterLeaderListener jobMasterLeaderListener = jobMasterLeaderRetrievalListeners.get(jobId)___		UUID leaderID = jobMasterLeaderListener.getLeaderID()___		if (jobMasterGateway != null_				&& jobMasterLeaderID.equals(leaderID)_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,job,master,leader,listener,job,master,leader,listener,job,master,leader,retrieval,listeners,get,job,id,uuid,leader,id,job,master,leader,listener,get,leader,id,if,job,master,gateway,null,job,master,leader,id,equals,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1507240448;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1507761617;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1508234238;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1508245421;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1508252550;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1511869419;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1511873631;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1512727362;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1517911296;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1517911540;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1518718788;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1521033687;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1521641386;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1521667168;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			SlotReport slotReport, 			int dataPort, 			HardwareDescription hardwareDescription);1525374816;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			SlotReport slotReport,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1474858756;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1474965482;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1475110587;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1475154512;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1475661506;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1475679726;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1476113770;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1476483941;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1476699326;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1476712982;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1476806580;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1476954428;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1477965803;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1478161487;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1480523747;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1486637985;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1487842224;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1488815863;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1489416902;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1489508610;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1490105415;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1490166753;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1490170142;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1490180625;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1490805029;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1495154056;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1498565455;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1498568657;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1499156512;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1499354178;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1501251235;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1501519642;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1501530463;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1501580028;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1502196227;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1502366829;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1502714913;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1503019375;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1503580260;Allocates a resource using the resource profile._@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1503588382;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1505921975;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1507240448;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1507653580;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1507738083;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1507761617;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1508234238;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1508245421;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1508252550;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1508327406;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1508426573;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1508494390;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1511869419;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1511873631;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1512727362;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1517911296;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1517911540;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1518718788;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1521033687;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1521641386;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1521667168;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1525374816;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1525934187;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1527094227;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1530503760;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1531923839;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1531998464;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1532919460;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1534241555;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1536623937;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1536846489;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract void startNewWorker(ResourceProfile resourceProfile)_;1537448260;Allocates a resource using the resource profile.__@param resourceProfile The resource description;@VisibleForTesting_	public abstract void startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description;visible,for,testing,public,abstract,void,start,new,worker,resource,profile,resource,profile
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1486637985;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1487842224;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1490105415;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1490805029;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1495154056;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1498565455;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1498568657;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1499156512;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1499354178;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1501251235;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1501519642;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1501530463;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1501580028;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1502196227;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1502366829;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1502714913;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1503019375;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1503580260;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final UUID jobManagerLeaderId = jobManagerRegistration.getLeaderID()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerLeaderId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(jobManagerLeaderId, getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,uuid,job,manager,leader,id,job,manager,registration,get,leader,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,leader,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,job,manager,leader,id,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1503588382;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1505921975;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1507240448;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1507653580;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1507738083;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1507761617;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1508234238;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1508245421;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1508252550;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1508327406;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1508426573;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1508494390;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1511869419;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1511873631;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1512727362;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1517911296;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1517911540;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1518718788;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1521033687;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1521641386;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1521667168;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1525374816;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1525934187;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1527094227;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1530503760;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1531923839;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1531998464;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1532919460;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1534241555;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1534938698;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1536623937;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1536846489;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1537448260;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1537512807;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1539159479;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1539582212;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1542290209;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1549383138;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1549533702;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void closeJobManagerConnection(JobID jobId, Exception cause);1550403532;This method should be called by the framework once it detects that a currently registered_job manager has failed.__@param jobId identifying the job whose leader shall be disconnected._@param cause The exception which cause the JobManager failed.;protected void closeJobManagerConnection(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			final ResourceID jobManagerResourceId = jobManagerRegistration.getJobManagerResourceID()__			final JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()__			final JobMasterId jobMasterId = jobManagerRegistration.getJobMasterId()___			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobMasterId,_				jobMasterGateway.getAddress(),_				jobId)___			jobManagerHeartbeatManager.unmonitorTarget(jobManagerResourceId)___			jmResourceIdRegistrations.remove(jobManagerResourceId)___			_			jobMasterGateway.disconnectResourceManager(getFencingToken(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,job,manager,has,failed,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected,param,cause,the,exception,which,cause,the,job,manager,failed;protected,void,close,job,manager,connection,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,final,resource,id,job,manager,resource,id,job,manager,registration,get,job,manager,resource,id,final,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,final,job,master,id,job,master,id,job,manager,registration,get,job,master,id,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,master,id,job,master,gateway,get,address,job,id,job,manager,heartbeat,manager,unmonitor,target,job,manager,resource,id,jm,resource,id,registrations,remove,job,manager,resource,id,job,master,gateway,disconnect,resource,manager,get,fencing,token,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotID);1475661506;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotID The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotID) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			final ResourceID resourceId = slotID.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationInstanceID = registration.getInstanceID()__				if (registrationInstanceID.equals(instanceID)) {_					runAsync(new Runnable() {_						@Override_						public void run() {_							slotManager.notifySlotAvailable(resourceId, slotID)__						}_					})__				}_			}_		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,instance,id,registration,get,instance,id,if,registration,instance,id,equals,instance,id,run,async,new,runnable,override,public,void,run,slot,manager,notify,slot,available,resource,id,slot,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotID);1475679726;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotID The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotID) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			final ResourceID resourceId = slotID.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationInstanceID = registration.getInstanceID()__				if (registrationInstanceID.equals(instanceID)) {_					runAsync(new Runnable() {_						@Override_						public void run() {_							slotManager.notifySlotAvailable(resourceId, slotID)__						}_					})__				}_			}_		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,instance,id,registration,get,instance,id,if,registration,instance,id,equals,instance,id,run,async,new,runnable,override,public,void,run,slot,manager,notify,slot,available,resource,id,slot,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotID);1476483941;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotID The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotID) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			final ResourceID resourceId = slotID.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationInstanceID = registration.getInstanceID()__				if (registrationInstanceID.equals(instanceID)) {_					runAsync(new Runnable() {_						@Override_						public void run() {_							slotManager.notifySlotAvailable(resourceId, slotID)__						}_					})__				}_			}_		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,instance,id,registration,get,instance,id,if,registration,instance,id,equals,instance,id,run,async,new,runnable,override,public,void,run,slot,manager,notify,slot,available,resource,id,slot,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotID);1476699326;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotID The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotID) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			final ResourceID resourceId = slotID.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationInstanceID = registration.getInstanceID()__				if (registrationInstanceID.equals(instanceID)) {_					runAsync(new Runnable() {_						@Override_						public void run() {_							slotManager.notifySlotAvailable(resourceId, slotID)__						}_					})__				}_			}_		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,instance,id,registration,get,instance,id,if,registration,instance,id,equals,instance,id,run,async,new,runnable,override,public,void,run,slot,manager,notify,slot,available,resource,id,slot,id
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1476712982;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1476806580;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1476954428;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1477965803;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1478161487;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1480523747;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1486637985;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1487842224;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1488815863;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1489416902;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1489508610;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1490105415;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1490166753;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1490170142;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1490180625;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1490805029;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1495154056;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1498565455;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1498568657;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1499156512;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1499354178;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1501251235;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1501519642;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1501530463;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String address);1501580028;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1521667168;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1525374816;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1525934187;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1527094227;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1530503760;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1531923839;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1531998464;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1532919460;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1534241555;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1534938698;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1536623937;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1536846489;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1537448260;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1537512807;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1539159479;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1539582212;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1542290209;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1549383138;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1549533702;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void internalDeregisterApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1550403532;The framework specific code to deregister the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void internalDeregisterApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,to,deregister,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,internal,deregister,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1476712982;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionID != null) {_					clearState()__				}__				leaderSessionID = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1476806580;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1476954428;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1477965803;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1478161487;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1480523747;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1486637985;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1487842224;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1488815863;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1489416902;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1489508610;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1490105415;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1490166753;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1490170142;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1490180625;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1490805029;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1495154056;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1498565455;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1498568657;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1499156512;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1499354178;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1501251235;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1501519642;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1501530463;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1501580028;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1502196227;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1502366829;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1502714913;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1503019375;Callback method when current resourceManager is granted leadership__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), newLeaderSessionID)___				_				if (leaderSessionId != null) {_					clearState()__				}__				leaderSessionId = newLeaderSessionID___				slotManager.start(leaderSessionId, getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(new Runnable() {_					@Override_					public void run() {_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__					}_				})__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,new,leader,session,id,if,leader,session,id,null,clear,state,leader,session,id,new,leader,session,id,slot,manager,start,leader,session,id,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,new,runnable,override,public,void,run,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1503580260;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1503588382;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1505921975;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1507240448;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1507653580;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1507738083;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceManagerActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,manager,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1507761617;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1508234238;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1508245421;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1508252550;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1508327406;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1508426573;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1508494390;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1511869419;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1511873631;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1512727362;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1517911296;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1517911540;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1518718788;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1521033687;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1521641386;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1521667168;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = new ResourceManagerId(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,new,resource,manager,id,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1525374816;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.fromUuid(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,from,uuid,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1525934187;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.fromUuid(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,from,uuid,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1527094227;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.fromUuid(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,from,uuid,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1530503760;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.fromUuid(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,from,uuid,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1531923839;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.fromUuid(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,from,uuid,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1531998464;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.fromUuid(newLeaderSessionID)___				log.info("ResourceManager {} was granted leadership with fencing token {}", getAddress(), newResourceManagerId)___				_				if (getFencingToken() != null) {_					clearState()__				}__				setFencingToken(newResourceManagerId)___				slotManager.start(getFencingToken(), getMainThreadExecutor(), new ResourceActionsImpl())___				getRpcService().execute(_					() ->_						_						leaderElectionService.confirmLeaderSessionID(newLeaderSessionID))__			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,from,uuid,new,leader,session,id,log,info,resource,manager,was,granted,leadership,with,fencing,token,get,address,new,resource,manager,id,if,get,fencing,token,null,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,start,get,fencing,token,get,main,thread,executor,new,resource,actions,impl,get,rpc,service,execute,leader,election,service,confirm,leader,session,id,new,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1532919460;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1534241555;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1534938698;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1536623937;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1536846489;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1537448260;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1537512807;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1539159479;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1539582212;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1542290209;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1549383138;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1549533702;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> @Override 	public void grantLeadership(final UUID newLeaderSessionID);1550403532;Callback method when current resourceManager is granted leadership.__@param newLeaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID newLeaderSessionID) {_		final CompletableFuture<Boolean> acceptLeadershipFuture = clearStateFuture_			.thenComposeAsync((ignored) -> tryAcceptLeadership(newLeaderSessionID), getUnfencedMainThreadExecutor())___		final CompletableFuture<Void> confirmationFuture = acceptLeadershipFuture.thenAcceptAsync(_			(acceptLeadership) -> {_				if (acceptLeadership) {_					_					leaderElectionService.confirmLeaderSessionID(newLeaderSessionID)__				}_			},_			getRpcService().getExecutor())___		confirmationFuture.whenComplete(_			(Void ignored, Throwable throwable) -> {_				if (throwable != null) {_					onFatalError(ExceptionUtils.stripCompletionException(throwable))__				}_			})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,new,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,new,leader,session,id,final,completable,future,boolean,accept,leadership,future,clear,state,future,then,compose,async,ignored,try,accept,leadership,new,leader,session,id,get,unfenced,main,thread,executor,final,completable,future,void,confirmation,future,accept,leadership,future,then,accept,async,accept,leadership,if,accept,leadership,leader,election,service,confirm,leader,session,id,new,leader,session,id,get,rpc,service,get,executor,confirmation,future,when,complete,void,ignored,throwable,throwable,if,throwable,null,on,fatal,error,exception,utils,strip,completion,exception,throwable
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1507240448;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1511869419;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1511873631;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1512727362;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1517911296;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1517911540;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1518718788;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1521033687;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1521641386;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1521667168;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1525374816;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1525934187;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1527094227;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1530503760;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1531923839;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1531998464;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1532919460;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1534241555;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1534938698;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1536623937;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1536846489;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1537448260;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1537512807;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1539159479;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1539582212;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1542290209;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1549383138;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1549533702;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> public abstract boolean stopWorker(WorkerType worker)_;1550403532;Stops the given worker.__@param worker The worker._@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(WorkerType worker)_;stops,the,given,worker,param,worker,the,worker,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,worker,type,worker
ResourceManager -> @Override 	public CompletableFuture<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 			final ResourceID taskExecutorResourceId, 			final SlotReport slotReport, 			final Time timeout);1502196227;Register a {@link TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@Override_	public CompletableFuture<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_			final ResourceID taskExecutorResourceId,_			final SlotReport slotReport,_			final Time timeout) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			CompletableFuture<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(_				(TaskExecutorGateway taskExecutorGateway, Throwable throwable) -> {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						return registerTaskExecutorInternal(_							taskExecutorGateway,_							taskExecutorAddress,_							taskExecutorResourceId,_							slotReport)__					}_				},_				getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return CompletableFuture.completedFuture(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;override,public,completable,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,final,time,timeout,if,objects,equals,leader,session,id,resource,manager,leader,id,completable,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,return,register,task,executor,internal,task,executor,gateway,task,executor,address,task,executor,resource,id,slot,report,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,completable,future,completed,future,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @Override 	public CompletableFuture<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 			final ResourceID taskExecutorResourceId, 			final SlotReport slotReport, 			final Time timeout);1502366829;Register a {@link TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@Override_	public CompletableFuture<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_			final ResourceID taskExecutorResourceId,_			final SlotReport slotReport,_			final Time timeout) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			CompletableFuture<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(_				(TaskExecutorGateway taskExecutorGateway, Throwable throwable) -> {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						return registerTaskExecutorInternal(_							taskExecutorGateway,_							taskExecutorAddress,_							taskExecutorResourceId,_							slotReport)__					}_				},_				getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return CompletableFuture.completedFuture(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;override,public,completable,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,final,time,timeout,if,objects,equals,leader,session,id,resource,manager,leader,id,completable,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,return,register,task,executor,internal,task,executor,gateway,task,executor,address,task,executor,resource,id,slot,report,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,completable,future,completed,future,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @Override 	public CompletableFuture<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 			final ResourceID taskExecutorResourceId, 			final SlotReport slotReport, 			final Time timeout);1502714913;Register a {@link TaskExecutor} at the resource manager.__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@Override_	public CompletableFuture<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_			final ResourceID taskExecutorResourceId,_			final SlotReport slotReport,_			final Time timeout) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			CompletableFuture<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(_				(TaskExecutorGateway taskExecutorGateway, Throwable throwable) -> {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						return registerTaskExecutorInternal(_							taskExecutorGateway,_							taskExecutorAddress,_							taskExecutorResourceId,_							slotReport)__					}_				},_				getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return CompletableFuture.completedFuture(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;override,public,completable,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,final,time,timeout,if,objects,equals,leader,session,id,resource,manager,leader,id,completable,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,return,register,task,executor,internal,task,executor,gateway,task,executor,address,task,executor,resource,id,slot,report,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,completable,future,completed,future,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @Override 	public CompletableFuture<RegistrationResponse> registerTaskExecutor( 			final UUID resourceManagerLeaderId, 			final String taskExecutorAddress, 			final ResourceID taskExecutorResourceId, 			final SlotReport slotReport, 			final Time timeout);1503019375;Register a {@link TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@Override_	public CompletableFuture<RegistrationResponse> registerTaskExecutor(_			final UUID resourceManagerLeaderId,_			final String taskExecutorAddress,_			final ResourceID taskExecutorResourceId,_			final SlotReport slotReport,_			final Time timeout) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			CompletableFuture<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(_				(TaskExecutorGateway taskExecutorGateway, Throwable throwable) -> {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						return registerTaskExecutorInternal(_							taskExecutorGateway,_							taskExecutorAddress,_							taskExecutorResourceId,_							slotReport)__					}_				},_				getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return CompletableFuture.completedFuture(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;override,public,completable,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,final,time,timeout,if,objects,equals,leader,session,id,resource,manager,leader,id,completable,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,return,register,task,executor,internal,task,executor,gateway,task,executor,address,task,executor,resource,id,slot,report,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,completable,future,completed,future,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1473383484;Shutdowns cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};shutdowns,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1474858756;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1474965482;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1475110587;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1475154512;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1475661506;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1475679726;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1476113770;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1476483941;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1476699326;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1476712982;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1476806580;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1476954428;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1477965803;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1478161487;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1480523747;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1486637985;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1487842224;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1488815863;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1489416902;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1489508610;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1490105415;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1490166753;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1490170142;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1490180625;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1490805029;Cleanup application and shut down cluster__@param finalStatus_@param optionalDiagnostics;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,param,optional,diagnostics;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1495154056;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1498565455;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("shut down cluster because application is in {}, diagnostics {}", finalStatus, optionalDiagnostics)__		shutDownApplication(finalStatus, optionalDiagnostics)__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,shut,down,application,final,status,optional,diagnostics
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1498568657;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1499156512;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1499354178;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1501251235;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1501519642;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1501530463;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1501580028;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@RpcMethod_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;rpc,method,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1532919460;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1534241555;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1534938698;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1536623937;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1536846489;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1537448260;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1537512807;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1539159479;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1539582212;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1542290209;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1549383138;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1549533702;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> clearStateAsync();1550403532;This method can be overridden to add a (non-blocking) state clearing routine to the_ResourceManager that will be called when leadership is revoked.__@return Returns a {@code CompletableFuture} that completes when the state clearing routine_is finished.;protected CompletableFuture<Void> clearStateAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,state,clearing,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,revoked,return,returns,a,code,completable,future,that,completes,when,the,state,clearing,routine,is,finished;protected,completable,future,void,clear,state,async,return,completable,future,completed,future,null
ResourceManager -> void onFatalErrorAsync(final Throwable t);1476712982;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> void onFatalErrorAsync(final Throwable t);1476806580;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> void onFatalErrorAsync(final Throwable t);1476954428;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> void onFatalErrorAsync(final Throwable t);1477965803;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> void onFatalErrorAsync(final Throwable t);1480523747;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1487842224;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1498568657;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1499156512;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1499354178;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1501251235;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1501519642;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1501530463;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1501580028;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1502196227;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1502366829;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1502714913;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1503019375;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1503580260;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1503588382;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1505921975;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1507240448;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1507653580;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1507738083;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1507761617;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1508234238;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1508245421;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1508252550;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1508327406;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1508426573;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1508494390;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1511869419;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;1511873631;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> public void onFatalError(final String message, final Throwable error);1473383484;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1474858756;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1474965482;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1475110587;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1475154512;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1475661506;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1475679726;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1476113770;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1476483941;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> public void onFatalError(final String message, final Throwable error);1476699326;Notifies the resource manager of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;public void onFatalError(final String message, final Throwable error) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				fatalError(message, error)__			}_		})__	};notifies,the,resource,manager,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;public,void,on,fatal,error,final,string,message,final,throwable,error,run,async,new,runnable,override,public,void,run,fatal,error,message,error
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1476806580;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1476954428;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1477965803;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1478161487;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1480523747;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1488815863;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1489416902;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1489508610;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1490166753;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1490170142;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> protected void disconnectJobManager(JobID jobId, Exception cause);1490180625;Disconnects the job manager which is connected for the given job from the resource manager.__@param jobId identifying the job whose leader shall be disconnected;protected void disconnectJobManager(JobID jobId, Exception cause) {_		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.remove(jobId)___		if (jobManagerRegistration != null) {_			log.info("Disconnect job manager {}@{} for job {} from the resource manager.",_				jobManagerRegistration.getLeaderID(),_				jobManagerRegistration.getJobManagerGateway().getAddress(),_				jobId)___			JobMasterGateway jobMasterGateway = jobManagerRegistration.getJobManagerGateway()___			_			jobMasterGateway.disconnectResourceManager(jobManagerRegistration.getLeaderID(), getLeaderSessionId(), cause)__		} else {_			log.debug("There was no registered job manager for job {}.", jobId)__		}_	};disconnects,the,job,manager,which,is,connected,for,the,given,job,from,the,resource,manager,param,job,id,identifying,the,job,whose,leader,shall,be,disconnected;protected,void,disconnect,job,manager,job,id,job,id,exception,cause,job,manager,registration,job,manager,registration,job,manager,registrations,remove,job,id,if,job,manager,registration,null,log,info,disconnect,job,manager,for,job,from,the,resource,manager,job,manager,registration,get,leader,id,job,manager,registration,get,job,manager,gateway,get,address,job,id,job,master,gateway,job,master,gateway,job,manager,registration,get,job,manager,gateway,job,master,gateway,disconnect,resource,manager,job,manager,registration,get,leader,id,get,leader,session,id,cause,else,log,debug,there,was,no,registered,job,manager,for,job,job,id
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1525934187;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1527094227;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1530503760;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1531923839;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1531998464;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1532919460;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1534241555;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1534938698;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1536623937;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1536846489;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1537448260;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1537512807;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1539159479;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1539582212;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1542290209;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1549383138;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1549533702;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 			TaskExecutorGateway taskExecutorGateway, 			String taskExecutorAddress, 			ResourceID taskExecutorResourceId, 			int dataPort, 			HardwareDescription hardwareDescription);1550403532;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param dataPort port used for data transfer_@param hardwareDescription of the registering TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_			TaskExecutorGateway taskExecutorGateway,_			String taskExecutorAddress,_			ResourceID taskExecutorResourceId,_			int dataPort,_			HardwareDescription hardwareDescription) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.debug("Replacing old registration of TaskExecutor {}.", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker, dataPort, hardwareDescription)___			log.info("Registering TaskManager with ResourceID {} ({}) at ResourceManager", taskExecutorResourceId, taskExecutorAddress)__			taskExecutors.put(taskExecutorResourceId, registration)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				clusterInformation)__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,data,port,port,used,for,data,transfer,param,hardware,description,of,the,registering,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,int,data,port,hardware,description,hardware,description,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,debug,replacing,old,registration,of,task,executor,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,data,port,hardware,description,log,info,registering,task,manager,with,resource,id,at,resource,manager,task,executor,resource,id,task,executor,address,task,executors,put,task,executor,resource,id,registration,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,cluster,information
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1501530463;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getLeaderSessionId(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,leader,session,id,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1501580028;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getLeaderSessionId(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,leader,session,id,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1502196227;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getLeaderSessionId(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,leader,session,id,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1502366829;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getLeaderSessionId(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,leader,session,id,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1502714913;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getLeaderSessionId(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,leader,session,id,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1503019375;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getLeaderSessionId(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,leader,session,id,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		UUID jobLeaderId, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1503580260;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobLeaderId leader id of the JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		UUID jobLeaderId,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (oldJobManagerRegistration.getLeaderID().equals(jobLeaderId)) {_				_				log.debug("Job manager {}@{} was already registered.", jobLeaderId, jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobLeaderId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobLeaderId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobLeaderId, jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,leader,id,leader,id,of,the,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,uuid,job,leader,id,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,old,job,manager,registration,get,leader,id,equals,job,leader,id,log,debug,job,manager,was,already,registered,job,leader,id,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,leader,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,leader,id,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1476806580;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1476954428;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1477965803;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1478161487;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1480523747;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1486637985;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1487842224;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1488815863;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1489416902;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1489508610;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1490105415;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1490166753;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1490170142;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1490180625;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1490805029;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1495154056;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1498565455;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1498568657;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1499156512;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1499354178;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1501251235;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1501519642;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1501530463;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1501580028;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1502196227;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1502366829;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1502714913;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @VisibleForTesting 	UUID getLeaderSessionId();1503019375;Gets the leader session id of current resourceManager.__@return return the leaderSessionId of current resourceManager, this returns null until the current resourceManager is granted leadership.;@VisibleForTesting_	UUID getLeaderSessionId() {_		return leaderSessionId__	};gets,the,leader,session,id,of,current,resource,manager,return,return,the,leader,session,id,of,current,resource,manager,this,returns,null,until,the,current,resource,manager,is,granted,leadership;visible,for,testing,uuid,get,leader,session,id,return,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1475154512;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)_					.get(timeout.toMilliseconds(), timeout.getUnit())__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerRegistration oldRegistration = taskExecutors.remove(resourceID)__					if (oldRegistration != null) {_						_						log.info("Replacing old instance of worker for ResourceID {}", resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					WorkerRegistration<WorkerType> registration =_						new WorkerRegistration<>(taskExecutorGateway, newWorker)__					taskExecutors.put(resourceID, registration)__					slotManager.registerTaskExecutor(resourceID, registration, slotReport)__					return new TaskExecutorRegistrationSuccess(registration.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,timeout,to,milliseconds,timeout,get,unit,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1475661506;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)_					.get(timeout.toMilliseconds(), timeout.getUnit())__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerRegistration oldRegistration = taskExecutors.remove(resourceID)__					if (oldRegistration != null) {_						_						log.info("Replacing old instance of worker for ResourceID {}", resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					WorkerRegistration<WorkerType> registration =_						new WorkerRegistration<>(taskExecutorGateway, newWorker)__					taskExecutors.put(resourceID, registration)__					slotManager.registerTaskExecutor(resourceID, registration, slotReport)__					return new TaskExecutorRegistrationSuccess(registration.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,timeout,to,milliseconds,timeout,get,unit,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1475679726;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)_					.get(timeout.toMilliseconds(), timeout.getUnit())__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerRegistration oldRegistration = taskExecutors.remove(resourceID)__					if (oldRegistration != null) {_						_						log.info("Replacing old instance of worker for ResourceID {}", resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					WorkerRegistration<WorkerType> registration =_						new WorkerRegistration<>(taskExecutorGateway, newWorker)__					taskExecutors.put(resourceID, registration)__					slotManager.registerTaskExecutor(resourceID, registration, slotReport)__					return new TaskExecutorRegistrationSuccess(registration.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,timeout,to,milliseconds,timeout,get,unit,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1476113770;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)_					.get(timeout.toMilliseconds(), timeout.getUnit())__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerRegistration oldRegistration = taskExecutors.remove(resourceID)__					if (oldRegistration != null) {_						_						log.info("Replacing old instance of worker for ResourceID {}", resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					WorkerRegistration<WorkerType> registration =_						new WorkerRegistration<>(taskExecutorGateway, newWorker)__					taskExecutors.put(resourceID, registration)__					slotManager.registerTaskExecutor(resourceID, registration, slotReport)__					return new TaskExecutorRegistrationSuccess(registration.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,timeout,to,milliseconds,timeout,get,unit,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1476483941;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)_					.get(timeout.toMilliseconds(), timeout.getUnit())__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerRegistration oldRegistration = taskExecutors.remove(resourceID)__					if (oldRegistration != null) {_						_						log.info("Replacing old instance of worker for ResourceID {}", resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					WorkerRegistration<WorkerType> registration =_						new WorkerRegistration<>(taskExecutorGateway, newWorker)__					taskExecutors.put(resourceID, registration)__					slotManager.registerTaskExecutor(resourceID, registration, slotReport)__					return new TaskExecutorRegistrationSuccess(registration.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,timeout,to,milliseconds,timeout,get,unit,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1476699326;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)_					.get(timeout.toMilliseconds(), timeout.getUnit())__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerRegistration oldRegistration = taskExecutors.remove(resourceID)__					if (oldRegistration != null) {_						_						log.info("Replacing old instance of worker for ResourceID {}", resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					WorkerRegistration<WorkerType> registration =_						new WorkerRegistration<>(taskExecutorGateway, newWorker)__					taskExecutors.put(resourceID, registration)__					slotManager.registerTaskExecutor(resourceID, registration, slotReport)__					return new TaskExecutorRegistrationSuccess(registration.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,timeout,to,milliseconds,timeout,get,unit,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1476712982;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionID.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionID + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1476806580;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1476954428;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1477965803;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1478161487;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1480523747;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1488815863;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1489416902;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID, 		final SlotReport slotReport);1489508610;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(resourceID)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", resourceID)__						}__						WorkerType newWorker = workerStarted(resourceID)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(resourceID, registration)__						slotManager.registerTaskExecutor(resourceID, registration, slotReport)___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,resource,id,worker,type,new,worker,worker,started,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,resource,id,registration,slot,manager,register,task,executor,resource,id,registration,slot,report,return,new,task,executor,registration,success,registration,get,instance,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest, 			final Time timeout);1502196227;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@Override_	public CompletableFuture<Acknowledge> requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest,_			final Time timeout) {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			return FutureUtils.completedExceptionally(new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId))__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				try {_					slotManager.registerSlotRequest(slotRequest)__				} catch (SlotManagerException e) {_					return FutureUtils.completedExceptionally(e)__				}__				return CompletableFuture.completedFuture(Acknowledge.get())__			} else {_				return FutureUtils.completedExceptionally(new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID()))__			}__		} else {_			return FutureUtils.completedExceptionally(new ResourceManagerException("Could not find registered job manager for job " + jobId + '.'))__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;override,public,completable,future,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,final,time,timeout,if,objects,equals,resource,manager,leader,id,leader,session,id,return,future,utils,completed,exceptionally,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,return,future,utils,completed,exceptionally,e,return,completable,future,completed,future,acknowledge,get,else,return,future,utils,completed,exceptionally,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,return,future,utils,completed,exceptionally,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest, 			final Time timeout);1502366829;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@Override_	public CompletableFuture<Acknowledge> requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest,_			final Time timeout) {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			return FutureUtils.completedExceptionally(new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId))__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				try {_					slotManager.registerSlotRequest(slotRequest)__				} catch (SlotManagerException e) {_					return FutureUtils.completedExceptionally(e)__				}__				return CompletableFuture.completedFuture(Acknowledge.get())__			} else {_				return FutureUtils.completedExceptionally(new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID()))__			}__		} else {_			return FutureUtils.completedExceptionally(new ResourceManagerException("Could not find registered job manager for job " + jobId + '.'))__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;override,public,completable,future,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,final,time,timeout,if,objects,equals,resource,manager,leader,id,leader,session,id,return,future,utils,completed,exceptionally,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,return,future,utils,completed,exceptionally,e,return,completable,future,completed,future,acknowledge,get,else,return,future,utils,completed,exceptionally,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,return,future,utils,completed,exceptionally,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest, 			final Time timeout);1502714913;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@Override_	public CompletableFuture<Acknowledge> requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest,_			final Time timeout) {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			return FutureUtils.completedExceptionally(new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId))__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				try {_					slotManager.registerSlotRequest(slotRequest)__				} catch (SlotManagerException e) {_					return FutureUtils.completedExceptionally(e)__				}__				return CompletableFuture.completedFuture(Acknowledge.get())__			} else {_				return FutureUtils.completedExceptionally(new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID()))__			}__		} else {_			return FutureUtils.completedExceptionally(new ResourceManagerException("Could not find registered job manager for job " + jobId + '.'))__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;override,public,completable,future,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,final,time,timeout,if,objects,equals,resource,manager,leader,id,leader,session,id,return,future,utils,completed,exceptionally,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,return,future,utils,completed,exceptionally,e,return,completable,future,completed,future,acknowledge,get,else,return,future,utils,completed,exceptionally,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,return,future,utils,completed,exceptionally,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest, 			final Time timeout);1503019375;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@Override_	public CompletableFuture<Acknowledge> requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest,_			final Time timeout) {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			return FutureUtils.completedExceptionally(new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId))__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				try {_					slotManager.registerSlotRequest(slotRequest)__				} catch (SlotManagerException e) {_					return FutureUtils.completedExceptionally(e)__				}__				return CompletableFuture.completedFuture(Acknowledge.get())__			} else {_				return FutureUtils.completedExceptionally(new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID()))__			}__		} else {_			return FutureUtils.completedExceptionally(new ResourceManagerException("Could not find registered job manager for job " + jobId + '.'))__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;override,public,completable,future,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,final,time,timeout,if,objects,equals,resource,manager,leader,id,leader,session,id,return,future,utils,completed,exceptionally,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,try,slot,manager,register,slot,request,slot,request,catch,slot,manager,exception,e,return,future,utils,completed,exceptionally,e,return,completable,future,completed,future,acknowledge,get,else,return,future,utils,completed,exceptionally,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,return,future,utils,completed,exceptionally,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1473383484;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1474858756;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1474965482;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1475110587;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1475154512;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1475661506;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1475679726;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1476113770;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1476483941;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> @RpcMethod 	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress);1476699326;Unregisters an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to unregister from this resource manager;@RpcMethod_	public void unRegisterInfoMessageListener(final String infoMessageListenerAddress) {_		infoMessageListeners.remove(infoMessageListenerAddress)__	};unregisters,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,unregister,from,this,resource,manager;rpc,method,public,void,un,register,info,message,listener,final,string,info,message,listener,address,info,message,listeners,remove,info,message,listener,address
ResourceManager -> public int getNumberOfStartedTaskManagers();1473383484;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutorGateways.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executor,gateways,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1474858756;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutorGateways.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executor,gateways,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1474965482;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutorGateways.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executor,gateways,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1475110587;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutorGateways.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executor,gateways,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1475154512;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutors.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executors,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1475661506;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutors.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executors,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1475679726;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutors.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executors,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1476113770;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutors.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executors,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1476483941;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutors.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executors,size
ResourceManager -> public int getNumberOfStartedTaskManagers();1476699326;Gets the number of currently started TaskManagers.__@return The number of currently started TaskManagers.;public int getNumberOfStartedTaskManagers() {_		return taskExecutors.size()__	};gets,the,number,of,currently,started,task,managers,return,the,number,of,currently,started,task,managers;public,int,get,number,of,started,task,managers,return,task,executors,size
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1507653580;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1507761617;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1508234238;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1508245421;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1508252550;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1508327406;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1508426573;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> public abstract boolean stopWorker(ResourceID resourceID)_;1508494390;Stops the given worker.__@param resourceID identifying the worker to be stopped_@return True if the worker was stopped, otherwise false;public abstract boolean stopWorker(ResourceID resourceID)_;stops,the,given,worker,param,resource,id,identifying,the,worker,to,be,stopped,return,true,if,the,worker,was,stopped,otherwise,false;public,abstract,boolean,stop,worker,resource,id,resource,id
ResourceManager -> @Override 	public void shutDownCluster( 			final ApplicationStatus finalStatus, 			@Nullable final String optionalDiagnostics);1512727362;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics diagnostics message for the Flink application or {@code null};@Override_	public void shutDownCluster(_			final ApplicationStatus finalStatus,_			@Nullable final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,void,shut,down,cluster,final,application,status,final,status,nullable,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster( 			final ApplicationStatus finalStatus, 			@Nullable final String optionalDiagnostics);1517911296;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics diagnostics message for the Flink application or {@code null};@Override_	public void shutDownCluster(_			final ApplicationStatus finalStatus,_			@Nullable final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,void,shut,down,cluster,final,application,status,final,status,nullable,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster( 			final ApplicationStatus finalStatus, 			@Nullable final String optionalDiagnostics);1517911540;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics diagnostics message for the Flink application or {@code null};@Override_	public void shutDownCluster(_			final ApplicationStatus finalStatus,_			@Nullable final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,void,shut,down,cluster,final,application,status,final,status,nullable,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster( 			final ApplicationStatus finalStatus, 			@Nullable final String optionalDiagnostics);1518718788;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics diagnostics message for the Flink application or {@code null};@Override_	public void shutDownCluster(_			final ApplicationStatus finalStatus,_			@Nullable final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,void,shut,down,cluster,final,application,status,final,status,nullable,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster( 			final ApplicationStatus finalStatus, 			@Nullable final String optionalDiagnostics);1521033687;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics diagnostics message for the Flink application or {@code null};@Override_	public void shutDownCluster(_			final ApplicationStatus finalStatus,_			@Nullable final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,void,shut,down,cluster,final,application,status,final,status,nullable,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster( 			final ApplicationStatus finalStatus, 			@Nullable final String optionalDiagnostics);1521641386;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics diagnostics message for the Flink application or {@code null};@Override_	public void shutDownCluster(_			final ApplicationStatus finalStatus,_			@Nullable final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,void,shut,down,cluster,final,application,status,final,status,nullable,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @RpcMethod 	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor( 			UUID resourceManagerLeaderId, 			String taskExecutorAddress, 			ResourceID resourceID);1472481329;@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor(_			UUID resourceManagerLeaderId,_			String taskExecutorAddress,_			ResourceID resourceID) {__		return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__	};param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,org,apache,flink,runtime,registration,registration,response,register,task,executor,uuid,resource,manager,leader,id,string,task,executor,address,resource,id,resource,id,return,new,task,executor,registration,success,new,instance,id,5000
ResourceManager -> @RpcMethod 	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor( 			UUID resourceManagerLeaderId, 			String taskExecutorAddress, 			ResourceID resourceID);1472741611;@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor(_			UUID resourceManagerLeaderId,_			String taskExecutorAddress,_			ResourceID resourceID) {__		return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__	};param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,org,apache,flink,runtime,registration,registration,response,register,task,executor,uuid,resource,manager,leader,id,string,task,executor,address,resource,id,resource,id,return,new,task,executor,registration,success,new,instance,id,5000
ResourceManager -> @RpcMethod 	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor( 			UUID resourceManagerLeaderId, 			String taskExecutorAddress, 			ResourceID resourceID);1474460045;@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor(_			UUID resourceManagerLeaderId,_			String taskExecutorAddress,_			ResourceID resourceID) {__		return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__	};param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,org,apache,flink,runtime,registration,registration,response,register,task,executor,uuid,resource,manager,leader,id,string,task,executor,address,resource,id,resource,id,return,new,task,executor,registration,success,new,instance,id,5000
ResourceManager -> @RpcMethod 	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor( 			UUID resourceManagerLeaderId, 			String taskExecutorAddress, 			ResourceID resourceID);1474471581;@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public org.apache.flink.runtime.registration.RegistrationResponse registerTaskExecutor(_			UUID resourceManagerLeaderId,_			String taskExecutorAddress,_			ResourceID resourceID) {__		return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__	};param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,org,apache,flink,runtime,registration,registration,response,register,task,executor,uuid,resource,manager,leader,id,string,task,executor,address,resource,id,resource,id,return,new,task,executor,registration,success,new,instance,id,5000
ResourceManager -> @RpcMethod 	public SlotAvailableReply notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final ResourceID resourceID, 			final InstanceID instanceID, 			final SlotID slotID);1475154512;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param resourceID TaskExecutor's resource id_@param instanceID TaskExecutor's instance id_@param slotID The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public SlotAvailableReply notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final ResourceID resourceID,_			final InstanceID instanceID,_			final SlotID slotID) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceID)__			if (registration != null) {_				InstanceID registrationInstanceID = registration.getInstanceID()__				if (registrationInstanceID.equals(instanceID)) {_					runAsync(new Runnable() {_						@Override_						public void run() {_							slotManager.notifySlotAvailable(resourceID, slotID)__						}_					})__					return new SlotAvailableReply(leaderSessionID, slotID)__				}_			}_		}_		return null__	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,resource,id,task,executor,s,resource,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,slot,available,reply,notify,slot,available,final,uuid,resource,manager,leader,id,final,resource,id,resource,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,instance,id,registration,get,instance,id,if,registration,instance,id,equals,instance,id,run,async,new,runnable,override,public,void,run,slot,manager,notify,slot,available,resource,id,slot,id,return,new,slot,available,reply,leader,session,id,slot,id,return,null
ResourceManager -> @RpcMethod 	public SlotAvailableReply notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final ResourceID resourceID, 			final InstanceID instanceID, 			final SlotID slotID);1476113770;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param resourceID TaskExecutor's resource id_@param instanceID TaskExecutor's instance id_@param slotID The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public SlotAvailableReply notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final ResourceID resourceID,_			final InstanceID instanceID,_			final SlotID slotID) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceID)__			if (registration != null) {_				InstanceID registrationInstanceID = registration.getInstanceID()__				if (registrationInstanceID.equals(instanceID)) {_					runAsync(new Runnable() {_						@Override_						public void run() {_							slotManager.notifySlotAvailable(resourceID, slotID)__						}_					})__					return new SlotAvailableReply(leaderSessionID, slotID)__				}_			}_		}_		return null__	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,resource,id,task,executor,s,resource,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,slot,available,reply,notify,slot,available,final,uuid,resource,manager,leader,id,final,resource,id,resource,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,instance,id,registration,get,instance,id,if,registration,instance,id,equals,instance,id,run,async,new,runnable,override,public,void,run,slot,manager,notify,slot,available,resource,id,slot,id,return,new,slot,available,reply,leader,session,id,slot,id,return,null
ResourceManager -> public abstract void stopWorker(ResourceID resourceID)_;1502714913;Deallocates a resource.__@param resourceID The resource ID;public abstract void stopWorker(ResourceID resourceID)_;deallocates,a,resource,param,resource,id,the,resource,id;public,abstract,void,stop,worker,resource,id,resource,id
ResourceManager -> public abstract void stopWorker(ResourceID resourceID)_;1503019375;Deallocates a resource.__@param resourceID The resource ID;public abstract void stopWorker(ResourceID resourceID)_;deallocates,a,resource,param,resource,id,the,resource,id;public,abstract,void,stop,worker,resource,id,resource,id
ResourceManager -> public abstract void stopWorker(ResourceID resourceID)_;1503580260;Deallocates a resource.__@param resourceID The resource ID;public abstract void stopWorker(ResourceID resourceID)_;deallocates,a,resource,param,resource,id,the,resource,id;public,abstract,void,stop,worker,resource,id,resource,id
ResourceManager -> public abstract void stopWorker(ResourceID resourceID)_;1503588382;Deallocates a resource.__@param resourceID The resource ID;public abstract void stopWorker(ResourceID resourceID)_;deallocates,a,resource,param,resource,id,the,resource,id;public,abstract,void,stop,worker,resource,id,resource,id
ResourceManager -> public abstract void stopWorker(ResourceID resourceID)_;1505921975;Deallocates a resource.__@param resourceID The resource ID;public abstract void stopWorker(ResourceID resourceID)_;deallocates,a,resource,param,resource,id,the,resource,id;public,abstract,void,stop,worker,resource,id,resource,id
ResourceManager -> public abstract void stopWorker(ResourceID resourceID)_;1507738083;Deallocates a resource.__@param resourceID The resource ID;public abstract void stopWorker(ResourceID resourceID)_;deallocates,a,resource,param,resource,id,the,resource,id;public,abstract,void,stop,worker,resource,id,resource,id
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1502196227;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1502366829;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1502714913;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1503019375;Cleanup application and shut down cluster__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1503580260;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1503588382;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1505921975;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1507240448;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1507653580;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1507738083;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1507761617;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1508234238;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1508245421;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1508252550;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1508327406;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1508426573;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1508494390;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1511869419;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> @Override 	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics);1511873631;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param optionalDiagnostics for the Flink application;@Override_	public void shutDownCluster(final ApplicationStatus finalStatus, final String optionalDiagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, optionalDiagnostics)___		try {_			shutDownApplication(finalStatus, optionalDiagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}_	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,optional,diagnostics,for,the,flink,application;override,public,void,shut,down,cluster,final,application,status,final,status,final,string,optional,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,optional,diagnostics,try,shut,down,application,final,status,optional,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1474858756;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1474965482;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1475110587;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1475154512;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1475661506;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1475679726;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1476113770;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1476483941;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1476699326;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1476712982;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1476806580;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1476954428;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1477965803;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1478161487;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1480523747;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1486637985;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1487842224;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1488815863;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1489416902;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1489508610;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1490105415;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1490166753;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1490170142;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1490180625;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1490805029;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1495154056;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1498565455;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1498568657;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1499156512;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1499354178;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1501251235;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1501519642;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1501530463;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1501580028;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1502196227;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1502366829;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1502714913;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1503019375;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1503580260;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1503588382;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1505921975;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1507240448;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1507653580;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1507738083;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1507761617;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1508234238;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1508245421;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1508252550;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1508327406;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1508426573;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1508494390;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1511869419;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1511873631;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1512727362;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1517911296;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1517911540;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1518718788;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1521033687;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1521641386;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1521667168;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1525374816;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1525934187;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1527094227;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1530503760;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1531923839;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1531998464;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1532919460;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1534241555;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1534938698;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1536623937;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1536846489;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1537448260;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1537512807;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1539159479;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1539582212;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1542290209;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1549383138;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1549533702;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> protected abstract WorkerType workerStarted(ResourceID resourceID)_;1550403532;Callback when a worker was started._@param resourceID The worker resource id;protected abstract WorkerType workerStarted(ResourceID resourceID)_;callback,when,a,worker,was,started,param,resource,id,the,worker,resource,id;protected,abstract,worker,type,worker,started,resource,id,resource,id
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1501530463;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1501580028;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1502196227;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1502366829;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1502714913;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1503019375;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1503580260;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1503588382;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1505921975;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1507653580;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1507738083;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1508327406;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1508426573;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> private RegistrationResponse registerTaskExecutorInternal( 		TaskExecutorGateway taskExecutorGateway, 		String taskExecutorAddress, 		ResourceID taskExecutorResourceId, 		SlotReport slotReport);1508494390;Registers a new TaskExecutor.__@param taskExecutorGateway to communicate with the registering TaskExecutor_@param taskExecutorAddress address of the TaskExecutor_@param taskExecutorResourceId ResourceID of the TaskExecutor_@param slotReport initial slot report from the TaskExecutor_@return RegistrationResponse;private RegistrationResponse registerTaskExecutorInternal(_		TaskExecutorGateway taskExecutorGateway,_		String taskExecutorAddress,_		ResourceID taskExecutorResourceId,_		SlotReport slotReport) {_		WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__		if (oldRegistration != null) {_			_			log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)___			_			slotManager.unregisterTaskManager(oldRegistration.getInstanceID())__		}__		final WorkerType newWorker = workerStarted(taskExecutorResourceId)___		if (newWorker == null) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the framework did " +_				"not recognize it", taskExecutorResourceId, taskExecutorAddress)__			return new RegistrationResponse.Decline("unrecognized TaskExecutor")__		} else {_			WorkerRegistration<WorkerType> registration =_				new WorkerRegistration<>(taskExecutorGateway, newWorker)___			taskExecutors.put(taskExecutorResourceId, registration)___			slotManager.registerTaskManager(registration, slotReport)___			taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_				@Override_				public void receiveHeartbeat(ResourceID resourceID, Void payload) {_					_					_				}__				@Override_				public void requestHeartbeat(ResourceID resourceID, Void payload) {_					taskExecutorGateway.heartbeatFromResourceManager(resourceID)__				}_			})___			return new TaskExecutorRegistrationSuccess(_				registration.getInstanceID(),_				resourceId,_				resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__		}_	};registers,a,new,task,executor,param,task,executor,gateway,to,communicate,with,the,registering,task,executor,param,task,executor,address,address,of,the,task,executor,param,task,executor,resource,id,resource,id,of,the,task,executor,param,slot,report,initial,slot,report,from,the,task,executor,return,registration,response;private,registration,response,register,task,executor,internal,task,executor,gateway,task,executor,gateway,string,task,executor,address,resource,id,task,executor,resource,id,slot,report,slot,report,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,slot,manager,unregister,task,manager,old,registration,get,instance,id,final,worker,type,new,worker,worker,started,task,executor,resource,id,if,new,worker,null,log,warn,discard,registration,from,task,executor,at,because,the,framework,did,not,recognize,it,task,executor,resource,id,task,executor,address,return,new,registration,response,decline,unrecognized,task,executor,else,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,manager,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1473383484;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1474858756;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1474965482;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1475110587;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1475154512;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1475661506;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1475679726;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1476113770;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1476483941;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String infoMessageListenerAddress);1476699326;Registers an infoMessage listener__@param infoMessageListenerAddress address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String infoMessageListenerAddress) {_		if(infoMessageListeners.containsKey(infoMessageListenerAddress)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", infoMessageListenerAddress)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(infoMessageListenerAddress, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", infoMessageListenerAddress)__					infoMessageListeners.put(infoMessageListenerAddress, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", infoMessageListenerAddress)__					return null__				}_			}, getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,info,message,listener,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,info,message,listener,address,if,info,message,listeners,contains,key,info,message,listener,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,info,message,listener,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,info,message,listener,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,info,message,listener,address,info,message,listeners,put,info,message,listener,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,info,message,listener,address,return,null,get,main,thread,executor
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1476806580;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1476954428;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1477965803;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1478161487;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1480523747;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1486637985;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1487842224;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1488815863;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1489416902;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1489508610;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1490105415;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1490166753;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1490170142;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1490180625;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1490805029;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1495154056;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1498565455;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1498568657;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1499156512;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1499354178;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1501251235;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1501519642;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1501530463;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1501580028;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1502196227;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1502366829;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1502714913;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1503019375;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1503580260;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1503588382;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1505921975;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1507240448;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1507653580;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1507738083;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1507761617;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1508234238;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1508245421;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1508252550;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1508327406;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1508426573;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1508494390;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1511869419;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1511873631;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1512727362;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1517911296;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1517911540;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1518718788;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1521033687;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1521641386;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1521667168;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1525374816;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1525934187;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1527094227;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1530503760;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1531923839;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1531998464;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1532919460;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1534241555;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1534938698;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1536623937;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1536846489;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1537448260;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1537512807;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1539159479;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1539582212;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1542290209;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1549383138;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1549533702;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> protected abstract void initialize() throws ResourceManagerException_;1550403532;Initializes the framework specific components.__@throws ResourceManagerException which occurs during initialization and causes the resource manager to fail.;protected abstract void initialize() throws ResourceManagerException_;initializes,the,framework,specific,components,throws,resource,manager,exception,which,occurs,during,initialization,and,causes,the,resource,manager,to,fail;protected,abstract,void,initialize,throws,resource,manager,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1472741611;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.error("ResourceManager received an error from the LeaderElectionService.", exception)__				_				slotManager.handleError(exception)__				_				shutDown()__			}_		})__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,run,async,new,runnable,override,public,void,run,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,slot,manager,handle,error,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1473383484;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1474459992;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1474460045;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.error("ResourceManager received an error from the LeaderElectionService.", exception)__				_				slotManager.handleError(exception)__				_				shutDown()__			}_		})__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,run,async,new,runnable,override,public,void,run,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,slot,manager,handle,error,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1474471581;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.error("ResourceManager received an error from the LeaderElectionService.", exception)__				_				slotManager.handleError(exception)__				_				shutDown()__			}_		})__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,run,async,new,runnable,override,public,void,run,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,slot,manager,handle,error,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1474482025;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1474858756;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1474965482;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1475110587;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1475154512;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1475661506;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1475679726;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1476113770;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1476483941;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1476699326;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		log.error("ResourceManager received an error from the LeaderElectionService.", exception)__		_		shutDown()__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> @Override 	public void handleError(final Exception exception);1476712982;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1476806580;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1476954428;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1477965803;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1478161487;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1480523747;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1486637985;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1487842224;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1488815863;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1489416902;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1489508610;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1490105415;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1490166753;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1490170142;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1490180625;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1490805029;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1495154056;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1498565455;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1498568657;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1499156512;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1499354178;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1501251235;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1501519642;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1501530463;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1501580028;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1502196227;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1502366829;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1502714913;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1503019375;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalErrorAsync(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,async,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1503580260;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1503588382;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1505921975;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1507240448;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1507653580;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1507738083;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1507761617;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1508234238;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1508245421;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1508252550;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1508327406;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1508426573;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1508494390;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1511869419;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1511873631;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1512727362;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1517911296;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1517911540;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1518718788;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1521033687;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1521641386;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1521667168;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1525374816;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1525934187;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1527094227;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1530503760;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1531923839;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1531998464;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1532919460;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1534241555;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1534938698;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1536623937;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1536846489;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1537448260;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1537512807;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1539159479;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1539582212;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1542290209;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1549383138;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1549533702;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @Override 	public void handleError(final Exception exception);1550403532;Handles error occurring in the leader election service.__@param exception Exception being thrown in the leader election service;@Override_	public void handleError(final Exception exception) {_		onFatalError(new ResourceManagerException("Received an error from the LeaderElectionService.", exception))__	};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,on,fatal,error,new,resource,manager,exception,received,an,error,from,the,leader,election,service,exception
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1476712982;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1476806580;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1476954428;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1477965803;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1478161487;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1480523747;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1486637985;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1487842224;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1488815863;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1489416902;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerRpcGatewayFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,rpc,gateway,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1489508610;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1490105415;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1490166753;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1490170142;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1490180625;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1490805029;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1495154056;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1498565455;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1498568657;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1499156512;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1499354178;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1501251235;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1501519642;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			Future<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService().connect(address, InfoMessageListenerRpcGateway.class)___			Future<Void> infoMessageListenerAcceptFuture = infoMessageListenerRpcGatewayFuture.thenAcceptAsync(new AcceptFunction<InfoMessageListenerRpcGateway>() {_				@Override_				public void accept(InfoMessageListenerRpcGateway gateway) {_					log.info("Receive a registration from info message listener on ({})", address)__					infoMessageListeners.put(address, gateway)__				}_			}, getMainThreadExecutor())___			infoMessageListenerAcceptFuture.exceptionallyAsync(new ApplyFunction<Throwable, Void>() {_				@Override_				public Void apply(Throwable failure) {_					log.warn("Receive a registration from unreachable info message listener on ({})", address)__					return null__				}_			}, getRpcService().getExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,future,void,info,message,listener,accept,future,info,message,listener,rpc,gateway,future,then,accept,async,new,accept,function,info,message,listener,rpc,gateway,override,public,void,accept,info,message,listener,rpc,gateway,gateway,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor,info,message,listener,accept,future,exceptionally,async,new,apply,function,throwable,void,override,public,void,apply,throwable,failure,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,return,null,get,rpc,service,get,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1501530463;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = FutureUtils.toJava(_				getRpcService().connect(address, InfoMessageListenerRpcGateway.class))___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,future,utils,to,java,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @RpcMethod 	public void registerInfoMessageListener(final String address);1501580028;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@RpcMethod_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;rpc,method,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> ResourceManagerLeaderContender -> @Override 		public void revokeLeadership();1472481329;Callback method when current resourceManager lose leadership.;@Override_		public void revokeLeadership() {_			runAsync(new Runnable() {_				@Override_				public void run() {_					log.info("ResourceManager {} was revoked leadership.", getAddress())__					jobMasterGateways.clear()__					leaderSessionID = null__				}_			})__		};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,leader,session,id,null
ResourceManager -> ResourceManagerLeaderContender -> @Override 		public void revokeLeadership();1472699640;Callback method when current resourceManager lose leadership.;@Override_		public void revokeLeadership() {_			runAsync(new Runnable() {_				@Override_				public void run() {_					log.info("ResourceManager {} was revoked leadership.", getAddress())__					jobMasterGateways.clear()__					startedTaskExecutorGateways.clear()__					leaderSessionID = null__				}_			})__		};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,started,task,executor,gateways,clear,leader,session,id,null
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID);1472699640;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID) {__		if(!leaderSessionID.equals(resourceManagerLeaderId)) {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did not equal the received leader session ID  {}",_				resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__			return Futures.failed(new LeaderSessionIDException(leaderSessionID, resourceManagerLeaderId))__		}__		Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___		return taskExecutorGatewayFuture.map(new Mapper<TaskExecutorGateway, RegistrationResponse>() {__			@Override_			public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway) {_				InstanceID instanceID = null__				TaskExecutorRegistration taskExecutorRegistration = startedTaskExecutorGateways.get(resourceID)__				if(taskExecutorRegistration != null) {_					log.warn("Receive a duplicate registration from TaskExecutor {} at ({})", resourceID, taskExecutorAddress)__					instanceID = taskExecutorRegistration.getInstanceID()__				} else {_					instanceID = new InstanceID()__					startedTaskExecutorGateways.put(resourceID, new TaskExecutorRegistration(taskExecutorGateway, instanceID))__				}__				return new TaskExecutorRegistrationSuccess(instanceID, 5000)__			}_		}, getMainThreadExecutionContext())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,futures,failed,new,leader,session,idexception,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,map,new,mapper,task,executor,gateway,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,instance,id,instance,id,null,task,executor,registration,task,executor,registration,started,task,executor,gateways,get,resource,id,if,task,executor,registration,null,log,warn,receive,a,duplicate,registration,from,task,executor,at,resource,id,task,executor,address,instance,id,task,executor,registration,get,instance,id,else,instance,id,new,instance,id,started,task,executor,gateways,put,resource,id,new,task,executor,registration,task,executor,gateway,instance,id,return,new,task,executor,registration,success,instance,id,5000,get,main,thread,execution,context
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID);1473383484;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}__				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class).get(5, TimeUnit.SECONDS)__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerType startedWorker = taskExecutorGateways.get(resourceID)__					if(startedWorker != null) {_						String oldWorkerAddress = startedWorker.getTaskExecutorGateway().getAddress()__						if (taskExecutorAddress.equals(oldWorkerAddress)) {_							log.warn("Receive a duplicate registration from TaskExecutor {} at ({})", resourceID, taskExecutorAddress)__						} else {_							log.warn("Receive a duplicate registration from TaskExecutor {} at different address, previous ({}), new ({})",_								resourceID, oldWorkerAddress, taskExecutorAddress)__							_							slotManager.notifyTaskManagerFailure(resourceID)__							startedWorker = workerStarted(resourceID, taskExecutorGateway)__							taskExecutorGateways.put(resourceID, startedWorker)__						}_					} else {_						startedWorker = workerStarted(resourceID, taskExecutorGateway)__						taskExecutorGateways.put(resourceID, startedWorker)__					}_					return new TaskExecutorRegistrationSuccess(startedWorker.getInstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,type,started,worker,task,executor,gateways,get,resource,id,if,started,worker,null,string,old,worker,address,started,worker,get,task,executor,gateway,get,address,if,task,executor,address,equals,old,worker,address,log,warn,receive,a,duplicate,registration,from,task,executor,at,resource,id,task,executor,address,else,log,warn,receive,a,duplicate,registration,from,task,executor,at,different,address,previous,new,resource,id,old,worker,address,task,executor,address,slot,manager,notify,task,manager,failure,resource,id,started,worker,worker,started,resource,id,task,executor,gateway,task,executor,gateways,put,resource,id,started,worker,else,started,worker,worker,started,resource,id,task,executor,gateway,task,executor,gateways,put,resource,id,started,worker,return,new,task,executor,registration,success,started,worker,get,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID);1474482025;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}__				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class).get(5, TimeUnit.SECONDS)__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					InstanceID id = new InstanceID()__					TaskExecutorRegistration oldTaskExecutor =_						taskExecutorGateways.put(resourceID, new TaskExecutorRegistration(taskExecutorGateway, id))__					if (oldTaskExecutor != null) {_						log.warn("Receive a duplicate registration from TaskExecutor {} at ({})", resourceID, taskExecutorAddress)__					}_					return new TaskExecutorRegistrationSuccess(id, 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,instance,id,id,new,instance,id,task,executor,registration,old,task,executor,task,executor,gateways,put,resource,id,new,task,executor,registration,task,executor,gateway,id,if,old,task,executor,null,log,warn,receive,a,duplicate,registration,from,task,executor,at,resource,id,task,executor,address,return,new,task,executor,registration,success,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID);1474858756;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class).get(5, TimeUnit.SECONDS)__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerType oldWorker = taskExecutorGateways.remove(resourceID)__					if (oldWorker != null) {_						_						slotManager.notifyTaskManagerFailure(resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					taskExecutorGateways.put(resourceID, newWorker)__					return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,type,old,worker,task,executor,gateways,remove,resource,id,if,old,worker,null,slot,manager,notify,task,manager,failure,resource,id,worker,type,new,worker,worker,started,resource,id,task,executor,gateways,put,resource,id,new,worker,return,new,task,executor,registration,success,new,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID);1474965482;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class).get(5, TimeUnit.SECONDS)__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerType oldWorker = taskExecutorGateways.remove(resourceID)__					if (oldWorker != null) {_						_						slotManager.notifyTaskManagerFailure(resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					taskExecutorGateways.put(resourceID, newWorker)__					return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,type,old,worker,task,executor,gateways,remove,resource,id,if,old,worker,null,slot,manager,notify,task,manager,failure,resource,id,worker,type,new,worker,worker,started,resource,id,task,executor,gateways,put,resource,id,new,worker,return,new,task,executor,registration,success,new,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID resourceID);1475110587;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param resourceID               The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID resourceID) {__		return getRpcService().execute(new Callable<TaskExecutorGateway>() {_			@Override_			public TaskExecutorGateway call() throws Exception {_				if (!leaderSessionID.equals(resourceManagerLeaderId)) {_					log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_							"not equal the received leader session ID  {}",_						resourceID, taskExecutorAddress, leaderSessionID, resourceManagerLeaderId)__					throw new Exception("Invalid leader session id")__				}_				return getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class).get(5, TimeUnit.SECONDS)__			}_		}).handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					WorkerType oldWorker = taskExecutorGateways.remove(resourceID)__					if (oldWorker != null) {_						_						slotManager.notifyTaskManagerFailure(resourceID)__					}_					WorkerType newWorker = workerStarted(resourceID)__					taskExecutorGateways.put(resourceID, newWorker)__					return new TaskExecutorRegistrationSuccess(new InstanceID(), 5000)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,resource,id,return,get,rpc,service,execute,new,callable,task,executor,gateway,override,public,task,executor,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,return,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,type,old,worker,task,executor,gateways,remove,resource,id,if,old,worker,null,slot,manager,notify,task,manager,failure,resource,id,worker,type,new,worker,worker,started,resource,id,task,executor,gateways,put,resource,id,new,worker,return,new,task,executor,registration,success,new,instance,id,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot(SlotRequest slotRequest);1472741611;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(SlotRequest slotRequest) {_		final JobID jobId = slotRequest.getJobId()__		final JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)___		if (jobMasterGateway != null) {_			return slotManager.requestSlot(slotRequest)__		} else {_			LOG.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,slot,request,slot,request,final,job,id,job,id,slot,request,get,job,id,final,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,if,job,master,gateway,null,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot(SlotRequest slotRequest);1473383484;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(SlotRequest slotRequest) {_		final JobID jobId = slotRequest.getJobId()__		final JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)___		if (jobMasterGateway != null) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,slot,request,slot,request,final,job,id,job,id,slot,request,get,job,id,final,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,if,job,master,gateway,null,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot(SlotRequest slotRequest);1474459992;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(SlotRequest slotRequest) {_		final JobID jobId = slotRequest.getJobId()__		final JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)___		if (jobMasterGateway != null) {_			return slotManager.requestSlot(slotRequest)__		} else {_			LOG.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,slot,request,slot,request,final,job,id,job,id,slot,request,get,job,id,final,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,if,job,master,gateway,null,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot(SlotRequest slotRequest);1474460045;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(SlotRequest slotRequest) {_		final JobID jobId = slotRequest.getJobId()__		final JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)___		if (jobMasterGateway != null) {_			return slotManager.requestSlot(slotRequest)__		} else {_			LOG.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,slot,request,slot,request,final,job,id,job,id,slot,request,get,job,id,final,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,if,job,master,gateway,null,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot(SlotRequest slotRequest);1474471581;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(SlotRequest slotRequest) {_		final JobID jobId = slotRequest.getJobId()__		final JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)___		if (jobMasterGateway != null) {_			return slotManager.requestSlot(slotRequest)__		} else {_			LOG.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,slot,request,slot,request,final,job,id,job,id,slot,request,get,job,id,final,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,if,job,master,gateway,null,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public SlotRequestReply requestSlot(SlotRequest slotRequest);1474482025;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotRequestReply requestSlot(SlotRequest slotRequest) {_		final JobID jobId = slotRequest.getJobId()__		final JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)___		if (jobMasterGateway != null) {_			return slotManager.requestSlot(slotRequest)__		} else {_			LOG.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new SlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,request,reply,request,slot,slot,request,slot,request,final,job,id,job,id,slot,request,get,job,id,final,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,if,job,master,gateway,null,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,slot,request,rejected,slot,request,get,allocation,id
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1473383484;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1474858756;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1474965482;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1475110587;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1475154512;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1475661506;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1475679726;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1476113770;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1476483941;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1476699326;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1476712982;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1476806580;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1476954428;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1477965803;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1478161487;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1480523747;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1486637985;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1488815863;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1489416902;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1489508610;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1490105415;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1490166753;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1490170142;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1490180625;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1490805029;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1495154056;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;1498565455;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics An optional diagnostics message.;protected abstract void shutDownApplication(ApplicationStatus finalStatus, String optionalDiagnostics)_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,an,optional,diagnostics,message;protected,abstract,void,shut,down,application,application,status,final,status,string,optional,diagnostics
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1486637985;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1487842224;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1490105415;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1495154056;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1498565455;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1498568657;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1499156512;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1499354178;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1501251235;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1501519642;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1501530463;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Acknowledge requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException;1501580028;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public Acknowledge requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) throws ResourceManagerException, LeaderSessionIDException {__		if (!Objects.equals(resourceManagerLeaderID, leaderSessionId)) {_			throw new LeaderSessionIDException(resourceManagerLeaderID, leaderSessionId)__		}__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (null != jobManagerRegistration) {_			if (Objects.equals(jobMasterLeaderID, jobManagerRegistration.getLeaderID())) {_				log.info("Request slot with profile {} for job {} with allocation id {}.",_					slotRequest.getResourceProfile(),_					slotRequest.getJobId(),_					slotRequest.getAllocationId())___				slotManager.registerSlotRequest(slotRequest)___				return Acknowledge.get()__			} else {_				throw new LeaderSessionIDException(jobMasterLeaderID, jobManagerRegistration.getLeaderID())__			}__		} else {_			throw new ResourceManagerException("Could not find registered job manager for job " + jobId + '.')__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,acknowledge,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,throws,resource,manager,exception,leader,session,idexception,if,objects,equals,resource,manager,leader,id,leader,session,id,throw,new,leader,session,idexception,resource,manager,leader,id,leader,session,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,null,job,manager,registration,if,objects,equals,job,master,leader,id,job,manager,registration,get,leader,id,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,slot,manager,register,slot,request,slot,request,return,acknowledge,get,else,throw,new,leader,session,idexception,job,master,leader,id,job,manager,registration,get,leader,id,else,throw,new,resource,manager,exception,could,not,find,registered,job,manager,for,job,job,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1473383484;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final LeaderConnectionInfo jobMasterLeaderInfo__					try {_						jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_							highAvailabilityServices.getJobMasterLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__					} catch (Exception e) {_						log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__						throw new Exception("Failed to retrieve JobMasterLeaderRetriever")__					}__					if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_						log.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__						throw new Exception("JobManager is not leading")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class).get(5, TimeUnit.SECONDS)__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {_					_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__						try {_							LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobMasterLeaderRetriever(jobID)__							jobMasterLeaderRetriever.start(jobMasterLeaderListener)__						} catch (Exception e) {_							log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__							return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__						}_						jobMasterLeaderRetrievalListeners.add(jobMasterLeaderListener)__						final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__						if (existingGateway != null) {_							log.info("Replacing gateway for registered JobID {}.", jobID)__						}_						return new JobMasterRegistrationSuccess(5000)__					}_				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,master,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,throw,new,exception,failed,to,retrieve,job,master,leader,retriever,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,throw,new,exception,job,manager,is,not,leading,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,master,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,add,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1474459992;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(resourceManagerLeaderId)__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		__		final FlinkCompletableFuture<RegistrationResponse> future = new FlinkCompletableFuture<>()___		if(!leaderSessionID.equals(resourceManagerLeaderId)) {_			log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_					" did not equal the received leader session ID  {}",_				jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__			future.complete(new RegistrationResponse.Decline("Invalid leader session id"))__			return future__		}__		final LeaderConnectionInfo jobMasterLeaderInfo__		try {_			jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_				highAvailabilityServices.getJobMasterLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__		} catch (Exception e) {_			LOG.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__			future.complete(new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__			return future__		}__		if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_			LOG.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__			future.complete(new RegistrationResponse.Decline("JobManager is not leading"))__			return future__		}__		Future<JobMasterGateway> jobMasterGatewayFuture =_			getRpcService().connect(jobMasterAddress, JobMasterGateway.class)___		return jobMasterGatewayFuture.thenApplyAsync(new ApplyFunction<JobMasterGateway, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(JobMasterGateway jobMasterGateway) {__				final JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__				try {_					LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobMasterLeaderRetriever(jobID)__					jobMasterLeaderRetriever.start(jobMasterLeaderListener)__				} catch (Exception e) {_					LOG.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__					return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__				}_				jobMasterLeaderRetrievalListeners.add(jobMasterLeaderListener)__				final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__				if (existingGateway != null) {_					log.info("Replacing gateway for registered JobID {}.", jobID)__				}_				return new JobMasterRegistrationSuccess(5000)__			}_		}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,resource,manager,leader,id,check,not,null,job,master,address,check,not,null,job,id,final,flink,completable,future,registration,response,future,new,flink,completable,future,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,future,complete,new,registration,response,decline,invalid,leader,session,id,return,future,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,master,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,future,complete,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,return,future,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,future,complete,new,registration,response,decline,job,manager,is,not,leading,return,future,future,job,master,gateway,job,master,gateway,future,get,rpc,service,connect,job,master,address,job,master,gateway,class,return,job,master,gateway,future,then,apply,async,new,apply,function,job,master,gateway,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,final,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,master,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,add,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1474482025;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final LeaderConnectionInfo jobMasterLeaderInfo__					try {_						jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_							highAvailabilityServices.getJobMasterLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__					} catch (Exception e) {_						LOG.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__						throw new Exception("Failed to retrieve JobMasterLeaderRetriever")__					}__					if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_						LOG.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__						throw new Exception("JobManager is not leading")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class).get(5, TimeUnit.SECONDS)__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {_					_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__						try {_							LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobMasterLeaderRetriever(jobID)__							jobMasterLeaderRetriever.start(jobMasterLeaderListener)__						} catch (Exception e) {_							LOG.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__							return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__						}_						jobMasterLeaderRetrievalListeners.add(jobMasterLeaderListener)__						final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__						if (existingGateway != null) {_							log.info("Replacing gateway for registered JobID {}.", jobID)__						}_						return new JobMasterRegistrationSuccess(5000)__					}_				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,master,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,throw,new,exception,failed,to,retrieve,job,master,leader,retriever,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,throw,new,exception,job,manager,is,not,leading,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,master,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,add,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1474858756;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final LeaderConnectionInfo jobMasterLeaderInfo__					try {_						jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_							highAvailabilityServices.getJobManagerLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__					} catch (Exception e) {_						log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__						throw new Exception("Failed to retrieve JobMasterLeaderRetriever")__					}__					if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_						log.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__						throw new Exception("JobManager is not leading")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class).get(5, TimeUnit.SECONDS)__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {_					_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						if (!jobMasterLeaderRetrievalListeners.containsKey(jobID)) {_							JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__							try {_								LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__								jobMasterLeaderRetriever.start(jobMasterLeaderListener)__							} catch (Exception e) {_								log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__								return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__							}_							jobMasterLeaderRetrievalListeners.put(jobID, jobMasterLeaderListener)__						}_						final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__						if (existingGateway != null) {_							log.info("Replacing gateway for registered JobID {}.", jobID)__						}_						return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)__					}_				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,throw,new,exception,failed,to,retrieve,job,master,leader,retriever,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,throw,new,exception,job,manager,is,not,leading,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,if,job,master,leader,retrieval,listeners,contains,key,job,id,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,put,job,id,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1474965482;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final LeaderConnectionInfo jobMasterLeaderInfo__					try {_						jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_							highAvailabilityServices.getJobMasterLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__					} catch (Exception e) {_						log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__						throw new Exception("Failed to retrieve JobMasterLeaderRetriever")__					}__					if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_						log.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__						throw new Exception("JobManager is not leading")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class).get(5, TimeUnit.SECONDS)__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {_					_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						if (!jobMasterLeaderRetrievalListeners.containsKey(jobID)) {_							JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__							try {_								LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobMasterLeaderRetriever(jobID)__								jobMasterLeaderRetriever.start(jobMasterLeaderListener)__							} catch (Exception e) {_								log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__								return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__							}_							jobMasterLeaderRetrievalListeners.put(jobID, jobMasterLeaderListener)__						}_						final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__						if (existingGateway != null) {_							log.info("Replacing gateway for registered JobID {}.", jobID)__						}_						return new JobMasterRegistrationSuccess(5000)__					}_				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,master,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,throw,new,exception,failed,to,retrieve,job,master,leader,retriever,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,throw,new,exception,job,manager,is,not,leading,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,if,job,master,leader,retrieval,listeners,contains,key,job,id,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,master,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,put,job,id,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1475110587;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final LeaderConnectionInfo jobMasterLeaderInfo__					try {_						jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_							highAvailabilityServices.getJobMasterLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__					} catch (Exception e) {_						log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__						throw new Exception("Failed to retrieve JobMasterLeaderRetriever")__					}__					if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_						log.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__						throw new Exception("JobManager is not leading")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class).get(5, TimeUnit.SECONDS)__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {_					_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						if (!jobMasterLeaderRetrievalListeners.containsKey(jobID)) {_							JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__							try {_								LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobMasterLeaderRetriever(jobID)__								jobMasterLeaderRetriever.start(jobMasterLeaderListener)__							} catch (Exception e) {_								log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__								return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__							}_							jobMasterLeaderRetrievalListeners.put(jobID, jobMasterLeaderListener)__						}_						final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__						if (existingGateway != null) {_							log.info("Replacing gateway for registered JobID {}.", jobID)__						}_						return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)__					}_				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,master,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,throw,new,exception,failed,to,retrieve,job,master,leader,retriever,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,throw,new,exception,job,manager,is,not,leading,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,if,job,master,leader,retrieval,listeners,contains,key,job,id,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,master,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,put,job,id,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1475154512;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final LeaderConnectionInfo jobMasterLeaderInfo__					try {_						jobMasterLeaderInfo = LeaderRetrievalUtils.retrieveLeaderConnectionInfo(_							highAvailabilityServices.getJobManagerLeaderRetriever(jobID), new FiniteDuration(5, TimeUnit.SECONDS))__					} catch (Exception e) {_						log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__						throw new Exception("Failed to retrieve JobMasterLeaderRetriever")__					}__					if (!jobMasterLeaderId.equals(jobMasterLeaderInfo.getLeaderSessionID())) {_						log.info("Declining registration request from non-leading JobManager {}", jobMasterAddress)__						throw new Exception("JobManager is not leading")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class).get(5, TimeUnit.SECONDS)__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						if (!jobMasterLeaderRetrievalListeners.containsKey(jobID)) {_							JobMasterLeaderListener jobMasterLeaderListener = new JobMasterLeaderListener(jobID)__							try {_								LeaderRetrievalService jobMasterLeaderRetriever = highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__								jobMasterLeaderRetriever.start(jobMasterLeaderListener)__							} catch (Exception e) {_								log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__								return new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever")__							}_							jobMasterLeaderRetrievalListeners.put(jobID, jobMasterLeaderListener)__						}_						final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__						if (existingGateway != null) {_							log.info("Replacing gateway for registered JobID {}.", jobID)__						}_						return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)__					}_				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,leader,connection,info,job,master,leader,info,try,job,master,leader,info,leader,retrieval,utils,retrieve,leader,connection,info,high,availability,services,get,job,manager,leader,retriever,job,id,new,finite,duration,5,time,unit,seconds,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,throw,new,exception,failed,to,retrieve,job,master,leader,retriever,if,job,master,leader,id,equals,job,master,leader,info,get,leader,session,id,log,info,declining,registration,request,from,non,leading,job,manager,job,master,address,throw,new,exception,job,manager,is,not,leading,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,5,time,unit,seconds,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,if,job,master,leader,retrieval,listeners,contains,key,job,id,job,master,leader,listener,job,master,leader,listener,new,job,master,leader,listener,job,id,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,master,leader,retriever,start,job,master,leader,listener,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,return,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,job,master,leader,retrieval,listeners,put,job,id,job,master,leader,listener,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,gateway,for,registered,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1475661506;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		final JobIdLeaderListener jobIdLeaderListener__		if (leaderListeners.containsKey(jobID)) {_			jobIdLeaderListener = leaderListeners.get(jobID)__		} else {_			try {_				LeaderRetrievalService jobMasterLeaderRetriever =_					highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__				jobIdLeaderListener = new JobIdLeaderListener(jobID, jobMasterLeaderRetriever)__			} catch (Exception e) {_				log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__				FlinkCompletableFuture<RegistrationResponse> responseFuture = new FlinkCompletableFuture<>()__				responseFuture.complete(new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__				return responseFuture__			}_			leaderListeners.put(jobID, jobIdLeaderListener)__		}__		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					if (!jobIdLeaderListener.getLeaderID().get(timeout.getSize(), timeout.getUnit())_							.equals(jobMasterLeaderId)) {_						throw new Exception("Leader Id did not match")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class)_						.get(timeout.getSize(), timeout.getUnit())__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					}__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						return new RegistrationResponse.Decline("Invalid leader session id")__					}__					try {_						_						UUID currentJobMasterLeaderId = jobIdLeaderListener.getLeaderID().getNow(null)__						if (currentJobMasterLeaderId == null || !currentJobMasterLeaderId.equals(jobMasterLeaderId)) {_							throw new Exception("Leader Id did not match")__						}_					} catch (Exception e) {_						return new RegistrationResponse.Decline(e.getMessage())__					}__					final JobMasterRegistration registration =_						new JobMasterRegistration(jobID, jobMasterLeaderId, jobMasterGateway)___					final JobMasterRegistration existingRegistration = jobMasters.put(jobID, registration)__					if (existingRegistration != null) {_						log.info("Replacing JobMaster registration for newly registered JobMaster with JobID {}.", jobID)__					}_					return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)___				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,final,job,id,leader,listener,job,id,leader,listener,if,leader,listeners,contains,key,job,id,job,id,leader,listener,leader,listeners,get,job,id,else,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,id,leader,listener,new,job,id,leader,listener,job,id,job,master,leader,retriever,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,flink,completable,future,registration,response,response,future,new,flink,completable,future,response,future,complete,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,return,response,future,leader,listeners,put,job,id,job,id,leader,listener,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,if,job,id,leader,listener,get,leader,id,get,timeout,get,size,timeout,get,unit,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,timeout,get,size,timeout,get,unit,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,return,new,registration,response,decline,invalid,leader,session,id,try,uuid,current,job,master,leader,id,job,id,leader,listener,get,leader,id,get,now,null,if,current,job,master,leader,id,null,current,job,master,leader,id,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,catch,exception,e,return,new,registration,response,decline,e,get,message,final,job,master,registration,registration,new,job,master,registration,job,id,job,master,leader,id,job,master,gateway,final,job,master,registration,existing,registration,job,masters,put,job,id,registration,if,existing,registration,null,log,info,replacing,job,master,registration,for,newly,registered,job,master,with,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1475679726;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		final JobIdLeaderListener jobIdLeaderListener__		if (leaderListeners.containsKey(jobID)) {_			jobIdLeaderListener = leaderListeners.get(jobID)__		} else {_			try {_				LeaderRetrievalService jobMasterLeaderRetriever =_					highAvailabilityServices.getJobManagerLeaderRetriever(jobID, jobMasterAddress)__				jobIdLeaderListener = new JobIdLeaderListener(jobID, jobMasterLeaderRetriever)__			} catch (Exception e) {_				log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__				FlinkCompletableFuture<RegistrationResponse> responseFuture = new FlinkCompletableFuture<>()__				responseFuture.complete(new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__				return responseFuture__			}_			leaderListeners.put(jobID, jobIdLeaderListener)__		}__		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					if (!jobIdLeaderListener.getLeaderID().get(timeout.getSize(), timeout.getUnit())_							.equals(jobMasterLeaderId)) {_						throw new Exception("Leader Id did not match")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class)_						.get(timeout.getSize(), timeout.getUnit())__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					}__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						return new RegistrationResponse.Decline("Invalid leader session id")__					}__					try {_						_						UUID currentJobMasterLeaderId = jobIdLeaderListener.getLeaderID().getNow(null)__						if (currentJobMasterLeaderId == null || !currentJobMasterLeaderId.equals(jobMasterLeaderId)) {_							throw new Exception("Leader Id did not match")__						}_					} catch (Exception e) {_						return new RegistrationResponse.Decline(e.getMessage())__					}__					final JobMasterRegistration registration =_						new JobMasterRegistration(jobID, jobMasterLeaderId, jobMasterGateway)___					final JobMasterRegistration existingRegistration = jobMasters.put(jobID, registration)__					if (existingRegistration != null) {_						log.info("Replacing JobMaster registration for newly registered JobMaster with JobID {}.", jobID)__					}_					return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)___				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,final,job,id,leader,listener,job,id,leader,listener,if,leader,listeners,contains,key,job,id,job,id,leader,listener,leader,listeners,get,job,id,else,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,master,address,job,id,leader,listener,new,job,id,leader,listener,job,id,job,master,leader,retriever,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,flink,completable,future,registration,response,response,future,new,flink,completable,future,response,future,complete,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,return,response,future,leader,listeners,put,job,id,job,id,leader,listener,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,if,job,id,leader,listener,get,leader,id,get,timeout,get,size,timeout,get,unit,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,timeout,get,size,timeout,get,unit,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,return,new,registration,response,decline,invalid,leader,session,id,try,uuid,current,job,master,leader,id,job,id,leader,listener,get,leader,id,get,now,null,if,current,job,master,leader,id,null,current,job,master,leader,id,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,catch,exception,e,return,new,registration,response,decline,e,get,message,final,job,master,registration,registration,new,job,master,registration,job,id,job,master,leader,id,job,master,gateway,final,job,master,registration,existing,registration,job,masters,put,job,id,registration,if,existing,registration,null,log,info,replacing,job,master,registration,for,newly,registered,job,master,with,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1476113770;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		final JobIdLeaderListener jobIdLeaderListener__		if (leaderListeners.containsKey(jobID)) {_			jobIdLeaderListener = leaderListeners.get(jobID)__		} else {_			try {_				LeaderRetrievalService jobMasterLeaderRetriever =_					highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__				jobIdLeaderListener = new JobIdLeaderListener(jobID, jobMasterLeaderRetriever)__			} catch (Exception e) {_				log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__				FlinkCompletableFuture<RegistrationResponse> responseFuture = new FlinkCompletableFuture<>()__				responseFuture.complete(new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__				return responseFuture__			}_			leaderListeners.put(jobID, jobIdLeaderListener)__		}__		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					if (!jobIdLeaderListener.getLeaderID().get(timeout.getSize(), timeout.getUnit())_							.equals(jobMasterLeaderId)) {_						throw new Exception("Leader Id did not match")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class)_						.get(timeout.getSize(), timeout.getUnit())__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					}__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						return new RegistrationResponse.Decline("Invalid leader session id")__					}__					try {_						_						UUID currentJobMasterLeaderId = jobIdLeaderListener.getLeaderID().getNow(null)__						if (currentJobMasterLeaderId == null || !currentJobMasterLeaderId.equals(jobMasterLeaderId)) {_							throw new Exception("Leader Id did not match")__						}_					} catch (Exception e) {_						return new RegistrationResponse.Decline(e.getMessage())__					}__					final JobMasterRegistration registration =_						new JobMasterRegistration(jobID, jobMasterLeaderId, jobMasterGateway)___					final JobMasterRegistration existingRegistration = jobMasters.put(jobID, registration)__					if (existingRegistration != null) {_						log.info("Replacing JobMaster registration for newly registered JobMaster with JobID {}.", jobID)__					}_					return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)___				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,final,job,id,leader,listener,job,id,leader,listener,if,leader,listeners,contains,key,job,id,job,id,leader,listener,leader,listeners,get,job,id,else,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,id,leader,listener,new,job,id,leader,listener,job,id,job,master,leader,retriever,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,flink,completable,future,registration,response,response,future,new,flink,completable,future,response,future,complete,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,return,response,future,leader,listeners,put,job,id,job,id,leader,listener,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,if,job,id,leader,listener,get,leader,id,get,timeout,get,size,timeout,get,unit,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,timeout,get,size,timeout,get,unit,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,return,new,registration,response,decline,invalid,leader,session,id,try,uuid,current,job,master,leader,id,job,id,leader,listener,get,leader,id,get,now,null,if,current,job,master,leader,id,null,current,job,master,leader,id,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,catch,exception,e,return,new,registration,response,decline,e,get,message,final,job,master,registration,registration,new,job,master,registration,job,id,job,master,leader,id,job,master,gateway,final,job,master,registration,existing,registration,job,masters,put,job,id,registration,if,existing,registration,null,log,info,replacing,job,master,registration,for,newly,registered,job,master,with,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1476483941;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		final JobIdLeaderListener jobIdLeaderListener__		if (leaderListeners.containsKey(jobID)) {_			jobIdLeaderListener = leaderListeners.get(jobID)__		} else {_			try {_				LeaderRetrievalService jobMasterLeaderRetriever =_					highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__				jobIdLeaderListener = new JobIdLeaderListener(jobID, jobMasterLeaderRetriever)__			} catch (Exception e) {_				log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__				FlinkCompletableFuture<RegistrationResponse> responseFuture = new FlinkCompletableFuture<>()__				responseFuture.complete(new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__				return responseFuture__			}_			leaderListeners.put(jobID, jobIdLeaderListener)__		}__		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					if (!jobIdLeaderListener.getLeaderID().get(timeout.getSize(), timeout.getUnit())_							.equals(jobMasterLeaderId)) {_						throw new Exception("Leader Id did not match")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class)_						.get(timeout.getSize(), timeout.getUnit())__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					}__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						return new RegistrationResponse.Decline("Invalid leader session id")__					}__					try {_						_						UUID currentJobMasterLeaderId = jobIdLeaderListener.getLeaderID().getNow(null)__						if (currentJobMasterLeaderId == null || !currentJobMasterLeaderId.equals(jobMasterLeaderId)) {_							throw new Exception("Leader Id did not match")__						}_					} catch (Exception e) {_						return new RegistrationResponse.Decline(e.getMessage())__					}__					final JobMasterRegistration registration =_						new JobMasterRegistration(jobID, jobMasterLeaderId, jobMasterGateway)___					final JobMasterRegistration existingRegistration = jobMasters.put(jobID, registration)__					if (existingRegistration != null) {_						log.info("Replacing JobMaster registration for newly registered JobMaster with JobID {}.", jobID)__					}_					return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)___				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,final,job,id,leader,listener,job,id,leader,listener,if,leader,listeners,contains,key,job,id,job,id,leader,listener,leader,listeners,get,job,id,else,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,id,leader,listener,new,job,id,leader,listener,job,id,job,master,leader,retriever,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,flink,completable,future,registration,response,response,future,new,flink,completable,future,response,future,complete,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,return,response,future,leader,listeners,put,job,id,job,id,leader,listener,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,if,job,id,leader,listener,get,leader,id,get,timeout,get,size,timeout,get,unit,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,timeout,get,size,timeout,get,unit,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,return,new,registration,response,decline,invalid,leader,session,id,try,uuid,current,job,master,leader,id,job,id,leader,listener,get,leader,id,get,now,null,if,current,job,master,leader,id,null,current,job,master,leader,id,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,catch,exception,e,return,new,registration,response,decline,e,get,message,final,job,master,registration,registration,new,job,master,registration,job,id,job,master,leader,id,job,master,gateway,final,job,master,registration,existing,registration,job,masters,put,job,id,registration,if,existing,registration,null,log,info,replacing,job,master,registration,for,newly,registered,job,master,with,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1476699326;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		final JobIdLeaderListener jobIdLeaderListener__		if (leaderListeners.containsKey(jobID)) {_			jobIdLeaderListener = leaderListeners.get(jobID)__		} else {_			try {_				LeaderRetrievalService jobMasterLeaderRetriever =_					highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__				jobIdLeaderListener = new JobIdLeaderListener(jobID, jobMasterLeaderRetriever)__			} catch (Exception e) {_				log.warn("Failed to start JobMasterLeaderRetriever for JobID {}", jobID)__				FlinkCompletableFuture<RegistrationResponse> responseFuture = new FlinkCompletableFuture<>()__				responseFuture.complete(new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__				return responseFuture__			}_			leaderListeners.put(jobID, jobIdLeaderListener)__		}__		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					if (!jobIdLeaderListener.getLeaderID().get(timeout.getSize(), timeout.getUnit())_							.equals(jobMasterLeaderId)) {_						throw new Exception("Leader Id did not match")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class)_						.get(timeout.getSize(), timeout.getUnit())__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					}__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						return new RegistrationResponse.Decline("Invalid leader session id")__					}__					try {_						_						UUID currentJobMasterLeaderId = jobIdLeaderListener.getLeaderID().getNow(null)__						if (currentJobMasterLeaderId == null || !currentJobMasterLeaderId.equals(jobMasterLeaderId)) {_							throw new Exception("Leader Id did not match")__						}_					} catch (Exception e) {_						return new RegistrationResponse.Decline(e.getMessage())__					}__					final JobMasterRegistration registration =_						new JobMasterRegistration(jobID, jobMasterLeaderId, jobMasterGateway)___					final JobMasterRegistration existingRegistration = jobMasters.put(jobID, registration)__					if (existingRegistration != null) {_						log.info("Replacing JobMaster registration for newly registered JobMaster with JobID {}.", jobID)__					}_					return new JobMasterRegistrationSuccess(5000, resourceManagerLeaderId)___				}_			}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,final,job,id,leader,listener,job,id,leader,listener,if,leader,listeners,contains,key,job,id,job,id,leader,listener,leader,listeners,get,job,id,else,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,id,leader,listener,new,job,id,leader,listener,job,id,job,master,leader,retriever,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,flink,completable,future,registration,response,response,future,new,flink,completable,future,response,future,complete,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,return,response,future,leader,listeners,put,job,id,job,id,leader,listener,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,if,job,id,leader,listener,get,leader,id,get,timeout,get,size,timeout,get,unit,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,timeout,get,size,timeout,get,unit,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,return,new,registration,response,decline,invalid,leader,session,id,try,uuid,current,job,master,leader,id,job,id,leader,listener,get,leader,id,get,now,null,if,current,job,master,leader,id,null,current,job,master,leader,id,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,catch,exception,e,return,new,registration,response,decline,e,get,message,final,job,master,registration,registration,new,job,master,registration,job,id,job,master,leader,id,job,master,gateway,final,job,master,registration,existing,registration,job,masters,put,job,id,registration,if,existing,registration,null,log,info,replacing,job,master,registration,for,newly,registered,job,master,with,job,id,job,id,return,new,job,master,registration,success,5000,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster( 		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId, 		final String jobMasterAddress, final JobID jobID);1476712982;Register a {@link JobMaster} at the resource manager.__@param resourceManagerLeaderId The fencing token for the ResourceManager leader_@param jobMasterAddress        The address of the JobMaster that registers_@param jobID                   The Job ID of the JobMaster that registers_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(_		final UUID resourceManagerLeaderId, final UUID jobMasterLeaderId,_		final String jobMasterAddress, final JobID jobID) {__		checkNotNull(jobMasterAddress)__		checkNotNull(jobID)___		_		final JobIdLeaderListener jobIdLeaderListener__		if (leaderListeners.containsKey(jobID)) {_			jobIdLeaderListener = leaderListeners.get(jobID)__		} else {_			try {_				LeaderRetrievalService jobMasterLeaderRetriever =_					highAvailabilityServices.getJobManagerLeaderRetriever(jobID)__				jobIdLeaderListener = new JobIdLeaderListener(jobID, jobMasterLeaderRetriever)__			} catch (Exception e) {_				log.warn("Failed to start JobMasterLeaderRetriever for job id {}", jobID, e)___				return FlinkCompletableFuture.<RegistrationResponse>completed(_					new RegistrationResponse.Decline("Failed to retrieve JobMasterLeaderRetriever"))__			}__			leaderListeners.put(jobID, jobIdLeaderListener)__		}__		return getRpcService()_			.execute(new Callable<JobMasterGateway>() {_				@Override_				public JobMasterGateway call() throws Exception {__					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						throw new Exception("Invalid leader session id")__					}__					final Time timeout = resourceManagerConfiguration.getTimeout()___					if (!jobIdLeaderListener.getLeaderID().get(timeout.getSize(), timeout.getUnit())_							.equals(jobMasterLeaderId)) {_						throw new Exception("Leader Id did not match")__					}__					return getRpcService().connect(jobMasterAddress, JobMasterGateway.class)_						.get(timeout.getSize(), timeout.getUnit())__				}_			})_			.handleAsync(new BiFunction<JobMasterGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(JobMasterGateway jobMasterGateway, Throwable throwable) {__				if (throwable != null) {_					return new RegistrationResponse.Decline(throwable.getMessage())__				} else {_					if (!leaderSessionID.equals(resourceManagerLeaderId)) {_						log.warn("Discard registration from JobMaster {} at ({}) because the expected leader session ID {}" +_								" did not equal the received leader session ID  {}",_							jobID, jobMasterAddress, leaderSessionID, resourceManagerLeaderId)__						return new RegistrationResponse.Decline("Invalid leader session id")__					}__					try {_						_						UUID currentJobMasterLeaderId = jobIdLeaderListener.getLeaderID().getNow(null)__						if (currentJobMasterLeaderId == null || !currentJobMasterLeaderId.equals(jobMasterLeaderId)) {_							throw new Exception("Leader Id did not match")__						}_					} catch (Exception e) {_						return new RegistrationResponse.Decline(e.getMessage())__					}__					final JobMasterRegistration registration =_						new JobMasterRegistration(jobID, jobMasterLeaderId, jobMasterGateway)___					final JobMasterRegistration existingRegistration = jobMasters.put(jobID, registration)__					if (existingRegistration != null) {_						log.info("Replacing JobMaster registration for newly registered JobMaster with JobID {}.", jobID)__					}_					return new JobMasterRegistrationSuccess(_						resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_						resourceManagerLeaderId)__				}_			}_		}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,job,master,address,the,address,of,the,job,master,that,registers,param,job,id,the,job,id,of,the,job,master,that,registers,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,final,uuid,resource,manager,leader,id,final,uuid,job,master,leader,id,final,string,job,master,address,final,job,id,job,id,check,not,null,job,master,address,check,not,null,job,id,final,job,id,leader,listener,job,id,leader,listener,if,leader,listeners,contains,key,job,id,job,id,leader,listener,leader,listeners,get,job,id,else,try,leader,retrieval,service,job,master,leader,retriever,high,availability,services,get,job,manager,leader,retriever,job,id,job,id,leader,listener,new,job,id,leader,listener,job,id,job,master,leader,retriever,catch,exception,e,log,warn,failed,to,start,job,master,leader,retriever,for,job,id,job,id,e,return,flink,completable,future,registration,response,completed,new,registration,response,decline,failed,to,retrieve,job,master,leader,retriever,leader,listeners,put,job,id,job,id,leader,listener,return,get,rpc,service,execute,new,callable,job,master,gateway,override,public,job,master,gateway,call,throws,exception,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,throw,new,exception,invalid,leader,session,id,final,time,timeout,resource,manager,configuration,get,timeout,if,job,id,leader,listener,get,leader,id,get,timeout,get,size,timeout,get,unit,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,return,get,rpc,service,connect,job,master,address,job,master,gateway,class,get,timeout,get,size,timeout,get,unit,handle,async,new,bi,function,job,master,gateway,throwable,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,if,leader,session,id,equals,resource,manager,leader,id,log,warn,discard,registration,from,job,master,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,job,id,job,master,address,leader,session,id,resource,manager,leader,id,return,new,registration,response,decline,invalid,leader,session,id,try,uuid,current,job,master,leader,id,job,id,leader,listener,get,leader,id,get,now,null,if,current,job,master,leader,id,null,current,job,master,leader,id,equals,job,master,leader,id,throw,new,exception,leader,id,did,not,match,catch,exception,e,return,new,registration,response,decline,e,get,message,final,job,master,registration,registration,new,job,master,registration,job,id,job,master,leader,id,job,master,gateway,final,job,master,registration,existing,registration,job,masters,put,job,id,registration,if,existing,registration,null,log,info,replacing,job,master,registration,for,newly,registered,job,master,with,job,id,job,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,resource,manager,leader,id,get,main,thread,executor
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1472741611;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.notifyLeaderAddress(getAddress(), leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,notify,leader,address,get,address,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1473383484;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1474459992;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1474460045;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.notifyLeaderAddress(getAddress(), leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,notify,leader,address,get,address,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1474471581;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.notifyLeaderAddress(getAddress(), leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,notify,leader,address,get,address,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1474482025;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1474858756;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1474965482;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1475110587;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1475154512;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				_				slotManager.setLeaderUUID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,slot,manager,set,leader,uuid,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1475661506;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1475679726;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1476113770;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1476483941;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> @Override 	public void grantLeadership(final UUID leaderSessionID);1476699326;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_	public void grantLeadership(final UUID leaderSessionID) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__				_				leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				ResourceManager.this.leaderSessionID = leaderSessionID__			}_		})__	};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id,resource,manager,this,leader,session,id,leader,session,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1473383484;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutorGateways.remove(resourceID)__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executor,gateways,remove,resource,id,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1474858756;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutorGateways.remove(resourceID)__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executor,gateways,remove,resource,id,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1474965482;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutorGateways.remove(resourceID)__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executor,gateways,remove,resource,id,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1475110587;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutorGateways.remove(resourceID)__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executor,gateways,remove,resource,id,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1475154512;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutors.remove(resourceID).getWorker()__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executors,remove,resource,id,get,worker,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1475661506;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutors.remove(resourceID).getWorker()__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executors,remove,resource,id,get,worker,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1475679726;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutors.remove(resourceID).getWorker()__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executors,remove,resource,id,get,worker,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1476113770;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutors.remove(resourceID).getWorker()__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executors,remove,resource,id,get,worker,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1476483941;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutors.remove(resourceID).getWorker()__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executors,remove,resource,id,get,worker,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, String message);1476699326;This method should be called by the framework once it detects that a currently registered task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerType worker = taskExecutors.remove(resourceID).getWorker()__				if (worker != null) {_					_					slotManager.notifyTaskManagerFailure(resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,string,message,run,async,new,runnable,override,public,void,run,worker,type,worker,task,executors,remove,resource,id,get,worker,if,worker,null,slot,manager,notify,task,manager,failure,resource,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1475154512;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterGateway jobMasterGateway = jobMasterGateways.get(jobId)__		JobMasterLeaderListener jobMasterLeaderListener = jobMasterLeaderRetrievalListeners.get(jobId)___		UUID leaderID = jobMasterLeaderListener.getLeaderID()___		if (jobMasterGateway != null_				&& jobMasterLeaderID.equals(leaderID)_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,gateway,job,master,gateway,job,master,gateways,get,job,id,job,master,leader,listener,job,master,leader,listener,job,master,leader,retrieval,listeners,get,job,id,uuid,leader,id,job,master,leader,listener,get,leader,id,if,job,master,gateway,null,job,master,leader,id,equals,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1475661506;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterRegistration jobMasterRegistration = jobMasters.get(jobId)___		if (jobMasterRegistration != null_				&& jobMasterLeaderID.equals(jobMasterRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,registration,job,master,registration,job,masters,get,job,id,if,job,master,registration,null,job,master,leader,id,equals,job,master,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1475679726;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterRegistration jobMasterRegistration = jobMasters.get(jobId)___		if (jobMasterRegistration != null_				&& jobMasterLeaderID.equals(jobMasterRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,registration,job,master,registration,job,masters,get,job,id,if,job,master,registration,null,job,master,leader,id,equals,job,master,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1476113770;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterRegistration jobMasterRegistration = jobMasters.get(jobId)___		if (jobMasterRegistration != null_				&& jobMasterLeaderID.equals(jobMasterRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,registration,job,master,registration,job,masters,get,job,id,if,job,master,registration,null,job,master,leader,id,equals,job,master,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1476483941;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterRegistration jobMasterRegistration = jobMasters.get(jobId)___		if (jobMasterRegistration != null_				&& jobMasterLeaderID.equals(jobMasterRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,registration,job,master,registration,job,masters,get,job,id,if,job,master,registration,null,job,master,leader,id,equals,job,master,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1476699326;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterRegistration jobMasterRegistration = jobMasters.get(jobId)___		if (jobMasterRegistration != null_				&& jobMasterLeaderID.equals(jobMasterRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,registration,job,master,registration,job,masters,get,job,id,if,job,master,registration,null,job,master,leader,id,equals,job,master,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1476712982;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobMasterRegistration jobMasterRegistration = jobMasters.get(jobId)___		if (jobMasterRegistration != null_				&& jobMasterLeaderID.equals(jobMasterRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionID)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,master,registration,job,master,registration,job,masters,get,job,id,if,job,master,registration,null,job,master,leader,id,equals,job,master,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1476806580;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1476954428;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1477965803;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1478161487;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1480523747;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1488815863;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1489416902;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1489508610;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1490166753;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1490170142;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1490180625;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @RpcMethod 	public RMSlotRequestReply requestSlot( 			UUID jobMasterLeaderID, 			UUID resourceManagerLeaderID, 			SlotRequest slotRequest);1490805029;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public RMSlotRequestReply requestSlot(_			UUID jobMasterLeaderID,_			UUID resourceManagerLeaderID,_			SlotRequest slotRequest) {__		log.info("Request slot with profile {} for job {} with allocation id {}.",_			slotRequest.getResourceProfile(),_			slotRequest.getJobId(),_			slotRequest.getAllocationId())___		JobID jobId = slotRequest.getJobId()__		JobManagerRegistration jobManagerRegistration = jobManagerRegistrations.get(jobId)___		if (jobManagerRegistration != null_				&& jobMasterLeaderID.equals(jobManagerRegistration.getLeaderID())_				&& resourceManagerLeaderID.equals(leaderSessionId)) {_			return slotManager.requestSlot(slotRequest)__		} else {_			log.info("Ignoring slot request for unknown JobMaster with JobID {}", jobId)__			return new RMSlotRequestRejected(slotRequest.getAllocationId())__		}_	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,rmslot,request,reply,request,slot,uuid,job,master,leader,id,uuid,resource,manager,leader,id,slot,request,slot,request,log,info,request,slot,with,profile,for,job,with,allocation,id,slot,request,get,resource,profile,slot,request,get,job,id,slot,request,get,allocation,id,job,id,job,id,slot,request,get,job,id,job,manager,registration,job,manager,registration,job,manager,registrations,get,job,id,if,job,manager,registration,null,job,master,leader,id,equals,job,manager,registration,get,leader,id,resource,manager,leader,id,equals,leader,session,id,return,slot,manager,request,slot,slot,request,else,log,info,ignoring,slot,request,for,unknown,job,master,with,job,id,job,id,return,new,rmslot,request,rejected,slot,request,get,allocation,id
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1521667168;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1525374816;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1525934187;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1527094227;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1530503760;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1531923839;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1531998464;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1532919460;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1534241555;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1534938698;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1536623937;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1536846489;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1537448260;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1537512807;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1539159479;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1539582212;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1542290209;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1549383138;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1549533702;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public CompletableFuture<Acknowledge> deregisterApplication( 			final ApplicationStatus finalStatus, 			@Nullable final String diagnostics);1550403532;Cleanup application and shut down cluster.__@param finalStatus of the Flink application_@param diagnostics diagnostics message for the Flink application or {@code null};@Override_	public CompletableFuture<Acknowledge> deregisterApplication(_			final ApplicationStatus finalStatus,_			@Nullable final String diagnostics) {_		log.info("Shut down cluster because application is in {}, diagnostics {}.", finalStatus, diagnostics)___		try {_			internalDeregisterApplication(finalStatus, diagnostics)__		} catch (ResourceManagerException e) {_			log.warn("Could not properly shutdown the application.", e)__		}__		return CompletableFuture.completedFuture(Acknowledge.get())__	};cleanup,application,and,shut,down,cluster,param,final,status,of,the,flink,application,param,diagnostics,diagnostics,message,for,the,flink,application,or,code,null;override,public,completable,future,acknowledge,deregister,application,final,application,status,final,status,nullable,final,string,diagnostics,log,info,shut,down,cluster,because,application,is,in,diagnostics,final,status,diagnostics,try,internal,deregister,application,final,status,diagnostics,catch,resource,manager,exception,e,log,warn,could,not,properly,shutdown,the,application,e,return,completable,future,completed,future,acknowledge,get
ResourceManager -> @Override 	public void revokeLeadership();1472741611;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				ResourceManager.this.leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,resource,manager,this,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1473383484;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				taskExecutorGateways.clear()__				slotManager.clearState()__				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,task,executor,gateways,clear,slot,manager,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1474459992;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				slotManager.clearState()__				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,slot,manager,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1474460045;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				ResourceManager.this.leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,resource,manager,this,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1474471581;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				ResourceManager.this.leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,resource,manager,this,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1474482025;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				taskExecutorGateways.clear()__				slotManager.clearState()__				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,task,executor,gateways,clear,slot,manager,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1474858756;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				taskExecutorGateways.clear()__				slotManager.clearState()__				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,task,executor,gateways,clear,slot,manager,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1474965482;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				taskExecutorGateways.clear()__				slotManager.clearState()__				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,task,executor,gateways,clear,slot,manager,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1475110587;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				taskExecutorGateways.clear()__				slotManager.clearState()__				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,task,executor,gateways,clear,slot,manager,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1475154512;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				jobMasterGateways.clear()__				taskExecutors.clear()__				slotManager.clearState()__				leaderSessionID = new UUID(0, 0)__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,job,master,gateways,clear,task,executors,clear,slot,manager,clear,state,leader,session,id,new,uuid,0,0
ResourceManager -> @Override 	public void revokeLeadership();1475661506;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				clearState()__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state
ResourceManager -> @Override 	public void revokeLeadership();1475679726;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				clearState()__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state
ResourceManager -> @Override 	public void revokeLeadership();1476113770;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				clearState()__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state
ResourceManager -> @Override 	public void revokeLeadership();1476483941;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				clearState()__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state
ResourceManager -> @Override 	public void revokeLeadership();1476699326;Callback method when current resourceManager lose leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())__				clearState()__			}_		})__	};callback,method,when,current,resource,manager,lose,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state
ResourceManager -> @Override 	public void revokeLeadership();1476712982;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionID = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1476806580;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1476954428;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1477965803;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1478161487;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1480523747;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1486637985;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1487842224;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1488815863;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1489416902;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1489508610;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1490105415;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1490166753;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1490170142;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1490180625;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1490805029;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1495154056;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1498565455;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1498568657;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1499156512;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1499354178;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1501251235;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1501519642;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1501530463;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1501580028;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1502196227;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()___				leaderSessionId = null__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend,leader,session,id,null
ResourceManager -> @Override 	public void revokeLeadership();1502366829;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1502714913;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1503019375;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsync(new Runnable() {_			@Override_			public void run() {_				log.info("ResourceManager {} was revoked leadership.", getAddress())___				clearState()___				slotManager.suspend()__			}_		})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,revoked,leadership,get,address,clear,state,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1503580260;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.generate()___				log.info("ResourceManager {} was revoked leadership. Setting fencing token to {}.", getAddress(), newResourceManagerId)___				clearState()___				setFencingToken(newResourceManagerId)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,generate,log,info,resource,manager,was,revoked,leadership,setting,fencing,token,to,get,address,new,resource,manager,id,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1503588382;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				final ResourceManagerId newResourceManagerId = ResourceManagerId.generate()___				log.info("ResourceManager {} was revoked leadership. Setting fencing token to {}.", getAddress(), newResourceManagerId)___				clearState()___				setFencingToken(newResourceManagerId)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,final,resource,manager,id,new,resource,manager,id,resource,manager,id,generate,log,info,resource,manager,was,revoked,leadership,setting,fencing,token,to,get,address,new,resource,manager,id,clear,state,set,fencing,token,new,resource,manager,id,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1505921975;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1507240448;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1507653580;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1507738083;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1507761617;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1508234238;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1508245421;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1508252550;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1508327406;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1508426573;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1508494390;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1511869419;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1511873631;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1512727362;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1517911296;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1517911540;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1518718788;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1521033687;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1521641386;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1521667168;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1525374816;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1525934187;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1527094227;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1530503760;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1531923839;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1531998464;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearState()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1532919460;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1534241555;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1534938698;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1536623937;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1536846489;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1537448260;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1537512807;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1539159479;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1539582212;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1542290209;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1549383138;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1549533702;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void revokeLeadership();1550403532;Callback method when current resourceManager loses leadership.;@Override_	public void revokeLeadership() {_		runAsyncWithoutFencing(_			() -> {_				log.info("ResourceManager {} was revoked leadership. Clearing fencing token.", getAddress())___				clearStateInternal()___				setFencingToken(null)___				slotManager.suspend()__			})__	};callback,method,when,current,resource,manager,loses,leadership;override,public,void,revoke,leadership,run,async,without,fencing,log,info,resource,manager,was,revoked,leadership,clearing,fencing,token,get,address,clear,state,internal,set,fencing,token,null,slot,manager,suspend
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1502196227;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1502366829;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1502714913;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1503019375;Unregisters an info message listener__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1503580260;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1503588382;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1505921975;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1507240448;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1507653580;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1507738083;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1507761617;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1508234238;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1508245421;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1508252550;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1508327406;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1508426573;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1508494390;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1511869419;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1511873631;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1512727362;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1517911296;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1517911540;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1518718788;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1521033687;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1521641386;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1521667168;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1525374816;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1525934187;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1527094227;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1530503760;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1531923839;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1531998464;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1532919460;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1534241555;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1534938698;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1536623937;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1536846489;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1537448260;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1537512807;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1539159479;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1539582212;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1542290209;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1549383138;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1549533702;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> @Override 	public void unRegisterInfoMessageListener(final String address);1550403532;Unregisters an info message listener.__@param address of the  info message listener to unregister from this resource manager;@Override_	public void unRegisterInfoMessageListener(final String address) {_		infoMessageListeners.remove(address)__	};unregisters,an,info,message,listener,param,address,of,the,info,message,listener,to,unregister,from,this,resource,manager;override,public,void,un,register,info,message,listener,final,string,address,info,message,listeners,remove,address
ResourceManager -> protected void onFatalError(Throwable t);1487842224;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1495154056;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1498565455;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1498568657;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1499156512;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1499354178;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1501251235;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1501519642;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1501530463;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1501580028;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1502196227;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1502366829;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1502714913;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1503019375;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1503580260;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1503588382;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1505921975;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1507240448;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1507653580;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1507738083;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1507761617;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1508234238;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1508245421;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1508252550;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1508327406;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1508426573;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1508494390;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1511869419;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1511873631;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1512727362;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1517911296;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1517911540;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1518718788;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1521033687;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1521641386;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1521667168;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1525374816;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1525934187;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1527094227;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1530503760;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1531923839;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1531998464;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1532919460;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1534241555;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1534938698;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1536623937;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1536846489;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1537448260;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1537512807;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1539159479;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1539582212;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1542290209;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1549383138;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1549533702;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> protected void onFatalError(Throwable t);1550403532;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed.__@param t The exception describing the fatal error;protected void onFatalError(Throwable t) {_		try {_			log.error("Fatal error occurred in ResourceManager.", t)__		} catch (Throwable ignored) {}__		_		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,throwable,t,try,log,error,fatal,error,occurred,in,resource,manager,t,catch,throwable,ignored,fatal,error,handler,on,fatal,error,t
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1503588382;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1505921975;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1507240448;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1507653580;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1507738083;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1507761617;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1508234238;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1508245421;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1508252550;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1508327406;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1508426573;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1508494390;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1511869419;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1511873631;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1512727362;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1517911296;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1517911540;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1518718788;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1521033687;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1521641386;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1521667168;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1525374816;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1525934187;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1527094227;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1530503760;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds(),_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1531923839;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1531998464;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1532919460;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1534241555;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1534938698;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1536623937;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1536846489;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1537448260;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1537512807;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1539159479;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1539582212;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1542290209;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1549383138;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1549533702;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> private RegistrationResponse registerJobMasterInternal( 		final JobMasterGateway jobMasterGateway, 		JobID jobId, 		String jobManagerAddress, 		ResourceID jobManagerResourceId);1550403532;Registers a new JobMaster.__@param jobMasterGateway to communicate with the registering JobMaster_@param jobId of the job for which the JobMaster is responsible_@param jobManagerAddress address of the JobMaster_@param jobManagerResourceId ResourceID of the JobMaster_@return RegistrationResponse;private RegistrationResponse registerJobMasterInternal(_		final JobMasterGateway jobMasterGateway,_		JobID jobId,_		String jobManagerAddress,_		ResourceID jobManagerResourceId) {_		if (jobManagerRegistrations.containsKey(jobId)) {_			JobManagerRegistration oldJobManagerRegistration = jobManagerRegistrations.get(jobId)___			if (Objects.equals(oldJobManagerRegistration.getJobMasterId(), jobMasterGateway.getFencingToken())) {_				_				log.debug("Job manager {}@{} was already registered.", jobMasterGateway.getFencingToken(), jobManagerAddress)__			} else {_				_				disconnectJobManager(_					oldJobManagerRegistration.getJobID(),_					new Exception("New job leader for job " + jobId + " found."))___				JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_					jobId,_					jobManagerResourceId,_					jobMasterGateway)__				jobManagerRegistrations.put(jobId, jobManagerRegistration)__				jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__			}_		} else {_			_			JobManagerRegistration jobManagerRegistration = new JobManagerRegistration(_				jobId,_				jobManagerResourceId,_				jobMasterGateway)__			jobManagerRegistrations.put(jobId, jobManagerRegistration)__			jmResourceIdRegistrations.put(jobManagerResourceId, jobManagerRegistration)__		}__		log.info("Registered job manager {}@{} for job {}.", jobMasterGateway.getFencingToken(), jobManagerAddress, jobId)___		jobManagerHeartbeatManager.monitorTarget(jobManagerResourceId, new HeartbeatTarget<Void>() {_			@Override_			public void receiveHeartbeat(ResourceID resourceID, Void payload) {_				_			}__			@Override_			public void requestHeartbeat(ResourceID resourceID, Void payload) {_				jobMasterGateway.heartbeatFromResourceManager(resourceID)__			}_		})___		return new JobMasterRegistrationSuccess(_			getFencingToken(),_			resourceId)__	};registers,a,new,job,master,param,job,master,gateway,to,communicate,with,the,registering,job,master,param,job,id,of,the,job,for,which,the,job,master,is,responsible,param,job,manager,address,address,of,the,job,master,param,job,manager,resource,id,resource,id,of,the,job,master,return,registration,response;private,registration,response,register,job,master,internal,final,job,master,gateway,job,master,gateway,job,id,job,id,string,job,manager,address,resource,id,job,manager,resource,id,if,job,manager,registrations,contains,key,job,id,job,manager,registration,old,job,manager,registration,job,manager,registrations,get,job,id,if,objects,equals,old,job,manager,registration,get,job,master,id,job,master,gateway,get,fencing,token,log,debug,job,manager,was,already,registered,job,master,gateway,get,fencing,token,job,manager,address,else,disconnect,job,manager,old,job,manager,registration,get,job,id,new,exception,new,job,leader,for,job,job,id,found,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,else,job,manager,registration,job,manager,registration,new,job,manager,registration,job,id,job,manager,resource,id,job,master,gateway,job,manager,registrations,put,job,id,job,manager,registration,jm,resource,id,registrations,put,job,manager,resource,id,job,manager,registration,log,info,registered,job,manager,for,job,job,master,gateway,get,fencing,token,job,manager,address,job,id,job,manager,heartbeat,manager,monitor,target,job,manager,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,job,master,gateway,heartbeat,from,resource,manager,resource,id,return,new,job,master,registration,success,get,fencing,token,resource,id
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1502196227;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1502366829;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1502714913;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1503019375;Registers an info message listener__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if(infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1503580260;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1503588382;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1505921975;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1507240448;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1507653580;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1507738083;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1507761617;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1508234238;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1508245421;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1508252550;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1508327406;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1508426573;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1508494390;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1511869419;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1511873631;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1512727362;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1517911296;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1517911540;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1518718788;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1521033687;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1521641386;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1521667168;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1525374816;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1525934187;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1527094227;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1530503760;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1531923839;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1531998464;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1532919460;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1534241555;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1534938698;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1536623937;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1536846489;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1537448260;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1537512807;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1539159479;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1539582212;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1542290209;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1549383138;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1549533702;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void registerInfoMessageListener(final String address);1550403532;Registers an info message listener.__@param address address of infoMessage listener to register to this resource manager;@Override_	public void registerInfoMessageListener(final String address) {_		if (infoMessageListeners.containsKey(address)) {_			log.warn("Receive a duplicate registration from info message listener on ({})", address)__		} else {_			CompletableFuture<InfoMessageListenerRpcGateway> infoMessageListenerRpcGatewayFuture = getRpcService()_				.connect(address, InfoMessageListenerRpcGateway.class)___			infoMessageListenerRpcGatewayFuture.whenCompleteAsync(_				(InfoMessageListenerRpcGateway gateway, Throwable failure) -> {_					if (failure != null) {_						log.warn("Receive a registration from unreachable info message listener on ({})", address)__					} else {_						log.info("Receive a registration from info message listener on ({})", address)__						infoMessageListeners.put(address, gateway)__					}_				},_				getMainThreadExecutor())__		}_	};registers,an,info,message,listener,param,address,address,of,info,message,listener,to,register,to,this,resource,manager;override,public,void,register,info,message,listener,final,string,address,if,info,message,listeners,contains,key,address,log,warn,receive,a,duplicate,registration,from,info,message,listener,on,address,else,completable,future,info,message,listener,rpc,gateway,info,message,listener,rpc,gateway,future,get,rpc,service,connect,address,info,message,listener,rpc,gateway,class,info,message,listener,rpc,gateway,future,when,complete,async,info,message,listener,rpc,gateway,gateway,throwable,failure,if,failure,null,log,warn,receive,a,registration,from,unreachable,info,message,listener,on,address,else,log,info,receive,a,registration,from,info,message,listener,on,address,info,message,listeners,put,address,gateway,get,main,thread,executor
ResourceManager -> @Override 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1502196227;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@Override_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;override,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @Override 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1502366829;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@Override_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;override,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @Override 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1502714913;Notification from a TaskExecutor that a slot has become available.__@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@Override_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;override,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @Override 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1503019375;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@Override_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;override,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> protected abstract void shutDownApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1512727362;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1517911296;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1517911540;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1518718788;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1521033687;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected abstract void shutDownApplication( 		ApplicationStatus finalStatus, 		@Nullable String optionalDiagnostics) throws ResourceManagerException_;1521641386;The framework specific code for shutting down the application. This should report the_application's final status and shut down the resource manager cleanly.__<p>This method also needs to make sure all pending containers that are not registered_yet are returned.__@param finalStatus The application status to report._@param optionalDiagnostics A diagnostics message or {@code null}._@throws ResourceManagerException if the application could not be shut down.;protected abstract void shutDownApplication(_		ApplicationStatus finalStatus,_		@Nullable String optionalDiagnostics) throws ResourceManagerException_;the,framework,specific,code,for,shutting,down,the,application,this,should,report,the,application,s,final,status,and,shut,down,the,resource,manager,cleanly,p,this,method,also,needs,to,make,sure,all,pending,containers,that,are,not,registered,yet,are,returned,param,final,status,the,application,status,to,report,param,optional,diagnostics,a,diagnostics,message,or,code,null,throws,resource,manager,exception,if,the,application,could,not,be,shut,down;protected,abstract,void,shut,down,application,application,status,final,status,nullable,string,optional,diagnostics,throws,resource,manager,exception
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1476806580;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1476954428;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1477965803;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1478161487;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1480523747;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1486637985;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1487842224;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1488815863;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1489416902;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1489508610;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1490105415;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1490166753;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1490170142;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1490180625;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1490805029;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		if (resourceManagerLeaderId == null) {_			return false__		} else {_			return resourceManagerLeaderId.equals(leaderSessionId)__		}_	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,if,resource,manager,leader,id,null,return,false,else,return,resource,manager,leader,id,equals,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1495154056;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1498565455;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1498568657;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1499156512;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1499354178;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1501251235;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1501519642;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1501530463;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1501580028;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1502196227;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1502366829;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1502714913;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> protected boolean isValid(UUID resourceManagerLeaderId);1503019375;Checks whether the given resource manager leader id is matching the current leader id and_not null.__@param resourceManagerLeaderId to check_@return True if the given leader id matches the actual leader id and is not null_ otherwise false;protected boolean isValid(UUID resourceManagerLeaderId) {_		return Objects.equals(resourceManagerLeaderId, leaderSessionId)__	};checks,whether,the,given,resource,manager,leader,id,is,matching,the,current,leader,id,and,not,null,param,resource,manager,leader,id,to,check,return,true,if,the,given,leader,id,matches,the,actual,leader,id,and,is,not,null,otherwise,false;protected,boolean,is,valid,uuid,resource,manager,leader,id,return,objects,equals,resource,manager,leader,id,leader,session,id
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1534938698;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1537512807;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1539159479;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1539582212;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1542290209;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1549383138;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1549533702;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @VisibleForTesting 	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;1550403532;Allocates a resource using the resource profile.__@param resourceProfile The resource description_@return Collection of {@link ResourceProfile} describing the launched slots;@VisibleForTesting_	public abstract Collection<ResourceProfile> startNewWorker(ResourceProfile resourceProfile)_;allocates,a,resource,using,the,resource,profile,param,resource,profile,the,resource,description,return,collection,of,link,resource,profile,describing,the,launched,slots;visible,for,testing,public,abstract,collection,resource,profile,start,new,worker,resource,profile,resource,profile
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1476712982;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionID)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionID)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1476806580;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1476954428;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1477965803;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1478161487;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1480523747;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1488815863;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1489416902;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1489508610;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1490166753;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1490170142;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1490180625;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId);1490805029;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot_@return SlotAvailableReply;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId) {__		if (resourceManagerLeaderId.equals(leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (registrationId.equals(instanceID)) {_					slotManager.notifySlotAvailable(resourceId, slotId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot,return,slot,available,reply;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,if,resource,manager,leader,id,equals,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,registration,id,equals,instance,id,slot,manager,notify,slot,available,resource,id,slot,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1532919460;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1534241555;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1534938698;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1536623937;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1536846489;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1537448260;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1537512807;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1539159479;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1539582212;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1542290209;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1549383138;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1549533702;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected CompletableFuture<Void> prepareLeadershipAsync();1550403532;This method can be overridden to add a (non-blocking) initialization routine to the_ResourceManager that will be called when leadership is granted but before leadership is_confirmed.__@return Returns a {@code CompletableFuture} that completes when the computation is finished.;protected CompletableFuture<Void> prepareLeadershipAsync() {_		return CompletableFuture.completedFuture(null)__	};this,method,can,be,overridden,to,add,a,non,blocking,initialization,routine,to,the,resource,manager,that,will,be,called,when,leadership,is,granted,but,before,leadership,is,confirmed,return,returns,a,code,completable,future,that,completes,when,the,computation,is,finished;protected,completable,future,void,prepare,leadership,async,return,completable,future,completed,future,null
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1486637985;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1487842224;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1490105415;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1490170142;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.notifyTaskManagerFailure(resourceID)___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,notify,task,manager,failure,resource,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1490180625;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.notifyTaskManagerFailure(resourceID)___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,notify,task,manager,failure,resource,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1490805029;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.notifyTaskManagerFailure(resourceID)___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,notify,task,manager,failure,resource,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1495154056;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1498565455;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1498568657;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1499156512;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1499354178;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1501251235;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1501519642;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1501530463;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1501580028;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1502196227;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1502366829;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1502714913;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1503019375;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1503580260;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1503588382;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1505921975;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1507240448;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1507653580;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1507738083;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause)___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1507761617;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1508234238;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1508245421;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1508252550;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1508327406;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1508426573;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1508494390;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1511869419;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1511873631;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1512727362;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1517911296;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1517911540;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1518718788;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1521033687;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Task manager {} failed because {}.", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("Could not find a registered task manager with the process id {}.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1521641386;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1521667168;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1525374816;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1525934187;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1527094227;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1530503760;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1531923839;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1531998464;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1532919460;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug("No open TaskExecutor connection {}. Ignoring close TaskExecutor connection.", resourceID)__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,resource,id
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1534241555;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1534938698;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1536623937;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1536846489;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1537448260;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1537512807;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1539159479;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1539582212;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1542290209;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1549383138;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1549533702;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause);1550403532;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the TaskManager that has failed._@param cause The exception which cause the TaskManager failed.;protected void closeTaskManagerConnection(final ResourceID resourceID, final Exception cause) {_		taskManagerHeartbeatManager.unmonitorTarget(resourceID)___		WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___		if (workerRegistration != null) {_			log.info("Closing TaskExecutor connection {} because: {}", resourceID, cause.getMessage())___			_			slotManager.unregisterTaskManager(workerRegistration.getInstanceID())___			workerRegistration.getTaskExecutorGateway().disconnectResourceManager(cause)__		} else {_			log.debug(_				"No open TaskExecutor connection {}. Ignoring close TaskExecutor connection. Closing reason was: {}",_				resourceID,_				cause.getMessage())__		}_	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,task,manager,that,has,failed,param,cause,the,exception,which,cause,the,task,manager,failed;protected,void,close,task,manager,connection,final,resource,id,resource,id,final,exception,cause,task,manager,heartbeat,manager,unmonitor,target,resource,id,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,closing,task,executor,connection,because,resource,id,cause,get,message,slot,manager,unregister,task,manager,worker,registration,get,instance,id,worker,registration,get,task,executor,gateway,disconnect,resource,manager,cause,else,log,debug,no,open,task,executor,connection,ignoring,close,task,executor,connection,closing,reason,was,resource,id,cause,get,message
ResourceManager -> @RpcMethod 	public SlotAssignment requestSlot(SlotRequest slotRequest);1472481329;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotAssignment requestSlot(SlotRequest slotRequest) {_		System.out.println("SlotRequest: " + slotRequest)__		return new SlotAssignment()__	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,assignment,request,slot,slot,request,slot,request,system,out,println,slot,request,slot,request,return,new,slot,assignment
ResourceManager -> @RpcMethod 	public SlotAssignment requestSlot(SlotRequest slotRequest);1472699640;Requests a slot from the resource manager.__@param slotRequest Slot request_@return Slot assignment;@RpcMethod_	public SlotAssignment requestSlot(SlotRequest slotRequest) {_		System.out.println("SlotRequest: " + slotRequest)__		return new SlotAssignment()__	};requests,a,slot,from,the,resource,manager,param,slot,request,slot,request,return,slot,assignment;rpc,method,public,slot,assignment,request,slot,slot,request,slot,request,system,out,println,slot,request,slot,request,return,new,slot,assignment
ResourceManager -> ResourceManagerLeaderContender -> @Override 		public void handleError(final Exception exception);1472481329;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_		public void handleError(final Exception exception) {_			runAsync(new Runnable() {_				@Override_				public void run() {_					log.error("ResourceManager received an error from the LeaderElectionService.", exception)__					_					shutDown()__				}_			})__		};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,run,async,new,runnable,override,public,void,run,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> ResourceManagerLeaderContender -> @Override 		public void handleError(final Exception exception);1472699640;Handles error occurring in the leader election service__@param exception Exception being thrown in the leader election service;@Override_		public void handleError(final Exception exception) {_			runAsync(new Runnable() {_				@Override_				public void run() {_					log.error("ResourceManager received an error from the LeaderElectionService.", exception)__					_					shutDown()__				}_			})__		};handles,error,occurring,in,the,leader,election,service,param,exception,exception,being,thrown,in,the,leader,election,service;override,public,void,handle,error,final,exception,exception,run,async,new,runnable,override,public,void,run,log,error,resource,manager,received,an,error,from,the,leader,election,service,exception,shut,down
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1476712982;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1476806580;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1476954428;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1477965803;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1478161487;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1480523747;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1488815863;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1489416902;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> public void notifyWorkerFailed(final ResourceID resourceID, final String message);1489508610;This method should be called by the framework once it detects that a currently registered_task executor has failed.__@param resourceID Id of the worker that has failed._@param message An informational message that explains why the worker failed.;public void notifyWorkerFailed(final ResourceID resourceID, final String message) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				WorkerRegistration<WorkerType> workerRegistration = taskExecutors.remove(resourceID)___				if (workerRegistration != null) {_					log.info("Task manager {} failed because {}.", resourceID, message)__					_					slotManager.notifyTaskManagerFailure(resourceID)__				} else {_					log.debug("Could not find a registered task manager with the process id {}.", resourceID)__				}_			}_		})__	};this,method,should,be,called,by,the,framework,once,it,detects,that,a,currently,registered,task,executor,has,failed,param,resource,id,id,of,the,worker,that,has,failed,param,message,an,informational,message,that,explains,why,the,worker,failed;public,void,notify,worker,failed,final,resource,id,resource,id,final,string,message,run,async,new,runnable,override,public,void,run,worker,registration,worker,type,worker,registration,task,executors,remove,resource,id,if,worker,registration,null,log,info,task,manager,failed,because,resource,id,message,slot,manager,notify,task,manager,failure,resource,id,else,log,debug,could,not,find,a,registered,task,manager,with,the,process,id,resource,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration);1472481329;Register a {@link JobMaster} at the resource manager.__@param jobMasterRegistration Job master registration information_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration) {_		Future<JobMasterGateway> jobMasterFuture = getRpcService().connect(jobMasterRegistration.getAddress(), JobMasterGateway.class)___		return jobMasterFuture.map(new Mapper<JobMasterGateway, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(final JobMasterGateway jobMasterGateway) {_				InstanceID instanceID___				if (jobMasterGateways.containsKey(jobMasterGateway)) {_					instanceID = jobMasterGateways.get(jobMasterGateway)__				} else {_					instanceID = new InstanceID()__					jobMasterGateways.put(jobMasterGateway, instanceID)__				}__				return new RegistrationResponse(true, instanceID)__			}_		}, getMainThreadExecutionContext())__	};register,a,link,job,master,at,the,resource,manager,param,job,master,registration,job,master,registration,information,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,job,master,registration,job,master,registration,future,job,master,gateway,job,master,future,get,rpc,service,connect,job,master,registration,get,address,job,master,gateway,class,return,job,master,future,map,new,mapper,job,master,gateway,registration,response,override,public,registration,response,apply,final,job,master,gateway,job,master,gateway,instance,id,instance,id,if,job,master,gateways,contains,key,job,master,gateway,instance,id,job,master,gateways,get,job,master,gateway,else,instance,id,new,instance,id,job,master,gateways,put,job,master,gateway,instance,id,return,new,registration,response,true,instance,id,get,main,thread,execution,context
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration);1472699640;Register a {@link JobMaster} at the resource manager.__@param jobMasterRegistration Job master registration information_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration) {_		Future<JobMasterGateway> jobMasterFuture = getRpcService().connect(jobMasterRegistration.getAddress(), JobMasterGateway.class)___		return jobMasterFuture.map(new Mapper<JobMasterGateway, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(final JobMasterGateway jobMasterGateway) {_				InstanceID instanceID___				if (jobMasterGateways.containsKey(jobMasterGateway)) {_					instanceID = jobMasterGateways.get(jobMasterGateway)__				} else {_					instanceID = new InstanceID()__					jobMasterGateways.put(jobMasterGateway, instanceID)__				}__				return new TaskExecutorRegistrationSuccess(instanceID, 5000)__			}_		}, getMainThreadExecutionContext())__	};register,a,link,job,master,at,the,resource,manager,param,job,master,registration,job,master,registration,information,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,job,master,registration,job,master,registration,future,job,master,gateway,job,master,future,get,rpc,service,connect,job,master,registration,get,address,job,master,gateway,class,return,job,master,future,map,new,mapper,job,master,gateway,registration,response,override,public,registration,response,apply,final,job,master,gateway,job,master,gateway,instance,id,instance,id,if,job,master,gateways,contains,key,job,master,gateway,instance,id,job,master,gateways,get,job,master,gateway,else,instance,id,new,instance,id,job,master,gateways,put,job,master,gateway,instance,id,return,new,task,executor,registration,success,instance,id,5000,get,main,thread,execution,context
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration);1472741611;Register a {@link JobMaster} at the resource manager.__@param jobMasterRegistration Job master registration information_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration) {_		final Future<JobMasterGateway> jobMasterFuture =_			getRpcService().connect(jobMasterRegistration.getAddress(), JobMasterGateway.class)__		final JobID jobID = jobMasterRegistration.getJobID()___		return jobMasterFuture.map(new Mapper<JobMasterGateway, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(final JobMasterGateway jobMasterGateway) {__				final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__				if (existingGateway != null) {_					LOG.info("Replacing existing gateway {} for JobID {} with  {}.",_						existingGateway, jobID, jobMasterGateway)__				}_				return new RegistrationResponse(true)__			}_		}, getMainThreadExecutionContext())__	};register,a,link,job,master,at,the,resource,manager,param,job,master,registration,job,master,registration,information,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,job,master,registration,job,master,registration,final,future,job,master,gateway,job,master,future,get,rpc,service,connect,job,master,registration,get,address,job,master,gateway,class,final,job,id,job,id,job,master,registration,get,job,id,return,job,master,future,map,new,mapper,job,master,gateway,registration,response,override,public,registration,response,apply,final,job,master,gateway,job,master,gateway,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,existing,gateway,for,job,id,with,existing,gateway,job,id,job,master,gateway,return,new,registration,response,true,get,main,thread,execution,context
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration);1474460045;Register a {@link JobMaster} at the resource manager.__@param jobMasterRegistration Job master registration information_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration) {_		final Future<JobMasterGateway> jobMasterFuture =_			getRpcService().connect(jobMasterRegistration.getAddress(), JobMasterGateway.class)__		final JobID jobID = jobMasterRegistration.getJobID()___		return jobMasterFuture.map(new Mapper<JobMasterGateway, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(final JobMasterGateway jobMasterGateway) {__				final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__				if (existingGateway != null) {_					LOG.info("Replacing existing gateway {} for JobID {} with  {}.",_						existingGateway, jobID, jobMasterGateway)__				}_				return new RegistrationResponse(true)__			}_		}, getMainThreadExecutionContext())__	};register,a,link,job,master,at,the,resource,manager,param,job,master,registration,job,master,registration,information,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,job,master,registration,job,master,registration,final,future,job,master,gateway,job,master,future,get,rpc,service,connect,job,master,registration,get,address,job,master,gateway,class,final,job,id,job,id,job,master,registration,get,job,id,return,job,master,future,map,new,mapper,job,master,gateway,registration,response,override,public,registration,response,apply,final,job,master,gateway,job,master,gateway,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,existing,gateway,for,job,id,with,existing,gateway,job,id,job,master,gateway,return,new,registration,response,true,get,main,thread,execution,context
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration);1474471581;Register a {@link JobMaster} at the resource manager.__@param jobMasterRegistration Job master registration information_@return Future registration response;@RpcMethod_	public Future<RegistrationResponse> registerJobMaster(JobMasterRegistration jobMasterRegistration) {_		final Future<JobMasterGateway> jobMasterFuture =_			getRpcService().connect(jobMasterRegistration.getAddress(), JobMasterGateway.class)__		final JobID jobID = jobMasterRegistration.getJobID()___		return jobMasterFuture.thenApplyAsync(new ApplyFunction<JobMasterGateway, RegistrationResponse>() {_			@Override_			public RegistrationResponse apply(JobMasterGateway jobMasterGateway) {_				final JobMasterGateway existingGateway = jobMasterGateways.put(jobID, jobMasterGateway)__				if (existingGateway != null) {_					LOG.info("Replacing existing gateway {} for JobID {} with  {}.",_						existingGateway, jobID, jobMasterGateway)__				}_				return new RegistrationResponse(true)__			}_		}, getMainThreadExecutor())__	};register,a,link,job,master,at,the,resource,manager,param,job,master,registration,job,master,registration,information,return,future,registration,response;rpc,method,public,future,registration,response,register,job,master,job,master,registration,job,master,registration,final,future,job,master,gateway,job,master,future,get,rpc,service,connect,job,master,registration,get,address,job,master,gateway,class,final,job,id,job,id,job,master,registration,get,job,id,return,job,master,future,then,apply,async,new,apply,function,job,master,gateway,registration,response,override,public,registration,response,apply,job,master,gateway,job,master,gateway,final,job,master,gateway,existing,gateway,job,master,gateways,put,job,id,job,master,gateway,if,existing,gateway,null,log,info,replacing,existing,gateway,for,job,id,with,existing,gateway,job,id,job,master,gateway,return,new,registration,response,true,get,main,thread,executor
ResourceManager -> void onFatalError(Throwable t);1476712982;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1476806580;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1476954428;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1477965803;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1478161487;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1480523747;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1486637985;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1488815863;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1489416902;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1489508610;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1490105415;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1490166753;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1490170142;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1490180625;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> void onFatalError(Throwable t);1490805029;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method must only be called from within the ResourceManager's main thread.__@param t The exception describing the fatal error;void onFatalError(Throwable t) {_		log.error("Fatal error occurred.", t)__		fatalErrorHandler.onFatalError(t)__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,must,only,be,called,from,within,the,resource,manager,s,main,thread,param,t,the,exception,describing,the,fatal,error;void,on,fatal,error,throwable,t,log,error,fatal,error,occurred,t,fatal,error,handler,on,fatal,error,t
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 		final SlotReport slotReport);1490166753;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_		final SlotReport slotReport) {__		if (leaderSessionId.equals(resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)__						slotManager.registerTaskExecutor(taskExecutorResourceId, registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(), resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,leader,session,id,equals,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,worker,type,new,worker,worker,started,task,executor,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,executor,task,executor,resource,id,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 		final SlotReport slotReport);1490170142;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_		final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)__						slotManager.registerTaskExecutor(taskExecutorResourceId, registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,worker,type,new,worker,worker,started,task,executor,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,executor,task,executor,resource,id,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 		final SlotReport slotReport);1490180625;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_		final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)__						slotManager.registerTaskExecutor(taskExecutorResourceId, registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,worker,type,new,worker,worker,started,task,executor,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,executor,task,executor,resource,id,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public Future<RegistrationResponse> registerTaskExecutor( 		final UUID resourceManagerLeaderId, 		final String taskExecutorAddress, 		final ResourceID taskExecutorResourceId, 		final SlotReport slotReport);1490805029;Register a {@link org.apache.flink.runtime.taskexecutor.TaskExecutor} at the resource manager__@param resourceManagerLeaderId  The fencing token for the ResourceManager leader_@param taskExecutorAddress      The address of the TaskExecutor that registers_@param taskExecutorResourceId  The resource ID of the TaskExecutor that registers__@return The response by the ResourceManager.;@RpcMethod_	public Future<RegistrationResponse> registerTaskExecutor(_		final UUID resourceManagerLeaderId,_		final String taskExecutorAddress,_		final ResourceID taskExecutorResourceId,_		final SlotReport slotReport) {__		if (Objects.equals(leaderSessionId, resourceManagerLeaderId)) {_			Future<TaskExecutorGateway> taskExecutorGatewayFuture = getRpcService().connect(taskExecutorAddress, TaskExecutorGateway.class)___			return taskExecutorGatewayFuture.handleAsync(new BiFunction<TaskExecutorGateway, Throwable, RegistrationResponse>() {_				@Override_				public RegistrationResponse apply(final TaskExecutorGateway taskExecutorGateway, Throwable throwable) {_					if (throwable != null) {_						return new RegistrationResponse.Decline(throwable.getMessage())__					} else {_						WorkerRegistration<WorkerType> oldRegistration = taskExecutors.remove(taskExecutorResourceId)__						if (oldRegistration != null) {_							_							log.info("Replacing old instance of worker for ResourceID {}", taskExecutorResourceId)__						}__						WorkerType newWorker = workerStarted(taskExecutorResourceId)__						WorkerRegistration<WorkerType> registration =_							new WorkerRegistration<>(taskExecutorGateway, newWorker)___						taskExecutors.put(taskExecutorResourceId, registration)__						slotManager.registerTaskExecutor(taskExecutorResourceId, registration, slotReport)___						taskManagerHeartbeatManager.monitorTarget(taskExecutorResourceId, new HeartbeatTarget<Void>() {_							@Override_							public void receiveHeartbeat(ResourceID resourceID, Void payload) {_								_								_							}__							@Override_							public void requestHeartbeat(ResourceID resourceID, Void payload) {_								taskExecutorGateway.heartbeatFromResourceManager(resourceID)__							}_						})___						return new TaskExecutorRegistrationSuccess(_							registration.getInstanceID(),_							resourceId,_							resourceManagerConfiguration.getHeartbeatInterval().toMilliseconds())__					}_				}_			}, getMainThreadExecutor())__		} else {_			log.warn("Discard registration from TaskExecutor {} at ({}) because the expected leader session ID {} did " +_					"not equal the received leader session ID  {}",_				taskExecutorResourceId, taskExecutorAddress, leaderSessionId, resourceManagerLeaderId)___			return FlinkCompletableFuture.<RegistrationResponse>completed(_				new RegistrationResponse.Decline("Discard registration because the leader id " +_					resourceManagerLeaderId + " does not match the expected leader id " +_					leaderSessionId + '.'))__		}_	};register,a,link,org,apache,flink,runtime,taskexecutor,task,executor,at,the,resource,manager,param,resource,manager,leader,id,the,fencing,token,for,the,resource,manager,leader,param,task,executor,address,the,address,of,the,task,executor,that,registers,param,task,executor,resource,id,the,resource,id,of,the,task,executor,that,registers,return,the,response,by,the,resource,manager;rpc,method,public,future,registration,response,register,task,executor,final,uuid,resource,manager,leader,id,final,string,task,executor,address,final,resource,id,task,executor,resource,id,final,slot,report,slot,report,if,objects,equals,leader,session,id,resource,manager,leader,id,future,task,executor,gateway,task,executor,gateway,future,get,rpc,service,connect,task,executor,address,task,executor,gateway,class,return,task,executor,gateway,future,handle,async,new,bi,function,task,executor,gateway,throwable,registration,response,override,public,registration,response,apply,final,task,executor,gateway,task,executor,gateway,throwable,throwable,if,throwable,null,return,new,registration,response,decline,throwable,get,message,else,worker,registration,worker,type,old,registration,task,executors,remove,task,executor,resource,id,if,old,registration,null,log,info,replacing,old,instance,of,worker,for,resource,id,task,executor,resource,id,worker,type,new,worker,worker,started,task,executor,resource,id,worker,registration,worker,type,registration,new,worker,registration,task,executor,gateway,new,worker,task,executors,put,task,executor,resource,id,registration,slot,manager,register,task,executor,task,executor,resource,id,registration,slot,report,task,manager,heartbeat,manager,monitor,target,task,executor,resource,id,new,heartbeat,target,void,override,public,void,receive,heartbeat,resource,id,resource,id,void,payload,override,public,void,request,heartbeat,resource,id,resource,id,void,payload,task,executor,gateway,heartbeat,from,resource,manager,resource,id,return,new,task,executor,registration,success,registration,get,instance,id,resource,id,resource,manager,configuration,get,heartbeat,interval,to,milliseconds,get,main,thread,executor,else,log,warn,discard,registration,from,task,executor,at,because,the,expected,leader,session,id,did,not,equal,the,received,leader,session,id,task,executor,resource,id,task,executor,address,leader,session,id,resource,manager,leader,id,return,flink,completable,future,registration,response,completed,new,registration,response,decline,discard,registration,because,the,leader,id,resource,manager,leader,id,does,not,match,the,expected,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1486637985;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1487842224;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1490105415;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1495154056;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1498565455;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1498568657;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1499156512;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1499354178;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1501251235;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1501519642;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1501530463;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> @RpcMethod 	public void notifySlotAvailable( 			final UUID resourceManagerLeaderId, 			final InstanceID instanceID, 			final SlotID slotId, 			final AllocationID allocationId);1501580028;Notification from a TaskExecutor that a slot has become available_@param resourceManagerLeaderId TaskExecutor's resource manager leader id_@param instanceID TaskExecutor's instance id_@param slotId The slot id of the available slot;@RpcMethod_	public void notifySlotAvailable(_			final UUID resourceManagerLeaderId,_			final InstanceID instanceID,_			final SlotID slotId,_			final AllocationID allocationId) {__		if (Objects.equals(resourceManagerLeaderId, leaderSessionId)) {_			final ResourceID resourceId = slotId.getResourceID()__			WorkerRegistration<WorkerType> registration = taskExecutors.get(resourceId)___			if (registration != null) {_				InstanceID registrationId = registration.getInstanceID()___				if (Objects.equals(registrationId, instanceID)) {_					slotManager.freeSlot(slotId, allocationId)__				} else {_					log.debug("Invalid registration id for slot available message. This indicates an" +_						" outdated request.")__				}_			} else {_				log.debug("Could not find registration for resource id {}. Discarding the slot available" +_					"message {}.", resourceId, slotId)__			}_		} else {_			log.debug("Discarding notify slot available message for slot {}, because the " +_				"leader id {} did not match the expected leader id {}.", slotId,_				resourceManagerLeaderId, leaderSessionId)__		}_	};notification,from,a,task,executor,that,a,slot,has,become,available,param,resource,manager,leader,id,task,executor,s,resource,manager,leader,id,param,instance,id,task,executor,s,instance,id,param,slot,id,the,slot,id,of,the,available,slot;rpc,method,public,void,notify,slot,available,final,uuid,resource,manager,leader,id,final,instance,id,instance,id,final,slot,id,slot,id,final,allocation,id,allocation,id,if,objects,equals,resource,manager,leader,id,leader,session,id,final,resource,id,resource,id,slot,id,get,resource,id,worker,registration,worker,type,registration,task,executors,get,resource,id,if,registration,null,instance,id,registration,id,registration,get,instance,id,if,objects,equals,registration,id,instance,id,slot,manager,free,slot,slot,id,allocation,id,else,log,debug,invalid,registration,id,for,slot,available,message,this,indicates,an,outdated,request,else,log,debug,could,not,find,registration,for,resource,id,discarding,the,slot,available,message,resource,id,slot,id,else,log,debug,discarding,notify,slot,available,message,for,slot,because,the,leader,id,did,not,match,the,expected,leader,id,slot,id,resource,manager,leader,id,leader,session,id
ResourceManager -> ResourceManagerLeaderContender -> @Override 		public void grantLeadership(final UUID leaderSessionID);1472481329;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_		public void grantLeadership(final UUID leaderSessionID) {_			runAsync(new Runnable() {_				@Override_				public void run() {_					log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__					ResourceManager.this.leaderSessionID = leaderSessionID__					_					leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				}_			})__		};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,resource,manager,this,leader,session,id,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id
ResourceManager -> ResourceManagerLeaderContender -> @Override 		public void grantLeadership(final UUID leaderSessionID);1472699640;Callback method when current resourceManager is granted leadership__@param leaderSessionID unique leadershipID;@Override_		public void grantLeadership(final UUID leaderSessionID) {_			runAsync(new Runnable() {_				@Override_				public void run() {_					log.info("ResourceManager {} was granted leadership with leader session ID {}", getAddress(), leaderSessionID)__					ResourceManager.this.leaderSessionID = leaderSessionID__					_					leaderElectionService.confirmLeaderSessionID(leaderSessionID)__				}_			})__		};callback,method,when,current,resource,manager,is,granted,leadership,param,leader,session,id,unique,leadership,id;override,public,void,grant,leadership,final,uuid,leader,session,id,run,async,new,runnable,override,public,void,run,log,info,resource,manager,was,granted,leadership,with,leader,session,id,get,address,leader,session,id,resource,manager,this,leader,session,id,leader,session,id,leader,election,service,confirm,leader,session,id,leader,session,id
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1473383484;Callback when a resource manager faced a fatal error_@param message_@param error;protected abstract void fatalError(String message, Throwable error)_;callback,when,a,resource,manager,faced,a,fatal,error,param,message,param,error;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1474858756;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1474965482;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1475110587;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1475154512;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1475661506;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1475679726;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1476113770;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1476483941;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected abstract void fatalError(String message, Throwable error)_;1476699326;Notifies the resource master of a fatal error.__<p><b>IMPORTANT:</b> This should not cleanly shut down this master, but exit it in_such a way that a high-availability setting would restart this or fail over_to another master.;protected abstract void fatalError(String message, Throwable error)_;notifies,the,resource,master,of,a,fatal,error,p,b,important,b,this,should,not,cleanly,shut,down,this,master,but,exit,it,in,such,a,way,that,a,high,availability,setting,would,restart,this,or,fail,over,to,another,master;protected,abstract,void,fatal,error,string,message,throwable,error
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1478161487;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1486637985;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1487842224;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1488815863;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1489416902;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1489508610;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1490105415;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1490166753;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1490170142;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1490180625;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1490805029;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1495154056;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1498565455;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1498568657;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1499156512;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1499354178;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1501251235;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1501519642;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1501530463;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1501580028;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1502196227;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1502366829;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
ResourceManager -> protected void onFatalErrorAsync(final Throwable t);1503019375;Notifies the ResourceManager that a fatal error has occurred and it cannot proceed._This method should be used when asynchronous threads want to notify the_ResourceManager of a fatal error.__@param t The exception describing the fatal error;protected void onFatalErrorAsync(final Throwable t) {_		runAsync(new Runnable() {_			@Override_			public void run() {_				onFatalError(t)__			}_		})__	};notifies,the,resource,manager,that,a,fatal,error,has,occurred,and,it,cannot,proceed,this,method,should,be,used,when,asynchronous,threads,want,to,notify,the,resource,manager,of,a,fatal,error,param,t,the,exception,describing,the,fatal,error;protected,void,on,fatal,error,async,final,throwable,t,run,async,new,runnable,override,public,void,run,on,fatal,error,t
