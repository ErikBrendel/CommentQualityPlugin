# id;timestamp;commentText;codeText;commentWords;codeWords
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, boolean waitForFirstBlock) 	throws IOException;1404155775;Creates a new channel reader that reads from the given channel until the last block_(as marked by a {@link ChannelWriterOutputView}) is found.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, -1, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,until,the,last,block,as,marked,by,a,link,channel,writer,output,view,is,found,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,1,wait,for,first,block
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, boolean waitForFirstBlock) 	throws IOException;1404986750;Creates a new channel reader that reads from the given channel until the last block_(as marked by a {@link ChannelWriterOutputView}) is found.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, -1, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,until,the,last,block,as,marked,by,a,link,channel,writer,output,view,is,found,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,1,wait,for,first,block
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, boolean waitForFirstBlock) 	throws IOException;1405088715;Creates a new channel reader that reads from the given channel until the last block_(as marked by a {@link ChannelWriterOutputView}) is found.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, -1, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,until,the,last,block,as,marked,by,a,link,channel,writer,output,view,is,found,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,1,wait,for,first,block
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, boolean waitForFirstBlock) 	throws IOException;1411473561;Creates a new channel reader that reads from the given channel until the last block_(as marked by a {@link ChannelWriterOutputView}) is found.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, -1, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,until,the,last,block,as,marked,by,a,link,channel,writer,output,view,is,found,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,1,wait,for,first,block
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, boolean waitForFirstBlock) 	throws IOException;1412159138;Creates a new channel reader that reads from the given channel until the last block_(as marked by a {@link ChannelWriterOutputView}) is found.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, -1, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,until,the,last,block,as,marked,by,a,link,channel,writer,output,view,is,found,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,1,wait,for,first,block
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, boolean waitForFirstBlock) 	throws IOException;1415382319;Creates a new channel reader that reads from the given channel until the last block_(as marked by a {@link ChannelWriterOutputView}) is found.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, -1, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,until,the,last,block,as,marked,by,a,link,channel,writer,output,view,is,found,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,1,wait,for,first,block
ChannelReaderInputView -> ChannelReaderInputView(BlockChannelReader<MemorySegment> reader, List<MemorySegment> memory, 				int numBlocks, int headerLen, boolean waitForFirstBlock) 	throws IOException;1420560668;Non public constructor to allow subclasses to use this input view with different headers._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param headerLen The length of the header assumed at the beginning of the block. Note that the_{@link #nextSegment(org.apache.flink.core.memory.MemorySegment)} method assumes the default header length,_so any subclass changing the header length should override that methods as well._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException;ChannelReaderInputView(BlockChannelReader<MemorySegment> reader, List<MemorySegment> memory,_				int numBlocks, int headerLen, boolean waitForFirstBlock)_	throws IOException_	{_		super(headerLen)__		_		if (reader == null || memory == null) {_			throw new NullPointerException()__		}_		if (memory.isEmpty()) {_			throw new IllegalArgumentException("Empty list of memory segments given.")__		}_		if (numBlocks < 1 && numBlocks != -1) {_			throw new IllegalArgumentException("The number of blocks must be a positive number, or -1, if unknown.")__		}_		_		this.reader = reader__		this.numRequestsRemaining = numBlocks__		this.numSegments = memory.size()__		this.freeMem = new ArrayList<MemorySegment>(this.numSegments)__		_		for (int i = 0_ i < memory.size()_ i++) {_			sendReadRequest(memory.get(i))__		}_		_		if (waitForFirstBlock) {_			advance()__		}_	};non,public,constructor,to,allow,subclasses,to,use,this,input,view,with,different,headers,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,header,len,the,length,of,the,header,assumed,at,the,beginning,of,the,block,note,that,the,link,next,segment,org,apache,flink,core,memory,memory,segment,method,assumes,the,default,header,length,so,any,subclass,changing,the,header,length,should,override,that,methods,as,well,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception;channel,reader,input,view,block,channel,reader,memory,segment,reader,list,memory,segment,memory,int,num,blocks,int,header,len,boolean,wait,for,first,block,throws,ioexception,super,header,len,if,reader,null,memory,null,throw,new,null,pointer,exception,if,memory,is,empty,throw,new,illegal,argument,exception,empty,list,of,memory,segments,given,if,num,blocks,1,num,blocks,1,throw,new,illegal,argument,exception,the,number,of,blocks,must,be,a,positive,number,or,1,if,unknown,this,reader,reader,this,num,requests,remaining,num,blocks,this,num,segments,memory,size,this,free,mem,new,array,list,memory,segment,this,num,segments,for,int,i,0,i,memory,size,i,send,read,request,memory,get,i,if,wait,for,first,block,advance
ChannelReaderInputView -> ChannelReaderInputView(BlockChannelReader<MemorySegment> reader, List<MemorySegment> memory, 				int numBlocks, int headerLen, boolean waitForFirstBlock) 	throws IOException;1440967006;Non public constructor to allow subclasses to use this input view with different headers._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param headerLen The length of the header assumed at the beginning of the block. Note that the_{@link #nextSegment(org.apache.flink.core.memory.MemorySegment)} method assumes the default header length,_so any subclass changing the header length should override that methods as well._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException;ChannelReaderInputView(BlockChannelReader<MemorySegment> reader, List<MemorySegment> memory,_				int numBlocks, int headerLen, boolean waitForFirstBlock)_	throws IOException_	{_		super(headerLen)__		_		if (reader == null || memory == null) {_			throw new NullPointerException()__		}_		if (memory.isEmpty()) {_			throw new IllegalArgumentException("Empty list of memory segments given.")__		}_		if (numBlocks < 1 && numBlocks != -1) {_			throw new IllegalArgumentException("The number of blocks must be a positive number, or -1, if unknown.")__		}_		_		this.reader = reader__		this.numRequestsRemaining = numBlocks__		this.numSegments = memory.size()__		this.freeMem = new ArrayList<MemorySegment>(this.numSegments)__		_		for (int i = 0_ i < memory.size()_ i++) {_			sendReadRequest(memory.get(i))__		}_		_		if (waitForFirstBlock) {_			advance()__		}_	};non,public,constructor,to,allow,subclasses,to,use,this,input,view,with,different,headers,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,header,len,the,length,of,the,header,assumed,at,the,beginning,of,the,block,note,that,the,link,next,segment,org,apache,flink,core,memory,memory,segment,method,assumes,the,default,header,length,so,any,subclass,changing,the,header,length,should,override,that,methods,as,well,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception;channel,reader,input,view,block,channel,reader,memory,segment,reader,list,memory,segment,memory,int,num,blocks,int,header,len,boolean,wait,for,first,block,throws,ioexception,super,header,len,if,reader,null,memory,null,throw,new,null,pointer,exception,if,memory,is,empty,throw,new,illegal,argument,exception,empty,list,of,memory,segments,given,if,num,blocks,1,num,blocks,1,throw,new,illegal,argument,exception,the,number,of,blocks,must,be,a,positive,number,or,1,if,unknown,this,reader,reader,this,num,requests,remaining,num,blocks,this,num,segments,memory,size,this,free,mem,new,array,list,memory,segment,this,num,segments,for,int,i,0,i,memory,size,i,send,read,request,memory,get,i,if,wait,for,first,block,advance
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory,  														int numBlocks, boolean waitForFirstBlock) 	throws IOException;1404155775;Creates a new channel reader that reads from the given channel, expecting a specified_number of blocks in the channel._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, _														int numBlocks, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, numBlocks, ChannelWriterOutputView.HEADER_LENGTH, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,expecting,a,specified,number,of,blocks,in,the,channel,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,num,blocks,channel,writer,output,view,wait,for,first,block
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory,  														int numBlocks, boolean waitForFirstBlock) 	throws IOException;1404986750;Creates a new channel reader that reads from the given channel, expecting a specified_number of blocks in the channel._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, _														int numBlocks, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, numBlocks, ChannelWriterOutputView.HEADER_LENGTH, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,expecting,a,specified,number,of,blocks,in,the,channel,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,num,blocks,channel,writer,output,view,wait,for,first,block
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory,  														int numBlocks, boolean waitForFirstBlock) 	throws IOException;1405088715;Creates a new channel reader that reads from the given channel, expecting a specified_number of blocks in the channel._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, _														int numBlocks, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, numBlocks, ChannelWriterOutputView.HEADER_LENGTH, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,expecting,a,specified,number,of,blocks,in,the,channel,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,num,blocks,channel,writer,output,view,wait,for,first,block
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory,  														int numBlocks, boolean waitForFirstBlock) 	throws IOException;1411473561;Creates a new channel reader that reads from the given channel, expecting a specified_number of blocks in the channel._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, _														int numBlocks, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, numBlocks, ChannelWriterOutputView.HEADER_LENGTH, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,expecting,a,specified,number,of,blocks,in,the,channel,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,num,blocks,channel,writer,output,view,wait,for,first,block
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory,  														int numBlocks, boolean waitForFirstBlock) 	throws IOException;1412159138;Creates a new channel reader that reads from the given channel, expecting a specified_number of blocks in the channel._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, _														int numBlocks, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, numBlocks, ChannelWriterOutputView.HEADER_LENGTH, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,expecting,a,specified,number,of,blocks,in,the,channel,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,num,blocks,channel,writer,output,view,wait,for,first,block
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory,  														int numBlocks, boolean waitForFirstBlock) 	throws IOException;1415382319;Creates a new channel reader that reads from the given channel, expecting a specified_number of blocks in the channel._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, _														int numBlocks, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, numBlocks, ChannelWriterOutputView.HEADER_LENGTH, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,expecting,a,specified,number,of,blocks,in,the,channel,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,num,blocks,channel,writer,output,view,wait,for,first,block
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader<MemorySegment> reader, List<MemorySegment> memory, boolean waitForFirstBlock) 	throws IOException;1420560668;Creates a new channel reader that reads from the given channel until the last block_(as marked by a {@link ChannelWriterOutputView}) is found.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader<MemorySegment> reader, List<MemorySegment> memory, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, -1, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,until,the,last,block,as,marked,by,a,link,channel,writer,output,view,is,found,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,memory,segment,reader,list,memory,segment,memory,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,1,wait,for,first,block
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader<MemorySegment> reader, List<MemorySegment> memory, boolean waitForFirstBlock) 	throws IOException;1440967006;Creates a new channel reader that reads from the given channel until the last block_(as marked by a {@link ChannelWriterOutputView}) is found.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader<MemorySegment> reader, List<MemorySegment> memory, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, -1, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,until,the,last,block,as,marked,by,a,link,channel,writer,output,view,is,found,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,memory,segment,reader,list,memory,segment,memory,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,1,wait,for,first,block
ChannelReaderInputView -> protected void sendReadRequest(MemorySegment seg) throws IOException;1404155775;Sends a new read requests, if further requests remain. Otherwise, this method adds the segment_directly to the readers return queue.__@param seg The segment to use for the read request._@throws IOException Thrown, if the reader is in error.;protected void sendReadRequest(MemorySegment seg) throws IOException {_		if (this.numRequestsRemaining != 0) {_			this.reader.readBlock(seg)__			if (this.numRequestsRemaining != -1) {_				this.numRequestsRemaining--__			}_		} else {_			_			this.freeMem.add(seg)__		}_	};sends,a,new,read,requests,if,further,requests,remain,otherwise,this,method,adds,the,segment,directly,to,the,readers,return,queue,param,seg,the,segment,to,use,for,the,read,request,throws,ioexception,thrown,if,the,reader,is,in,error;protected,void,send,read,request,memory,segment,seg,throws,ioexception,if,this,num,requests,remaining,0,this,reader,read,block,seg,if,this,num,requests,remaining,1,this,num,requests,remaining,else,this,free,mem,add,seg
ChannelReaderInputView -> protected void sendReadRequest(MemorySegment seg) throws IOException;1404986750;Sends a new read requests, if further requests remain. Otherwise, this method adds the segment_directly to the readers return queue.__@param seg The segment to use for the read request._@throws IOException Thrown, if the reader is in error.;protected void sendReadRequest(MemorySegment seg) throws IOException_	{_		if (this.numRequestsRemaining != 0) {_			this.reader.readBlock(seg)__			if (this.numRequestsRemaining != -1) {_				this.numRequestsRemaining--__			}_		} else {_			_			this.freeMem.add(seg)__		}_	};sends,a,new,read,requests,if,further,requests,remain,otherwise,this,method,adds,the,segment,directly,to,the,readers,return,queue,param,seg,the,segment,to,use,for,the,read,request,throws,ioexception,thrown,if,the,reader,is,in,error;protected,void,send,read,request,memory,segment,seg,throws,ioexception,if,this,num,requests,remaining,0,this,reader,read,block,seg,if,this,num,requests,remaining,1,this,num,requests,remaining,else,this,free,mem,add,seg
ChannelReaderInputView -> protected void sendReadRequest(MemorySegment seg) throws IOException;1405088715;Sends a new read requests, if further requests remain. Otherwise, this method adds the segment_directly to the readers return queue.__@param seg The segment to use for the read request._@throws IOException Thrown, if the reader is in error.;protected void sendReadRequest(MemorySegment seg) throws IOException_	{_		if (this.numRequestsRemaining != 0) {_			this.reader.readBlock(seg)__			if (this.numRequestsRemaining != -1) {_				this.numRequestsRemaining--__			}_		} else {_			_			this.freeMem.add(seg)__		}_	};sends,a,new,read,requests,if,further,requests,remain,otherwise,this,method,adds,the,segment,directly,to,the,readers,return,queue,param,seg,the,segment,to,use,for,the,read,request,throws,ioexception,thrown,if,the,reader,is,in,error;protected,void,send,read,request,memory,segment,seg,throws,ioexception,if,this,num,requests,remaining,0,this,reader,read,block,seg,if,this,num,requests,remaining,1,this,num,requests,remaining,else,this,free,mem,add,seg
ChannelReaderInputView -> protected void sendReadRequest(MemorySegment seg) throws IOException;1411473561;Sends a new read requests, if further requests remain. Otherwise, this method adds the segment_directly to the readers return queue.__@param seg The segment to use for the read request._@throws IOException Thrown, if the reader is in error.;protected void sendReadRequest(MemorySegment seg) throws IOException {_		if (this.numRequestsRemaining != 0) {_			this.reader.readBlock(seg)__			if (this.numRequestsRemaining != -1) {_				this.numRequestsRemaining--__			}_		} else {_			_			this.freeMem.add(seg)__		}_	};sends,a,new,read,requests,if,further,requests,remain,otherwise,this,method,adds,the,segment,directly,to,the,readers,return,queue,param,seg,the,segment,to,use,for,the,read,request,throws,ioexception,thrown,if,the,reader,is,in,error;protected,void,send,read,request,memory,segment,seg,throws,ioexception,if,this,num,requests,remaining,0,this,reader,read,block,seg,if,this,num,requests,remaining,1,this,num,requests,remaining,else,this,free,mem,add,seg
ChannelReaderInputView -> protected void sendReadRequest(MemorySegment seg) throws IOException;1412159138;Sends a new read requests, if further requests remain. Otherwise, this method adds the segment_directly to the readers return queue.__@param seg The segment to use for the read request._@throws IOException Thrown, if the reader is in error.;protected void sendReadRequest(MemorySegment seg) throws IOException {_		if (this.numRequestsRemaining != 0) {_			this.reader.readBlock(seg)__			if (this.numRequestsRemaining != -1) {_				this.numRequestsRemaining--__			}_		} else {_			_			this.freeMem.add(seg)__		}_	};sends,a,new,read,requests,if,further,requests,remain,otherwise,this,method,adds,the,segment,directly,to,the,readers,return,queue,param,seg,the,segment,to,use,for,the,read,request,throws,ioexception,thrown,if,the,reader,is,in,error;protected,void,send,read,request,memory,segment,seg,throws,ioexception,if,this,num,requests,remaining,0,this,reader,read,block,seg,if,this,num,requests,remaining,1,this,num,requests,remaining,else,this,free,mem,add,seg
ChannelReaderInputView -> protected void sendReadRequest(MemorySegment seg) throws IOException;1415382319;Sends a new read requests, if further requests remain. Otherwise, this method adds the segment_directly to the readers return queue.__@param seg The segment to use for the read request._@throws IOException Thrown, if the reader is in error.;protected void sendReadRequest(MemorySegment seg) throws IOException {_		if (this.numRequestsRemaining != 0) {_			this.reader.readBlock(seg)__			if (this.numRequestsRemaining != -1) {_				this.numRequestsRemaining--__			}_		} else {_			_			this.freeMem.add(seg)__		}_	};sends,a,new,read,requests,if,further,requests,remain,otherwise,this,method,adds,the,segment,directly,to,the,readers,return,queue,param,seg,the,segment,to,use,for,the,read,request,throws,ioexception,thrown,if,the,reader,is,in,error;protected,void,send,read,request,memory,segment,seg,throws,ioexception,if,this,num,requests,remaining,0,this,reader,read,block,seg,if,this,num,requests,remaining,1,this,num,requests,remaining,else,this,free,mem,add,seg
ChannelReaderInputView -> protected void sendReadRequest(MemorySegment seg) throws IOException;1420560668;Sends a new read requests, if further requests remain. Otherwise, this method adds the segment_directly to the readers return queue.__@param seg The segment to use for the read request._@throws IOException Thrown, if the reader is in error.;protected void sendReadRequest(MemorySegment seg) throws IOException {_		if (this.numRequestsRemaining != 0) {_			this.reader.readBlock(seg)__			if (this.numRequestsRemaining != -1) {_				this.numRequestsRemaining--__			}_		} else {_			_			this.freeMem.add(seg)__		}_	};sends,a,new,read,requests,if,further,requests,remain,otherwise,this,method,adds,the,segment,directly,to,the,readers,return,queue,param,seg,the,segment,to,use,for,the,read,request,throws,ioexception,thrown,if,the,reader,is,in,error;protected,void,send,read,request,memory,segment,seg,throws,ioexception,if,this,num,requests,remaining,0,this,reader,read,block,seg,if,this,num,requests,remaining,1,this,num,requests,remaining,else,this,free,mem,add,seg
ChannelReaderInputView -> protected void sendReadRequest(MemorySegment seg) throws IOException;1440967006;Sends a new read requests, if further requests remain. Otherwise, this method adds the segment_directly to the readers return queue.__@param seg The segment to use for the read request._@throws IOException Thrown, if the reader is in error.;protected void sendReadRequest(MemorySegment seg) throws IOException {_		if (this.numRequestsRemaining != 0) {_			this.reader.readBlock(seg)__			if (this.numRequestsRemaining != -1) {_				this.numRequestsRemaining--__			}_		} else {_			_			this.freeMem.add(seg)__		}_	};sends,a,new,read,requests,if,further,requests,remain,otherwise,this,method,adds,the,segment,directly,to,the,readers,return,queue,param,seg,the,segment,to,use,for,the,read,request,throws,ioexception,thrown,if,the,reader,is,in,error;protected,void,send,read,request,memory,segment,seg,throws,ioexception,if,this,num,requests,remaining,0,this,reader,read,block,seg,if,this,num,requests,remaining,1,this,num,requests,remaining,else,this,free,mem,add,seg
ChannelReaderInputView -> public List<MemorySegment> close() throws IOException;1404155775;Closes this InputView, closing the underlying reader and returning all memory segments.__@return A list containing all memory segments originally supplied to this view._@throws IOException Thrown, if the underlying reader could not be properly closed.;public List<MemorySegment> close() throws IOException_	{	_		if (this.closed) {_			throw new IllegalStateException("Already closed.")__		}_		this.closed = true__		_		_		ArrayList<MemorySegment> list = this.freeMem__		final MemorySegment current = getCurrentSegment()__		if (current != null) {_			list.add(current)__		}_		clear()___		_		final LinkedBlockingQueue<MemorySegment> queue = this.reader.getReturnQueue()__		this.reader.close()___		while (list.size() < this.numSegments) {_			final MemorySegment m = queue.poll()__			if (m == null) {_				_				throw new RuntimeException("Bug in ChannelReaderInputView: MemorySegments lost.")__			}_			list.add(m)__		}_		return list__	};closes,this,input,view,closing,the,underlying,reader,and,returning,all,memory,segments,return,a,list,containing,all,memory,segments,originally,supplied,to,this,view,throws,ioexception,thrown,if,the,underlying,reader,could,not,be,properly,closed;public,list,memory,segment,close,throws,ioexception,if,this,closed,throw,new,illegal,state,exception,already,closed,this,closed,true,array,list,memory,segment,list,this,free,mem,final,memory,segment,current,get,current,segment,if,current,null,list,add,current,clear,final,linked,blocking,queue,memory,segment,queue,this,reader,get,return,queue,this,reader,close,while,list,size,this,num,segments,final,memory,segment,m,queue,poll,if,m,null,throw,new,runtime,exception,bug,in,channel,reader,input,view,memory,segments,lost,list,add,m,return,list
ChannelReaderInputView -> public List<MemorySegment> close() throws IOException;1404986750;Closes this InputView, closing the underlying reader and returning all memory segments.__@return A list containing all memory segments originally supplied to this view._@throws IOException Thrown, if the underlying reader could not be properly closed.;public List<MemorySegment> close() throws IOException_	{	_		if (this.closed) {_			throw new IllegalStateException("Already closed.")__		}_		this.closed = true__		_		_		ArrayList<MemorySegment> list = this.freeMem__		final MemorySegment current = getCurrentSegment()__		if (current != null) {_			list.add(current)__		}_		clear()___		_		final LinkedBlockingQueue<MemorySegment> queue = this.reader.getReturnQueue()__		this.reader.close()___		while (list.size() < this.numSegments) {_			final MemorySegment m = queue.poll()__			if (m == null) {_				_				throw new RuntimeException("Bug in ChannelReaderInputView: MemorySegments lost.")__			}_			list.add(m)__		}_		return list__	};closes,this,input,view,closing,the,underlying,reader,and,returning,all,memory,segments,return,a,list,containing,all,memory,segments,originally,supplied,to,this,view,throws,ioexception,thrown,if,the,underlying,reader,could,not,be,properly,closed;public,list,memory,segment,close,throws,ioexception,if,this,closed,throw,new,illegal,state,exception,already,closed,this,closed,true,array,list,memory,segment,list,this,free,mem,final,memory,segment,current,get,current,segment,if,current,null,list,add,current,clear,final,linked,blocking,queue,memory,segment,queue,this,reader,get,return,queue,this,reader,close,while,list,size,this,num,segments,final,memory,segment,m,queue,poll,if,m,null,throw,new,runtime,exception,bug,in,channel,reader,input,view,memory,segments,lost,list,add,m,return,list
ChannelReaderInputView -> public List<MemorySegment> close() throws IOException;1405088715;Closes this InputView, closing the underlying reader and returning all memory segments.__@return A list containing all memory segments originally supplied to this view._@throws IOException Thrown, if the underlying reader could not be properly closed.;public List<MemorySegment> close() throws IOException_	{	_		if (this.closed) {_			throw new IllegalStateException("Already closed.")__		}_		this.closed = true__		_		_		ArrayList<MemorySegment> list = this.freeMem__		final MemorySegment current = getCurrentSegment()__		if (current != null) {_			list.add(current)__		}_		clear()___		_		final LinkedBlockingQueue<MemorySegment> queue = this.reader.getReturnQueue()__		this.reader.close()___		while (list.size() < this.numSegments) {_			final MemorySegment m = queue.poll()__			if (m == null) {_				_				throw new RuntimeException("Bug in ChannelReaderInputView: MemorySegments lost.")__			}_			list.add(m)__		}_		return list__	};closes,this,input,view,closing,the,underlying,reader,and,returning,all,memory,segments,return,a,list,containing,all,memory,segments,originally,supplied,to,this,view,throws,ioexception,thrown,if,the,underlying,reader,could,not,be,properly,closed;public,list,memory,segment,close,throws,ioexception,if,this,closed,throw,new,illegal,state,exception,already,closed,this,closed,true,array,list,memory,segment,list,this,free,mem,final,memory,segment,current,get,current,segment,if,current,null,list,add,current,clear,final,linked,blocking,queue,memory,segment,queue,this,reader,get,return,queue,this,reader,close,while,list,size,this,num,segments,final,memory,segment,m,queue,poll,if,m,null,throw,new,runtime,exception,bug,in,channel,reader,input,view,memory,segments,lost,list,add,m,return,list
ChannelReaderInputView -> public List<MemorySegment> close() throws IOException;1411473561;Closes this InputView, closing the underlying reader and returning all memory segments.__@return A list containing all memory segments originally supplied to this view._@throws IOException Thrown, if the underlying reader could not be properly closed.;public List<MemorySegment> close() throws IOException_	{	_		if (this.closed) {_			throw new IllegalStateException("Already closed.")__		}_		this.closed = true__		_		_		ArrayList<MemorySegment> list = this.freeMem__		final MemorySegment current = getCurrentSegment()__		if (current != null) {_			list.add(current)__		}_		clear()___		_		final LinkedBlockingQueue<MemorySegment> queue = this.reader.getReturnQueue()__		this.reader.close()___		while (list.size() < this.numSegments) {_			final MemorySegment m = queue.poll()__			if (m == null) {_				_				throw new RuntimeException("Bug in ChannelReaderInputView: MemorySegments lost.")__			}_			list.add(m)__		}_		return list__	};closes,this,input,view,closing,the,underlying,reader,and,returning,all,memory,segments,return,a,list,containing,all,memory,segments,originally,supplied,to,this,view,throws,ioexception,thrown,if,the,underlying,reader,could,not,be,properly,closed;public,list,memory,segment,close,throws,ioexception,if,this,closed,throw,new,illegal,state,exception,already,closed,this,closed,true,array,list,memory,segment,list,this,free,mem,final,memory,segment,current,get,current,segment,if,current,null,list,add,current,clear,final,linked,blocking,queue,memory,segment,queue,this,reader,get,return,queue,this,reader,close,while,list,size,this,num,segments,final,memory,segment,m,queue,poll,if,m,null,throw,new,runtime,exception,bug,in,channel,reader,input,view,memory,segments,lost,list,add,m,return,list
ChannelReaderInputView -> public List<MemorySegment> close() throws IOException;1412159138;Closes this InputView, closing the underlying reader and returning all memory segments.__@return A list containing all memory segments originally supplied to this view._@throws IOException Thrown, if the underlying reader could not be properly closed.;public List<MemorySegment> close() throws IOException_	{	_		if (this.closed) {_			throw new IllegalStateException("Already closed.")__		}_		this.closed = true__		_		_		ArrayList<MemorySegment> list = this.freeMem__		final MemorySegment current = getCurrentSegment()__		if (current != null) {_			list.add(current)__		}_		clear()___		_		final LinkedBlockingQueue<MemorySegment> queue = this.reader.getReturnQueue()__		this.reader.close()___		while (list.size() < this.numSegments) {_			final MemorySegment m = queue.poll()__			if (m == null) {_				_				throw new RuntimeException("Bug in ChannelReaderInputView: MemorySegments lost.")__			}_			list.add(m)__		}_		return list__	};closes,this,input,view,closing,the,underlying,reader,and,returning,all,memory,segments,return,a,list,containing,all,memory,segments,originally,supplied,to,this,view,throws,ioexception,thrown,if,the,underlying,reader,could,not,be,properly,closed;public,list,memory,segment,close,throws,ioexception,if,this,closed,throw,new,illegal,state,exception,already,closed,this,closed,true,array,list,memory,segment,list,this,free,mem,final,memory,segment,current,get,current,segment,if,current,null,list,add,current,clear,final,linked,blocking,queue,memory,segment,queue,this,reader,get,return,queue,this,reader,close,while,list,size,this,num,segments,final,memory,segment,m,queue,poll,if,m,null,throw,new,runtime,exception,bug,in,channel,reader,input,view,memory,segments,lost,list,add,m,return,list
ChannelReaderInputView -> public List<MemorySegment> close() throws IOException;1415382319;Closes this InputView, closing the underlying reader and returning all memory segments.__@return A list containing all memory segments originally supplied to this view._@throws IOException Thrown, if the underlying reader could not be properly closed.;public List<MemorySegment> close() throws IOException {	_		if (this.closed) {_			throw new IllegalStateException("Already closed.")__		}_		this.closed = true__		_		_		ArrayList<MemorySegment> list = this.freeMem__		final MemorySegment current = getCurrentSegment()__		if (current != null) {_			list.add(current)__		}_		clear()___		_		final LinkedBlockingQueue<MemorySegment> queue = this.reader.getReturnQueue()__		this.reader.close()___		while (list.size() < this.numSegments) {_			final MemorySegment m = queue.poll()__			if (m == null) {_				_				throw new RuntimeException("Bug in ChannelReaderInputView: MemorySegments lost.")__			}_			list.add(m)__		}_		return list__	};closes,this,input,view,closing,the,underlying,reader,and,returning,all,memory,segments,return,a,list,containing,all,memory,segments,originally,supplied,to,this,view,throws,ioexception,thrown,if,the,underlying,reader,could,not,be,properly,closed;public,list,memory,segment,close,throws,ioexception,if,this,closed,throw,new,illegal,state,exception,already,closed,this,closed,true,array,list,memory,segment,list,this,free,mem,final,memory,segment,current,get,current,segment,if,current,null,list,add,current,clear,final,linked,blocking,queue,memory,segment,queue,this,reader,get,return,queue,this,reader,close,while,list,size,this,num,segments,final,memory,segment,m,queue,poll,if,m,null,throw,new,runtime,exception,bug,in,channel,reader,input,view,memory,segments,lost,list,add,m,return,list
ChannelReaderInputView -> public List<MemorySegment> close() throws IOException;1420560668;Closes this InputView, closing the underlying reader and returning all memory segments.__@return A list containing all memory segments originally supplied to this view._@throws IOException Thrown, if the underlying reader could not be properly closed.;public List<MemorySegment> close() throws IOException {	_		if (this.closed) {_			throw new IllegalStateException("Already closed.")__		}_		this.closed = true__		_		_		ArrayList<MemorySegment> list = this.freeMem__		final MemorySegment current = getCurrentSegment()__		if (current != null) {_			list.add(current)__		}_		clear()___		_		final LinkedBlockingQueue<MemorySegment> queue = this.reader.getReturnQueue()__		this.reader.close()___		while (list.size() < this.numSegments) {_			final MemorySegment m = queue.poll()__			if (m == null) {_				_				throw new RuntimeException("Bug in ChannelReaderInputView: MemorySegments lost.")__			}_			list.add(m)__		}_		return list__	};closes,this,input,view,closing,the,underlying,reader,and,returning,all,memory,segments,return,a,list,containing,all,memory,segments,originally,supplied,to,this,view,throws,ioexception,thrown,if,the,underlying,reader,could,not,be,properly,closed;public,list,memory,segment,close,throws,ioexception,if,this,closed,throw,new,illegal,state,exception,already,closed,this,closed,true,array,list,memory,segment,list,this,free,mem,final,memory,segment,current,get,current,segment,if,current,null,list,add,current,clear,final,linked,blocking,queue,memory,segment,queue,this,reader,get,return,queue,this,reader,close,while,list,size,this,num,segments,final,memory,segment,m,queue,poll,if,m,null,throw,new,runtime,exception,bug,in,channel,reader,input,view,memory,segments,lost,list,add,m,return,list
ChannelReaderInputView -> public List<MemorySegment> close() throws IOException;1440967006;Closes this InputView, closing the underlying reader and returning all memory segments.__@return A list containing all memory segments originally supplied to this view._@throws IOException Thrown, if the underlying reader could not be properly closed.;public List<MemorySegment> close() throws IOException {	_		if (this.closed) {_			throw new IllegalStateException("Already closed.")__		}_		this.closed = true__		_		_		ArrayList<MemorySegment> list = this.freeMem__		final MemorySegment current = getCurrentSegment()__		if (current != null) {_			list.add(current)__		}_		clear()___		_		final LinkedBlockingQueue<MemorySegment> queue = this.reader.getReturnQueue()__		this.reader.close()___		while (list.size() < this.numSegments) {_			final MemorySegment m = queue.poll()__			if (m == null) {_				_				throw new RuntimeException("Bug in ChannelReaderInputView: MemorySegments lost.")__			}_			list.add(m)__		}_		return list__	};closes,this,input,view,closing,the,underlying,reader,and,returning,all,memory,segments,return,a,list,containing,all,memory,segments,originally,supplied,to,this,view,throws,ioexception,thrown,if,the,underlying,reader,could,not,be,properly,closed;public,list,memory,segment,close,throws,ioexception,if,this,closed,throw,new,illegal,state,exception,already,closed,this,closed,true,array,list,memory,segment,list,this,free,mem,final,memory,segment,current,get,current,segment,if,current,null,list,add,current,clear,final,linked,blocking,queue,memory,segment,queue,this,reader,get,return,queue,this,reader,close,while,list,size,this,num,segments,final,memory,segment,m,queue,poll,if,m,null,throw,new,runtime,exception,bug,in,channel,reader,input,view,memory,segments,lost,list,add,m,return,list
ChannelReaderInputView -> @Override 	protected MemorySegment nextSegment(MemorySegment current) throws IOException;1404155775;Gets the next segment from the asynchronous block reader. If more requests are to be issued, the method_first sends a new request with the current memory segment. If no more requests are pending, the method_adds the segment to the readers return queue, which thereby effectively collects all memory segments._Secondly, the method fetches the next non-consumed segment_returned by the reader. If no further segments are available, this method thrown an {@link EOFException}.__@param current The memory segment used for the next request._@return The memory segment to read from next.__@throws EOFException Thrown, if no further segments are available._@throws IOException Thrown, if an I/O error occurred while reading_@see AbstractPagedInputView#nextSegment(org.apache.flink.core.memory.MemorySegment);@Override_	protected MemorySegment nextSegment(MemorySegment current) throws IOException {_		_		if (this.inLastBlock) {_			throw new EOFException()__		}_				_		_		_		if (current != null) {_			sendReadRequest(current)__		}_		_		_		final MemorySegment seg = this.reader.getNextReturnedSegment()__		_		_		if (seg.getShort(0) != ChannelWriterOutputView.HEADER_MAGIC_NUMBER) {_			throw new IOException("The current block does not belong to a ChannelWriterOutputView / " +_					"ChannelReaderInputView: Wrong magic number.")__		}_		if ( (seg.getShort(ChannelWriterOutputView.HEADER_FLAGS_OFFSET) & ChannelWriterOutputView.FLAG_LAST_BLOCK) != 0) {_			_			this.numRequestsRemaining = 0__			this.inLastBlock = true__		}_		_		return seg__	};gets,the,next,segment,from,the,asynchronous,block,reader,if,more,requests,are,to,be,issued,the,method,first,sends,a,new,request,with,the,current,memory,segment,if,no,more,requests,are,pending,the,method,adds,the,segment,to,the,readers,return,queue,which,thereby,effectively,collects,all,memory,segments,secondly,the,method,fetches,the,next,non,consumed,segment,returned,by,the,reader,if,no,further,segments,are,available,this,method,thrown,an,link,eofexception,param,current,the,memory,segment,used,for,the,next,request,return,the,memory,segment,to,read,from,next,throws,eofexception,thrown,if,no,further,segments,are,available,throws,ioexception,thrown,if,an,i,o,error,occurred,while,reading,see,abstract,paged,input,view,next,segment,org,apache,flink,core,memory,memory,segment;override,protected,memory,segment,next,segment,memory,segment,current,throws,ioexception,if,this,in,last,block,throw,new,eofexception,if,current,null,send,read,request,current,final,memory,segment,seg,this,reader,get,next,returned,segment,if,seg,get,short,0,channel,writer,output,view,throw,new,ioexception,the,current,block,does,not,belong,to,a,channel,writer,output,view,channel,reader,input,view,wrong,magic,number,if,seg,get,short,channel,writer,output,view,channel,writer,output,view,0,this,num,requests,remaining,0,this,in,last,block,true,return,seg
ChannelReaderInputView -> @Override 	protected MemorySegment nextSegment(MemorySegment current) throws IOException;1404986750;Gets the next segment from the asynchronous block reader. If more requests are to be issued, the method_first sends a new request with the current memory segment. If no more requests are pending, the method_adds the segment to the readers return queue, which thereby effectively collects all memory segments._Secondly, the method fetches the next non-consumed segment_returned by the reader. If no further segments are available, this method thrown an {@link EOFException}.__@param current The memory segment used for the next request._@return The memory segment to read from next.__@throws EOFException Thrown, if no further segments are available._@throws IOException Thrown, if an I/O error occurred while reading_@see AbstractPagedInputView#nextSegment(org.apache.flink.core.memory.MemorySegment);@Override_	protected MemorySegment nextSegment(MemorySegment current) throws IOException {_		_		if (this.inLastBlock) {_			throw new EOFException()__		}_				_		_		_		if (current != null) {_			sendReadRequest(current)__		}_		_		_		final MemorySegment seg = this.reader.getNextReturnedSegment()__		_		_		if (seg.getShort(0) != ChannelWriterOutputView.HEADER_MAGIC_NUMBER) {_			throw new IOException("The current block does not belong to a ChannelWriterOutputView / " +_					"ChannelReaderInputView: Wrong magic number.")__		}_		if ( (seg.getShort(ChannelWriterOutputView.HEADER_FLAGS_OFFSET) & ChannelWriterOutputView.FLAG_LAST_BLOCK) != 0) {_			_			this.numRequestsRemaining = 0__			this.inLastBlock = true__		}_		_		return seg__	};gets,the,next,segment,from,the,asynchronous,block,reader,if,more,requests,are,to,be,issued,the,method,first,sends,a,new,request,with,the,current,memory,segment,if,no,more,requests,are,pending,the,method,adds,the,segment,to,the,readers,return,queue,which,thereby,effectively,collects,all,memory,segments,secondly,the,method,fetches,the,next,non,consumed,segment,returned,by,the,reader,if,no,further,segments,are,available,this,method,thrown,an,link,eofexception,param,current,the,memory,segment,used,for,the,next,request,return,the,memory,segment,to,read,from,next,throws,eofexception,thrown,if,no,further,segments,are,available,throws,ioexception,thrown,if,an,i,o,error,occurred,while,reading,see,abstract,paged,input,view,next,segment,org,apache,flink,core,memory,memory,segment;override,protected,memory,segment,next,segment,memory,segment,current,throws,ioexception,if,this,in,last,block,throw,new,eofexception,if,current,null,send,read,request,current,final,memory,segment,seg,this,reader,get,next,returned,segment,if,seg,get,short,0,channel,writer,output,view,throw,new,ioexception,the,current,block,does,not,belong,to,a,channel,writer,output,view,channel,reader,input,view,wrong,magic,number,if,seg,get,short,channel,writer,output,view,channel,writer,output,view,0,this,num,requests,remaining,0,this,in,last,block,true,return,seg
ChannelReaderInputView -> @Override 	protected MemorySegment nextSegment(MemorySegment current) throws IOException;1405088715;Gets the next segment from the asynchronous block reader. If more requests are to be issued, the method_first sends a new request with the current memory segment. If no more requests are pending, the method_adds the segment to the readers return queue, which thereby effectively collects all memory segments._Secondly, the method fetches the next non-consumed segment_returned by the reader. If no further segments are available, this method thrown an {@link EOFException}.__@param current The memory segment used for the next request._@return The memory segment to read from next.__@throws EOFException Thrown, if no further segments are available._@throws IOException Thrown, if an I/O error occurred while reading_@see AbstractPagedInputView#nextSegment(org.apache.flink.core.memory.MemorySegment);@Override_	protected MemorySegment nextSegment(MemorySegment current) throws IOException {_		_		if (this.inLastBlock) {_			throw new EOFException()__		}_				_		_		_		if (current != null) {_			sendReadRequest(current)__		}_		_		_		final MemorySegment seg = this.reader.getNextReturnedSegment()__		_		_		if (seg.getShort(0) != ChannelWriterOutputView.HEADER_MAGIC_NUMBER) {_			throw new IOException("The current block does not belong to a ChannelWriterOutputView / " +_					"ChannelReaderInputView: Wrong magic number.")__		}_		if ( (seg.getShort(ChannelWriterOutputView.HEADER_FLAGS_OFFSET) & ChannelWriterOutputView.FLAG_LAST_BLOCK) != 0) {_			_			this.numRequestsRemaining = 0__			this.inLastBlock = true__		}_		_		return seg__	};gets,the,next,segment,from,the,asynchronous,block,reader,if,more,requests,are,to,be,issued,the,method,first,sends,a,new,request,with,the,current,memory,segment,if,no,more,requests,are,pending,the,method,adds,the,segment,to,the,readers,return,queue,which,thereby,effectively,collects,all,memory,segments,secondly,the,method,fetches,the,next,non,consumed,segment,returned,by,the,reader,if,no,further,segments,are,available,this,method,thrown,an,link,eofexception,param,current,the,memory,segment,used,for,the,next,request,return,the,memory,segment,to,read,from,next,throws,eofexception,thrown,if,no,further,segments,are,available,throws,ioexception,thrown,if,an,i,o,error,occurred,while,reading,see,abstract,paged,input,view,next,segment,org,apache,flink,core,memory,memory,segment;override,protected,memory,segment,next,segment,memory,segment,current,throws,ioexception,if,this,in,last,block,throw,new,eofexception,if,current,null,send,read,request,current,final,memory,segment,seg,this,reader,get,next,returned,segment,if,seg,get,short,0,channel,writer,output,view,throw,new,ioexception,the,current,block,does,not,belong,to,a,channel,writer,output,view,channel,reader,input,view,wrong,magic,number,if,seg,get,short,channel,writer,output,view,channel,writer,output,view,0,this,num,requests,remaining,0,this,in,last,block,true,return,seg
ChannelReaderInputView -> @Override 	protected MemorySegment nextSegment(MemorySegment current) throws IOException;1411473561;Gets the next segment from the asynchronous block reader. If more requests are to be issued, the method_first sends a new request with the current memory segment. If no more requests are pending, the method_adds the segment to the readers return queue, which thereby effectively collects all memory segments._Secondly, the method fetches the next non-consumed segment_returned by the reader. If no further segments are available, this method thrown an {@link EOFException}.__@param current The memory segment used for the next request._@return The memory segment to read from next.__@throws EOFException Thrown, if no further segments are available._@throws IOException Thrown, if an I/O error occurred while reading_@see AbstractPagedInputView#nextSegment(org.apache.flink.core.memory.MemorySegment);@Override_	protected MemorySegment nextSegment(MemorySegment current) throws IOException {_		_		if (this.inLastBlock) {_			throw new EOFException()__		}_				_		_		_		if (current != null) {_			sendReadRequest(current)__		}_		_		_		final MemorySegment seg = this.reader.getNextReturnedSegment()__		_		_		if (seg.getShort(0) != ChannelWriterOutputView.HEADER_MAGIC_NUMBER) {_			throw new IOException("The current block does not belong to a ChannelWriterOutputView / " +_					"ChannelReaderInputView: Wrong magic number.")__		}_		if ( (seg.getShort(ChannelWriterOutputView.HEADER_FLAGS_OFFSET) & ChannelWriterOutputView.FLAG_LAST_BLOCK) != 0) {_			_			this.numRequestsRemaining = 0__			this.inLastBlock = true__		}_		_		return seg__	};gets,the,next,segment,from,the,asynchronous,block,reader,if,more,requests,are,to,be,issued,the,method,first,sends,a,new,request,with,the,current,memory,segment,if,no,more,requests,are,pending,the,method,adds,the,segment,to,the,readers,return,queue,which,thereby,effectively,collects,all,memory,segments,secondly,the,method,fetches,the,next,non,consumed,segment,returned,by,the,reader,if,no,further,segments,are,available,this,method,thrown,an,link,eofexception,param,current,the,memory,segment,used,for,the,next,request,return,the,memory,segment,to,read,from,next,throws,eofexception,thrown,if,no,further,segments,are,available,throws,ioexception,thrown,if,an,i,o,error,occurred,while,reading,see,abstract,paged,input,view,next,segment,org,apache,flink,core,memory,memory,segment;override,protected,memory,segment,next,segment,memory,segment,current,throws,ioexception,if,this,in,last,block,throw,new,eofexception,if,current,null,send,read,request,current,final,memory,segment,seg,this,reader,get,next,returned,segment,if,seg,get,short,0,channel,writer,output,view,throw,new,ioexception,the,current,block,does,not,belong,to,a,channel,writer,output,view,channel,reader,input,view,wrong,magic,number,if,seg,get,short,channel,writer,output,view,channel,writer,output,view,0,this,num,requests,remaining,0,this,in,last,block,true,return,seg
ChannelReaderInputView -> @Override 	protected MemorySegment nextSegment(MemorySegment current) throws IOException;1412159138;Gets the next segment from the asynchronous block reader. If more requests are to be issued, the method_first sends a new request with the current memory segment. If no more requests are pending, the method_adds the segment to the readers return queue, which thereby effectively collects all memory segments._Secondly, the method fetches the next non-consumed segment_returned by the reader. If no further segments are available, this method thrown an {@link EOFException}.__@param current The memory segment used for the next request._@return The memory segment to read from next.__@throws EOFException Thrown, if no further segments are available._@throws IOException Thrown, if an I/O error occurred while reading_@see AbstractPagedInputView#nextSegment(org.apache.flink.core.memory.MemorySegment);@Override_	protected MemorySegment nextSegment(MemorySegment current) throws IOException {_		_		if (this.inLastBlock) {_			throw new EOFException()__		}_				_		_		_		if (current != null) {_			sendReadRequest(current)__		}_		_		_		final MemorySegment seg = this.reader.getNextReturnedSegment()__		_		_		if (seg.getShort(0) != ChannelWriterOutputView.HEADER_MAGIC_NUMBER) {_			throw new IOException("The current block does not belong to a ChannelWriterOutputView / " +_					"ChannelReaderInputView: Wrong magic number.")__		}_		if ( (seg.getShort(ChannelWriterOutputView.HEADER_FLAGS_OFFSET) & ChannelWriterOutputView.FLAG_LAST_BLOCK) != 0) {_			_			this.numRequestsRemaining = 0__			this.inLastBlock = true__		}_		_		return seg__	};gets,the,next,segment,from,the,asynchronous,block,reader,if,more,requests,are,to,be,issued,the,method,first,sends,a,new,request,with,the,current,memory,segment,if,no,more,requests,are,pending,the,method,adds,the,segment,to,the,readers,return,queue,which,thereby,effectively,collects,all,memory,segments,secondly,the,method,fetches,the,next,non,consumed,segment,returned,by,the,reader,if,no,further,segments,are,available,this,method,thrown,an,link,eofexception,param,current,the,memory,segment,used,for,the,next,request,return,the,memory,segment,to,read,from,next,throws,eofexception,thrown,if,no,further,segments,are,available,throws,ioexception,thrown,if,an,i,o,error,occurred,while,reading,see,abstract,paged,input,view,next,segment,org,apache,flink,core,memory,memory,segment;override,protected,memory,segment,next,segment,memory,segment,current,throws,ioexception,if,this,in,last,block,throw,new,eofexception,if,current,null,send,read,request,current,final,memory,segment,seg,this,reader,get,next,returned,segment,if,seg,get,short,0,channel,writer,output,view,throw,new,ioexception,the,current,block,does,not,belong,to,a,channel,writer,output,view,channel,reader,input,view,wrong,magic,number,if,seg,get,short,channel,writer,output,view,channel,writer,output,view,0,this,num,requests,remaining,0,this,in,last,block,true,return,seg
ChannelReaderInputView -> @Override 	protected MemorySegment nextSegment(MemorySegment current) throws IOException;1415382319;Gets the next segment from the asynchronous block reader. If more requests are to be issued, the method_first sends a new request with the current memory segment. If no more requests are pending, the method_adds the segment to the readers return queue, which thereby effectively collects all memory segments._Secondly, the method fetches the next non-consumed segment_returned by the reader. If no further segments are available, this method thrown an {@link EOFException}.__@param current The memory segment used for the next request._@return The memory segment to read from next.__@throws EOFException Thrown, if no further segments are available._@throws IOException Thrown, if an I/O error occurred while reading_@see AbstractPagedInputView#nextSegment(org.apache.flink.core.memory.MemorySegment);@Override_	protected MemorySegment nextSegment(MemorySegment current) throws IOException {_		_		if (this.inLastBlock) {_			throw new EOFException()__		}_				_		_		_		if (current != null) {_			sendReadRequest(current)__		}_		_		_		final MemorySegment seg = this.reader.getNextReturnedSegment()__		_		_		if (seg.getShort(0) != ChannelWriterOutputView.HEADER_MAGIC_NUMBER) {_			throw new IOException("The current block does not belong to a ChannelWriterOutputView / " +_					"ChannelReaderInputView: Wrong magic number.")__		}_		if ( (seg.getShort(ChannelWriterOutputView.HEADER_FLAGS_OFFSET) & ChannelWriterOutputView.FLAG_LAST_BLOCK) != 0) {_			_			this.numRequestsRemaining = 0__			this.inLastBlock = true__		}_		_		return seg__	};gets,the,next,segment,from,the,asynchronous,block,reader,if,more,requests,are,to,be,issued,the,method,first,sends,a,new,request,with,the,current,memory,segment,if,no,more,requests,are,pending,the,method,adds,the,segment,to,the,readers,return,queue,which,thereby,effectively,collects,all,memory,segments,secondly,the,method,fetches,the,next,non,consumed,segment,returned,by,the,reader,if,no,further,segments,are,available,this,method,thrown,an,link,eofexception,param,current,the,memory,segment,used,for,the,next,request,return,the,memory,segment,to,read,from,next,throws,eofexception,thrown,if,no,further,segments,are,available,throws,ioexception,thrown,if,an,i,o,error,occurred,while,reading,see,abstract,paged,input,view,next,segment,org,apache,flink,core,memory,memory,segment;override,protected,memory,segment,next,segment,memory,segment,current,throws,ioexception,if,this,in,last,block,throw,new,eofexception,if,current,null,send,read,request,current,final,memory,segment,seg,this,reader,get,next,returned,segment,if,seg,get,short,0,channel,writer,output,view,throw,new,ioexception,the,current,block,does,not,belong,to,a,channel,writer,output,view,channel,reader,input,view,wrong,magic,number,if,seg,get,short,channel,writer,output,view,channel,writer,output,view,0,this,num,requests,remaining,0,this,in,last,block,true,return,seg
ChannelReaderInputView -> @Override 	protected MemorySegment nextSegment(MemorySegment current) throws IOException;1420560668;Gets the next segment from the asynchronous block reader. If more requests are to be issued, the method_first sends a new request with the current memory segment. If no more requests are pending, the method_adds the segment to the readers return queue, which thereby effectively collects all memory segments._Secondly, the method fetches the next non-consumed segment_returned by the reader. If no further segments are available, this method thrown an {@link EOFException}.__@param current The memory segment used for the next request._@return The memory segment to read from next.__@throws EOFException Thrown, if no further segments are available._@throws IOException Thrown, if an I/O error occurred while reading_@see AbstractPagedInputView#nextSegment(org.apache.flink.core.memory.MemorySegment);@Override_	protected MemorySegment nextSegment(MemorySegment current) throws IOException {_		_		if (this.inLastBlock) {_			throw new EOFException()__		}_				_		_		_		if (current != null) {_			sendReadRequest(current)__		}_		_		_		final MemorySegment seg = this.reader.getNextReturnedBlock()__		_		_		if (seg.getShort(0) != ChannelWriterOutputView.HEADER_MAGIC_NUMBER) {_			throw new IOException("The current block does not belong to a ChannelWriterOutputView / " +_					"ChannelReaderInputView: Wrong magic number.")__		}_		if ( (seg.getShort(ChannelWriterOutputView.HEADER_FLAGS_OFFSET) & ChannelWriterOutputView.FLAG_LAST_BLOCK) != 0) {_			_			this.numRequestsRemaining = 0__			this.inLastBlock = true__		}_		_		return seg__	};gets,the,next,segment,from,the,asynchronous,block,reader,if,more,requests,are,to,be,issued,the,method,first,sends,a,new,request,with,the,current,memory,segment,if,no,more,requests,are,pending,the,method,adds,the,segment,to,the,readers,return,queue,which,thereby,effectively,collects,all,memory,segments,secondly,the,method,fetches,the,next,non,consumed,segment,returned,by,the,reader,if,no,further,segments,are,available,this,method,thrown,an,link,eofexception,param,current,the,memory,segment,used,for,the,next,request,return,the,memory,segment,to,read,from,next,throws,eofexception,thrown,if,no,further,segments,are,available,throws,ioexception,thrown,if,an,i,o,error,occurred,while,reading,see,abstract,paged,input,view,next,segment,org,apache,flink,core,memory,memory,segment;override,protected,memory,segment,next,segment,memory,segment,current,throws,ioexception,if,this,in,last,block,throw,new,eofexception,if,current,null,send,read,request,current,final,memory,segment,seg,this,reader,get,next,returned,block,if,seg,get,short,0,channel,writer,output,view,throw,new,ioexception,the,current,block,does,not,belong,to,a,channel,writer,output,view,channel,reader,input,view,wrong,magic,number,if,seg,get,short,channel,writer,output,view,channel,writer,output,view,0,this,num,requests,remaining,0,this,in,last,block,true,return,seg
ChannelReaderInputView -> @Override 	protected MemorySegment nextSegment(MemorySegment current) throws IOException;1440967006;Gets the next segment from the asynchronous block reader. If more requests are to be issued, the method_first sends a new request with the current memory segment. If no more requests are pending, the method_adds the segment to the readers return queue, which thereby effectively collects all memory segments._Secondly, the method fetches the next non-consumed segment_returned by the reader. If no further segments are available, this method thrown an {@link EOFException}.__@param current The memory segment used for the next request._@return The memory segment to read from next.__@throws EOFException Thrown, if no further segments are available._@throws IOException Thrown, if an I/O error occurred while reading_@see AbstractPagedInputView#nextSegment(org.apache.flink.core.memory.MemorySegment);@Override_	protected MemorySegment nextSegment(MemorySegment current) throws IOException {_		_		if (this.inLastBlock) {_			throw new EOFException()__		}_				_		_		_		if (current != null) {_			sendReadRequest(current)__		}_		_		_		final MemorySegment seg = this.reader.getNextReturnedBlock()__		_		_		if (seg.getShort(0) != ChannelWriterOutputView.HEADER_MAGIC_NUMBER) {_			throw new IOException("The current block does not belong to a ChannelWriterOutputView / " +_					"ChannelReaderInputView: Wrong magic number.")__		}_		if ( (seg.getShort(ChannelWriterOutputView.HEADER_FLAGS_OFFSET) & ChannelWriterOutputView.FLAG_LAST_BLOCK) != 0) {_			_			this.numRequestsRemaining = 0__			this.inLastBlock = true__		}_		_		return seg__	};gets,the,next,segment,from,the,asynchronous,block,reader,if,more,requests,are,to,be,issued,the,method,first,sends,a,new,request,with,the,current,memory,segment,if,no,more,requests,are,pending,the,method,adds,the,segment,to,the,readers,return,queue,which,thereby,effectively,collects,all,memory,segments,secondly,the,method,fetches,the,next,non,consumed,segment,returned,by,the,reader,if,no,further,segments,are,available,this,method,thrown,an,link,eofexception,param,current,the,memory,segment,used,for,the,next,request,return,the,memory,segment,to,read,from,next,throws,eofexception,thrown,if,no,further,segments,are,available,throws,ioexception,thrown,if,an,i,o,error,occurred,while,reading,see,abstract,paged,input,view,next,segment,org,apache,flink,core,memory,memory,segment;override,protected,memory,segment,next,segment,memory,segment,current,throws,ioexception,if,this,in,last,block,throw,new,eofexception,if,current,null,send,read,request,current,final,memory,segment,seg,this,reader,get,next,returned,block,if,seg,get,short,0,channel,writer,output,view,throw,new,ioexception,the,current,block,does,not,belong,to,a,channel,writer,output,view,channel,reader,input,view,wrong,magic,number,if,seg,get,short,channel,writer,output,view,channel,writer,output,view,0,this,num,requests,remaining,0,this,in,last,block,true,return,seg
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader<MemorySegment> reader, List<MemorySegment> memory, 														int numBlocks, boolean waitForFirstBlock) 	throws IOException;1420560668;Creates a new channel reader that reads from the given channel, expecting a specified_number of blocks in the channel._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader<MemorySegment> reader, List<MemorySegment> memory,_														int numBlocks, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, numBlocks, ChannelWriterOutputView.HEADER_LENGTH, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,expecting,a,specified,number,of,blocks,in,the,channel,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,memory,segment,reader,list,memory,segment,memory,int,num,blocks,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,num,blocks,channel,writer,output,view,wait,for,first,block
ChannelReaderInputView -> public ChannelReaderInputView(BlockChannelReader<MemorySegment> reader, List<MemorySegment> memory, 														int numBlocks, boolean waitForFirstBlock) 	throws IOException;1440967006;Creates a new channel reader that reads from the given channel, expecting a specified_number of blocks in the channel._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException Thrown, if the read requests for the first blocks fail to be_served by the reader.;public ChannelReaderInputView(BlockChannelReader<MemorySegment> reader, List<MemorySegment> memory,_														int numBlocks, boolean waitForFirstBlock)_	throws IOException_	{_		this(reader, memory, numBlocks, ChannelWriterOutputView.HEADER_LENGTH, waitForFirstBlock)__	};creates,a,new,channel,reader,that,reads,from,the,given,channel,expecting,a,specified,number,of,blocks,in,the,channel,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception,thrown,if,the,read,requests,for,the,first,blocks,fail,to,be,served,by,the,reader;public,channel,reader,input,view,block,channel,reader,memory,segment,reader,list,memory,segment,memory,int,num,blocks,boolean,wait,for,first,block,throws,ioexception,this,reader,memory,num,blocks,channel,writer,output,view,wait,for,first,block
ChannelReaderInputView -> ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory,  				int numBlocks, int headerLen, boolean waitForFirstBlock) 	throws IOException;1404155775;Non public constructor to allow subclasses to use this input view with different headers._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param headerLen The length of the header assumed at the beginning of the block. Note that the_{@link #nextSegment(MemorySegment)} method assumes the default header length,_so any subclass changing the header length should override that methods as well._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException;ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, _				int numBlocks, int headerLen, boolean waitForFirstBlock)_	throws IOException_	{_		super(headerLen)__		_		if (reader == null || memory == null) {_			throw new NullPointerException()__		}_		if (memory.isEmpty()) {_			throw new IllegalArgumentException("Empty list of memory segments given.")__		}_		if (numBlocks < 1 && numBlocks != -1) {_			throw new IllegalArgumentException("The number of blocks must be a positive number, or -1, if unknown.")__		}_		_		this.reader = reader__		this.numRequestsRemaining = numBlocks__		this.numSegments = memory.size()__		this.freeMem = new ArrayList<MemorySegment>(this.numSegments)__		_		for (int i = 0_ i < memory.size()_ i++) {_			sendReadRequest(memory.get(i))__		}_		_		if (waitForFirstBlock) {_			advance()__		}_	};non,public,constructor,to,allow,subclasses,to,use,this,input,view,with,different,headers,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,header,len,the,length,of,the,header,assumed,at,the,beginning,of,the,block,note,that,the,link,next,segment,memory,segment,method,assumes,the,default,header,length,so,any,subclass,changing,the,header,length,should,override,that,methods,as,well,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception;channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,int,header,len,boolean,wait,for,first,block,throws,ioexception,super,header,len,if,reader,null,memory,null,throw,new,null,pointer,exception,if,memory,is,empty,throw,new,illegal,argument,exception,empty,list,of,memory,segments,given,if,num,blocks,1,num,blocks,1,throw,new,illegal,argument,exception,the,number,of,blocks,must,be,a,positive,number,or,1,if,unknown,this,reader,reader,this,num,requests,remaining,num,blocks,this,num,segments,memory,size,this,free,mem,new,array,list,memory,segment,this,num,segments,for,int,i,0,i,memory,size,i,send,read,request,memory,get,i,if,wait,for,first,block,advance
ChannelReaderInputView -> ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory,  				int numBlocks, int headerLen, boolean waitForFirstBlock) 	throws IOException;1404986750;Non public constructor to allow subclasses to use this input view with different headers._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param headerLen The length of the header assumed at the beginning of the block. Note that the_{@link #nextSegment(MemorySegment)} method assumes the default header length,_so any subclass changing the header length should override that methods as well._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException;ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, _				int numBlocks, int headerLen, boolean waitForFirstBlock)_	throws IOException_	{_		super(headerLen)__		_		if (reader == null || memory == null) {_			throw new NullPointerException()__		}_		if (memory.isEmpty()) {_			throw new IllegalArgumentException("Empty list of memory segments given.")__		}_		if (numBlocks < 1 && numBlocks != -1) {_			throw new IllegalArgumentException("The number of blocks must be a positive number, or -1, if unknown.")__		}_		_		this.reader = reader__		this.numRequestsRemaining = numBlocks__		this.numSegments = memory.size()__		this.freeMem = new ArrayList<MemorySegment>(this.numSegments)__		_		for (int i = 0_ i < memory.size()_ i++) {_			sendReadRequest(memory.get(i))__		}_		_		if (waitForFirstBlock) {_			advance()__		}_	};non,public,constructor,to,allow,subclasses,to,use,this,input,view,with,different,headers,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,header,len,the,length,of,the,header,assumed,at,the,beginning,of,the,block,note,that,the,link,next,segment,memory,segment,method,assumes,the,default,header,length,so,any,subclass,changing,the,header,length,should,override,that,methods,as,well,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception;channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,int,header,len,boolean,wait,for,first,block,throws,ioexception,super,header,len,if,reader,null,memory,null,throw,new,null,pointer,exception,if,memory,is,empty,throw,new,illegal,argument,exception,empty,list,of,memory,segments,given,if,num,blocks,1,num,blocks,1,throw,new,illegal,argument,exception,the,number,of,blocks,must,be,a,positive,number,or,1,if,unknown,this,reader,reader,this,num,requests,remaining,num,blocks,this,num,segments,memory,size,this,free,mem,new,array,list,memory,segment,this,num,segments,for,int,i,0,i,memory,size,i,send,read,request,memory,get,i,if,wait,for,first,block,advance
ChannelReaderInputView -> ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory,  				int numBlocks, int headerLen, boolean waitForFirstBlock) 	throws IOException;1405088715;Non public constructor to allow subclasses to use this input view with different headers._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param headerLen The length of the header assumed at the beginning of the block. Note that the_{@link #nextSegment(MemorySegment)} method assumes the default header length,_so any subclass changing the header length should override that methods as well._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException;ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, _				int numBlocks, int headerLen, boolean waitForFirstBlock)_	throws IOException_	{_		super(headerLen)__		_		if (reader == null || memory == null) {_			throw new NullPointerException()__		}_		if (memory.isEmpty()) {_			throw new IllegalArgumentException("Empty list of memory segments given.")__		}_		if (numBlocks < 1 && numBlocks != -1) {_			throw new IllegalArgumentException("The number of blocks must be a positive number, or -1, if unknown.")__		}_		_		this.reader = reader__		this.numRequestsRemaining = numBlocks__		this.numSegments = memory.size()__		this.freeMem = new ArrayList<MemorySegment>(this.numSegments)__		_		for (int i = 0_ i < memory.size()_ i++) {_			sendReadRequest(memory.get(i))__		}_		_		if (waitForFirstBlock) {_			advance()__		}_	};non,public,constructor,to,allow,subclasses,to,use,this,input,view,with,different,headers,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,header,len,the,length,of,the,header,assumed,at,the,beginning,of,the,block,note,that,the,link,next,segment,memory,segment,method,assumes,the,default,header,length,so,any,subclass,changing,the,header,length,should,override,that,methods,as,well,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception;channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,int,header,len,boolean,wait,for,first,block,throws,ioexception,super,header,len,if,reader,null,memory,null,throw,new,null,pointer,exception,if,memory,is,empty,throw,new,illegal,argument,exception,empty,list,of,memory,segments,given,if,num,blocks,1,num,blocks,1,throw,new,illegal,argument,exception,the,number,of,blocks,must,be,a,positive,number,or,1,if,unknown,this,reader,reader,this,num,requests,remaining,num,blocks,this,num,segments,memory,size,this,free,mem,new,array,list,memory,segment,this,num,segments,for,int,i,0,i,memory,size,i,send,read,request,memory,get,i,if,wait,for,first,block,advance
ChannelReaderInputView -> ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory,  				int numBlocks, int headerLen, boolean waitForFirstBlock) 	throws IOException;1411473561;Non public constructor to allow subclasses to use this input view with different headers._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param headerLen The length of the header assumed at the beginning of the block. Note that the_{@link #nextSegment(MemorySegment)} method assumes the default header length,_so any subclass changing the header length should override that methods as well._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException;ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, _				int numBlocks, int headerLen, boolean waitForFirstBlock)_	throws IOException_	{_		super(headerLen)__		_		if (reader == null || memory == null) {_			throw new NullPointerException()__		}_		if (memory.isEmpty()) {_			throw new IllegalArgumentException("Empty list of memory segments given.")__		}_		if (numBlocks < 1 && numBlocks != -1) {_			throw new IllegalArgumentException("The number of blocks must be a positive number, or -1, if unknown.")__		}_		_		this.reader = reader__		this.numRequestsRemaining = numBlocks__		this.numSegments = memory.size()__		this.freeMem = new ArrayList<MemorySegment>(this.numSegments)__		_		for (int i = 0_ i < memory.size()_ i++) {_			sendReadRequest(memory.get(i))__		}_		_		if (waitForFirstBlock) {_			advance()__		}_	};non,public,constructor,to,allow,subclasses,to,use,this,input,view,with,different,headers,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,header,len,the,length,of,the,header,assumed,at,the,beginning,of,the,block,note,that,the,link,next,segment,memory,segment,method,assumes,the,default,header,length,so,any,subclass,changing,the,header,length,should,override,that,methods,as,well,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception;channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,int,header,len,boolean,wait,for,first,block,throws,ioexception,super,header,len,if,reader,null,memory,null,throw,new,null,pointer,exception,if,memory,is,empty,throw,new,illegal,argument,exception,empty,list,of,memory,segments,given,if,num,blocks,1,num,blocks,1,throw,new,illegal,argument,exception,the,number,of,blocks,must,be,a,positive,number,or,1,if,unknown,this,reader,reader,this,num,requests,remaining,num,blocks,this,num,segments,memory,size,this,free,mem,new,array,list,memory,segment,this,num,segments,for,int,i,0,i,memory,size,i,send,read,request,memory,get,i,if,wait,for,first,block,advance
ChannelReaderInputView -> ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory,  				int numBlocks, int headerLen, boolean waitForFirstBlock) 	throws IOException;1412159138;Non public constructor to allow subclasses to use this input view with different headers._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param headerLen The length of the header assumed at the beginning of the block. Note that the_{@link #nextSegment(org.apache.flink.core.memory.MemorySegment)} method assumes the default header length,_so any subclass changing the header length should override that methods as well._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException;ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, _				int numBlocks, int headerLen, boolean waitForFirstBlock)_	throws IOException_	{_		super(headerLen)__		_		if (reader == null || memory == null) {_			throw new NullPointerException()__		}_		if (memory.isEmpty()) {_			throw new IllegalArgumentException("Empty list of memory segments given.")__		}_		if (numBlocks < 1 && numBlocks != -1) {_			throw new IllegalArgumentException("The number of blocks must be a positive number, or -1, if unknown.")__		}_		_		this.reader = reader__		this.numRequestsRemaining = numBlocks__		this.numSegments = memory.size()__		this.freeMem = new ArrayList<MemorySegment>(this.numSegments)__		_		for (int i = 0_ i < memory.size()_ i++) {_			sendReadRequest(memory.get(i))__		}_		_		if (waitForFirstBlock) {_			advance()__		}_	};non,public,constructor,to,allow,subclasses,to,use,this,input,view,with,different,headers,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,header,len,the,length,of,the,header,assumed,at,the,beginning,of,the,block,note,that,the,link,next,segment,org,apache,flink,core,memory,memory,segment,method,assumes,the,default,header,length,so,any,subclass,changing,the,header,length,should,override,that,methods,as,well,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception;channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,int,header,len,boolean,wait,for,first,block,throws,ioexception,super,header,len,if,reader,null,memory,null,throw,new,null,pointer,exception,if,memory,is,empty,throw,new,illegal,argument,exception,empty,list,of,memory,segments,given,if,num,blocks,1,num,blocks,1,throw,new,illegal,argument,exception,the,number,of,blocks,must,be,a,positive,number,or,1,if,unknown,this,reader,reader,this,num,requests,remaining,num,blocks,this,num,segments,memory,size,this,free,mem,new,array,list,memory,segment,this,num,segments,for,int,i,0,i,memory,size,i,send,read,request,memory,get,i,if,wait,for,first,block,advance
ChannelReaderInputView -> ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory,  				int numBlocks, int headerLen, boolean waitForFirstBlock) 	throws IOException;1415382319;Non public constructor to allow subclasses to use this input view with different headers._<p>_WARNING: The reader will lock if the number of blocks given here is actually lower than_the actual number of blocks in the channel.__@param reader The reader that reads the data from disk back into memory._@param memory A list of memory segments that the reader uses for reading the data in. If the_list contains more than one segment, the reader will asynchronously pre-fetch_blocks ahead._@param numBlocks The number of blocks this channel will read. If this value is_given, the reader avoids issuing pre-fetch requests for blocks_beyond the channel size._@param headerLen The length of the header assumed at the beginning of the block. Note that the_{@link #nextSegment(org.apache.flink.core.memory.MemorySegment)} method assumes the default header length,_so any subclass changing the header length should override that methods as well._@param waitForFirstBlock A flag indicating weather this constructor call should block_until the first block has returned from the asynchronous I/O reader.__@throws IOException;ChannelReaderInputView(BlockChannelReader reader, List<MemorySegment> memory, _				int numBlocks, int headerLen, boolean waitForFirstBlock)_	throws IOException_	{_		super(headerLen)__		_		if (reader == null || memory == null) {_			throw new NullPointerException()__		}_		if (memory.isEmpty()) {_			throw new IllegalArgumentException("Empty list of memory segments given.")__		}_		if (numBlocks < 1 && numBlocks != -1) {_			throw new IllegalArgumentException("The number of blocks must be a positive number, or -1, if unknown.")__		}_		_		this.reader = reader__		this.numRequestsRemaining = numBlocks__		this.numSegments = memory.size()__		this.freeMem = new ArrayList<MemorySegment>(this.numSegments)__		_		for (int i = 0_ i < memory.size()_ i++) {_			sendReadRequest(memory.get(i))__		}_		_		if (waitForFirstBlock) {_			advance()__		}_	};non,public,constructor,to,allow,subclasses,to,use,this,input,view,with,different,headers,p,warning,the,reader,will,lock,if,the,number,of,blocks,given,here,is,actually,lower,than,the,actual,number,of,blocks,in,the,channel,param,reader,the,reader,that,reads,the,data,from,disk,back,into,memory,param,memory,a,list,of,memory,segments,that,the,reader,uses,for,reading,the,data,in,if,the,list,contains,more,than,one,segment,the,reader,will,asynchronously,pre,fetch,blocks,ahead,param,num,blocks,the,number,of,blocks,this,channel,will,read,if,this,value,is,given,the,reader,avoids,issuing,pre,fetch,requests,for,blocks,beyond,the,channel,size,param,header,len,the,length,of,the,header,assumed,at,the,beginning,of,the,block,note,that,the,link,next,segment,org,apache,flink,core,memory,memory,segment,method,assumes,the,default,header,length,so,any,subclass,changing,the,header,length,should,override,that,methods,as,well,param,wait,for,first,block,a,flag,indicating,weather,this,constructor,call,should,block,until,the,first,block,has,returned,from,the,asynchronous,i,o,reader,throws,ioexception;channel,reader,input,view,block,channel,reader,reader,list,memory,segment,memory,int,num,blocks,int,header,len,boolean,wait,for,first,block,throws,ioexception,super,header,len,if,reader,null,memory,null,throw,new,null,pointer,exception,if,memory,is,empty,throw,new,illegal,argument,exception,empty,list,of,memory,segments,given,if,num,blocks,1,num,blocks,1,throw,new,illegal,argument,exception,the,number,of,blocks,must,be,a,positive,number,or,1,if,unknown,this,reader,reader,this,num,requests,remaining,num,blocks,this,num,segments,memory,size,this,free,mem,new,array,list,memory,segment,this,num,segments,for,int,i,0,i,memory,size,i,send,read,request,memory,get,i,if,wait,for,first,block,advance
