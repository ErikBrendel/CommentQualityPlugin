# id;timestamp;commentText;codeText;commentWords;codeWords
SpanningRecordSerializer -> @Override 	public SerializationResult copyToBufferBuilder(BufferBuilder targetBuffer);1537529044;Copies an intermediate data serialization buffer into the target BufferBuilder.__@param targetBuffer the target BufferBuilder to copy to_@return how much information was written to the target buffer and_whether this buffer is full;@Override_	public SerializationResult copyToBufferBuilder(BufferBuilder targetBuffer) {_		boolean mustCommit = false__		if (lengthBuffer.hasRemaining()) {_			targetBuffer.append(lengthBuffer)__			mustCommit = true__		}__		if (dataBuffer.hasRemaining()) {_			targetBuffer.append(dataBuffer)__			mustCommit = true__		}__		if (mustCommit) {_			targetBuffer.commit()__		}__		return getSerializationResult(targetBuffer)__	};copies,an,intermediate,data,serialization,buffer,into,the,target,buffer,builder,param,target,buffer,the,target,buffer,builder,to,copy,to,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full;override,public,serialization,result,copy,to,buffer,builder,buffer,builder,target,buffer,boolean,must,commit,false,if,length,buffer,has,remaining,target,buffer,append,length,buffer,must,commit,true,if,data,buffer,has,remaining,target,buffer,append,data,buffer,must,commit,true,if,must,commit,target,buffer,commit,return,get,serialization,result,target,buffer
SpanningRecordSerializer -> @Override 	public SerializationResult copyToBufferBuilder(BufferBuilder targetBuffer);1539781044;Copies an intermediate data serialization buffer into the target BufferBuilder.__@param targetBuffer the target BufferBuilder to copy to_@return how much information was written to the target buffer and_whether this buffer is full;@Override_	public SerializationResult copyToBufferBuilder(BufferBuilder targetBuffer) {_		targetBuffer.append(lengthBuffer)__		targetBuffer.append(dataBuffer)__		targetBuffer.commit()___		return getSerializationResult(targetBuffer)__	};copies,an,intermediate,data,serialization,buffer,into,the,target,buffer,builder,param,target,buffer,the,target,buffer,builder,to,copy,to,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full;override,public,serialization,result,copy,to,buffer,builder,buffer,builder,target,buffer,target,buffer,append,length,buffer,target,buffer,append,data,buffer,target,buffer,commit,return,get,serialization,result,target,buffer
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1421050512;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1421838095;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1421838095;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1432760698;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1436966346;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1463939897;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1466072697;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1469529015;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1477389806;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1477582418;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1477591529;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1477923124;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1477937801;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1483975361;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1485176584;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1489060856;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1509646806;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (this.targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = this.limit - this.position__		int toCopy = Math.min(needed, available)___		this.targetBuffer.getMemorySegment().put(this.position, source, toCopy)___		this.position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,this,target,buffer,null,return,int,needed,source,remaining,int,available,this,limit,this,position,int,to,copy,math,min,needed,available,this,target,buffer,get,memory,segment,put,this,position,source,to,copy,this,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1515408360;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (targetBuffer == null) {_			return__		}__		int needed = source.remaining()__		int available = limit - position__		int toCopy = Math.min(needed, available)___		targetBuffer.getMemorySegment().put(position, source, toCopy)___		position += toCopy__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,target,buffer,null,return,int,needed,source,remaining,int,available,limit,position,int,to,copy,math,min,needed,available,target,buffer,get,memory,segment,put,position,source,to,copy,position,to,copy
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1515408360;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (targetBuffer == null) {_			return__		}_		targetBuffer.append(source)__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,target,buffer,null,return,target,buffer,append,source
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1515433627;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (targetBuffer == null) {_			return__		}_		targetBuffer.append(source)__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,target,buffer,null,return,target,buffer,append,source
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1517489696;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (targetBuffer == null) {_			return__		}_		targetBuffer.append(source)__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,target,buffer,null,return,target,buffer,append,source
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1519039268;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (targetBuffer == null) {_			return__		}_		targetBuffer.append(source)__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,target,buffer,null,return,target,buffer,append,source
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1519039270;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (targetBuffer == null) {_			return__		}_		targetBuffer.append(source)__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,target,buffer,null,return,target,buffer,append,source
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1519039274;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (targetBuffer == null) {_			return__		}_		targetBuffer.append(source)__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,target,buffer,null,return,target,buffer,append,source
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1519039287;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (targetBuffer == null) {_			return__		}_		targetBuffer.append(source)__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,target,buffer,null,return,target,buffer,append,source
SpanningRecordSerializer -> private void copyToTargetBufferFrom(ByteBuffer source);1519039301;Copies as many bytes as possible from the given {@link ByteBuffer} to the {@link MemorySegment} of the target_{@link Buffer} and advances the current position by the number of written bytes.__@param source the {@link ByteBuffer} to copy data from;private void copyToTargetBufferFrom(ByteBuffer source) {_		if (targetBuffer == null) {_			return__		}_		targetBuffer.append(source)__	};copies,as,many,bytes,as,possible,from,the,given,link,byte,buffer,to,the,link,memory,segment,of,the,target,link,buffer,and,advances,the,current,position,by,the,number,of,written,bytes,param,source,the,link,byte,buffer,to,copy,data,from;private,void,copy,to,target,buffer,from,byte,buffer,source,if,target,buffer,null,return,target,buffer,append,source
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1483975361;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full_@throws IOException;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (this.dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		this.serializationBuffer.clear()__		this.lengthBuffer.clear()___		_		record.write(this.serializationBuffer)___		int len = this.serializationBuffer.length()__		this.lengthBuffer.putInt(0, len)__		_		if (numBytesOut != null) {_			numBytesOut.inc(len)__		}__		this.dataBuffer = this.serializationBuffer.wrapAsByteBuffer()___		_		copyToTargetBufferFrom(this.lengthBuffer)__		copyToTargetBufferFrom(this.dataBuffer)___		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full,throws,ioexception;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,this,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,this,serialization,buffer,clear,this,length,buffer,clear,record,write,this,serialization,buffer,int,len,this,serialization,buffer,length,this,length,buffer,put,int,0,len,if,num,bytes,out,null,num,bytes,out,inc,len,this,data,buffer,this,serialization,buffer,wrap,as,byte,buffer,copy,to,target,buffer,from,this,length,buffer,copy,to,target,buffer,from,this,data,buffer,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1485176584;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full_@throws IOException;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (this.dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		this.serializationBuffer.clear()__		this.lengthBuffer.clear()___		_		record.write(this.serializationBuffer)___		int len = this.serializationBuffer.length()__		this.lengthBuffer.putInt(0, len)___		this.dataBuffer = this.serializationBuffer.wrapAsByteBuffer()___		_		copyToTargetBufferFrom(this.lengthBuffer)__		copyToTargetBufferFrom(this.dataBuffer)___		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full,throws,ioexception;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,this,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,this,serialization,buffer,clear,this,length,buffer,clear,record,write,this,serialization,buffer,int,len,this,serialization,buffer,length,this,length,buffer,put,int,0,len,this,data,buffer,this,serialization,buffer,wrap,as,byte,buffer,copy,to,target,buffer,from,this,length,buffer,copy,to,target,buffer,from,this,data,buffer,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1489060856;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full_@throws IOException;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (this.dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		this.serializationBuffer.clear()__		this.lengthBuffer.clear()___		_		record.write(this.serializationBuffer)___		int len = this.serializationBuffer.length()__		this.lengthBuffer.putInt(0, len)___		this.dataBuffer = this.serializationBuffer.wrapAsByteBuffer()___		_		copyToTargetBufferFrom(this.lengthBuffer)__		copyToTargetBufferFrom(this.dataBuffer)___		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full,throws,ioexception;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,this,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,this,serialization,buffer,clear,this,length,buffer,clear,record,write,this,serialization,buffer,int,len,this,serialization,buffer,length,this,length,buffer,put,int,0,len,this,data,buffer,this,serialization,buffer,wrap,as,byte,buffer,copy,to,target,buffer,from,this,length,buffer,copy,to,target,buffer,from,this,data,buffer,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1509646806;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full_@throws IOException;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (this.dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		this.serializationBuffer.clear()__		this.lengthBuffer.clear()___		_		record.write(this.serializationBuffer)___		int len = this.serializationBuffer.length()__		this.lengthBuffer.putInt(0, len)___		this.dataBuffer = this.serializationBuffer.wrapAsByteBuffer()___		_		copyToTargetBufferFrom(this.lengthBuffer)__		copyToTargetBufferFrom(this.dataBuffer)___		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full,throws,ioexception;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,this,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,this,serialization,buffer,clear,this,length,buffer,clear,record,write,this,serialization,buffer,int,len,this,serialization,buffer,length,this,length,buffer,put,int,0,len,this,data,buffer,this,serialization,buffer,wrap,as,byte,buffer,copy,to,target,buffer,from,this,length,buffer,copy,to,target,buffer,from,this,data,buffer,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1515408360;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full_@throws IOException;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		serializationBuffer.clear()__		lengthBuffer.clear()___		_		record.write(serializationBuffer)___		int len = serializationBuffer.length()__		lengthBuffer.putInt(0, len)___		dataBuffer = serializationBuffer.wrapAsByteBuffer()___		_		copyToTargetBufferFrom(lengthBuffer)__		copyToTargetBufferFrom(dataBuffer)___		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full,throws,ioexception;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,serialization,buffer,clear,length,buffer,clear,record,write,serialization,buffer,int,len,serialization,buffer,length,length,buffer,put,int,0,len,data,buffer,serialization,buffer,wrap,as,byte,buffer,copy,to,target,buffer,from,length,buffer,copy,to,target,buffer,from,data,buffer,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1515408360;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full_@throws IOException;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		serializationBuffer.clear()__		lengthBuffer.clear()___		_		record.write(serializationBuffer)___		int len = serializationBuffer.length()__		lengthBuffer.putInt(0, len)___		dataBuffer = serializationBuffer.wrapAsByteBuffer()___		_		copyToTargetBufferFrom(lengthBuffer)__		copyToTargetBufferFrom(dataBuffer)___		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full,throws,ioexception;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,serialization,buffer,clear,length,buffer,clear,record,write,serialization,buffer,int,len,serialization,buffer,length,length,buffer,put,int,0,len,data,buffer,serialization,buffer,wrap,as,byte,buffer,copy,to,target,buffer,from,length,buffer,copy,to,target,buffer,from,data,buffer,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1515433627;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full_@throws IOException;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		serializationBuffer.clear()__		lengthBuffer.clear()___		_		record.write(serializationBuffer)___		int len = serializationBuffer.length()__		lengthBuffer.putInt(0, len)___		dataBuffer = serializationBuffer.wrapAsByteBuffer()___		_		copyToTargetBufferFrom(lengthBuffer)__		copyToTargetBufferFrom(dataBuffer)___		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full,throws,ioexception;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,serialization,buffer,clear,length,buffer,clear,record,write,serialization,buffer,int,len,serialization,buffer,length,length,buffer,put,int,0,len,data,buffer,serialization,buffer,wrap,as,byte,buffer,copy,to,target,buffer,from,length,buffer,copy,to,target,buffer,from,data,buffer,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1517489696;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		serializationBuffer.clear()__		lengthBuffer.clear()___		_		record.write(serializationBuffer)___		int len = serializationBuffer.length()__		lengthBuffer.putInt(0, len)___		dataBuffer = serializationBuffer.wrapAsByteBuffer()___		_		copyToTargetBufferFrom(lengthBuffer)__		copyToTargetBufferFrom(dataBuffer)___		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,serialization,buffer,clear,length,buffer,clear,record,write,serialization,buffer,int,len,serialization,buffer,length,length,buffer,put,int,0,len,data,buffer,serialization,buffer,wrap,as,byte,buffer,copy,to,target,buffer,from,length,buffer,copy,to,target,buffer,from,data,buffer,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1519039268;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		serializationBuffer.clear()__		lengthBuffer.clear()___		_		record.write(serializationBuffer)___		int len = serializationBuffer.length()__		lengthBuffer.putInt(0, len)___		dataBuffer = serializationBuffer.wrapAsByteBuffer()___		_		copyToTargetBufferFrom(lengthBuffer)__		copyToTargetBufferFrom(dataBuffer)___		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,serialization,buffer,clear,length,buffer,clear,record,write,serialization,buffer,int,len,serialization,buffer,length,length,buffer,put,int,0,len,data,buffer,serialization,buffer,wrap,as,byte,buffer,copy,to,target,buffer,from,length,buffer,copy,to,target,buffer,from,data,buffer,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1519039270;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		serializationBuffer.clear()__		lengthBuffer.clear()___		_		record.write(serializationBuffer)___		int len = serializationBuffer.length()__		lengthBuffer.putInt(0, len)___		dataBuffer = serializationBuffer.wrapAsByteBuffer()___		_		copyToTargetBufferFrom(lengthBuffer)__		copyToTargetBufferFrom(dataBuffer)___		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,serialization,buffer,clear,length,buffer,clear,record,write,serialization,buffer,int,len,serialization,buffer,length,length,buffer,put,int,0,len,data,buffer,serialization,buffer,wrap,as,byte,buffer,copy,to,target,buffer,from,length,buffer,copy,to,target,buffer,from,data,buffer,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1519039274;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		serializationBuffer.clear()__		lengthBuffer.clear()___		_		record.write(serializationBuffer)___		int len = serializationBuffer.length()__		lengthBuffer.putInt(0, len)___		dataBuffer = serializationBuffer.wrapAsByteBuffer()___		_		copyToTargetBufferFrom(lengthBuffer)__		copyToTargetBufferFrom(dataBuffer)___		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,serialization,buffer,clear,length,buffer,clear,record,write,serialization,buffer,int,len,serialization,buffer,length,length,buffer,put,int,0,len,data,buffer,serialization,buffer,wrap,as,byte,buffer,copy,to,target,buffer,from,length,buffer,copy,to,target,buffer,from,data,buffer,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1519039287;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		serializationBuffer.clear()__		lengthBuffer.clear()___		_		record.write(serializationBuffer)___		int len = serializationBuffer.length()__		lengthBuffer.putInt(0, len)___		dataBuffer = serializationBuffer.wrapAsByteBuffer()___		_		copyToTargetBufferFrom(lengthBuffer)__		copyToTargetBufferFrom(dataBuffer)___		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,serialization,buffer,clear,length,buffer,clear,record,write,serialization,buffer,int,len,serialization,buffer,length,length,buffer,put,int,0,len,data,buffer,serialization,buffer,wrap,as,byte,buffer,copy,to,target,buffer,from,length,buffer,copy,to,target,buffer,from,data,buffer,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1519039301;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		serializationBuffer.clear()__		lengthBuffer.clear()___		_		record.write(serializationBuffer)___		int len = serializationBuffer.length()__		lengthBuffer.putInt(0, len)___		dataBuffer = serializationBuffer.wrapAsByteBuffer()___		_		copyToTargetBufferFrom(lengthBuffer)__		copyToTargetBufferFrom(dataBuffer)___		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,serialization,buffer,clear,length,buffer,clear,record,write,serialization,buffer,int,len,serialization,buffer,length,length,buffer,put,int,0,len,data,buffer,serialization,buffer,wrap,as,byte,buffer,copy,to,target,buffer,from,length,buffer,copy,to,target,buffer,from,data,buffer,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1519049124;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		serializationBuffer.clear()__		lengthBuffer.clear()___		_		record.write(serializationBuffer)___		int len = serializationBuffer.length()__		lengthBuffer.putInt(0, len)___		dataBuffer = serializationBuffer.wrapAsByteBuffer()___		_		if (targetBuffer != null) {_			targetBuffer.append(lengthBuffer)__			targetBuffer.append(dataBuffer)__			targetBuffer.commit()__		}__		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,serialization,buffer,clear,length,buffer,clear,record,write,serialization,buffer,int,len,serialization,buffer,length,length,buffer,put,int,0,len,data,buffer,serialization,buffer,wrap,as,byte,buffer,if,target,buffer,null,target,buffer,append,length,buffer,target,buffer,append,data,buffer,target,buffer,commit,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public SerializationResult addRecord(T record) throws IOException;1519049134;Serializes the complete record to an intermediate data serialization_buffer and starts copying it to the target buffer (if available).__@param record the record to serialize_@return how much information was written to the target buffer and_whether this buffer is full;@Override_	public SerializationResult addRecord(T record) throws IOException {_		if (CHECKED) {_			if (dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		serializationBuffer.clear()__		lengthBuffer.clear()___		_		record.write(serializationBuffer)___		int len = serializationBuffer.length()__		lengthBuffer.putInt(0, len)___		dataBuffer = serializationBuffer.wrapAsByteBuffer()___		_		if (targetBuffer != null) {_			targetBuffer.append(lengthBuffer)__			targetBuffer.append(dataBuffer)__			targetBuffer.commit()__		}__		return getSerializationResult()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,and,starts,copying,it,to,the,target,buffer,if,available,param,record,the,record,to,serialize,return,how,much,information,was,written,to,the,target,buffer,and,whether,this,buffer,is,full;override,public,serialization,result,add,record,t,record,throws,ioexception,if,checked,if,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,serialization,buffer,clear,length,buffer,clear,record,write,serialization,buffer,int,len,serialization,buffer,length,length,buffer,put,int,0,len,data,buffer,serialization,buffer,wrap,as,byte,buffer,if,target,buffer,null,target,buffer,append,length,buffer,target,buffer,append,data,buffer,target,buffer,commit,return,get,serialization,result
SpanningRecordSerializer -> @Override 	public void serializeRecord(T record) throws IOException;1537529044;Serializes the complete record to an intermediate data serialization buffer.__@param record the record to serialize;@Override_	public void serializeRecord(T record) throws IOException {_		if (CHECKED) {_			if (dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		serializationBuffer.clear()__		lengthBuffer.clear()___		_		record.write(serializationBuffer)___		int len = serializationBuffer.length()__		lengthBuffer.putInt(0, len)___		dataBuffer = serializationBuffer.wrapAsByteBuffer()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,param,record,the,record,to,serialize;override,public,void,serialize,record,t,record,throws,ioexception,if,checked,if,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,serialization,buffer,clear,length,buffer,clear,record,write,serialization,buffer,int,len,serialization,buffer,length,length,buffer,put,int,0,len,data,buffer,serialization,buffer,wrap,as,byte,buffer
SpanningRecordSerializer -> @Override 	public void serializeRecord(T record) throws IOException;1539781044;Serializes the complete record to an intermediate data serialization buffer.__@param record the record to serialize;@Override_	public void serializeRecord(T record) throws IOException {_		if (CHECKED) {_			if (dataBuffer.hasRemaining()) {_				throw new IllegalStateException("Pending serialization of previous record.")__			}_		}__		serializationBuffer.clear()__		lengthBuffer.clear()___		_		record.write(serializationBuffer)___		int len = serializationBuffer.length()__		lengthBuffer.putInt(0, len)___		dataBuffer = serializationBuffer.wrapAsByteBuffer()__	};serializes,the,complete,record,to,an,intermediate,data,serialization,buffer,param,record,the,record,to,serialize;override,public,void,serialize,record,t,record,throws,ioexception,if,checked,if,data,buffer,has,remaining,throw,new,illegal,state,exception,pending,serialization,of,previous,record,serialization,buffer,clear,length,buffer,clear,record,write,serialization,buffer,int,len,serialization,buffer,length,length,buffer,put,int,0,len,data,buffer,serialization,buffer,wrap,as,byte,buffer
