# id;timestamp;commentText;codeText;commentWords;codeWords
EmbeddedLeaderService -> void addContender(EmbeddedLeaderElectionService service, LeaderContender contender);1493975155;Callback from leader contenders when they start their service.;void addContender(EmbeddedLeaderElectionService service, LeaderContender contender) {_		synchronized (lock) {_			checkState(!shutdown, "leader election service is shut down")__			checkState(!service.running, "leader election service is already started")___			try {_				if (!allLeaderContenders.add(service)) {_					throw new IllegalStateException("leader election service was added to this service multiple times")__				}__				service.contender = contender__				service.running = true___				updateLeader()__			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,start,their,service;void,add,contender,embedded,leader,election,service,service,leader,contender,contender,synchronized,lock,check,state,shutdown,leader,election,service,is,shut,down,check,state,service,running,leader,election,service,is,already,started,try,if,all,leader,contenders,add,service,throw,new,illegal,state,exception,leader,election,service,was,added,to,this,service,multiple,times,service,contender,contender,service,running,true,update,leader,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> void addContender(EmbeddedLeaderElectionService service, LeaderContender contender);1519406527;Callback from leader contenders when they start their service.;void addContender(EmbeddedLeaderElectionService service, LeaderContender contender) {_		synchronized (lock) {_			checkState(!shutdown, "leader election service is shut down")__			checkState(!service.running, "leader election service is already started")___			try {_				if (!allLeaderContenders.add(service)) {_					throw new IllegalStateException("leader election service was added to this service multiple times")__				}__				service.contender = contender__				service.running = true___				updateLeader()__			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,start,their,service;void,add,contender,embedded,leader,election,service,service,leader,contender,contender,synchronized,lock,check,state,shutdown,leader,election,service,is,shut,down,check,state,service,running,leader,election,service,is,already,started,try,if,all,leader,contenders,add,service,throw,new,illegal,state,exception,leader,election,service,was,added,to,this,service,multiple,times,service,contender,contender,service,running,true,update,leader,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> void addContender(EmbeddedLeaderElectionService service, LeaderContender contender);1522249273;Callback from leader contenders when they start their service.;void addContender(EmbeddedLeaderElectionService service, LeaderContender contender) {_		synchronized (lock) {_			checkState(!shutdown, "leader election service is shut down")__			checkState(!service.running, "leader election service is already started")___			try {_				if (!allLeaderContenders.add(service)) {_					throw new IllegalStateException("leader election service was added to this service multiple times")__				}__				service.contender = contender__				service.running = true___				updateLeader()__			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,start,their,service;void,add,contender,embedded,leader,election,service,service,leader,contender,contender,synchronized,lock,check,state,shutdown,leader,election,service,is,shut,down,check,state,service,running,leader,election,service,is,already,started,try,if,all,leader,contenders,add,service,throw,new,illegal,state,exception,leader,election,service,was,added,to,this,service,multiple,times,service,contender,contender,service,running,true,update,leader,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> void addContender(EmbeddedLeaderElectionService service, LeaderContender contender);1528982883;Callback from leader contenders when they start their service.;void addContender(EmbeddedLeaderElectionService service, LeaderContender contender) {_		synchronized (lock) {_			checkState(!shutdown, "leader election service is shut down")__			checkState(!service.running, "leader election service is already started")___			try {_				if (!allLeaderContenders.add(service)) {_					throw new IllegalStateException("leader election service was added to this service multiple times")__				}__				service.contender = contender__				service.running = true___				updateLeader()__			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,start,their,service;void,add,contender,embedded,leader,election,service,service,leader,contender,contender,synchronized,lock,check,state,shutdown,leader,election,service,is,shut,down,check,state,service,running,leader,election,service,is,already,started,try,if,all,leader,contenders,add,service,throw,new,illegal,state,exception,leader,election,service,was,added,to,this,service,multiple,times,service,contender,contender,service,running,true,update,leader,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> void removeContender(EmbeddedLeaderElectionService service);1493975155;Callback from leader contenders when they stop their service.;void removeContender(EmbeddedLeaderElectionService service) {_		synchronized (lock) {_			_			if (!service.running || shutdown) {_				return__			}__			try {_				if (!allLeaderContenders.remove(service)) {_					throw new IllegalStateException("leader election service does not belong to this service")__				}__				_				service.contender = null__				service.running = false__				service.isLeader = false___				_				if (currentLeaderConfirmed == service) {_					currentLeaderConfirmed = null__					currentLeaderSessionId = null__					currentLeaderAddress = null__				}_				if (currentLeaderProposed == service) {_					currentLeaderProposed = null__					currentLeaderSessionId = null__				}__				updateLeader()__			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,stop,their,service;void,remove,contender,embedded,leader,election,service,service,synchronized,lock,if,service,running,shutdown,return,try,if,all,leader,contenders,remove,service,throw,new,illegal,state,exception,leader,election,service,does,not,belong,to,this,service,service,contender,null,service,running,false,service,is,leader,false,if,current,leader,confirmed,service,current,leader,confirmed,null,current,leader,session,id,null,current,leader,address,null,if,current,leader,proposed,service,current,leader,proposed,null,current,leader,session,id,null,update,leader,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> void removeContender(EmbeddedLeaderElectionService service);1519406527;Callback from leader contenders when they stop their service.;void removeContender(EmbeddedLeaderElectionService service) {_		synchronized (lock) {_			_			if (!service.running || shutdown) {_				return__			}__			try {_				if (!allLeaderContenders.remove(service)) {_					throw new IllegalStateException("leader election service does not belong to this service")__				}__				_				service.contender = null__				service.running = false__				service.isLeader = false___				_				if (currentLeaderConfirmed == service) {_					currentLeaderConfirmed = null__					currentLeaderSessionId = null__					currentLeaderAddress = null__				}_				if (currentLeaderProposed == service) {_					currentLeaderProposed = null__					currentLeaderSessionId = null__				}__				updateLeader()__			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,stop,their,service;void,remove,contender,embedded,leader,election,service,service,synchronized,lock,if,service,running,shutdown,return,try,if,all,leader,contenders,remove,service,throw,new,illegal,state,exception,leader,election,service,does,not,belong,to,this,service,service,contender,null,service,running,false,service,is,leader,false,if,current,leader,confirmed,service,current,leader,confirmed,null,current,leader,session,id,null,current,leader,address,null,if,current,leader,proposed,service,current,leader,proposed,null,current,leader,session,id,null,update,leader,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> void removeContender(EmbeddedLeaderElectionService service);1522249273;Callback from leader contenders when they stop their service.;void removeContender(EmbeddedLeaderElectionService service) {_		synchronized (lock) {_			_			if (!service.running || shutdown) {_				return__			}__			try {_				if (!allLeaderContenders.remove(service)) {_					throw new IllegalStateException("leader election service does not belong to this service")__				}__				_				service.contender = null__				service.running = false__				service.isLeader = false___				_				if (currentLeaderConfirmed == service) {_					currentLeaderConfirmed = null__					currentLeaderSessionId = null__					currentLeaderAddress = null__				}_				if (currentLeaderProposed == service) {_					currentLeaderProposed = null__					currentLeaderSessionId = null__				}__				updateLeader()__			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,stop,their,service;void,remove,contender,embedded,leader,election,service,service,synchronized,lock,if,service,running,shutdown,return,try,if,all,leader,contenders,remove,service,throw,new,illegal,state,exception,leader,election,service,does,not,belong,to,this,service,service,contender,null,service,running,false,service,is,leader,false,if,current,leader,confirmed,service,current,leader,confirmed,null,current,leader,session,id,null,current,leader,address,null,if,current,leader,proposed,service,current,leader,proposed,null,current,leader,session,id,null,update,leader,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> void removeContender(EmbeddedLeaderElectionService service);1528982883;Callback from leader contenders when they stop their service.;void removeContender(EmbeddedLeaderElectionService service) {_		synchronized (lock) {_			_			if (!service.running || shutdown) {_				return__			}__			try {_				if (!allLeaderContenders.remove(service)) {_					throw new IllegalStateException("leader election service does not belong to this service")__				}__				_				service.contender = null__				service.running = false__				service.isLeader = false___				_				if (currentLeaderConfirmed == service) {_					currentLeaderConfirmed = null__					currentLeaderSessionId = null__					currentLeaderAddress = null__				}_				if (currentLeaderProposed == service) {_					currentLeaderProposed = null__					currentLeaderSessionId = null__				}__				updateLeader()__			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,stop,their,service;void,remove,contender,embedded,leader,election,service,service,synchronized,lock,if,service,running,shutdown,return,try,if,all,leader,contenders,remove,service,throw,new,illegal,state,exception,leader,election,service,does,not,belong,to,this,service,service,contender,null,service,running,false,service,is,leader,false,if,current,leader,confirmed,service,current,leader,confirmed,null,current,leader,session,id,null,current,leader,address,null,if,current,leader,proposed,service,current,leader,proposed,null,current,leader,session,id,null,update,leader,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> private void addContender(EmbeddedLeaderElectionService service, LeaderContender contender);1548866156;Callback from leader contenders when they start their service.;private void addContender(EmbeddedLeaderElectionService service, LeaderContender contender) {_		synchronized (lock) {_			checkState(!shutdown, "leader election service is shut down")__			checkState(!service.running, "leader election service is already started")___			try {_				if (!allLeaderContenders.add(service)) {_					throw new IllegalStateException("leader election service was added to this service multiple times")__				}__				service.contender = contender__				service.running = true___				updateLeader()__			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,start,their,service;private,void,add,contender,embedded,leader,election,service,service,leader,contender,contender,synchronized,lock,check,state,shutdown,leader,election,service,is,shut,down,check,state,service,running,leader,election,service,is,already,started,try,if,all,leader,contenders,add,service,throw,new,illegal,state,exception,leader,election,service,was,added,to,this,service,multiple,times,service,contender,contender,service,running,true,update,leader,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> private void addContender(EmbeddedLeaderElectionService service, LeaderContender contender);1549545568;Callback from leader contenders when they start their service.;private void addContender(EmbeddedLeaderElectionService service, LeaderContender contender) {_		synchronized (lock) {_			checkState(!shutdown, "leader election service is shut down")__			checkState(!service.running, "leader election service is already started")___			try {_				if (!allLeaderContenders.add(service)) {_					throw new IllegalStateException("leader election service was added to this service multiple times")__				}__				service.contender = contender__				service.running = true___				updateLeader()__			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,start,their,service;private,void,add,contender,embedded,leader,election,service,service,leader,contender,contender,synchronized,lock,check,state,shutdown,leader,election,service,is,shut,down,check,state,service,running,leader,election,service,is,already,started,try,if,all,leader,contenders,add,service,throw,new,illegal,state,exception,leader,election,service,was,added,to,this,service,multiple,times,service,contender,contender,service,running,true,update,leader,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> private void confirmLeader(final EmbeddedLeaderElectionService service, final UUID leaderSessionId);1548866156;Callback from leader contenders when they confirm a leader grant.;private void confirmLeader(final EmbeddedLeaderElectionService service, final UUID leaderSessionId) {_		synchronized (lock) {_			_			if (!service.running || shutdown) {_				return__			}__			try {_				_				if (service == currentLeaderProposed && currentLeaderSessionId.equals(leaderSessionId)) {_					final String address = service.contender.getAddress()__					LOG.info("Received confirmation of leadership for leader {} , session={}", address, leaderSessionId)___					_					currentLeaderConfirmed = service__					currentLeaderAddress = address__					currentLeaderProposed = null___					_					notifyAllListeners(address, leaderSessionId)__				}_				else {_					LOG.debug("Received confirmation of leadership for a stale leadership grant. Ignoring.")__					service.isLeader = false__				}_			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,confirm,a,leader,grant;private,void,confirm,leader,final,embedded,leader,election,service,service,final,uuid,leader,session,id,synchronized,lock,if,service,running,shutdown,return,try,if,service,current,leader,proposed,current,leader,session,id,equals,leader,session,id,final,string,address,service,contender,get,address,log,info,received,confirmation,of,leadership,for,leader,session,address,leader,session,id,current,leader,confirmed,service,current,leader,address,address,current,leader,proposed,null,notify,all,listeners,address,leader,session,id,else,log,debug,received,confirmation,of,leadership,for,a,stale,leadership,grant,ignoring,service,is,leader,false,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> private void confirmLeader(final EmbeddedLeaderElectionService service, final UUID leaderSessionId);1549545568;Callback from leader contenders when they confirm a leader grant.;private void confirmLeader(final EmbeddedLeaderElectionService service, final UUID leaderSessionId) {_		synchronized (lock) {_			_			if (!service.running || shutdown) {_				return__			}__			try {_				_				if (service == currentLeaderProposed && currentLeaderSessionId.equals(leaderSessionId)) {_					final String address = service.contender.getAddress()__					LOG.info("Received confirmation of leadership for leader {} , session={}", address, leaderSessionId)___					_					currentLeaderConfirmed = service__					currentLeaderAddress = address__					currentLeaderProposed = null___					_					notifyAllListeners(address, leaderSessionId)__				}_				else {_					LOG.debug("Received confirmation of leadership for a stale leadership grant. Ignoring.")__				}_			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,confirm,a,leader,grant;private,void,confirm,leader,final,embedded,leader,election,service,service,final,uuid,leader,session,id,synchronized,lock,if,service,running,shutdown,return,try,if,service,current,leader,proposed,current,leader,session,id,equals,leader,session,id,final,string,address,service,contender,get,address,log,info,received,confirmation,of,leadership,for,leader,session,address,leader,session,id,current,leader,confirmed,service,current,leader,address,address,current,leader,proposed,null,notify,all,listeners,address,leader,session,id,else,log,debug,received,confirmation,of,leadership,for,a,stale,leadership,grant,ignoring,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> public void shutdown();1493975155;Shuts down this leader election service.__<p>This method does not perform a clean revocation of the leader status and_no notification to any leader listeners. It simply notifies all contenders_and listeners that the service is no longer available.;public void shutdown() {_		synchronized (lock) {_			shutdownInternally(new Exception("Leader election service is shutting down"))__		}_	};shuts,down,this,leader,election,service,p,this,method,does,not,perform,a,clean,revocation,of,the,leader,status,and,no,notification,to,any,leader,listeners,it,simply,notifies,all,contenders,and,listeners,that,the,service,is,no,longer,available;public,void,shutdown,synchronized,lock,shutdown,internally,new,exception,leader,election,service,is,shutting,down
EmbeddedLeaderService -> public void shutdown();1519406527;Shuts down this leader election service.__<p>This method does not perform a clean revocation of the leader status and_no notification to any leader listeners. It simply notifies all contenders_and listeners that the service is no longer available.;public void shutdown() {_		synchronized (lock) {_			shutdownInternally(new Exception("Leader election service is shutting down"))__		}_	};shuts,down,this,leader,election,service,p,this,method,does,not,perform,a,clean,revocation,of,the,leader,status,and,no,notification,to,any,leader,listeners,it,simply,notifies,all,contenders,and,listeners,that,the,service,is,no,longer,available;public,void,shutdown,synchronized,lock,shutdown,internally,new,exception,leader,election,service,is,shutting,down
EmbeddedLeaderService -> public void shutdown();1522249273;Shuts down this leader election service.__<p>This method does not perform a clean revocation of the leader status and_no notification to any leader listeners. It simply notifies all contenders_and listeners that the service is no longer available.;public void shutdown() {_		synchronized (lock) {_			shutdownInternally(new Exception("Leader election service is shutting down"))__		}_	};shuts,down,this,leader,election,service,p,this,method,does,not,perform,a,clean,revocation,of,the,leader,status,and,no,notification,to,any,leader,listeners,it,simply,notifies,all,contenders,and,listeners,that,the,service,is,no,longer,available;public,void,shutdown,synchronized,lock,shutdown,internally,new,exception,leader,election,service,is,shutting,down
EmbeddedLeaderService -> public void shutdown();1528982883;Shuts down this leader election service.__<p>This method does not perform a clean revocation of the leader status and_no notification to any leader listeners. It simply notifies all contenders_and listeners that the service is no longer available.;public void shutdown() {_		synchronized (lock) {_			shutdownInternally(new Exception("Leader election service is shutting down"))__		}_	};shuts,down,this,leader,election,service,p,this,method,does,not,perform,a,clean,revocation,of,the,leader,status,and,no,notification,to,any,leader,listeners,it,simply,notifies,all,contenders,and,listeners,that,the,service,is,no,longer,available;public,void,shutdown,synchronized,lock,shutdown,internally,new,exception,leader,election,service,is,shutting,down
EmbeddedLeaderService -> public void shutdown();1548866156;Shuts down this leader election service.__<p>This method does not perform a clean revocation of the leader status and_no notification to any leader listeners. It simply notifies all contenders_and listeners that the service is no longer available.;public void shutdown() {_		synchronized (lock) {_			shutdownInternally(new Exception("Leader election service is shutting down"))__		}_	};shuts,down,this,leader,election,service,p,this,method,does,not,perform,a,clean,revocation,of,the,leader,status,and,no,notification,to,any,leader,listeners,it,simply,notifies,all,contenders,and,listeners,that,the,service,is,no,longer,available;public,void,shutdown,synchronized,lock,shutdown,internally,new,exception,leader,election,service,is,shutting,down
EmbeddedLeaderService -> public void shutdown();1549545568;Shuts down this leader election service.__<p>This method does not perform a clean revocation of the leader status and_no notification to any leader listeners. It simply notifies all contenders_and listeners that the service is no longer available.;public void shutdown() {_		synchronized (lock) {_			shutdownInternally(new Exception("Leader election service is shutting down"))__		}_	};shuts,down,this,leader,election,service,p,this,method,does,not,perform,a,clean,revocation,of,the,leader,status,and,no,notification,to,any,leader,listeners,it,simply,notifies,all,contenders,and,listeners,that,the,service,is,no,longer,available;public,void,shutdown,synchronized,lock,shutdown,internally,new,exception,leader,election,service,is,shutting,down
EmbeddedLeaderService -> private void removeContender(EmbeddedLeaderElectionService service);1548866156;Callback from leader contenders when they stop their service.;private void removeContender(EmbeddedLeaderElectionService service) {_		synchronized (lock) {_			_			if (!service.running || shutdown) {_				return__			}__			try {_				if (!allLeaderContenders.remove(service)) {_					throw new IllegalStateException("leader election service does not belong to this service")__				}__				_				service.contender = null__				service.running = false__				service.isLeader = false___				_				if (currentLeaderConfirmed == service) {_					currentLeaderConfirmed = null__					currentLeaderSessionId = null__					currentLeaderAddress = null__				}_				if (currentLeaderProposed == service) {_					currentLeaderProposed = null__					currentLeaderSessionId = null__				}__				updateLeader()__			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,stop,their,service;private,void,remove,contender,embedded,leader,election,service,service,synchronized,lock,if,service,running,shutdown,return,try,if,all,leader,contenders,remove,service,throw,new,illegal,state,exception,leader,election,service,does,not,belong,to,this,service,service,contender,null,service,running,false,service,is,leader,false,if,current,leader,confirmed,service,current,leader,confirmed,null,current,leader,session,id,null,current,leader,address,null,if,current,leader,proposed,service,current,leader,proposed,null,current,leader,session,id,null,update,leader,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> private void removeContender(EmbeddedLeaderElectionService service);1549545568;Callback from leader contenders when they stop their service.;private void removeContender(EmbeddedLeaderElectionService service) {_		synchronized (lock) {_			_			if (!service.running || shutdown) {_				return__			}__			try {_				if (!allLeaderContenders.remove(service)) {_					throw new IllegalStateException("leader election service does not belong to this service")__				}__				_				service.contender = null__				service.running = false__				service.isLeader = false___				_				if (currentLeaderConfirmed == service) {_					currentLeaderConfirmed = null__					currentLeaderSessionId = null__					currentLeaderAddress = null__				}_				if (currentLeaderProposed == service) {_					currentLeaderProposed = null__					currentLeaderSessionId = null__				}__				updateLeader()__			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,stop,their,service;private,void,remove,contender,embedded,leader,election,service,service,synchronized,lock,if,service,running,shutdown,return,try,if,all,leader,contenders,remove,service,throw,new,illegal,state,exception,leader,election,service,does,not,belong,to,this,service,service,contender,null,service,running,false,service,is,leader,false,if,current,leader,confirmed,service,current,leader,confirmed,null,current,leader,session,id,null,current,leader,address,null,if,current,leader,proposed,service,current,leader,proposed,null,current,leader,session,id,null,update,leader,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> void confirmLeader(final EmbeddedLeaderElectionService service, final UUID leaderSessionId);1493975155;Callback from leader contenders when they confirm a leader grant;void confirmLeader(final EmbeddedLeaderElectionService service, final UUID leaderSessionId) {_		synchronized (lock) {_			_			if (!service.running || shutdown) {_				return__			}__			try {_				_				if (service == currentLeaderProposed && currentLeaderSessionId.equals(leaderSessionId)) {_					final String address = service.contender.getAddress()__					LOG.info("Received confirmation of leadership for leader {} , session={}", address, leaderSessionId)___					_					currentLeaderConfirmed = service__					currentLeaderAddress = address__					currentLeaderProposed = null__					service.isLeader = true___					_					for (EmbeddedLeaderRetrievalService listener : listeners) {_						notificationExecutor.execute(_								new NotifyOfLeaderCall(address, leaderSessionId, listener.listener, LOG))__					}_				}_				else {_					LOG.debug("Received confirmation of leadership for a stale leadership grant. Ignoring.")__				}_			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,confirm,a,leader,grant;void,confirm,leader,final,embedded,leader,election,service,service,final,uuid,leader,session,id,synchronized,lock,if,service,running,shutdown,return,try,if,service,current,leader,proposed,current,leader,session,id,equals,leader,session,id,final,string,address,service,contender,get,address,log,info,received,confirmation,of,leadership,for,leader,session,address,leader,session,id,current,leader,confirmed,service,current,leader,address,address,current,leader,proposed,null,service,is,leader,true,for,embedded,leader,retrieval,service,listener,listeners,notification,executor,execute,new,notify,of,leader,call,address,leader,session,id,listener,listener,log,else,log,debug,received,confirmation,of,leadership,for,a,stale,leadership,grant,ignoring,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> void confirmLeader(final EmbeddedLeaderElectionService service, final UUID leaderSessionId);1519406527;Callback from leader contenders when they confirm a leader grant;void confirmLeader(final EmbeddedLeaderElectionService service, final UUID leaderSessionId) {_		synchronized (lock) {_			_			if (!service.running || shutdown) {_				return__			}__			try {_				_				if (service == currentLeaderProposed && currentLeaderSessionId.equals(leaderSessionId)) {_					final String address = service.contender.getAddress()__					LOG.info("Received confirmation of leadership for leader {} , session={}", address, leaderSessionId)___					_					currentLeaderConfirmed = service__					currentLeaderAddress = address__					currentLeaderProposed = null__					service.isLeader = true___					_					for (EmbeddedLeaderRetrievalService listener : listeners) {_						notificationExecutor.execute(_								new NotifyOfLeaderCall(address, leaderSessionId, listener.listener, LOG))__					}_				}_				else {_					LOG.debug("Received confirmation of leadership for a stale leadership grant. Ignoring.")__				}_			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,confirm,a,leader,grant;void,confirm,leader,final,embedded,leader,election,service,service,final,uuid,leader,session,id,synchronized,lock,if,service,running,shutdown,return,try,if,service,current,leader,proposed,current,leader,session,id,equals,leader,session,id,final,string,address,service,contender,get,address,log,info,received,confirmation,of,leadership,for,leader,session,address,leader,session,id,current,leader,confirmed,service,current,leader,address,address,current,leader,proposed,null,service,is,leader,true,for,embedded,leader,retrieval,service,listener,listeners,notification,executor,execute,new,notify,of,leader,call,address,leader,session,id,listener,listener,log,else,log,debug,received,confirmation,of,leadership,for,a,stale,leadership,grant,ignoring,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> void confirmLeader(final EmbeddedLeaderElectionService service, final UUID leaderSessionId);1522249273;Callback from leader contenders when they confirm a leader grant.;void confirmLeader(final EmbeddedLeaderElectionService service, final UUID leaderSessionId) {_		synchronized (lock) {_			_			if (!service.running || shutdown) {_				return__			}__			try {_				_				if (service == currentLeaderProposed && currentLeaderSessionId.equals(leaderSessionId)) {_					final String address = service.contender.getAddress()__					LOG.info("Received confirmation of leadership for leader {} , session={}", address, leaderSessionId)___					_					currentLeaderConfirmed = service__					currentLeaderAddress = address__					currentLeaderProposed = null___					_					for (EmbeddedLeaderRetrievalService listener : listeners) {_						notificationExecutor.execute(_								new NotifyOfLeaderCall(address, leaderSessionId, listener.listener, LOG))__					}_				}_				else {_					LOG.debug("Received confirmation of leadership for a stale leadership grant. Ignoring.")__				}_			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,confirm,a,leader,grant;void,confirm,leader,final,embedded,leader,election,service,service,final,uuid,leader,session,id,synchronized,lock,if,service,running,shutdown,return,try,if,service,current,leader,proposed,current,leader,session,id,equals,leader,session,id,final,string,address,service,contender,get,address,log,info,received,confirmation,of,leadership,for,leader,session,address,leader,session,id,current,leader,confirmed,service,current,leader,address,address,current,leader,proposed,null,for,embedded,leader,retrieval,service,listener,listeners,notification,executor,execute,new,notify,of,leader,call,address,leader,session,id,listener,listener,log,else,log,debug,received,confirmation,of,leadership,for,a,stale,leadership,grant,ignoring,catch,throwable,t,fatal,error,t
EmbeddedLeaderService -> void confirmLeader(final EmbeddedLeaderElectionService service, final UUID leaderSessionId);1528982883;Callback from leader contenders when they confirm a leader grant.;void confirmLeader(final EmbeddedLeaderElectionService service, final UUID leaderSessionId) {_		synchronized (lock) {_			_			if (!service.running || shutdown) {_				return__			}__			try {_				_				if (service == currentLeaderProposed && currentLeaderSessionId.equals(leaderSessionId)) {_					final String address = service.contender.getAddress()__					LOG.info("Received confirmation of leadership for leader {} , session={}", address, leaderSessionId)___					_					currentLeaderConfirmed = service__					currentLeaderAddress = address__					currentLeaderProposed = null___					_					for (EmbeddedLeaderRetrievalService listener : listeners) {_						notificationExecutor.execute(_								new NotifyOfLeaderCall(address, leaderSessionId, listener.listener, LOG))__					}_				}_				else {_					LOG.debug("Received confirmation of leadership for a stale leadership grant. Ignoring.")__				}_			}_			catch (Throwable t) {_				fatalError(t)__			}_		}_	};callback,from,leader,contenders,when,they,confirm,a,leader,grant;void,confirm,leader,final,embedded,leader,election,service,service,final,uuid,leader,session,id,synchronized,lock,if,service,running,shutdown,return,try,if,service,current,leader,proposed,current,leader,session,id,equals,leader,session,id,final,string,address,service,contender,get,address,log,info,received,confirmation,of,leadership,for,leader,session,address,leader,session,id,current,leader,confirmed,service,current,leader,address,address,current,leader,proposed,null,for,embedded,leader,retrieval,service,listener,listeners,notification,executor,execute,new,notify,of,leader,call,address,leader,session,id,listener,listener,log,else,log,debug,received,confirmation,of,leadership,for,a,stale,leadership,grant,ignoring,catch,throwable,t,fatal,error,t
