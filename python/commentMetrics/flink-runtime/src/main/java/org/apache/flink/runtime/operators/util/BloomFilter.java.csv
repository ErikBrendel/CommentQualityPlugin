# id;timestamp;commentText;codeText;commentWords;codeWords
BloomFilter -> BitSet -> public void clear();1438874079;Clear the bit set.;public void clear() {_			long zeroValue = 0L__			for (int i = 0_ i < (length / 8)_ i++) {_				memorySegment.putLong(offset + i * 8, zeroValue)__			}_		};clear,the,bit,set;public,void,clear,long,zero,value,0l,for,int,i,0,i,length,8,i,memory,segment,put,long,offset,i,8,zero,value
BloomFilter -> BitSet -> public void clear();1446112342;Clear the bit set.;public void clear() {_			long zeroValue = 0L__			for (int i = 0_ i < (length / 8)_ i++) {_				memorySegment.putLong(offset + i * 8, zeroValue)__			}_		};clear,the,bit,set;public,void,clear,long,zero,value,0l,for,int,i,0,i,length,8,i,memory,segment,put,long,offset,i,8,zero,value
BloomFilter -> BitSet -> public void clear();1465991918;Clear the bit set.;public void clear() {_			long zeroValue = 0L__			for (int i = 0_ i < (length / 8)_ i++) {_				memorySegment.putLong(offset + i * 8, zeroValue)__			}_		};clear,the,bit,set;public,void,clear,long,zero,value,0l,for,int,i,0,i,length,8,i,memory,segment,put,long,offset,i,8,zero,value
BloomFilter -> BitSet -> public int bitSize();1438874079;Number of bits;public int bitSize() {_			return length << 3__		};number,of,bits;public,int,bit,size,return,length,3
BloomFilter -> BitSet -> public int bitSize();1446112342;Number of bits;public int bitSize() {_			return length << 3__		};number,of,bits;public,int,bit,size,return,length,3
BloomFilter -> BitSet -> public int bitSize();1465991918;Number of bits;public int bitSize() {_			return length << 3__		};number,of,bits;public,int,bit,size,return,length,3
BloomFilter -> public static int optimalNumOfBits(long inputEntries, double fpp);1438874079;Compute optimal bits number with given input entries and expected false positive probability.__@param inputEntries_@param fpp_@return optimal bits number;public static int optimalNumOfBits(long inputEntries, double fpp) {_		int numBits = (int) (-inputEntries * Math.log(fpp) / (Math.log(2) * Math.log(2)))__		return numBits__	};compute,optimal,bits,number,with,given,input,entries,and,expected,false,positive,probability,param,input,entries,param,fpp,return,optimal,bits,number;public,static,int,optimal,num,of,bits,long,input,entries,double,fpp,int,num,bits,int,input,entries,math,log,fpp,math,log,2,math,log,2,return,num,bits
BloomFilter -> public static int optimalNumOfBits(long inputEntries, double fpp);1446112342;Compute optimal bits number with given input entries and expected false positive probability.__@param inputEntries_@param fpp_@return optimal bits number;public static int optimalNumOfBits(long inputEntries, double fpp) {_		int numBits = (int) (-inputEntries * Math.log(fpp) / (Math.log(2) * Math.log(2)))__		return numBits__	};compute,optimal,bits,number,with,given,input,entries,and,expected,false,positive,probability,param,input,entries,param,fpp,return,optimal,bits,number;public,static,int,optimal,num,of,bits,long,input,entries,double,fpp,int,num,bits,int,input,entries,math,log,fpp,math,log,2,math,log,2,return,num,bits
BloomFilter -> public static int optimalNumOfBits(long inputEntries, double fpp);1465991918;Compute optimal bits number with given input entries and expected false positive probability.__@param inputEntries_@param fpp_@return optimal bits number;public static int optimalNumOfBits(long inputEntries, double fpp) {_		int numBits = (int) (-inputEntries * Math.log(fpp) / (Math.log(2) * Math.log(2)))__		return numBits__	};compute,optimal,bits,number,with,given,input,entries,and,expected,false,positive,probability,param,input,entries,param,fpp,return,optimal,bits,number;public,static,int,optimal,num,of,bits,long,input,entries,double,fpp,int,num,bits,int,input,entries,math,log,fpp,math,log,2,math,log,2,return,num,bits
BloomFilter -> BitSet -> public void set(int index);1438874079;Sets the bit at specified index.__@param index - position;public void set(int index) {_			int longIndex = (index & LONG_POSITION_MASK) >>> 3__			long current = memorySegment.getLong(offset + longIndex)__			current |= (1L << index)__			memorySegment.putLong(offset + longIndex, current)__		};sets,the,bit,at,specified,index,param,index,position;public,void,set,int,index,int,long,index,index,3,long,current,memory,segment,get,long,offset,long,index,current,1l,index,memory,segment,put,long,offset,long,index,current
BloomFilter -> BitSet -> public void set(int index);1446112342;Sets the bit at specified index.__@param index - position;public void set(int index) {_			int longIndex = (index & LONG_POSITION_MASK) >>> 3__			long current = memorySegment.getLong(offset + longIndex)__			current |= (1L << index)__			memorySegment.putLong(offset + longIndex, current)__		};sets,the,bit,at,specified,index,param,index,position;public,void,set,int,index,int,long,index,index,3,long,current,memory,segment,get,long,offset,long,index,current,1l,index,memory,segment,put,long,offset,long,index,current
BloomFilter -> BitSet -> public void set(int index);1465991918;Sets the bit at specified index.__@param index - position;public void set(int index) {_			int longIndex = (index & LONG_POSITION_MASK) >>> 3__			long current = memorySegment.getLong(offset + longIndex)__			current |= (1L << index)__			memorySegment.putLong(offset + longIndex, current)__		};sets,the,bit,at,specified,index,param,index,position;public,void,set,int,index,int,long,index,index,3,long,current,memory,segment,get,long,offset,long,index,current,1l,index,memory,segment,put,long,offset,long,index,current
BloomFilter -> public static double estimateFalsePositiveProbability(long inputEntries, int bitSize);1438874079;Compute the false positive probability based on given input entries and bits size._Note: this is just the math expected value, you should not expect the fpp in real case would under the return value for certain.__@param inputEntries_@param bitSize_@return;public static double estimateFalsePositiveProbability(long inputEntries, int bitSize) {_		int numFunction = optimalNumOfHashFunctions(inputEntries, bitSize)__		double p = Math.pow(Math.E, -(double) numFunction * inputEntries / bitSize)__		double estimatedFPP = Math.pow(1 - p, numFunction)__		return estimatedFPP__	};compute,the,false,positive,probability,based,on,given,input,entries,and,bits,size,note,this,is,just,the,math,expected,value,you,should,not,expect,the,fpp,in,real,case,would,under,the,return,value,for,certain,param,input,entries,param,bit,size,return;public,static,double,estimate,false,positive,probability,long,input,entries,int,bit,size,int,num,function,optimal,num,of,hash,functions,input,entries,bit,size,double,p,math,pow,math,e,double,num,function,input,entries,bit,size,double,estimated,fpp,math,pow,1,p,num,function,return,estimated,fpp
BloomFilter -> public static double estimateFalsePositiveProbability(long inputEntries, int bitSize);1446112342;Compute the false positive probability based on given input entries and bits size._Note: this is just the math expected value, you should not expect the fpp in real case would under the return value for certain.__@param inputEntries_@param bitSize_@return;public static double estimateFalsePositiveProbability(long inputEntries, int bitSize) {_		int numFunction = optimalNumOfHashFunctions(inputEntries, bitSize)__		double p = Math.pow(Math.E, -(double) numFunction * inputEntries / bitSize)__		double estimatedFPP = Math.pow(1 - p, numFunction)__		return estimatedFPP__	};compute,the,false,positive,probability,based,on,given,input,entries,and,bits,size,note,this,is,just,the,math,expected,value,you,should,not,expect,the,fpp,in,real,case,would,under,the,return,value,for,certain,param,input,entries,param,bit,size,return;public,static,double,estimate,false,positive,probability,long,input,entries,int,bit,size,int,num,function,optimal,num,of,hash,functions,input,entries,bit,size,double,p,math,pow,math,e,double,num,function,input,entries,bit,size,double,estimated,fpp,math,pow,1,p,num,function,return,estimated,fpp
BloomFilter -> public static double estimateFalsePositiveProbability(long inputEntries, int bitSize);1465991918;Compute the false positive probability based on given input entries and bits size._Note: this is just the math expected value, you should not expect the fpp in real case would under the return value for certain.__@param inputEntries_@param bitSize_@return;public static double estimateFalsePositiveProbability(long inputEntries, int bitSize) {_		int numFunction = optimalNumOfHashFunctions(inputEntries, bitSize)__		double p = Math.pow(Math.E, -(double) numFunction * inputEntries / bitSize)__		double estimatedFPP = Math.pow(1 - p, numFunction)__		return estimatedFPP__	};compute,the,false,positive,probability,based,on,given,input,entries,and,bits,size,note,this,is,just,the,math,expected,value,you,should,not,expect,the,fpp,in,real,case,would,under,the,return,value,for,certain,param,input,entries,param,bit,size,return;public,static,double,estimate,false,positive,probability,long,input,entries,int,bit,size,int,num,function,optimal,num,of,hash,functions,input,entries,bit,size,double,p,math,pow,math,e,double,num,function,input,entries,bit,size,double,estimated,fpp,math,pow,1,p,num,function,return,estimated,fpp
BloomFilter -> static int optimalNumOfHashFunctions(long expectEntries, long bitSize);1438874079;compute the optimal hash function number with given input entries and bits size, which would_make the false positive probability lowest.__@param expectEntries_@param bitSize_@return hash function number;static int optimalNumOfHashFunctions(long expectEntries, long bitSize) {_		return Math.max(1, (int) Math.round((double) bitSize / expectEntries * Math.log(2)))__	};compute,the,optimal,hash,function,number,with,given,input,entries,and,bits,size,which,would,make,the,false,positive,probability,lowest,param,expect,entries,param,bit,size,return,hash,function,number;static,int,optimal,num,of,hash,functions,long,expect,entries,long,bit,size,return,math,max,1,int,math,round,double,bit,size,expect,entries,math,log,2
BloomFilter -> static int optimalNumOfHashFunctions(long expectEntries, long bitSize);1446112342;compute the optimal hash function number with given input entries and bits size, which would_make the false positive probability lowest.__@param expectEntries_@param bitSize_@return hash function number;static int optimalNumOfHashFunctions(long expectEntries, long bitSize) {_		return Math.max(1, (int) Math.round((double) bitSize / expectEntries * Math.log(2)))__	};compute,the,optimal,hash,function,number,with,given,input,entries,and,bits,size,which,would,make,the,false,positive,probability,lowest,param,expect,entries,param,bit,size,return,hash,function,number;static,int,optimal,num,of,hash,functions,long,expect,entries,long,bit,size,return,math,max,1,int,math,round,double,bit,size,expect,entries,math,log,2
BloomFilter -> static int optimalNumOfHashFunctions(long expectEntries, long bitSize);1465991918;compute the optimal hash function number with given input entries and bits size, which would_make the false positive probability lowest.__@param expectEntries_@param bitSize_@return hash function number;static int optimalNumOfHashFunctions(long expectEntries, long bitSize) {_		return Math.max(1, (int) Math.round((double) bitSize / expectEntries * Math.log(2)))__	};compute,the,optimal,hash,function,number,with,given,input,entries,and,bits,size,which,would,make,the,false,positive,probability,lowest,param,expect,entries,param,bit,size,return,hash,function,number;static,int,optimal,num,of,hash,functions,long,expect,entries,long,bit,size,return,math,max,1,int,math,round,double,bit,size,expect,entries,math,log,2
BloomFilter -> BitSet -> public boolean get(int index);1438874079;Returns true if the bit is set in the specified index.__@param index - position_@return - value at the bit position;public boolean get(int index) {_			int longIndex = (index & LONG_POSITION_MASK) >>> 3__			long current = memorySegment.getLong(offset + longIndex)__			return (current & (1L << index)) != 0__		};returns,true,if,the,bit,is,set,in,the,specified,index,param,index,position,return,value,at,the,bit,position;public,boolean,get,int,index,int,long,index,index,3,long,current,memory,segment,get,long,offset,long,index,return,current,1l,index,0
BloomFilter -> BitSet -> public boolean get(int index);1446112342;Returns true if the bit is set in the specified index.__@param index - position_@return - value at the bit position;public boolean get(int index) {_			int longIndex = (index & LONG_POSITION_MASK) >>> 3__			long current = memorySegment.getLong(offset + longIndex)__			return (current & (1L << index)) != 0__		};returns,true,if,the,bit,is,set,in,the,specified,index,param,index,position,return,value,at,the,bit,position;public,boolean,get,int,index,int,long,index,index,3,long,current,memory,segment,get,long,offset,long,index,return,current,1l,index,0
BloomFilter -> BitSet -> public boolean get(int index);1465991918;Returns true if the bit is set in the specified index.__@param index - position_@return - value at the bit position;public boolean get(int index) {_			int longIndex = (index & LONG_POSITION_MASK) >>> 3__			long current = memorySegment.getLong(offset + longIndex)__			return (current & (1L << index)) != 0__		};returns,true,if,the,bit,is,set,in,the,specified,index,param,index,position,return,value,at,the,bit,position;public,boolean,get,int,index,int,long,index,index,3,long,current,memory,segment,get,long,offset,long,index,return,current,1l,index,0
