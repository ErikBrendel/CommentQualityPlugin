# id;timestamp;commentText;codeText;commentWords;codeWords
FlinkZooKeeperQuorumPeer -> public static void runFlinkZkQuorumPeer(String zkConfigFile, int peerId) throws Exception;1435914285;Runs a ZooKeeper {@link QuorumPeer} if further peers are configured or a single_{@link ZooKeeperServer} if no further peers are configured.__@param zkConfigFile ZooKeeper config file 'zoo.cfg'_@param peerId       ID for the 'myid' file;public static void runFlinkZkQuorumPeer(String zkConfigFile, int peerId) throws Exception {__		Properties zkProps = new Properties()___		InputStream inStream = new FileInputStream(new File(zkConfigFile))__		zkProps.load(inStream)___		LOG.info("Configuration: " + zkProps)___		_		setRequiredProperties(zkProps)___		_		writeMyIdToDataDir(zkProps, peerId)___		_		_		QuorumPeerConfig conf = new QuorumPeerConfig()__		conf.parseProperties(zkProps)___		if (conf.isDistributed()) {_			_			LOG.info("Running distributed ZooKeeper quorum peer (total peers: {}).",_					conf.getServers().size())___			QuorumPeerMain qp = new QuorumPeerMain()__			qp.runFromConfig(conf)__		}_		else {_			_			LOG.info("Running standalone ZooKeeper quorum peer.")___			ZooKeeperServerMain zk = new ZooKeeperServerMain()__			ServerConfig sc = new ServerConfig()__			sc.readFrom(conf)__			zk.runFromConfig(sc)__		}_	};runs,a,zoo,keeper,link,quorum,peer,if,further,peers,are,configured,or,a,single,link,zoo,keeper,server,if,no,further,peers,are,configured,param,zk,config,file,zoo,keeper,config,file,zoo,cfg,param,peer,id,id,for,the,myid,file;public,static,void,run,flink,zk,quorum,peer,string,zk,config,file,int,peer,id,throws,exception,properties,zk,props,new,properties,input,stream,in,stream,new,file,input,stream,new,file,zk,config,file,zk,props,load,in,stream,log,info,configuration,zk,props,set,required,properties,zk,props,write,my,id,to,data,dir,zk,props,peer,id,quorum,peer,config,conf,new,quorum,peer,config,conf,parse,properties,zk,props,if,conf,is,distributed,log,info,running,distributed,zoo,keeper,quorum,peer,total,peers,conf,get,servers,size,quorum,peer,main,qp,new,quorum,peer,main,qp,run,from,config,conf,else,log,info,running,standalone,zoo,keeper,quorum,peer,zoo,keeper,server,main,zk,new,zoo,keeper,server,main,server,config,sc,new,server,config,sc,read,from,conf,zk,run,from,config,sc
FlinkZooKeeperQuorumPeer -> public static void runFlinkZkQuorumPeer(String zkConfigFile, int peerId) throws Exception;1436360553;Runs a ZooKeeper {@link QuorumPeer} if further peers are configured or a single_{@link ZooKeeperServer} if no further peers are configured.__@param zkConfigFile ZooKeeper config file 'zoo.cfg'_@param peerId       ID for the 'myid' file;public static void runFlinkZkQuorumPeer(String zkConfigFile, int peerId) throws Exception {__		Properties zkProps = new Properties()___		InputStream inStream = new FileInputStream(new File(zkConfigFile))__		zkProps.load(inStream)___		LOG.info("Configuration: " + zkProps)___		_		setRequiredProperties(zkProps)___		_		writeMyIdToDataDir(zkProps, peerId)___		_		_		QuorumPeerConfig conf = new QuorumPeerConfig()__		conf.parseProperties(zkProps)___		if (conf.isDistributed()) {_			_			LOG.info("Running distributed ZooKeeper quorum peer (total peers: {}).",_					conf.getServers().size())___			QuorumPeerMain qp = new QuorumPeerMain()__			qp.runFromConfig(conf)__		}_		else {_			_			LOG.info("Running standalone ZooKeeper quorum peer.")___			ZooKeeperServerMain zk = new ZooKeeperServerMain()__			ServerConfig sc = new ServerConfig()__			sc.readFrom(conf)__			zk.runFromConfig(sc)__		}_	};runs,a,zoo,keeper,link,quorum,peer,if,further,peers,are,configured,or,a,single,link,zoo,keeper,server,if,no,further,peers,are,configured,param,zk,config,file,zoo,keeper,config,file,zoo,cfg,param,peer,id,id,for,the,myid,file;public,static,void,run,flink,zk,quorum,peer,string,zk,config,file,int,peer,id,throws,exception,properties,zk,props,new,properties,input,stream,in,stream,new,file,input,stream,new,file,zk,config,file,zk,props,load,in,stream,log,info,configuration,zk,props,set,required,properties,zk,props,write,my,id,to,data,dir,zk,props,peer,id,quorum,peer,config,conf,new,quorum,peer,config,conf,parse,properties,zk,props,if,conf,is,distributed,log,info,running,distributed,zoo,keeper,quorum,peer,total,peers,conf,get,servers,size,quorum,peer,main,qp,new,quorum,peer,main,qp,run,from,config,conf,else,log,info,running,standalone,zoo,keeper,quorum,peer,zoo,keeper,server,main,zk,new,zoo,keeper,server,main,server,config,sc,new,server,config,sc,read,from,conf,zk,run,from,config,sc
FlinkZooKeeperQuorumPeer -> public static void runFlinkZkQuorumPeer(String zkConfigFile, int peerId) throws Exception;1439325619;Runs a ZooKeeper {@link QuorumPeer} if further peers are configured or a single_{@link ZooKeeperServer} if no further peers are configured.__@param zkConfigFile ZooKeeper config file 'zoo.cfg'_@param peerId       ID for the 'myid' file;public static void runFlinkZkQuorumPeer(String zkConfigFile, int peerId) throws Exception {__		Properties zkProps = new Properties()___		try (InputStream inStream = new FileInputStream(new File(zkConfigFile))) {_			zkProps.load(inStream)__		}__		LOG.info("Configuration: " + zkProps)___		_		setRequiredProperties(zkProps)___		_		writeMyIdToDataDir(zkProps, peerId)___		_		_		QuorumPeerConfig conf = new QuorumPeerConfig()__		conf.parseProperties(zkProps)___		if (conf.isDistributed()) {_			_			LOG.info("Running distributed ZooKeeper quorum peer (total peers: {}).",_					conf.getServers().size())___			QuorumPeerMain qp = new QuorumPeerMain()__			qp.runFromConfig(conf)__		}_		else {_			_			LOG.info("Running standalone ZooKeeper quorum peer.")___			ZooKeeperServerMain zk = new ZooKeeperServerMain()__			ServerConfig sc = new ServerConfig()__			sc.readFrom(conf)__			zk.runFromConfig(sc)__		}_	};runs,a,zoo,keeper,link,quorum,peer,if,further,peers,are,configured,or,a,single,link,zoo,keeper,server,if,no,further,peers,are,configured,param,zk,config,file,zoo,keeper,config,file,zoo,cfg,param,peer,id,id,for,the,myid,file;public,static,void,run,flink,zk,quorum,peer,string,zk,config,file,int,peer,id,throws,exception,properties,zk,props,new,properties,try,input,stream,in,stream,new,file,input,stream,new,file,zk,config,file,zk,props,load,in,stream,log,info,configuration,zk,props,set,required,properties,zk,props,write,my,id,to,data,dir,zk,props,peer,id,quorum,peer,config,conf,new,quorum,peer,config,conf,parse,properties,zk,props,if,conf,is,distributed,log,info,running,distributed,zoo,keeper,quorum,peer,total,peers,conf,get,servers,size,quorum,peer,main,qp,new,quorum,peer,main,qp,run,from,config,conf,else,log,info,running,standalone,zoo,keeper,quorum,peer,zoo,keeper,server,main,zk,new,zoo,keeper,server,main,server,config,sc,new,server,config,sc,read,from,conf,zk,run,from,config,sc
FlinkZooKeeperQuorumPeer -> public static void runFlinkZkQuorumPeer(String zkConfigFile, int peerId) throws Exception;1451312679;Runs a ZooKeeper {@link QuorumPeer} if further peers are configured or a single_{@link ZooKeeperServer} if no further peers are configured.__@param zkConfigFile ZooKeeper config file 'zoo.cfg'_@param peerId       ID for the 'myid' file;public static void runFlinkZkQuorumPeer(String zkConfigFile, int peerId) throws Exception {__		Properties zkProps = new Properties()___		try (InputStream inStream = new FileInputStream(new File(zkConfigFile))) {_			zkProps.load(inStream)__		}__		LOG.info("Configuration: " + zkProps)___		_		setRequiredProperties(zkProps)___		_		writeMyIdToDataDir(zkProps, peerId)___		_		_		QuorumPeerConfig conf = new QuorumPeerConfig()__		conf.parseProperties(zkProps)___		if (conf.isDistributed()) {_			_			LOG.info("Running distributed ZooKeeper quorum peer (total peers: {}).",_					conf.getServers().size())___			QuorumPeerMain qp = new QuorumPeerMain()__			qp.runFromConfig(conf)__		}_		else {_			_			LOG.info("Running standalone ZooKeeper quorum peer.")___			ZooKeeperServerMain zk = new ZooKeeperServerMain()__			ServerConfig sc = new ServerConfig()__			sc.readFrom(conf)__			zk.runFromConfig(sc)__		}_	};runs,a,zoo,keeper,link,quorum,peer,if,further,peers,are,configured,or,a,single,link,zoo,keeper,server,if,no,further,peers,are,configured,param,zk,config,file,zoo,keeper,config,file,zoo,cfg,param,peer,id,id,for,the,myid,file;public,static,void,run,flink,zk,quorum,peer,string,zk,config,file,int,peer,id,throws,exception,properties,zk,props,new,properties,try,input,stream,in,stream,new,file,input,stream,new,file,zk,config,file,zk,props,load,in,stream,log,info,configuration,zk,props,set,required,properties,zk,props,write,my,id,to,data,dir,zk,props,peer,id,quorum,peer,config,conf,new,quorum,peer,config,conf,parse,properties,zk,props,if,conf,is,distributed,log,info,running,distributed,zoo,keeper,quorum,peer,total,peers,conf,get,servers,size,quorum,peer,main,qp,new,quorum,peer,main,qp,run,from,config,conf,else,log,info,running,standalone,zoo,keeper,quorum,peer,zoo,keeper,server,main,zk,new,zoo,keeper,server,main,server,config,sc,new,server,config,sc,read,from,conf,zk,run,from,config,sc
FlinkZooKeeperQuorumPeer -> public static void runFlinkZkQuorumPeer(String zkConfigFile, int peerId) throws Exception;1475883662;Runs a ZooKeeper {@link QuorumPeer} if further peers are configured or a single_{@link ZooKeeperServer} if no further peers are configured.__@param zkConfigFile ZooKeeper config file 'zoo.cfg'_@param peerId       ID for the 'myid' file;public static void runFlinkZkQuorumPeer(String zkConfigFile, int peerId) throws Exception {__		Properties zkProps = new Properties()___		try (InputStream inStream = new FileInputStream(new File(zkConfigFile))) {_			zkProps.load(inStream)__		}__		LOG.info("Configuration: " + zkProps)___		_		setRequiredProperties(zkProps)___		_		writeMyIdToDataDir(zkProps, peerId)___		_		_		QuorumPeerConfig conf = new QuorumPeerConfig()__		conf.parseProperties(zkProps)___		if (conf.isDistributed()) {_			_			LOG.info("Running distributed ZooKeeper quorum peer (total peers: {}).",_					conf.getServers().size())___			QuorumPeerMain qp = new QuorumPeerMain()__			qp.runFromConfig(conf)__		}_		else {_			_			LOG.info("Running standalone ZooKeeper quorum peer.")___			ZooKeeperServerMain zk = new ZooKeeperServerMain()__			ServerConfig sc = new ServerConfig()__			sc.readFrom(conf)__			zk.runFromConfig(sc)__		}_	};runs,a,zoo,keeper,link,quorum,peer,if,further,peers,are,configured,or,a,single,link,zoo,keeper,server,if,no,further,peers,are,configured,param,zk,config,file,zoo,keeper,config,file,zoo,cfg,param,peer,id,id,for,the,myid,file;public,static,void,run,flink,zk,quorum,peer,string,zk,config,file,int,peer,id,throws,exception,properties,zk,props,new,properties,try,input,stream,in,stream,new,file,input,stream,new,file,zk,config,file,zk,props,load,in,stream,log,info,configuration,zk,props,set,required,properties,zk,props,write,my,id,to,data,dir,zk,props,peer,id,quorum,peer,config,conf,new,quorum,peer,config,conf,parse,properties,zk,props,if,conf,is,distributed,log,info,running,distributed,zoo,keeper,quorum,peer,total,peers,conf,get,servers,size,quorum,peer,main,qp,new,quorum,peer,main,qp,run,from,config,conf,else,log,info,running,standalone,zoo,keeper,quorum,peer,zoo,keeper,server,main,zk,new,zoo,keeper,server,main,server,config,sc,new,server,config,sc,read,from,conf,zk,run,from,config,sc
FlinkZooKeeperQuorumPeer -> private static void writeMyIdToDataDir(Properties zkProps, int id) throws IOException;1435914285;Write 'myid' file to the 'dataDir' in the given ZooKeeper configuration.__<blockquote>_Every machine that is part of the ZooKeeper ensemble should know about every other machine in_the ensemble. You accomplish this with the series of lines of the form_server.id=host:port:port. The parameters host and port are straightforward. You attribute the_server id to each machine by creating a file named myid, one for each server, which resides_in that server's data directory, as specified by the configuration file parameter dataDir._</blockquote>__@param zkProps ZooKeeper configuration._@param id      The ID of this {@link QuorumPeer}._@throws IllegalConfigurationException Thrown, if 'dataDir' property not set in given_ZooKeeper properties._@throws IOException                   Thrown, if 'dataDir' does not exist and cannot be_created._@see <a href="http://zookeeper.apache.org/doc/r3.4.6/zookeeperAdmin.html">_ZooKeeper Administrator's Guide</a>;private static void writeMyIdToDataDir(Properties zkProps, int id) throws IOException {__		_		if (zkProps.getProperty("dataDir") == null) {_			throw new IllegalConfigurationException("No dataDir configured.")__		}__		File dataDir = new File(zkProps.getProperty("dataDir"))___		if (!dataDir.isDirectory() && !dataDir.mkdirs()) {_			throw new IOException("Cannot create dataDir '" + dataDir + "'.")__		}__		dataDir.deleteOnExit()___		_		PrintWriter writer = null__		try {_			LOG.info("Writing {} to myid file in 'dataDir'.", id)___			writer = new PrintWriter(new File(dataDir, "myid"))__			writer.println(id)__		}_		finally {_			if (writer != null) {_				writer.close()__			}_		}_	};write,myid,file,to,the,data,dir,in,the,given,zoo,keeper,configuration,blockquote,every,machine,that,is,part,of,the,zoo,keeper,ensemble,should,know,about,every,other,machine,in,the,ensemble,you,accomplish,this,with,the,series,of,lines,of,the,form,server,id,host,port,port,the,parameters,host,and,port,are,straightforward,you,attribute,the,server,id,to,each,machine,by,creating,a,file,named,myid,one,for,each,server,which,resides,in,that,server,s,data,directory,as,specified,by,the,configuration,file,parameter,data,dir,blockquote,param,zk,props,zoo,keeper,configuration,param,id,the,id,of,this,link,quorum,peer,throws,illegal,configuration,exception,thrown,if,data,dir,property,not,set,in,given,zoo,keeper,properties,throws,ioexception,thrown,if,data,dir,does,not,exist,and,cannot,be,created,see,a,href,http,zookeeper,apache,org,doc,r3,4,6,zookeeper,admin,html,zoo,keeper,administrator,s,guide,a;private,static,void,write,my,id,to,data,dir,properties,zk,props,int,id,throws,ioexception,if,zk,props,get,property,data,dir,null,throw,new,illegal,configuration,exception,no,data,dir,configured,file,data,dir,new,file,zk,props,get,property,data,dir,if,data,dir,is,directory,data,dir,mkdirs,throw,new,ioexception,cannot,create,data,dir,data,dir,data,dir,delete,on,exit,print,writer,writer,null,try,log,info,writing,to,myid,file,in,data,dir,id,writer,new,print,writer,new,file,data,dir,myid,writer,println,id,finally,if,writer,null,writer,close
FlinkZooKeeperQuorumPeer -> private static void writeMyIdToDataDir(Properties zkProps, int id) throws IOException;1436360553;Write 'myid' file to the 'dataDir' in the given ZooKeeper configuration.__<blockquote>_Every machine that is part of the ZooKeeper ensemble should know about every other machine in_the ensemble. You accomplish this with the series of lines of the form_server.id=host:port:port. The parameters host and port are straightforward. You attribute the_server id to each machine by creating a file named myid, one for each server, which resides_in that server's data directory, as specified by the configuration file parameter dataDir._</blockquote>__@param zkProps ZooKeeper configuration._@param id      The ID of this {@link QuorumPeer}._@throws IllegalConfigurationException Thrown, if 'dataDir' property not set in given_ZooKeeper properties._@throws IOException                   Thrown, if 'dataDir' does not exist and cannot be_created._@see <a href="http://zookeeper.apache.org/doc/r3.4.6/zookeeperAdmin.html">_ZooKeeper Administrator's Guide</a>;private static void writeMyIdToDataDir(Properties zkProps, int id) throws IOException {__		_		if (zkProps.getProperty("dataDir") == null) {_			throw new IllegalConfigurationException("No dataDir configured.")__		}__		File dataDir = new File(zkProps.getProperty("dataDir"))___		if (!dataDir.isDirectory() && !dataDir.mkdirs()) {_			throw new IOException("Cannot create dataDir '" + dataDir + "'.")__		}__		dataDir.deleteOnExit()___		LOG.info("Writing {} to myid file in 'dataDir'.", id)__		_		_		_		FileWriter writer = new FileWriter(new File(dataDir, "myid"))__		try {_			writer.write(String.valueOf(id))__		}_		finally {_			writer.close()__		}_	};write,myid,file,to,the,data,dir,in,the,given,zoo,keeper,configuration,blockquote,every,machine,that,is,part,of,the,zoo,keeper,ensemble,should,know,about,every,other,machine,in,the,ensemble,you,accomplish,this,with,the,series,of,lines,of,the,form,server,id,host,port,port,the,parameters,host,and,port,are,straightforward,you,attribute,the,server,id,to,each,machine,by,creating,a,file,named,myid,one,for,each,server,which,resides,in,that,server,s,data,directory,as,specified,by,the,configuration,file,parameter,data,dir,blockquote,param,zk,props,zoo,keeper,configuration,param,id,the,id,of,this,link,quorum,peer,throws,illegal,configuration,exception,thrown,if,data,dir,property,not,set,in,given,zoo,keeper,properties,throws,ioexception,thrown,if,data,dir,does,not,exist,and,cannot,be,created,see,a,href,http,zookeeper,apache,org,doc,r3,4,6,zookeeper,admin,html,zoo,keeper,administrator,s,guide,a;private,static,void,write,my,id,to,data,dir,properties,zk,props,int,id,throws,ioexception,if,zk,props,get,property,data,dir,null,throw,new,illegal,configuration,exception,no,data,dir,configured,file,data,dir,new,file,zk,props,get,property,data,dir,if,data,dir,is,directory,data,dir,mkdirs,throw,new,ioexception,cannot,create,data,dir,data,dir,data,dir,delete,on,exit,log,info,writing,to,myid,file,in,data,dir,id,file,writer,writer,new,file,writer,new,file,data,dir,myid,try,writer,write,string,value,of,id,finally,writer,close
FlinkZooKeeperQuorumPeer -> private static void writeMyIdToDataDir(Properties zkProps, int id) throws IOException;1439325619;Write 'myid' file to the 'dataDir' in the given ZooKeeper configuration.__<blockquote>_Every machine that is part of the ZooKeeper ensemble should know about every other machine in_the ensemble. You accomplish this with the series of lines of the form_server.id=host:port:port. The parameters host and port are straightforward. You attribute the_server id to each machine by creating a file named myid, one for each server, which resides_in that server's data directory, as specified by the configuration file parameter dataDir._</blockquote>__@param zkProps ZooKeeper configuration._@param id      The ID of this {@link QuorumPeer}._@throws IllegalConfigurationException Thrown, if 'dataDir' property not set in given_ZooKeeper properties._@throws IOException                   Thrown, if 'dataDir' does not exist and cannot be_created._@see <a href="http://zookeeper.apache.org/doc/r3.4.6/zookeeperAdmin.html">_ZooKeeper Administrator's Guide</a>;private static void writeMyIdToDataDir(Properties zkProps, int id) throws IOException {__		_		if (zkProps.getProperty("dataDir") == null) {_			throw new IllegalConfigurationException("No dataDir configured.")__		}__		File dataDir = new File(zkProps.getProperty("dataDir"))___		if (!dataDir.isDirectory() && !dataDir.mkdirs()) {_			throw new IOException("Cannot create dataDir '" + dataDir + "'.")__		}__		dataDir.deleteOnExit()___		LOG.info("Writing {} to myid file in 'dataDir'.", id)__		_		_		_		FileWriter writer = new FileWriter(new File(dataDir, "myid"))__		try {_			writer.write(String.valueOf(id))__		}_		finally {_			writer.close()__		}_	};write,myid,file,to,the,data,dir,in,the,given,zoo,keeper,configuration,blockquote,every,machine,that,is,part,of,the,zoo,keeper,ensemble,should,know,about,every,other,machine,in,the,ensemble,you,accomplish,this,with,the,series,of,lines,of,the,form,server,id,host,port,port,the,parameters,host,and,port,are,straightforward,you,attribute,the,server,id,to,each,machine,by,creating,a,file,named,myid,one,for,each,server,which,resides,in,that,server,s,data,directory,as,specified,by,the,configuration,file,parameter,data,dir,blockquote,param,zk,props,zoo,keeper,configuration,param,id,the,id,of,this,link,quorum,peer,throws,illegal,configuration,exception,thrown,if,data,dir,property,not,set,in,given,zoo,keeper,properties,throws,ioexception,thrown,if,data,dir,does,not,exist,and,cannot,be,created,see,a,href,http,zookeeper,apache,org,doc,r3,4,6,zookeeper,admin,html,zoo,keeper,administrator,s,guide,a;private,static,void,write,my,id,to,data,dir,properties,zk,props,int,id,throws,ioexception,if,zk,props,get,property,data,dir,null,throw,new,illegal,configuration,exception,no,data,dir,configured,file,data,dir,new,file,zk,props,get,property,data,dir,if,data,dir,is,directory,data,dir,mkdirs,throw,new,ioexception,cannot,create,data,dir,data,dir,data,dir,delete,on,exit,log,info,writing,to,myid,file,in,data,dir,id,file,writer,writer,new,file,writer,new,file,data,dir,myid,try,writer,write,string,value,of,id,finally,writer,close
FlinkZooKeeperQuorumPeer -> private static void writeMyIdToDataDir(Properties zkProps, int id) throws IOException;1451312679;Write 'myid' file to the 'dataDir' in the given ZooKeeper configuration.__<blockquote>_Every machine that is part of the ZooKeeper ensemble should know about every other machine in_the ensemble. You accomplish this with the series of lines of the form_server.id=host:port:port. The parameters host and port are straightforward. You attribute the_server id to each machine by creating a file named myid, one for each server, which resides_in that server's data directory, as specified by the configuration file parameter dataDir._</blockquote>__@param zkProps ZooKeeper configuration._@param id      The ID of this {@link QuorumPeer}._@throws IllegalConfigurationException Thrown, if 'dataDir' property not set in given_ZooKeeper properties._@throws IOException                   Thrown, if 'dataDir' does not exist and cannot be_created._@see <a href="http://zookeeper.apache.org/doc/r3.4.6/zookeeperAdmin.html">_ZooKeeper Administrator's Guide</a>;private static void writeMyIdToDataDir(Properties zkProps, int id) throws IOException {__		_		if (zkProps.getProperty("dataDir") == null) {_			throw new IllegalConfigurationException("No dataDir configured.")__		}__		File dataDir = new File(zkProps.getProperty("dataDir"))___		if (!dataDir.isDirectory() && !dataDir.mkdirs()) {_			throw new IOException("Cannot create dataDir '" + dataDir + "'.")__		}__		dataDir.deleteOnExit()___		LOG.info("Writing {} to myid file in 'dataDir'.", id)__		_		_		_		FileWriter writer = new FileWriter(new File(dataDir, "myid"))__		try {_			writer.write(String.valueOf(id))__		}_		finally {_			writer.close()__		}_	};write,myid,file,to,the,data,dir,in,the,given,zoo,keeper,configuration,blockquote,every,machine,that,is,part,of,the,zoo,keeper,ensemble,should,know,about,every,other,machine,in,the,ensemble,you,accomplish,this,with,the,series,of,lines,of,the,form,server,id,host,port,port,the,parameters,host,and,port,are,straightforward,you,attribute,the,server,id,to,each,machine,by,creating,a,file,named,myid,one,for,each,server,which,resides,in,that,server,s,data,directory,as,specified,by,the,configuration,file,parameter,data,dir,blockquote,param,zk,props,zoo,keeper,configuration,param,id,the,id,of,this,link,quorum,peer,throws,illegal,configuration,exception,thrown,if,data,dir,property,not,set,in,given,zoo,keeper,properties,throws,ioexception,thrown,if,data,dir,does,not,exist,and,cannot,be,created,see,a,href,http,zookeeper,apache,org,doc,r3,4,6,zookeeper,admin,html,zoo,keeper,administrator,s,guide,a;private,static,void,write,my,id,to,data,dir,properties,zk,props,int,id,throws,ioexception,if,zk,props,get,property,data,dir,null,throw,new,illegal,configuration,exception,no,data,dir,configured,file,data,dir,new,file,zk,props,get,property,data,dir,if,data,dir,is,directory,data,dir,mkdirs,throw,new,ioexception,cannot,create,data,dir,data,dir,data,dir,delete,on,exit,log,info,writing,to,myid,file,in,data,dir,id,file,writer,writer,new,file,writer,new,file,data,dir,myid,try,writer,write,string,value,of,id,finally,writer,close
FlinkZooKeeperQuorumPeer -> private static void writeMyIdToDataDir(Properties zkProps, int id) throws IOException;1475883662;Write 'myid' file to the 'dataDir' in the given ZooKeeper configuration.__<blockquote>_Every machine that is part of the ZooKeeper ensemble should know about every other machine in_the ensemble. You accomplish this with the series of lines of the form_server.id=host:port:port. The parameters host and port are straightforward. You attribute the_server id to each machine by creating a file named myid, one for each server, which resides_in that server's data directory, as specified by the configuration file parameter dataDir._</blockquote>__@param zkProps ZooKeeper configuration._@param id      The ID of this {@link QuorumPeer}._@throws IllegalConfigurationException Thrown, if 'dataDir' property not set in given_ZooKeeper properties._@throws IOException                   Thrown, if 'dataDir' does not exist and cannot be_created._@see <a href="http://zookeeper.apache.org/doc/r3.4.6/zookeeperAdmin.html">_ZooKeeper Administrator's Guide</a>;private static void writeMyIdToDataDir(Properties zkProps, int id) throws IOException {__		_		if (zkProps.getProperty("dataDir") == null) {_			throw new IllegalConfigurationException("No dataDir configured.")__		}__		File dataDir = new File(zkProps.getProperty("dataDir"))___		if (!dataDir.isDirectory() && !dataDir.mkdirs()) {_			throw new IOException("Cannot create dataDir '" + dataDir + "'.")__		}__		dataDir.deleteOnExit()___		LOG.info("Writing {} to myid file in 'dataDir'.", id)__		_		_		_		try (FileWriter writer = new FileWriter(new File(dataDir, "myid"))) {_			writer.write(String.valueOf(id))__		}_	};write,myid,file,to,the,data,dir,in,the,given,zoo,keeper,configuration,blockquote,every,machine,that,is,part,of,the,zoo,keeper,ensemble,should,know,about,every,other,machine,in,the,ensemble,you,accomplish,this,with,the,series,of,lines,of,the,form,server,id,host,port,port,the,parameters,host,and,port,are,straightforward,you,attribute,the,server,id,to,each,machine,by,creating,a,file,named,myid,one,for,each,server,which,resides,in,that,server,s,data,directory,as,specified,by,the,configuration,file,parameter,data,dir,blockquote,param,zk,props,zoo,keeper,configuration,param,id,the,id,of,this,link,quorum,peer,throws,illegal,configuration,exception,thrown,if,data,dir,property,not,set,in,given,zoo,keeper,properties,throws,ioexception,thrown,if,data,dir,does,not,exist,and,cannot,be,created,see,a,href,http,zookeeper,apache,org,doc,r3,4,6,zookeeper,admin,html,zoo,keeper,administrator,s,guide,a;private,static,void,write,my,id,to,data,dir,properties,zk,props,int,id,throws,ioexception,if,zk,props,get,property,data,dir,null,throw,new,illegal,configuration,exception,no,data,dir,configured,file,data,dir,new,file,zk,props,get,property,data,dir,if,data,dir,is,directory,data,dir,mkdirs,throw,new,ioexception,cannot,create,data,dir,data,dir,data,dir,delete,on,exit,log,info,writing,to,myid,file,in,data,dir,id,try,file,writer,writer,new,file,writer,new,file,data,dir,myid,writer,write,string,value,of,id
FlinkZooKeeperQuorumPeer -> private static void setRequiredProperties(Properties zkProps);1435914285;Sets required properties to reasonable defaults and logs it.;private static void setRequiredProperties(Properties zkProps) {_		_		if (zkProps.getProperty("clientPort") == null) {_			int clientPort = ConfigConstants.DEFAULT_ZOOKEEPER_CLIENT_PORT__			zkProps.setProperty("clientPort", String.valueOf(clientPort))___			LOG.warn("No 'clientPort' configured. Set to '{}'.", clientPort)__		}__		_		if (zkProps.getProperty("initLimit") == null) {_			int initLimit = ConfigConstants.DEFAULT_ZOOKEEPER_INIT_LIMIT__			zkProps.setProperty("initLimit", String.valueOf(initLimit))___			LOG.warn("No 'initLimit' configured. Set to '{}'.", initLimit)__		}__		_		if (zkProps.getProperty("syncLimit") == null) {_			int syncLimit = ConfigConstants.DEFAULT_ZOOKEEPER_SYNC_LIMIT__			zkProps.setProperty("syncLimit", String.valueOf(syncLimit))___			LOG.warn("No 'syncLimit' configured. Set to '{}'.", syncLimit)__		}__		_		if (zkProps.getProperty("dataDir") == null) {_			String dataDir = String.format("%s/%s/zookeeper",_					System.getProperty("java.io.tmpdir"), UUID.randomUUID().toString())___			zkProps.setProperty("dataDir", dataDir)___			LOG.warn("No 'dataDir' configured. Set to '{}'.", dataDir)__		}__		int peerPort = ConfigConstants.DEFAULT_ZOOKEEPER_PEER_PORT__		int leaderPort = ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PORT___		_		_		for (Map.Entry<Object, Object> entry : zkProps.entrySet()) {_			String key = (String) entry.getKey()___			if (entry.getKey().toString().startsWith("server.")) {_				String value = (String) entry.getValue()__				String[] parts = value.split(":")___				if (parts.length == 1) {_					String address = String.format("%s:%d:%d", parts[0], peerPort, leaderPort)__					zkProps.setProperty(key, address)__					LOG.info("Set peer and leader port of '{}': '{}' => '{}'.",_							key, value, address)__				}_				else if (parts.length == 2) {_					String address = String.format("%s:%d:%d",_							parts[0], Integer.valueOf(parts[1]), leaderPort)__					zkProps.setProperty(key, address)__					LOG.info("Set peer port of '{}': '{}' => '{}'.", key, value, address)__				}_			}_		}_	};sets,required,properties,to,reasonable,defaults,and,logs,it;private,static,void,set,required,properties,properties,zk,props,if,zk,props,get,property,client,port,null,int,client,port,config,constants,zk,props,set,property,client,port,string,value,of,client,port,log,warn,no,client,port,configured,set,to,client,port,if,zk,props,get,property,init,limit,null,int,init,limit,config,constants,zk,props,set,property,init,limit,string,value,of,init,limit,log,warn,no,init,limit,configured,set,to,init,limit,if,zk,props,get,property,sync,limit,null,int,sync,limit,config,constants,zk,props,set,property,sync,limit,string,value,of,sync,limit,log,warn,no,sync,limit,configured,set,to,sync,limit,if,zk,props,get,property,data,dir,null,string,data,dir,string,format,s,s,zookeeper,system,get,property,java,io,tmpdir,uuid,random,uuid,to,string,zk,props,set,property,data,dir,data,dir,log,warn,no,data,dir,configured,set,to,data,dir,int,peer,port,config,constants,int,leader,port,config,constants,for,map,entry,object,object,entry,zk,props,entry,set,string,key,string,entry,get,key,if,entry,get,key,to,string,starts,with,server,string,value,string,entry,get,value,string,parts,value,split,if,parts,length,1,string,address,string,format,s,d,d,parts,0,peer,port,leader,port,zk,props,set,property,key,address,log,info,set,peer,and,leader,port,of,key,value,address,else,if,parts,length,2,string,address,string,format,s,d,d,parts,0,integer,value,of,parts,1,leader,port,zk,props,set,property,key,address,log,info,set,peer,port,of,key,value,address
FlinkZooKeeperQuorumPeer -> private static void setRequiredProperties(Properties zkProps);1436360553;Sets required properties to reasonable defaults and logs it.;private static void setRequiredProperties(Properties zkProps) {_		_		if (zkProps.getProperty("clientPort") == null) {_			int clientPort = ConfigConstants.DEFAULT_ZOOKEEPER_CLIENT_PORT__			zkProps.setProperty("clientPort", String.valueOf(clientPort))___			LOG.warn("No 'clientPort' configured. Set to '{}'.", clientPort)__		}__		_		if (zkProps.getProperty("initLimit") == null) {_			int initLimit = ConfigConstants.DEFAULT_ZOOKEEPER_INIT_LIMIT__			zkProps.setProperty("initLimit", String.valueOf(initLimit))___			LOG.warn("No 'initLimit' configured. Set to '{}'.", initLimit)__		}__		_		if (zkProps.getProperty("syncLimit") == null) {_			int syncLimit = ConfigConstants.DEFAULT_ZOOKEEPER_SYNC_LIMIT__			zkProps.setProperty("syncLimit", String.valueOf(syncLimit))___			LOG.warn("No 'syncLimit' configured. Set to '{}'.", syncLimit)__		}__		_		if (zkProps.getProperty("dataDir") == null) {_			String dataDir = String.format("%s/%s/zookeeper",_					System.getProperty("java.io.tmpdir"), UUID.randomUUID().toString())___			zkProps.setProperty("dataDir", dataDir)___			LOG.warn("No 'dataDir' configured. Set to '{}'.", dataDir)__		}__		int peerPort = ConfigConstants.DEFAULT_ZOOKEEPER_PEER_PORT__		int leaderPort = ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PORT___		_		_		for (Map.Entry<Object, Object> entry : zkProps.entrySet()) {_			String key = (String) entry.getKey()___			if (entry.getKey().toString().startsWith("server.")) {_				String value = (String) entry.getValue()__				String[] parts = value.split(":")___				if (parts.length == 1) {_					String address = String.format("%s:%d:%d", parts[0], peerPort, leaderPort)__					zkProps.setProperty(key, address)__					LOG.info("Set peer and leader port of '{}': '{}' => '{}'.",_							key, value, address)__				}_				else if (parts.length == 2) {_					String address = String.format("%s:%d:%d",_							parts[0], Integer.valueOf(parts[1]), leaderPort)__					zkProps.setProperty(key, address)__					LOG.info("Set peer port of '{}': '{}' => '{}'.", key, value, address)__				}_			}_		}_	};sets,required,properties,to,reasonable,defaults,and,logs,it;private,static,void,set,required,properties,properties,zk,props,if,zk,props,get,property,client,port,null,int,client,port,config,constants,zk,props,set,property,client,port,string,value,of,client,port,log,warn,no,client,port,configured,set,to,client,port,if,zk,props,get,property,init,limit,null,int,init,limit,config,constants,zk,props,set,property,init,limit,string,value,of,init,limit,log,warn,no,init,limit,configured,set,to,init,limit,if,zk,props,get,property,sync,limit,null,int,sync,limit,config,constants,zk,props,set,property,sync,limit,string,value,of,sync,limit,log,warn,no,sync,limit,configured,set,to,sync,limit,if,zk,props,get,property,data,dir,null,string,data,dir,string,format,s,s,zookeeper,system,get,property,java,io,tmpdir,uuid,random,uuid,to,string,zk,props,set,property,data,dir,data,dir,log,warn,no,data,dir,configured,set,to,data,dir,int,peer,port,config,constants,int,leader,port,config,constants,for,map,entry,object,object,entry,zk,props,entry,set,string,key,string,entry,get,key,if,entry,get,key,to,string,starts,with,server,string,value,string,entry,get,value,string,parts,value,split,if,parts,length,1,string,address,string,format,s,d,d,parts,0,peer,port,leader,port,zk,props,set,property,key,address,log,info,set,peer,and,leader,port,of,key,value,address,else,if,parts,length,2,string,address,string,format,s,d,d,parts,0,integer,value,of,parts,1,leader,port,zk,props,set,property,key,address,log,info,set,peer,port,of,key,value,address
FlinkZooKeeperQuorumPeer -> private static void setRequiredProperties(Properties zkProps);1439325619;Sets required properties to reasonable defaults and logs it.;private static void setRequiredProperties(Properties zkProps) {_		_		if (zkProps.getProperty("clientPort") == null) {_			int clientPort = ConfigConstants.DEFAULT_ZOOKEEPER_CLIENT_PORT__			zkProps.setProperty("clientPort", String.valueOf(clientPort))___			LOG.warn("No 'clientPort' configured. Set to '{}'.", clientPort)__		}__		_		if (zkProps.getProperty("initLimit") == null) {_			int initLimit = ConfigConstants.DEFAULT_ZOOKEEPER_INIT_LIMIT__			zkProps.setProperty("initLimit", String.valueOf(initLimit))___			LOG.warn("No 'initLimit' configured. Set to '{}'.", initLimit)__		}__		_		if (zkProps.getProperty("syncLimit") == null) {_			int syncLimit = ConfigConstants.DEFAULT_ZOOKEEPER_SYNC_LIMIT__			zkProps.setProperty("syncLimit", String.valueOf(syncLimit))___			LOG.warn("No 'syncLimit' configured. Set to '{}'.", syncLimit)__		}__		_		if (zkProps.getProperty("dataDir") == null) {_			String dataDir = String.format("%s/%s/zookeeper",_					System.getProperty("java.io.tmpdir"), UUID.randomUUID().toString())___			zkProps.setProperty("dataDir", dataDir)___			LOG.warn("No 'dataDir' configured. Set to '{}'.", dataDir)__		}__		int peerPort = ConfigConstants.DEFAULT_ZOOKEEPER_PEER_PORT__		int leaderPort = ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PORT___		_		_		for (Map.Entry<Object, Object> entry : zkProps.entrySet()) {_			String key = (String) entry.getKey()___			if (entry.getKey().toString().startsWith("server.")) {_				String value = (String) entry.getValue()__				String[] parts = value.split(":")___				if (parts.length == 1) {_					String address = String.format("%s:%d:%d", parts[0], peerPort, leaderPort)__					zkProps.setProperty(key, address)__					LOG.info("Set peer and leader port of '{}': '{}' => '{}'.",_							key, value, address)__				}_				else if (parts.length == 2) {_					String address = String.format("%s:%d:%d",_							parts[0], Integer.valueOf(parts[1]), leaderPort)__					zkProps.setProperty(key, address)__					LOG.info("Set peer port of '{}': '{}' => '{}'.", key, value, address)__				}_			}_		}_	};sets,required,properties,to,reasonable,defaults,and,logs,it;private,static,void,set,required,properties,properties,zk,props,if,zk,props,get,property,client,port,null,int,client,port,config,constants,zk,props,set,property,client,port,string,value,of,client,port,log,warn,no,client,port,configured,set,to,client,port,if,zk,props,get,property,init,limit,null,int,init,limit,config,constants,zk,props,set,property,init,limit,string,value,of,init,limit,log,warn,no,init,limit,configured,set,to,init,limit,if,zk,props,get,property,sync,limit,null,int,sync,limit,config,constants,zk,props,set,property,sync,limit,string,value,of,sync,limit,log,warn,no,sync,limit,configured,set,to,sync,limit,if,zk,props,get,property,data,dir,null,string,data,dir,string,format,s,s,zookeeper,system,get,property,java,io,tmpdir,uuid,random,uuid,to,string,zk,props,set,property,data,dir,data,dir,log,warn,no,data,dir,configured,set,to,data,dir,int,peer,port,config,constants,int,leader,port,config,constants,for,map,entry,object,object,entry,zk,props,entry,set,string,key,string,entry,get,key,if,entry,get,key,to,string,starts,with,server,string,value,string,entry,get,value,string,parts,value,split,if,parts,length,1,string,address,string,format,s,d,d,parts,0,peer,port,leader,port,zk,props,set,property,key,address,log,info,set,peer,and,leader,port,of,key,value,address,else,if,parts,length,2,string,address,string,format,s,d,d,parts,0,integer,value,of,parts,1,leader,port,zk,props,set,property,key,address,log,info,set,peer,port,of,key,value,address
FlinkZooKeeperQuorumPeer -> private static void setRequiredProperties(Properties zkProps);1451312679;Sets required properties to reasonable defaults and logs it.;private static void setRequiredProperties(Properties zkProps) {_		_		if (zkProps.getProperty("clientPort") == null) {_			int clientPort = ConfigConstants.DEFAULT_ZOOKEEPER_CLIENT_PORT__			zkProps.setProperty("clientPort", String.valueOf(clientPort))___			LOG.warn("No 'clientPort' configured. Set to '{}'.", clientPort)__		}__		_		if (zkProps.getProperty("initLimit") == null) {_			int initLimit = ConfigConstants.DEFAULT_ZOOKEEPER_INIT_LIMIT__			zkProps.setProperty("initLimit", String.valueOf(initLimit))___			LOG.warn("No 'initLimit' configured. Set to '{}'.", initLimit)__		}__		_		if (zkProps.getProperty("syncLimit") == null) {_			int syncLimit = ConfigConstants.DEFAULT_ZOOKEEPER_SYNC_LIMIT__			zkProps.setProperty("syncLimit", String.valueOf(syncLimit))___			LOG.warn("No 'syncLimit' configured. Set to '{}'.", syncLimit)__		}__		_		if (zkProps.getProperty("dataDir") == null) {_			String dataDir = String.format("%s/%s/zookeeper",_					System.getProperty("java.io.tmpdir"), UUID.randomUUID().toString())___			zkProps.setProperty("dataDir", dataDir)___			LOG.warn("No 'dataDir' configured. Set to '{}'.", dataDir)__		}__		int peerPort = ConfigConstants.DEFAULT_ZOOKEEPER_PEER_PORT__		int leaderPort = ConfigConstants.DEFAULT_ZOOKEEPER_LEADER_PORT___		_		_		for (Map.Entry<Object, Object> entry : zkProps.entrySet()) {_			String key = (String) entry.getKey()___			if (entry.getKey().toString().startsWith("server.")) {_				String value = (String) entry.getValue()__				String[] parts = value.split(":")___				if (parts.length == 1) {_					String address = String.format("%s:%d:%d", parts[0], peerPort, leaderPort)__					zkProps.setProperty(key, address)__					LOG.info("Set peer and leader port of '{}': '{}' => '{}'.",_							key, value, address)__				}_				else if (parts.length == 2) {_					String address = String.format("%s:%d:%d",_							parts[0], Integer.valueOf(parts[1]), leaderPort)__					zkProps.setProperty(key, address)__					LOG.info("Set peer port of '{}': '{}' => '{}'.", key, value, address)__				}_			}_		}_	};sets,required,properties,to,reasonable,defaults,and,logs,it;private,static,void,set,required,properties,properties,zk,props,if,zk,props,get,property,client,port,null,int,client,port,config,constants,zk,props,set,property,client,port,string,value,of,client,port,log,warn,no,client,port,configured,set,to,client,port,if,zk,props,get,property,init,limit,null,int,init,limit,config,constants,zk,props,set,property,init,limit,string,value,of,init,limit,log,warn,no,init,limit,configured,set,to,init,limit,if,zk,props,get,property,sync,limit,null,int,sync,limit,config,constants,zk,props,set,property,sync,limit,string,value,of,sync,limit,log,warn,no,sync,limit,configured,set,to,sync,limit,if,zk,props,get,property,data,dir,null,string,data,dir,string,format,s,s,zookeeper,system,get,property,java,io,tmpdir,uuid,random,uuid,to,string,zk,props,set,property,data,dir,data,dir,log,warn,no,data,dir,configured,set,to,data,dir,int,peer,port,config,constants,int,leader,port,config,constants,for,map,entry,object,object,entry,zk,props,entry,set,string,key,string,entry,get,key,if,entry,get,key,to,string,starts,with,server,string,value,string,entry,get,value,string,parts,value,split,if,parts,length,1,string,address,string,format,s,d,d,parts,0,peer,port,leader,port,zk,props,set,property,key,address,log,info,set,peer,and,leader,port,of,key,value,address,else,if,parts,length,2,string,address,string,format,s,d,d,parts,0,integer,value,of,parts,1,leader,port,zk,props,set,property,key,address,log,info,set,peer,port,of,key,value,address
FlinkZooKeeperQuorumPeer -> private static void setRequiredProperties(Properties zkProps);1475883662;Sets required properties to reasonable defaults and logs it.;private static void setRequiredProperties(Properties zkProps) {_		_		if (zkProps.getProperty("clientPort") == null) {_			zkProps.setProperty("clientPort", String.valueOf(DEFAULT_ZOOKEEPER_CLIENT_PORT))___			LOG.warn("No 'clientPort' configured. Set to '{}'.", DEFAULT_ZOOKEEPER_CLIENT_PORT)__		}__		_		if (zkProps.getProperty("initLimit") == null) {_			zkProps.setProperty("initLimit", String.valueOf(DEFAULT_ZOOKEEPER_INIT_LIMIT))___			LOG.warn("No 'initLimit' configured. Set to '{}'.", DEFAULT_ZOOKEEPER_INIT_LIMIT)__		}__		_		if (zkProps.getProperty("syncLimit") == null) {_			zkProps.setProperty("syncLimit", String.valueOf(DEFAULT_ZOOKEEPER_SYNC_LIMIT))___			LOG.warn("No 'syncLimit' configured. Set to '{}'.", DEFAULT_ZOOKEEPER_SYNC_LIMIT)__		}__		_		if (zkProps.getProperty("dataDir") == null) {_			String dataDir = String.format("%s/%s/zookeeper",_					System.getProperty("java.io.tmpdir"), UUID.randomUUID().toString())___			zkProps.setProperty("dataDir", dataDir)___			LOG.warn("No 'dataDir' configured. Set to '{}'.", dataDir)__		}__		int peerPort = DEFAULT_ZOOKEEPER_PEER_PORT__		int leaderPort = DEFAULT_ZOOKEEPER_LEADER_PORT___		_		_		for (Map.Entry<Object, Object> entry : zkProps.entrySet()) {_			String key = (String) entry.getKey()___			if (entry.getKey().toString().startsWith("server.")) {_				String value = (String) entry.getValue()__				String[] parts = value.split(":")___				if (parts.length == 1) {_					String address = String.format("%s:%d:%d", parts[0], peerPort, leaderPort)__					zkProps.setProperty(key, address)__					LOG.info("Set peer and leader port of '{}': '{}' => '{}'.",_							key, value, address)__				}_				else if (parts.length == 2) {_					String address = String.format("%s:%d:%d",_							parts[0], Integer.valueOf(parts[1]), leaderPort)__					zkProps.setProperty(key, address)__					LOG.info("Set peer port of '{}': '{}' => '{}'.", key, value, address)__				}_			}_		}_	};sets,required,properties,to,reasonable,defaults,and,logs,it;private,static,void,set,required,properties,properties,zk,props,if,zk,props,get,property,client,port,null,zk,props,set,property,client,port,string,value,of,log,warn,no,client,port,configured,set,to,if,zk,props,get,property,init,limit,null,zk,props,set,property,init,limit,string,value,of,log,warn,no,init,limit,configured,set,to,if,zk,props,get,property,sync,limit,null,zk,props,set,property,sync,limit,string,value,of,log,warn,no,sync,limit,configured,set,to,if,zk,props,get,property,data,dir,null,string,data,dir,string,format,s,s,zookeeper,system,get,property,java,io,tmpdir,uuid,random,uuid,to,string,zk,props,set,property,data,dir,data,dir,log,warn,no,data,dir,configured,set,to,data,dir,int,peer,port,int,leader,port,for,map,entry,object,object,entry,zk,props,entry,set,string,key,string,entry,get,key,if,entry,get,key,to,string,starts,with,server,string,value,string,entry,get,value,string,parts,value,split,if,parts,length,1,string,address,string,format,s,d,d,parts,0,peer,port,leader,port,zk,props,set,property,key,address,log,info,set,peer,and,leader,port,of,key,value,address,else,if,parts,length,2,string,address,string,format,s,d,d,parts,0,integer,value,of,parts,1,leader,port,zk,props,set,property,key,address,log,info,set,peer,port,of,key,value,address
