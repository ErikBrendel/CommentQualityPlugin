# id;timestamp;commentText;codeText;commentWords;codeWords
EventSerializer -> public static boolean isEvent(final Buffer buffer, 		final Class<?> eventClass, 		final ClassLoader classLoader) throws IOException;1481203054;Identifies whether the given buffer encodes the given event.__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;public static boolean isEvent(final Buffer buffer,_		final Class<?> eventClass,_		final ClassLoader classLoader) throws IOException {_		return !buffer.isBuffer() &&_			isEvent(buffer.getNioBuffer(), eventClass, classLoader)__	};identifies,whether,the,given,buffer,encodes,the,given,event,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;public,static,boolean,is,event,final,buffer,buffer,final,class,event,class,final,class,loader,class,loader,throws,ioexception,return,buffer,is,buffer,is,event,buffer,get,nio,buffer,event,class,class,loader
EventSerializer -> public static boolean isEvent(final Buffer buffer, 		final Class<?> eventClass, 		final ClassLoader classLoader) throws IOException;1487264183;Identifies whether the given buffer encodes the given event.__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;public static boolean isEvent(final Buffer buffer,_		final Class<?> eventClass,_		final ClassLoader classLoader) throws IOException {_		return !buffer.isBuffer() &&_			isEvent(buffer.getNioBuffer(), eventClass, classLoader)__	};identifies,whether,the,given,buffer,encodes,the,given,event,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;public,static,boolean,is,event,final,buffer,buffer,final,class,event,class,final,class,loader,class,loader,throws,ioexception,return,buffer,is,buffer,is,event,buffer,get,nio,buffer,event,class,class,loader
EventSerializer -> public static boolean isEvent(final Buffer buffer, 		final Class<?> eventClass, 		final ClassLoader classLoader) throws IOException;1487769109;Identifies whether the given buffer encodes the given event.__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;public static boolean isEvent(final Buffer buffer,_		final Class<?> eventClass,_		final ClassLoader classLoader) throws IOException {_		return !buffer.isBuffer() &&_			isEvent(buffer.getNioBuffer(), eventClass, classLoader)__	};identifies,whether,the,given,buffer,encodes,the,given,event,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;public,static,boolean,is,event,final,buffer,buffer,final,class,event,class,final,class,loader,class,loader,throws,ioexception,return,buffer,is,buffer,is,event,buffer,get,nio,buffer,event,class,class,loader
EventSerializer -> public static boolean isEvent(final Buffer buffer, 		final Class<?> eventClass, 		final ClassLoader classLoader) throws IOException;1508933797;Identifies whether the given buffer encodes the given event.__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;public static boolean isEvent(final Buffer buffer,_		final Class<?> eventClass,_		final ClassLoader classLoader) throws IOException {_		return !buffer.isBuffer() &&_			isEvent(buffer.getNioBuffer(), eventClass, classLoader)__	};identifies,whether,the,given,buffer,encodes,the,given,event,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;public,static,boolean,is,event,final,buffer,buffer,final,class,event,class,final,class,loader,class,loader,throws,ioexception,return,buffer,is,buffer,is,event,buffer,get,nio,buffer,event,class,class,loader
EventSerializer -> public static boolean isEvent(final Buffer buffer, 		final Class<?> eventClass, 		final ClassLoader classLoader) throws IOException;1509643643;Identifies whether the given buffer encodes the given event.__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;public static boolean isEvent(final Buffer buffer,_		final Class<?> eventClass,_		final ClassLoader classLoader) throws IOException {_		return !buffer.isBuffer() &&_			isEvent(buffer.getNioBuffer(), eventClass, classLoader)__	};identifies,whether,the,given,buffer,encodes,the,given,event,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;public,static,boolean,is,event,final,buffer,buffer,final,class,event,class,final,class,loader,class,loader,throws,ioexception,return,buffer,is,buffer,is,event,buffer,get,nio,buffer,event,class,class,loader
EventSerializer -> public static boolean isEvent(final Buffer buffer, 		final Class<?> eventClass, 		final ClassLoader classLoader) throws IOException;1515514130;Identifies whether the given buffer encodes the given event.__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;public static boolean isEvent(final Buffer buffer,_		final Class<?> eventClass,_		final ClassLoader classLoader) throws IOException {_		return !buffer.isBuffer() &&_			isEvent(buffer.getNioBufferReadable(), eventClass, classLoader)__	};identifies,whether,the,given,buffer,encodes,the,given,event,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;public,static,boolean,is,event,final,buffer,buffer,final,class,event,class,final,class,loader,class,loader,throws,ioexception,return,buffer,is,buffer,is,event,buffer,get,nio,buffer,readable,event,class,class,loader
EventSerializer -> public static boolean isEvent(final Buffer buffer, 		final Class<?> eventClass, 		final ClassLoader classLoader) throws IOException;1515600963;Identifies whether the given buffer encodes the given event.__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;public static boolean isEvent(final Buffer buffer,_		final Class<?> eventClass,_		final ClassLoader classLoader) throws IOException {_		return !buffer.isBuffer() &&_			isEvent(buffer.getNioBufferReadable(), eventClass, classLoader)__	};identifies,whether,the,given,buffer,encodes,the,given,event,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;public,static,boolean,is,event,final,buffer,buffer,final,class,event,class,final,class,loader,class,loader,throws,ioexception,return,buffer,is,buffer,is,event,buffer,get,nio,buffer,readable,event,class,class,loader
EventSerializer -> public static boolean isEvent(final Buffer buffer, 		final Class<?> eventClass, 		final ClassLoader classLoader) throws IOException;1515604430;Identifies whether the given buffer encodes the given event.__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;public static boolean isEvent(final Buffer buffer,_		final Class<?> eventClass,_		final ClassLoader classLoader) throws IOException {_		return !buffer.isBuffer() &&_			isEvent(buffer.getNioBufferReadable(), eventClass, classLoader)__	};identifies,whether,the,given,buffer,encodes,the,given,event,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;public,static,boolean,is,event,final,buffer,buffer,final,class,event,class,final,class,loader,class,loader,throws,ioexception,return,buffer,is,buffer,is,event,buffer,get,nio,buffer,readable,event,class,class,loader
EventSerializer -> public static boolean isEvent(final Buffer buffer, 		final Class<?> eventClass, 		final ClassLoader classLoader) throws IOException;1516267728;Identifies whether the given buffer encodes the given event.__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>;public static boolean isEvent(final Buffer buffer,_		final Class<?> eventClass,_		final ClassLoader classLoader) throws IOException {_		return !buffer.isBuffer() &&_			isEvent(buffer.getNioBufferReadable(), eventClass, classLoader)__	};identifies,whether,the,given,buffer,encodes,the,given,event,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt;public,static,boolean,is,event,final,buffer,buffer,final,class,event,class,final,class,loader,class,loader,throws,ioexception,return,buffer,is,buffer,is,event,buffer,get,nio,buffer,readable,event,class,class,loader
EventSerializer -> public static boolean isEvent(final Buffer buffer, 		final Class<?> eventClass, 		final ClassLoader classLoader) throws IOException;1516365428;Identifies whether the given buffer encodes the given event.__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>;public static boolean isEvent(final Buffer buffer,_		final Class<?> eventClass,_		final ClassLoader classLoader) throws IOException {_		return !buffer.isBuffer() &&_			isEvent(buffer.getNioBufferReadable(), eventClass, classLoader)__	};identifies,whether,the,given,buffer,encodes,the,given,event,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt;public,static,boolean,is,event,final,buffer,buffer,final,class,event,class,final,class,loader,class,loader,throws,ioexception,return,buffer,is,buffer,is,event,buffer,get,nio,buffer,readable,event,class,class,loader
EventSerializer -> public static boolean isEvent(final Buffer buffer, 		final Class<?> eventClass, 		final ClassLoader classLoader) throws IOException;1516959754;Identifies whether the given buffer encodes the given event.__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>;public static boolean isEvent(final Buffer buffer,_		final Class<?> eventClass,_		final ClassLoader classLoader) throws IOException {_		return !buffer.isBuffer() &&_			isEvent(buffer.getNioBufferReadable(), eventClass, classLoader)__	};identifies,whether,the,given,buffer,encodes,the,given,event,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt;public,static,boolean,is,event,final,buffer,buffer,final,class,event,class,final,class,loader,class,loader,throws,ioexception,return,buffer,is,buffer,is,event,buffer,get,nio,buffer,readable,event,class,class,loader
EventSerializer -> private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException;1481203054;Identifies whether the given buffer encodes the given event.__<p><strong>Pre-condition</strong>: This buffer must encode some event!</p>__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException {_		if (buffer.remaining() < 4) {_			throw new IOException("Incomplete event")__		}__		final int bufferPos = buffer.position()__		final ByteOrder bufferOrder = buffer.order()__		buffer.order(ByteOrder.BIG_ENDIAN)___		try {_			int type = buffer.getInt()___			switch (type) {_				case END_OF_PARTITION_EVENT:_					return eventClass.equals(EndOfPartitionEvent.class)__				case CHECKPOINT_BARRIER_EVENT:_					return eventClass.equals(CheckpointBarrier.class)__				case END_OF_SUPERSTEP_EVENT:_					return eventClass.equals(EndOfSuperstepEvent.class)__				case CANCEL_CHECKPOINT_MARKER_EVENT:_					return eventClass.equals(CancelCheckpointMarker.class)__				case OTHER_EVENT:_					try {_						final DataInputDeserializer deserializer = new DataInputDeserializer(buffer)__						final String className = deserializer.readUTF()___						final Class<? extends AbstractEvent> clazz__						try {_							clazz = classLoader.loadClass(className).asSubclass(AbstractEvent.class)__						}_						catch (ClassNotFoundException e) {_							throw new IOException("Could not load event class '" + className + "'.", e)__						}_						catch (ClassCastException e) {_							throw new IOException("The class '" + className + "' is not a valid subclass of '"_								+ AbstractEvent.class.getName() + "'.", e)__						}_						return eventClass.equals(clazz)__					}_					catch (Exception e) {_						throw new IOException("Error while deserializing or instantiating event.", e)__					}_				default:_					throw new IOException("Corrupt byte stream for event")__			}_		}_		finally {_			buffer.order(bufferOrder)__			_			buffer.position(bufferPos)__		}_	};identifies,whether,the,given,buffer,encodes,the,given,event,p,strong,pre,condition,strong,this,buffer,must,encode,some,event,p,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;private,static,boolean,is,event,byte,buffer,buffer,class,event,class,class,loader,class,loader,throws,ioexception,if,buffer,remaining,4,throw,new,ioexception,incomplete,event,final,int,buffer,pos,buffer,position,final,byte,order,buffer,order,buffer,order,buffer,order,byte,order,try,int,type,buffer,get,int,switch,type,case,return,event,class,equals,end,of,partition,event,class,case,return,event,class,equals,checkpoint,barrier,class,case,return,event,class,equals,end,of,superstep,event,class,case,return,event,class,equals,cancel,checkpoint,marker,class,case,try,final,data,input,deserializer,deserializer,new,data,input,deserializer,buffer,final,string,class,name,deserializer,read,utf,final,class,extends,abstract,event,clazz,try,clazz,class,loader,load,class,class,name,as,subclass,abstract,event,class,catch,class,not,found,exception,e,throw,new,ioexception,could,not,load,event,class,class,name,e,catch,class,cast,exception,e,throw,new,ioexception,the,class,class,name,is,not,a,valid,subclass,of,abstract,event,class,get,name,e,return,event,class,equals,clazz,catch,exception,e,throw,new,ioexception,error,while,deserializing,or,instantiating,event,e,default,throw,new,ioexception,corrupt,byte,stream,for,event,finally,buffer,order,buffer,order,buffer,position,buffer,pos
EventSerializer -> private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException;1487264183;Identifies whether the given buffer encodes the given event.__<p><strong>Pre-condition</strong>: This buffer must encode some event!</p>__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException {_		if (buffer.remaining() < 4) {_			throw new IOException("Incomplete event")__		}__		final int bufferPos = buffer.position()__		final ByteOrder bufferOrder = buffer.order()__		buffer.order(ByteOrder.BIG_ENDIAN)___		try {_			int type = buffer.getInt()___			switch (type) {_				case END_OF_PARTITION_EVENT:_					return eventClass.equals(EndOfPartitionEvent.class)__				case CHECKPOINT_BARRIER_EVENT:_					return eventClass.equals(CheckpointBarrier.class)__				case END_OF_SUPERSTEP_EVENT:_					return eventClass.equals(EndOfSuperstepEvent.class)__				case CANCEL_CHECKPOINT_MARKER_EVENT:_					return eventClass.equals(CancelCheckpointMarker.class)__				case OTHER_EVENT:_					try {_						final DataInputDeserializer deserializer = new DataInputDeserializer(buffer)__						final String className = deserializer.readUTF()___						final Class<? extends AbstractEvent> clazz__						try {_							clazz = classLoader.loadClass(className).asSubclass(AbstractEvent.class)__						}_						catch (ClassNotFoundException e) {_							throw new IOException("Could not load event class '" + className + "'.", e)__						}_						catch (ClassCastException e) {_							throw new IOException("The class '" + className + "' is not a valid subclass of '"_								+ AbstractEvent.class.getName() + "'.", e)__						}_						return eventClass.equals(clazz)__					}_					catch (Exception e) {_						throw new IOException("Error while deserializing or instantiating event.", e)__					}_				default:_					throw new IOException("Corrupt byte stream for event")__			}_		}_		finally {_			buffer.order(bufferOrder)__			_			buffer.position(bufferPos)__		}_	};identifies,whether,the,given,buffer,encodes,the,given,event,p,strong,pre,condition,strong,this,buffer,must,encode,some,event,p,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;private,static,boolean,is,event,byte,buffer,buffer,class,event,class,class,loader,class,loader,throws,ioexception,if,buffer,remaining,4,throw,new,ioexception,incomplete,event,final,int,buffer,pos,buffer,position,final,byte,order,buffer,order,buffer,order,buffer,order,byte,order,try,int,type,buffer,get,int,switch,type,case,return,event,class,equals,end,of,partition,event,class,case,return,event,class,equals,checkpoint,barrier,class,case,return,event,class,equals,end,of,superstep,event,class,case,return,event,class,equals,cancel,checkpoint,marker,class,case,try,final,data,input,deserializer,deserializer,new,data,input,deserializer,buffer,final,string,class,name,deserializer,read,utf,final,class,extends,abstract,event,clazz,try,clazz,class,loader,load,class,class,name,as,subclass,abstract,event,class,catch,class,not,found,exception,e,throw,new,ioexception,could,not,load,event,class,class,name,e,catch,class,cast,exception,e,throw,new,ioexception,the,class,class,name,is,not,a,valid,subclass,of,abstract,event,class,get,name,e,return,event,class,equals,clazz,catch,exception,e,throw,new,ioexception,error,while,deserializing,or,instantiating,event,e,default,throw,new,ioexception,corrupt,byte,stream,for,event,finally,buffer,order,buffer,order,buffer,position,buffer,pos
EventSerializer -> private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException;1487769109;Identifies whether the given buffer encodes the given event.__<p><strong>Pre-condition</strong>: This buffer must encode some event!</p>__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException {_		if (buffer.remaining() < 4) {_			throw new IOException("Incomplete event")__		}__		final int bufferPos = buffer.position()__		final ByteOrder bufferOrder = buffer.order()__		buffer.order(ByteOrder.BIG_ENDIAN)___		try {_			int type = buffer.getInt()___			switch (type) {_				case END_OF_PARTITION_EVENT:_					return eventClass.equals(EndOfPartitionEvent.class)__				case CHECKPOINT_BARRIER_EVENT:_					return eventClass.equals(CheckpointBarrier.class)__				case END_OF_SUPERSTEP_EVENT:_					return eventClass.equals(EndOfSuperstepEvent.class)__				case CANCEL_CHECKPOINT_MARKER_EVENT:_					return eventClass.equals(CancelCheckpointMarker.class)__				case OTHER_EVENT:_					try {_						final DataInputDeserializer deserializer = new DataInputDeserializer(buffer)__						final String className = deserializer.readUTF()___						final Class<? extends AbstractEvent> clazz__						try {_							clazz = classLoader.loadClass(className).asSubclass(AbstractEvent.class)__						}_						catch (ClassNotFoundException e) {_							throw new IOException("Could not load event class '" + className + "'.", e)__						}_						catch (ClassCastException e) {_							throw new IOException("The class '" + className + "' is not a valid subclass of '"_								+ AbstractEvent.class.getName() + "'.", e)__						}_						return eventClass.equals(clazz)__					}_					catch (Exception e) {_						throw new IOException("Error while deserializing or instantiating event.", e)__					}_				default:_					throw new IOException("Corrupt byte stream for event")__			}_		}_		finally {_			buffer.order(bufferOrder)__			_			buffer.position(bufferPos)__		}_	};identifies,whether,the,given,buffer,encodes,the,given,event,p,strong,pre,condition,strong,this,buffer,must,encode,some,event,p,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;private,static,boolean,is,event,byte,buffer,buffer,class,event,class,class,loader,class,loader,throws,ioexception,if,buffer,remaining,4,throw,new,ioexception,incomplete,event,final,int,buffer,pos,buffer,position,final,byte,order,buffer,order,buffer,order,buffer,order,byte,order,try,int,type,buffer,get,int,switch,type,case,return,event,class,equals,end,of,partition,event,class,case,return,event,class,equals,checkpoint,barrier,class,case,return,event,class,equals,end,of,superstep,event,class,case,return,event,class,equals,cancel,checkpoint,marker,class,case,try,final,data,input,deserializer,deserializer,new,data,input,deserializer,buffer,final,string,class,name,deserializer,read,utf,final,class,extends,abstract,event,clazz,try,clazz,class,loader,load,class,class,name,as,subclass,abstract,event,class,catch,class,not,found,exception,e,throw,new,ioexception,could,not,load,event,class,class,name,e,catch,class,cast,exception,e,throw,new,ioexception,the,class,class,name,is,not,a,valid,subclass,of,abstract,event,class,get,name,e,return,event,class,equals,clazz,catch,exception,e,throw,new,ioexception,error,while,deserializing,or,instantiating,event,e,default,throw,new,ioexception,corrupt,byte,stream,for,event,finally,buffer,order,buffer,order,buffer,position,buffer,pos
EventSerializer -> private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException;1508933797;Identifies whether the given buffer encodes the given event.__<p><strong>Pre-condition</strong>: This buffer must encode some event!</p>__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException {_		if (buffer.remaining() < 4) {_			throw new IOException("Incomplete event")__		}__		final int bufferPos = buffer.position()__		final ByteOrder bufferOrder = buffer.order()__		buffer.order(ByteOrder.BIG_ENDIAN)___		try {_			int type = buffer.getInt()___			switch (type) {_				case END_OF_PARTITION_EVENT:_					return eventClass.equals(EndOfPartitionEvent.class)__				case CHECKPOINT_BARRIER_EVENT:_					return eventClass.equals(CheckpointBarrier.class)__				case END_OF_SUPERSTEP_EVENT:_					return eventClass.equals(EndOfSuperstepEvent.class)__				case CANCEL_CHECKPOINT_MARKER_EVENT:_					return eventClass.equals(CancelCheckpointMarker.class)__				case OTHER_EVENT:_					try {_						final DataInputDeserializer deserializer = new DataInputDeserializer(buffer)__						final String className = deserializer.readUTF()___						final Class<? extends AbstractEvent> clazz__						try {_							clazz = classLoader.loadClass(className).asSubclass(AbstractEvent.class)__						}_						catch (ClassNotFoundException e) {_							throw new IOException("Could not load event class '" + className + "'.", e)__						}_						catch (ClassCastException e) {_							throw new IOException("The class '" + className + "' is not a valid subclass of '"_								+ AbstractEvent.class.getName() + "'.", e)__						}_						return eventClass.equals(clazz)__					}_					catch (Exception e) {_						throw new IOException("Error while deserializing or instantiating event.", e)__					}_				default:_					throw new IOException("Corrupt byte stream for event")__			}_		}_		finally {_			buffer.order(bufferOrder)__			_			buffer.position(bufferPos)__		}_	};identifies,whether,the,given,buffer,encodes,the,given,event,p,strong,pre,condition,strong,this,buffer,must,encode,some,event,p,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;private,static,boolean,is,event,byte,buffer,buffer,class,event,class,class,loader,class,loader,throws,ioexception,if,buffer,remaining,4,throw,new,ioexception,incomplete,event,final,int,buffer,pos,buffer,position,final,byte,order,buffer,order,buffer,order,buffer,order,byte,order,try,int,type,buffer,get,int,switch,type,case,return,event,class,equals,end,of,partition,event,class,case,return,event,class,equals,checkpoint,barrier,class,case,return,event,class,equals,end,of,superstep,event,class,case,return,event,class,equals,cancel,checkpoint,marker,class,case,try,final,data,input,deserializer,deserializer,new,data,input,deserializer,buffer,final,string,class,name,deserializer,read,utf,final,class,extends,abstract,event,clazz,try,clazz,class,loader,load,class,class,name,as,subclass,abstract,event,class,catch,class,not,found,exception,e,throw,new,ioexception,could,not,load,event,class,class,name,e,catch,class,cast,exception,e,throw,new,ioexception,the,class,class,name,is,not,a,valid,subclass,of,abstract,event,class,get,name,e,return,event,class,equals,clazz,catch,exception,e,throw,new,ioexception,error,while,deserializing,or,instantiating,event,e,default,throw,new,ioexception,corrupt,byte,stream,for,event,finally,buffer,order,buffer,order,buffer,position,buffer,pos
EventSerializer -> private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException;1509643643;Identifies whether the given buffer encodes the given event.__<p><strong>Pre-condition</strong>: This buffer must encode some event!</p>__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException {_		if (buffer.remaining() < 4) {_			throw new IOException("Incomplete event")__		}__		final int bufferPos = buffer.position()__		final ByteOrder bufferOrder = buffer.order()__		buffer.order(ByteOrder.BIG_ENDIAN)___		try {_			int type = buffer.getInt()___			switch (type) {_				case END_OF_PARTITION_EVENT:_					return eventClass.equals(EndOfPartitionEvent.class)__				case CHECKPOINT_BARRIER_EVENT:_					return eventClass.equals(CheckpointBarrier.class)__				case END_OF_SUPERSTEP_EVENT:_					return eventClass.equals(EndOfSuperstepEvent.class)__				case CANCEL_CHECKPOINT_MARKER_EVENT:_					return eventClass.equals(CancelCheckpointMarker.class)__				case OTHER_EVENT:_					try {_						final DataInputDeserializer deserializer = new DataInputDeserializer(buffer)__						final String className = deserializer.readUTF()___						final Class<? extends AbstractEvent> clazz__						try {_							clazz = classLoader.loadClass(className).asSubclass(AbstractEvent.class)__						}_						catch (ClassNotFoundException e) {_							throw new IOException("Could not load event class '" + className + "'.", e)__						}_						catch (ClassCastException e) {_							throw new IOException("The class '" + className + "' is not a valid subclass of '"_								+ AbstractEvent.class.getName() + "'.", e)__						}_						return eventClass.equals(clazz)__					}_					catch (Exception e) {_						throw new IOException("Error while deserializing or instantiating event.", e)__					}_				default:_					throw new IOException("Corrupt byte stream for event")__			}_		}_		finally {_			buffer.order(bufferOrder)__			_			buffer.position(bufferPos)__		}_	};identifies,whether,the,given,buffer,encodes,the,given,event,p,strong,pre,condition,strong,this,buffer,must,encode,some,event,p,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;private,static,boolean,is,event,byte,buffer,buffer,class,event,class,class,loader,class,loader,throws,ioexception,if,buffer,remaining,4,throw,new,ioexception,incomplete,event,final,int,buffer,pos,buffer,position,final,byte,order,buffer,order,buffer,order,buffer,order,byte,order,try,int,type,buffer,get,int,switch,type,case,return,event,class,equals,end,of,partition,event,class,case,return,event,class,equals,checkpoint,barrier,class,case,return,event,class,equals,end,of,superstep,event,class,case,return,event,class,equals,cancel,checkpoint,marker,class,case,try,final,data,input,deserializer,deserializer,new,data,input,deserializer,buffer,final,string,class,name,deserializer,read,utf,final,class,extends,abstract,event,clazz,try,clazz,class,loader,load,class,class,name,as,subclass,abstract,event,class,catch,class,not,found,exception,e,throw,new,ioexception,could,not,load,event,class,class,name,e,catch,class,cast,exception,e,throw,new,ioexception,the,class,class,name,is,not,a,valid,subclass,of,abstract,event,class,get,name,e,return,event,class,equals,clazz,catch,exception,e,throw,new,ioexception,error,while,deserializing,or,instantiating,event,e,default,throw,new,ioexception,corrupt,byte,stream,for,event,finally,buffer,order,buffer,order,buffer,position,buffer,pos
EventSerializer -> private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException;1515514130;Identifies whether the given buffer encodes the given event.__<p><strong>Pre-condition</strong>: This buffer must encode some event!</p>__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException {_		if (buffer.remaining() < 4) {_			throw new IOException("Incomplete event")__		}__		final int bufferPos = buffer.position()__		final ByteOrder bufferOrder = buffer.order()__		buffer.order(ByteOrder.BIG_ENDIAN)___		try {_			int type = buffer.getInt()___			switch (type) {_				case END_OF_PARTITION_EVENT:_					return eventClass.equals(EndOfPartitionEvent.class)__				case CHECKPOINT_BARRIER_EVENT:_					return eventClass.equals(CheckpointBarrier.class)__				case END_OF_SUPERSTEP_EVENT:_					return eventClass.equals(EndOfSuperstepEvent.class)__				case CANCEL_CHECKPOINT_MARKER_EVENT:_					return eventClass.equals(CancelCheckpointMarker.class)__				case OTHER_EVENT:_					try {_						final DataInputDeserializer deserializer = new DataInputDeserializer(buffer)__						final String className = deserializer.readUTF()___						final Class<? extends AbstractEvent> clazz__						try {_							clazz = classLoader.loadClass(className).asSubclass(AbstractEvent.class)__						}_						catch (ClassNotFoundException e) {_							throw new IOException("Could not load event class '" + className + "'.", e)__						}_						catch (ClassCastException e) {_							throw new IOException("The class '" + className + "' is not a valid subclass of '"_								+ AbstractEvent.class.getName() + "'.", e)__						}_						return eventClass.equals(clazz)__					}_					catch (Exception e) {_						throw new IOException("Error while deserializing or instantiating event.", e)__					}_				default:_					throw new IOException("Corrupt byte stream for event")__			}_		}_		finally {_			buffer.order(bufferOrder)__			_			buffer.position(bufferPos)__		}_	};identifies,whether,the,given,buffer,encodes,the,given,event,p,strong,pre,condition,strong,this,buffer,must,encode,some,event,p,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;private,static,boolean,is,event,byte,buffer,buffer,class,event,class,class,loader,class,loader,throws,ioexception,if,buffer,remaining,4,throw,new,ioexception,incomplete,event,final,int,buffer,pos,buffer,position,final,byte,order,buffer,order,buffer,order,buffer,order,byte,order,try,int,type,buffer,get,int,switch,type,case,return,event,class,equals,end,of,partition,event,class,case,return,event,class,equals,checkpoint,barrier,class,case,return,event,class,equals,end,of,superstep,event,class,case,return,event,class,equals,cancel,checkpoint,marker,class,case,try,final,data,input,deserializer,deserializer,new,data,input,deserializer,buffer,final,string,class,name,deserializer,read,utf,final,class,extends,abstract,event,clazz,try,clazz,class,loader,load,class,class,name,as,subclass,abstract,event,class,catch,class,not,found,exception,e,throw,new,ioexception,could,not,load,event,class,class,name,e,catch,class,cast,exception,e,throw,new,ioexception,the,class,class,name,is,not,a,valid,subclass,of,abstract,event,class,get,name,e,return,event,class,equals,clazz,catch,exception,e,throw,new,ioexception,error,while,deserializing,or,instantiating,event,e,default,throw,new,ioexception,corrupt,byte,stream,for,event,finally,buffer,order,buffer,order,buffer,position,buffer,pos
EventSerializer -> private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException;1515600963;Identifies whether the given buffer encodes the given event.__<p><strong>Pre-condition</strong>: This buffer must encode some event!</p>__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException {_		if (buffer.remaining() < 4) {_			throw new IOException("Incomplete event")__		}__		final int bufferPos = buffer.position()__		final ByteOrder bufferOrder = buffer.order()__		buffer.order(ByteOrder.BIG_ENDIAN)___		try {_			int type = buffer.getInt()___			switch (type) {_				case END_OF_PARTITION_EVENT:_					return eventClass.equals(EndOfPartitionEvent.class)__				case CHECKPOINT_BARRIER_EVENT:_					return eventClass.equals(CheckpointBarrier.class)__				case END_OF_SUPERSTEP_EVENT:_					return eventClass.equals(EndOfSuperstepEvent.class)__				case CANCEL_CHECKPOINT_MARKER_EVENT:_					return eventClass.equals(CancelCheckpointMarker.class)__				case OTHER_EVENT:_					try {_						final DataInputDeserializer deserializer = new DataInputDeserializer(buffer)__						final String className = deserializer.readUTF()___						final Class<? extends AbstractEvent> clazz__						try {_							clazz = classLoader.loadClass(className).asSubclass(AbstractEvent.class)__						}_						catch (ClassNotFoundException e) {_							throw new IOException("Could not load event class '" + className + "'.", e)__						}_						catch (ClassCastException e) {_							throw new IOException("The class '" + className + "' is not a valid subclass of '"_								+ AbstractEvent.class.getName() + "'.", e)__						}_						return eventClass.equals(clazz)__					}_					catch (Exception e) {_						throw new IOException("Error while deserializing or instantiating event.", e)__					}_				default:_					throw new IOException("Corrupt byte stream for event")__			}_		}_		finally {_			buffer.order(bufferOrder)__			_			buffer.position(bufferPos)__		}_	};identifies,whether,the,given,buffer,encodes,the,given,event,p,strong,pre,condition,strong,this,buffer,must,encode,some,event,p,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;private,static,boolean,is,event,byte,buffer,buffer,class,event,class,class,loader,class,loader,throws,ioexception,if,buffer,remaining,4,throw,new,ioexception,incomplete,event,final,int,buffer,pos,buffer,position,final,byte,order,buffer,order,buffer,order,buffer,order,byte,order,try,int,type,buffer,get,int,switch,type,case,return,event,class,equals,end,of,partition,event,class,case,return,event,class,equals,checkpoint,barrier,class,case,return,event,class,equals,end,of,superstep,event,class,case,return,event,class,equals,cancel,checkpoint,marker,class,case,try,final,data,input,deserializer,deserializer,new,data,input,deserializer,buffer,final,string,class,name,deserializer,read,utf,final,class,extends,abstract,event,clazz,try,clazz,class,loader,load,class,class,name,as,subclass,abstract,event,class,catch,class,not,found,exception,e,throw,new,ioexception,could,not,load,event,class,class,name,e,catch,class,cast,exception,e,throw,new,ioexception,the,class,class,name,is,not,a,valid,subclass,of,abstract,event,class,get,name,e,return,event,class,equals,clazz,catch,exception,e,throw,new,ioexception,error,while,deserializing,or,instantiating,event,e,default,throw,new,ioexception,corrupt,byte,stream,for,event,finally,buffer,order,buffer,order,buffer,position,buffer,pos
EventSerializer -> private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException;1515604430;Identifies whether the given buffer encodes the given event.__<p><strong>Pre-condition</strong>: This buffer must encode some event!</p>__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>_@throws IOException;private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException {_		if (buffer.remaining() < 4) {_			throw new IOException("Incomplete event")__		}__		final int bufferPos = buffer.position()__		final ByteOrder bufferOrder = buffer.order()__		buffer.order(ByteOrder.BIG_ENDIAN)___		try {_			int type = buffer.getInt()___			switch (type) {_				case END_OF_PARTITION_EVENT:_					return eventClass.equals(EndOfPartitionEvent.class)__				case CHECKPOINT_BARRIER_EVENT:_					return eventClass.equals(CheckpointBarrier.class)__				case END_OF_SUPERSTEP_EVENT:_					return eventClass.equals(EndOfSuperstepEvent.class)__				case CANCEL_CHECKPOINT_MARKER_EVENT:_					return eventClass.equals(CancelCheckpointMarker.class)__				case OTHER_EVENT:_					try {_						final DataInputDeserializer deserializer = new DataInputDeserializer(buffer)__						final String className = deserializer.readUTF()___						final Class<? extends AbstractEvent> clazz__						try {_							clazz = classLoader.loadClass(className).asSubclass(AbstractEvent.class)__						}_						catch (ClassNotFoundException e) {_							throw new IOException("Could not load event class '" + className + "'.", e)__						}_						catch (ClassCastException e) {_							throw new IOException("The class '" + className + "' is not a valid subclass of '"_								+ AbstractEvent.class.getName() + "'.", e)__						}_						return eventClass.equals(clazz)__					}_					catch (Exception e) {_						throw new IOException("Error while deserializing or instantiating event.", e)__					}_				default:_					throw new IOException("Corrupt byte stream for event")__			}_		}_		finally {_			buffer.order(bufferOrder)__			_			buffer.position(bufferPos)__		}_	};identifies,whether,the,given,buffer,encodes,the,given,event,p,strong,pre,condition,strong,this,buffer,must,encode,some,event,p,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt,throws,ioexception;private,static,boolean,is,event,byte,buffer,buffer,class,event,class,class,loader,class,loader,throws,ioexception,if,buffer,remaining,4,throw,new,ioexception,incomplete,event,final,int,buffer,pos,buffer,position,final,byte,order,buffer,order,buffer,order,buffer,order,byte,order,try,int,type,buffer,get,int,switch,type,case,return,event,class,equals,end,of,partition,event,class,case,return,event,class,equals,checkpoint,barrier,class,case,return,event,class,equals,end,of,superstep,event,class,case,return,event,class,equals,cancel,checkpoint,marker,class,case,try,final,data,input,deserializer,deserializer,new,data,input,deserializer,buffer,final,string,class,name,deserializer,read,utf,final,class,extends,abstract,event,clazz,try,clazz,class,loader,load,class,class,name,as,subclass,abstract,event,class,catch,class,not,found,exception,e,throw,new,ioexception,could,not,load,event,class,class,name,e,catch,class,cast,exception,e,throw,new,ioexception,the,class,class,name,is,not,a,valid,subclass,of,abstract,event,class,get,name,e,return,event,class,equals,clazz,catch,exception,e,throw,new,ioexception,error,while,deserializing,or,instantiating,event,e,default,throw,new,ioexception,corrupt,byte,stream,for,event,finally,buffer,order,buffer,order,buffer,position,buffer,pos
EventSerializer -> private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException;1516267728;Identifies whether the given buffer encodes the given event.__<p><strong>Pre-condition</strong>: This buffer must encode some event!</p>__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>;private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException {_		if (buffer.remaining() < 4) {_			throw new IOException("Incomplete event")__		}__		final int bufferPos = buffer.position()__		final ByteOrder bufferOrder = buffer.order()__		buffer.order(ByteOrder.BIG_ENDIAN)___		try {_			int type = buffer.getInt()___			switch (type) {_				case END_OF_PARTITION_EVENT:_					return eventClass.equals(EndOfPartitionEvent.class)__				case CHECKPOINT_BARRIER_EVENT:_					return eventClass.equals(CheckpointBarrier.class)__				case END_OF_SUPERSTEP_EVENT:_					return eventClass.equals(EndOfSuperstepEvent.class)__				case CANCEL_CHECKPOINT_MARKER_EVENT:_					return eventClass.equals(CancelCheckpointMarker.class)__				case OTHER_EVENT:_					try {_						final DataInputDeserializer deserializer = new DataInputDeserializer(buffer)__						final String className = deserializer.readUTF()___						final Class<? extends AbstractEvent> clazz__						try {_							clazz = classLoader.loadClass(className).asSubclass(AbstractEvent.class)__						}_						catch (ClassNotFoundException e) {_							throw new IOException("Could not load event class '" + className + "'.", e)__						}_						catch (ClassCastException e) {_							throw new IOException("The class '" + className + "' is not a valid subclass of '"_								+ AbstractEvent.class.getName() + "'.", e)__						}_						return eventClass.equals(clazz)__					}_					catch (Exception e) {_						throw new IOException("Error while deserializing or instantiating event.", e)__					}_				default:_					throw new IOException("Corrupt byte stream for event")__			}_		}_		finally {_			buffer.order(bufferOrder)__			_			buffer.position(bufferPos)__		}_	};identifies,whether,the,given,buffer,encodes,the,given,event,p,strong,pre,condition,strong,this,buffer,must,encode,some,event,p,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt;private,static,boolean,is,event,byte,buffer,buffer,class,event,class,class,loader,class,loader,throws,ioexception,if,buffer,remaining,4,throw,new,ioexception,incomplete,event,final,int,buffer,pos,buffer,position,final,byte,order,buffer,order,buffer,order,buffer,order,byte,order,try,int,type,buffer,get,int,switch,type,case,return,event,class,equals,end,of,partition,event,class,case,return,event,class,equals,checkpoint,barrier,class,case,return,event,class,equals,end,of,superstep,event,class,case,return,event,class,equals,cancel,checkpoint,marker,class,case,try,final,data,input,deserializer,deserializer,new,data,input,deserializer,buffer,final,string,class,name,deserializer,read,utf,final,class,extends,abstract,event,clazz,try,clazz,class,loader,load,class,class,name,as,subclass,abstract,event,class,catch,class,not,found,exception,e,throw,new,ioexception,could,not,load,event,class,class,name,e,catch,class,cast,exception,e,throw,new,ioexception,the,class,class,name,is,not,a,valid,subclass,of,abstract,event,class,get,name,e,return,event,class,equals,clazz,catch,exception,e,throw,new,ioexception,error,while,deserializing,or,instantiating,event,e,default,throw,new,ioexception,corrupt,byte,stream,for,event,finally,buffer,order,buffer,order,buffer,position,buffer,pos
EventSerializer -> private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException;1516365428;Identifies whether the given buffer encodes the given event.__<p><strong>Pre-condition</strong>: This buffer must encode some event!</p>__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>;private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException {_		if (buffer.remaining() < 4) {_			throw new IOException("Incomplete event")__		}__		final int bufferPos = buffer.position()__		final ByteOrder bufferOrder = buffer.order()__		buffer.order(ByteOrder.BIG_ENDIAN)___		try {_			int type = buffer.getInt()___			switch (type) {_				case END_OF_PARTITION_EVENT:_					return eventClass.equals(EndOfPartitionEvent.class)__				case CHECKPOINT_BARRIER_EVENT:_					return eventClass.equals(CheckpointBarrier.class)__				case END_OF_SUPERSTEP_EVENT:_					return eventClass.equals(EndOfSuperstepEvent.class)__				case CANCEL_CHECKPOINT_MARKER_EVENT:_					return eventClass.equals(CancelCheckpointMarker.class)__				case OTHER_EVENT:_					try {_						final DataInputDeserializer deserializer = new DataInputDeserializer(buffer)__						final String className = deserializer.readUTF()___						final Class<? extends AbstractEvent> clazz__						try {_							clazz = classLoader.loadClass(className).asSubclass(AbstractEvent.class)__						}_						catch (ClassNotFoundException e) {_							throw new IOException("Could not load event class '" + className + "'.", e)__						}_						catch (ClassCastException e) {_							throw new IOException("The class '" + className + "' is not a valid subclass of '"_								+ AbstractEvent.class.getName() + "'.", e)__						}_						return eventClass.equals(clazz)__					}_					catch (Exception e) {_						throw new IOException("Error while deserializing or instantiating event.", e)__					}_				default:_					throw new IOException("Corrupt byte stream for event")__			}_		}_		finally {_			buffer.order(bufferOrder)__			_			buffer.position(bufferPos)__		}_	};identifies,whether,the,given,buffer,encodes,the,given,event,p,strong,pre,condition,strong,this,buffer,must,encode,some,event,p,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt;private,static,boolean,is,event,byte,buffer,buffer,class,event,class,class,loader,class,loader,throws,ioexception,if,buffer,remaining,4,throw,new,ioexception,incomplete,event,final,int,buffer,pos,buffer,position,final,byte,order,buffer,order,buffer,order,buffer,order,byte,order,try,int,type,buffer,get,int,switch,type,case,return,event,class,equals,end,of,partition,event,class,case,return,event,class,equals,checkpoint,barrier,class,case,return,event,class,equals,end,of,superstep,event,class,case,return,event,class,equals,cancel,checkpoint,marker,class,case,try,final,data,input,deserializer,deserializer,new,data,input,deserializer,buffer,final,string,class,name,deserializer,read,utf,final,class,extends,abstract,event,clazz,try,clazz,class,loader,load,class,class,name,as,subclass,abstract,event,class,catch,class,not,found,exception,e,throw,new,ioexception,could,not,load,event,class,class,name,e,catch,class,cast,exception,e,throw,new,ioexception,the,class,class,name,is,not,a,valid,subclass,of,abstract,event,class,get,name,e,return,event,class,equals,clazz,catch,exception,e,throw,new,ioexception,error,while,deserializing,or,instantiating,event,e,default,throw,new,ioexception,corrupt,byte,stream,for,event,finally,buffer,order,buffer,order,buffer,position,buffer,pos
EventSerializer -> private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException;1516959754;Identifies whether the given buffer encodes the given event.__<p><strong>Pre-condition</strong>: This buffer must encode some event!</p>__@param buffer the buffer to peak into_@param eventClass the expected class of the event type_@param classLoader the class loader to use for custom event classes_@return whether the event class of the <tt>buffer</tt> matches the given <tt>eventClass</tt>;private static boolean isEvent(ByteBuffer buffer, Class<?> eventClass, ClassLoader classLoader) throws IOException {_		if (buffer.remaining() < 4) {_			throw new IOException("Incomplete event")__		}__		final int bufferPos = buffer.position()__		final ByteOrder bufferOrder = buffer.order()__		buffer.order(ByteOrder.BIG_ENDIAN)___		try {_			int type = buffer.getInt()___			switch (type) {_				case END_OF_PARTITION_EVENT:_					return eventClass.equals(EndOfPartitionEvent.class)__				case CHECKPOINT_BARRIER_EVENT:_					return eventClass.equals(CheckpointBarrier.class)__				case END_OF_SUPERSTEP_EVENT:_					return eventClass.equals(EndOfSuperstepEvent.class)__				case CANCEL_CHECKPOINT_MARKER_EVENT:_					return eventClass.equals(CancelCheckpointMarker.class)__				case OTHER_EVENT:_					try {_						final DataInputDeserializer deserializer = new DataInputDeserializer(buffer)__						final String className = deserializer.readUTF()___						final Class<? extends AbstractEvent> clazz__						try {_							clazz = classLoader.loadClass(className).asSubclass(AbstractEvent.class)__						}_						catch (ClassNotFoundException e) {_							throw new IOException("Could not load event class '" + className + "'.", e)__						}_						catch (ClassCastException e) {_							throw new IOException("The class '" + className + "' is not a valid subclass of '"_								+ AbstractEvent.class.getName() + "'.", e)__						}_						return eventClass.equals(clazz)__					}_					catch (Exception e) {_						throw new IOException("Error while deserializing or instantiating event.", e)__					}_				default:_					throw new IOException("Corrupt byte stream for event")__			}_		}_		finally {_			buffer.order(bufferOrder)__			_			buffer.position(bufferPos)__		}_	};identifies,whether,the,given,buffer,encodes,the,given,event,p,strong,pre,condition,strong,this,buffer,must,encode,some,event,p,param,buffer,the,buffer,to,peak,into,param,event,class,the,expected,class,of,the,event,type,param,class,loader,the,class,loader,to,use,for,custom,event,classes,return,whether,the,event,class,of,the,tt,buffer,tt,matches,the,given,tt,event,class,tt;private,static,boolean,is,event,byte,buffer,buffer,class,event,class,class,loader,class,loader,throws,ioexception,if,buffer,remaining,4,throw,new,ioexception,incomplete,event,final,int,buffer,pos,buffer,position,final,byte,order,buffer,order,buffer,order,buffer,order,byte,order,try,int,type,buffer,get,int,switch,type,case,return,event,class,equals,end,of,partition,event,class,case,return,event,class,equals,checkpoint,barrier,class,case,return,event,class,equals,end,of,superstep,event,class,case,return,event,class,equals,cancel,checkpoint,marker,class,case,try,final,data,input,deserializer,deserializer,new,data,input,deserializer,buffer,final,string,class,name,deserializer,read,utf,final,class,extends,abstract,event,clazz,try,clazz,class,loader,load,class,class,name,as,subclass,abstract,event,class,catch,class,not,found,exception,e,throw,new,ioexception,could,not,load,event,class,class,name,e,catch,class,cast,exception,e,throw,new,ioexception,the,class,class,name,is,not,a,valid,subclass,of,abstract,event,class,get,name,e,return,event,class,equals,clazz,catch,exception,e,throw,new,ioexception,error,while,deserializing,or,instantiating,event,e,default,throw,new,ioexception,corrupt,byte,stream,for,event,finally,buffer,order,buffer,order,buffer,position,buffer,pos
