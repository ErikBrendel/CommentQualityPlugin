# id;timestamp;commentText;codeText;commentWords;codeWords
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1441011751;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while(!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if(owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1441179758;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while(!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if(owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1442999318;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while(!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if(owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1445293011;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while(!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if(owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1456736890;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while(!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if(owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1456737398;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while(!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if(owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1461256129;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while(!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if(owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1461671659;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while(!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if(owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1465991918;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while(!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if(owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1466167799;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while(!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if(owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1493975167;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while(!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if(owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1508417940;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while(!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if(owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1516971022;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while (!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if (owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1516971025;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while (!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if (owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1519839432;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while (!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if (owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> protected void writeLeaderInformation(UUID leaderSessionID);1528982883;Writes the current leader's address as well the given leader session ID to ZooKeeper.__@param leaderSessionID Leader session ID which is written to ZooKeeper;protected void writeLeaderInformation(UUID leaderSessionID) {_		_		_		try {_			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Write leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_			ByteArrayOutputStream baos = new ByteArrayOutputStream()__			ObjectOutputStream oos = new ObjectOutputStream(baos)___			oos.writeUTF(leaderContender.getAddress())__			oos.writeObject(leaderSessionID)___			oos.close()___			boolean dataWritten = false___			while (!dataWritten && leaderLatch.hasLeadership()) {_				Stat stat = client.checkExists().forPath(leaderPath)___				if (stat != null) {_					long owner = stat.getEphemeralOwner()__					long sessionID = client.getZookeeperClient().getZooKeeper().getSessionId()___					if (owner == sessionID) {_						try {_							client.setData().forPath(leaderPath, baos.toByteArray())___							dataWritten = true__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					} else {_						try {_							client.delete().forPath(leaderPath)__						} catch (KeeperException.NoNodeException noNode) {_							_						}_					}_				} else {_					try {_						client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(_								leaderPath,_								baos.toByteArray())___						dataWritten = true__					} catch (KeeperException.NodeExistsException nodeExists) {_						_					}_				}_			}__			if (LOG.isDebugEnabled()) {_				LOG.debug(_					"Successfully wrote leader information: Leader={}, session ID={}.",_					leaderContender.getAddress(),_					leaderSessionID)__			}_		} catch (Exception e) {_			leaderContender.handleError(_					new Exception("Could not write leader address and leader session ID to " +_							"ZooKeeper.", e))__		}_	};writes,the,current,leader,s,address,as,well,the,given,leader,session,id,to,zoo,keeper,param,leader,session,id,leader,session,id,which,is,written,to,zoo,keeper;protected,void,write,leader,information,uuid,leader,session,id,try,if,log,is,debug,enabled,log,debug,write,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,byte,array,output,stream,baos,new,byte,array,output,stream,object,output,stream,oos,new,object,output,stream,baos,oos,write,utf,leader,contender,get,address,oos,write,object,leader,session,id,oos,close,boolean,data,written,false,while,data,written,leader,latch,has,leadership,stat,stat,client,check,exists,for,path,leader,path,if,stat,null,long,owner,stat,get,ephemeral,owner,long,session,id,client,get,zookeeper,client,get,zoo,keeper,get,session,id,if,owner,session,id,try,client,set,data,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,no,node,exception,no,node,else,try,client,delete,for,path,leader,path,catch,keeper,exception,no,node,exception,no,node,else,try,client,create,creating,parents,if,needed,with,mode,create,mode,ephemeral,for,path,leader,path,baos,to,byte,array,data,written,true,catch,keeper,exception,node,exists,exception,node,exists,if,log,is,debug,enabled,log,debug,successfully,wrote,leader,information,leader,session,id,leader,contender,get,address,leader,session,id,catch,exception,e,leader,contender,handle,error,new,exception,could,not,write,leader,address,and,leader,session,id,to,zoo,keeper,e
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1441011751;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = client__		this.leaderPath = leaderPath___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,client,this,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1441179758;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = client__		this.leaderPath = leaderPath___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,client,this,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1442999318;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = client__		this.leaderPath = leaderPath___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,client,this,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1445293011;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = client__		this.leaderPath = leaderPath___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,client,this,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1456736890;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = client__		this.leaderPath = leaderPath___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,client,this,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1456737398;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = client__		this.leaderPath = leaderPath___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,client,this,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1461256129;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = client__		this.leaderPath = leaderPath___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,client,this,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1461671659;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = client__		this.leaderPath = leaderPath___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,client,this,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1465991918;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = client__		this.leaderPath = leaderPath___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,client,this,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1466167799;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = client__		this.leaderPath = leaderPath___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,client,this,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1493975167;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = Preconditions.checkNotNull(client, "CuratorFramework client")__		this.leaderPath = Preconditions.checkNotNull(leaderPath, "leaderPath")___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)___		issuedLeaderSessionID = null__		confirmedLeaderSessionID = null__		leaderContender = null___		running = false__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,preconditions,check,not,null,client,curator,framework,client,this,leader,path,preconditions,check,not,null,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path,issued,leader,session,id,null,confirmed,leader,session,id,null,leader,contender,null,running,false
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1508417940;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = Preconditions.checkNotNull(client, "CuratorFramework client")__		this.leaderPath = Preconditions.checkNotNull(leaderPath, "leaderPath")___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)___		issuedLeaderSessionID = null__		confirmedLeaderSessionID = null__		leaderContender = null___		running = false__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,preconditions,check,not,null,client,curator,framework,client,this,leader,path,preconditions,check,not,null,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path,issued,leader,session,id,null,confirmed,leader,session,id,null,leader,contender,null,running,false
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1516971022;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = Preconditions.checkNotNull(client, "CuratorFramework client")__		this.leaderPath = Preconditions.checkNotNull(leaderPath, "leaderPath")___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)___		issuedLeaderSessionID = null__		confirmedLeaderSessionID = null__		leaderContender = null___		running = false__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,preconditions,check,not,null,client,curator,framework,client,this,leader,path,preconditions,check,not,null,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path,issued,leader,session,id,null,confirmed,leader,session,id,null,leader,contender,null,running,false
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1516971025;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = Preconditions.checkNotNull(client, "CuratorFramework client")__		this.leaderPath = Preconditions.checkNotNull(leaderPath, "leaderPath")___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)___		issuedLeaderSessionID = null__		confirmedLeaderSessionID = null__		leaderContender = null___		running = false__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,preconditions,check,not,null,client,curator,framework,client,this,leader,path,preconditions,check,not,null,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path,issued,leader,session,id,null,confirmed,leader,session,id,null,leader,contender,null,running,false
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1519839432;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = Preconditions.checkNotNull(client, "CuratorFramework client")__		this.leaderPath = Preconditions.checkNotNull(leaderPath, "leaderPath")___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)___		issuedLeaderSessionID = null__		confirmedLeaderSessionID = null__		leaderContender = null___		running = false__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,preconditions,check,not,null,client,curator,framework,client,this,leader,path,preconditions,check,not,null,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path,issued,leader,session,id,null,confirmed,leader,session,id,null,leader,contender,null,running,false
ZooKeeperLeaderElectionService -> public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath);1528982883;Creates a ZooKeeperLeaderElectionService object.__@param client Client which is connected to the ZooKeeper quorum_@param latchPath ZooKeeper node path for the leader election latch_@param leaderPath ZooKeeper node path for the node which stores the current leader information;public ZooKeeperLeaderElectionService(CuratorFramework client, String latchPath, String leaderPath) {_		this.client = Preconditions.checkNotNull(client, "CuratorFramework client")__		this.leaderPath = Preconditions.checkNotNull(leaderPath, "leaderPath")___		leaderLatch = new LeaderLatch(client, latchPath)__		cache = new NodeCache(client, leaderPath)___		issuedLeaderSessionID = null__		confirmedLeaderSessionID = null__		leaderContender = null___		running = false__	};creates,a,zoo,keeper,leader,election,service,object,param,client,client,which,is,connected,to,the,zoo,keeper,quorum,param,latch,path,zoo,keeper,node,path,for,the,leader,election,latch,param,leader,path,zoo,keeper,node,path,for,the,node,which,stores,the,current,leader,information;public,zoo,keeper,leader,election,service,curator,framework,client,string,latch,path,string,leader,path,this,client,preconditions,check,not,null,client,curator,framework,client,this,leader,path,preconditions,check,not,null,leader,path,leader,path,leader,latch,new,leader,latch,client,latch,path,cache,new,node,cache,client,leader,path,issued,leader,session,id,null,confirmed,leader,session,id,null,leader,contender,null,running,false
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1441011751;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1441179758;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1442999318;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1445293011;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1456736890;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1456737398;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1461256129;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1461671659;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1465991918;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1466167799;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1493975167;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1508417940;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1516971022;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1516971025;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1519839432;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
ZooKeeperLeaderElectionService -> public UUID getLeaderSessionID();1528982883;Returns the current leader session ID or null, if the contender is not the leader.__@return The last leader session ID or null, if the contender is not the leader;public UUID getLeaderSessionID() {_		return confirmedLeaderSessionID__	};returns,the,current,leader,session,id,or,null,if,the,contender,is,not,the,leader,return,the,last,leader,session,id,or,null,if,the,contender,is,not,the,leader;public,uuid,get,leader,session,id,return,confirmed,leader,session,id
