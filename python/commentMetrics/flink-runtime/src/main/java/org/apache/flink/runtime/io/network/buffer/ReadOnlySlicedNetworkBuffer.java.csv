# id;timestamp;commentText;codeText;commentWords;codeWords
ReadOnlySlicedNetworkBuffer -> private ReadOnlySlicedNetworkBuffer(ByteBuf buffer, int index, int length, int memorySegmentOffset);1519229371;Creates a buffer which shares the memory segment of the given buffer and exposed the given_sub-region only.__<p>Reader and writer indices as well as markers are not shared. Reference counters are_shared but the slice is not {@link #retainBuffer() retained} automatically.__@param buffer the buffer to derive from_@param index the index to start from_@param length the length of the slice_@param memorySegmentOffset <tt>buffer</tt>'s absolute offset in the backing {@link MemorySegment};private ReadOnlySlicedNetworkBuffer(ByteBuf buffer, int index, int length, int memorySegmentOffset) {_		super(new SlicedByteBuf(buffer, index, length))__		this.memorySegmentOffset = memorySegmentOffset + index__	};creates,a,buffer,which,shares,the,memory,segment,of,the,given,buffer,and,exposed,the,given,sub,region,only,p,reader,and,writer,indices,as,well,as,markers,are,not,shared,reference,counters,are,shared,but,the,slice,is,not,link,retain,buffer,retained,automatically,param,buffer,the,buffer,to,derive,from,param,index,the,index,to,start,from,param,length,the,length,of,the,slice,param,memory,segment,offset,tt,buffer,tt,s,absolute,offset,in,the,backing,link,memory,segment;private,read,only,sliced,network,buffer,byte,buf,buffer,int,index,int,length,int,memory,segment,offset,super,new,sliced,byte,buf,buffer,index,length,this,memory,segment,offset,memory,segment,offset,index
ReadOnlySlicedNetworkBuffer -> private ReadOnlySlicedNetworkBuffer(ByteBuf buffer, int index, int length, int memorySegmentOffset);1526498842;Creates a buffer which shares the memory segment of the given buffer and exposed the given_sub-region only.__<p>Reader and writer indices as well as markers are not shared. Reference counters are_shared but the slice is not {@link #retainBuffer() retained} automatically.__@param buffer the buffer to derive from_@param index the index to start from_@param length the length of the slice_@param memorySegmentOffset <tt>buffer</tt>'s absolute offset in the backing {@link MemorySegment};private ReadOnlySlicedNetworkBuffer(ByteBuf buffer, int index, int length, int memorySegmentOffset) {_		super(new SlicedByteBuf(buffer, index, length))__		this.memorySegmentOffset = memorySegmentOffset + index__	};creates,a,buffer,which,shares,the,memory,segment,of,the,given,buffer,and,exposed,the,given,sub,region,only,p,reader,and,writer,indices,as,well,as,markers,are,not,shared,reference,counters,are,shared,but,the,slice,is,not,link,retain,buffer,retained,automatically,param,buffer,the,buffer,to,derive,from,param,index,the,index,to,start,from,param,length,the,length,of,the,slice,param,memory,segment,offset,tt,buffer,tt,s,absolute,offset,in,the,backing,link,memory,segment;private,read,only,sliced,network,buffer,byte,buf,buffer,int,index,int,length,int,memory,segment,offset,super,new,sliced,byte,buf,buffer,index,length,this,memory,segment,offset,memory,segment,offset,index
ReadOnlySlicedNetworkBuffer -> @Override 	public MemorySegment getMemorySegment();1503656034;Returns the underlying memory segment.__<p><strong>BEWARE:</strong> Although we cannot set the memory segment read-only it should be_handled as if it was!.__@return the memory segment backing this buffer;@Override_	public MemorySegment getMemorySegment() {_		return ((Buffer) unwrap()).getMemorySegment()__	};returns,the,underlying,memory,segment,p,strong,beware,strong,although,we,cannot,set,the,memory,segment,read,only,it,should,be,handled,as,if,it,was,return,the,memory,segment,backing,this,buffer;override,public,memory,segment,get,memory,segment,return,buffer,unwrap,get,memory,segment
ReadOnlySlicedNetworkBuffer -> @Override 	public MemorySegment getMemorySegment();1515535038;Returns the underlying memory segment.__<p><strong>BEWARE:</strong> Although we cannot set the memory segment read-only it should be_handled as if it was!.__@return the memory segment backing this buffer;@Override_	public MemorySegment getMemorySegment() {_		return ((Buffer) unwrap()).getMemorySegment()__	};returns,the,underlying,memory,segment,p,strong,beware,strong,although,we,cannot,set,the,memory,segment,read,only,it,should,be,handled,as,if,it,was,return,the,memory,segment,backing,this,buffer;override,public,memory,segment,get,memory,segment,return,buffer,unwrap,get,memory,segment
ReadOnlySlicedNetworkBuffer -> @Override 	public MemorySegment getMemorySegment();1517409324;Returns the underlying memory segment.__<p><strong>BEWARE:</strong> Although we cannot set the memory segment read-only it should be_handled as if it was!.__@return the memory segment backing this buffer;@Override_	public MemorySegment getMemorySegment() {_		return ((Buffer) unwrap()).getMemorySegment()__	};returns,the,underlying,memory,segment,p,strong,beware,strong,although,we,cannot,set,the,memory,segment,read,only,it,should,be,handled,as,if,it,was,return,the,memory,segment,backing,this,buffer;override,public,memory,segment,get,memory,segment,return,buffer,unwrap,get,memory,segment
ReadOnlySlicedNetworkBuffer -> @Override 	public MemorySegment getMemorySegment();1519229371;Returns the underlying memory segment.__<p><strong>BEWARE:</strong> Although we cannot set the memory segment read-only it should be_handled as if it was!.__@return the memory segment backing this buffer;@Override_	public MemorySegment getMemorySegment() {_		return ((Buffer) unwrap()).getMemorySegment()__	};returns,the,underlying,memory,segment,p,strong,beware,strong,although,we,cannot,set,the,memory,segment,read,only,it,should,be,handled,as,if,it,was,return,the,memory,segment,backing,this,buffer;override,public,memory,segment,get,memory,segment,return,buffer,unwrap,get,memory,segment
ReadOnlySlicedNetworkBuffer -> @Override 	public MemorySegment getMemorySegment();1526498842;Returns the underlying memory segment.__<p><strong>BEWARE:</strong> Although we cannot set the memory segment read-only it should be_handled as if it was!.__@return the memory segment backing this buffer;@Override_	public MemorySegment getMemorySegment() {_		return getBuffer().getMemorySegment()__	};returns,the,underlying,memory,segment,p,strong,beware,strong,although,we,cannot,set,the,memory,segment,read,only,it,should,be,handled,as,if,it,was,return,the,memory,segment,backing,this,buffer;override,public,memory,segment,get,memory,segment,return,get,buffer,get,memory,segment
ReadOnlySlicedNetworkBuffer -> ReadOnlySlicedNetworkBuffer(NetworkBuffer buffer, int index, int length);1503656034;Creates a buffer which shares the memory segment of the given buffer and exposed the given_sub-region only.__<p>Reader and writer indices as well as markers are not shared. Reference counters are_shared but the slice is not {@link #retainBuffer() retained} automatically.__@param buffer the buffer to derive from_@param index the index to start from_@param length the length of the slice;ReadOnlySlicedNetworkBuffer(NetworkBuffer buffer, int index, int length) {_		super(new SlicedByteBuf(buffer, index, length))__	};creates,a,buffer,which,shares,the,memory,segment,of,the,given,buffer,and,exposed,the,given,sub,region,only,p,reader,and,writer,indices,as,well,as,markers,are,not,shared,reference,counters,are,shared,but,the,slice,is,not,link,retain,buffer,retained,automatically,param,buffer,the,buffer,to,derive,from,param,index,the,index,to,start,from,param,length,the,length,of,the,slice;read,only,sliced,network,buffer,network,buffer,buffer,int,index,int,length,super,new,sliced,byte,buf,buffer,index,length
ReadOnlySlicedNetworkBuffer -> ReadOnlySlicedNetworkBuffer(NetworkBuffer buffer, int index, int length);1515535038;Creates a buffer which shares the memory segment of the given buffer and exposed the given_sub-region only.__<p>Reader and writer indices as well as markers are not shared. Reference counters are_shared but the slice is not {@link #retainBuffer() retained} automatically.__@param buffer the buffer to derive from_@param index the index to start from_@param length the length of the slice;ReadOnlySlicedNetworkBuffer(NetworkBuffer buffer, int index, int length) {_		super(new SlicedByteBuf(buffer, index, length))__	};creates,a,buffer,which,shares,the,memory,segment,of,the,given,buffer,and,exposed,the,given,sub,region,only,p,reader,and,writer,indices,as,well,as,markers,are,not,shared,reference,counters,are,shared,but,the,slice,is,not,link,retain,buffer,retained,automatically,param,buffer,the,buffer,to,derive,from,param,index,the,index,to,start,from,param,length,the,length,of,the,slice;read,only,sliced,network,buffer,network,buffer,buffer,int,index,int,length,super,new,sliced,byte,buf,buffer,index,length
ReadOnlySlicedNetworkBuffer -> ReadOnlySlicedNetworkBuffer(NetworkBuffer buffer, int index, int length);1517409324;Creates a buffer which shares the memory segment of the given buffer and exposed the given_sub-region only.__<p>Reader and writer indices as well as markers are not shared. Reference counters are_shared but the slice is not {@link #retainBuffer() retained} automatically.__@param buffer the buffer to derive from_@param index the index to start from_@param length the length of the slice;ReadOnlySlicedNetworkBuffer(NetworkBuffer buffer, int index, int length) {_		super(new SlicedByteBuf(buffer, index, length))__		this.index = index__	};creates,a,buffer,which,shares,the,memory,segment,of,the,given,buffer,and,exposed,the,given,sub,region,only,p,reader,and,writer,indices,as,well,as,markers,are,not,shared,reference,counters,are,shared,but,the,slice,is,not,link,retain,buffer,retained,automatically,param,buffer,the,buffer,to,derive,from,param,index,the,index,to,start,from,param,length,the,length,of,the,slice;read,only,sliced,network,buffer,network,buffer,buffer,int,index,int,length,super,new,sliced,byte,buf,buffer,index,length,this,index,index
ReadOnlySlicedNetworkBuffer -> ReadOnlySlicedNetworkBuffer(NetworkBuffer buffer, int index, int length);1519229371;Creates a buffer which shares the memory segment of the given buffer and exposed the given_sub-region only.__<p>Reader and writer indices as well as markers are not shared. Reference counters are_shared but the slice is not {@link #retainBuffer() retained} automatically.__@param buffer the buffer to derive from_@param index the index to start from_@param length the length of the slice;ReadOnlySlicedNetworkBuffer(NetworkBuffer buffer, int index, int length) {_		super(new SlicedByteBuf(buffer, index, length))__		this.memorySegmentOffset = buffer.getMemorySegmentOffset() + index__	};creates,a,buffer,which,shares,the,memory,segment,of,the,given,buffer,and,exposed,the,given,sub,region,only,p,reader,and,writer,indices,as,well,as,markers,are,not,shared,reference,counters,are,shared,but,the,slice,is,not,link,retain,buffer,retained,automatically,param,buffer,the,buffer,to,derive,from,param,index,the,index,to,start,from,param,length,the,length,of,the,slice;read,only,sliced,network,buffer,network,buffer,buffer,int,index,int,length,super,new,sliced,byte,buf,buffer,index,length,this,memory,segment,offset,buffer,get,memory,segment,offset,index
ReadOnlySlicedNetworkBuffer -> ReadOnlySlicedNetworkBuffer(NetworkBuffer buffer, int index, int length);1526498842;Creates a buffer which shares the memory segment of the given buffer and exposed the given_sub-region only.__<p>Reader and writer indices as well as markers are not shared. Reference counters are_shared but the slice is not {@link #retainBuffer() retained} automatically.__@param buffer the buffer to derive from_@param index the index to start from_@param length the length of the slice;ReadOnlySlicedNetworkBuffer(NetworkBuffer buffer, int index, int length) {_		super(new SlicedByteBuf(buffer, index, length))__		this.memorySegmentOffset = buffer.getMemorySegmentOffset() + index__	};creates,a,buffer,which,shares,the,memory,segment,of,the,given,buffer,and,exposed,the,given,sub,region,only,p,reader,and,writer,indices,as,well,as,markers,are,not,shared,reference,counters,are,shared,but,the,slice,is,not,link,retain,buffer,retained,automatically,param,buffer,the,buffer,to,derive,from,param,index,the,index,to,start,from,param,length,the,length,of,the,slice;read,only,sliced,network,buffer,network,buffer,buffer,int,index,int,length,super,new,sliced,byte,buf,buffer,index,length,this,memory,segment,offset,buffer,get,memory,segment,offset,index
ReadOnlySlicedNetworkBuffer -> private ReadOnlySlicedNetworkBuffer(ByteBuf buffer, int index, int length);1503656034;Creates a buffer which shares the memory segment of the given buffer and exposed the given_sub-region only.__<p>Reader and writer indices as well as markers are not shared. Reference counters are_shared but the slice is not {@link #retainBuffer() retained} automatically.__@param buffer the buffer to derive from_@param index the index to start from_@param length the length of the slice;private ReadOnlySlicedNetworkBuffer(ByteBuf buffer, int index, int length) {_		super(new SlicedByteBuf(buffer, index, length))__	};creates,a,buffer,which,shares,the,memory,segment,of,the,given,buffer,and,exposed,the,given,sub,region,only,p,reader,and,writer,indices,as,well,as,markers,are,not,shared,reference,counters,are,shared,but,the,slice,is,not,link,retain,buffer,retained,automatically,param,buffer,the,buffer,to,derive,from,param,index,the,index,to,start,from,param,length,the,length,of,the,slice;private,read,only,sliced,network,buffer,byte,buf,buffer,int,index,int,length,super,new,sliced,byte,buf,buffer,index,length
ReadOnlySlicedNetworkBuffer -> private ReadOnlySlicedNetworkBuffer(ByteBuf buffer, int index, int length);1515535038;Creates a buffer which shares the memory segment of the given buffer and exposed the given_sub-region only.__<p>Reader and writer indices as well as markers are not shared. Reference counters are_shared but the slice is not {@link #retainBuffer() retained} automatically.__@param buffer the buffer to derive from_@param index the index to start from_@param length the length of the slice;private ReadOnlySlicedNetworkBuffer(ByteBuf buffer, int index, int length) {_		super(new SlicedByteBuf(buffer, index, length))__	};creates,a,buffer,which,shares,the,memory,segment,of,the,given,buffer,and,exposed,the,given,sub,region,only,p,reader,and,writer,indices,as,well,as,markers,are,not,shared,reference,counters,are,shared,but,the,slice,is,not,link,retain,buffer,retained,automatically,param,buffer,the,buffer,to,derive,from,param,index,the,index,to,start,from,param,length,the,length,of,the,slice;private,read,only,sliced,network,buffer,byte,buf,buffer,int,index,int,length,super,new,sliced,byte,buf,buffer,index,length
ReadOnlySlicedNetworkBuffer -> private ReadOnlySlicedNetworkBuffer(ByteBuf buffer, int index, int length);1517409324;Creates a buffer which shares the memory segment of the given buffer and exposed the given_sub-region only.__<p>Reader and writer indices as well as markers are not shared. Reference counters are_shared but the slice is not {@link #retainBuffer() retained} automatically.__@param buffer the buffer to derive from_@param index the index to start from_@param length the length of the slice;private ReadOnlySlicedNetworkBuffer(ByteBuf buffer, int index, int length) {_		super(new SlicedByteBuf(buffer, index, length))__		this.index = index__	};creates,a,buffer,which,shares,the,memory,segment,of,the,given,buffer,and,exposed,the,given,sub,region,only,p,reader,and,writer,indices,as,well,as,markers,are,not,shared,reference,counters,are,shared,but,the,slice,is,not,link,retain,buffer,retained,automatically,param,buffer,the,buffer,to,derive,from,param,index,the,index,to,start,from,param,length,the,length,of,the,slice;private,read,only,sliced,network,buffer,byte,buf,buffer,int,index,int,length,super,new,sliced,byte,buf,buffer,index,length,this,index,index
