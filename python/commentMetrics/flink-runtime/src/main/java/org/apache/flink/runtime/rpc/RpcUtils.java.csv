# id;timestamp;commentText;codeText;commentWords;codeWords
RpcUtils -> public static void terminateRpcService(RpcService rpcService, Time timeout) throws InterruptedException, ExecutionException, TimeoutException;1518803202;Shuts the given rpc service down and waits for its termination.__@param rpcService to shut down_@param timeout for this operation_@throws InterruptedException if the operation has been interrupted_@throws ExecutionException if a problem occurred_@throws TimeoutException if a timeout occurred;public static void terminateRpcService(RpcService rpcService, Time timeout) throws InterruptedException, ExecutionException, TimeoutException {_		rpcService.stopService().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};shuts,the,given,rpc,service,down,and,waits,for,its,termination,param,rpc,service,to,shut,down,param,timeout,for,this,operation,throws,interrupted,exception,if,the,operation,has,been,interrupted,throws,execution,exception,if,a,problem,occurred,throws,timeout,exception,if,a,timeout,occurred;public,static,void,terminate,rpc,service,rpc,service,rpc,service,time,timeout,throws,interrupted,exception,execution,exception,timeout,exception,rpc,service,stop,service,get,timeout,to,milliseconds,time,unit,milliseconds
RpcUtils -> public static void terminateRpcService(RpcService rpcService, Time timeout) throws InterruptedException, ExecutionException, TimeoutException;1542105728;Shuts the given rpc service down and waits for its termination.__@param rpcService to shut down_@param timeout for this operation_@throws InterruptedException if the operation has been interrupted_@throws ExecutionException if a problem occurred_@throws TimeoutException if a timeout occurred;public static void terminateRpcService(RpcService rpcService, Time timeout) throws InterruptedException, ExecutionException, TimeoutException {_		rpcService.stopService().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};shuts,the,given,rpc,service,down,and,waits,for,its,termination,param,rpc,service,to,shut,down,param,timeout,for,this,operation,throws,interrupted,exception,if,the,operation,has,been,interrupted,throws,execution,exception,if,a,problem,occurred,throws,timeout,exception,if,a,timeout,occurred;public,static,void,terminate,rpc,service,rpc,service,rpc,service,time,timeout,throws,interrupted,exception,execution,exception,timeout,exception,rpc,service,stop,service,get,timeout,to,milliseconds,time,unit,milliseconds
RpcUtils -> public static void terminateRpcService(RpcService rpcService, Time timeout) throws InterruptedException, ExecutionException, TimeoutException;1549983516;Shuts the given rpc service down and waits for its termination.__@param rpcService to shut down_@param timeout for this operation_@throws InterruptedException if the operation has been interrupted_@throws ExecutionException if a problem occurred_@throws TimeoutException if a timeout occurred;public static void terminateRpcService(RpcService rpcService, Time timeout) throws InterruptedException, ExecutionException, TimeoutException {_		rpcService.stopService().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};shuts,the,given,rpc,service,down,and,waits,for,its,termination,param,rpc,service,to,shut,down,param,timeout,for,this,operation,throws,interrupted,exception,if,the,operation,has,been,interrupted,throws,execution,exception,if,a,problem,occurred,throws,timeout,exception,if,a,timeout,occurred;public,static,void,terminate,rpc,service,rpc,service,rpc,service,time,timeout,throws,interrupted,exception,execution,exception,timeout,exception,rpc,service,stop,service,get,timeout,to,milliseconds,time,unit,milliseconds
RpcUtils -> public static Set<Class<? extends RpcGateway>> extractImplementedRpcGateways(Class<?> clazz);1502196227;Extracts all {@link RpcGateway} interfaces implemented by the given clazz.__@param clazz from which to extract the implemented RpcGateway interfaces_@return A set of all implemented RpcGateway interfaces;public static Set<Class<? extends RpcGateway>> extractImplementedRpcGateways(Class<?> clazz) {_		HashSet<Class<? extends RpcGateway>> interfaces = new HashSet<>()___		while (clazz != null) {_			for (Class<?> interfaze : clazz.getInterfaces()) {_				if (RpcGateway.class.isAssignableFrom(interfaze)) {_					interfaces.add((Class<? extends RpcGateway>)interfaze)__				}_			}__			clazz = clazz.getSuperclass()__		}__		return interfaces__	};extracts,all,link,rpc,gateway,interfaces,implemented,by,the,given,clazz,param,clazz,from,which,to,extract,the,implemented,rpc,gateway,interfaces,return,a,set,of,all,implemented,rpc,gateway,interfaces;public,static,set,class,extends,rpc,gateway,extract,implemented,rpc,gateways,class,clazz,hash,set,class,extends,rpc,gateway,interfaces,new,hash,set,while,clazz,null,for,class,interfaze,clazz,get,interfaces,if,rpc,gateway,class,is,assignable,from,interfaze,interfaces,add,class,extends,rpc,gateway,interfaze,clazz,clazz,get,superclass,return,interfaces
RpcUtils -> public static Set<Class<? extends RpcGateway>> extractImplementedRpcGateways(Class<?> clazz);1502886973;Extracts all {@link RpcGateway} interfaces implemented by the given clazz.__@param clazz from which to extract the implemented RpcGateway interfaces_@return A set of all implemented RpcGateway interfaces;public static Set<Class<? extends RpcGateway>> extractImplementedRpcGateways(Class<?> clazz) {_		HashSet<Class<? extends RpcGateway>> interfaces = new HashSet<>()___		while (clazz != null) {_			for (Class<?> interfaze : clazz.getInterfaces()) {_				if (RpcGateway.class.isAssignableFrom(interfaze)) {_					interfaces.add((Class<? extends RpcGateway>)interfaze)__				}_			}__			clazz = clazz.getSuperclass()__		}__		return interfaces__	};extracts,all,link,rpc,gateway,interfaces,implemented,by,the,given,clazz,param,clazz,from,which,to,extract,the,implemented,rpc,gateway,interfaces,return,a,set,of,all,implemented,rpc,gateway,interfaces;public,static,set,class,extends,rpc,gateway,extract,implemented,rpc,gateways,class,clazz,hash,set,class,extends,rpc,gateway,interfaces,new,hash,set,while,clazz,null,for,class,interfaze,clazz,get,interfaces,if,rpc,gateway,class,is,assignable,from,interfaze,interfaces,add,class,extends,rpc,gateway,interfaze,clazz,clazz,get,superclass,return,interfaces
RpcUtils -> public static Set<Class<? extends RpcGateway>> extractImplementedRpcGateways(Class<?> clazz);1514829582;Extracts all {@link RpcGateway} interfaces implemented by the given clazz.__@param clazz from which to extract the implemented RpcGateway interfaces_@return A set of all implemented RpcGateway interfaces;public static Set<Class<? extends RpcGateway>> extractImplementedRpcGateways(Class<?> clazz) {_		HashSet<Class<? extends RpcGateway>> interfaces = new HashSet<>()___		while (clazz != null) {_			for (Class<?> interfaze : clazz.getInterfaces()) {_				if (RpcGateway.class.isAssignableFrom(interfaze)) {_					interfaces.add((Class<? extends RpcGateway>)interfaze)__				}_			}__			clazz = clazz.getSuperclass()__		}__		return interfaces__	};extracts,all,link,rpc,gateway,interfaces,implemented,by,the,given,clazz,param,clazz,from,which,to,extract,the,implemented,rpc,gateway,interfaces,return,a,set,of,all,implemented,rpc,gateway,interfaces;public,static,set,class,extends,rpc,gateway,extract,implemented,rpc,gateways,class,clazz,hash,set,class,extends,rpc,gateway,interfaces,new,hash,set,while,clazz,null,for,class,interfaze,clazz,get,interfaces,if,rpc,gateway,class,is,assignable,from,interfaze,interfaces,add,class,extends,rpc,gateway,interfaze,clazz,clazz,get,superclass,return,interfaces
RpcUtils -> public static Set<Class<? extends RpcGateway>> extractImplementedRpcGateways(Class<?> clazz);1518803202;Extracts all {@link RpcGateway} interfaces implemented by the given clazz.__@param clazz from which to extract the implemented RpcGateway interfaces_@return A set of all implemented RpcGateway interfaces;public static Set<Class<? extends RpcGateway>> extractImplementedRpcGateways(Class<?> clazz) {_		HashSet<Class<? extends RpcGateway>> interfaces = new HashSet<>()___		while (clazz != null) {_			for (Class<?> interfaze : clazz.getInterfaces()) {_				if (RpcGateway.class.isAssignableFrom(interfaze)) {_					interfaces.add((Class<? extends RpcGateway>) interfaze)__				}_			}__			clazz = clazz.getSuperclass()__		}__		return interfaces__	};extracts,all,link,rpc,gateway,interfaces,implemented,by,the,given,clazz,param,clazz,from,which,to,extract,the,implemented,rpc,gateway,interfaces,return,a,set,of,all,implemented,rpc,gateway,interfaces;public,static,set,class,extends,rpc,gateway,extract,implemented,rpc,gateways,class,clazz,hash,set,class,extends,rpc,gateway,interfaces,new,hash,set,while,clazz,null,for,class,interfaze,clazz,get,interfaces,if,rpc,gateway,class,is,assignable,from,interfaze,interfaces,add,class,extends,rpc,gateway,interfaze,clazz,clazz,get,superclass,return,interfaces
RpcUtils -> public static Set<Class<? extends RpcGateway>> extractImplementedRpcGateways(Class<?> clazz);1542105728;Extracts all {@link RpcGateway} interfaces implemented by the given clazz.__@param clazz from which to extract the implemented RpcGateway interfaces_@return A set of all implemented RpcGateway interfaces;public static Set<Class<? extends RpcGateway>> extractImplementedRpcGateways(Class<?> clazz) {_		HashSet<Class<? extends RpcGateway>> interfaces = new HashSet<>()___		while (clazz != null) {_			for (Class<?> interfaze : clazz.getInterfaces()) {_				if (RpcGateway.class.isAssignableFrom(interfaze)) {_					interfaces.add((Class<? extends RpcGateway>) interfaze)__				}_			}__			clazz = clazz.getSuperclass()__		}__		return interfaces__	};extracts,all,link,rpc,gateway,interfaces,implemented,by,the,given,clazz,param,clazz,from,which,to,extract,the,implemented,rpc,gateway,interfaces,return,a,set,of,all,implemented,rpc,gateway,interfaces;public,static,set,class,extends,rpc,gateway,extract,implemented,rpc,gateways,class,clazz,hash,set,class,extends,rpc,gateway,interfaces,new,hash,set,while,clazz,null,for,class,interfaze,clazz,get,interfaces,if,rpc,gateway,class,is,assignable,from,interfaze,interfaces,add,class,extends,rpc,gateway,interfaze,clazz,clazz,get,superclass,return,interfaces
RpcUtils -> public static Set<Class<? extends RpcGateway>> extractImplementedRpcGateways(Class<?> clazz);1549983516;Extracts all {@link RpcGateway} interfaces implemented by the given clazz.__@param clazz from which to extract the implemented RpcGateway interfaces_@return A set of all implemented RpcGateway interfaces;public static Set<Class<? extends RpcGateway>> extractImplementedRpcGateways(Class<?> clazz) {_		HashSet<Class<? extends RpcGateway>> interfaces = new HashSet<>()___		while (clazz != null) {_			for (Class<?> interfaze : clazz.getInterfaces()) {_				if (RpcGateway.class.isAssignableFrom(interfaze)) {_					interfaces.add((Class<? extends RpcGateway>) interfaze)__				}_			}__			clazz = clazz.getSuperclass()__		}__		return interfaces__	};extracts,all,link,rpc,gateway,interfaces,implemented,by,the,given,clazz,param,clazz,from,which,to,extract,the,implemented,rpc,gateway,interfaces,return,a,set,of,all,implemented,rpc,gateway,interfaces;public,static,set,class,extends,rpc,gateway,extract,implemented,rpc,gateways,class,clazz,hash,set,class,extends,rpc,gateway,interfaces,new,hash,set,while,clazz,null,for,class,interfaze,clazz,get,interfaces,if,rpc,gateway,class,is,assignable,from,interfaze,interfaces,add,class,extends,rpc,gateway,interfaze,clazz,clazz,get,superclass,return,interfaces
RpcUtils -> public static void terminateRpcEndpoint(RpcEndpoint rpcEndpoint, Time timeout) throws ExecutionException, InterruptedException, TimeoutException;1502886973;Shuts the given {@link RpcEndpoint} down and awaits its termination.__@param rpcEndpoint to terminate_@param timeout for this operation_@throws ExecutionException if a problem occurs_@throws InterruptedException if the operation has been interrupted_@throws TimeoutException if a timeout occurred;public static void terminateRpcEndpoint(RpcEndpoint rpcEndpoint, Time timeout) throws ExecutionException, InterruptedException, TimeoutException {_		rpcEndpoint.shutDown()__		rpcEndpoint.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};shuts,the,given,link,rpc,endpoint,down,and,awaits,its,termination,param,rpc,endpoint,to,terminate,param,timeout,for,this,operation,throws,execution,exception,if,a,problem,occurs,throws,interrupted,exception,if,the,operation,has,been,interrupted,throws,timeout,exception,if,a,timeout,occurred;public,static,void,terminate,rpc,endpoint,rpc,endpoint,rpc,endpoint,time,timeout,throws,execution,exception,interrupted,exception,timeout,exception,rpc,endpoint,shut,down,rpc,endpoint,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds
RpcUtils -> public static void terminateRpcEndpoint(RpcEndpoint rpcEndpoint, Time timeout) throws ExecutionException, InterruptedException, TimeoutException;1514829582;Shuts the given {@link RpcEndpoint} down and awaits its termination.__@param rpcEndpoint to terminate_@param timeout for this operation_@throws ExecutionException if a problem occurs_@throws InterruptedException if the operation has been interrupted_@throws TimeoutException if a timeout occurred;public static void terminateRpcEndpoint(RpcEndpoint rpcEndpoint, Time timeout) throws ExecutionException, InterruptedException, TimeoutException {_		rpcEndpoint.shutDown()__		rpcEndpoint.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};shuts,the,given,link,rpc,endpoint,down,and,awaits,its,termination,param,rpc,endpoint,to,terminate,param,timeout,for,this,operation,throws,execution,exception,if,a,problem,occurs,throws,interrupted,exception,if,the,operation,has,been,interrupted,throws,timeout,exception,if,a,timeout,occurred;public,static,void,terminate,rpc,endpoint,rpc,endpoint,rpc,endpoint,time,timeout,throws,execution,exception,interrupted,exception,timeout,exception,rpc,endpoint,shut,down,rpc,endpoint,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds
RpcUtils -> public static void terminateRpcEndpoint(RpcEndpoint rpcEndpoint, Time timeout) throws ExecutionException, InterruptedException, TimeoutException;1518803202;Shuts the given {@link RpcEndpoint} down and awaits its termination.__@param rpcEndpoint to terminate_@param timeout for this operation_@throws ExecutionException if a problem occurred_@throws InterruptedException if the operation has been interrupted_@throws TimeoutException if a timeout occurred;public static void terminateRpcEndpoint(RpcEndpoint rpcEndpoint, Time timeout) throws ExecutionException, InterruptedException, TimeoutException {_		rpcEndpoint.shutDown()__		rpcEndpoint.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};shuts,the,given,link,rpc,endpoint,down,and,awaits,its,termination,param,rpc,endpoint,to,terminate,param,timeout,for,this,operation,throws,execution,exception,if,a,problem,occurred,throws,interrupted,exception,if,the,operation,has,been,interrupted,throws,timeout,exception,if,a,timeout,occurred;public,static,void,terminate,rpc,endpoint,rpc,endpoint,rpc,endpoint,time,timeout,throws,execution,exception,interrupted,exception,timeout,exception,rpc,endpoint,shut,down,rpc,endpoint,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds
RpcUtils -> public static void terminateRpcEndpoint(RpcEndpoint rpcEndpoint, Time timeout) throws ExecutionException, InterruptedException, TimeoutException;1542105728;Shuts the given {@link RpcEndpoint} down and awaits its termination.__@param rpcEndpoint to terminate_@param timeout for this operation_@throws ExecutionException if a problem occurred_@throws InterruptedException if the operation has been interrupted_@throws TimeoutException if a timeout occurred;public static void terminateRpcEndpoint(RpcEndpoint rpcEndpoint, Time timeout) throws ExecutionException, InterruptedException, TimeoutException {_		rpcEndpoint.shutDown()__		rpcEndpoint.getTerminationFuture().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};shuts,the,given,link,rpc,endpoint,down,and,awaits,its,termination,param,rpc,endpoint,to,terminate,param,timeout,for,this,operation,throws,execution,exception,if,a,problem,occurred,throws,interrupted,exception,if,the,operation,has,been,interrupted,throws,timeout,exception,if,a,timeout,occurred;public,static,void,terminate,rpc,endpoint,rpc,endpoint,rpc,endpoint,time,timeout,throws,execution,exception,interrupted,exception,timeout,exception,rpc,endpoint,shut,down,rpc,endpoint,get,termination,future,get,timeout,to,milliseconds,time,unit,milliseconds
RpcUtils -> public static void terminateRpcEndpoint(RpcEndpoint rpcEndpoint, Time timeout) throws ExecutionException, InterruptedException, TimeoutException;1549983516;Shuts the given {@link RpcEndpoint} down and awaits its termination.__@param rpcEndpoint to terminate_@param timeout for this operation_@throws ExecutionException if a problem occurred_@throws InterruptedException if the operation has been interrupted_@throws TimeoutException if a timeout occurred;public static void terminateRpcEndpoint(RpcEndpoint rpcEndpoint, Time timeout) throws ExecutionException, InterruptedException, TimeoutException {_		rpcEndpoint.closeAsync().get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};shuts,the,given,link,rpc,endpoint,down,and,awaits,its,termination,param,rpc,endpoint,to,terminate,param,timeout,for,this,operation,throws,execution,exception,if,a,problem,occurred,throws,interrupted,exception,if,the,operation,has,been,interrupted,throws,timeout,exception,if,a,timeout,occurred;public,static,void,terminate,rpc,endpoint,rpc,endpoint,rpc,endpoint,time,timeout,throws,execution,exception,interrupted,exception,timeout,exception,rpc,endpoint,close,async,get,timeout,to,milliseconds,time,unit,milliseconds
RpcUtils -> public static void terminateRpcServices( 			Time timeout, 			RpcService... rpcServices) throws InterruptedException, ExecutionException, TimeoutException;1542105728;Shuts the given rpc services down and waits for their termination.__@param rpcServices to shut down_@param timeout for this operation_@throws InterruptedException if the operation has been interrupted_@throws ExecutionException if a problem occurred_@throws TimeoutException if a timeout occurred;public static void terminateRpcServices(_			Time timeout,_			RpcService... rpcServices) throws InterruptedException, ExecutionException, TimeoutException {_		final Collection<CompletableFuture<?>> terminationFutures = new ArrayList<>(rpcServices.length)___		for (RpcService service : rpcServices) {_			if (service != null) {_				terminationFutures.add(service.stopService())__			}_		}__		FutureUtils.waitForAll(terminationFutures).get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};shuts,the,given,rpc,services,down,and,waits,for,their,termination,param,rpc,services,to,shut,down,param,timeout,for,this,operation,throws,interrupted,exception,if,the,operation,has,been,interrupted,throws,execution,exception,if,a,problem,occurred,throws,timeout,exception,if,a,timeout,occurred;public,static,void,terminate,rpc,services,time,timeout,rpc,service,rpc,services,throws,interrupted,exception,execution,exception,timeout,exception,final,collection,completable,future,termination,futures,new,array,list,rpc,services,length,for,rpc,service,service,rpc,services,if,service,null,termination,futures,add,service,stop,service,future,utils,wait,for,all,termination,futures,get,timeout,to,milliseconds,time,unit,milliseconds
RpcUtils -> public static void terminateRpcServices( 			Time timeout, 			RpcService... rpcServices) throws InterruptedException, ExecutionException, TimeoutException;1549983516;Shuts the given rpc services down and waits for their termination.__@param rpcServices to shut down_@param timeout for this operation_@throws InterruptedException if the operation has been interrupted_@throws ExecutionException if a problem occurred_@throws TimeoutException if a timeout occurred;public static void terminateRpcServices(_			Time timeout,_			RpcService... rpcServices) throws InterruptedException, ExecutionException, TimeoutException {_		final Collection<CompletableFuture<?>> terminationFutures = new ArrayList<>(rpcServices.length)___		for (RpcService service : rpcServices) {_			if (service != null) {_				terminationFutures.add(service.stopService())__			}_		}__		FutureUtils.waitForAll(terminationFutures).get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS)__	};shuts,the,given,rpc,services,down,and,waits,for,their,termination,param,rpc,services,to,shut,down,param,timeout,for,this,operation,throws,interrupted,exception,if,the,operation,has,been,interrupted,throws,execution,exception,if,a,problem,occurred,throws,timeout,exception,if,a,timeout,occurred;public,static,void,terminate,rpc,services,time,timeout,rpc,service,rpc,services,throws,interrupted,exception,execution,exception,timeout,exception,final,collection,completable,future,termination,futures,new,array,list,rpc,services,length,for,rpc,service,service,rpc,services,if,service,null,termination,futures,add,service,stop,service,future,utils,wait,for,all,termination,futures,get,timeout,to,milliseconds,time,unit,milliseconds
